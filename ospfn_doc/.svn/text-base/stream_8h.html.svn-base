<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/stream.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('stream_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">lib/stream.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for stream.h:</div>
<div class="dyncontent">
<div class="center"><img src="stream_8h__incl.png" border="0" usemap="#lib_2stream_8h" alt=""/></div>
<map name="lib_2stream_8h" id="lib_2stream_8h">
<area shape="rect" id="node3" href="prefix_8h.html" title="prefix.h" alt="" coords="18,80,85,107"/><area shape="rect" id="node5" href="sockunion_8h.html" title="sockunion.h" alt="" coords="5,155,99,181"/></map>
</div>
</div>
<p><a href="stream_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstream.html">stream</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstream__fifo.html">stream_fifo</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a>(S)&#160;&#160;&#160;((S)-&gt;size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a>(S)&#160;&#160;&#160;((S)-&gt;size - (S)-&gt;endp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(S)&#160;&#160;&#160;((S)-&gt;endp - (S)-&gt;getp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a>(S)&#160;&#160;&#160;stream_pnt((S))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a>(S)&#160;&#160;&#160;((S)-&gt;data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a>(S)&#160;&#160;&#160;STREAM_WRITEABLE((S))</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a06b887cc56385d5f17f3fa4fbcf5ad60">stream_new</a> (size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#afd576f72e550db4fb4f7de658a57ba4c">stream_free</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a4ad7a2bc408ead874a17c18a403cb9fd">stream_copy</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structstream.html">stream</a> *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a0762ebe9027bfb9896400a969e222c59">stream_dup</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a358db5821552a5442a5c898819f5902b">stream_resize</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a2d51240e2a5604eab8e79774027a2c6b">stream_get_getp</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a75cd9af4cf852b1784c7b51f96bb673b">stream_get_endp</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a005f802b1fe01e1114733df3552f7cbf">stream_get_size</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a0445b475433517e54a69c62c9878e81e">stream_get_data</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ae7b34b7b3a5a7193ef41c41a6b9ab493">stream_set_getp</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ab1d52ef6d209297141c41ad425446a44">stream_forward_getp</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a968a545ac7ff3549fc4d7071c70edbac">stream_forward_endp</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ad9ceab197a337254e8ef0c0a469b9a05">stream_put</a> (struct <a class="el" href="structstream.html">stream</a> *, const void *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a1a2467cac06ec6f636e467baf88697d5">stream_putc</a> (struct <a class="el" href="structstream.html">stream</a> *, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a0d47cdf8c033beadba54d59557e4ea05">stream_putc_at</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a325887972d4a0deb05c932a4b5786818">stream_putw</a> (struct <a class="el" href="structstream.html">stream</a> *, u_int16_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a6af7aead848d7915e987d672c7b16374">stream_putw_at</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t, u_int16_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a034044dc487b951b15b23f9274527866">stream_putl</a> (struct <a class="el" href="structstream.html">stream</a> *, u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ab773c755533174d1e7dac228eca5105d">stream_putl_at</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t, u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ad043cee8d38df9dcc49beab4978f6f00">stream_putq</a> (struct <a class="el" href="structstream.html">stream</a> *, uint64_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a2cfb84619f741059389671806dd4f0f8">stream_putq_at</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t, uint64_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#aad45c57569dc24d503db1f0470c715ad">stream_put_ipv4</a> (struct <a class="el" href="structstream.html">stream</a> *, u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#af5476f24039dc99d7836c6a1b5d226b4">stream_put_in_addr</a> (struct <a class="el" href="structstream.html">stream</a> *, struct in_addr *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ab8b763794076f5e5ef025cd9c4bf8086">stream_get</a> (void *, struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#acee01311bd6431a3cfebf6a631d7a731">stream_getc</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a3a844c2e213fe4d6527e0f3ba44dda96">stream_getc_from</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a8aa5e7964a85213a03ba7f9f48c9eaf2">stream_getw</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#af8b3868f90b209475ffd7dc8f44f639d">stream_getw_from</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ae87cd905faa442de854a8ec333aeb170">stream_getl</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a443328451b1053c921fa919ed7a3564e">stream_getl_from</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a791b22a8c91ede080aacda0c96bacea4">stream_getq</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a2e26d946a92794fc37964f1405c8a489">stream_getq_from</a> (struct <a class="el" href="structstream.html">stream</a> *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a93277541ce72c0fc1a66bc5e477d43c8">stream_get_ipv4</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ac8c7029cfd1e8558ff63dfb61c0252d1">stream_read</a> (struct <a class="el" href="structstream.html">stream</a> *, int, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ad4cf41eb3a22cbcc38433314d73b4763">stream_read_unblock</a> (struct <a class="el" href="structstream.html">stream</a> *, int, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ssize_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a9505861c61983da4470a3689cfb994dd">stream_read_try</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, int fd, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ssize_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a945b899ecd2f8b5af9b7499c946f6d8e">stream_recvmsg</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, int fd, struct msghdr *, int <a class="el" href="structflags.html">flags</a>, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ssize_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a05001ca843142c6ace0e4df8f30fe3fd">stream_recvfrom</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, int fd, size_t len, int <a class="el" href="structflags.html">flags</a>, struct sockaddr *from, <a class="el" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> *fromlen)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#afce4e7540690d5daed191afbb353df68">stream_write</a> (struct <a class="el" href="structstream.html">stream</a> *, const void *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ad2f4d1460b683629a348501ad2d4195d">stream_reset</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ad30841f2a99d2b8ebd158a18ee300a1e">stream_flush</a> (struct <a class="el" href="structstream.html">stream</a> *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#ab8204d862e5956bc5f474c7f482a2b47">stream_empty</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a61ca36f56508b7dd2c9d2de5408f8e25">stream_pnt</a> (struct <a class="el" href="structstream.html">stream</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#acebca866d54cab1ea0a10f3c30de69aa">stream_fifo_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a3aac13f498e678975277dd9017f912bd">stream_fifo_push</a> (struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *<a class="el" href="structfifo.html">fifo</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#aabd281e811fa716e5c22fe485acbb68e">stream_fifo_pop</a> (struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *<a class="el" href="structfifo.html">fifo</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *<a class="el" href="structfifo.html">fifo</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a9e1a6e68edeeb87d009b54c7c2b22365">stream_fifo_clean</a> (struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *<a class="el" href="structfifo.html">fifo</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stream_8h.html#a83c91b4a974d809a25cda9e7f7e28718">stream_fifo_free</a> (struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *<a class="el" href="structfifo.html">fifo</a>)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="afde5f5db208a43da6faf7b830f26d7fc"></a><!-- doxytag: member="stream.h::STREAM_DATA" ref="afde5f5db208a43da6faf7b830f26d7fc" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_DATA</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;((S)-&gt;data)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00127">127</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4bb95ef1391c2b8b7b97678a5ad87cb7"></a><!-- doxytag: member="stream.h::STREAM_PNT" ref="a4bb95ef1391c2b8b7b97678a5ad87cb7" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_PNT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;stream_pnt((S))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00126">126</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2ee10df7505e651c986579a9a1fb3d91"></a><!-- doxytag: member="stream.h::STREAM_READABLE" ref="a2ee10df7505e651c986579a9a1fb3d91" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_READABLE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;((S)-&gt;endp - (S)-&gt;getp)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00123">123</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4705f0b1797c4f896404ec1549c91017"></a><!-- doxytag: member="stream.h::STREAM_REMAIN" ref="a4705f0b1797c4f896404ec1549c91017" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_REMAIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;STREAM_WRITEABLE((S))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00128">128</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6e3b6e25ed5cfa2faea8485414a0c1a4"></a><!-- doxytag: member="stream.h::STREAM_SIZE" ref="a6e3b6e25ed5cfa2faea8485414a0c1a4" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_SIZE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;((S)-&gt;size)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00119">119</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9e7170eddfbd82389e4fcbbb0185f70f"></a><!-- doxytag: member="stream.h::STREAM_WRITEABLE" ref="a9e7170eddfbd82389e4fcbbb0185f70f" args="(S)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STREAM_WRITEABLE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S</td><td>)</td>
          <td>&#160;&#160;&#160;((S)-&gt;size - (S)-&gt;endp)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8h_source.html#l00121">121</a> of file <a class="el" href="stream_8h_source.html">stream.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a4ad7a2bc408ead874a17c18a403cb9fd"></a><!-- doxytag: member="stream.h::stream_copy" ref="a4ad7a2bc408ead874a17c18a403cb9fd" args="(struct stream *, struct stream *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* stream_copy </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00129">129</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (src);
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<span class="keyword">new</span> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a>(<span class="keyword">new</span>) &gt;= src-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>);

  <span class="keyword">new</span>-&gt;endp = src-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>;
  <span class="keyword">new</span>-&gt;getp = src-&gt;<a class="code" href="structstream.html#adb2dceb1b9e09edf611d9076a7a1a491">getp</a>;
  
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, src-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, src-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>);
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0762ebe9027bfb9896400a969e222c59"></a><!-- doxytag: member="stream.h::stream_dup" ref="a0762ebe9027bfb9896400a969e222c59" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* stream_dup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00145">145</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<span class="keyword">new</span>;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> (<a class="code" href="stream_8c.html#a53dd7429b44228c374706fdc5e35c6ae">stream_copy</a> (<span class="keyword">new</span>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8204d862e5956bc5f474c7f482a2b47"></a><!-- doxytag: member="stream.h::stream_empty" ref="ab8204d862e5956bc5f474c7f482a2b47" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_empty </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00869">869</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">return</span> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp == 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9e1a6e68edeeb87d009b54c7c2b22365"></a><!-- doxytag: member="stream.h::stream_fifo_clean" ref="a9e1a6e68edeeb87d009b54c7c2b22365" args="(struct stream_fifo *fifo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_fifo_clean </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td>
          <td class="paramname"><em>fifo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00952">952</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="structstream.html#a07de813e66437a5fa93a527e06a7a267">next</a>;

  <span class="keywordflow">for</span> (s = fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a>; s; s = next)
    {
      next = s-&gt;<a class="code" href="structstream.html#a07de813e66437a5fa93a527e06a7a267">next</a>;
      <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
    }
  fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a> = fifo-&gt;<a class="code" href="structstream__fifo.html#a6dd12decb2fc8621f7a1b3933ece9430">tail</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  fifo-&gt;<a class="code" href="structstream__fifo.html#add36d38b8a5f61874731338987d4e760">count</a> = 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a83c91b4a974d809a25cda9e7f7e28718"></a><!-- doxytag: member="stream.h::stream_fifo_free" ref="a83c91b4a974d809a25cda9e7f7e28718" args="(struct stream_fifo *fifo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_fifo_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td>
          <td class="paramname"><em>fifo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00967">967</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#a9e1a6e68edeeb87d009b54c7c2b22365">stream_fifo_clean</a> (fifo);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba573add0e3d984ccb86efc67f2ee19e3d">MTYPE_STREAM_FIFO</a>, fifo);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a11eebf8ef20ce7257c51bc7efc6b17de"></a><!-- doxytag: member="stream.h::stream_fifo_head" ref="a11eebf8ef20ce7257c51bc7efc6b17de" args="(struct stream_fifo *fifo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* stream_fifo_head </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td>
          <td class="paramname"><em>fifo</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00946">946</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acebca866d54cab1ea0a10f3c30de69aa"></a><!-- doxytag: member="stream.h::stream_fifo_new" ref="acebca866d54cab1ea0a10f3c30de69aa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream__fifo.html">stream_fifo</a>* stream_fifo_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00901">901</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream__fifo.html">stream_fifo</a> *<span class="keyword">new</span>;
 
  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba573add0e3d984ccb86efc67f2ee19e3d">MTYPE_STREAM_FIFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structstream__fifo.html">stream_fifo</a>));
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aabd281e811fa716e5c22fe485acbb68e"></a><!-- doxytag: member="stream.h::stream_fifo_pop" ref="aabd281e811fa716e5c22fe485acbb68e" args="(struct stream_fifo *fifo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* stream_fifo_pop </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td>
          <td class="paramname"><em>fifo</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00925">925</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  
  s = fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a>; 

  <span class="keywordflow">if</span> (s)
    { 
      fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a> = s-&gt;<a class="code" href="structstream.html#a07de813e66437a5fa93a527e06a7a267">next</a>;

      <span class="keywordflow">if</span> (fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    fifo-&gt;<a class="code" href="structstream__fifo.html#a6dd12decb2fc8621f7a1b3933ece9430">tail</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  fifo-&gt;<a class="code" href="structstream__fifo.html#add36d38b8a5f61874731338987d4e760">count</a>--;

  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3aac13f498e678975277dd9017f912bd"></a><!-- doxytag: member="stream.h::stream_fifo_push" ref="a3aac13f498e678975277dd9017f912bd" args="(struct stream_fifo *fifo, struct stream *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_fifo_push </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream__fifo.html">stream_fifo</a> *&#160;</td>
          <td class="paramname"><em>fifo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00911">911</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (fifo-&gt;<a class="code" href="structstream__fifo.html#a6dd12decb2fc8621f7a1b3933ece9430">tail</a>)
    fifo-&gt;<a class="code" href="structstream__fifo.html#a6dd12decb2fc8621f7a1b3933ece9430">tail</a>-&gt;<a class="code" href="structstream.html#a07de813e66437a5fa93a527e06a7a267">next</a> = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordflow">else</span>
    fifo-&gt;<a class="code" href="structstream__fifo.html#a6d1297e87b6731221b0271f7c5f7fc25">head</a> = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
     
  fifo-&gt;<a class="code" href="structstream__fifo.html#a6dd12decb2fc8621f7a1b3933ece9430">tail</a> = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;

  fifo-&gt;<a class="code" href="structstream__fifo.html#add36d38b8a5f61874731338987d4e760">count</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad30841f2a99d2b8ebd158a18ee300a1e"></a><!-- doxytag: member="stream.h::stream_flush" ref="ad30841f2a99d2b8ebd158a18ee300a1e" args="(struct stream *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_flush </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00887">887</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  nbytes = write (fd, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp - <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp);
  
  <span class="keywordflow">return</span> nbytes;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a968a545ac7ff3549fc4d7071c70edbac"></a><!-- doxytag: member="stream.h::stream_forward_endp" ref="a968a545ac7ff3549fc4d7071c70edbac" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_forward_endp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00233">233</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#a7f4acab86feec64e1445af104c249f58">ENDP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp + <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;seek endp&quot;</span>);
      <span class="keywordflow">return</span>;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1d52ef6d209297141c41ad425446a44"></a><!-- doxytag: member="stream.h::stream_forward_getp" ref="ab1d52ef6d209297141c41ad425446a44" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_forward_getp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00219">219</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp + <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;seek getp&quot;</span>);
      <span class="keywordflow">return</span>;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp += <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afd576f72e550db4fb4f7de658a57ba4c"></a><!-- doxytag: member="stream.h::stream_free" ref="afd576f72e550db4fb4f7de658a57ba4c" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00119">119</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
    <span class="keywordflow">return</span>;
  
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a2400fa8e781effd85b44c7c6455855">MTYPE_STREAM_DATA</a>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba507fa48b3217d17ae36220808fc64d7e">MTYPE_STREAM</a>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8b763794076f5e5ef025cd9c4bf8086"></a><!-- doxytag: member="stream.h::stream_get" ref="ab8b763794076f5e5ef025cd9c4bf8086" args="(void *, struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_get </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00248">248</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get&quot;</span>);
      <span class="keywordflow">return</span>;
    }
  
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dst, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp += <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0445b475433517e54a69c62c9878e81e"></a><!-- doxytag: member="stream.h::stream_get_data" ref="a0445b475433517e54a69c62c9878e81e" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char* stream_get_data </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a75cd9af4cf852b1784c7b51f96bb673b"></a><!-- doxytag: member="stream.h::stream_get_endp" ref="a75cd9af4cf852b1784c7b51f96bb673b" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t stream_get_endp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00189">189</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2d51240e2a5604eab8e79774027a2c6b"></a><!-- doxytag: member="stream.h::stream_get_getp" ref="a2d51240e2a5604eab8e79774027a2c6b" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t stream_get_getp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00182">182</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a93277541ce72c0fc1a66bc5e477d43c8"></a><!-- doxytag: member="stream.h::stream_get_ipv4" ref="a93277541ce72c0fc1a66bc5e477d43c8" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t stream_get_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00435">435</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span>(u_int32_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get ipv4&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;l, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp, <span class="keyword">sizeof</span>(u_int32_t));
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp += <span class="keyword">sizeof</span>(u_int32_t);

  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a005f802b1fe01e1114733df3552f7cbf"></a><!-- doxytag: member="stream.h::stream_get_size" ref="a005f802b1fe01e1114733df3552f7cbf" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t stream_get_size </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00196">196</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acee01311bd6431a3cfebf6a631d7a731"></a><!-- doxytag: member="stream.h::stream_getc" ref="acee01311bd6431a3cfebf6a631d7a731" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char stream_getc </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00264">264</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char c;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_char))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get char&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  c = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++];
  
  <span class="keywordflow">return</span> c;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3a844c2e213fe4d6527e0f3ba44dda96"></a><!-- doxytag: member="stream.h::stream_getc_from" ref="a3a844c2e213fe4d6527e0f3ba44dda96" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char stream_getc_from </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00282">282</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char c;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, from + <span class="keyword">sizeof</span> (u_char)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get char&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  c = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from];
  
  <span class="keywordflow">return</span> c;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae87cd905faa442de854a8ec333aeb170"></a><!-- doxytag: member="stream.h::stream_getl" ref="ae87cd905faa442de854a8ec333aeb170" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t stream_getl </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00362">362</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int32_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get long&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  l  = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++] &lt;&lt; 24;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++] &lt;&lt; 16;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++] &lt;&lt; 8;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++];
  
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a443328451b1053c921fa919ed7a3564e"></a><!-- doxytag: member="stream.h::stream_getl_from" ref="a443328451b1053c921fa919ed7a3564e" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t stream_getl_from </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00341">341</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, from + <span class="keyword">sizeof</span> (u_int32_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get long&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  l  = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++] &lt;&lt; 24;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++] &lt;&lt; 16;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++] &lt;&lt; 8;
  l |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from];
  
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a791b22a8c91ede080aacda0c96bacea4"></a><!-- doxytag: member="stream.h::stream_getq" ref="a791b22a8c91ede080aacda0c96bacea4" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t stream_getq </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00409">409</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  uint64_t q;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (uint64_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get quad&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  q  = ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 56;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 48;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 40;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 32;  
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 24;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 16;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]) &lt;&lt; 8;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++]);
  
  <span class="keywordflow">return</span> q;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2e26d946a92794fc37964f1405c8a489"></a><!-- doxytag: member="stream.h::stream_getq_from" ref="a2e26d946a92794fc37964f1405c8a489" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t stream_getq_from </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00384">384</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  uint64_t q;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, from + <span class="keyword">sizeof</span> (uint64_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get quad&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  q  = ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 56;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 48;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 40;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 32;  
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 24;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 16;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]) &lt;&lt; 8;
  q |= ((uint64_t) <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++]);
  
  <span class="keywordflow">return</span> q;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8aa5e7964a85213a03ba7f9f48c9eaf2"></a><!-- doxytag: member="stream.h::stream_getw" ref="a8aa5e7964a85213a03ba7f9f48c9eaf2" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int16_t stream_getw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00301">301</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int16_t w;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int16_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get &quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  w = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++] &lt;&lt; 8;
  w |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp++];
  
  <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af8b3868f90b209475ffd7dc8f44f639d"></a><!-- doxytag: member="stream.h::stream_getw_from" ref="af8b3868f90b209475ffd7dc8f44f639d" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int16_t stream_getw_from </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00321">321</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int16_t w;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, from + <span class="keyword">sizeof</span> (u_int16_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;get &quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  w = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from++] &lt;&lt; 8;
  w |= <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[from];
  
  <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a06b887cc56385d5f17f3fa4fbcf5ad60"></a><!-- doxytag: member="stream.h::stream_new" ref="a06b887cc56385d5f17f3fa4fbcf5ad60" args="(size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* stream_new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00090">90</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> &gt; 0);
  
  <span class="keywordflow">if</span> (<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> == 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;stream_new(): called with 0 size!&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  s = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba507fa48b3217d17ae36220808fc64d7e">MTYPE_STREAM</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a>));

  <span class="keywordflow">if</span> (s == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  
  <span class="keywordflow">if</span> ( (s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a2400fa8e781effd85b44c7c6455855">MTYPE_STREAM_DATA</a>, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba507fa48b3217d17ae36220808fc64d7e">MTYPE_STREAM</a>, s);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  s-&gt;<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> = <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>;
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a61ca36f56508b7dd2c9d2de5408f8e25"></a><!-- doxytag: member="stream.h::stream_pnt" ref="a61ca36f56508b7dd2c9d2de5408f8e25" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char* stream_pnt </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00861">861</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad9ceab197a337254e8ef0c0a469b9a05"></a><!-- doxytag: member="stream.h::stream_put" ref="ad9ceab197a337254e8ef0c0a469b9a05" args="(struct stream *, const void *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_put </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00461">461</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">/* XXX: CHECK_SIZE has strange semantics. It should be deprecated */</span>
  <a class="code" href="stream_8c.html#abf8c604d1df5413a702b837173945978">CHECK_SIZE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span>;
    }
  
  <span class="keywordflow">if</span> (src)
    <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, src, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);
  <span class="keywordflow">else</span>
    memset (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, 0, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);

  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af5476f24039dc99d7836c6a1b5d226b4"></a><!-- doxytag: member="stream.h::stream_put_in_addr" ref="af5476f24039dc99d7836c6a1b5d226b4" args="(struct stream *, struct in_addr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_put_in_addr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00653">653</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int32_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, addr, sizeof (u_int32_t));
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += <span class="keyword">sizeof</span> (u_int32_t);

  <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (u_int32_t);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aad45c57569dc24d503db1f0470c715ad"></a><!-- doxytag: member="stream.h::stream_put_ipv4" ref="aad45c57569dc24d503db1f0470c715ad" args="(struct stream *, u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_put_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00636">636</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int32_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, &amp;<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>, sizeof (u_int32_t));
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += <span class="keyword">sizeof</span> (u_int32_t);

  <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (u_int32_t);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a003809094eb7833898bd97bf6da16d3b"></a><!-- doxytag: member="stream.h::stream_put_prefix" ref="a003809094eb7833898bd97bf6da16d3b" args="(struct stream *, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_put_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00671">671</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> psize;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; psize)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, psize);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += psize;
  
  <span class="keywordflow">return</span> psize;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a2467cac06ec6f636e467baf88697d5"></a><!-- doxytag: member="stream.h::stream_putc" ref="a1a2467cac06ec6f636e467baf88697d5" args="(struct stream *, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putc </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00485">485</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span>(u_char))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = c;
  <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (u_char);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0d47cdf8c033beadba54d59557e4ea05"></a><!-- doxytag: member="stream.h::stream_putc_at" ref="a0d47cdf8c033beadba54d59557e4ea05" args="(struct stream *, size_t, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putc_at </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00562">562</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#ae4605ecb62a525fd03561616f12db22a">PUT_AT_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, putp + <span class="keyword">sizeof</span> (u_char)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp] = c;
  
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a034044dc487b951b15b23f9274527866"></a><!-- doxytag: member="stream.h::stream_putl" ref="a034044dc487b951b15b23f9274527866" args="(struct stream *, u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putl </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00519">519</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int32_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt; 24);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt; 16);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;

  <span class="keywordflow">return</span> 4;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab773c755533174d1e7dac228eca5105d"></a><!-- doxytag: member="stream.h::stream_putl_at" ref="ab773c755533174d1e7dac228eca5105d" args="(struct stream *, size_t, u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putl_at </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00595">595</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#ae4605ecb62a525fd03561616f12db22a">PUT_AT_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, putp + <span class="keyword">sizeof</span> (u_int32_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt; 24);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 1] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt; 16);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 2] = (u_char)(<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 3] = (u_char)<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
  
  <span class="keywordflow">return</span> 4;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad043cee8d38df9dcc49beab4978f6f00"></a><!-- doxytag: member="stream.h::stream_putq" ref="ad043cee8d38df9dcc49beab4978f6f00" args="(struct stream *, uint64_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putq </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00539">539</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (uint64_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put quad&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 56);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 48);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 40);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 32);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 24);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt; 16);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(q &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)q;

  <span class="keywordflow">return</span> 8;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2cfb84619f741059389671806dd4f0f8"></a><!-- doxytag: member="stream.h::stream_putq_at" ref="a2cfb84619f741059389671806dd4f0f8" args="(struct stream *, size_t, uint64_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putq_at </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00613">613</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#ae4605ecb62a525fd03561616f12db22a">PUT_AT_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, putp + <span class="keyword">sizeof</span> (uint64_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp] =     (u_char)(q &gt;&gt; 56);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 1] = (u_char)(q &gt;&gt; 48);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 2] = (u_char)(q &gt;&gt; 40);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 3] = (u_char)(q &gt;&gt; 32);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 4] = (u_char)(q &gt;&gt; 24);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 5] = (u_char)(q &gt;&gt; 16);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 6] = (u_char)(q &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 7] = (u_char)q;
  
  <span class="keywordflow">return</span> 8;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a325887972d4a0deb05c932a4b5786818"></a><!-- doxytag: member="stream.h::stream_putw" ref="a325887972d4a0deb05c932a4b5786818" args="(struct stream *, u_int16_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00501">501</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <span class="keyword">sizeof</span> (u_int16_t))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char)(w &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp++] = (u_char) w;

  <span class="keywordflow">return</span> 2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6af7aead848d7915e987d672c7b16374"></a><!-- doxytag: member="stream.h::stream_putw_at" ref="a6af7aead848d7915e987d672c7b16374" args="(struct stream *, size_t, u_int16_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_putw_at </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00578">578</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#ae4605ecb62a525fd03561616f12db22a">PUT_AT_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, putp + <span class="keyword">sizeof</span> (u_int16_t)))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp] = (u_char)(w &gt;&gt;  8);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data[putp + 1] = (u_char) w;
  
  <span class="keywordflow">return</span> 2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8c7029cfd1e8558ff63dfb61c0252d1"></a><!-- doxytag: member="stream.h::stream_read" ref="ac8c7029cfd1e8558ff63dfb61c0252d1" args="(struct stream *, int, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00694">694</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  nbytes = <a class="code" href="network_8c.html#a27ff66fccade32a3132023bce0f74e23">readn</a> (fd, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);

  <span class="keywordflow">if</span> (nbytes &gt; 0)
    <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += nbytes;
  
  <span class="keywordflow">return</span> nbytes;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9505861c61983da4470a3689cfb994dd"></a><!-- doxytag: member="stream.h::stream_read_try" ref="a9505861c61983da4470a3689cfb994dd" args="(struct stream *s, int fd, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ssize_t stream_read_try </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00741">741</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  ssize_t nbytes;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(s);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a>(s) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (s, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="comment">/* Fatal (not transient) error, since retrying will not help</span>
<span class="comment">         (stream is too small to contain the desired data). */</span>
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">if</span> ((nbytes = read(fd, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a> + s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)) &gt;= 0)
    {
      s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a> += nbytes;
      <span class="keywordflow">return</span> nbytes;
    }
  <span class="comment">/* Error: was it transient (return -2) or fatal (return -1)? */</span>
  <span class="keywordflow">if</span> (<a class="code" href="network_8h.html#a45b38a31650d3cee8087360351384d9e">ERRNO_IO_RETRY</a>(errno))
    <span class="keywordflow">return</span> -2;
  <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: read failed on fd %d: %s&quot;</span>, __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
  <span class="keywordflow">return</span> -1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad4cf41eb3a22cbcc38433314d73b4763"></a><!-- doxytag: member="stream.h::stream_read_unblock" ref="ad4cf41eb3a22cbcc38433314d73b4763" args="(struct stream *, int, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_read_unblock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00716">716</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;
  <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  val = fcntl (fd, F_GETFL, 0);
  fcntl (fd, F_SETFL, val|O_NONBLOCK);
  nbytes = read (fd, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>);
  fcntl (fd, F_SETFL, val);

  <span class="keywordflow">if</span> (nbytes &gt; 0)
    <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += nbytes;
  
  <span class="keywordflow">return</span> nbytes;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a05001ca843142c6ace0e4df8f30fe3fd"></a><!-- doxytag: member="stream.h::stream_recvfrom" ref="a05001ca843142c6ace0e4df8f30fe3fd" args="(struct stream *s, int fd, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ssize_t stream_recvfrom </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> *&#160;</td>
          <td class="paramname"><em>fromlen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00771">771</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  ssize_t nbytes;

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(s);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a>(s) &lt; <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (s, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="comment">/* Fatal (not transient) error, since retrying will not help</span>
<span class="comment">         (stream is too small to contain the desired data). */</span>
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">if</span> ((nbytes = recvfrom (fd, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a> + s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>, <a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a>, 
                          <a class="code" href="structflags.html">flags</a>, from, fromlen)) &gt;= 0)
    {
      s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a> += nbytes;
      <span class="keywordflow">return</span> nbytes;
    }
  <span class="comment">/* Error: was it transient (return -2) or fatal (return -1)? */</span>
  <span class="keywordflow">if</span> (<a class="code" href="network_8h.html#a45b38a31650d3cee8087360351384d9e">ERRNO_IO_RETRY</a>(errno))
    <span class="keywordflow">return</span> -2;
  <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: read failed on fd %d: %s&quot;</span>, __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
  <span class="keywordflow">return</span> -1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a945b899ecd2f8b5af9b7499c946f6d8e"></a><!-- doxytag: member="stream.h::stream_recvmsg" ref="a945b899ecd2f8b5af9b7499c946f6d8e" args="(struct stream *s, int fd, struct msghdr *, int flags, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ssize_t stream_recvmsg </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct msghdr *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00805">805</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;
  <span class="keyword">struct </span>iovec *iov;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(s);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (msgh-&gt;msg_iovlen &gt; 0);  
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (s) &lt; size)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (s, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="comment">/* This is a logic error in the calling code: the stream is too small</span>
<span class="comment">         to hold the desired data! */</span>
      <span class="keywordflow">return</span> -1;
    }
  
  iov = &amp;(msgh-&gt;msg_iov[0]);
  iov-&gt;iov_base = (s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a> + s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a>);
  iov-&gt;iov_len = size;
  
  nbytes = recvmsg (fd, msgh, <a class="code" href="structflags.html">flags</a>);
  
  <span class="keywordflow">if</span> (nbytes &gt; 0)
    s-&gt;<a class="code" href="structstream.html#a8ed63b1c57e367e62f549dae14b07cd0">endp</a> += nbytes;
  
  <span class="keywordflow">return</span> nbytes;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2f4d1460b683629a348501ad2d4195d"></a><!-- doxytag: member="stream.h::stream_reset" ref="ad2f4d1460b683629a348501ad2d4195d" args="(struct stream *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00878">878</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp = 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a358db5821552a5442a5c898819f5902b"></a><!-- doxytag: member="stream.h::stream_resize" ref="a358db5821552a5442a5c898819f5902b" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t stream_resize </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00158">158</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char *newdata;
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  newdata = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a2400fa8e781effd85b44c7c6455855">MTYPE_STREAM_DATA</a>, <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data, newsize);
  
  <span class="keywordflow">if</span> (newdata == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size;
  
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data = newdata;
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size = newsize;
  
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp &gt; <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size)
    <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size;
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp &gt; <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp)
    <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;size;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae7b34b7b3a5a7193ef41c41a6b9ab493"></a><!-- doxytag: member="stream.h::stream_set_getp" ref="ae7b34b7b3a5a7193ef41c41a6b9ab493" args="(struct stream *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stream_set_getp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00204">204</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="stream_8c.html#aa245a400e7ba62c21bf294f7d5d0bd11">GETP_VALID</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, pos))
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;set getp&quot;</span>);
      pos = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp;
    }

  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;getp = pos;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afce4e7540690d5daed191afbb353df68"></a><!-- doxytag: member="stream.h::stream_write" ref="afce4e7540690d5daed191afbb353df68" args="(struct stream *, const void *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t stream_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00836">836</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{

  <a class="code" href="stream_8c.html#abf8c604d1df5413a702b837173945978">CHECK_SIZE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, size);

  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; size)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, ptr, size);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += size;

  <span class="keywordflow">return</span> size;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="stream_8h.html">stream.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:24 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
