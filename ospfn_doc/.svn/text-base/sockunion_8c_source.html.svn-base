<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/sockunion.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sockunion_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/sockunion.c</div>  </div>
</div>
<div class="contents">
<a href="sockunion_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Socket union related function.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 1997, 98 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="str_8h.html">str.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#ifndef HAVE_INET_ATON</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l00033"></a><a class="code" href="sockunion_8h.html#a4203367afaacee3fa5cc1626b2ef63c0">00033</a> <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *cp, <span class="keyword">struct</span> in_addr *inaddr)
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035   <span class="keywordtype">int</span> dots = 0;
<a name="l00036"></a>00036   <span class="keyword">register</span> u_long addr = 0;
<a name="l00037"></a>00037   <span class="keyword">register</span> u_long <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = 0, base = 10;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="keywordflow">do</span>
<a name="l00040"></a>00040     {
<a name="l00041"></a>00041       <span class="keyword">register</span> <span class="keywordtype">char</span> c = *cp;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043       <span class="keywordflow">switch</span> (c)
<a name="l00044"></a>00044     {
<a name="l00045"></a>00045     <span class="keywordflow">case</span> <span class="charliteral">&#39;0&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;1&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;2&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;3&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;4&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;5&#39;</span>:
<a name="l00046"></a>00046     <span class="keywordflow">case</span> <span class="charliteral">&#39;6&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;7&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;8&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;9&#39;</span>:
<a name="l00047"></a>00047       val = (val * base) + (c - <span class="charliteral">&#39;0&#39;</span>);
<a name="l00048"></a>00048       <span class="keywordflow">break</span>;
<a name="l00049"></a>00049     <span class="keywordflow">case</span> <span class="charliteral">&#39;.&#39;</span>:
<a name="l00050"></a>00050       <span class="keywordflow">if</span> (++dots &gt; 3)
<a name="l00051"></a>00051         <span class="keywordflow">return</span> 0;
<a name="l00052"></a>00052     <span class="keywordflow">case</span> <span class="charliteral">&#39;\0&#39;</span>:
<a name="l00053"></a>00053       <span class="keywordflow">if</span> (val &gt; 255)
<a name="l00054"></a>00054         <span class="keywordflow">return</span> 0;
<a name="l00055"></a>00055       addr = addr &lt;&lt; 8 | <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00056"></a>00056       val = 0;
<a name="l00057"></a>00057       <span class="keywordflow">break</span>;
<a name="l00058"></a>00058     <span class="keywordflow">default</span>:
<a name="l00059"></a>00059       <span class="keywordflow">return</span> 0;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061     } <span class="keywordflow">while</span> (*cp++) ;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="keywordflow">if</span> (dots &lt; 3)
<a name="l00064"></a>00064     addr &lt;&lt;= 8 * (3 - dots);
<a name="l00065"></a>00065   <span class="keywordflow">if</span> (inaddr)
<a name="l00066"></a>00066     inaddr-&gt;s_addr = htonl (addr);
<a name="l00067"></a>00067   <span class="keywordflow">return</span> 1;
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 <span class="preprocessor">#endif </span><span class="comment">/* ! HAVE_INET_ATON */</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="preprocessor">#ifndef HAVE_INET_PTON</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l00074"></a><a class="code" href="sockunion_8h.html#ac13c2042641ea5031bc7e244e8061b84">00074</a> <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (<span class="keywordtype">int</span> family, <span class="keyword">const</span> <span class="keywordtype">char</span> *strptr, <span class="keywordtype">void</span> *addrptr)
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076   <span class="keywordflow">if</span> (family == AF_INET)
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078       <span class="keyword">struct </span>in_addr in_val;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080       <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (strptr, &amp;in_val))
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (addrptr, &amp;in_val, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l00083"></a>00083       <span class="keywordflow">return</span> 1;
<a name="l00084"></a>00084     }
<a name="l00085"></a>00085       <span class="keywordflow">return</span> 0;
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087   errno = EAFNOSUPPORT;
<a name="l00088"></a>00088   <span class="keywordflow">return</span> -1;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 <span class="preprocessor">#endif </span><span class="comment">/* ! HAVE_INET_PTON */</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="preprocessor">#ifndef HAVE_INET_NTOP</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00094"></a><a class="code" href="sockunion_8h.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">00094</a> <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (<span class="keywordtype">int</span> family, <span class="keyword">const</span> <span class="keywordtype">void</span> *addrptr, <span class="keywordtype">char</span> *strptr, <span class="keywordtype">size_t</span> len)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) addrptr;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   <span class="keywordflow">if</span> (family == AF_INET) 
<a name="l00099"></a>00099     {
<a name="l00100"></a>00100       <span class="keywordtype">char</span> temp[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00101"></a>00101 
<a name="l00102"></a>00102       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a>(temp, <span class="keyword">sizeof</span>(temp), <span class="stringliteral">&quot;%d.%d.%d.%d&quot;</span>, p[0], p[1], p[2], p[3]);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104       <span class="keywordflow">if</span> (strlen(temp) &gt;= len) 
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106       errno = ENOSPC;
<a name="l00107"></a>00107       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109       strcpy(strptr, temp);
<a name="l00110"></a>00110       <span class="keywordflow">return</span> strptr;
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   errno = EAFNOSUPPORT;
<a name="l00114"></a>00114   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 <span class="preprocessor">#endif </span><span class="comment">/* ! HAVE_INET_NTOP */</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00119"></a><a class="code" href="sockunion_8h.html#ab068bf6434ba4369835fe41ab4848f66">00119</a> <a class="code" href="sockunion_8c.html#ab068bf6434ba4369835fe41ab4848f66">inet_sutop</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su, <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <span class="keywordflow">switch</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123     <span class="keywordflow">case</span> AF_INET:
<a name="l00124"></a>00124       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, str, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
<a name="l00125"></a>00125       <span class="keywordflow">break</span>;
<a name="l00126"></a>00126 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00128"></a>00128       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;su-&gt;sin6.sin6_addr, str, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
<a name="l00129"></a>00129       <span class="keywordflow">break</span>;
<a name="l00130"></a>00130 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132   <span class="keywordflow">return</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="keywordtype">int</span>
<a name="l00136"></a><a class="code" href="sockunion_8h.html#aa2fe8be1262f1a777e63630b484a16e9">00136</a> <a class="code" href="sockunion_8c.html#aaa4fbd35d2f9346b70e0d6c9e66cae79">str2sockunion</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00137"></a>00137 {
<a name="l00138"></a>00138   <span class="keywordtype">int</span> ret;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   memset (su, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET, str, &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
<a name="l00143"></a>00143   <span class="keywordflow">if</span> (ret &gt; 0)          <span class="comment">/* Valid IPv4 address format. */</span>
<a name="l00144"></a>00144     {
<a name="l00145"></a>00145       su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_family = AF_INET;
<a name="l00146"></a>00146 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>      su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_len = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>sockaddr_in);
<a name="l00148"></a>00148 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00149"></a>00149       <span class="keywordflow">return</span> 0;
<a name="l00150"></a>00150     }
<a name="l00151"></a>00151 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>  ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, str, &amp;su-&gt;sin6.sin6_addr);
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (ret &gt; 0)          <span class="comment">/* Valid IPv6 address format. */</span>
<a name="l00154"></a>00154     {
<a name="l00155"></a>00155       su-&gt;sin6.sin6_family = AF_INET6;
<a name="l00156"></a>00156 <span class="preprocessor">#ifdef SIN6_LEN</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>      su-&gt;sin6.sin6_len = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>sockaddr_in6);
<a name="l00158"></a>00158 <span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
<a name="l00159"></a>00159       <span class="keywordflow">return</span> 0;
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00162"></a>00162   <span class="keywordflow">return</span> -1;
<a name="l00163"></a>00163 }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00166"></a><a class="code" href="sockunion_8h.html#a7854c1915abe2dec3dc19430fe94db3f">00166</a> <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su, <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> len)
<a name="l00167"></a>00167 {
<a name="l00168"></a>00168   <span class="keywordflow">if</span>  (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00169"></a>00169     <span class="keywordflow">return</span> <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, buf, len);
<a name="l00170"></a>00170 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00172"></a>00172     <span class="keywordflow">return</span> <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;su-&gt;sin6.sin6_addr, buf, len);
<a name="l00173"></a>00173 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00174"></a>00174   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *
<a name="l00178"></a><a class="code" href="sockunion_8h.html#a3dffcd96d7fff7136a7a35d44727ca0d">00178</a> <a class="code" href="sockunion_8c.html#a3dffcd96d7fff7136a7a35d44727ca0d">sockunion_str2su</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00179"></a>00179 {
<a name="l00180"></a>00180   <span class="keywordtype">int</span> ret;
<a name="l00181"></a>00181   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   su = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00184"></a>00184 
<a name="l00185"></a>00185   ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET, str, &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
<a name="l00186"></a>00186   <span class="keywordflow">if</span> (ret &gt; 0)          <span class="comment">/* Valid IPv4 address format. */</span>
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_family = AF_INET;
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>      su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_len = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>sockaddr_in);
<a name="l00191"></a>00191 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00192"></a>00192       <span class="keywordflow">return</span> su;
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>  ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, str, &amp;su-&gt;sin6.sin6_addr);
<a name="l00196"></a>00196   <span class="keywordflow">if</span> (ret &gt; 0)          <span class="comment">/* Valid IPv6 address format. */</span>
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198       su-&gt;sin6.sin6_family = AF_INET6;
<a name="l00199"></a>00199 <span class="preprocessor">#ifdef SIN6_LEN</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span>      su-&gt;sin6.sin6_len = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>sockaddr_in6);
<a name="l00201"></a>00201 <span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
<a name="l00202"></a>00202       <span class="keywordflow">return</span> su;
<a name="l00203"></a>00203     }
<a name="l00204"></a>00204 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, su);
<a name="l00207"></a>00207   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keywordtype">char</span> *
<a name="l00211"></a><a class="code" href="sockunion_8h.html#a81204a150d1d4f669bb69fdb0915a727">00211</a> <a class="code" href="sockunion_8c.html#a81204a150d1d4f669bb69fdb0915a727">sockunion_su2str</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00212"></a>00212 {
<a name="l00213"></a>00213   <span class="keywordtype">char</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   <span class="keywordflow">switch</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217     <span class="keywordflow">case</span> AF_INET:
<a name="l00218"></a>00218       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, str, sizeof (str));
<a name="l00219"></a>00219       <span class="keywordflow">break</span>;
<a name="l00220"></a>00220 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00222"></a>00222       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;su-&gt;sin6.sin6_addr, str, sizeof (str));
<a name="l00223"></a>00223       <span class="keywordflow">break</span>;
<a name="l00224"></a>00224 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, str);
<a name="l00227"></a>00227 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="comment">/* Convert IPv4 compatible IPv6 address to IPv4 address. */</span>
<a name="l00230"></a>00230 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00231"></a><a class="code" href="sockunion_8c.html#a0ff4c72dee88c4c28b9705fe5fd64e73">00231</a> <a class="code" href="sockunion_8c.html#a0ff4c72dee88c4c28b9705fe5fd64e73">sockunion_normalise_mapped</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00232"></a>00232 {
<a name="l00233"></a>00233   <span class="keyword">struct </span>sockaddr_in sin;
<a name="l00234"></a>00234   
<a name="l00235"></a>00235 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6 
<a name="l00237"></a>00237       &amp;&amp; IN6_IS_ADDR_V4MAPPED (&amp;su-&gt;sin6.sin6_addr))
<a name="l00238"></a>00238     {
<a name="l00239"></a>00239       memset (&amp;sin, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00240"></a>00240       sin.sin_family = AF_INET;
<a name="l00241"></a>00241       sin.sin_port = su-&gt;sin6.sin6_port;
<a name="l00242"></a>00242       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;sin.sin_addr, ((<span class="keywordtype">char</span> *)&amp;su-&gt;sin6.sin6_addr) + 12, 4);
<a name="l00243"></a>00243       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (su, &amp;sin, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="comment">/* Return socket of sockunion. */</span>
<a name="l00249"></a>00249 <span class="keywordtype">int</span>
<a name="l00250"></a><a class="code" href="sockunion_8h.html#a75e4776386c27ca33e5c5d86eafd4b99">00250</a> <a class="code" href="sockunion_8c.html#a75e4776386c27ca33e5c5d86eafd4b99">sockunion_socket</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252   <span class="keywordtype">int</span> sock;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254   sock = socket (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, SOCK_STREAM, 0);
<a name="l00255"></a>00255   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00256"></a>00256     {
<a name="l00257"></a>00257       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;Can&#39;t make socket : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00258"></a>00258       <span class="keywordflow">return</span> -1;
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261   <span class="keywordflow">return</span> sock;
<a name="l00262"></a>00262 }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 <span class="comment">/* Return accepted new socket file descriptor. */</span>
<a name="l00265"></a>00265 <span class="keywordtype">int</span>
<a name="l00266"></a><a class="code" href="sockunion_8h.html#a125386b8951d21cb8b31fec8d20db227">00266</a> <a class="code" href="sockunion_8c.html#a71ffb8b7424679127f0ab7d3ad8c9fd4">sockunion_accept</a> (<span class="keywordtype">int</span> sock, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00267"></a>00267 {
<a name="l00268"></a>00268   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> len;
<a name="l00269"></a>00269   <span class="keywordtype">int</span> client_sock;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   len = <span class="keyword">sizeof</span> (<span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a>);
<a name="l00272"></a>00272   client_sock = accept (sock, (<span class="keyword">struct</span> sockaddr *) su, &amp;len);
<a name="l00273"></a>00273   
<a name="l00274"></a>00274   <a class="code" href="sockunion_8c.html#a0ff4c72dee88c4c28b9705fe5fd64e73">sockunion_normalise_mapped</a> (su);
<a name="l00275"></a>00275   <span class="keywordflow">return</span> client_sock;
<a name="l00276"></a>00276 }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 <span class="comment">/* Return sizeof union sockunion.  */</span>
<a name="l00279"></a>00279 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00280"></a><a class="code" href="sockunion_8c.html#a3015c52e7879749b10e5ab42778f61fd">00280</a> <a class="code" href="sockunion_8c.html#a3015c52e7879749b10e5ab42778f61fd">sockunion_sizeof</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282   <span class="keywordtype">int</span> ret;
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   ret = 0;
<a name="l00285"></a>00285   <span class="keywordflow">switch</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00286"></a>00286     {
<a name="l00287"></a>00287     <span class="keywordflow">case</span> AF_INET:
<a name="l00288"></a>00288       ret = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00289"></a>00289       <span class="keywordflow">break</span>;
<a name="l00290"></a>00290 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00291"></a>00291 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00292"></a>00292       ret = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00293"></a>00293       <span class="keywordflow">break</span>;
<a name="l00294"></a>00294 <span class="preprocessor">#endif </span><span class="comment">/* AF_INET6 */</span>
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296   <span class="keywordflow">return</span> ret;
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">/* return sockunion structure : this function should be revised. */</span>
<a name="l00300"></a>00300 <span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00301"></a><a class="code" href="sockunion_8c.html#a47180330e14c36dad089da56df04bde9">00301</a> <a class="code" href="sockunion_8c.html#a47180330e14c36dad089da56df04bde9">sockunion_log</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00302"></a>00302 {
<a name="l00303"></a>00303   <span class="keyword">static</span> <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   <span class="keywordflow">switch</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family) 
<a name="l00306"></a>00306     {
<a name="l00307"></a>00307     <span class="keywordflow">case</span> AF_INET:
<a name="l00308"></a>00308       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>, <span class="stringliteral">&quot;%s&quot;</span>, inet_ntoa (su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr));
<a name="l00309"></a>00309       <span class="keywordflow">break</span>;
<a name="l00310"></a>00310 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00312"></a>00312       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>, <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l00313"></a>00313         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;(su-&gt;sin6.sin6_addr), buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>));
<a name="l00314"></a>00314       <span class="keywordflow">break</span>;
<a name="l00315"></a>00315 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00316"></a>00316     <span class="keywordflow">default</span>:
<a name="l00317"></a>00317       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>, <span class="stringliteral">&quot;af_unknown %d &quot;</span>, su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family);
<a name="l00318"></a>00318       <span class="keywordflow">break</span>;
<a name="l00319"></a>00319     }
<a name="l00320"></a>00320   <span class="keywordflow">return</span> (<a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, buf));
<a name="l00321"></a>00321 }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 <span class="comment">/* sockunion_connect returns</span>
<a name="l00324"></a>00324 <span class="comment">   -1 : error occured</span>
<a name="l00325"></a>00325 <span class="comment">   0 : connect success</span>
<a name="l00326"></a>00326 <span class="comment">   1 : connect is in progress */</span>
<a name="l00327"></a>00327 <span class="keyword">enum</span> <a class="code" href="sockunion_8h.html#ab1d3499888de36b96c23f98e283c1b6e">connect_result</a>
<a name="l00328"></a><a class="code" href="sockunion_8h.html#a4bc2d6c6a31d6799763a90fe9d6b9d02">00328</a> <a class="code" href="sockunion_8c.html#a31e80aeef8aa1c434ff7fe4ae8188450">sockunion_connect</a> (<span class="keywordtype">int</span> fd, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *peersu, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port,
<a name="l00329"></a>00329            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331   <span class="keywordtype">int</span> ret;
<a name="l00332"></a>00332   <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00333"></a>00333   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> su;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;su, peersu, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="keywordflow">switch</span> (su.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00338"></a>00338     {
<a name="l00339"></a>00339     <span class="keywordflow">case</span> AF_INET:
<a name="l00340"></a>00340       su.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_port = port;
<a name="l00341"></a>00341       <span class="keywordflow">break</span>;
<a name="l00342"></a>00342 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00343"></a>00343 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00344"></a>00344       su.sin6.sin6_port  = port;
<a name="l00345"></a>00345 <span class="preprocessor">#ifdef KAME</span>
<a name="l00346"></a>00346 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL(&amp;su.sin6.sin6_addr) &amp;&amp; ifindex)
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID</span>
<a name="l00349"></a>00349 <span class="preprocessor"></span>      <span class="comment">/* su.sin6.sin6_scope_id = ifindex; */</span>
<a name="l00350"></a>00350 <span class="preprocessor">#ifdef MUSICA</span>
<a name="l00351"></a>00351 <span class="preprocessor"></span>      su.sin6.sin6_scope_id = ifindex; 
<a name="l00352"></a>00352 <span class="preprocessor">#endif</span>
<a name="l00353"></a>00353 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID */</span>
<a name="l00354"></a>00354 <span class="preprocessor">#ifndef MUSICA</span>
<a name="l00355"></a>00355 <span class="preprocessor"></span>      <a class="code" href="sockunion_8h.html#ac5e492dc1d10f95eb64eaac05ec9bab0">SET_IN6_LINKLOCAL_IFINDEX</a> (su.sin6.sin6_addr, ifindex);
<a name="l00356"></a>00356 <span class="preprocessor">#endif</span>
<a name="l00357"></a>00357 <span class="preprocessor"></span>    }
<a name="l00358"></a>00358 <span class="preprocessor">#endif </span><span class="comment">/* KAME */</span>
<a name="l00359"></a>00359       <span class="keywordflow">break</span>;
<a name="l00360"></a>00360 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00361"></a>00361     }      
<a name="l00362"></a>00362 
<a name="l00363"></a>00363   <span class="comment">/* Make socket non-block. */</span>
<a name="l00364"></a>00364   val = fcntl (fd, F_GETFL, 0);
<a name="l00365"></a>00365   fcntl (fd, F_SETFL, val|O_NONBLOCK);
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   <span class="comment">/* Call connect function. */</span>
<a name="l00368"></a>00368   ret = connect (fd, (<span class="keyword">struct</span> sockaddr *) &amp;su, <a class="code" href="sockunion_8c.html#a3015c52e7879749b10e5ab42778f61fd">sockunion_sizeof</a> (&amp;su));
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="comment">/* Immediate success */</span>
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (ret == 0)
<a name="l00372"></a>00372     {
<a name="l00373"></a>00373       fcntl (fd, F_SETFL, val);
<a name="l00374"></a>00374       <span class="keywordflow">return</span> <a class="code" href="sockunion_8h.html#ab1d3499888de36b96c23f98e283c1b6ea851cdcb3c5b666dc182f4b6136a6fe7d">connect_success</a>;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377   <span class="comment">/* If connect is in progress then return 1 else it&#39;s real error. */</span>
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00379"></a>00379     {
<a name="l00380"></a>00380       <span class="keywordflow">if</span> (errno != EINPROGRESS)
<a name="l00381"></a>00381     {
<a name="l00382"></a>00382       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;can&#39;t connect to %s fd %d : %s&quot;</span>,
<a name="l00383"></a>00383              <a class="code" href="sockunion_8c.html#a47180330e14c36dad089da56df04bde9">sockunion_log</a> (&amp;su), fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00384"></a>00384       <span class="keywordflow">return</span> <a class="code" href="sockunion_8h.html#ab1d3499888de36b96c23f98e283c1b6ea047b71b6325b28f03d8ac558983d7e88">connect_error</a>;
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   fcntl (fd, F_SETFL, val);
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <span class="keywordflow">return</span> <a class="code" href="sockunion_8h.html#ab1d3499888de36b96c23f98e283c1b6eaefd11a166b80dff3244284fa5ece9d28">connect_in_progress</a>;
<a name="l00391"></a>00391 }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="comment">/* Make socket from sockunion union. */</span>
<a name="l00394"></a>00394 <span class="keywordtype">int</span>
<a name="l00395"></a><a class="code" href="sockunion_8h.html#a037dc60d4372c5d30407dacd7a64604c">00395</a> <a class="code" href="sockunion_8c.html#aa87de7fb2e611ab14eabc9ee0242f53d">sockunion_stream_socket</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397   <span class="keywordtype">int</span> sock;
<a name="l00398"></a>00398 
<a name="l00399"></a>00399   <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == 0)
<a name="l00400"></a>00400     su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family = <a class="code" href="sockunion_8h.html#a38959c7052325dcfdae19df19cd215f6">AF_INET_UNION</a>;
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   sock = socket (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, SOCK_STREAM, 0);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00405"></a>00405     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t make socket sockunion_stream_socket&quot;</span>);
<a name="l00406"></a>00406 
<a name="l00407"></a>00407   <span class="keywordflow">return</span> sock;
<a name="l00408"></a>00408 }
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment">/* Bind socket to specified address. */</span>
<a name="l00411"></a>00411 <span class="keywordtype">int</span>
<a name="l00412"></a><a class="code" href="sockunion_8h.html#a5727a843b18313ae5834935819864404">00412</a> <a class="code" href="sockunion_8c.html#a12e8d416910e79b142ec1d4fee573073">sockunion_bind</a> (<span class="keywordtype">int</span> sock, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port, 
<a name="l00413"></a>00413         <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su_addr)
<a name="l00414"></a>00414 {
<a name="l00415"></a>00415   <span class="keywordtype">int</span> size = 0;
<a name="l00416"></a>00416   <span class="keywordtype">int</span> ret;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00419"></a>00419     {
<a name="l00420"></a>00420       size = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00421"></a>00421       su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_port = htons (port);
<a name="l00422"></a>00422 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00423"></a>00423 <span class="preprocessor"></span>      su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_len = size;
<a name="l00424"></a>00424 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00425"></a>00425       <span class="keywordflow">if</span> (su_addr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00426"></a>00426     su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr = htonl (INADDR_ANY);
<a name="l00427"></a>00427     }
<a name="l00428"></a>00428 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00429"></a>00429 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00430"></a>00430     {
<a name="l00431"></a>00431       size = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00432"></a>00432       su-&gt;sin6.sin6_port = htons (port);
<a name="l00433"></a>00433 <span class="preprocessor">#ifdef SIN6_LEN</span>
<a name="l00434"></a>00434 <span class="preprocessor"></span>      su-&gt;sin6.sin6_len = size;
<a name="l00435"></a>00435 <span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
<a name="l00436"></a>00436       <span class="keywordflow">if</span> (su_addr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00437"></a>00437     {
<a name="l00438"></a>00438 <span class="preprocessor">#if defined(LINUX_IPV6) || defined(NRL)</span>
<a name="l00439"></a>00439 <span class="preprocessor"></span>      memset (&amp;su-&gt;sin6.sin6_addr, 0, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00440"></a>00440 <span class="preprocessor">#else</span>
<a name="l00441"></a>00441 <span class="preprocessor"></span>      su-&gt;sin6.sin6_addr = in6addr_any;
<a name="l00442"></a>00442 <span class="preprocessor">#endif </span><span class="comment">/* LINUX_IPV6 */</span>
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444     }
<a name="l00445"></a>00445 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00446"></a>00446   
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   ret = bind (sock, (<span class="keyword">struct</span> sockaddr *)su, size);
<a name="l00449"></a>00449   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00450"></a>00450     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t bind socket : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <span class="keywordflow">return</span> ret;
<a name="l00453"></a>00453 }
<a name="l00454"></a>00454 
<a name="l00455"></a>00455 <span class="keywordtype">int</span>
<a name="l00456"></a><a class="code" href="sockunion_8h.html#a5b63ed0335c4a3129bf04afe304d0d7a">00456</a> <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (<span class="keywordtype">int</span> sock)
<a name="l00457"></a>00457 {
<a name="l00458"></a>00458   <span class="keywordtype">int</span> ret;
<a name="l00459"></a>00459   <span class="keywordtype">int</span> on = 1;
<a name="l00460"></a>00460 
<a name="l00461"></a>00461   ret = setsockopt (sock, SOL_SOCKET, SO_REUSEADDR, 
<a name="l00462"></a>00462             (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00463"></a>00463   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00464"></a>00464     {
<a name="l00465"></a>00465       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t set sockopt SO_REUSEADDR to socket %d&quot;</span>, sock);
<a name="l00466"></a>00466       <span class="keywordflow">return</span> -1;
<a name="l00467"></a>00467     }
<a name="l00468"></a>00468   <span class="keywordflow">return</span> 0;
<a name="l00469"></a>00469 }
<a name="l00470"></a>00470 
<a name="l00471"></a>00471 <span class="preprocessor">#ifdef SO_REUSEPORT</span>
<a name="l00472"></a>00472 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l00473"></a>00473 <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (<span class="keywordtype">int</span> sock)
<a name="l00474"></a>00474 {
<a name="l00475"></a>00475   <span class="keywordtype">int</span> ret;
<a name="l00476"></a>00476   <span class="keywordtype">int</span> on = 1;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   ret = setsockopt (sock, SOL_SOCKET, SO_REUSEPORT, 
<a name="l00479"></a>00479             (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00480"></a>00480   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00481"></a>00481     {
<a name="l00482"></a>00482       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t set sockopt SO_REUSEPORT to socket %d&quot;</span>, sock);
<a name="l00483"></a>00483       <span class="keywordflow">return</span> -1;
<a name="l00484"></a>00484     }
<a name="l00485"></a>00485   <span class="keywordflow">return</span> 0;
<a name="l00486"></a>00486 }
<a name="l00487"></a>00487 <span class="preprocessor">#else</span>
<a name="l00488"></a>00488 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l00489"></a><a class="code" href="sockunion_8h.html#a9388885893d2dd27e8666c70d42904e2">00489</a> <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (<span class="keywordtype">int</span> sock)
<a name="l00490"></a>00490 {
<a name="l00491"></a>00491   <span class="keywordflow">return</span> 0;
<a name="l00492"></a>00492 }
<a name="l00493"></a>00493 <span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>
<a name="l00494"></a>00494 
<a name="l00495"></a>00495 <span class="keywordtype">int</span>
<a name="l00496"></a><a class="code" href="sockunion_8h.html#abaf662d1724513469c375f264ccb4668">00496</a> <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (<span class="keywordtype">int</span> family, <span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> ttl)
<a name="l00497"></a>00497 {
<a name="l00498"></a>00498   <span class="keywordtype">int</span> ret;
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 <span class="preprocessor">#ifdef IP_TTL</span>
<a name="l00501"></a>00501 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (family == AF_INET)
<a name="l00502"></a>00502     {
<a name="l00503"></a>00503       ret = setsockopt (sock, IPPROTO_IP, IP_TTL, 
<a name="l00504"></a>00504             (<span class="keywordtype">void</span> *) &amp;ttl, <span class="keyword">sizeof</span> (<span class="keywordtype">int</span>));
<a name="l00505"></a>00505       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00506"></a>00506     {
<a name="l00507"></a>00507       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t set sockopt IP_TTL %d to socket %d&quot;</span>, ttl, sock);
<a name="l00508"></a>00508       <span class="keywordflow">return</span> -1;
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510       <span class="keywordflow">return</span> 0;
<a name="l00511"></a>00511     }
<a name="l00512"></a>00512 <span class="preprocessor">#endif </span><span class="comment">/* IP_TTL */</span>
<a name="l00513"></a>00513 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00514"></a>00514 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (family == AF_INET6)
<a name="l00515"></a>00515     {
<a name="l00516"></a>00516       ret = setsockopt (sock, IPPROTO_IPV6, IPV6_UNICAST_HOPS, 
<a name="l00517"></a>00517             (<span class="keywordtype">void</span> *) &amp;ttl, <span class="keyword">sizeof</span> (<span class="keywordtype">int</span>));
<a name="l00518"></a>00518       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00519"></a>00519     {
<a name="l00520"></a>00520       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;can&#39;t set sockopt IPV6_UNICAST_HOPS %d to socket %d&quot;</span>,
<a name="l00521"></a>00521             ttl, sock);
<a name="l00522"></a>00522       <span class="keywordflow">return</span> -1;
<a name="l00523"></a>00523     }
<a name="l00524"></a>00524       <span class="keywordflow">return</span> 0;
<a name="l00525"></a>00525     }
<a name="l00526"></a>00526 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00527"></a>00527   <span class="keywordflow">return</span> 0;
<a name="l00528"></a>00528 }
<a name="l00529"></a>00529 
<a name="l00530"></a>00530 <span class="comment">/* If same family and same prefix return 1. */</span>
<a name="l00531"></a>00531 <span class="keywordtype">int</span>
<a name="l00532"></a><a class="code" href="sockunion_8h.html#aea4c9e99cb8b9151e70156e81d27afcd">00532</a> <a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su1, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su2)
<a name="l00533"></a>00533 {
<a name="l00534"></a>00534   <span class="keywordtype">int</span> ret = 0;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="keywordflow">if</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family != su2-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00537"></a>00537     <span class="keywordflow">return</span> 0;
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   <span class="keywordflow">switch</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00540"></a>00540     {
<a name="l00541"></a>00541     <span class="keywordflow">case</span> AF_INET:
<a name="l00542"></a>00542       ret = <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (&amp;su1-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, &amp;su2-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00543"></a>00543             sizeof (<span class="keyword">struct</span> in_addr));
<a name="l00544"></a>00544       <span class="keywordflow">break</span>;
<a name="l00545"></a>00545 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00546"></a>00546 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00547"></a>00547       ret = <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (&amp;su1-&gt;sin6.sin6_addr, &amp;su2-&gt;sin6.sin6_addr,
<a name="l00548"></a>00548             sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00549"></a>00549       <span class="keywordflow">break</span>;
<a name="l00550"></a>00550 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00551"></a>00551     }
<a name="l00552"></a>00552   <span class="keywordflow">if</span> (ret == 0)
<a name="l00553"></a>00553     <span class="keywordflow">return</span> 1;
<a name="l00554"></a>00554   <span class="keywordflow">else</span>
<a name="l00555"></a>00555     <span class="keywordflow">return</span> 0;
<a name="l00556"></a>00556 }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 <span class="comment">/* After TCP connection is established.  Get local address and port. */</span>
<a name="l00559"></a>00559 <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *
<a name="l00560"></a><a class="code" href="sockunion_8h.html#aae3ab4f46478d71d0793590049c49001">00560</a> <a class="code" href="sockunion_8c.html#a983f6545771518eb72da0089c1ffb798">sockunion_getsockname</a> (<span class="keywordtype">int</span> fd)
<a name="l00561"></a>00561 {
<a name="l00562"></a>00562   <span class="keywordtype">int</span> ret;
<a name="l00563"></a>00563   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> len;
<a name="l00564"></a>00564   <span class="keyword">union</span>
<a name="l00565"></a>00565   {
<a name="l00566"></a>00566     <span class="keyword">struct </span>sockaddr sa;
<a name="l00567"></a>00567     <span class="keyword">struct </span>sockaddr_in sin;
<a name="l00568"></a>00568 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span>    <span class="keyword">struct </span>sockaddr_in6 sin6;
<a name="l00570"></a>00570 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00571"></a>00571     <span class="keywordtype">char</span> tmp_buffer[128];
<a name="l00572"></a>00572   } <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00573"></a>00573   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l00574"></a>00574 
<a name="l00575"></a>00575   memset (&amp;<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 0, <span class="keyword">sizeof</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
<a name="l00576"></a>00576   len = <span class="keyword">sizeof</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00577"></a>00577 
<a name="l00578"></a>00578   ret = getsockname (fd, (<span class="keyword">struct</span> sockaddr *)&amp;<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, &amp;len);
<a name="l00579"></a>00579   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00580"></a>00580     {
<a name="l00581"></a>00581       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t get local address and port by getsockname: %s&quot;</span>,
<a name="l00582"></a>00582          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00583"></a>00583       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00584"></a>00584     }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586   <span class="keywordflow">if</span> (name.sa.sa_family == AF_INET)
<a name="l00587"></a>00587     {
<a name="l00588"></a>00588       su = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00589"></a>00589       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (su, &amp;name, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00590"></a>00590       <span class="keywordflow">return</span> su;
<a name="l00591"></a>00591     }
<a name="l00592"></a>00592 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00593"></a>00593 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (name.sa.sa_family == AF_INET6)
<a name="l00594"></a>00594     {
<a name="l00595"></a>00595       su = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00596"></a>00596       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (su, &amp;name, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00597"></a>00597       <a class="code" href="sockunion_8c.html#a0ff4c72dee88c4c28b9705fe5fd64e73">sockunion_normalise_mapped</a> (su);
<a name="l00598"></a>00598       <span class="keywordflow">return</span> su;
<a name="l00599"></a>00599     }
<a name="l00600"></a>00600 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00601"></a>00601   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00602"></a>00602 }
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 <span class="comment">/* After TCP connection is established.  Get remote address and port. */</span>
<a name="l00605"></a>00605 <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *
<a name="l00606"></a><a class="code" href="sockunion_8h.html#abc69d0f910e8c668273510885241e5fc">00606</a> <a class="code" href="sockunion_8c.html#a9e1235f351839c7c8b5075c335db605c">sockunion_getpeername</a> (<span class="keywordtype">int</span> fd)
<a name="l00607"></a>00607 {
<a name="l00608"></a>00608   <span class="keywordtype">int</span> ret;
<a name="l00609"></a>00609   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> len;
<a name="l00610"></a>00610   <span class="keyword">union</span>
<a name="l00611"></a>00611   {
<a name="l00612"></a>00612     <span class="keyword">struct </span>sockaddr sa;
<a name="l00613"></a>00613     <span class="keyword">struct </span>sockaddr_in sin;
<a name="l00614"></a>00614 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00615"></a>00615 <span class="preprocessor"></span>    <span class="keyword">struct </span>sockaddr_in6 sin6;
<a name="l00616"></a>00616 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00617"></a>00617     <span class="keywordtype">char</span> tmp_buffer[128];
<a name="l00618"></a>00618   } <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00619"></a>00619   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l00620"></a>00620 
<a name="l00621"></a>00621   memset (&amp;<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 0, <span class="keyword">sizeof</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
<a name="l00622"></a>00622   len = <span class="keyword">sizeof</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00623"></a>00623   ret = getpeername (fd, (<span class="keyword">struct</span> sockaddr *)&amp;<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, &amp;len);
<a name="l00624"></a>00624   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00625"></a>00625     {
<a name="l00626"></a>00626       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;Can&#39;t get remote address and port: %s&quot;</span>,
<a name="l00627"></a>00627         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00628"></a>00628       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00629"></a>00629     }
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   <span class="keywordflow">if</span> (name.sa.sa_family == AF_INET)
<a name="l00632"></a>00632     {
<a name="l00633"></a>00633       su = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00634"></a>00634       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (su, &amp;name, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00635"></a>00635       <span class="keywordflow">return</span> su;
<a name="l00636"></a>00636     }
<a name="l00637"></a>00637 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00638"></a>00638 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (name.sa.sa_family == AF_INET6)
<a name="l00639"></a>00639     {
<a name="l00640"></a>00640       su = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00641"></a>00641       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (su, &amp;name, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00642"></a>00642       <a class="code" href="sockunion_8c.html#a0ff4c72dee88c4c28b9705fe5fd64e73">sockunion_normalise_mapped</a> (su);
<a name="l00643"></a>00643       <span class="keywordflow">return</span> su;
<a name="l00644"></a>00644     }
<a name="l00645"></a>00645 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00646"></a>00646   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00647"></a>00647 }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649 <span class="comment">/* Print sockunion structure */</span>
<a name="l00650"></a><a class="code" href="sockunion_8c.html#a43c4623c2553d09a59385aabe971d75d">00650</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="zebra_8h.html#a9d373a9b65ff25b2db84c07394e1c212">__attribute__</a> ((unused))
<a name="l00651"></a>00651 sockunion_print (union <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00652"></a>00652 {
<a name="l00653"></a>00653   <span class="keywordflow">if</span> (su == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00654"></a>00654     <span class="keywordflow">return</span>;
<a name="l00655"></a>00655 
<a name="l00656"></a>00656   <span class="keywordflow">switch</span> (su-&gt;sa.sa_family) 
<a name="l00657"></a>00657     {
<a name="l00658"></a>00658     <span class="keywordflow">case</span> AF_INET:
<a name="l00659"></a>00659       printf (<span class="stringliteral">&quot;%s\n&quot;</span>, inet_ntoa (su-&gt;sin.sin_addr));
<a name="l00660"></a>00660       <span class="keywordflow">break</span>;
<a name="l00661"></a>00661 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00662"></a>00662 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00663"></a>00663       {
<a name="l00664"></a>00664     <span class="keywordtype">char</span> buf [<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l00665"></a>00665 
<a name="l00666"></a>00666     printf (<span class="stringliteral">&quot;%s\n&quot;</span>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;(su-&gt;sin6.sin6_addr),
<a name="l00667"></a>00667                  buf, sizeof (buf)));
<a name="l00668"></a>00668       }
<a name="l00669"></a>00669       <span class="keywordflow">break</span>;
<a name="l00670"></a>00670 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00671"></a>00671 
<a name="l00672"></a>00672 <span class="preprocessor">#ifdef AF_LINK</span>
<a name="l00673"></a>00673 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_LINK:
<a name="l00674"></a>00674       {
<a name="l00675"></a>00675     <span class="keyword">struct </span>sockaddr_dl *sdl;
<a name="l00676"></a>00676 
<a name="l00677"></a>00677     sdl = (<span class="keyword">struct </span>sockaddr_dl *)&amp;(su-&gt;sa);
<a name="l00678"></a>00678     printf (<span class="stringliteral">&quot;link#%d\n&quot;</span>, sdl-&gt;sdl_index);
<a name="l00679"></a>00679       }
<a name="l00680"></a>00680       <span class="keywordflow">break</span>;
<a name="l00681"></a>00681 <span class="preprocessor">#endif </span><span class="comment">/* AF_LINK */</span>
<a name="l00682"></a>00682     <span class="keywordflow">default</span>:
<a name="l00683"></a>00683       printf (<span class="stringliteral">&quot;af_unknown %d\n&quot;</span>, su-&gt;sa.sa_family);
<a name="l00684"></a>00684       <span class="keywordflow">break</span>;
<a name="l00685"></a>00685     }
<a name="l00686"></a>00686 }
<a name="l00687"></a>00687 
<a name="l00688"></a>00688 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00689"></a>00689 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00690"></a>00690 in6addr_cmp (<span class="keyword">struct</span> in6_addr *addr1, <span class="keyword">struct</span> in6_addr *addr2)
<a name="l00691"></a>00691 {
<a name="l00692"></a>00692   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00693"></a>00693   u_char *p1, *p2;
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   p1 = (u_char *)addr1;
<a name="l00696"></a>00696   p2 = (u_char *)addr2;
<a name="l00697"></a>00697 
<a name="l00698"></a>00698   <span class="keywordflow">for</span> (i = 0; i &lt; <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in6_addr); i++)
<a name="l00699"></a>00699     {
<a name="l00700"></a>00700       <span class="keywordflow">if</span> (p1[i] &gt; p2[i])
<a name="l00701"></a>00701     <span class="keywordflow">return</span> 1;
<a name="l00702"></a>00702       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p1[i] &lt; p2[i])
<a name="l00703"></a>00703     <span class="keywordflow">return</span> -1;
<a name="l00704"></a>00704     }
<a name="l00705"></a>00705   <span class="keywordflow">return</span> 0;
<a name="l00706"></a>00706 }
<a name="l00707"></a>00707 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00708"></a>00708 
<a name="l00709"></a>00709 <span class="keywordtype">int</span>
<a name="l00710"></a><a class="code" href="sockunion_8h.html#a8bfcd6479085cafb7c0a5e95295a77ae">00710</a> <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su1, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su2)
<a name="l00711"></a>00711 {
<a name="l00712"></a>00712   <span class="keywordflow">if</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family &gt; su2-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00713"></a>00713     <span class="keywordflow">return</span> 1;
<a name="l00714"></a>00714   <span class="keywordflow">if</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family &lt; su2-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00715"></a>00715     <span class="keywordflow">return</span> -1;
<a name="l00716"></a>00716 
<a name="l00717"></a>00717   <span class="keywordflow">if</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00718"></a>00718     {
<a name="l00719"></a>00719       <span class="keywordflow">if</span> (ntohl (su1-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr) == ntohl (su2-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr))
<a name="l00720"></a>00720     <span class="keywordflow">return</span> 0;
<a name="l00721"></a>00721       <span class="keywordflow">if</span> (ntohl (su1-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr) &gt; ntohl (su2-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr))
<a name="l00722"></a>00722     <span class="keywordflow">return</span> 1;
<a name="l00723"></a>00723       <span class="keywordflow">else</span>
<a name="l00724"></a>00724     <span class="keywordflow">return</span> -1;
<a name="l00725"></a>00725     }
<a name="l00726"></a>00726 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00727"></a>00727 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (su1-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00728"></a>00728     <span class="keywordflow">return</span> in6addr_cmp (&amp;su1-&gt;sin6.sin6_addr, &amp;su2-&gt;sin6.sin6_addr);
<a name="l00729"></a>00729 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00730"></a>00730   <span class="keywordflow">return</span> 0;
<a name="l00731"></a>00731 }
<a name="l00732"></a>00732 
<a name="l00733"></a>00733 <span class="comment">/* Duplicate sockunion. */</span>
<a name="l00734"></a>00734 <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *
<a name="l00735"></a><a class="code" href="sockunion_8h.html#a04fe5a597afbb156389445e8e77b6c27">00735</a> <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00736"></a>00736 {
<a name="l00737"></a>00737   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *dup = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00738"></a>00738   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dup, su, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00739"></a>00739   <span class="keywordflow">return</span> dup;
<a name="l00740"></a>00740 }
<a name="l00741"></a>00741 
<a name="l00742"></a>00742 <span class="keywordtype">void</span>
<a name="l00743"></a><a class="code" href="sockunion_8h.html#a052220433fece5546a7ba08c97ddc8b7">00743</a> <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00744"></a>00744 {
<a name="l00745"></a>00745   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f1a56e7700f20a190aaf7fc965e2386">MTYPE_SOCKUNION</a>, su);
<a name="l00746"></a>00746 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sockunion_8c.html">sockunion.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
