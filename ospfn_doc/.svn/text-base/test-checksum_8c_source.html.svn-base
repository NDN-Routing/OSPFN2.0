<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: tests/test-checksum.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('test-checksum_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">tests/test-checksum.c</div>  </div>
</div>
<div class="contents">
<a href="test-checksum_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00002"></a>00002 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="checksum_8h.html">checksum.h</a>&quot;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a><a class="code" href="test-checksum_8c.html#af7f9077bc08df049beb65a1c09cde5fa">00007</a> <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00008"></a>00008 
<a name="l00009"></a><a class="code" href="structacc__vals.html">00009</a> <span class="keyword">struct </span><a class="code" href="structacc__vals.html">acc_vals</a> {
<a name="l00010"></a><a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">00010</a>   <span class="keywordtype">int</span> <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>;
<a name="l00011"></a><a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">00011</a>   <span class="keywordtype">int</span> <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>;
<a name="l00012"></a>00012 };
<a name="l00013"></a>00013 
<a name="l00014"></a><a class="code" href="structcsum__vals.html">00014</a> <span class="keyword">struct </span><a class="code" href="structcsum__vals.html">csum_vals</a> {
<a name="l00015"></a><a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">00015</a>   <span class="keyword">struct </span><a class="code" href="structacc__vals.html">acc_vals</a> <a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>;
<a name="l00016"></a><a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">00016</a>   <span class="keywordtype">int</span> <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>; 
<a name="l00017"></a><a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">00017</a>   <span class="keywordtype">int</span> <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00018"></a>00018 };
<a name="l00019"></a>00019 
<a name="l00020"></a><a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">00020</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcsum__vals.html">csum_vals</a> ospfd_vals, <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>;
<a name="l00021"></a>00021 
<a name="l00022"></a><a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">00022</a> <span class="keyword">typedef</span> <span class="keywordtype">size_t</span> <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a>;
<a name="l00023"></a><a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">00023</a> <span class="keyword">typedef</span> uint16_t <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a>;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">/* Fletcher Checksum -- Refer to RFC1008. */</span>
<a name="l00026"></a><a class="code" href="test-checksum_8c.html#a11e929bea3766df0637b90580e8865fc">00026</a> <span class="preprocessor">#define MODX                 4102</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="comment">/* Accumulator phase of checksum */</span>
<a name="l00029"></a>00029 <span class="keyword">static</span> 
<a name="l00030"></a>00030 <span class="keyword">struct </span><a class="code" href="structacc__vals.html">acc_vals</a>
<a name="l00031"></a><a class="code" href="test-checksum_8c.html#a0909f640a485d919986f3a384a1640e1">00031</a> <a class="code" href="test-checksum_8c.html#a0909f640a485d919986f3a384a1640e1">accumulate</a> (u_char *<a class="code" href="structbuffer.html">buffer</a>, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033   u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00034"></a>00034   u_int16_t *csum;
<a name="l00035"></a>00035   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, init_len, partial_len;
<a name="l00036"></a>00036   <span class="keyword">struct </span><a class="code" href="structacc__vals.html">acc_vals</a> ret;
<a name="l00037"></a>00037   
<a name="l00038"></a>00038   csum = (u_int16_t *) (buffer + off);
<a name="l00039"></a>00039   *(csum) = 0;
<a name="l00040"></a>00040   
<a name="l00041"></a>00041   p = buffer;
<a name="l00042"></a>00042   ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> = 0;
<a name="l00043"></a>00043   ret.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> = 0;
<a name="l00044"></a>00044   init_len = len;
<a name="l00045"></a>00045   
<a name="l00046"></a>00046   <span class="keywordflow">while</span> (len != 0)
<a name="l00047"></a>00047     {
<a name="l00048"></a>00048       partial_len = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(len, <a class="code" href="test-checksum_8c.html#a11e929bea3766df0637b90580e8865fc">MODX</a>);
<a name="l00049"></a>00049 
<a name="l00050"></a>00050       <span class="keywordflow">for</span> (i = 0; i &lt; partial_len; i++)
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052       ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> = ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> + *(p++);
<a name="l00053"></a>00053       ret.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> += ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>;
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056       ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> = ret.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> % 255;
<a name="l00057"></a>00057       ret.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> = ret.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> % 255;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059       len -= partial_len;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061   <span class="keywordflow">return</span> ret;
<a name="l00062"></a>00062 }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/* The final reduction phase.</span>
<a name="l00065"></a>00065 <span class="comment"> * This one should be the original ospfd version </span>
<a name="l00066"></a>00066 <span class="comment"> */</span>
<a name="l00067"></a>00067 <span class="keyword">static</span> u_int16_t 
<a name="l00068"></a><a class="code" href="test-checksum_8c.html#a143d60ed548ff80b30967749b8bcb88c">00068</a> <a class="code" href="test-checksum_8c.html#a143d60ed548ff80b30967749b8bcb88c">reduce_ospfd</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00075"></a>00075   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = ((len - off - 1) * <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>) % 255;
<a name="l00076"></a>00076   
<a name="l00077"></a>00077   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;= 0)
<a name="l00078"></a>00078     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> += 255;
<a name="l00079"></a>00079   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 510 - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>;
<a name="l00080"></a>00080   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 255)
<a name="l00081"></a>00081     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> -= 255;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083    <span class="comment">/* take care endian issue. */</span>
<a name="l00084"></a>00084    <span class="keywordflow">return</span> htons ((x &lt;&lt; 8) + <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a>); 
<a name="l00085"></a>00085 <span class="preprocessor">#undef x</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>}
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="comment">/* slightly different concatenation */</span>
<a name="l00092"></a>00092 <span class="keyword">static</span> u_int16_t 
<a name="l00093"></a><a class="code" href="test-checksum_8c.html#a7d7f4c9c65cba221f864f8bfcd665c78">00093</a> <a class="code" href="test-checksum_8c.html#a7d7f4c9c65cba221f864f8bfcd665c78">reduce_ospfd1</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = ((len - off - 1) * <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>) % 255;
<a name="l00101"></a>00101   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;= 0)
<a name="l00102"></a>00102     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> += 255;
<a name="l00103"></a>00103   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 510 - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>;
<a name="l00104"></a>00104   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 255)
<a name="l00105"></a>00105     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> -= 255;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107    <span class="comment">/* take care endian issue. */</span>
<a name="l00108"></a>00108    <span class="keywordflow">return</span> htons ((x &lt;&lt; 8) | (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &amp; 0xff)); 
<a name="l00109"></a>00109 <span class="preprocessor">#undef x</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span>}
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="comment">/* original isisd version */</span>
<a name="l00116"></a>00116 <span class="keyword">static</span> u_int16_t 
<a name="l00117"></a><a class="code" href="test-checksum_8c.html#aff0bb2f81332ebaae76b09e9bb55f86b">00117</a> <a class="code" href="test-checksum_8c.html#aff0bb2f81332ebaae76b09e9bb55f86b">reduce_isisd</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>  u_int32_t mul;
<a name="l00124"></a>00124   
<a name="l00125"></a>00125   mul = (len - off)*(<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>);
<a name="l00126"></a>00126   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = mul - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>;
<a name="l00127"></a>00127   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = c1 - mul - 1;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 0)
<a name="l00130"></a>00130     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a>++;
<a name="l00131"></a>00131   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt; 0)
<a name="l00132"></a>00132     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>--;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> %= 255;
<a name="l00135"></a>00135   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> %= 255;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> == 0)
<a name="l00138"></a>00138     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = 255;
<a name="l00139"></a>00139   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> == 0)
<a name="l00140"></a>00140     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 1;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordflow">return</span> htons ((<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;&lt; 8) | (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &amp; 0xff));
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="preprocessor">#undef x</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>}
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">/* Is the -1 in y wrong perhaps? */</span>
<a name="l00151"></a>00151 <span class="keyword">static</span> u_int16_t 
<a name="l00152"></a><a class="code" href="test-checksum_8c.html#ab6c9f3f1caec1a51a04fd597252d7288">00152</a> <a class="code" href="test-checksum_8c.html#ab6c9f3f1caec1a51a04fd597252d7288">reduce_isisd_yfix</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span>  u_int32_t mul;
<a name="l00159"></a>00159   
<a name="l00160"></a>00160   mul = (len - off)*(<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>);
<a name="l00161"></a>00161   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = mul - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>;
<a name="l00162"></a>00162   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = c1 - mul;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 0)
<a name="l00165"></a>00165     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a>++;
<a name="l00166"></a>00166   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt; 0)
<a name="l00167"></a>00167     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>--;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> %= 255;
<a name="l00170"></a>00170   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> %= 255;
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> == 0)
<a name="l00173"></a>00173     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = 255;
<a name="l00174"></a>00174   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> == 0)
<a name="l00175"></a>00175     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 1;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   <span class="keywordflow">return</span> htons ((<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;&lt; 8) | (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &amp; 0xff));
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="preprocessor">#undef x</span>
<a name="l00180"></a>00180 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>}
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">/* Move the mods yp */</span>
<a name="l00186"></a>00186 <span class="keyword">static</span> u_int16_t 
<a name="l00187"></a><a class="code" href="test-checksum_8c.html#aed6bafb8e88d91a4bef52c9ea6dd7a80">00187</a> <a class="code" href="test-checksum_8c.html#aed6bafb8e88d91a4bef52c9ea6dd7a80">reduce_isisd_mod</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00188"></a>00188 {
<a name="l00189"></a>00189 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>  u_int32_t mul;
<a name="l00194"></a>00194   
<a name="l00195"></a>00195   mul = (len - off)*(<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>);
<a name="l00196"></a>00196   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = mul - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>;
<a name="l00197"></a>00197   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> - mul - 1;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> %= 255;
<a name="l00200"></a>00200   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> %= 255;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 0)
<a name="l00203"></a>00203     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a>++;
<a name="l00204"></a>00204   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt; 0)
<a name="l00205"></a>00205     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>--;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> == 0)
<a name="l00208"></a>00208     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = 255;
<a name="l00209"></a>00209   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> == 0)
<a name="l00210"></a>00210     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 1;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   <span class="keywordflow">return</span> htons ((<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;&lt; 8) | (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &amp; 0xff));
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="preprocessor">#undef x</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>}
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">/* Move the mods up + fix y */</span>
<a name="l00221"></a>00221 <span class="keyword">static</span> u_int16_t 
<a name="l00222"></a><a class="code" href="test-checksum_8c.html#abb2718cfbc30d067649675bf27f9820b">00222</a> <a class="code" href="test-checksum_8c.html#abb2718cfbc30d067649675bf27f9820b">reduce_isisd_mody</a> (<span class="keyword">struct</span> <a class="code" href="structcsum__vals.html">csum_vals</a> *vals, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00223"></a>00223 {
<a name="l00224"></a>00224 <span class="preprocessor">#define x vals-&gt;x</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span><span class="preprocessor">#define y vals-&gt;y</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span><span class="preprocessor">#define c0 vals-&gt;a.c0</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span><span class="preprocessor">#define c1 vals-&gt;a.c1</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>  u_int32_t mul;
<a name="l00229"></a>00229   
<a name="l00230"></a>00230   mul = (len - off)*(<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>);
<a name="l00231"></a>00231   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = mul - <a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> - <a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>;
<a name="l00232"></a>00232   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = c1 - mul;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> %= 255;
<a name="l00235"></a>00235   <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> %= 255;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &gt; 0)
<a name="l00238"></a>00238     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a>++;
<a name="l00239"></a>00239   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt; 0)
<a name="l00240"></a>00240     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a>--;
<a name="l00241"></a>00241 
<a name="l00242"></a>00242   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> == 0)
<a name="l00243"></a>00243     <a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = 255;
<a name="l00244"></a>00244   <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> == 0)
<a name="l00245"></a>00245     <a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> = 1;
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="keywordflow">return</span> htons ((<a class="code" href="test-checksum_8c.html#a6c4b361d72eb3767ba424ac9a6ecf52b">x</a> &lt;&lt; 8) | (<a class="code" href="test-checksum_8c.html#a0ed6a908288e0cd87f79c1b5ab56d07c">y</a> &amp; 0xff));
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="preprocessor">#undef x</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="preprocessor">#undef y</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span><span class="preprocessor">#undef c0</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span><span class="preprocessor">#undef c1</span>
<a name="l00253"></a>00253 <span class="preprocessor"></span>}
<a name="l00254"></a>00254 
<a name="l00255"></a><a class="code" href="structreductions__t.html">00255</a> <span class="keyword">struct </span><a class="code" href="structreductions__t.html">reductions_t</a> {
<a name="l00256"></a><a class="code" href="structreductions__t.html#a63a1ee9edb7a3c3087e6ffe8517c1290">00256</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structreductions__t.html#a63a1ee9edb7a3c3087e6ffe8517c1290">name</a>;
<a name="l00257"></a><a class="code" href="structreductions__t.html#ae13608d776d8126a03e4bcd1e69c2f80">00257</a>   u_int16_t (*<a class="code" href="structreductions__t.html#ae13608d776d8126a03e4bcd1e69c2f80">f</a>) (<span class="keyword">struct </span><a class="code" href="structcsum__vals.html">csum_vals</a> *, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a>, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a>);
<a name="l00258"></a>00258 } <a class="code" href="test-checksum_8c.html#a324b1b0e4eedf80047adad92de2b41b1">reducts</a>[] = {
<a name="l00259"></a>00259   { .<a class="code" href="structreductions__t.html#a63a1ee9edb7a3c3087e6ffe8517c1290">name</a> = <span class="stringliteral">&quot;ospfd&quot;</span>,        .f = <a class="code" href="test-checksum_8c.html#a143d60ed548ff80b30967749b8bcb88c">reduce_ospfd</a> },
<a name="l00260"></a>00260   { .name = <span class="stringliteral">&quot;ospfd-1&quot;</span>,      .f = <a class="code" href="test-checksum_8c.html#a7d7f4c9c65cba221f864f8bfcd665c78">reduce_ospfd1</a> },
<a name="l00261"></a>00261   { .name = <span class="stringliteral">&quot;isisd&quot;</span>,        .f = <a class="code" href="test-checksum_8c.html#aff0bb2f81332ebaae76b09e9bb55f86b">reduce_isisd</a> },
<a name="l00262"></a>00262   { .name = <span class="stringliteral">&quot;isisd-yfix&quot;</span>,   .f = <a class="code" href="test-checksum_8c.html#ab6c9f3f1caec1a51a04fd597252d7288">reduce_isisd_yfix</a> },
<a name="l00263"></a>00263   { .name = <span class="stringliteral">&quot;isisd-mod&quot;</span>,    .f = <a class="code" href="test-checksum_8c.html#aed6bafb8e88d91a4bef52c9ea6dd7a80">reduce_isisd_mod</a> },
<a name="l00264"></a>00264   { .name = <span class="stringliteral">&quot;isisd-mody&quot;</span>,   .f = <a class="code" href="test-checksum_8c.html#abb2718cfbc30d067649675bf27f9820b">reduce_isisd_mody</a> },
<a name="l00265"></a>00265   { <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> },
<a name="l00266"></a>00266 };
<a name="l00267"></a>00267 
<a name="l00268"></a>00268 <span class="comment">/* The original ospfd checksum */</span>
<a name="l00269"></a>00269 <span class="keyword">static</span> u_int16_t
<a name="l00270"></a><a class="code" href="test-checksum_8c.html#a667afad3d6a4acfbc47669b302f2403a">00270</a> <a class="code" href="test-checksum_8c.html#a667afad3d6a4acfbc47669b302f2403a">ospfd_checksum</a> (u_char *buffer, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00271"></a>00271 {
<a name="l00272"></a>00272   u_char *sp, *ep, *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, *q;
<a name="l00273"></a>00273   <span class="keywordtype">int</span> <a class="code" href="test-checksum_8c.html#ac18b3d0edccb2b9062a09d00b0d8b83b">c0</a> = 0, <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a> = 0;
<a name="l00274"></a>00274   <span class="keywordtype">int</span> <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>, <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00275"></a>00275   u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>, *csum;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   csum = (u_int16_t *) (buffer + off);
<a name="l00278"></a>00278   *(csum) = 0;
<a name="l00279"></a>00279   
<a name="l00280"></a>00280   sp = buffer;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282   <span class="keywordflow">for</span> (ep = sp + len; sp &lt; ep; sp = q)
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284       q = sp + <a class="code" href="test-checksum_8c.html#a11e929bea3766df0637b90580e8865fc">MODX</a>;
<a name="l00285"></a>00285       <span class="keywordflow">if</span> (q &gt; ep)
<a name="l00286"></a>00286         q = ep;
<a name="l00287"></a>00287       <span class="keywordflow">for</span> (p = sp; p &lt; q; p++)
<a name="l00288"></a>00288         {
<a name="l00289"></a>00289           c0 += *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00290"></a>00290           <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a> += c0;
<a name="l00291"></a>00291         }
<a name="l00292"></a>00292       c0 %= 255;
<a name="l00293"></a>00293       <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a> %= 255;
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295   
<a name="l00296"></a>00296   ospfd_vals.a.c0 = c0;
<a name="l00297"></a>00297   ospfd_vals.a.c1 = <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
<a name="l00298"></a>00298   
<a name="l00299"></a>00299   <span class="comment">//printf (&quot;%s: len %u, off %u, c0 %d, c1 %d\n&quot;,</span>
<a name="l00300"></a>00300   <span class="comment">//        __func__, len, off, c0, c1);</span>
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   x = ((int)(len - off - 1) * (int)c0 - (<span class="keywordtype">int</span>)<a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>) % 255;
<a name="l00303"></a>00303   
<a name="l00304"></a>00304   <span class="keywordflow">if</span> (x &lt;= 0)
<a name="l00305"></a>00305     x += 255;
<a name="l00306"></a>00306   y = 510 - c0 - <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>;
<a name="l00307"></a>00307   <span class="keywordflow">if</span> (y &gt; 255)
<a name="l00308"></a>00308     y -= 255;
<a name="l00309"></a>00309   
<a name="l00310"></a>00310   ospfd_vals.x = <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>;
<a name="l00311"></a>00311   ospfd_vals.y = <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00312"></a>00312   
<a name="l00313"></a>00313   buffer[off] = <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>;
<a name="l00314"></a>00314   buffer[off + 1] = <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00315"></a>00315   
<a name="l00316"></a>00316   <span class="comment">/* take care endian issue. */</span>
<a name="l00317"></a>00317   checksum = htons ((x &lt;&lt; 8) | (y &amp; 0xff));
<a name="l00318"></a>00318 
<a name="l00319"></a>00319   <span class="keywordflow">return</span> (checksum);
<a name="l00320"></a>00320 }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322 <span class="comment">/* the original, broken isisd checksum */</span>
<a name="l00323"></a>00323 <span class="keyword">static</span> u_int16_t
<a name="l00324"></a><a class="code" href="test-checksum_8c.html#afc75d6f201bc2cbb9489377d5033cb58">00324</a> <a class="code" href="test-checksum_8c.html#afc75d6f201bc2cbb9489377d5033cb58">iso_csum_create</a> (u_char * buffer, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len, <a class="code" href="test-checksum_8c.html#aa43957957e6f947e78ce8b4767da9d56">testoff_t</a> off)
<a name="l00325"></a>00325 {
<a name="l00326"></a>00326 
<a name="l00327"></a>00327   u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00328"></a>00328   <span class="keywordtype">int</span> <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>;
<a name="l00329"></a>00329   <span class="keywordtype">int</span> <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00330"></a>00330   u_int32_t mul;
<a name="l00331"></a>00331   u_int32_t <a class="code" href="test-checksum_8c.html#ac18b3d0edccb2b9062a09d00b0d8b83b">c0</a>;
<a name="l00332"></a>00332   u_int32_t <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
<a name="l00333"></a>00333   u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>, *csum;
<a name="l00334"></a>00334   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, init_len, partial_len;
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   checksum = 0;
<a name="l00337"></a>00337   
<a name="l00338"></a>00338   csum = (u_int16_t *) (buffer + off);
<a name="l00339"></a>00339   *(csum) = checksum;
<a name="l00340"></a>00340   
<a name="l00341"></a>00341   p = buffer;
<a name="l00342"></a>00342   c0 = 0;
<a name="l00343"></a>00343   c1 = 0;
<a name="l00344"></a>00344   init_len = len;
<a name="l00345"></a>00345   
<a name="l00346"></a>00346   <span class="keywordflow">while</span> (len != 0)
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348       partial_len = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(len, <a class="code" href="test-checksum_8c.html#a11e929bea3766df0637b90580e8865fc">MODX</a>);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350       <span class="keywordflow">for</span> (i = 0; i &lt; partial_len; i++)
<a name="l00351"></a>00351     {
<a name="l00352"></a>00352       c0 = c0 + *(p++);
<a name="l00353"></a>00353       c1 += c0;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356       c0 = c0 % 255;
<a name="l00357"></a>00357       c1 = c1 % 255;
<a name="l00358"></a>00358 
<a name="l00359"></a>00359       len -= partial_len;
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362   <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a> = c0;
<a name="l00363"></a>00363   <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a> = c1;
<a name="l00364"></a>00364   
<a name="l00365"></a>00365   mul = (init_len - off) * c0;
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   x = mul - c1 - c0;
<a name="l00368"></a>00368   y = c1 - mul - 1;
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="keywordflow">if</span> (y &gt; 0)
<a name="l00371"></a>00371     y++;
<a name="l00372"></a>00372   <span class="keywordflow">if</span> (x &lt; 0)
<a name="l00373"></a>00373     x--;
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   x %= 255;
<a name="l00376"></a>00376   y %= 255;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (x == 0)
<a name="l00379"></a>00379     x = 255;
<a name="l00380"></a>00380   <span class="keywordflow">if</span> (y == 0)
<a name="l00381"></a>00381     y = 1;
<a name="l00382"></a>00382   
<a name="l00383"></a>00383   <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a> = <a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>;
<a name="l00384"></a>00384   <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a> = <a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>;
<a name="l00385"></a>00385   
<a name="l00386"></a>00386   checksum = htons((x &lt;&lt; 8) | (y &amp; 0xFF));
<a name="l00387"></a>00387   
<a name="l00388"></a>00388   *(csum) = checksum;
<a name="l00389"></a>00389   
<a name="l00390"></a>00390   <span class="comment">/* return the checksum for user usage */</span>
<a name="l00391"></a>00391   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
<a name="l00392"></a>00392 }
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00395"></a><a class="code" href="test-checksum_8c.html#a48bb61855d7bc03889d6c746b34fa787">00395</a> <a class="code" href="test-checksum_8c.html#a48bb61855d7bc03889d6c746b34fa787">verify</a> (u_char * buffer, <a class="code" href="test-checksum_8c.html#ad93add929db132509d483729a6d22f84">testsz_t</a> len)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397   u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00398"></a>00398   u_int32_t <a class="code" href="test-checksum_8c.html#ac18b3d0edccb2b9062a09d00b0d8b83b">c0</a>;
<a name="l00399"></a>00399   u_int32_t <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
<a name="l00400"></a>00400   u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
<a name="l00401"></a>00401   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, partial_len;
<a name="l00402"></a>00402  
<a name="l00403"></a>00403   p = buffer;
<a name="l00404"></a>00404   checksum = 0;
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   c0 = 0;
<a name="l00407"></a>00407   c1 = 0;
<a name="l00408"></a>00408 
<a name="l00409"></a>00409   <span class="keywordflow">while</span> (len)
<a name="l00410"></a>00410     {
<a name="l00411"></a>00411       partial_len = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(len, 5803);
<a name="l00412"></a>00412 
<a name="l00413"></a>00413       <span class="keywordflow">for</span> (i = 0; i &lt; partial_len; i++)
<a name="l00414"></a>00414         {
<a name="l00415"></a>00415           c0 = c0 + *(p++);
<a name="l00416"></a>00416           c1 += c0;
<a name="l00417"></a>00417         }
<a name="l00418"></a>00418       c0 = c0 % 255;
<a name="l00419"></a>00419       c1 = c1 % 255;
<a name="l00420"></a>00420 
<a name="l00421"></a>00421       len -= partial_len;
<a name="l00422"></a>00422     }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   <span class="keywordflow">if</span> (c0 == 0 &amp;&amp; c1 == 0)
<a name="l00425"></a>00425     <span class="keywordflow">return</span> 0;
<a name="l00426"></a>00426 
<a name="l00427"></a>00427   <span class="keywordflow">return</span> 1;
<a name="l00428"></a>00428 }
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 <span class="keywordtype">int</span>  <span class="comment">/* return checksum in low-order 16 bits */</span>
<a name="l00431"></a><a class="code" href="test-checksum_8c.html#af973a2caee18dc3ad9b2c995e87a075b">00431</a> <a class="code" href="test-checksum_8c.html#af973a2caee18dc3ad9b2c995e87a075b">in_cksum_optimized</a>(<span class="keywordtype">void</span> *parg, <span class="keywordtype">int</span> nbytes)
<a name="l00432"></a>00432 {
<a name="l00433"></a>00433     u_short *ptr = parg;
<a name="l00434"></a>00434     <span class="keyword">register</span> <span class="keywordtype">long</span>       sum;        <span class="comment">/* assumes long == 32 bits */</span>
<a name="l00435"></a>00435     <span class="keyword">register</span> u_short    answer;     <span class="comment">/* assumes u_short == 16 bits */</span>
<a name="l00436"></a>00436     <span class="keyword">register</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l00437"></a>00437     <span class="comment">/*</span>
<a name="l00438"></a>00438 <span class="comment">     * Our algorithm is simple, using a 32-bit accumulator (sum),</span>
<a name="l00439"></a>00439 <span class="comment">     * we add sequential 16-bit words to it, and at the end, fold back</span>
<a name="l00440"></a>00440 <span class="comment">     * all the carry bits from the top 16 bits into the lower 16 bits.</span>
<a name="l00441"></a>00441 <span class="comment">     */</span>
<a name="l00442"></a>00442 
<a name="l00443"></a>00443     sum = 0;
<a name="l00444"></a>00444     count = nbytes &gt;&gt; 1; <span class="comment">/* div by 2 */</span>
<a name="l00445"></a>00445     <span class="keywordflow">for</span>(ptr--; <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>; --<a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>)
<a name="l00446"></a>00446       sum += *++ptr;
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="keywordflow">if</span> (nbytes &amp; 1) <span class="comment">/* Odd */</span>
<a name="l00449"></a>00449       sum += *(u_char *)(++ptr);   <span class="comment">/* one byte only */</span>
<a name="l00450"></a>00450 
<a name="l00451"></a>00451     <span class="comment">/*</span>
<a name="l00452"></a>00452 <span class="comment">     * Add back carry outs from top 16 bits to low 16 bits.</span>
<a name="l00453"></a>00453 <span class="comment">     */</span>
<a name="l00454"></a>00454 
<a name="l00455"></a>00455     sum  = (sum &gt;&gt; 16) + (sum &amp; 0xffff);    <span class="comment">/* add high-16 to low-16 */</span>
<a name="l00456"></a>00456     sum += (sum &gt;&gt; 16);         <span class="comment">/* add carry */</span>
<a name="l00457"></a>00457     answer = ~sum;      <span class="comment">/* ones-complement, then truncate to 16 bits */</span>
<a name="l00458"></a>00458     <span class="keywordflow">return</span>(answer);
<a name="l00459"></a>00459 }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 
<a name="l00462"></a>00462 <span class="keywordtype">int</span> <span class="comment">/* return checksum in low-order 16 bits */</span>
<a name="l00463"></a><a class="code" href="test-checksum_8c.html#a78774dbd029216a52b98777cd34fe941">00463</a> <a class="code" href="test-checksum_8c.html#a78774dbd029216a52b98777cd34fe941">in_cksum_rfc</a>(<span class="keywordtype">void</span> *parg, <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>)
<a name="l00464"></a>00464 <span class="comment">/* from RFC 1071 */</span>
<a name="l00465"></a>00465 {
<a name="l00466"></a>00466     u_short *addr = parg;
<a name="l00467"></a>00467     <span class="comment">/* Compute Internet Checksum for &quot;count&quot; bytes</span>
<a name="l00468"></a>00468 <span class="comment">     *         beginning at location &quot;addr&quot;.</span>
<a name="l00469"></a>00469 <span class="comment">     */</span>
<a name="l00470"></a>00470     <span class="keyword">register</span> <span class="keywordtype">long</span>  sum = 0;
<a name="l00471"></a>00471 
<a name="l00472"></a>00472     <span class="keywordflow">while</span> (count &gt; 1)  {
<a name="l00473"></a>00473       <span class="comment">/*  This is the inner loop */</span>
<a name="l00474"></a>00474       sum += *addr++;
<a name="l00475"></a>00475       count -= 2;
<a name="l00476"></a>00476     }
<a name="l00477"></a>00477     <span class="comment">/*  Add left-over byte, if any */</span>
<a name="l00478"></a>00478     <span class="keywordflow">if</span> (count &gt; 0) {
<a name="l00479"></a>00479       sum += *(u_char *)addr;
<a name="l00480"></a>00480     }
<a name="l00481"></a>00481 
<a name="l00482"></a>00482     <span class="comment">/*  Fold 32-bit sum to 16 bits */</span>
<a name="l00483"></a>00483     <span class="keywordflow">while</span> (sum&gt;&gt;16)
<a name="l00484"></a>00484            sum = (sum &amp; 0xffff) + (sum &gt;&gt; 16);
<a name="l00485"></a>00485     <span class="keywordflow">return</span> ~sum;
<a name="l00486"></a>00486 }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488 
<a name="l00489"></a>00489 <span class="keywordtype">int</span>
<a name="l00490"></a><a class="code" href="test-checksum_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">00490</a> <a class="code" href="bgp__main_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00491"></a>00491 {
<a name="l00492"></a>00492 <span class="comment">/* 60017 65629 702179 */</span>
<a name="l00493"></a>00493 <span class="preprocessor">#define MAXDATALEN 60017</span>
<a name="l00494"></a>00494 <span class="preprocessor"></span><span class="preprocessor">#define BUFSIZE MAXDATALEN + sizeof(u_int16_t)</span>
<a name="l00495"></a>00495 <span class="preprocessor"></span>  u_char buffer[<a class="code" href="test-checksum_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>];
<a name="l00496"></a>00496   <span class="keywordtype">int</span> exercise = 0;
<a name="l00497"></a>00497 <span class="preprocessor">#define EXERCISESTEP 257</span>
<a name="l00498"></a>00498 <span class="preprocessor"></span>  
<a name="l00499"></a>00499   srandom (time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));
<a name="l00500"></a>00500   
<a name="l00501"></a>00501   <span class="keywordflow">while</span> (1) {
<a name="l00502"></a>00502     u_int16_t ospfd, isisd, lib, in_csum, in_csum_res, in_csum_rfc;
<a name="l00503"></a>00503     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>,<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00504"></a>00504 
<a name="l00505"></a>00505     exercise += <a class="code" href="test-checksum_8c.html#aa3a0984e5685b99862d62a8a2f85b227">EXERCISESTEP</a>;
<a name="l00506"></a>00506     exercise %= <a class="code" href="test-checksum_8c.html#ae1b93a0ba1047e249d4fbc461637a2d0">MAXDATALEN</a>;
<a name="l00507"></a>00507     
<a name="l00508"></a>00508     <span class="keywordflow">for</span> (i = 0; i &lt; exercise; i += <span class="keyword">sizeof</span> (<span class="keywordtype">long</span> int)) {
<a name="l00509"></a>00509       <span class="keywordtype">long</span> <span class="keywordtype">int</span> rand = random ();
<a name="l00510"></a>00510       
<a name="l00511"></a>00511       <span class="keywordflow">for</span> (j = <span class="keyword">sizeof</span> (<span class="keywordtype">long</span> <span class="keywordtype">int</span>); j &gt; 0; j--)
<a name="l00512"></a>00512         buffer[i + (<span class="keyword">sizeof</span> (<span class="keywordtype">long</span> <span class="keywordtype">int</span>) - j)] = (rand &gt;&gt; (j * 8)) &amp; 0xff;
<a name="l00513"></a>00513     }
<a name="l00514"></a>00514     
<a name="l00515"></a>00515     in_csum = <a class="code" href="checksum_8c.html#afd7d8e31fdd7d500d89ee477149e95fd">in_cksum</a>(buffer, exercise);
<a name="l00516"></a>00516     in_csum_res = <a class="code" href="test-checksum_8c.html#af973a2caee18dc3ad9b2c995e87a075b">in_cksum_optimized</a>(buffer, exercise);
<a name="l00517"></a>00517     in_csum_rfc = <a class="code" href="test-checksum_8c.html#a78774dbd029216a52b98777cd34fe941">in_cksum_rfc</a>(buffer, exercise);
<a name="l00518"></a>00518     <span class="keywordflow">if</span> (in_csum_res != in_csum || in_csum != in_csum_rfc)
<a name="l00519"></a>00519       printf (<span class="stringliteral">&quot;verify: in_chksum failed in_csum:%x, in_csum_res:%x,&quot;</span>
<a name="l00520"></a>00520           <span class="stringliteral">&quot;in_csum_rfc %x, len:%d\n&quot;</span>, 
<a name="l00521"></a>00521           in_csum, in_csum_res, in_csum_rfc, exercise);
<a name="l00522"></a>00522 
<a name="l00523"></a>00523     ospfd = <a class="code" href="test-checksum_8c.html#a667afad3d6a4acfbc47669b302f2403a">ospfd_checksum</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t), exercise);
<a name="l00524"></a>00524     <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a48bb61855d7bc03889d6c746b34fa787">verify</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t)))
<a name="l00525"></a>00525       printf (<span class="stringliteral">&quot;verify: ospfd failed\n&quot;</span>);
<a name="l00526"></a>00526     isisd = <a class="code" href="test-checksum_8c.html#afc75d6f201bc2cbb9489377d5033cb58">iso_csum_create</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t), exercise);
<a name="l00527"></a>00527     <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a48bb61855d7bc03889d6c746b34fa787">verify</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t)))
<a name="l00528"></a>00528       printf (<span class="stringliteral">&quot;verify: isisd failed\n&quot;</span>);
<a name="l00529"></a>00529     lib = <a class="code" href="checksum_8c.html#a097fa5404eb654e8e112bb954bf4ef15">fletcher_checksum</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t), exercise);
<a name="l00530"></a>00530     <span class="keywordflow">if</span> (<a class="code" href="test-checksum_8c.html#a48bb61855d7bc03889d6c746b34fa787">verify</a> (buffer, exercise + <span class="keyword">sizeof</span>(u_int16_t)))
<a name="l00531"></a>00531       printf (<span class="stringliteral">&quot;verify: lib failed\n&quot;</span>);
<a name="l00532"></a>00532     
<a name="l00533"></a>00533     <span class="keywordflow">if</span> (ospfd != lib) {
<a name="l00534"></a>00534       printf (<span class="stringliteral">&quot;Mismatch in values at size %u\n&quot;</span>
<a name="l00535"></a>00535               <span class="stringliteral">&quot;ospfd: 0x%04x\tc0: %d\tc1: %d\tx: %d\ty: %d\n&quot;</span>
<a name="l00536"></a>00536               <span class="stringliteral">&quot;isisd: 0x%04x\tc0: %d\tc1: %d\tx: %d\ty: %d\n&quot;</span>
<a name="l00537"></a>00537               <span class="stringliteral">&quot;lib: 0x%04x\n&quot;</span>,
<a name="l00538"></a>00538               exercise,
<a name="l00539"></a>00539               ospfd, ospfd_vals.a.c0, ospfd_vals.a.c1, ospfd_vals.x, ospfd_vals.y,
<a name="l00540"></a>00540               isisd, <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>, <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>, <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aa28e55a5387d16d6e45762a17eead949">x</a>, <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#abb8319b085fc67732f6206b709a83a7c">y</a>,
<a name="l00541"></a>00541               lib
<a name="l00542"></a>00542               );
<a name="l00543"></a>00543       
<a name="l00544"></a>00544       <span class="comment">/* Investigate reduction phase discrepencies */</span>
<a name="l00545"></a>00545       <span class="keywordflow">if</span> (ospfd_vals.a.c0 == <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#a3c6e725bc1c97a77a6ce6c7fafbc6c1f">c0</a>
<a name="l00546"></a>00546           &amp;&amp; ospfd_vals.a.c1 == <a class="code" href="test-checksum_8c.html#ad9e5d894468dd27179f1453fa3041fbd">isisd_vals</a>.<a class="code" href="structcsum__vals.html#aff3c49480d07294cb6798fa0c57c6287">a</a>.<a class="code" href="structacc__vals.html#aa57504fee724390a8df0afefc2df1451">c1</a>) {
<a name="l00547"></a>00547         printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00548"></a>00548         <span class="keywordflow">for</span> (i = 0; <a class="code" href="test-checksum_8c.html#a324b1b0e4eedf80047adad92de2b41b1">reducts</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structreductions__t.html#a63a1ee9edb7a3c3087e6ffe8517c1290">name</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; i++) { 
<a name="l00549"></a>00549           ospfd = <a class="code" href="test-checksum_8c.html#a324b1b0e4eedf80047adad92de2b41b1">reducts</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structreductions__t.html#ae13608d776d8126a03e4bcd1e69c2f80">f</a> (&amp;ospfd_vals,
<a name="l00550"></a>00550                                 exercise + <span class="keyword">sizeof</span> (u_int16_t),
<a name="l00551"></a>00551                                 exercise);
<a name="l00552"></a>00552           printf (<span class="stringliteral">&quot;%20s: x: %02x, y %02x, checksum 0x%04x\n&quot;</span>,
<a name="l00553"></a>00553                   <a class="code" href="test-checksum_8c.html#a324b1b0e4eedf80047adad92de2b41b1">reducts</a>[i].<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, ospfd_vals.x &amp; 0xff, ospfd_vals.y &amp; 0xff, ospfd);
<a name="l00554"></a>00554         }
<a name="l00555"></a>00555       }
<a name="l00556"></a>00556               
<a name="l00557"></a>00557       printf (<span class="stringliteral">&quot;\n  u_char testdata [] = {\n  &quot;</span>);
<a name="l00558"></a>00558       <span class="keywordflow">for</span> (i = 0; i &lt; exercise; i++) {
<a name="l00559"></a>00559         printf (<span class="stringliteral">&quot;0x%02x,%s&quot;</span>,
<a name="l00560"></a>00560                 buffer[i],
<a name="l00561"></a>00561                 (i + 1) % 8 ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot;\n  &quot;</span>);
<a name="l00562"></a>00562       }
<a name="l00563"></a>00563       printf (<span class="stringliteral">&quot;\n}\n&quot;</span>);
<a name="l00564"></a>00564       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00565"></a>00565     }
<a name="l00566"></a>00566   }
<a name="l00567"></a>00567 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="test-checksum_8c.html">test-checksum.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:08 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
