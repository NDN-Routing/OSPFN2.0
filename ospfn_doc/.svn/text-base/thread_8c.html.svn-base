<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/thread.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('thread_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">lib/thread.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sigevent_8h_source.html">sigevent.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for thread.c:</div>
<div class="dyncontent">
<div class="center"><img src="thread_8c__incl.png" border="0" usemap="#lib_2thread_8c" alt=""/></div>
<map name="lib_2thread_8c" id="lib_2thread_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1401,80,1467,107"/><area shape="rect" id="node61" href="thread_8h.html" title="thread.h" alt="" coords="3254,229,3326,256"/><area shape="rect" id="node63" href="memory_8h.html" title="memory.h" alt="" coords="2869,80,2951,107"/><area shape="rect" id="node67" href="log_8h.html" title="log.h" alt="" coords="2753,229,2805,256"/><area shape="rect" id="node70" href="hash_8h.html" title="hash.h" alt="" coords="3102,80,3163,107"/><area shape="rect" id="node72" href="command_8h.html" title="command.h" alt="" coords="2985,80,3077,107"/><area shape="rect" id="node82" href="sigevent_8h.html" title="sigevent.h" alt="" coords="3197,80,3283,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1959,155,2037,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2061,155,2110,181"/><area shape="rect" id="node65" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="2817,155,2931,181"/><area shape="rect" id="node74" href="vector_8h.html" title="vector.h" alt="" coords="3181,155,3253,181"/><area shape="rect" id="node76" href="vty_8h.html" title="vty.h" alt="" coords="2956,155,3007,181"/><area shape="rect" id="node80" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="3032,155,3155,181"/></map>
</div>
</div>
<p><a href="thread_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>&#160;&#160;&#160;1000000L</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (struct timeval a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a1319aaaefbf9495c89fbab6897c658d9">quagga_gettimeofday_relative_adjust</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (struct timeval *tv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (struct timeval *tv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (struct timeval *tv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (enum <a class="el" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33">quagga_clkid</a> clkid, struct timeval *tv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">time_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (time_t *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a1fadceaba2d45cf9cf8430a6bea93a33">cpu_record_hash_key</a> (struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a87716e67cf77adf4ff6aa44fa631719b">cpu_record_hash_cmp</a> (const struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *a, const struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a71b5dc1d90fa10bb18e354a8be3a1b6c">cpu_record_hash_alloc</a> (struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a90a7bc07dba1edf14f35aa4d2587f2cd">cpu_record_hash_free</a> (void *a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a3c0df4b8c320c5c2fc7c1b36fc32e165">cpu_record_hash_print</a> (struct <a class="el" href="structhash__backet.html">hash_backet</a> *bucket, void *<a class="el" href="ospfclient_8c.html#aa24f72e6a4d6a997528142211b375496">args</a>[])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ac4a4bad105f2c8e0e2ddbb829623e63c">cpu_record_print</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, <a class="el" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> <a class="el" href="structfilter.html">filter</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a0411f639ba1a2c64ff00fca1da16fff5">DEFUN</a> (show_thread_cpu, <a class="el" href="thread_8h.html#a63c4edb83677a6357d970e06d49ceaa0">show_thread_cpu_cmd</a>,&quot;show <a class="el" href="structthread.html">thread</a> cpu [FILTER]&quot;, SHOW_STR&quot;Thread information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Thread CPU usage\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Display <a class="el" href="structfilter.html">filter</a> (rwtexb)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a43c4623c2553d09a59385aabe971d75d">__attribute__</a> ((unused))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>, struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a60553a4df4e88a762c10cca9b7428ada">thread_list_add_before</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>, struct <a class="el" href="structthread.html">thread</a> *point, struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>, struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ab76204bd6666fde15615963cf1321d7a">thread_master_free</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a> (const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a8041051eacf6bce5743488023bbe18fa">funcname_thread_add_read</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, int fd, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a145fdb5cee329d701123fb3e4a60d168">funcname_thread_add_write</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, int fd, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *arg, struct timeval *time_relative, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a58d133b94acd384e3e17860bfd314952">funcname_thread_add_timer</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, long timer, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ab9a4f18865ee316298c9897f2500c45d">funcname_thread_add_timer_msec</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, long timer, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a5189a85a1556a30a429b7c49127f6775">funcname_thread_add_background</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, long delay, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a7234c594f84d5448ab4e62a2c53cc952">funcname_thread_add_event</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, int <a class="el" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>, const char *funcname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a97786b4a047014e5b642219f1013e066">thread_cancel_event</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, void *arg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *tlist, struct timeval *timer_val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>, struct <a class="el" href="structthread.html">thread</a> *fetch)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>, fd_set *fdset, fd_set *mfdset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (struct <a class="el" href="structthread__list.html">thread_list</a> *<a class="el" href="structlist.html">list</a>, struct timeval *timenow)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a1674b380ab1baf464b4f541c0a938656">thread_fetch</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, struct <a class="el" href="structthread.html">thread</a> *fetch)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ac1c4b7776745c9e3a9c77f136123c753">thread_consumed_time</a> (RUSAGE_T *now, RUSAGE_T *start, unsigned long *cputime)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a88220a6a17cb0a1dc2fda0f9ff9d7b01">thread_should_yield</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a345a9ddc4b551d2a3e6c38cb5df4cca3">thread_getrusage</a> (RUSAGE_T *r)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#ad394973cfd70bea11ea2d77b33e11b9c">funcname_thread_execute</a> (struct <a class="el" href="structthread__master.html">thread_master</a> *<a class="el" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, int(*<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>)(struct <a class="el" href="structthread.html">thread</a> *), void *arg, int <a class="el" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>, const char *funcname)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> = NULL</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a4a98ade79f532e91536ff397abdd2298"></a><!-- doxytag: member="thread.c::TIMER_SECOND_MICRO" ref="a4a98ade79f532e91536ff397abdd2298" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TIMER_SECOND_MICRO&#160;&#160;&#160;1000000L</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00045">45</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a43c4623c2553d09a59385aabe971d75d"></a><!-- doxytag: member="thread.c::__attribute__" ref="a43c4623c2553d09a59385aabe971d75d" args="((unused))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void __attribute__ </td>
          <td>(</td>
          <td class="paramtype">(unused)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00395">395</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  printf (<span class="stringliteral">&quot;-----------\n&quot;</span>);
  printf (<span class="stringliteral">&quot;readlist  : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;read);
  printf (<span class="stringliteral">&quot;writelist : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;write);
  printf (<span class="stringliteral">&quot;timerlist : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;timer);
  printf (<span class="stringliteral">&quot;eventlist : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;event);
  printf (<span class="stringliteral">&quot;unuselist : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;unuse);
  printf (<span class="stringliteral">&quot;bgndlist : &quot;</span>);
  <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;background);
  printf (<span class="stringliteral">&quot;total alloc: [%ld]\n&quot;</span>, <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>-&gt;alloc);
  printf (<span class="stringliteral">&quot;-----------\n&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71b5dc1d90fa10bb18e354a8be3a1b6c"></a><!-- doxytag: member="thread.c::cpu_record_hash_alloc" ref="a71b5dc1d90fa10bb18e354a8be3a1b6c" args="(struct cpu_thread_history *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* cpu_record_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00233">233</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *<span class="keyword">new</span>;
  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0d23653ef6da8574a9b65f0719483548">MTYPE_THREAD_STATS</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a>));
  <span class="keyword">new</span>-&gt;func = a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
  <span class="keyword">new</span>-&gt;funcname = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>);
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a87716e67cf77adf4ff6aa44fa631719b"></a><!-- doxytag: member="thread.c::cpu_record_hash_cmp" ref="a87716e67cf77adf4ff6aa44fa631719b" args="(const struct cpu_thread_history *a, const struct cpu_thread_history *b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int cpu_record_hash_cmp </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00226">226</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a> == b-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a90a7bc07dba1edf14f35aa4d2587f2cd"></a><!-- doxytag: member="thread.c::cpu_record_hash_free" ref="a90a7bc07dba1edf14f35aa4d2587f2cd" args="(void *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cpu_record_hash_free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00243">243</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *hist = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>;
 
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, hist-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0d23653ef6da8574a9b65f0719483548">MTYPE_THREAD_STATS</a>, hist);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1fadceaba2d45cf9cf8430a6bea93a33"></a><!-- doxytag: member="thread.c::cpu_record_hash_key" ref="a1fadceaba2d45cf9cf8430a6bea93a33" args="(struct cpu_thread_history *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int cpu_record_hash_key </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00220">220</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (uintptr_t) a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c0df4b8c320c5c2fc7c1b36fc32e165"></a><!-- doxytag: member="thread.c::cpu_record_hash_print" ref="a3c0df4b8c320c5c2fc7c1b36fc32e165" args="(struct hash_backet *bucket, void *args[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cpu_record_hash_print </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash__backet.html">hash_backet</a> *&#160;</td>
          <td class="paramname"><em>bucket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>args</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00276">276</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *totals = <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[0];
  <span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a> = <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[1];
  <a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> *<a class="code" href="structfilter.html">filter</a> = <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[2];
  <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a> = bucket-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
  
  a = bucket-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
  <span class="keywordflow">if</span> ( !(a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; *filter) )
       <span class="keywordflow">return</span>;
  <a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a>(vty,a);
  totals-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a> += a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>;
  totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a> += a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>;
  <span class="keywordflow">if</span> (totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> &lt; a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>)
    totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> = a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>;
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  totals-&gt;cpu.total += a-&gt;cpu.total;
  <span class="keywordflow">if</span> (totals-&gt;cpu.max &lt; a-&gt;cpu.max)
    totals-&gt;cpu.max = a-&gt;cpu.max;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>}
</pre></div>
</div>
</div>
<a class="anchor" id="ac4a4bad105f2c8e0e2ddbb829623e63c"></a><!-- doxytag: member="thread.c::cpu_record_print" ref="ac4a4bad105f2c8e0e2ddbb829623e63c" args="(struct vty *vty, thread_type filter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cpu_record_print </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a>&#160;</td>
          <td class="paramname"><em>filter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00300">300</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> tmp;
  <span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[3] = {&amp;tmp, <a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>, &amp;<a class="code" href="structfilter.html">filter</a>};

  memset(&amp;tmp, 0, <span class="keyword">sizeof</span> tmp);
  tmp.funcname = <span class="stringliteral">&quot;TOTAL&quot;</span>;
  tmp.types = <a class="code" href="structfilter.html">filter</a>;

<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%21s %18s %18s%s&quot;</span>,
      <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;CPU (user+system):&quot;</span>, <span class="stringliteral">&quot;Real (wall-clock):&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;Runtime(ms)   Invoked Avg uSec Max uSecs&quot;</span>);
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; Avg uSec Max uSecs&quot;</span>);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;  Type  Thread%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a>(<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a>,
           (<span class="keywordtype">void</span>(*)(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a>*,<span class="keywordtype">void</span>*))<a class="code" href="thread_8c.html#a3c0df4b8c320c5c2fc7c1b36fc32e165">cpu_record_hash_print</a>,
           args);

  <span class="keywordflow">if</span> (tmp.total_calls &gt; 0)
    <a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a>(vty, &amp;tmp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0411f639ba1a2c64ff00fca1da16fff5"></a><!-- doxytag: member="thread.c::DEFUN" ref="a0411f639ba1a2c64ff00fca1da16fff5" args="(show_thread_cpu, show_thread_cpu_cmd,&quot;show thread cpu [FILTER]&quot;, SHOW_STR&quot;Thread information\n&quot;&quot;Thread CPU usage\n&quot;&quot;Display filter (rwtexb)\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">show_thread_cpu&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="thread_8h.html#a63c4edb83677a6357d970e06d49ceaa0">show_thread_cpu_cmd</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;show <a class="el" href="structthread.html">thread</a> cpu &quot;&#160;</td>
          <td class="paramname">[FILTER], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHOW_STR&quot;Thread information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Thread CPU usage\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Display <a class="el" href="structfilter.html">filter</a> (rwtexb)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00326">326</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
  <a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> <a class="code" href="structfilter.html">filter</a> = (<a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a>) -1U;

  <span class="keywordflow">if</span> (argc &gt; 0)
    {
      filter = 0;
      <span class="keywordflow">while</span> (argv[0][i] != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <span class="keywordflow">switch</span> ( argv[0][i] )
        {
        <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;R&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <span class="charliteral">&#39;w&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;W&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;T&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <span class="charliteral">&#39;e&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;E&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <span class="charliteral">&#39;x&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;X&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:
        <span class="keywordflow">case</span> <span class="charliteral">&#39;B&#39;</span>:
          filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <span class="keywordflow">break</span>;
        }
      ++<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    }
      <span class="keywordflow">if</span> (filter == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid filter \&quot;%s\&quot; specified,&quot;</span>
                  <span class="stringliteral">&quot; must contain at least one of &#39;RWTEXB&#39;%s&quot;</span>,
          argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
    }

  <a class="code" href="thread_8c.html#ac4a4bad105f2c8e0e2ddbb829623e63c">cpu_record_print</a>(<a class="code" href="structvty.html">vty</a>, filter);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5189a85a1556a30a429b7c49127f6775"></a><!-- doxytag: member="thread.c::funcname_thread_add_background" ref="a5189a85a1556a30a429b7c49127f6775" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, long delay, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_background </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>delay</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00734">734</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval trel;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  
  <span class="keywordflow">if</span> (delay)
    {
      trel.tv_sec = delay / 1000;
      trel.tv_usec = 1000*(delay % 1000);
    }
  <span class="keywordflow">else</span>
    {
      trel.tv_sec = 0;
      trel.tv_usec = 0;
    }

  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>,
                                            arg, &amp;trel, funcname);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7234c594f84d5448ab4e62a2c53cc952"></a><!-- doxytag: member="thread.c::funcname_thread_add_event" ref="a7234c594f84d5448ab4e62a2c53cc952" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, int val, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_event </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00760">760</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
  thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a6227c63214eccba112bd640ebdde2753">val</a> = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
  <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>, thread);

  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8041051eacf6bce5743488023bbe18fa"></a><!-- doxytag: member="thread.c::funcname_thread_add_read" ref="a8041051eacf6bce5743488023bbe18fa" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, int fd, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00613">613</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">if</span> (FD_ISSET (<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;There is already read fd [%d]&quot;</span>, <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
  FD_SET (<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
  thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a> = <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>;
  <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>, thread);

  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a58d133b94acd384e3e17860bfd314952"></a><!-- doxytag: member="thread.c::funcname_thread_add_timer" ref="a58d133b94acd384e3e17860bfd314952" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, long timer, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>timer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00700">700</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval trel;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  trel.tv_sec = <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
  trel.tv_usec = 0;

  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>, arg, 
                                            &amp;trel, funcname);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab9a4f18865ee316298c9897f2500c45d"></a><!-- doxytag: member="thread.c::funcname_thread_add_timer_msec" ref="ab9a4f18865ee316298c9897f2500c45d" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, long timer, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_timer_msec </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>timer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00717">717</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval trel;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  trel.tv_sec = <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a> / 1000;
  trel.tv_usec = 1000*(<a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a> % 1000);

  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>, 
                                            arg, &amp;trel, funcname);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a33a0267163a9ed50a6b77946c1dd32ae"></a><!-- doxytag: member="thread.c::funcname_thread_add_timer_timeval" ref="a33a0267163a9ed50a6b77946c1dd32ae" args="(struct thread_master *m, int(*func)(struct thread *), int type, void *arg, struct timeval *time_relative, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_timer_timeval </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>time_relative</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00658">658</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
  <span class="keyword">struct </span><a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>;
  <span class="keyword">struct </span>timeval alarm_time;
  <span class="keyword">struct </span>thread *tt;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a> || <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (time_relative);
  
  list = ((<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>) ? &amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a> : &amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>);
  thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);

  <span class="comment">/* Do we need jitter here? */</span>
  <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  alarm_time.tv_sec = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec + time_relative-&gt;tv_sec;
  alarm_time.tv_usec = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec + time_relative-&gt;tv_usec;
  thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a> = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a>(alarm_time);

  <span class="comment">/* Sort by timeval. */</span>
  <span class="keywordflow">for</span> (tt = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; tt; tt = tt-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>, tt-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>) &lt;= 0)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (tt)
    <a class="code" href="thread_8c.html#a60553a4df4e88a762c10cca9b7428ada">thread_list_add_before</a> (list, tt, thread);
  <span class="keywordflow">else</span>
    <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (list, thread);

  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a145fdb5cee329d701123fb3e4a60d168"></a><!-- doxytag: member="thread.c::funcname_thread_add_write" ref="a145fdb5cee329d701123fb3e4a60d168" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, int fd, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_add_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00636">636</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">if</span> (FD_ISSET (<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;There is already write fd [%d]&quot;</span>, <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
  FD_SET (<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
  thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a> = <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>;
  <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>, thread);

  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad394973cfd70bea11ea2d77b33e11b9c"></a><!-- doxytag: member="thread.c::funcname_thread_execute" ref="ad394973cfd70bea11ea2d77b33e11b9c" args="(struct thread_master *m, int(*func)(struct thread *), void *arg, int val, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* funcname_thread_execute </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l01106">1106</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> dummy; 

  memset (&amp;dummy, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a>));

  dummy.type = <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>;
  dummy.add_type = <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>;
  dummy.master = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  dummy.func = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
  dummy.arg = <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>;
  dummy.u.val = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
  dummy.funcname = <a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a> (<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
  <a class="code" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (&amp;dummy);

  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, dummy.funcname);

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6162924e42c739da2dbd616d0f3e414a"></a><!-- doxytag: member="thread.c::quagga_get_relative" ref="a6162924e42c739da2dbd616d0f3e414a" args="(struct timeval *tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int quagga_get_relative </td>
          <td>(</td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>tv</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00142">142</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;

<span class="preprocessor">#ifdef HAVE_CLOCK_MONOTONIC</span>
<span class="preprocessor"></span>  {
    <span class="keyword">struct </span>timespec tp;
    <span class="keywordflow">if</span> (!(ret = clock_gettime (CLOCK_MONOTONIC, &amp;tp)))
      {
        <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec = tp.tv_sec;
        <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec = tp.tv_nsec / 1000;
      }
  }
<span class="preprocessor">#else </span><span class="comment">/* !HAVE_CLOCK_MONOTONIC */</span>
  <span class="keywordflow">if</span> (!(ret = <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>)))
    <a class="code" href="thread_8c.html#a1319aaaefbf9495c89fbab6897c658d9">quagga_gettimeofday_relative_adjust</a>();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_CLOCK_MONOTONIC */</span>

  <span class="keywordflow">if</span> (tv)
    *tv = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abf5861abe71d6f9a1ddd493be0218de1"></a><!-- doxytag: member="thread.c::quagga_gettime" ref="abf5861abe71d6f9a1ddd493be0218de1" args="(enum quagga_clkid clkid, struct timeval *tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int quagga_gettime </td>
          <td>(</td>
          <td class="paramtype">enum <a class="el" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33">quagga_clkid</a>&#160;</td>
          <td class="paramname"><em>clkid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>tv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00182">182</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">switch</span> (clkid)
    {
      <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a67f083bc4380ca6005b181636ccfdb45">QUAGGA_CLK_REALTIME</a>:
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (tv);
      <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>:
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (tv);
      <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a85be371def155525e04e8bf87dc9e8c5">QUAGGA_CLK_REALTIME_STABILISED</a>:
        <a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (tv);
        <span class="keywordflow">return</span> 0;
      <span class="keywordflow">default</span>:
        errno = EINVAL;
        <span class="keywordflow">return</span> -1;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad51eb53ab114e61bd4086ccafb31d624"></a><!-- doxytag: member="thread.c::quagga_gettimeofday" ref="ad51eb53ab114e61bd4086ccafb31d624" args="(struct timeval *tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int quagga_gettimeofday </td>
          <td>(</td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>tv</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00119">119</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (tv);
  
  <span class="keywordflow">if</span> (!(ret = gettimeofday (&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)))
    {
      <span class="comment">/* init... */</span>
      <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a>)
        {
          <a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a> = <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a> = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
          <a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a> = 1;
        }
      <span class="comment">/* avoid copy if user passed recent_time pointer.. */</span>
      <span class="keywordflow">if</span> (tv != &amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>)
        *tv = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
      <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1319aaaefbf9495c89fbab6897c658d9"></a><!-- doxytag: member="thread.c::quagga_gettimeofday_relative_adjust" ref="a1319aaaefbf9495c89fbab6897c658d9" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void quagga_gettimeofday_relative_adjust </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00098">98</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval diff;
  <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a>) &lt; 0)
    {
      <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec++;
      <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec = 0;
    }
  <span class="keywordflow">else</span>
    {
      diff = <a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a>);
      <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec += diff.tv_sec;
      <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec += diff.tv_usec;
      <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a> = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
    }
  <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a> = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7ca664cce78e66607cdcfebaf94ab986"></a><!-- doxytag: member="thread.c::quagga_real_stabilised" ref="a7ca664cce78e66607cdcfebaf94ab986" args="(struct timeval *tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void quagga_real_stabilised </td>
          <td>(</td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>tv</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00170">170</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  *tv = <a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a>;
  tv-&gt;tv_sec += <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec;
  tv-&gt;tv_usec += <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec;
  *tv = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (*tv);
}
</pre></div>
</div>
</div>
<a class="anchor" id="acbaf2206b84f93fbe18f33483bf101d2"></a><!-- doxytag: member="thread.c::quagga_time" ref="acbaf2206b84f93fbe18f33483bf101d2" args="(time_t *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">time_t quagga_time </td>
          <td>(</td>
          <td class="paramtype">time_t *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00203">203</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval tv;
  <a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (&amp;tv);
  <span class="keywordflow">if</span> (<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
    *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a> = tv.tv_sec;
  <span class="keywordflow">return</span> tv.tv_sec;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a010d58e49a3c74ae856d5cd111f7eb62"></a><!-- doxytag: member="thread.c::recent_relative_time" ref="a010d58e49a3c74ae856d5cd111f7eb62" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval recent_relative_time </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00214">214</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9f162b99efad06ceff2b0c53c0b4b8ed"></a><!-- doxytag: member="thread.c::strip_funcname" ref="a9f162b99efad06ceff2b0c53c0b4b8ed" args="(const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static char* strip_funcname </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00557">557</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> buff[100];
  <span class="keywordtype">char</span> tmp, *ret, *e, *<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a> = buff;

  strncpy(buff, funcname, <span class="keyword">sizeof</span>(buff));
  buff[ <span class="keyword">sizeof</span>(buff) -1] = <span class="charliteral">&#39;\0&#39;</span>;
  e = buff +strlen(buff) -1;

  <span class="comment">/* Wont work for funcname ==  &quot;Word (explanation)&quot;  */</span>

  <span class="keywordflow">while</span> (*b == <span class="charliteral">&#39; &#39;</span> || *b == <span class="charliteral">&#39;(&#39;</span>)
    ++b;
  <span class="keywordflow">while</span> (*e == <span class="charliteral">&#39; &#39;</span> || *e == <span class="charliteral">&#39;)&#39;</span>)
    --e;
  e++;

  tmp = *e;
  *e = <span class="charliteral">&#39;\0&#39;</span>;
  ret  = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, b);
  *e = tmp;

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac63b1e96ac90f51c686ba3c442abb975"></a><!-- doxytag: member="thread.c::thread_add_unuse" ref="ac63b1e96ac90f51c686ba3c442abb975" args="(struct thread_master *m, struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void thread_add_unuse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00477">477</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; thread != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> == <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>);
  <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>, thread);
  <span class="comment">/* XXX: Should we deallocate funcname here? */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aebb1b7a2cf2a872d69ab8c1e6f788744"></a><!-- doxytag: member="thread.c::thread_call" ref="aebb1b7a2cf2a872d69ab8c1e6f788744" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void thread_call </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l01045">1045</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> realtime, cputime;
  <a class="code" href="thread_8h.html#ae80bba1eb296573455cd5885ba8a52ad">RUSAGE_T</a> ru;

 <span class="comment">/* Cache a pointer to the relevant cpu history thread, if the thread</span>
<span class="comment">  * does not have it yet.</span>
<span class="comment">  *</span>
<span class="comment">  * Callers submitting &#39;dummy threads&#39; hence must take care that</span>
<span class="comment">  * thread-&gt;cpu is NULL</span>
<span class="comment">  */</span>
  <span class="keywordflow">if</span> (!thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> tmp;
      
      tmp.<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a> = thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>;
      tmp.funcname = thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>;
      
      thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a> = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a>, &amp;tmp, 
                    (<span class="keywordtype">void</span> * (*) (<span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a71b5dc1d90fa10bb18e354a8be3a1b6c">cpu_record_hash_alloc</a>);
    }

  <a class="code" href="thread_8h.html#a023e544a82cd098fc592b46066a7fa47">GETRUSAGE</a> (&amp;thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>);

  (*thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>) (thread);

  <a class="code" href="thread_8h.html#a023e544a82cd098fc592b46066a7fa47">GETRUSAGE</a> (&amp;ru);

  realtime = <a class="code" href="thread_8c.html#ac1c4b7776745c9e3a9c77f136123c753">thread_consumed_time</a> (&amp;ru, &amp;thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>, &amp;cputime);
  thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a> += realtime;
  <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> &lt; realtime)
    thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> = realtime;
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.total += cputime;
  <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.max &lt; cputime)
    thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.max = cputime;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  ++(thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>);
  thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> |= (1 &lt;&lt; thread-&gt;<a class="code" href="structthread.html#ab4c8d35109cfc7c65b19ad049928a60b">add_type</a>);

<span class="preprocessor">#ifdef CONSUMED_TIME_CHECK</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (realtime &gt; CONSUMED_TIME_CHECK)
    {
      <span class="comment">/*</span>
<span class="comment">       * We have a CPU Hog on our hands.</span>
<span class="comment">       * Whinge about it now, so we&#39;re aware this is yet another task</span>
<span class="comment">       * to fix.</span>
<span class="comment">       */</span>
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SLOW THREAD: task %s (%lx) ran for %lums (cpu time %lums)&quot;</span>,
         thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>,
         (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>,
         realtime/1000, cputime/1000);
    }
<span class="preprocessor">#endif </span><span class="comment">/* CONSUMED_TIME_CHECK */</span>

  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aceb89c1157b6a1d8bb3afa5021f1ab6d"></a><!-- doxytag: member="thread.c::thread_cancel" ref="aceb89c1157b6a1d8bb3afa5021f1ab6d" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void thread_cancel </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00776">776</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>;
  
  <span class="keywordflow">switch</span> (thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>:
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>));
      FD_CLR (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>:
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>));
      FD_CLR (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>:
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>:
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>:
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>:
      list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">return</span>;
      <span class="keywordflow">break</span>;
    }
  <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
  thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
  <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>, thread);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a97786b4a047014e5b642219f1013e066"></a><!-- doxytag: member="thread.c::thread_cancel_event" ref="a97786b4a047014e5b642219f1013e066" args="(struct thread_master *m, void *arg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int thread_cancel_event </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00815">815</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ret = 0;
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  thread = m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>.<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>;
  <span class="keywordflow">while</span> (thread)
    {
      <span class="keyword">struct </span>thread *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;

      t = thread;
      thread = t-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;

      <span class="keywordflow">if</span> (t-&gt;<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a> == <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>)
        {
          ret++;
          <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>, t);
          t-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
          <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (m, t);
        }
    }
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac1c4b7776745c9e3a9c77f136123c753"></a><!-- doxytag: member="thread.c::thread_consumed_time" ref="ac1c4b7776745c9e3a9c77f136123c753" args="(RUSAGE_T *now, RUSAGE_T *start, unsigned long *cputime)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long thread_consumed_time </td>
          <td>(</td>
          <td class="paramtype">RUSAGE_T *&#160;</td>
          <td class="paramname"><em>now</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">RUSAGE_T *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long *&#160;</td>
          <td class="paramname"><em>cputime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00994">994</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  <span class="comment">/* This is &#39;user + sys&#39; time.  */</span>
  *cputime = <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;cpu.ru_utime, start-&gt;cpu.ru_utime) +
         <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;cpu.ru_stime, start-&gt;cpu.ru_stime);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  *cputime = 0;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_RUSAGE */</span>
  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;real, start-&gt;real);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae55122d4c285e760264c32601cf1b5d4"></a><!-- doxytag: member="thread.c::thread_empty" ref="ae55122d4c285e760264c32601cf1b5d4" args="(struct thread_list *list)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int thread_empty </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00529">529</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span>  list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> ? 0 : 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1674b380ab1baf464b4f541c0a938656"></a><!-- doxytag: member="thread.c::thread_fetch" ref="a1674b380ab1baf464b4f541c0a938656" args="(struct thread_master *m, struct thread *fetch)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* thread_fetch </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>fetch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00908">908</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
  fd_set readfd;
  fd_set writefd;
  fd_set exceptfd;
  <span class="keyword">struct </span>timeval timer_val;
  <span class="keyword">struct </span>timeval timer_val_bg;
  <span class="keyword">struct </span>timeval *timer_wait;
  <span class="keyword">struct </span>timeval *timer_wait_bg;

  <span class="keywordflow">while</span> (1)
    {
      <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a> = 0;
      
      <span class="comment">/* Signals are highest priority */</span>
      <a class="code" href="sigevent_8c.html#ab6ff932a96b2e6e71c837feb570ec0b5">quagga_sigevent_process</a> ();
       
      <span class="comment">/* Normal event are the next highest priority.  */</span>
      <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
      
      <span class="comment">/* If there are any ready threads from previous scheduler runs,</span>
<span class="comment">       * process top of them.  </span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
      
      <span class="comment">/* Structure copy.  */</span>
      readfd = m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>;
      writefd = m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>;
      exceptfd = m-&gt;<a class="code" href="structthread__master.html#a917cad4df4dbddc7210cb26bc7e30c18">exceptfd</a>;
      
      <span class="comment">/* Calculate select wait timer if nothing else to do */</span>
      <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      timer_wait = <a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>, &amp;timer_val);
      timer_wait_bg = <a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>, &amp;timer_val_bg);
      
      <span class="keywordflow">if</span> (timer_wait_bg &amp;&amp;
      (!timer_wait || (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (*timer_wait, *timer_wait_bg) &gt; 0)))
    timer_wait = timer_wait_bg;
      
      num = select (FD_SETSIZE, &amp;readfd, &amp;writefd, &amp;exceptfd, timer_wait);
      
      <span class="comment">/* Signals should get quick treatment */</span>
      <span class="keywordflow">if</span> (num &lt; 0)
        {
          <span class="keywordflow">if</span> (errno == EINTR)
            <span class="keywordflow">continue</span>; <span class="comment">/* signal received - process it */</span>
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;select() error: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
            <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }

      <span class="comment">/* Check foreground timers.  Historically, they have had higher</span>
<span class="comment">         priority than I/O threads, so let&#39;s push them onto the ready</span>
<span class="comment">     list in front of the I/O threads. */</span>
      <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>, &amp;<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
      
      <span class="comment">/* Got IO, process it */</span>
      <span class="keywordflow">if</span> (num &gt; 0)
        {
          <span class="comment">/* Normal priority read thead. */</span>
          <a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>, &amp;readfd, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
          <span class="comment">/* Write thead. */</span>
          <a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>, &amp;writefd, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
        }

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>      <span class="comment">/* If any threads were made ready above (I/O or foreground timer),</span>
<span class="comment">         perhaps we should avoid adding background timers to the ready</span>
<span class="comment">     list at this time.  If this is code is uncommented, then background</span>
<span class="comment">     timer threads will not run unless there is nothing else to do. */</span>
      <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
      <span class="comment">/* Background timer/events, lowest priority */</span>
      <a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>, &amp;<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
      
      <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a697b2cd5a5e642a7dd8c057a1fbdd731"></a><!-- doxytag: member="thread.c::thread_get" ref="a697b2cd5a5e642a7dd8c057a1fbdd731" args="(struct thread_master *m, u_char type, int(*func)(struct thread *), void *arg, const char *funcname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structthread.html">thread</a>* thread_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(struct <a class="el" href="structthread.html">thread</a> *)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00584">584</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>))
    {
      thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>);
      <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
        <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
    }
  <span class="keywordflow">else</span>
    {
      thread = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6c39f6b5fde04725a8f8a9b0539cb6b7">MTYPE_THREAD</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> thread));
      m-&gt;<a class="code" href="structthread__master.html#a0ab4cf8d3269a6a002532430fb8650ce">alloc</a>++;
    }
  thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  thread-&gt;<a class="code" href="structthread.html#ab4c8d35109cfc7c65b19ad049928a60b">add_type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a> = <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
  thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
  thread-&gt;<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a> = <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>;
  
  thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a> = <a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a>(<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);

  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a345a9ddc4b551d2a3e6c38cb5df4cca3"></a><!-- doxytag: member="thread.c::thread_getrusage" ref="a345a9ddc4b551d2a3e6c38cb5df4cca3" args="(RUSAGE_T *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void thread_getrusage </td>
          <td>(</td>
          <td class="paramtype">RUSAGE_T *&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l01024">1024</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  getrusage(RUSAGE_SELF, &amp;(r-&gt;cpu));
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  r-&gt;real = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;

<span class="preprocessor">#ifdef HAVE_CLOCK_MONOTONIC</span>
<span class="preprocessor"></span>  <span class="comment">/* quagga_get_relative() only updates recent_time if gettimeofday</span>
<span class="comment">   * based, not when using CLOCK_MONOTONIC. As we export recent_time</span>
<span class="comment">   * and guarantee to update it before threads are run...</span>
<span class="comment">   */</span>
  <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a>(&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_CLOCK_MONOTONIC */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a34a5369ec2363172d0e3ca1722c6af89"></a><!-- doxytag: member="thread.c::thread_list_add" ref="a34a5369ec2363172d0e3ca1722c6af89" args="(struct thread_list *list, struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void thread_list_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00430">430</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>;
  <span class="keywordflow">if</span> (list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>)
    list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread;
  <span class="keywordflow">else</span>
    list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread;
  list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a> = thread;
  list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a60553a4df4e88a762c10cca9b7428ada"></a><!-- doxytag: member="thread.c::thread_list_add_before" ref="a60553a4df4e88a762c10cca9b7428ada" args="(struct thread_list *list, struct thread *point, struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void thread_list_add_before </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00444">444</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = point;
  thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
  <span class="keywordflow">if</span> (point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>)
    point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread;
  <span class="keywordflow">else</span>
    list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread;
  point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = thread;
  list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad8115cde4d813f0b66658700e3ba10b4"></a><!-- doxytag: member="thread.c::thread_list_debug" ref="ad8115cde4d813f0b66658700e3ba10b4" args="(struct thread_list *list)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void thread_list_debug </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00388">388</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  printf (<span class="stringliteral">&quot;count [%d] head [%p] tail [%p]\n&quot;</span>,
      list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>, list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>, list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab7535e35cab29df426182082f6bf3092"></a><!-- doxytag: member="thread.c::thread_list_delete" ref="ab7535e35cab29df426182082f6bf3092" args="(struct thread_list *list, struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structthread.html">thread</a>* thread_list_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00460">460</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
    thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
  <span class="keywordflow">else</span>
    list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
  <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>)
    thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
  <span class="keywordflow">else</span>
    list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
  thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>--;
  <span class="keywordflow">return</span> thread;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abced1a0a9a7ebae157bba12a08d3cd9d"></a><!-- doxytag: member="thread.c::thread_list_free" ref="abced1a0a9a7ebae157bba12a08d3cd9d" args="(struct thread_master *m, struct thread_list *list)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void thread_list_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00489">489</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;

  <span class="keywordflow">for</span> (t = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; t; t = next)
    {
      next = t-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
      <span class="keywordflow">if</span> (t-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
        <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, t-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6c39f6b5fde04725a8f8a9b0539cb6b7">MTYPE_THREAD</a>, t);
      list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>--;
      m-&gt;<a class="code" href="structthread__master.html#a0ab4cf8d3269a6a002532430fb8650ce">alloc</a>--;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6d9de673f4874d0c6b7f6a84b2e0e9cf"></a><!-- doxytag: member="thread.c::thread_master_create" ref="a6d9de673f4874d0c6b7f6a84b2e0e9cf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread__master.html">thread_master</a>* thread_master_create </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00417">417</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
    <a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> 
      = <a class="code" href="hash_8c.html#a5a114f3e041a28afaf1acfa760728c24">hash_create_size</a> (1011, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> (*) (<span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a1fadceaba2d45cf9cf8430a6bea93a33">cpu_record_hash_key</a>, 
                          (<span class="keywordtype">int</span> (*) (<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a87716e67cf77adf4ff6aa44fa631719b">cpu_record_hash_cmp</a>);
    
  <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *) <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6100532867b009792cd4bcee71cc3a9d">MTYPE_THREAD_MASTER</a>,
                       <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab76204bd6666fde15615963cf1321d7a"></a><!-- doxytag: member="thread.c::thread_master_free" ref="ab76204bd6666fde15615963cf1321d7a" args="(struct thread_master *m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void thread_master_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00507">507</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>);
  <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>);
  
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6100532867b009792cd4bcee71cc3a9d">MTYPE_THREAD_MASTER</a>, m);

  <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a>)
    {
      <a class="code" href="hash_8c.html#aec49275a7c4ae924ed351163af53c8c4">hash_clean</a> (<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a>, <a class="code" href="thread_8c.html#a90a7bc07dba1edf14f35aa4d2587f2cd">cpu_record_hash_free</a>);
      <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a>);
      <a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab82b84188675e0ad44ed5a2ab4b69b23"></a><!-- doxytag: member="thread.c::thread_process_fd" ref="ab82b84188675e0ad44ed5a2ab4b69b23" args="(struct thread_list *list, fd_set *fdset, fd_set *mfdset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int thread_process_fd </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>fdset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>mfdset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00862">862</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
  <span class="keyword">struct </span>thread *<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
  <span class="keywordtype">int</span> ready = 0;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (list);
  
  <span class="keywordflow">for</span> (thread = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; thread; thread = next)
    {
      next = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;

      <span class="keywordflow">if</span> (FD_ISSET (<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), fdset))
        {
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), mfdset));
          FD_CLR(<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), mfdset);
          <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
          <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>, thread);
          thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>;
          ready++;
        }
    }
  <span class="keywordflow">return</span> ready;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a72b9f9c754a9739bdf4344e9a014e7f9"></a><!-- doxytag: member="thread.c::thread_run" ref="a72b9f9c754a9739bdf4344e9a014e7f9" args="(struct thread_master *m, struct thread *thread, struct thread *fetch)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structthread.html">thread</a>* thread_run </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>fetch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00851">851</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  *fetch = *thread;
  thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
  thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;  <span class="comment">/* thread_call will free fetch&#39;s copied pointer */</span>
  <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (m, thread);
  <span class="keywordflow">return</span> fetch;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88220a6a17cb0a1dc2fda0f9ff9d7b01"></a><!-- doxytag: member="thread.c::thread_should_yield" ref="a88220a6a17cb0a1dc2fda0f9ff9d7b01" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int thread_should_yield </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l01016">1016</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">return</span> (<a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a>(<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>, thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>.real) &gt;
      <a class="code" href="thread_8h.html#aa5c27f37877fd023590e7c648a5115f5">THREAD_YIELD_TIME_SLOT</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1bc5297ffd699c2e3c4e346e9d80746b"></a><!-- doxytag: member="thread.c::thread_timer_process" ref="a1bc5297ffd699c2e3c4e346e9d80746b" args="(struct thread_list *list, struct timeval *timenow)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int thread_timer_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>timenow</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00889">889</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ready = 0;
  
  <span class="keywordflow">for</span> (thread = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; thread; thread = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (*timenow, thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>) &lt; 0)
        <span class="keywordflow">return</span> ready;
      <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
      thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>;
      <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>, thread);
      ready++;
    }
  <span class="keywordflow">return</span> ready;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a945cdaf798bf660e0aebacfabfb27d16"></a><!-- doxytag: member="thread.c::thread_timer_remain_second" ref="a945cdaf798bf660e0aebacfabfb27d16" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long thread_timer_remain_second </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00545">545</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  
  <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>.tv_sec - <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec &gt; 0)
    <span class="keywordflow">return</span> thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>.tv_sec - <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec;
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa4c40f0b110e2eced017dca60bba55fb"></a><!-- doxytag: member="thread.c::thread_timer_wait" ref="aa4c40f0b110e2eced017dca60bba55fb" args="(struct thread_list *tlist, struct timeval *timer_val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct timeval* thread_timer_wait </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>tlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval *&#160;</td>
          <td class="paramname"><em>timer_val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00840">840</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (tlist))
    {
      *timer_val = <a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (tlist-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>, <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
      <span class="keywordflow">return</span> timer_val;
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ace0fd9744c01d7c4f276a455ae274a5a"></a><!-- doxytag: member="thread.c::thread_trim_head" ref="ace0fd9744c01d7c4f276a455ae274a5a" args="(struct thread_list *list)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structthread.html">thread</a>* thread_trim_head </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread__list.html">thread_list</a> *&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00536">536</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (list))
    <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>);
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a09517c4217c981af6389ec7f45305cac"></a><!-- doxytag: member="thread.c::timeval_adjust" ref="a09517c4217c981af6389ec7f45305cac" args="(struct timeval a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct timeval timeval_adjust </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00050">50</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &gt;= <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>)
    {
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec -= <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>;
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec++;
    }

  <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &lt; 0)
    {
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec += <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>;
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec--;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec &lt; 0)
      <span class="comment">/* Change negative timeouts to 0. */</span>
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec = 0;

  <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa1ca10e55c5d63c146011c08645a758f"></a><!-- doxytag: member="thread.c::timeval_cmp" ref="aa1ca10e55c5d63c146011c08645a758f" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static long timeval_cmp </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00083">83</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec == <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec
      ? <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec : <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af2615a326d45637b285f5f1e871f7cfb"></a><!-- doxytag: member="thread.c::timeval_elapsed" ref="af2615a326d45637b285f5f1e871f7cfb" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned long timeval_elapsed </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00090">90</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (((<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec) * <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>)
      + (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5617030f60e61f06b3bcdb5fcf6ba1c2"></a><!-- doxytag: member="thread.c::timeval_subtract" ref="a5617030f60e61f06b3bcdb5fcf6ba1c2" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct timeval timeval_subtract </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00072">72</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval ret;

  ret.tv_usec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec;
  ret.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec;

  <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (ret);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a450c10ffe183712017ae34ccc8523c1d"></a><!-- doxytag: member="thread.c::vty_out_cpu_thread_history" ref="a450c10ffe183712017ae34ccc8523c1d" args="(struct vty *vty, struct cpu_thread_history *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void vty_out_cpu_thread_history </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcpu__thread__history.html">cpu_thread_history</a> *&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00252">252</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%7ld.%03ld %9d %8ld %9ld %8ld %9ld&quot;</span>,
      a-&gt;cpu.total/1000, a-&gt;cpu.total%1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>,
      a-&gt;cpu.total/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;cpu.max,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%7ld.%03ld %9d %8ld %9ld&quot;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>%1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; %c%c%c%c%c%c %s%s&quot;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>) ? <span class="charliteral">&#39;R&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>) ? <span class="charliteral">&#39;W&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>) ? <span class="charliteral">&#39;T&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>) ? <span class="charliteral">&#39;E&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>) ? <span class="charliteral">&#39;X&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>) ? <span class="charliteral">&#39;B&#39;</span> : <span class="charliteral">&#39; &#39;</span>,
      a-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a1d43d0f6cd528b5623ce986867eb8c39"></a><!-- doxytag: member="thread.c::cpu_record" ref="a1d43d0f6cd528b5623ce986867eb8c39" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* <a class="el" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> = NULL<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00042">42</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<a class="anchor" id="a6d7ee2ed7b87f5dc8bf0ae35869aa431"></a><!-- doxytag: member="thread.c::last_recent_time" ref="a6d7ee2ed7b87f5dc8bf0ae35869aa431" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00035">35</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<a class="anchor" id="a9a54ae2e02ed1087c32ce72620a940c8"></a><!-- doxytag: member="thread.c::recent_time" ref="a9a54ae2e02ed1087c32ce72620a940c8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="thread_8h.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00034">34</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<a class="anchor" id="abda4476ec5465f81c34ecc0d4f9e713b"></a><!-- doxytag: member="thread.c::relative_time" ref="abda4476ec5465f81c34ecc0d4f9e713b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00037">37</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<a class="anchor" id="aebf7ed8781c4df73b58e4fa7a564b1da"></a><!-- doxytag: member="thread.c::relative_time_base" ref="aebf7ed8781c4df73b58e4fa7a564b1da" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00038">38</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
<a class="anchor" id="a9cf50498bdcd65b26e5d568f73afc2e7"></a><!-- doxytag: member="thread.c::timers_inited" ref="a9cf50498bdcd65b26e5d568f73afc2e7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short <a class="el" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="thread_8c_source.html#l00040">40</a> of file <a class="el" href="thread_8c_source.html">thread.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="thread_8c.html">thread.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:25 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
