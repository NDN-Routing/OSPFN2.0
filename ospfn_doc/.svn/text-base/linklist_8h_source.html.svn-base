<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/linklist.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('linklist_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/linklist.h</div>  </div>
</div>
<div class="contents">
<a href="linklist_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Generic linked list</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1997, 2000 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef _ZEBRA_LINKLIST_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define _ZEBRA_LINKLIST_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="comment">/* listnodes must always contain data to be valid. Adding an empty node</span>
<a name="l00026"></a>00026 <span class="comment"> * to a list is invalid</span>
<a name="l00027"></a>00027 <span class="comment"> */</span>
<a name="l00028"></a><a class="code" href="structlistnode.html">00028</a> <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> 
<a name="l00029"></a>00029 {
<a name="l00030"></a><a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">00030</a>   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
<a name="l00031"></a><a class="code" href="structlistnode.html#a8b609f208077f7feb194c1859e9b2d40">00031</a>   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a8b609f208077f7feb194c1859e9b2d40">prev</a>;
<a name="l00032"></a>00032   
<a name="l00033"></a>00033   <span class="comment">/* private member, use getdata() to retrieve, do not access directly */</span>
<a name="l00034"></a><a class="code" href="structlistnode.html#ac46cd7d051b28b7ec9f2ad3986605bd5">00034</a>   <span class="keywordtype">void</span> *<a class="code" href="structlistnode.html#ac46cd7d051b28b7ec9f2ad3986605bd5">data</a>;
<a name="l00035"></a>00035 };
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="structlist.html">00037</a> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> 
<a name="l00038"></a>00038 {
<a name="l00039"></a><a class="code" href="structlist.html#a8306954be149c09248a51079826dd5f8">00039</a>   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlist.html#a8306954be149c09248a51079826dd5f8">head</a>;
<a name="l00040"></a><a class="code" href="structlist.html#a92df9371518988e714aa5c5c4aefa1bb">00040</a>   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlist.html#a92df9371518988e714aa5c5c4aefa1bb">tail</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   <span class="comment">/* invariant: count is the number of listnodes in the list */</span>
<a name="l00043"></a><a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">00043</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045   <span class="comment">/*</span>
<a name="l00046"></a>00046 <span class="comment">   * Returns -1 if val1 &lt; val2, 0 if equal?, 1 if val1 &gt; val2.</span>
<a name="l00047"></a>00047 <span class="comment">   * Used as definition of sorted for listnode_add_sort</span>
<a name="l00048"></a>00048 <span class="comment">   */</span>
<a name="l00049"></a><a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">00049</a>   int (*<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a>) (<span class="keywordtype">void</span> *val1, <span class="keywordtype">void</span> *val2);
<a name="l00050"></a>00050 
<a name="l00051"></a>00051   <span class="comment">/* callback to free user-owned data when listnode is deleted. supplying</span>
<a name="l00052"></a>00052 <span class="comment">   * this callback is very much encouraged!</span>
<a name="l00053"></a>00053 <span class="comment">   */</span>
<a name="l00054"></a><a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">00054</a>   void (*<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a>) (<span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>);
<a name="l00055"></a>00055 };
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">00057</a> <span class="preprocessor">#define listnextnode(X) ((X)-&gt;next)</span>
<a name="l00058"></a><a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">00058</a> <span class="preprocessor"></span><span class="preprocessor">#define listhead(X) ((X)-&gt;head)</span>
<a name="l00059"></a><a class="code" href="linklist_8h.html#a50e32cbff5b5b7f2494387516fd818fc">00059</a> <span class="preprocessor"></span><span class="preprocessor">#define listtail(X) ((X)-&gt;tail)</span>
<a name="l00060"></a><a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">00060</a> <span class="preprocessor"></span><span class="preprocessor">#define listcount(X) ((X)-&gt;count)</span>
<a name="l00061"></a><a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">00061</a> <span class="preprocessor"></span><span class="preprocessor">#define list_isempty(X) ((X)-&gt;head == NULL &amp;&amp; (X)-&gt;tail == NULL)</span>
<a name="l00062"></a><a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">00062</a> <span class="preprocessor"></span><span class="preprocessor">#define listgetdata(X) (assert((X)-&gt;data != NULL), (X)-&gt;data)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>
<a name="l00064"></a>00064 <span class="comment">/* Prototypes. */</span>
<a name="l00065"></a>00065 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *<a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a>(<span class="keywordtype">void</span>); <span class="comment">/* encouraged: set list.del callback on new lists */</span>
<a name="l00066"></a>00066 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keywordtype">void</span> *);
<a name="l00069"></a>00069 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keywordtype">void</span> *);
<a name="l00070"></a>00070 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#a79bb88c8c4960a3d28778f4b87af05c8">listnode_add_after</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keyword">struct</span> <a class="code" href="structlistnode.html">listnode</a> *, <span class="keywordtype">void</span> *);
<a name="l00071"></a>00071 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keywordtype">void</span> *);
<a name="l00072"></a>00072 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keywordtype">void</span> *);
<a name="l00073"></a>00073 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="linklist_8c.html#a3260e282746edff39ac90288002c509f">listnode_head</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *);
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *);
<a name="l00076"></a>00076 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">/* For ospfd and ospf6d. */</span>
<a name="l00079"></a>00079 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keyword">struct</span> <a class="code" href="structlistnode.html">listnode</a> *);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="comment">/* For ospf_spf.c */</span>
<a name="l00082"></a>00082 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#ae1c29615b6d8dc3eda9042c95c666abb">list_add_node_prev</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keyword">struct</span> <a class="code" href="structlistnode.html">listnode</a> *, <span class="keywordtype">void</span> *);
<a name="l00083"></a>00083 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#ad0ed9efa84ffffcd32334a48dfed446f">list_add_node_next</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keyword">struct</span> <a class="code" href="structlistnode.html">listnode</a> *, <span class="keywordtype">void</span> *);
<a name="l00084"></a>00084 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="linklist_8c.html#a16998dd330cc465279ed29cefc25e82f">list_add_list</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">/* List iteration macro. </span>
<a name="l00087"></a>00087 <span class="comment"> * Usage: for (ALL_LIST_ELEMENTS (...) { ... }</span>
<a name="l00088"></a>00088 <span class="comment"> * It is safe to delete the listnode using this macro.</span>
<a name="l00089"></a>00089 <span class="comment"> */</span>
<a name="l00090"></a><a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">00090</a> <span class="preprocessor">#define ALL_LIST_ELEMENTS(list,node,nextnode,data) \</span>
<a name="l00091"></a>00091 <span class="preprocessor">  (node) = listhead(list); \</span>
<a name="l00092"></a>00092 <span class="preprocessor">  (node) != NULL &amp;&amp; \</span>
<a name="l00093"></a>00093 <span class="preprocessor">    ((data) = listgetdata(node),(nextnode) = listnextnode(node), 1); \</span>
<a name="l00094"></a>00094 <span class="preprocessor">  (node) = (nextnode)</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 <span class="comment">/* read-only list iteration macro.</span>
<a name="l00097"></a>00097 <span class="comment"> * Usage: as per ALL_LIST_ELEMENTS, but not safe to delete the listnode Only</span>
<a name="l00098"></a>00098 <span class="comment"> * use this macro when it is *immediately obvious* the listnode is not</span>
<a name="l00099"></a>00099 <span class="comment"> * deleted in the body of the loop. Does not have forward-reference overhead</span>
<a name="l00100"></a>00100 <span class="comment"> * of previous macro.</span>
<a name="l00101"></a>00101 <span class="comment"> */</span>
<a name="l00102"></a><a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">00102</a> <span class="preprocessor">#define ALL_LIST_ELEMENTS_RO(list,node,data) \</span>
<a name="l00103"></a>00103 <span class="preprocessor">  (node) = listhead(list); \</span>
<a name="l00104"></a>00104 <span class="preprocessor">  (node) != NULL &amp;&amp; ((data) = listgetdata(node), 1); \</span>
<a name="l00105"></a>00105 <span class="preprocessor">  (node) = listnextnode(node)</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>
<a name="l00107"></a>00107 <span class="comment">/* these *do not* cleanup list nodes and referenced data, as the functions</span>
<a name="l00108"></a>00108 <span class="comment"> * do - these macros simply {de,at}tach a listnode from/to a list.</span>
<a name="l00109"></a>00109 <span class="comment"> */</span>
<a name="l00110"></a>00110  
<a name="l00111"></a>00111 <span class="comment">/* List node attach macro.  */</span>
<a name="l00112"></a><a class="code" href="linklist_8h.html#ac42ea544a64b2473b67317978c856e69">00112</a> <span class="preprocessor">#define LISTNODE_ATTACH(L,N) \</span>
<a name="l00113"></a>00113 <span class="preprocessor">  do { \</span>
<a name="l00114"></a>00114 <span class="preprocessor">    (N)-&gt;prev = (L)-&gt;tail; \</span>
<a name="l00115"></a>00115 <span class="preprocessor">    if ((L)-&gt;head == NULL) \</span>
<a name="l00116"></a>00116 <span class="preprocessor">      (L)-&gt;head = (N); \</span>
<a name="l00117"></a>00117 <span class="preprocessor">    else \</span>
<a name="l00118"></a>00118 <span class="preprocessor">      (L)-&gt;tail-&gt;next = (N); \</span>
<a name="l00119"></a>00119 <span class="preprocessor">    (L)-&gt;tail = (N); \</span>
<a name="l00120"></a>00120 <span class="preprocessor">    (L)-&gt;count++; \</span>
<a name="l00121"></a>00121 <span class="preprocessor">  } while (0)</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span>
<a name="l00123"></a>00123 <span class="comment">/* List node detach macro.  */</span>
<a name="l00124"></a><a class="code" href="linklist_8h.html#a5eddb5f71ca3e7eebf20e4af45c4a98d">00124</a> <span class="preprocessor">#define LISTNODE_DETACH(L,N) \</span>
<a name="l00125"></a>00125 <span class="preprocessor">  do { \</span>
<a name="l00126"></a>00126 <span class="preprocessor">    if ((N)-&gt;prev) \</span>
<a name="l00127"></a>00127 <span class="preprocessor">      (N)-&gt;prev-&gt;next = (N)-&gt;next; \</span>
<a name="l00128"></a>00128 <span class="preprocessor">    else \</span>
<a name="l00129"></a>00129 <span class="preprocessor">      (L)-&gt;head = (N)-&gt;next; \</span>
<a name="l00130"></a>00130 <span class="preprocessor">    if ((N)-&gt;next) \</span>
<a name="l00131"></a>00131 <span class="preprocessor">      (N)-&gt;next-&gt;prev = (N)-&gt;prev; \</span>
<a name="l00132"></a>00132 <span class="preprocessor">    else \</span>
<a name="l00133"></a>00133 <span class="preprocessor">      (L)-&gt;tail = (N)-&gt;prev; \</span>
<a name="l00134"></a>00134 <span class="preprocessor">    (L)-&gt;count--; \</span>
<a name="l00135"></a>00135 <span class="preprocessor">  } while (0)</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span>
<a name="l00137"></a>00137 <span class="comment">/* Deprecated: 20050406 */</span>
<a name="l00138"></a>00138 <span class="preprocessor">#if !defined(QUAGGA_NO_DEPRECATED_INTERFACES)</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;Using deprecated libzebra interfaces&quot;</span>
<a name="l00140"></a><a class="code" href="linklist_8h.html#a54292694130206f0198c0331b485058b">00140</a> <span class="preprocessor"></span><span class="preprocessor">#define LISTNODE_ADD(L,N) LISTNODE_ATTACH(L,N)</span>
<a name="l00141"></a><a class="code" href="linklist_8h.html#a554dce8a9d8ff0b864403967d1359bf9">00141</a> <span class="preprocessor"></span><span class="preprocessor">#define LISTNODE_DELETE(L,N) LISTNODE_DETACH(L,N)</span>
<a name="l00142"></a><a class="code" href="linklist_8h.html#a55fb4579b486236096a9ead8ece51bad">00142</a> <span class="preprocessor"></span><span class="preprocessor">#define nextnode(X) ((X) = (X)-&gt;next)</span>
<a name="l00143"></a><a class="code" href="linklist_8h.html#a770a4c4af7ad7c7e252da659a8f5f0ae">00143</a> <span class="preprocessor"></span><span class="preprocessor">#define getdata(X) listgetdata(X)</span>
<a name="l00144"></a><a class="code" href="linklist_8h.html#aaaccccbd2d2402893c277613efa0858a">00144</a> <span class="preprocessor"></span><span class="preprocessor">#define LIST_LOOP(L,V,N) \</span>
<a name="l00145"></a>00145 <span class="preprocessor">  for (ALL_LIST_ELEMENTS_RO (L,N,V))</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* QUAGGA_NO_DEPRECATED_INTERFACES */</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="preprocessor">#endif </span><span class="comment">/* _ZEBRA_LINKLIST_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="linklist_8h.html">linklist.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
