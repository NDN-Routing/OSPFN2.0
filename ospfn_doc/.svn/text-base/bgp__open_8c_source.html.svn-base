<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_open.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__open_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_open.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__open_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP open message handling</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1998, 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="bgp__fsm_8h.html">bgpd/bgp_fsm.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="bgp__packet_8h.html">bgpd/bgp_packet.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="bgp__open_8h.html">bgpd/bgp_open.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="bgp__vty_8h.html">bgpd/bgp_vty.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">/* BGP-4 Multiprotocol Extentions lead us to the complex world. We can</span>
<a name="l00041"></a>00041 <span class="comment">   negotiate remote peer supports extentions or not. But if</span>
<a name="l00042"></a>00042 <span class="comment">   remote-peer doesn&#39;t supports negotiation process itself.  We would</span>
<a name="l00043"></a>00043 <span class="comment">   like to do manual configuration.</span>
<a name="l00044"></a>00044 <span class="comment"></span>
<a name="l00045"></a>00045 <span class="comment">   So there is many configurable point.  First of all we want set each</span>
<a name="l00046"></a>00046 <span class="comment">   peer whether we send capability negotiation to the peer or not.</span>
<a name="l00047"></a>00047 <span class="comment">   Next, if we send capability to the peer we want to set my capabilty</span>
<a name="l00048"></a>00048 <span class="comment">   inforation at each peer. */</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keywordtype">void</span>
<a name="l00051"></a><a class="code" href="bgp__open_8h.html#a1a271e8b7c94980321e5c29049831c29">00051</a> <a class="code" href="bgp__open_8c.html#a5a43544def56619fc4d175b041e5ef9d">bgp_capability_vty_out</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053   <span class="keywordtype">char</span> *pnt;
<a name="l00054"></a>00054   <span class="keywordtype">char</span> *end;
<a name="l00055"></a>00055   <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> mpc;
<a name="l00056"></a>00056   <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *hdr;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   pnt = peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>;
<a name="l00059"></a>00059   end = pnt + peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>;
<a name="l00060"></a>00060   
<a name="l00061"></a>00061   <span class="keywordflow">while</span> (pnt &lt; end)
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063       <span class="keywordflow">if</span> (pnt + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>) + 2 &gt; end)
<a name="l00064"></a>00064     <span class="keywordflow">return</span>;
<a name="l00065"></a>00065       
<a name="l00066"></a>00066       hdr = (<span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *)pnt;
<a name="l00067"></a>00067       <span class="keywordflow">if</span> (pnt + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2 &gt; end)
<a name="l00068"></a>00068     <span class="keywordflow">return</span>;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mpc, pnt + 2, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>));
<a name="l00071"></a>00071 
<a name="l00072"></a>00072       <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error for: Multi protocol &quot;</span>);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076       <span class="keywordflow">switch</span> (ntohs (mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>))
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
<a name="l00079"></a>00079           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI IPv4, &quot;</span>);
<a name="l00080"></a>00080           <span class="keywordflow">break</span>;
<a name="l00081"></a>00081         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
<a name="l00082"></a>00082           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI IPv6, &quot;</span>);
<a name="l00083"></a>00083           <span class="keywordflow">break</span>;
<a name="l00084"></a>00084         <span class="keywordflow">default</span>:
<a name="l00085"></a>00085           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI Unknown %d, &quot;</span>, ntohs (mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>));
<a name="l00086"></a>00086           <span class="keywordflow">break</span>;
<a name="l00087"></a>00087         }
<a name="l00088"></a>00088       <span class="keywordflow">switch</span> (mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>)
<a name="l00089"></a>00089         {
<a name="l00090"></a>00090         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
<a name="l00091"></a>00091           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unicast&quot;</span>);
<a name="l00092"></a>00092           <span class="keywordflow">break</span>;
<a name="l00093"></a>00093         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
<a name="l00094"></a>00094           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Multicast&quot;</span>);
<a name="l00095"></a>00095           <span class="keywordflow">break</span>;
<a name="l00096"></a>00096         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a>:
<a name="l00097"></a>00097           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unicast Multicast&quot;</span>);
<a name="l00098"></a>00098           <span class="keywordflow">break</span>;
<a name="l00099"></a>00099         <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
<a name="l00100"></a>00100           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI MPLS-VPN&quot;</span>);
<a name="l00101"></a>00101           <span class="keywordflow">break</span>;
<a name="l00102"></a>00102         <span class="keywordflow">default</span>:
<a name="l00103"></a>00103           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unknown %d &quot;</span>, mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
<a name="l00104"></a>00104           <span class="keywordflow">break</span>;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> &gt;= 128)
<a name="l00109"></a>00109     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error: vendor specific capability code %d&quot;</span>,
<a name="l00110"></a>00110          hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
<a name="l00111"></a>00111       <span class="keywordflow">else</span>
<a name="l00112"></a>00112     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error: unknown capability code %d&quot;</span>, 
<a name="l00113"></a>00113          hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115       pnt += hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2;
<a name="l00116"></a>00116     }
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="keyword">static</span> <span class="keywordtype">void</span> 
<a name="l00120"></a><a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">00120</a> <a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a> *<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122   mpc-&gt;<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a> = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00123"></a>00123   mpc-&gt;<a class="code" href="structcapability__mp__data.html#ac1968e8f607bea6f0d48e86bb703e28b">reserved</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00124"></a>00124   mpc-&gt;<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="keywordtype">int</span>
<a name="l00128"></a><a class="code" href="bgp__open_8h.html#a069562357de00829ce6742935ed4d8c1">00128</a> <a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> *safi)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130   <span class="comment">/* VPNvX are AFI specific */</span>
<a name="l00131"></a>00131   <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l00132"></a>00132       || (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>))
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid afi/safi combination (%u/%u)&quot;</span>, afi, *safi);
<a name="l00135"></a>00135       <span class="keywordflow">return</span> 0;
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137   
<a name="l00138"></a>00138   <span class="keywordflow">switch</span> (afi)
<a name="l00139"></a>00139     {
<a name="l00140"></a>00140       <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
<a name="l00141"></a>00141 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span>      <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
<a name="l00143"></a>00143 <span class="preprocessor">#endif</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span>        <span class="keywordflow">switch</span> (*safi)
<a name="l00145"></a>00145           {
<a name="l00146"></a>00146             <span class="comment">/* BGP VPNvX SAFI isn&#39;t contigious with others, remap */</span>
<a name="l00147"></a>00147             <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
<a name="l00148"></a>00148             <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>:
<a name="l00149"></a>00149               *safi = <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>;
<a name="l00150"></a>00150             <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
<a name="l00151"></a>00151             <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
<a name="l00152"></a>00152             <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>:
<a name="l00153"></a>00153               <span class="keywordflow">return</span> 1;
<a name="l00154"></a>00154           }
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unknown afi/safi (%u/%u)&quot;</span>, afi, *safi);
<a name="l00157"></a>00157   
<a name="l00158"></a>00158   <span class="keywordflow">return</span> 0;
<a name="l00159"></a>00159 }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">/* Set negotiated capability value. */</span>
<a name="l00162"></a>00162 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00163"></a><a class="code" href="bgp__open_8c.html#a6078eb04bd2ba0b8ce6a82faaed3a495">00163</a> <a class="code" href="bgp__open_8c.html#a6078eb04bd2ba0b8ce6a82faaed3a495">bgp_capability_mp</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__header.html">capability_header</a> *hdr)
<a name="l00164"></a>00164 {
<a name="l00165"></a>00165   <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> mpc;
<a name="l00166"></a>00166   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00167"></a>00167   
<a name="l00168"></a>00168   <a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (s, &amp;mpc);
<a name="l00169"></a>00169   
<a name="l00170"></a>00170   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00171"></a>00171     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has MP_EXT CAP for afi/safi: %u/%u&quot;</span>,
<a name="l00172"></a>00172                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
<a name="l00173"></a>00173   
<a name="l00174"></a>00174   <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, &amp;mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>))
<a name="l00175"></a>00175     <span class="keywordflow">return</span> -1;
<a name="l00176"></a>00176    
<a name="l00177"></a>00177   <span class="comment">/* Now safi remapped, and afi/safi are valid array indices */</span>
<a name="l00178"></a>00178   peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>] = 1;
<a name="l00179"></a>00179   
<a name="l00180"></a>00180   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>])
<a name="l00181"></a>00181     peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>] = 1;
<a name="l00182"></a>00182   <span class="keywordflow">else</span> 
<a name="l00183"></a>00183     <span class="keywordflow">return</span> -1;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185   <span class="keywordflow">return</span> 0;
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00189"></a><a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">00189</a> <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l00190"></a>00190                 u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, u_char <a class="code" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a>)
<a name="l00191"></a>00191 {
<a name="l00192"></a>00192   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00193"></a>00193     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d has ORF type/mode %d/%d not supported&quot;</span>,
<a name="l00194"></a>00194            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi, type, mode);
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a><a class="code" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">00197</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>[] =
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199   { <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>,        <span class="stringliteral">&quot;Prefixlist&quot;</span>        },
<a name="l00200"></a>00200   { <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>,    <span class="stringliteral">&quot;Prefixlist (old)&quot;</span>  },
<a name="l00201"></a>00201 };
<a name="l00202"></a>00202 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="bgp__open_8c.html#a9bd4bc1212ba9d4f365d4178abd688ec">orf_type_str_max</a>
<a name="l00203"></a><a class="code" href="bgp__open_8c.html#a9bd4bc1212ba9d4f365d4178abd688ec">00203</a>     = <span class="keyword">sizeof</span>(<a class="code" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>)/<span class="keyword">sizeof</span>(orf_type_str[0]);
<a name="l00204"></a>00204 
<a name="l00205"></a><a class="code" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">00205</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>[] =
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207   { <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>,   <span class="stringliteral">&quot;Receive&quot;</span>   },
<a name="l00208"></a>00208   { <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>,  <span class="stringliteral">&quot;Send&quot;</span>      },
<a name="l00209"></a>00209   { <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>,  <span class="stringliteral">&quot;Both&quot;</span>      },
<a name="l00210"></a>00210 };
<a name="l00211"></a>00211 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="bgp__open_8c.html#a3a439aa2a262a971a61e8574e5f877de">orf_mode_str_max</a>
<a name="l00212"></a><a class="code" href="bgp__open_8c.html#a3a439aa2a262a971a61e8574e5f877de">00212</a>      = <span class="keyword">sizeof</span>(<a class="code" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>)/<span class="keyword">sizeof</span>(orf_mode_str[0]);
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00215"></a><a class="code" href="bgp__open_8c.html#a058d95e46b228277868cc5e80511a898">00215</a> <a class="code" href="bgp__open_8c.html#a058d95e46b228277868cc5e80511a898">bgp_capability_orf_entry</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__header.html">capability_header</a> *hdr)
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00218"></a>00218   <span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a> entry;
<a name="l00219"></a>00219   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l00220"></a>00220   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l00221"></a>00221   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00222"></a>00222   u_char <a class="code" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a>;
<a name="l00223"></a>00223   u_int16_t sm_cap = 0; <span class="comment">/* capability send-mode receive */</span>
<a name="l00224"></a>00224   u_int16_t rm_cap = 0; <span class="comment">/* capability receive-mode receive */</span> 
<a name="l00225"></a>00225   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <span class="comment">/* ORF Entry header */</span>
<a name="l00228"></a>00228   <a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (s, &amp;entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>);
<a name="l00229"></a>00229   entry.<a class="code" href="structcapability__orf__entry.html#a1deb1d8971cc1034abafe082ab9c6ddf">num</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00230"></a>00230   afi = entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>;
<a name="l00231"></a>00231   safi = entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>;
<a name="l00232"></a>00232   
<a name="l00233"></a>00233   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00234"></a>00234     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s ORF Cap entry for afi/safi: %u/%u&quot;</span>,
<a name="l00235"></a>00235             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="comment">/* Check AFI and SAFI. */</span>
<a name="l00238"></a>00238   <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, &amp;safi))
<a name="l00239"></a>00239     {
<a name="l00240"></a>00240       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d not supported.&quot;</span>
<a name="l00241"></a>00241                  <span class="stringliteral">&quot; Ignoring the ORF capability&quot;</span>,
<a name="l00242"></a>00242                  peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
<a name="l00243"></a>00243       <span class="keywordflow">return</span> 0;
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245   
<a name="l00246"></a>00246   <span class="comment">/* validate number field */</span>
<a name="l00247"></a>00247   <span class="keywordflow">if</span> (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) + (entry.<a class="code" href="structcapability__orf__entry.html#a1deb1d8971cc1034abafe082ab9c6ddf">num</a> * 2) &gt; hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>)
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s ORF Capability entry length error,&quot;</span>
<a name="l00250"></a>00250                  <span class="stringliteral">&quot; Cap length %u, num %u&quot;</span>,
<a name="l00251"></a>00251                  peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>, entry.<a class="code" href="structcapability__orf__entry.html#a1deb1d8971cc1034abafe082ab9c6ddf">num</a>);
<a name="l00252"></a>00252       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00253"></a>00253       <span class="keywordflow">return</span> -1;
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256   <span class="keywordflow">for</span> (i = 0 ; i &lt; entry.<a class="code" href="structcapability__orf__entry.html#a1deb1d8971cc1034abafe082ab9c6ddf">num</a> ; i++)
<a name="l00257"></a>00257     {
<a name="l00258"></a>00258       type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a>(s);
<a name="l00259"></a>00259       mode = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a>(s);
<a name="l00260"></a>00260       
<a name="l00261"></a>00261       <span class="comment">/* ORF Mode error check */</span>
<a name="l00262"></a>00262       <span class="keywordflow">switch</span> (mode)
<a name="l00263"></a>00263         {
<a name="l00264"></a>00264           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>:
<a name="l00265"></a>00265           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>:
<a name="l00266"></a>00266           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>:
<a name="l00267"></a>00267             <span class="keywordflow">break</span>;
<a name="l00268"></a>00268           <span class="keywordflow">default</span>:
<a name="l00269"></a>00269         <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00270"></a>00270         <span class="keywordflow">continue</span>;
<a name="l00271"></a>00271     }
<a name="l00272"></a>00272       <span class="comment">/* ORF Type and afi/safi error checks */</span>
<a name="l00273"></a>00273       <span class="comment">/* capcode versus type */</span>
<a name="l00274"></a>00274       <span class="keywordflow">switch</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>)
<a name="l00275"></a>00275         {
<a name="l00276"></a>00276           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
<a name="l00277"></a>00277             <span class="keywordflow">switch</span> (type)
<a name="l00278"></a>00278               {
<a name="l00279"></a>00279                 <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>:
<a name="l00280"></a>00280                   <span class="keywordflow">break</span>;
<a name="l00281"></a>00281                 <span class="keywordflow">default</span>:
<a name="l00282"></a>00282                   <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00283"></a>00283                   <span class="keywordflow">continue</span>;
<a name="l00284"></a>00284               }
<a name="l00285"></a>00285             <span class="keywordflow">break</span>;
<a name="l00286"></a>00286           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
<a name="l00287"></a>00287             <span class="keywordflow">switch</span> (type)
<a name="l00288"></a>00288               {
<a name="l00289"></a>00289                 <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>:
<a name="l00290"></a>00290                   <span class="keywordflow">break</span>;
<a name="l00291"></a>00291                 <span class="keywordflow">default</span>:
<a name="l00292"></a>00292                   <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00293"></a>00293                   <span class="keywordflow">continue</span>;
<a name="l00294"></a>00294               }
<a name="l00295"></a>00295             <span class="keywordflow">break</span>;
<a name="l00296"></a>00296           <span class="keywordflow">default</span>:
<a name="l00297"></a>00297             <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00298"></a>00298             <span class="keywordflow">continue</span>;
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300                 
<a name="l00301"></a>00301       <span class="comment">/* AFI vs SAFI */</span>
<a name="l00302"></a>00302       <span class="keywordflow">if</span> (!((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00303"></a>00303             || (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l00304"></a>00304             || (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)))
<a name="l00305"></a>00305         {
<a name="l00306"></a>00306           <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00307"></a>00307           <span class="keywordflow">continue</span>;
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309       
<a name="l00310"></a>00310       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00311"></a>00311         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has %s ORF capability&quot;</span>
<a name="l00312"></a>00312                     <span class="stringliteral">&quot; as %s for afi/safi: %d/%d&quot;</span>,
<a name="l00313"></a>00313                     peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (orf_type_str, type),
<a name="l00314"></a>00314                     <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (orf_mode_str, mode),
<a name="l00315"></a>00315                     entry.<a class="code" href="structcapability__orf__entry.html#ad30a8f10f506caed8359512e49d14b7a">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, safi);
<a name="l00316"></a>00316 
<a name="l00317"></a>00317       <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>)
<a name="l00318"></a>00318     {
<a name="l00319"></a>00319           sm_cap = <a class="code" href="bgpd_8h.html#a4883c0951321050f52731ef009c2dd17">PEER_CAP_ORF_PREFIX_SM_RCV</a>;
<a name="l00320"></a>00320           rm_cap = <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>;
<a name="l00321"></a>00321     }
<a name="l00322"></a>00322       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>)
<a name="l00323"></a>00323     {
<a name="l00324"></a>00324           sm_cap = <a class="code" href="bgpd_8h.html#ae0da0dd013880e12f7d1160d002735a6">PEER_CAP_ORF_PREFIX_SM_OLD_RCV</a>;
<a name="l00325"></a>00325           rm_cap = <a class="code" href="bgpd_8h.html#ab3ce0a5a8efd2d2b846abdad6ec4a9d6">PEER_CAP_ORF_PREFIX_RM_OLD_RCV</a>;
<a name="l00326"></a>00326     }
<a name="l00327"></a>00327       <span class="keywordflow">else</span>
<a name="l00328"></a>00328     {
<a name="l00329"></a>00329       <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
<a name="l00330"></a>00330       <span class="keywordflow">continue</span>;
<a name="l00331"></a>00331     }
<a name="l00332"></a>00332 
<a name="l00333"></a>00333       <span class="keywordflow">switch</span> (mode)
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335       <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>:
<a name="l00336"></a>00336         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], sm_cap);
<a name="l00337"></a>00337         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], rm_cap);
<a name="l00338"></a>00338         <span class="keywordflow">break</span>;
<a name="l00339"></a>00339       <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>:
<a name="l00340"></a>00340         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], sm_cap);
<a name="l00341"></a>00341         <span class="keywordflow">break</span>;
<a name="l00342"></a>00342       <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>:
<a name="l00343"></a>00343         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], rm_cap);
<a name="l00344"></a>00344         <span class="keywordflow">break</span>;
<a name="l00345"></a>00345     }
<a name="l00346"></a>00346     }
<a name="l00347"></a>00347   <span class="keywordflow">return</span> 0;
<a name="l00348"></a>00348 }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00351"></a><a class="code" href="bgp__open_8c.html#a9cfdb53f8735b756f2b3a867959e93d4">00351</a> <a class="code" href="bgp__open_8c.html#a9cfdb53f8735b756f2b3a867959e93d4">bgp_capability_orf</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__header.html">capability_header</a> *hdr)
<a name="l00352"></a>00352 {
<a name="l00353"></a>00353   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00354"></a>00354   <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>;
<a name="l00355"></a>00355   
<a name="l00356"></a>00356   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) &lt;= end);
<a name="l00357"></a>00357   
<a name="l00358"></a>00358   <span class="comment">/* We must have at least one ORF entry, as the caller has already done</span>
<a name="l00359"></a>00359 <span class="comment">   * minimum length validation for the capability code - for ORF there must</span>
<a name="l00360"></a>00360 <span class="comment">   * at least one ORF entry (header and unknown number of pairs of bytes).</span>
<a name="l00361"></a>00361 <span class="comment">   */</span>
<a name="l00362"></a>00362   <span class="keywordflow">do</span>
<a name="l00363"></a>00363     {
<a name="l00364"></a>00364       <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a058d95e46b228277868cc5e80511a898">bgp_capability_orf_entry</a> (peer, hdr) == -1)
<a name="l00365"></a>00365         <span class="keywordflow">return</span> -1;
<a name="l00366"></a>00366     } 
<a name="l00367"></a>00367   <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) &lt; end);
<a name="l00368"></a>00368   
<a name="l00369"></a>00369   <span class="keywordflow">return</span> 0;
<a name="l00370"></a>00370 }
<a name="l00371"></a>00371 
<a name="l00372"></a>00372 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00373"></a><a class="code" href="bgp__open_8c.html#a3017f16481dfb2fb9d724cdedfbebe4d">00373</a> <a class="code" href="bgp__open_8c.html#a3017f16481dfb2fb9d724cdedfbebe4d">bgp_capability_restart</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__header.html">capability_header</a> *caphdr)
<a name="l00374"></a>00374 {
<a name="l00375"></a>00375   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00376"></a>00376   u_int16_t restart_flag_time;
<a name="l00377"></a>00377   <span class="keywordtype">int</span> restart_bit = 0;
<a name="l00378"></a>00378   <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + caphdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>;
<a name="l00379"></a>00379 
<a name="l00380"></a>00380   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>);
<a name="l00381"></a>00381   restart_flag_time = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a>(s);
<a name="l00382"></a>00382   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (restart_flag_time, <a class="code" href="bgp__open_8h.html#a35aa17cff1a62e3d629a2b853627c0a7">RESTART_R_BIT</a>))
<a name="l00383"></a>00383     restart_bit = 1;
<a name="l00384"></a>00384   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (restart_flag_time, 0xF000);
<a name="l00385"></a>00385   peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a> = restart_flag_time;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00388"></a>00388     {
<a name="l00389"></a>00389       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has Graceful Restart capability&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00390"></a>00390       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Peer has%srestarted. Restart Time : %d&quot;</span>,
<a name="l00391"></a>00391                   peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, restart_bit ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; not &quot;</span>,
<a name="l00392"></a>00392                   peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a>);
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 4 &lt; end)
<a name="l00396"></a>00396     {
<a name="l00397"></a>00397       <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00398"></a>00398       <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00399"></a>00399       u_char flag = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00400"></a>00400       
<a name="l00401"></a>00401       <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (afi, &amp;safi))
<a name="l00402"></a>00402         {
<a name="l00403"></a>00403           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00404"></a>00404             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d(afi/safi) not supported.&quot;</span>
<a name="l00405"></a>00405                         <span class="stringliteral">&quot; Ignore the Graceful Restart capability&quot;</span>,
<a name="l00406"></a>00406                         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l00407"></a>00407         }
<a name="l00408"></a>00408       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l00409"></a>00409         {
<a name="l00410"></a>00410           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00411"></a>00411             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d(afi/safi) not enabled.&quot;</span>
<a name="l00412"></a>00412                         <span class="stringliteral">&quot; Ignore the Graceful Restart capability&quot;</span>,
<a name="l00413"></a>00413                         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l00414"></a>00414         }
<a name="l00415"></a>00415       <span class="keywordflow">else</span>
<a name="l00416"></a>00416         {
<a name="l00417"></a>00417           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00418"></a>00418             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Address family %s is%spreserved&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00419"></a>00419                         <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi),
<a name="l00420"></a>00420                         <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi],
<a name="l00421"></a>00421                                     <a class="code" href="bgpd_8h.html#ab616defb577ded71e32c1b6b6627d66b">PEER_CAP_RESTART_AF_PRESERVE_RCV</a>)
<a name="l00422"></a>00422                         ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; not &quot;</span>);
<a name="l00423"></a>00423 
<a name="l00424"></a>00424           <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae585bd174f4b8a4346359d7240eb886b">PEER_CAP_RESTART_AF_RCV</a>);
<a name="l00425"></a>00425           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__open_8h.html#aefb31f75bd08979c2e698025f8ce0194">RESTART_F_BIT</a>))
<a name="l00426"></a>00426             <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ab616defb577ded71e32c1b6b6627d66b">PEER_CAP_RESTART_AF_PRESERVE_RCV</a>);
<a name="l00427"></a>00427           
<a name="l00428"></a>00428         }
<a name="l00429"></a>00429     }
<a name="l00430"></a>00430   <span class="keywordflow">return</span> 0;
<a name="l00431"></a>00431 }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 <span class="keyword">static</span> <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>
<a name="l00434"></a><a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">00434</a> <a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structcapability__header.html">capability_header</a> *hdr)
<a name="l00435"></a>00435 {
<a name="l00436"></a>00436   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
<a name="l00437"></a>00437   
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
<a name="l00439"></a>00439     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] about to set cap PEER_CAP_AS4_RCV, got as4 %u&quot;</span>,
<a name="l00440"></a>00440                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4);
<a name="l00441"></a>00441   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>);
<a name="l00442"></a>00442   
<a name="l00443"></a>00443   <span class="keywordflow">return</span> as4;
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00446"></a><a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">00446</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>[] =
<a name="l00447"></a>00447 {
<a name="l00448"></a>00448   { <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,         <span class="stringliteral">&quot;MultiProtocol Extensions&quot;</span>  },
<a name="l00449"></a>00449   { <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>,        <span class="stringliteral">&quot;Route Refresh&quot;</span>         },
<a name="l00450"></a>00450   { <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>,        <span class="stringliteral">&quot;Cooperative Route Filtering&quot;</span>   },
<a name="l00451"></a>00451   { <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>,        <span class="stringliteral">&quot;Graceful Restart&quot;</span>      },
<a name="l00452"></a>00452   { <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>,        <span class="stringliteral">&quot;4-octet AS number&quot;</span>     },
<a name="l00453"></a>00453   { <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>,        <span class="stringliteral">&quot;Dynamic&quot;</span>           },
<a name="l00454"></a>00454   { <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>,    <span class="stringliteral">&quot;Route Refresh (Old)&quot;</span>       },
<a name="l00455"></a>00455   { <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>,        <span class="stringliteral">&quot;ORF (Old)&quot;</span>         },
<a name="l00456"></a>00456 };
<a name="l00457"></a><a class="code" href="bgp__open_8c.html#aa119d7cf01582578882c891ffa24bf79">00457</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="bgp__open_8c.html#aa119d7cf01582578882c891ffa24bf79">capcode_str_max</a> = <span class="keyword">sizeof</span>(<a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>)/<span class="keyword">sizeof</span>(capcode_str[0]);
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 <span class="comment">/* Minimum sizes for length field of each cap (so not inc. the header) */</span>
<a name="l00460"></a><a class="code" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">00460</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">cap_minsizes</a>[] = 
<a name="l00461"></a>00461 {
<a name="l00462"></a>00462   [<a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>]      = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a>),
<a name="l00463"></a>00463   [CAPABILITY_CODE_REFRESH] = <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>,
<a name="l00464"></a>00464   [<a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>]     = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>),
<a name="l00465"></a>00465   [CAPABILITY_CODE_RESTART] = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__gr.html">capability_gr</a>),
<a name="l00466"></a>00466   [CAPABILITY_CODE_AS4]     = <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>,
<a name="l00467"></a>00467   [<a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>] = <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>,
<a name="l00468"></a>00468   [<a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>] = <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>,
<a name="l00469"></a>00469   [<a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>] = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>),
<a name="l00470"></a>00470 };
<a name="l00471"></a>00471 
<a name="l00472"></a>00472 <span class="comment">/* Parse given capability.</span>
<a name="l00473"></a>00473 <span class="comment"> * XXX: This is reading into a stream, but not using stream API</span>
<a name="l00474"></a>00474 <span class="comment"> */</span>
<a name="l00475"></a>00475 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00476"></a><a class="code" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">00476</a> <a class="code" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">bgp_capability_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">size_t</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, u_char **error)
<a name="l00477"></a>00477 {
<a name="l00478"></a>00478   <span class="keywordtype">int</span> ret;
<a name="l00479"></a>00479   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00480"></a>00480   <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00481"></a>00481   
<a name="l00482"></a>00482   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (s) &gt;= length);
<a name="l00483"></a>00483   
<a name="l00484"></a>00484   <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) &lt; end)
<a name="l00485"></a>00485     {
<a name="l00486"></a>00486       <span class="keywordtype">size_t</span> start;
<a name="l00487"></a>00487       u_char *sp = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l00488"></a>00488       <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> caphdr;
<a name="l00489"></a>00489       
<a name="l00490"></a>00490       <span class="comment">/* We need at least capability code and capability length. */</span>
<a name="l00491"></a>00491       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + 2 &gt; end)
<a name="l00492"></a>00492     {
<a name="l00493"></a>00493       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error (&lt; header)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00494"></a>00494       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00495"></a>00495       <span class="keywordflow">return</span> -1;
<a name="l00496"></a>00496     }
<a name="l00497"></a>00497       
<a name="l00498"></a>00498       caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00499"></a>00499       caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00500"></a>00500       start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
<a name="l00501"></a>00501       
<a name="l00502"></a>00502       <span class="comment">/* Capability length check sanity check. */</span>
<a name="l00503"></a>00503       <span class="keywordflow">if</span> (start + caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> &gt; end)
<a name="l00504"></a>00504     {
<a name="l00505"></a>00505       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error (&lt; length)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00506"></a>00506       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00507"></a>00507       <span class="keywordflow">return</span> -1;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509       
<a name="l00510"></a>00510       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00511"></a>00511     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has %s capability (%u), length %u&quot;</span>,
<a name="l00512"></a>00512            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00513"></a>00513            <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (capcode_str, caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>),
<a name="l00514"></a>00514            caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>, caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);
<a name="l00515"></a>00515       
<a name="l00516"></a>00516       <span class="comment">/* Length sanity check, type-specific, for known capabilities */</span>
<a name="l00517"></a>00517       <span class="keywordflow">switch</span> (caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>)
<a name="l00518"></a>00518         {
<a name="l00519"></a>00519           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>:
<a name="l00520"></a>00520           <span class="keywordflow">case</span> CAPABILITY_CODE_REFRESH:
<a name="l00521"></a>00521           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>:
<a name="l00522"></a>00522           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
<a name="l00523"></a>00523           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
<a name="l00524"></a>00524           <span class="keywordflow">case</span> CAPABILITY_CODE_RESTART:
<a name="l00525"></a>00525           <span class="keywordflow">case</span> CAPABILITY_CODE_AS4:
<a name="l00526"></a>00526           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>:
<a name="l00527"></a>00527               <span class="comment">/* Check length. */</span>
<a name="l00528"></a>00528               <span class="keywordflow">if</span> (caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> &lt; cap_minsizes[caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>])
<a name="l00529"></a>00529                 {
<a name="l00530"></a>00530                   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s %s Capability length error: got %u,&quot;</span>
<a name="l00531"></a>00531                              <span class="stringliteral">&quot; expected at least %u&quot;</span>,
<a name="l00532"></a>00532                              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
<a name="l00533"></a>00533                              <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (capcode_str, caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>),
<a name="l00534"></a>00534                              caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>, 
<a name="l00535"></a>00535                  (<span class="keywordtype">unsigned</span>) cap_minsizes[caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>]);
<a name="l00536"></a>00536                   <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00537"></a>00537                   <span class="keywordflow">return</span> -1;
<a name="l00538"></a>00538                 }
<a name="l00539"></a>00539           <span class="comment">/* we deliberately ignore unknown codes, see below */</span>
<a name="l00540"></a>00540           <span class="keywordflow">default</span>:
<a name="l00541"></a>00541             <span class="keywordflow">break</span>;
<a name="l00542"></a>00542         }
<a name="l00543"></a>00543       
<a name="l00544"></a>00544       <span class="keywordflow">switch</span> (caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>)
<a name="l00545"></a>00545         {
<a name="l00546"></a>00546           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>:
<a name="l00547"></a>00547             {
<a name="l00548"></a>00548               <span class="comment">/* Ignore capability when override-capability is set. */</span>
<a name="l00549"></a>00549               <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l00550"></a>00550                 {
<a name="l00551"></a>00551                   <span class="comment">/* Set negotiated value. */</span>
<a name="l00552"></a>00552                   ret = <a class="code" href="bgp__open_8c.html#a6078eb04bd2ba0b8ce6a82faaed3a495">bgp_capability_mp</a> (peer, &amp;caphdr);
<a name="l00553"></a>00553 
<a name="l00554"></a>00554                   <span class="comment">/* Unsupported Capability. */</span>
<a name="l00555"></a>00555                   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00556"></a>00556                     {
<a name="l00557"></a>00557                       <span class="comment">/* Store return data. */</span>
<a name="l00558"></a>00558                       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (*error, sp, caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2);
<a name="l00559"></a>00559                       *error += caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2;
<a name="l00560"></a>00560                     }
<a name="l00561"></a>00561                 }
<a name="l00562"></a>00562             }
<a name="l00563"></a>00563             <span class="keywordflow">break</span>;
<a name="l00564"></a>00564           <span class="keywordflow">case</span> CAPABILITY_CODE_REFRESH:
<a name="l00565"></a>00565           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>:
<a name="l00566"></a>00566             {
<a name="l00567"></a>00567               <span class="comment">/* BGP refresh capability */</span>
<a name="l00568"></a>00568               <span class="keywordflow">if</span> (caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>)
<a name="l00569"></a>00569                 <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>);
<a name="l00570"></a>00570               <span class="keywordflow">else</span>
<a name="l00571"></a>00571                 <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>);
<a name="l00572"></a>00572             }
<a name="l00573"></a>00573             <span class="keywordflow">break</span>;
<a name="l00574"></a>00574           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
<a name="l00575"></a>00575           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
<a name="l00576"></a>00576             <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a9cfdb53f8735b756f2b3a867959e93d4">bgp_capability_orf</a> (peer, &amp;caphdr))
<a name="l00577"></a>00577               <span class="keywordflow">return</span> -1;
<a name="l00578"></a>00578             <span class="keywordflow">break</span>;
<a name="l00579"></a>00579           <span class="keywordflow">case</span> CAPABILITY_CODE_RESTART:
<a name="l00580"></a>00580             <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a3017f16481dfb2fb9d724cdedfbebe4d">bgp_capability_restart</a> (peer, &amp;caphdr))
<a name="l00581"></a>00581               <span class="keywordflow">return</span> -1;
<a name="l00582"></a>00582             <span class="keywordflow">break</span>;
<a name="l00583"></a>00583           <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>:
<a name="l00584"></a>00584             <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>);
<a name="l00585"></a>00585             <span class="keywordflow">break</span>;
<a name="l00586"></a>00586           <span class="keywordflow">case</span> CAPABILITY_CODE_AS4:
<a name="l00587"></a>00587               <span class="comment">/* Already handled as a special-case parsing of the capabilities</span>
<a name="l00588"></a>00588 <span class="comment">               * at the beginning of OPEN processing. So we care not a jot</span>
<a name="l00589"></a>00589 <span class="comment">               * for the value really, only error case.</span>
<a name="l00590"></a>00590 <span class="comment">               */</span>
<a name="l00591"></a>00591               <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (peer, &amp;caphdr))
<a name="l00592"></a>00592                 <span class="keywordflow">return</span> -1;
<a name="l00593"></a>00593               <span class="keywordflow">break</span>;            
<a name="l00594"></a>00594           <span class="keywordflow">default</span>:
<a name="l00595"></a>00595             <span class="keywordflow">if</span> (caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> &gt; 128)
<a name="l00596"></a>00596               {
<a name="l00597"></a>00597                 <span class="comment">/* We don&#39;t send Notification for unknown vendor specific</span>
<a name="l00598"></a>00598 <span class="comment">                   capabilities.  It seems reasonable for now...  */</span>
<a name="l00599"></a>00599                 <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s Vendor specific capability %d&quot;</span>,
<a name="l00600"></a>00600                            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
<a name="l00601"></a>00601               }
<a name="l00602"></a>00602             <span class="keywordflow">else</span>
<a name="l00603"></a>00603               {
<a name="l00604"></a>00604                 <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s unrecognized capability code: %d - ignored&quot;</span>,
<a name="l00605"></a>00605                            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
<a name="l00606"></a>00606                 <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (*error, sp, caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2);
<a name="l00607"></a>00607                 *error += caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2;
<a name="l00608"></a>00608               }
<a name="l00609"></a>00609           }
<a name="l00610"></a>00610       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) != (start + caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>))
<a name="l00611"></a>00611         {
<a name="l00612"></a>00612           <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &gt; (start + caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>))
<a name="l00613"></a>00613             <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s Cap-parser for %s read past cap-length, %u!&quot;</span>,
<a name="l00614"></a>00614                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (capcode_str, caphdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>),
<a name="l00615"></a>00615                        caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);
<a name="l00616"></a>00616           <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, start + caphdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);
<a name="l00617"></a>00617         }
<a name="l00618"></a>00618     }
<a name="l00619"></a>00619   <span class="keywordflow">return</span> 0;
<a name="l00620"></a>00620 }
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00623"></a><a class="code" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">00623</a> <a class="code" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">bgp_auth_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">size_t</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l00624"></a>00624 {
<a name="l00625"></a>00625   <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00626"></a>00626            <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00627"></a>00627            <a class="code" href="bgpd_8h.html#a84cdcaced0ddcd9c02d2bcb33be39a11">BGP_NOTIFY_OPEN_AUTH_FAILURE</a>); 
<a name="l00628"></a>00628   <span class="keywordflow">return</span> -1;
<a name="l00629"></a>00629 }
<a name="l00630"></a>00630 
<a name="l00631"></a>00631 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00632"></a><a class="code" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">00632</a> <a class="code" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">strict_capability_same</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00633"></a>00633 {
<a name="l00634"></a>00634   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00635"></a>00635 
<a name="l00636"></a>00636   <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; i &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; i++)
<a name="l00637"></a>00637     <span class="keywordflow">for</span> (j = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; j &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; j++)
<a name="l00638"></a>00638       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[i][j] != peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[i][j])
<a name="l00639"></a>00639     <span class="keywordflow">return</span> 0;
<a name="l00640"></a>00640   <span class="keywordflow">return</span> 1;
<a name="l00641"></a>00641 }
<a name="l00642"></a>00642 
<a name="l00643"></a>00643 <span class="comment">/* peek into option, stores ASN to *as4 if the AS4 capability was found.</span>
<a name="l00644"></a>00644 <span class="comment"> * Returns  0 if no as4 found, as4cap value otherwise.</span>
<a name="l00645"></a>00645 <span class="comment"> */</span>
<a name="l00646"></a>00646 <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>
<a name="l00647"></a><a class="code" href="bgp__open_8h.html#a9ffa41fed762be362653c535a4aa2713">00647</a> <a class="code" href="bgp__open_8c.html#aa94f4ded4a8074c681b0e153744fed37">peek_for_as4_capability</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_char <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l00648"></a>00648 {
<a name="l00649"></a>00649   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
<a name="l00650"></a>00650   <span class="keywordtype">size_t</span> orig_getp = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
<a name="l00651"></a>00651   <span class="keywordtype">size_t</span> end = orig_getp + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00652"></a>00652   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = 0;
<a name="l00653"></a>00653   
<a name="l00654"></a>00654   <span class="comment">/* The full capability parser will better flag the error.. */</span>
<a name="l00655"></a>00655   <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; length)
<a name="l00656"></a>00656     <span class="keywordflow">return</span> 0;
<a name="l00657"></a>00657 
<a name="l00658"></a>00658   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
<a name="l00659"></a>00659     <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s [AS4] rcv OPEN w/ OPTION parameter len: %u,&quot;</span>
<a name="l00660"></a>00660                 <span class="stringliteral">&quot; peeking for as4&quot;</span>,
<a name="l00661"></a>00661             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, length);
<a name="l00662"></a>00662   <span class="comment">/* the error cases we DONT handle, we ONLY try to read as4 out of</span>
<a name="l00663"></a>00663 <span class="comment">   * correctly formatted options.</span>
<a name="l00664"></a>00664 <span class="comment">   */</span>
<a name="l00665"></a>00665   <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end) 
<a name="l00666"></a>00666     {
<a name="l00667"></a>00667       u_char opt_type;
<a name="l00668"></a>00668       u_char opt_length;
<a name="l00669"></a>00669       
<a name="l00670"></a>00670       <span class="comment">/* Check the length. */</span>
<a name="l00671"></a>00671       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; end)
<a name="l00672"></a>00672         <span class="keywordflow">goto</span> end;
<a name="l00673"></a>00673       
<a name="l00674"></a>00674       <span class="comment">/* Fetch option type and length. */</span>
<a name="l00675"></a>00675       opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00676"></a>00676       opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00677"></a>00677       
<a name="l00678"></a>00678       <span class="comment">/* Option length check. */</span>
<a name="l00679"></a>00679       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + opt_length &gt; end)
<a name="l00680"></a>00680         <span class="keywordflow">goto</span> end;
<a name="l00681"></a>00681       
<a name="l00682"></a>00682       <span class="keywordflow">if</span> (opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>)
<a name="l00683"></a>00683         {
<a name="l00684"></a>00684           <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
<a name="l00685"></a>00685           <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_end = capd_start + opt_length;
<a name="l00686"></a>00686           
<a name="l00687"></a>00687           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (capd_end &lt;= end);
<a name="l00688"></a>00688           
<a name="l00689"></a>00689       <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) &lt; capd_end)
<a name="l00690"></a>00690         {
<a name="l00691"></a>00691           <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> hdr;
<a name="l00692"></a>00692           
<a name="l00693"></a>00693           <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; capd_end)
<a name="l00694"></a>00694                 <span class="keywordflow">goto</span> end;
<a name="l00695"></a>00695               
<a name="l00696"></a>00696               hdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00697"></a>00697               hdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00698"></a>00698               
<a name="l00699"></a>00699           <span class="keywordflow">if</span> ((<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) +  hdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>) &gt; capd_end)
<a name="l00700"></a>00700         <span class="keywordflow">goto</span> end;
<a name="l00701"></a>00701 
<a name="l00702"></a>00702           <span class="keywordflow">if</span> (hdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == CAPABILITY_CODE_AS4)
<a name="l00703"></a>00703             {
<a name="l00704"></a>00704               <span class="keywordflow">if</span> (hdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> != <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>)
<a name="l00705"></a>00705                 <span class="keywordflow">goto</span> end;
<a name="l00706"></a>00706                   
<a name="l00707"></a>00707               <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
<a name="l00708"></a>00708                 <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;[AS4] found AS4 capability, about to parse&quot;</span>);
<a name="l00709"></a>00709               as4 = <a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (peer, &amp;hdr);
<a name="l00710"></a>00710               
<a name="l00711"></a>00711               <span class="keywordflow">goto</span> end;
<a name="l00712"></a>00712                 }
<a name="l00713"></a>00713               <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, hdr.<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);
<a name="l00714"></a>00714         }
<a name="l00715"></a>00715     }
<a name="l00716"></a>00716     }
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 end:
<a name="l00719"></a>00719   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, orig_getp);
<a name="l00720"></a>00720   <span class="keywordflow">return</span> as4;
<a name="l00721"></a>00721 }
<a name="l00722"></a>00722 
<a name="l00723"></a>00723 <span class="comment">/* Parse open option */</span>
<a name="l00724"></a>00724 <span class="keywordtype">int</span>
<a name="l00725"></a><a class="code" href="bgp__open_8h.html#a4936a4cfe15a38a735a935463ebe8a58">00725</a> <a class="code" href="bgp__open_8c.html#aec7b4d53e9f585305641d2561f7596f0">bgp_open_option_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_char <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, <span class="keywordtype">int</span> *capability)
<a name="l00726"></a>00726 {
<a name="l00727"></a>00727   <span class="keywordtype">int</span> ret;
<a name="l00728"></a>00728   u_char *error;
<a name="l00729"></a>00729   u_char error_data[<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>];
<a name="l00730"></a>00730   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer);
<a name="l00731"></a>00731   <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   ret = 0;
<a name="l00734"></a>00734   error = error_data;
<a name="l00735"></a>00735 
<a name="l00736"></a>00736   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00737"></a>00737     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv OPEN w/ OPTION parameter len: %u&quot;</span>,
<a name="l00738"></a>00738            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, length);
<a name="l00739"></a>00739   
<a name="l00740"></a>00740   <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end)
<a name="l00741"></a>00741     {
<a name="l00742"></a>00742       u_char opt_type;
<a name="l00743"></a>00743       u_char opt_length;
<a name="l00744"></a>00744       
<a name="l00745"></a>00745       <span class="comment">/* Must have at least an OPEN option header */</span>
<a name="l00746"></a>00746       <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; 2)
<a name="l00747"></a>00747     {
<a name="l00748"></a>00748       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00749"></a>00749       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00750"></a>00750       <span class="keywordflow">return</span> -1;
<a name="l00751"></a>00751     }
<a name="l00752"></a>00752 
<a name="l00753"></a>00753       <span class="comment">/* Fetch option type and length. */</span>
<a name="l00754"></a>00754       opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00755"></a>00755       opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00756"></a>00756       
<a name="l00757"></a>00757       <span class="comment">/* Option length check. */</span>
<a name="l00758"></a>00758       <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (s) &lt; opt_length)
<a name="l00759"></a>00759     {
<a name="l00760"></a>00760       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00761"></a>00761       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l00762"></a>00762       <span class="keywordflow">return</span> -1;
<a name="l00763"></a>00763     }
<a name="l00764"></a>00764 
<a name="l00765"></a>00765       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00766"></a>00766     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd OPEN w/ optional parameter type %u (%s) len %u&quot;</span>,
<a name="l00767"></a>00767            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, opt_type,
<a name="l00768"></a>00768            opt_type == <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a> ? <span class="stringliteral">&quot;Authentication&quot;</span> :
<a name="l00769"></a>00769            opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a> ? <span class="stringliteral">&quot;Capability&quot;</span> : <span class="stringliteral">&quot;Unknown&quot;</span>,
<a name="l00770"></a>00770            opt_length);
<a name="l00771"></a>00771   
<a name="l00772"></a>00772       <span class="keywordflow">switch</span> (opt_type)
<a name="l00773"></a>00773     {
<a name="l00774"></a>00774     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a>:
<a name="l00775"></a>00775       ret = <a class="code" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">bgp_auth_parse</a> (peer, opt_length);
<a name="l00776"></a>00776       <span class="keywordflow">break</span>;
<a name="l00777"></a>00777     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>:
<a name="l00778"></a>00778       ret = <a class="code" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">bgp_capability_parse</a> (peer, opt_length, &amp;error);
<a name="l00779"></a>00779       *capability = 1;
<a name="l00780"></a>00780       <span class="keywordflow">break</span>;
<a name="l00781"></a>00781     <span class="keywordflow">default</span>:
<a name="l00782"></a>00782       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00783"></a>00783                <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00784"></a>00784                <a class="code" href="bgpd_8h.html#a2fddbc10056aaf1a667e79c2bdbeff15">BGP_NOTIFY_OPEN_UNSUP_PARAM</a>); 
<a name="l00785"></a>00785       ret = -1;
<a name="l00786"></a>00786       <span class="keywordflow">break</span>;
<a name="l00787"></a>00787     }
<a name="l00788"></a>00788 
<a name="l00789"></a>00789       <span class="comment">/* Parse error.  To accumulate all unsupported capability codes,</span>
<a name="l00790"></a>00790 <span class="comment">         bgp_capability_parse does not return -1 when encounter</span>
<a name="l00791"></a>00791 <span class="comment">         unsupported capability code.  To detect that, please check</span>
<a name="l00792"></a>00792 <span class="comment">         error and erro_data pointer, like below.  */</span>
<a name="l00793"></a>00793       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00794"></a>00794     <span class="keywordflow">return</span> -1;
<a name="l00795"></a>00795     }
<a name="l00796"></a>00796 
<a name="l00797"></a>00797   <span class="comment">/* All OPEN option is parsed.  Check capability when strict compare</span>
<a name="l00798"></a>00798 <span class="comment">     flag is enabled.*/</span>
<a name="l00799"></a>00799   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
<a name="l00800"></a>00800     {
<a name="l00801"></a>00801       <span class="comment">/* If Unsupported Capability exists. */</span>
<a name="l00802"></a>00802       <span class="keywordflow">if</span> (error != error_data)
<a name="l00803"></a>00803     {
<a name="l00804"></a>00804       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00805"></a>00805                      <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00806"></a>00806                      <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
<a name="l00807"></a>00807                      error_data, error - error_data);
<a name="l00808"></a>00808       <span class="keywordflow">return</span> -1;
<a name="l00809"></a>00809     }
<a name="l00810"></a>00810 
<a name="l00811"></a>00811       <span class="comment">/* Check local capability does not negotiated with remote</span>
<a name="l00812"></a>00812 <span class="comment">         peer. */</span>
<a name="l00813"></a>00813       <span class="keywordflow">if</span> (! <a class="code" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">strict_capability_same</a> (peer))
<a name="l00814"></a>00814     {
<a name="l00815"></a>00815       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00816"></a>00816                <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00817"></a>00817                <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
<a name="l00818"></a>00818       <span class="keywordflow">return</span> -1;
<a name="l00819"></a>00819     }
<a name="l00820"></a>00820     }
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   <span class="comment">/* Check there is no common capability send Unsupported Capability</span>
<a name="l00823"></a>00823 <span class="comment">     error. */</span>
<a name="l00824"></a>00824   <span class="keywordflow">if</span> (*capability &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l00825"></a>00825     {
<a name="l00826"></a>00826       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] 
<a name="l00827"></a>00827       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
<a name="l00828"></a>00828       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
<a name="l00829"></a>00829       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l00830"></a>00830       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l00831"></a>00831     {
<a name="l00832"></a>00832       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] No common capability&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00833"></a>00833 
<a name="l00834"></a>00834       <span class="keywordflow">if</span> (error != error_data)
<a name="l00835"></a>00835 
<a name="l00836"></a>00836         <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00837"></a>00837                        <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00838"></a>00838                        <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
<a name="l00839"></a>00839                        error_data, error - error_data);
<a name="l00840"></a>00840       <span class="keywordflow">else</span>
<a name="l00841"></a>00841         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00842"></a>00842                  <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l00843"></a>00843                  <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
<a name="l00844"></a>00844       <span class="keywordflow">return</span> -1;
<a name="l00845"></a>00845     }
<a name="l00846"></a>00846     }
<a name="l00847"></a>00847   <span class="keywordflow">return</span> 0;
<a name="l00848"></a>00848 }
<a name="l00849"></a>00849 
<a name="l00850"></a>00850 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00851"></a><a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">00851</a> <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l00852"></a>00852                          <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_char code)
<a name="l00853"></a>00853 {
<a name="l00854"></a>00854   u_char cap_len;
<a name="l00855"></a>00855   u_char orf_len;
<a name="l00856"></a>00856   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capp;
<a name="l00857"></a>00857   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> orfp;
<a name="l00858"></a>00858   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> numberp;
<a name="l00859"></a>00859   <span class="keywordtype">int</span> number_of_orfs = 0;
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00862"></a>00862     safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
<a name="l00863"></a>00863 
<a name="l00864"></a>00864   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00865"></a>00865   capp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);           <span class="comment">/* Set Capability Len Pointer */</span>
<a name="l00866"></a>00866   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* Capability Length */</span>
<a name="l00867"></a>00867   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, code);                <span class="comment">/* Capability Code */</span>
<a name="l00868"></a>00868   orfp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);           <span class="comment">/* Set ORF Len Pointer */</span>
<a name="l00869"></a>00869   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* ORF Length */</span>
<a name="l00870"></a>00870   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
<a name="l00871"></a>00871   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00872"></a>00872   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
<a name="l00873"></a>00873   numberp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);        <span class="comment">/* Set Number Pointer */</span>
<a name="l00874"></a>00874   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* Number of ORFs */</span>
<a name="l00875"></a>00875 
<a name="l00876"></a>00876   <span class="comment">/* Address Prefix ORF */</span>
<a name="l00877"></a>00877   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l00878"></a>00878       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
<a name="l00879"></a>00879     {
<a name="l00880"></a>00880       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (code == <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a> ?
<a name="l00881"></a>00881            <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a> : <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>));
<a name="l00882"></a>00882 
<a name="l00883"></a>00883       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l00884"></a>00884       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
<a name="l00885"></a>00885     {
<a name="l00886"></a>00886       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>);
<a name="l00887"></a>00887       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>);
<a name="l00888"></a>00888       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>);
<a name="l00889"></a>00889     }
<a name="l00890"></a>00890       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>))
<a name="l00891"></a>00891     {
<a name="l00892"></a>00892       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>);
<a name="l00893"></a>00893       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>);
<a name="l00894"></a>00894     }
<a name="l00895"></a>00895       <span class="keywordflow">else</span>
<a name="l00896"></a>00896     {
<a name="l00897"></a>00897       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>);
<a name="l00898"></a>00898       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>);
<a name="l00899"></a>00899     }
<a name="l00900"></a>00900       number_of_orfs++;
<a name="l00901"></a>00901     }
<a name="l00902"></a>00902 
<a name="l00903"></a>00903   <span class="comment">/* Total Number of ORFs. */</span>
<a name="l00904"></a>00904   <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, numberp, number_of_orfs);
<a name="l00905"></a>00905 
<a name="l00906"></a>00906   <span class="comment">/* Total ORF Len. */</span>
<a name="l00907"></a>00907   orf_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - orfp - 1;
<a name="l00908"></a>00908   <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, orfp, orf_len);
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   <span class="comment">/* Total Capability Len. */</span>
<a name="l00911"></a>00911   cap_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - capp - 1;
<a name="l00912"></a>00912   <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, capp, cap_len);
<a name="l00913"></a>00913 }
<a name="l00914"></a>00914 
<a name="l00915"></a>00915 <span class="comment">/* Fill in capability open option to the packet. */</span>
<a name="l00916"></a>00916 <span class="keywordtype">void</span>
<a name="l00917"></a><a class="code" href="bgp__open_8h.html#a92ede3ad178a065348f1a9764e304191">00917</a> <a class="code" href="bgp__open_8c.html#aa7660eff88133071e216cf984179877e">bgp_open_capability</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00918"></a>00918 {
<a name="l00919"></a>00919   u_char len;
<a name="l00920"></a>00920   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
<a name="l00921"></a>00921   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l00922"></a>00922   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l00923"></a>00923   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as;
<a name="l00924"></a>00924 
<a name="l00925"></a>00925   <span class="comment">/* Remember current pointer for Opt Parm Len. */</span>
<a name="l00926"></a>00926   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00927"></a>00927 
<a name="l00928"></a>00928   <span class="comment">/* Opt Parm Len. */</span>
<a name="l00929"></a>00929   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00930"></a>00930 
<a name="l00931"></a>00931   <span class="comment">/* Do not send capability. */</span>
<a name="l00932"></a>00932   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>) 
<a name="l00933"></a>00933       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
<a name="l00934"></a>00934     <span class="keywordflow">return</span>;
<a name="l00935"></a>00935 
<a name="l00936"></a>00936   <span class="comment">/* IPv4 unicast. */</span>
<a name="l00937"></a>00937   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l00938"></a>00938     {
<a name="l00939"></a>00939       peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
<a name="l00940"></a>00940       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00941"></a>00941       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
<a name="l00942"></a>00942       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l00943"></a>00943       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l00944"></a>00944       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
<a name="l00945"></a>00945       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00946"></a>00946       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_UNICAST);
<a name="l00947"></a>00947     }
<a name="l00948"></a>00948   <span class="comment">/* IPv4 multicast. */</span>
<a name="l00949"></a>00949   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l00950"></a>00950     {
<a name="l00951"></a>00951       peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
<a name="l00952"></a>00952       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00953"></a>00953       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
<a name="l00954"></a>00954       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l00955"></a>00955       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l00956"></a>00956       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
<a name="l00957"></a>00957       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00958"></a>00958       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_MULTICAST);
<a name="l00959"></a>00959     }
<a name="l00960"></a>00960   <span class="comment">/* IPv4 VPN */</span>
<a name="l00961"></a>00961   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
<a name="l00962"></a>00962     {
<a name="l00963"></a>00963       peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>] = 1;
<a name="l00964"></a>00964       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00965"></a>00965       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
<a name="l00966"></a>00966       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l00967"></a>00967       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l00968"></a>00968       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
<a name="l00969"></a>00969       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00970"></a>00970       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);
<a name="l00971"></a>00971     }
<a name="l00972"></a>00972 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00973"></a>00973 <span class="preprocessor"></span>  <span class="comment">/* IPv6 unicast. */</span>
<a name="l00974"></a>00974   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l00975"></a>00975     {
<a name="l00976"></a>00976       peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
<a name="l00977"></a>00977       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00978"></a>00978       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
<a name="l00979"></a>00979       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l00980"></a>00980       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l00981"></a>00981       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
<a name="l00982"></a>00982       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00983"></a>00983       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_UNICAST);
<a name="l00984"></a>00984     }
<a name="l00985"></a>00985   <span class="comment">/* IPv6 multicast. */</span>
<a name="l00986"></a>00986   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
<a name="l00987"></a>00987     {
<a name="l00988"></a>00988       peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
<a name="l00989"></a>00989       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l00990"></a>00990       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
<a name="l00991"></a>00991       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l00992"></a>00992       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l00993"></a>00993       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
<a name="l00994"></a>00994       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00995"></a>00995       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_MULTICAST);
<a name="l00996"></a>00996     }
<a name="l00997"></a>00997 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00998"></a>00998 
<a name="l00999"></a>00999   <span class="comment">/* Route refresh. */</span>
<a name="l01000"></a>01000   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a2794496f1536e05dd62d79c6cecb4cfe">PEER_CAP_REFRESH_ADV</a>);
<a name="l01001"></a>01001   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l01002"></a>01002   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
<a name="l01003"></a>01003   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>);
<a name="l01004"></a>01004   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);
<a name="l01005"></a>01005   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l01006"></a>01006   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
<a name="l01007"></a>01007   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, CAPABILITY_CODE_REFRESH);
<a name="l01008"></a>01008   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);
<a name="l01009"></a>01009 
<a name="l01010"></a>01010   <span class="comment">/* AS4 */</span>
<a name="l01011"></a>01011   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ae2c23b08864b92958daa94c84c207f14">PEER_CAP_AS4_ADV</a>);
<a name="l01012"></a>01012   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l01013"></a>01013   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a> + 2);
<a name="l01014"></a>01014   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, CAPABILITY_CODE_AS4);
<a name="l01015"></a>01015   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>);
<a name="l01016"></a>01016   <span class="keywordflow">if</span> ( peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> )
<a name="l01017"></a>01017     local_as = peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>;
<a name="l01018"></a>01018   <span class="keywordflow">else</span>
<a name="l01019"></a>01019     local_as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l01020"></a>01020   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, local_as );
<a name="l01021"></a>01021 
<a name="l01022"></a>01022   <span class="comment">/* ORF capability. */</span>
<a name="l01023"></a>01023   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
<a name="l01024"></a>01024     <span class="keywordflow">for</span> (safi = SAFI_UNICAST ; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a> ; safi++)
<a name="l01025"></a>01025       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l01026"></a>01026       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
<a name="l01027"></a>01027     {
<a name="l01028"></a>01028       <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (s, peer, afi, safi, <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>);
<a name="l01029"></a>01029       <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (s, peer, afi, safi, <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>);
<a name="l01030"></a>01030     }
<a name="l01031"></a>01031 
<a name="l01032"></a>01032   <span class="comment">/* Dynamic capability. */</span>
<a name="l01033"></a>01033   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
<a name="l01034"></a>01034     {
<a name="l01035"></a>01035       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a3836f3a28c34e009bf7c06d7ea751686">PEER_CAP_DYNAMIC_ADV</a>);
<a name="l01036"></a>01036       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l01037"></a>01037       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a> + 2);
<a name="l01038"></a>01038       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>);
<a name="l01039"></a>01039       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>);
<a name="l01040"></a>01040     }
<a name="l01041"></a>01041 
<a name="l01042"></a>01042   <span class="comment">/* Graceful restart capability */</span>
<a name="l01043"></a>01043   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a339c9ce07a9d3611d2c5f1c4279b58f8">BGP_FLAG_GRACEFUL_RESTART</a>))
<a name="l01044"></a>01044     {
<a name="l01045"></a>01045       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a0676dbf05f735073d261e5a01b1c7dcb">PEER_CAP_RESTART_ADV</a>);
<a name="l01046"></a>01046       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
<a name="l01047"></a>01047       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a> + 2);
<a name="l01048"></a>01048       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, CAPABILITY_CODE_RESTART);
<a name="l01049"></a>01049       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a>);
<a name="l01050"></a>01050       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#aaa8a4745e644e823c03cdc6606645272">restart_time</a>);
<a name="l01051"></a>01051      }
<a name="l01052"></a>01052 
<a name="l01053"></a>01053   <span class="comment">/* Total Opt Parm Len. */</span>
<a name="l01054"></a>01054   len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 1;
<a name="l01055"></a>01055   <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, cp, len);
<a name="l01056"></a>01056 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__open_8c.html">bgp_open.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
