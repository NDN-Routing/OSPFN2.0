<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_advertise.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__advertise_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_advertise.h</div>  </div>
</div>
<div class="contents">
<a href="bgp__advertise_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP advertisement and adjacency</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1996, 97, 98, 99, 2000 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef _QUAGGA_BGP_ADVERTISE_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define _QUAGGA_BGP_ADVERTISE_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="comment">/* BGP advertise FIFO.  */</span>
<a name="l00025"></a><a class="code" href="structbgp__advertise__fifo.html">00025</a> <span class="keyword">struct </span><a class="code" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a>
<a name="l00026"></a>00026 {
<a name="l00027"></a><a class="code" href="structbgp__advertise__fifo.html#a185734aa36832b9395e5efa6b12b7f7e">00027</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise__fifo.html#a185734aa36832b9395e5efa6b12b7f7e">next</a>;
<a name="l00028"></a><a class="code" href="structbgp__advertise__fifo.html#a8b21d9cf2623f07fde7ff4eaad7cec62">00028</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise__fifo.html#a8b21d9cf2623f07fde7ff4eaad7cec62">prev</a>;
<a name="l00029"></a>00029 };
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">/* BGP advertise attribute.  */</span>
<a name="l00032"></a><a class="code" href="structbgp__advertise__attr.html">00032</a> <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a>
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034   <span class="comment">/* Head of advertisement pointer. */</span>
<a name="l00035"></a><a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">00035</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="comment">/* Reference counter.  */</span>
<a name="l00038"></a><a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">00038</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">refcnt</a>;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="comment">/* Attribute pointer to be announced.  */</span>
<a name="l00041"></a><a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">00041</a>   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>;
<a name="l00042"></a>00042 };
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="structbgp__advertise.html">00044</a> <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   <span class="comment">/* FIFO for advertisement.  */</span>
<a name="l00047"></a><a class="code" href="structbgp__advertise.html#aac8acd56d21ff32539a0a3e8658003e7">00047</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a> <a class="code" href="structfifo.html">fifo</a>;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="comment">/* Link list for same attribute advertise.  */</span>
<a name="l00050"></a><a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">00050</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;
<a name="l00051"></a><a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">00051</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="comment">/* Prefix information.  */</span>
<a name="l00054"></a><a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">00054</a>   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056   <span class="comment">/* Reference pointer.  */</span>
<a name="l00057"></a><a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">00057</a>   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059   <span class="comment">/* Advertisement attribute.  */</span>
<a name="l00060"></a><a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">00060</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062   <span class="comment">/* BGP info.  */</span>
<a name="l00063"></a><a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">00063</a>   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>;
<a name="l00064"></a>00064 };
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">/* BGP adjacency out.  */</span>
<a name="l00067"></a><a class="code" href="structbgp__adj__out.html">00067</a> <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a>
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069   <span class="comment">/* Lined list pointer.  */</span>
<a name="l00070"></a><a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">00070</a>   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>;
<a name="l00071"></a><a class="code" href="structbgp__adj__out.html#a0634af7ea5183b2c97cd3fe8893fcbe4">00071</a>   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *<a class="code" href="structbgp__adj__out.html#a0634af7ea5183b2c97cd3fe8893fcbe4">prev</a>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   <span class="comment">/* Advertised peer.  */</span>
<a name="l00074"></a><a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">00074</a>   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a>;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="comment">/* Advertised attribute.  */</span>
<a name="l00077"></a><a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">00077</a>   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="comment">/* Advertisement information.  */</span>
<a name="l00080"></a><a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">00080</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
<a name="l00081"></a>00081 };
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">/* BGP adjacency in. */</span>
<a name="l00084"></a><a class="code" href="structbgp__adj__in.html">00084</a> <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a>
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="comment">/* Linked list pointer.  */</span>
<a name="l00087"></a><a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">00087</a>   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>;
<a name="l00088"></a><a class="code" href="structbgp__adj__in.html#a0ca4a8922a7b4647b8777b18c28769b0">00088</a>   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *<a class="code" href="structbgp__adj__in.html#a0ca4a8922a7b4647b8777b18c28769b0">prev</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="comment">/* Received peer.  */</span>
<a name="l00091"></a><a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">00091</a>   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="comment">/* Received attribute.  */</span>
<a name="l00094"></a><a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">00094</a>   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>;
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* BGP advertisement list.  */</span>
<a name="l00098"></a><a class="code" href="structbgp__synchronize.html">00098</a> <span class="keyword">struct </span><a class="code" href="structbgp__synchronize.html">bgp_synchronize</a>
<a name="l00099"></a>00099 {
<a name="l00100"></a><a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">00100</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a> <a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>;
<a name="l00101"></a><a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">00101</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a> <a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>;
<a name="l00102"></a><a class="code" href="structbgp__synchronize.html#a0d2b66173a0ee4567807124e92dc5c35">00102</a>   <span class="keyword">struct </span><a class="code" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a> <a class="code" href="structbgp__synchronize.html#a0d2b66173a0ee4567807124e92dc5c35">withdraw_low</a>;
<a name="l00103"></a>00103 };
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">/* BGP adjacency linked list.  */</span>
<a name="l00106"></a><a class="code" href="bgp__advertise_8h.html#a6c9b3e6109c71a9db9ee88d2e58fb418">00106</a> <span class="preprocessor">#define BGP_INFO_ADD(N,A,TYPE)                        \</span>
<a name="l00107"></a>00107 <span class="preprocessor">  do {                                                \</span>
<a name="l00108"></a>00108 <span class="preprocessor">    (A)-&gt;prev = NULL;                                 \</span>
<a name="l00109"></a>00109 <span class="preprocessor">    (A)-&gt;next = (N)-&gt;TYPE;                            \</span>
<a name="l00110"></a>00110 <span class="preprocessor">    if ((N)-&gt;TYPE)                                    \</span>
<a name="l00111"></a>00111 <span class="preprocessor">      (N)-&gt;TYPE-&gt;prev = (A);                          \</span>
<a name="l00112"></a>00112 <span class="preprocessor">    (N)-&gt;TYPE = (A);                                  \</span>
<a name="l00113"></a>00113 <span class="preprocessor">  } while (0)</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>
<a name="l00115"></a><a class="code" href="bgp__advertise_8h.html#a069022d11d28d09f8b29090ba5f89f6e">00115</a> <span class="preprocessor">#define BGP_INFO_DEL(N,A,TYPE)                        \</span>
<a name="l00116"></a>00116 <span class="preprocessor">  do {                                                \</span>
<a name="l00117"></a>00117 <span class="preprocessor">    if ((A)-&gt;next)                                    \</span>
<a name="l00118"></a>00118 <span class="preprocessor">      (A)-&gt;next-&gt;prev = (A)-&gt;prev;                    \</span>
<a name="l00119"></a>00119 <span class="preprocessor">    if ((A)-&gt;prev)                                    \</span>
<a name="l00120"></a>00120 <span class="preprocessor">      (A)-&gt;prev-&gt;next = (A)-&gt;next;                    \</span>
<a name="l00121"></a>00121 <span class="preprocessor">    else                                              \</span>
<a name="l00122"></a>00122 <span class="preprocessor">      (N)-&gt;TYPE = (A)-&gt;next;                          \</span>
<a name="l00123"></a>00123 <span class="preprocessor">  } while (0)</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>
<a name="l00125"></a><a class="code" href="bgp__advertise_8h.html#a1ce2af1fd81e9240bc4d6d784338cf75">00125</a> <span class="preprocessor">#define BGP_ADJ_IN_ADD(N,A)    BGP_INFO_ADD(N,A,adj_in)</span>
<a name="l00126"></a><a class="code" href="bgp__advertise_8h.html#aef9983ec96ae91af692b72e0624be49a">00126</a> <span class="preprocessor"></span><span class="preprocessor">#define BGP_ADJ_IN_DEL(N,A)    BGP_INFO_DEL(N,A,adj_in)</span>
<a name="l00127"></a><a class="code" href="bgp__advertise_8h.html#aadafe41cc6e05191cb98c1beb10cc81a">00127</a> <span class="preprocessor"></span><span class="preprocessor">#define BGP_ADJ_OUT_ADD(N,A)   BGP_INFO_ADD(N,A,adj_out)</span>
<a name="l00128"></a><a class="code" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">00128</a> <span class="preprocessor"></span><span class="preprocessor">#define BGP_ADJ_OUT_DEL(N,A)   BGP_INFO_DEL(N,A,adj_out)</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>
<a name="l00130"></a>00130 <span class="comment">/* Prototypes.  */</span>
<a name="l00131"></a>00131 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a3a40b0a670f7854055d71517f5ede018">bgp_adj_out_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *,
<a name="l00132"></a>00132               <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *);
<a name="l00133"></a>00133 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#adbc62e0dd99f941abbaf231f77930094">bgp_adj_out_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *,
<a name="l00134"></a>00134             <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>);
<a name="l00135"></a>00135 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a4f008d09b6f5c7288dc27f5a5fbf376f">bgp_adj_out_remove</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *, 
<a name="l00136"></a>00136              <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>);
<a name="l00137"></a>00137 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="bgp__advertise_8c.html#aebf800b9e88b48d79843ec71e900996e">bgp_adj_out_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>,
<a name="l00138"></a>00138             <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a77bcda74262e0f3ac53d98898bc76a55">bgp_adj_in_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *);
<a name="l00141"></a>00141 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a88b27370d0e6416445dc1f131053d9f1">bgp_adj_in_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *);
<a name="l00142"></a>00142 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *, <span class="keyword">struct</span> <a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *
<a name="l00145"></a>00145 <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *, <span class="keyword">struct</span> <a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#acc82ab213ba4b510000b2da360e1d347">bgp_sync_init</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *);
<a name="l00148"></a>00148 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="bgp__advertise_8c.html#a1a133356214b32e6d51aec071be79f1d">bgp_sync_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="preprocessor">#endif </span><span class="comment">/* _QUAGGA_BGP_ADVERTISE_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__advertise_8h.html">bgp_advertise.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:01 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
