<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/buffer.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('buffer_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">lib/buffer.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="buffer_8h__dep__incl.png" border="0" usemap="#lib_2buffer_8hdep" alt=""/></div>
<map name="lib_2buffer_8hdep" id="lib_2buffer_8hdep">
<area shape="rect" id="node3" href="bgp__filter_8c.html" title="bgpd/bgp_filter.c" alt="" coords="5,80,131,107"/><area shape="rect" id="node5" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="156,80,287,107"/><area shape="rect" id="node7" href="bgp__routemap_8c.html" title="bgpd/bgp_routemap.c" alt="" coords="311,80,468,107"/><area shape="rect" id="node9" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="493,80,611,107"/><area shape="rect" id="node11" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="635,80,735,107"/><area shape="rect" id="node13" href="buffer_8c.html" title="lib/buffer.c" alt="" coords="760,80,845,107"/><area shape="rect" id="node15" href="filter_8c.html" title="lib/filter.c" alt="" coords="869,80,947,107"/><area shape="rect" id="node17" href="if_8c.html" title="lib/if.c" alt="" coords="971,80,1028,107"/><area shape="rect" id="node19" href="plist_8c.html" title="lib/plist.c" alt="" coords="1053,80,1128,107"/><area shape="rect" id="node21" href="vty_8c.html" title="lib/vty.c" alt="" coords="1153,80,1223,107"/><area shape="rect" id="node23" href="zclient_8c.html" title="lib/zclient.c" alt="" coords="1247,80,1336,107"/><area shape="rect" id="node25" href="test-buffer_8c.html" title="tests/test&#45;buffer.c" alt="" coords="1361,80,1495,107"/><area shape="rect" id="node27" href="zserv_8c.html" title="zebra/zserv.c" alt="" coords="1519,80,1620,107"/></map>
</div>
</div>
<p><a href="buffer_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> { <a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a> =  -1, 
<a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a> =  0, 
<a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a> =  1
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#ae4ef546abb21b0adc732f30df2f299fe">buffer_new</a> (size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#ac9fc6d7543026d750a2a1006988b4928">buffer_reset</a> (struct <a class="el" href="structbuffer.html">buffer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a1e0559eaa1a32cd36154b90ab0eb910f">buffer_free</a> (struct <a class="el" href="structbuffer.html">buffer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a4ed00ae1d2325b0af2c079acb6299d07">buffer_put</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, const void *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#add3834e84dcf8e10919fd29ca7f9cb30">buffer_putc</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#ae444912a8f8038846d7b732d747579af">buffer_putstr</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a0f45ad843c2a911dc7ee1cbd83f426fa">buffer_getstr</a> (struct <a class="el" href="structbuffer.html">buffer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a52b607c4b58938a160938b5a4ed7382e">buffer_empty</a> (struct <a class="el" href="structbuffer.html">buffer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a617308d4628c6f30da50679a6a008cb1">buffer_write</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, int fd, const void *, size_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a342361ac4584b5612bfc8848144ed59b">buffer_flush_available</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, int fd)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#a760a7d10d8c3a02e0c4ebc5f776f9cc3">buffer_flush_all</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, int fd)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="buffer_8h.html#afcb12bf93399b19962893c0e16caa705">buffer_flush_window</a> (struct <a class="el" href="structbuffer.html">buffer</a> *, int fd, int width, int height, int erase, int no_more)</td></tr>
</table>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a11b72623a9601834584c5ecf08dd6e27"></a><!-- doxytag: member="buffer.h::buffer_status_t" ref="a11b72623a9601834584c5ecf08dd6e27" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1"></a><!-- doxytag: member="BUFFER_ERROR" ref="a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1" args="" -->BUFFER_ERROR</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba"></a><!-- doxytag: member="BUFFER_EMPTY" ref="a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba" args="" -->BUFFER_EMPTY</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110"></a><!-- doxytag: member="BUFFER_PENDING" ref="a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110" args="" -->BUFFER_PENDING</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="buffer_8h_source.html#l00055">55</a> of file <a class="el" href="buffer_8h_source.html">buffer.h</a>.</p>
<div class="fragment"><pre class="fragment">  {
    <span class="comment">/* An I/O error occurred.  The buffer should be destroyed and the</span>
<span class="comment">       file descriptor should be closed. */</span>
    <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a> = -1,

    <span class="comment">/* The data was written successfully, and the buffer is now empty</span>
<span class="comment">       (there is no pending data waiting to be flushed). */</span>
    <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a> = 0,

    <span class="comment">/* There is pending data in the buffer waiting to be flushed.  Please</span>
<span class="comment">       try flushing the buffer when select indicates that the file descriptor</span>
<span class="comment">       is writeable. */</span>
    <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a> = 1
  } <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a>;
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a52b607c4b58938a160938b5a4ed7382e"></a><!-- doxytag: member="buffer.h::buffer_empty" ref="a52b607c4b58938a160938b5a4ed7382e" args="(struct buffer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int buffer_empty </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00125">125</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a760a7d10d8c3a02e0c4ebc5f776f9cc3"></a><!-- doxytag: member="buffer.h::buffer_flush_all" ref="a760a7d10d8c3a02e0c4ebc5f776f9cc3" args="(struct buffer *, int fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> buffer_flush_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00205">205</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> ret;
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *head;
  <span class="keywordtype">size_t</span> head_sp;

  <span class="keywordflow">if</span> (!<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)
    <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>;
  head_sp = (head = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
  <span class="comment">/* Flush all data. */</span>
  <span class="keywordflow">while</span> ((ret = <a class="code" href="buffer_8c.html#a3df3e577fcbeec460e3ddab6bc6f59ec">buffer_flush_available</a>(b, fd)) == <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a>)
    {
      <span class="keywordflow">if</span> ((<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head == head) &amp;&amp; (head_sp == head-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>) &amp;&amp; (errno != EINTR))
        <span class="comment">/* No data was flushed, so kernel buffer must be full. */</span>
    <span class="keywordflow">return</span> ret;
      head_sp = (head = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
    }

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a342361ac4584b5612bfc8848144ed59b"></a><!-- doxytag: member="buffer.h::buffer_flush_available" ref="a342361ac4584b5612bfc8848144ed59b" args="(struct buffer *, int fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> buffer_flush_available </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00393">393</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{

<span class="comment">/* These are just reasonable values to make sure a significant amount of</span>
<span class="comment">data is written.  There&#39;s no need to go crazy and try to write it all</span>
<span class="comment">in one shot. */</span>
<span class="preprocessor">#ifdef IOV_MAX</span>
<span class="preprocessor"></span><span class="preprocessor">#define MAX_CHUNKS ((IOV_MAX &gt;= 16) ? 16 : IOV_MAX)</span>
<span class="preprocessor"></span><span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="preprocessor">#define MAX_CHUNKS 16</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span><span class="preprocessor">#define MAX_FLUSH 131072</span>
<span class="preprocessor"></span>
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *d;
  <span class="keywordtype">size_t</span> written;
  <span class="keyword">struct </span>iovec iov[<a class="code" href="buffer_8c.html#a9e879c11aa15653382faa681060e6179">MAX_CHUNKS</a>];
  <span class="keywordtype">size_t</span> iovcnt = 0;
  <span class="keywordtype">size_t</span> nbyte = 0;

  <span class="keywordflow">for</span> (d = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head; d &amp;&amp; (iovcnt &lt; MAX_CHUNKS) &amp;&amp; (nbyte &lt; MAX_FLUSH);
       d = d-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>, iovcnt++)
    {
      iov[iovcnt].iov_base = d-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a>+d-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
      nbyte += (iov[iovcnt].iov_len = d-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>-d-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>);
    }

  <span class="keywordflow">if</span> (!nbyte)
    <span class="comment">/* No data to flush: should we issue a warning message? */</span>
    <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>;

  <span class="comment">/* only place where written should be sign compared */</span>
  <span class="keywordflow">if</span> ((ssize_t)(written = writev(fd,iov,iovcnt)) &lt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="network_8h.html#a45b38a31650d3cee8087360351384d9e">ERRNO_IO_RETRY</a>(errno))
    <span class="comment">/* Calling code should try again later. */</span>
        <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a>;
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: write error on fd %d: %s&quot;</span>,
        __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
      <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a>;
    }

  <span class="comment">/* Free printed buffer data. */</span>
  <span class="keywordflow">while</span> (written &gt; 0)
    {
      <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *d;
      <span class="keywordflow">if</span> (!(d = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head))
        {
          <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: corruption detected: buffer queue empty, &quot;</span>
           <span class="stringliteral">&quot;but written is %lu&quot;</span>, __func__, (u_long)written);
      <span class="keywordflow">break</span>;
        }
      <span class="keywordflow">if</span> (written &lt; d-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>-d-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>)
        {
      d-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a> += written;
      <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a>;
    }

      written -= (d-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>-d-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>);
      <span class="keywordflow">if</span> (!(<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head = d-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>))
        <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="buffer_8c.html#a1a2b87a6bddffd1ff50c2e32cc432dcc">BUFFER_DATA_FREE</a>(d);
    }

  <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head ? <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a> : <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>;

<span class="preprocessor">#undef MAX_CHUNKS</span>
<span class="preprocessor"></span><span class="preprocessor">#undef MAX_FLUSH</span>
<span class="preprocessor"></span>}
</pre></div>
</div>
</div>
<a class="anchor" id="afcb12bf93399b19962893c0e16caa705"></a><!-- doxytag: member="buffer.h::buffer_flush_window" ref="afcb12bf93399b19962893c0e16caa705" args="(struct buffer *, int fd, int width, int height, int erase, int no_more)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> buffer_flush_window </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>erase</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>no_more</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00229">229</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;
  <span class="keywordtype">int</span> iov_alloc;
  <span class="keywordtype">int</span> iov_index;
  <span class="keyword">struct </span>iovec *iov;
  <span class="keyword">struct </span>iovec small_iov[3];
  <span class="keywordtype">char</span> more[] = <span class="stringliteral">&quot; --More-- &quot;</span>;
  <span class="keywordtype">char</span> erase[] = { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
           <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>, <span class="charliteral">&#39; &#39;</span>,
           0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08};
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
  <span class="keywordtype">int</span> column;

  <span class="keywordflow">if</span> (!<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)
    <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>;

  <span class="keywordflow">if</span> (height &lt; 1)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s called with non-positive window height %d, forcing to 1&quot;</span>,
            __func__, height);
      height = 1;
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (height &gt;= 2)
    height--;
  <span class="keywordflow">if</span> (width &lt; 1)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s called with non-positive window width %d, forcing to 1&quot;</span>,
            __func__, width);
      width = 1;
    }

  <span class="comment">/* For erase and more data add two to b&#39;s buffer_data count.*/</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head-&gt;next == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      iov_alloc = <span class="keyword">sizeof</span>(small_iov)/<span class="keyword">sizeof</span>(small_iov[0]);
      iov = small_iov;
    }
  <span class="keywordflow">else</span>
    {
      iov_alloc = ((height*(width+2))/<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;size)+10;
      iov = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, iov_alloc*<span class="keyword">sizeof</span>(*iov));
    }
  iov_index = 0;

  <span class="comment">/* Previously print out is performed. */</span>
  <span class="keywordflow">if</span> (erase_flag)
    {
      iov[iov_index].iov_base = erase;
      iov[iov_index].iov_len = <span class="keyword">sizeof</span> erase;
      iov_index++;
    }

  <span class="comment">/* Output data. */</span>
  column = 1;  <span class="comment">/* Column position of next character displayed. */</span>
  <span class="keywordflow">for</span> (data = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head; data &amp;&amp; (height &gt; 0); data = data-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>)
    {
      <span class="keywordtype">size_t</span> <a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>;

      cp = data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
      <span class="keywordflow">while</span> ((cp &lt; data-&gt;cp) &amp;&amp; (height &gt; 0))
        {
      <span class="comment">/* Calculate lines remaining and column position after displaying</span>
<span class="comment">         this character. */</span>
      <span class="keywordflow">if</span> (data-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a>[cp] == <span class="charliteral">&#39;\r&#39;</span>)
        column = 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((data-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a>[cp] == <span class="charliteral">&#39;\n&#39;</span>) || (column == width))
        {
          column = 1;
          height--;
        }
      <span class="keywordflow">else</span>
        column++;
      cp++;
        }
      iov[iov_index].iov_base = (<span class="keywordtype">char</span> *)(data-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a> + data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>);
      iov[iov_index++].iov_len = cp-data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
      data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a> = <a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>;

      <span class="keywordflow">if</span> (iov_index == iov_alloc)
    <span class="comment">/* This should not ordinarily happen. */</span>
        {
      iov_alloc *= 2;
      <span class="keywordflow">if</span> (iov != small_iov)
        {
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: growing iov array to %d; &quot;</span>
            <span class="stringliteral">&quot;width %d, height %d, size %lu&quot;</span>,
            __func__, iov_alloc, width, height, (u_long)<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;size);
          iov = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, iov, iov_alloc*<span class="keyword">sizeof</span>(*iov));
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* This should absolutely never occur. */</span>
          <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: corruption detected: iov_small overflowed; &quot;</span>
               <span class="stringliteral">&quot;head %p, tail %p, head-&gt;next %p&quot;</span>,
               __func__, <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head, <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail, <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head-&gt;next);
          iov = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, iov_alloc*<span class="keyword">sizeof</span>(*iov));
          <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(iov, small_iov, <span class="keyword">sizeof</span>(small_iov));
        }
    }
    }

  <span class="comment">/* In case of `more&#39; display need. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail &amp;&amp; (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail-&gt;sp &lt; <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail-&gt;cp) &amp;&amp; !no_more_flag)
    {
      iov[iov_index].iov_base = more;
      iov[iov_index].iov_len = <span class="keyword">sizeof</span> more;
      iov_index++;
    }


<span class="preprocessor">#ifdef IOV_MAX</span>
<span class="preprocessor"></span>  <span class="comment">/* IOV_MAX are normally defined in &lt;sys/uio.h&gt; , Posix.1g.</span>
<span class="comment">     example: Solaris2.6 are defined IOV_MAX size at 16.     */</span>
  {
    <span class="keyword">struct </span>iovec *c_iov = iov;
    nbytes = 0; <span class="comment">/* Make sure it&#39;s initialized. */</span>

    <span class="keywordflow">while</span> (iov_index &gt; 0)
      {
     <span class="keywordtype">int</span> iov_size;

     iov_size = ((iov_index &gt; IOV_MAX) ? IOV_MAX : iov_index);
     <span class="keywordflow">if</span> ((nbytes = writev(fd, c_iov, iov_size)) &lt; 0)
       {
         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: writev to fd %d failed: %s&quot;</span>,
               __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
         <span class="keywordflow">break</span>;
       }

     <span class="comment">/* move pointer io-vector */</span>
     c_iov += iov_size;
     iov_index -= iov_size;
      }
  }
<span class="preprocessor">#else  </span><span class="comment">/* IOV_MAX */</span>
   <span class="keywordflow">if</span> ((nbytes = writev (fd, iov, iov_index)) &lt; 0)
     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: writev to fd %d failed: %s&quot;</span>,
           __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<span class="preprocessor">#endif </span><span class="comment">/* IOV_MAX */</span>

  <span class="comment">/* Free printed buffer data. */</span>
  <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head &amp;&amp; (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head-&gt;sp == <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head-&gt;cp))
    {
      <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *del;
      <span class="keywordflow">if</span> (!(<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head = (del = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)-&gt;next))
        <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="buffer_8c.html#a1a2b87a6bddffd1ff50c2e32cc432dcc">BUFFER_DATA_FREE</a>(del);
    }

  <span class="keywordflow">if</span> (iov != small_iov)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, iov);

  <span class="keywordflow">return</span> (nbytes &lt; 0) ? <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a> :
            (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head ? <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a> : <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1e0559eaa1a32cd36154b90ab0eb910f"></a><!-- doxytag: member="buffer.h::buffer_free" ref="a1e0559eaa1a32cd36154b90ab0eb910f" args="(struct buffer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void buffer_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00094">94</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="buffer_8c.html#a91ad0ff694ccef1876a3e8d8a3b05ffa">buffer_reset</a>(b);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba660cc6f2178bf9e9ca02996fb58cfaa6">MTYPE_BUFFER</a>, b);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0f45ad843c2a911dc7ee1cbd83f426fa"></a><!-- doxytag: member="buffer.h::buffer_getstr" ref="a0f45ad843c2a911dc7ee1cbd83f426fa" args="(struct buffer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* buffer_getstr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00102">102</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> totlen = 0;
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
  <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">for</span> (data = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head; data; data = data-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>)
    totlen += data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a> - data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
  <span class="keywordflow">if</span> (!(s = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, totlen+1)))
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  p = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordflow">for</span> (data = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head; data; data = data-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>)
    {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(p, data-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a> + data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>, data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a> - data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>);
      p += data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a> - data-&gt;<a class="code" href="structbuffer__data.html#a292117cde877c065aaa2c37631351264">sp</a>;
    }
  *p = <span class="charliteral">&#39;\0&#39;</span>;
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae4ef546abb21b0adc732f30df2f299fe"></a><!-- doxytag: member="buffer.h::buffer_new" ref="ae4ef546abb21b0adc732f30df2f299fe" args="(size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbuffer.html">buffer</a>* buffer_new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00070">70</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbuffer.html">buffer</a> *<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>;

  b = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba660cc6f2178bf9e9ca02996fb58cfaa6">MTYPE_BUFFER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbuffer.html">buffer</a>));

  <span class="keywordflow">if</span> (<a class="code" href="structbuffer.html#abcf45ad6ca930a5656076f0d1d2343a9">size</a>)
    b-&gt;<a class="code" href="structbuffer.html#abcf45ad6ca930a5656076f0d1d2343a9">size</a> = <a class="code" href="structbuffer.html#abcf45ad6ca930a5656076f0d1d2343a9">size</a>;
  <span class="keywordflow">else</span>
    {
      <span class="keyword">static</span> <span class="keywordtype">size_t</span> default_size;
      <span class="keywordflow">if</span> (!default_size)
        {
      <span class="keywordtype">long</span> pgsz = sysconf(_SC_PAGESIZE);
      default_size = ((((<a class="code" href="buffer_8c.html#aba02eec807073b2458c435aa56d7f939">BUFFER_SIZE_DEFAULT</a>-1)/pgsz)+1)*pgsz);
    }
      b-&gt;<a class="code" href="structbuffer.html#abcf45ad6ca930a5656076f0d1d2343a9">size</a> = default_size;
    }

  <span class="keywordflow">return</span> b;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4ed00ae1d2325b0af2c079acb6299d07"></a><!-- doxytag: member="buffer.h::buffer_put" ref="a4ed00ae1d2325b0af2c079acb6299d07" args="(struct buffer *, const void *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void buffer_put </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00166">166</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a> = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail;
  <span class="keyword">const</span> <span class="keywordtype">char</span> *ptr = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* We use even last one byte of data buffer. */</span>
  <span class="keywordflow">while</span> (size)    
    {
      <span class="keywordtype">size_t</span> chunk;

      <span class="comment">/* If there is no data buffer add it. */</span>
      <span class="keywordflow">if</span> (data == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a> == <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;size)
    data = <a class="code" href="buffer_8c.html#ad027e354c74d46f48ec387fee3835409">buffer_add</a> (b);

      chunk = ((size &lt;= (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;size - data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>)) ? size : (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;size - data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>));
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> ((data-&gt;<a class="code" href="structbuffer__data.html#a90aa21dcf78cbc15b6697660ab0ee105">data</a> + data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a>), ptr, chunk);
      size -= chunk;
      ptr += chunk;
      data-&gt;<a class="code" href="structbuffer__data.html#a802679574fd02768addf622342f78f5c">cp</a> += chunk;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="add3834e84dcf8e10919fd29ca7f9cb30"></a><!-- doxytag: member="buffer.h::buffer_putc" ref="add3834e84dcf8e10919fd29ca7f9cb30" args="(struct buffer *, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void buffer_putc </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00190">190</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="buffer_8c.html#a6150096c2eaae19e636d2742c3df5b75">buffer_put</a>(b, &amp;c, 1);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae444912a8f8038846d7b732d747579af"></a><!-- doxytag: member="buffer.h::buffer_putstr" ref="ae444912a8f8038846d7b732d747579af" args="(struct buffer *, const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void buffer_putstr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00197">197</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="buffer_8c.html#a6150096c2eaae19e636d2742c3df5b75">buffer_put</a>(b, c, strlen(c));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac9fc6d7543026d750a2a1006988b4928"></a><!-- doxytag: member="buffer.h::buffer_reset" ref="ac9fc6d7543026d750a2a1006988b4928" args="(struct buffer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void buffer_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00132">132</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
  <span class="keyword">struct </span><a class="code" href="structbuffer__data.html">buffer_data</a> *<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>;
  
  <span class="keywordflow">for</span> (data = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head; data; data = next)
    {
      next = data-&gt;<a class="code" href="structbuffer__data.html#a1583dc93752a03fcfc2ed05d2e4fc99d">next</a>;
      <a class="code" href="buffer_8c.html#a1a2b87a6bddffd1ff50c2e32cc432dcc">BUFFER_DATA_FREE</a>(data);
    }
  <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head = <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;tail = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a617308d4628c6f30da50679a6a008cb1"></a><!-- doxytag: member="buffer.h::buffer_write" ref="a617308d4628c6f30da50679a6a008cb1" args="(struct buffer *, int fd, const void *, size_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27">buffer_status_t</a> buffer_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbuffer.html">buffer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="buffer_8c_source.html#l00463">463</a> of file <a class="el" href="buffer_8c_source.html">buffer.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  ssize_t nbytes;

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <span class="comment">/* Should we attempt to drain any previously buffered data?  This could help</span>
<span class="comment">     reduce latency in pushing out the data if we are stuck in a long-running</span>
<span class="comment">     thread that is preventing the main select loop from calling the flush</span>
<span class="comment">     thread... */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head &amp;&amp; (<a class="code" href="buffer_8c.html#a3df3e577fcbeec460e3ddab6bc6f59ec">buffer_flush_available</a>(b, fd) == <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a>))
    <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a>;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head)
    <span class="comment">/* Buffer is not empty, so do not attempt to write the new data. */</span>
    nbytes = 0;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((nbytes = write(fd, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, size)) &lt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="network_8h.html#a45b38a31650d3cee8087360351384d9e">ERRNO_IO_RETRY</a>(errno))
        nbytes = 0;
      <span class="keywordflow">else</span>
        {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: write error on fd %d: %s&quot;</span>,
            __func__, fd, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
      <span class="keywordflow">return</span> <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6185688e62ce527910fd779f2093c6f1">BUFFER_ERROR</a>;
    }
    }
  <span class="comment">/* Add any remaining data to the buffer. */</span>
  {
    <span class="keywordtype">size_t</span> written = nbytes;
    <span class="keywordflow">if</span> (written &lt; size)
      <a class="code" href="buffer_8c.html#a6150096c2eaae19e636d2742c3df5b75">buffer_put</a>(b, ((<span class="keyword">const</span> <span class="keywordtype">char</span> *)<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)+written, size-written);
  }
  <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>-&gt;head ? <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a6a5c775497aad93877d86b6a334de110">BUFFER_PENDING</a> : <a class="code" href="buffer_8h.html#a11b72623a9601834584c5ecf08dd6e27a78d7168c875c46a0fbb5835cd160e2ba">BUFFER_EMPTY</a>;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="buffer_8h.html">buffer.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:21 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
