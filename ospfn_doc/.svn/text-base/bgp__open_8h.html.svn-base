<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_open.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__open_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_open.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__open_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__open_8hdep" alt=""/></div>
<map name="bgpd_2bgp__open_8hdep" id="bgpd_2bgp__open_8hdep">
<area shape="rect" id="node3" href="bgp__fsm_8c.html" title="bgpd/bgp_fsm.c" alt="" coords="5,80,125,107"/><area shape="rect" id="node5" href="bgp__open_8c.html" title="bgpd/bgp_open.c" alt="" coords="151,80,281,107"/><area shape="rect" id="node7" href="bgp__packet_8c.html" title="bgpd/bgp_packet.c" alt="" coords="306,80,445,107"/><area shape="rect" id="node9" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="470,80,588,107"/><area shape="rect" id="node11" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="613,80,712,107"/><area shape="rect" id="node13" href="bgp__capability__test_8c.html" title="tests/bgp_capability_test.c" alt="" coords="737,80,927,107"/><area shape="rect" id="node15" href="bgp__mp__attr__test_8c.html" title="tests/bgp_mp_attr_test.c" alt="" coords="951,80,1129,107"/></map>
</div>
</div>
<p><a href="bgp__open_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcapability__header.html">capability_header</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcapability__mp__data.html">capability_mp_data</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcapability__orf__entry.html">capability_orf_entry</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcapability__as4.html">capability_as4</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgraceful__restart__af.html">graceful_restart_af</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcapability__gr.html">capability_gr</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>&#160;&#160;&#160;64</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>&#160;&#160;&#160;65</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>&#160;&#160;&#160;66</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>&#160;&#160;&#160;128</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>&#160;&#160;&#160;130</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>&#160;&#160;&#160;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>&#160;&#160;&#160;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>&#160;&#160;&#160;64</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>&#160;&#160;&#160;128</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#af5dd57265f518ffafc0fdb1957a7b706">CAPABILITY_ACTION_UNSET</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a35aa17cff1a62e3d629a2b853627c0a7">RESTART_R_BIT</a>&#160;&#160;&#160;0x8000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#aefb31f75bd08979c2e698025f8ce0194">RESTART_F_BIT</a>&#160;&#160;&#160;0x80</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcapability__orf__entry.html">capability_orf_entry</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a234847cf2a2bb74b4122fb77b061b701">__attribute__</a> ((packed))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a4936a4cfe15a38a735a935463ebe8a58">bgp_open_option_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *, u_char, int *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a92ede3ad178a065348f1a9764e304191">bgp_open_capability</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a1a271e8b7c94980321e5c29049831c29">bgp_capability_vty_out</a> (struct <a class="el" href="structvty.html">vty</a> *, struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a9ffa41fed762be362653c535a4aa2713">peek_for_as4_capability</a> (struct <a class="el" href="structpeer.html">peer</a> *, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a069562357de00829ce6742935ed4d8c1">bgp_afi_safi_valid_indices</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> *)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcapability__mp__data.html">capability_mp_data</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a></td></tr>
<tr><td class="memItemLeft" >struct {</td></tr>
<tr><td class="memItemLeft" >&#160;&#160;&#160;u_char&#160;&#160;&#160;<a class="el" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a></td></tr>
<tr><td class="memItemLeft" >&#160;&#160;&#160;u_char&#160;&#160;&#160;<a class="el" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a></td></tr>
<tr><td class="memItemLeft" valign="top">}&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#afcd1c35dbfa566fb2186e772c34583f1">orfs</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcapability__as4.html">capability_as4</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8h.html#ac16e052e4a1adc9c2c0a3200708f62cd">__attribute__</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="abd786897d5906606e48d7815943c8c54"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_ACTION_SET" ref="abd786897d5906606e48d7815943c8c54" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_ACTION_SET&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00098">98</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="af5dd57265f518ffafc0fdb1957a7b706"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_ACTION_UNSET" ref="af5dd57265f518ffafc0fdb1957a7b706" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_ACTION_UNSET&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00099">99</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="af7e25dec48dabf1526467e366986ce09"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_AS4" ref="af7e25dec48dabf1526467e366986ce09" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_AS4&#160;&#160;&#160;65</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00074">74</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a27d06bf4df5c59af5de5b2cbecafd0e6"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_AS4_LEN" ref="a27d06bf4df5c59af5de5b2cbecafd0e6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_AS4_LEN&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00084">84</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="adee9e025a4ec121fcff64466c831dbce"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_DYNAMIC" ref="adee9e025a4ec121fcff64466c831dbce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_DYNAMIC&#160;&#160;&#160;66</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00075">75</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1886b055227d09782c5df33e12990979"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_DYNAMIC_LEN" ref="a1886b055227d09782c5df33e12990979" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_DYNAMIC_LEN&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00082">82</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="af424a8035e635455eb7ca17c86506601"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_MP" ref="af424a8035e635455eb7ca17c86506601" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_MP&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00070">70</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac7fce6558271318759ea5dff7971efcb"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_MP_LEN" ref="ac7fce6558271318759ea5dff7971efcb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_MP_LEN&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00080">80</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a78d317d93115b2facd3716c3da07c41a"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_ORF" ref="a78d317d93115b2facd3716c3da07c41a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_ORF&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00072">72</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa39dc1dd275949d2445a9d3a02facb9a"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_ORF_OLD" ref="aa39dc1dd275949d2445a9d3a02facb9a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_ORF_OLD&#160;&#160;&#160;130</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00077">77</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a07e09db944460c00ce17553a422bde50"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_REFRESH" ref="a07e09db944460c00ce17553a422bde50" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_REFRESH&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00071">71</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="afa15c5ba9cddb4c4b02e11da502efa96"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_REFRESH_LEN" ref="afa15c5ba9cddb4c4b02e11da502efa96" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_REFRESH_LEN&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00081">81</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad0caa87c9bae6226b4104c55e466196f"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_REFRESH_OLD" ref="ad0caa87c9bae6226b4104c55e466196f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_REFRESH_OLD&#160;&#160;&#160;128</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00076">76</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="abdfcbf8f390aa993966f4a08cc7f77ff"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_RESTART" ref="abdfcbf8f390aa993966f4a08cc7f77ff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_RESTART&#160;&#160;&#160;64</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00073">73</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac70790714a0c539860e8e8dba37a8990"></a><!-- doxytag: member="bgp_open.h::CAPABILITY_CODE_RESTART_LEN" ref="ac70790714a0c539860e8e8dba37a8990" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CAPABILITY_CODE_RESTART_LEN&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00083">83</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa2f4a41f8868fc7f30256d3b1b9ef724"></a><!-- doxytag: member="bgp_open.h::ORF_MODE_BOTH" ref="aa2f4a41f8868fc7f30256d3b1b9ef724" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ORF_MODE_BOTH&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00095">95</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae71faab30e0c630f5cc40e197425bbe7"></a><!-- doxytag: member="bgp_open.h::ORF_MODE_RECEIVE" ref="ae71faab30e0c630f5cc40e197425bbe7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ORF_MODE_RECEIVE&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00093">93</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac744fbeb93f5b3cbd74056a7eb69fcab"></a><!-- doxytag: member="bgp_open.h::ORF_MODE_SEND" ref="ac744fbeb93f5b3cbd74056a7eb69fcab" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ORF_MODE_SEND&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00094">94</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="adc5dbdce1a3677ba56d250c98f0d56ff"></a><!-- doxytag: member="bgp_open.h::ORF_TYPE_PREFIX" ref="adc5dbdce1a3677ba56d250c98f0d56ff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ORF_TYPE_PREFIX&#160;&#160;&#160;64</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00089">89</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a08c45b6907c24b44c5db40587b4abb15"></a><!-- doxytag: member="bgp_open.h::ORF_TYPE_PREFIX_OLD" ref="a08c45b6907c24b44c5db40587b4abb15" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ORF_TYPE_PREFIX_OLD&#160;&#160;&#160;128</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00090">90</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="aefb31f75bd08979c2e698025f8ce0194"></a><!-- doxytag: member="bgp_open.h::RESTART_F_BIT" ref="aefb31f75bd08979c2e698025f8ce0194" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RESTART_F_BIT&#160;&#160;&#160;0x80</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00103">103</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a35aa17cff1a62e3d629a2b853627c0a7"></a><!-- doxytag: member="bgp_open.h::RESTART_R_BIT" ref="a35aa17cff1a62e3d629a2b853627c0a7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RESTART_R_BIT&#160;&#160;&#160;0x8000</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00102">102</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a234847cf2a2bb74b4122fb77b061b701"></a><!-- doxytag: member="bgp_open.h::__attribute__" ref="a234847cf2a2bb74b4122fb77b061b701" args="((packed))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcapability__orf__entry.html">capability_orf_entry</a> __attribute__ </td>
          <td>(</td>
          <td class="paramtype">(packed)&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a069562357de00829ce6742935ed4d8c1"></a><!-- doxytag: member="bgp_open.h::bgp_afi_safi_valid_indices" ref="a069562357de00829ce6742935ed4d8c1" args="(afi_t, safi_t *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_afi_safi_valid_indices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00128">128</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* VPNvX are AFI specific */</span>
  <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
      || (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid afi/safi combination (%u/%u)&quot;</span>, afi, *safi);
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="keywordflow">switch</span> (afi)
    {
      <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">switch</span> (*safi)
          {
            <span class="comment">/* BGP VPNvX SAFI isn&#39;t contigious with others, remap */</span>
            <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
            <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>:
              *safi = <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>;
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>:
              <span class="keywordflow">return</span> 1;
          }
    }
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unknown afi/safi (%u/%u)&quot;</span>, afi, *safi);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a271e8b7c94980321e5c29049831c29"></a><!-- doxytag: member="bgp_open.h::bgp_capability_vty_out" ref="a1a271e8b7c94980321e5c29049831c29" args="(struct vty *, struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_capability_vty_out </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00051">51</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> *pnt;
  <span class="keywordtype">char</span> *end;
  <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>;
  <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *hdr;

  pnt = <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>;
  end = pnt + <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>;
  
  <span class="keywordflow">while</span> (pnt &lt; end)
    {
      <span class="keywordflow">if</span> (pnt + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>) + 2 &gt; end)
    <span class="keywordflow">return</span>;
      
      hdr = (<span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *)pnt;
      <span class="keywordflow">if</span> (pnt + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2 &gt; end)
    <span class="keywordflow">return</span>;

      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>, pnt + 2, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>));

      <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Capability error for: Multi protocol &quot;</span>);

      <span class="keywordflow">switch</span> (ntohs (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>))
        {
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;AFI IPv4, &quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;AFI IPv6, &quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;AFI Unknown %d, &quot;</span>, ntohs (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>));
          <span class="keywordflow">break</span>;
        }
      <span class="keywordflow">switch</span> (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>)
        {
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;SAFI Unicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;SAFI Multicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;SAFI Unicast Multicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;SAFI MPLS-VPN&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;SAFI Unknown %d &quot;</span>, <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
          <span class="keywordflow">break</span>;
        }
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> &gt;= 128)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Capability error: vendor specific capability code %d&quot;</span>,
         hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Capability error: unknown capability code %d&quot;</span>, 
         hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);

      pnt += hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92ede3ad178a065348f1a9764e304191"></a><!-- doxytag: member="bgp_open.h::bgp_open_capability" ref="a92ede3ad178a065348f1a9764e304191" args="(struct stream *, struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_open_capability </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00917">917</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char len;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as;

  <span class="comment">/* Remember current pointer for Opt Parm Len. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="comment">/* Opt Parm Len. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

  <span class="comment">/* Do not send capability. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>) 
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
    <span class="keywordflow">return</span>;

  <span class="comment">/* IPv4 unicast. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
    {
      <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, SAFI_UNICAST);
    }
  <span class="comment">/* IPv4 multicast. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    {
      <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, SAFI_MULTICAST);
    }
  <span class="comment">/* IPv4 VPN */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
    {
      <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* IPv6 unicast. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
    {
      <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, SAFI_UNICAST);
    }
  <span class="comment">/* IPv6 multicast. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
    {
      <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, SAFI_MULTICAST);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Route refresh. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a2794496f1536e05dd62d79c6cecb4cfe">PEER_CAP_REFRESH_ADV</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);

  <span class="comment">/* AS4 */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ae2c23b08864b92958daa94c84c207f14">PEER_CAP_AS4_ADV</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>);
  <span class="keywordflow">if</span> ( <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> )
    local_as = <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>;
  <span class="keywordflow">else</span>
    local_as = <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, local_as );

  <span class="comment">/* ORF capability. */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
    <span class="keywordflow">for</span> (safi = SAFI_UNICAST ; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a> ; safi++)
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    {
      <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structpeer.html">peer</a>, afi, safi, <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>);
      <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structpeer.html">peer</a>, afi, safi, <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>);
    }

  <span class="comment">/* Dynamic capability. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a3836f3a28c34e009bf7c06d7ea751686">PEER_CAP_DYNAMIC_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>);
    }

  <span class="comment">/* Graceful restart capability */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a339c9ce07a9d3611d2c5f1c4279b58f8">BGP_FLAG_GRACEFUL_RESTART</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a0676dbf05f735073d261e5a01b1c7dcb">PEER_CAP_RESTART_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#aaa8a4745e644e823c03cdc6606645272">restart_time</a>);
     }

  <span class="comment">/* Total Opt Parm Len. */</span>
  len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - cp - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, cp, len);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4936a4cfe15a38a735a935463ebe8a58"></a><!-- doxytag: member="bgp_open.h::bgp_open_option_parse" ref="a4936a4cfe15a38a735a935463ebe8a58" args="(struct peer *, u_char, int *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_open_option_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00725">725</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char *error;
  u_char error_data[<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>];
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(<a class="code" href="structpeer.html">peer</a>);
  <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  ret = 0;
  error = error_data;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv OPEN w/ OPTION parameter len: %u&quot;</span>,
           <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
  
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end)
    {
      u_char opt_type;
      u_char opt_length;
      
      <span class="comment">/* Must have at least an OPEN option header */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; 2)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Fetch option type and length. */</span>
      opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      
      <span class="comment">/* Option length check. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (s) &lt; opt_length)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd OPEN w/ optional parameter type %u (%s) len %u&quot;</span>,
           <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, opt_type,
           opt_type == <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a> ? <span class="stringliteral">&quot;Authentication&quot;</span> :
           opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a> ? <span class="stringliteral">&quot;Capability&quot;</span> : <span class="stringliteral">&quot;Unknown&quot;</span>,
           opt_length);
  
      <span class="keywordflow">switch</span> (opt_type)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a>:
      ret = <a class="code" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">bgp_auth_parse</a> (<a class="code" href="structpeer.html">peer</a>, opt_length);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>:
      ret = <a class="code" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">bgp_capability_parse</a> (<a class="code" href="structpeer.html">peer</a>, opt_length, &amp;error);
      *capability = 1;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a2fddbc10056aaf1a667e79c2bdbeff15">BGP_NOTIFY_OPEN_UNSUP_PARAM</a>); 
      ret = -1;
      <span class="keywordflow">break</span>;
    }

      <span class="comment">/* Parse error.  To accumulate all unsupported capability codes,</span>
<span class="comment">         bgp_capability_parse does not return -1 when encounter</span>
<span class="comment">         unsupported capability code.  To detect that, please check</span>
<span class="comment">         error and erro_data pointer, like below.  */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* All OPEN option is parsed.  Check capability when strict compare</span>
<span class="comment">     flag is enabled.*/</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
    {
      <span class="comment">/* If Unsupported Capability exists. */</span>
      <span class="keywordflow">if</span> (error != error_data)
    {
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (<a class="code" href="structpeer.html">peer</a>, 
                     <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                     <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
                     error_data, error - error_data);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Check local capability does not negotiated with remote</span>
<span class="comment">         peer. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">strict_capability_same</a> (<a class="code" href="structpeer.html">peer</a>))
    {
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* Check there is no common capability send Unsupported Capability</span>
<span class="comment">     error. */</span>
  <span class="keywordflow">if</span> (*capability &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
    {
      <span class="keywordflow">if</span> (! <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] 
      &amp;&amp; ! <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
      &amp;&amp; ! <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
      &amp;&amp; ! <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      &amp;&amp; ! <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] No common capability&quot;</span>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);

      <span class="keywordflow">if</span> (error != error_data)

        <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (<a class="code" href="structpeer.html">peer</a>, 
                       <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                       <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
                       error_data, error - error_data);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
                 <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ffa41fed762be362653c535a4aa2713"></a><!-- doxytag: member="bgp_open.h::peek_for_as4_capability" ref="a9ffa41fed762be362653c535a4aa2713" args="(struct peer *, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> peek_for_as4_capability </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00647">647</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>);
  <span class="keywordtype">size_t</span> orig_getp = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
  <span class="keywordtype">size_t</span> end = orig_getp + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = 0;
  
  <span class="comment">/* The full capability parser will better flag the error.. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; length)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
    <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s [AS4] rcv OPEN w/ OPTION parameter len: %u,&quot;</span>
                <span class="stringliteral">&quot; peeking for as4&quot;</span>,
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, length);
  <span class="comment">/* the error cases we DONT handle, we ONLY try to read as4 out of</span>
<span class="comment">   * correctly formatted options.</span>
<span class="comment">   */</span>
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end) 
    {
      u_char opt_type;
      u_char opt_length;
      
      <span class="comment">/* Check the length. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; end)
        <span class="keywordflow">goto</span> end;
      
      <span class="comment">/* Fetch option type and length. */</span>
      opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      
      <span class="comment">/* Option length check. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + opt_length &gt; end)
        <span class="keywordflow">goto</span> end;
      
      <span class="keywordflow">if</span> (opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>)
        {
          <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
          <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_end = capd_start + opt_length;
          
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (capd_end &lt;= end);
          
      <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) &lt; capd_end)
        {
          <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> hdr;
          
          <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; capd_end)
                <span class="keywordflow">goto</span> end;
              
              hdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
              hdr.length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
              
          <span class="keywordflow">if</span> ((<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) +  hdr.length) &gt; capd_end)
        <span class="keywordflow">goto</span> end;

          <span class="keywordflow">if</span> (hdr.code == <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>)
            {
              <span class="keywordflow">if</span> (hdr.length != <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>)
                <span class="keywordflow">goto</span> end;
                  
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
                <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;[AS4] found AS4 capability, about to parse&quot;</span>);
              as4 = <a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (<a class="code" href="structpeer.html">peer</a>, &amp;hdr);
              
              <span class="keywordflow">goto</span> end;
                }
              <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, hdr.length);
        }
    }
    }

end:
  <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, orig_getp);
  <span class="keywordflow">return</span> as4;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="ac16e052e4a1adc9c2c0a3200708f62cd"></a><!-- doxytag: member="bgp_open.h::__attribute__" ref="ac16e052e4a1adc9c2c0a3200708f62cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnd__opt__homeagent__info.html">nd_opt_homeagent_info</a> __attribute__</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="sigevent_8c_source.html#l00203">203</a> of file <a class="el" href="sigevent_8c_source.html">sigevent.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="log_8c.html#a05e23c9c58b9b7834cb867da34ea2556">zlog_signal</a>(signo, <span class="stringliteral">&quot;aborting...&quot;</span>
#ifdef SA_SIGINFO
          , siginfo, program_counter(<a class="code" href="dict_8c.html#aad81e1d3f9fe24703a4d3c856a75cda6">context</a>)
#endif
         );
  abort();
}
</pre></div>
</div>
</div>
<a class="anchor" id="af4324da5e10e48f7970f2bc5b611e367"></a><!-- doxytag: member="bgp_open.h::mode" ref="af4324da5e10e48f7970f2bc5b611e367" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char <a class="el" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00053">53</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="a849bb72e04e6eddb7fe7165025d02baa"></a><!-- doxytag: member="bgp_open.h::mpc" ref="a849bb72e04e6eddb7fe7165025d02baa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcapability__mp__data.html">capability_mp_data</a> <a class="el" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00049">49</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab4570498c4316aa5f7b4852c778b3320"></a><!-- doxytag: member="bgp_open.h::num" ref="ab4570498c4316aa5f7b4852c778b3320" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char <a class="el" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00050">50</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
<a class="anchor" id="afcd1c35dbfa566fb2186e772c34583f1"></a><!-- doxytag: member="bgp_open.h::orfs" ref="afcd1c35dbfa566fb2186e772c34583f1" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct { ... }   <a class="el" href="bgp__open_8h.html#afcd1c35dbfa566fb2186e772c34583f1">orfs</a>[]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abbb4c0b967acba158c34c110d81b3ab4"></a><!-- doxytag: member="bgp_open.h::type" ref="abbb4c0b967acba158c34c110d81b3ab4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8h_source.html#l00052">52</a> of file <a class="el" href="bgp__open_8h_source.html">bgp_open.h</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__open_8h.html">bgp_open.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:12 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
