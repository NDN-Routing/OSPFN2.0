<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_route.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__route_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_route.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__route_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP routing information</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1996, 97, 98, 99 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="filter_8h.html">filter.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="str_8h.html">str.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="routemap_8h.html">routemap.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="buffer_8h.html">buffer.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="plist_8h.html">plist.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="workqueue_8h.html">workqueue.h</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="bgp__table_8h.html">bgpd/bgp_table.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="bgp__regex_8h.html">bgpd/bgp_regex.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="bgp__community_8h.html">bgpd/bgp_community.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="bgp__ecommunity_8h.html">bgpd/bgp_ecommunity.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="bgp__clist_8h.html">bgpd/bgp_clist.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="bgp__packet_8h.html">bgpd/bgp_packet.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="bgp__filter_8h.html">bgpd/bgp_filter.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="bgp__fsm_8h.html">bgpd/bgp_fsm.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="bgp__mplsvpn_8h.html">bgpd/bgp_mplsvpn.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="bgp__nexthop_8h.html">bgpd/bgp_nexthop.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="bgp__damp_8h.html">bgpd/bgp_damp.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="bgp__advertise_8h.html">bgpd/bgp_advertise.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="bgp__zebra_8h.html">bgpd/bgp_zebra.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="bgp__vty_8h.html">bgpd/bgp_vty.h</a>&quot;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">/* Extern from bgp_dump.c */</span>
<a name="l00059"></a>00059 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="bgp__debug_8c.html#ab1c6c37df170ace398e3657b5df5ba6f">bgp_origin_str</a>[];
<a name="l00060"></a>00060 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="bgp__debug_8c.html#a7123f83b15faa017071a458140399e7c">bgp_origin_long_str</a>[];
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *
<a name="l00063"></a><a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">00063</a> <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l00064"></a>00064           <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd)
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00067"></a>00067   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00068"></a>00068   
<a name="l00069"></a>00069   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (table);
<a name="l00070"></a>00070   <span class="keywordflow">if</span> (!table)
<a name="l00071"></a>00071     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00072"></a>00072   
<a name="l00073"></a>00073   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075       prn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) prd);
<a name="l00076"></a>00076 
<a name="l00077"></a>00077       <span class="keywordflow">if</span> (prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00078"></a>00078     prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
<a name="l00079"></a>00079       <span class="keywordflow">else</span>
<a name="l00080"></a>00080     <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (prn);
<a name="l00081"></a>00081       table = prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00087"></a>00087     rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a> = <a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="keywordflow">return</span> rn;
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">/* Allocate bgp_info_extra */</span>
<a name="l00093"></a>00093 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__info__extra.html">bgp_info_extra</a> *
<a name="l00094"></a><a class="code" href="bgp__route_8c.html#a87ee6a929c17bd9186e7125d5670a309">00094</a> <a class="code" href="bgp__route_8c.html#a87ee6a929c17bd9186e7125d5670a309">bgp_info_extra_new</a> (<span class="keywordtype">void</span>)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096   <span class="keyword">struct </span><a class="code" href="structbgp__info__extra.html">bgp_info_extra</a> *<span class="keyword">new</span>;
<a name="l00097"></a>00097   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab9cfb57c75ebf2bfda3cc221c16e10eb">MTYPE_BGP_ROUTE_EXTRA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__info__extra.html">bgp_info_extra</a>));
<a name="l00098"></a>00098   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00102"></a><a class="code" href="bgp__route_8c.html#a757f441d0a803a7bbc6bc79dfa3200bd">00102</a> <a class="code" href="bgp__route_8c.html#a757f441d0a803a7bbc6bc79dfa3200bd">bgp_info_extra_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info__extra.html">bgp_info_extra</a> **extra)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104   <span class="keywordflow">if</span> (extra &amp;&amp; *extra)
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106       <span class="keywordflow">if</span> ((*extra)-&gt;damp_info)
<a name="l00107"></a>00107         <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> ((*extra)-&gt;damp_info, 0);
<a name="l00108"></a>00108       
<a name="l00109"></a>00109       (*extra)-&gt;damp_info = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00110"></a>00110       
<a name="l00111"></a>00111       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab9cfb57c75ebf2bfda3cc221c16e10eb">MTYPE_BGP_ROUTE_EXTRA</a>, *extra);
<a name="l00112"></a>00112       
<a name="l00113"></a>00113       *extra = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">/* Get bgp_info extra information for the given bgp_info, lazy allocated</span>
<a name="l00118"></a>00118 <span class="comment"> * if required.</span>
<a name="l00119"></a>00119 <span class="comment"> */</span>
<a name="l00120"></a>00120 <span class="keyword">struct </span><a class="code" href="structbgp__info__extra.html">bgp_info_extra</a> *
<a name="l00121"></a><a class="code" href="bgp__route_8h.html#a3636e4f4e5593b053bd4de054972ae11">00121</a> <a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123   <span class="keywordflow">if</span> (!ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00124"></a>00124     ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> = <a class="code" href="bgp__route_8c.html#a87ee6a929c17bd9186e7125d5670a309">bgp_info_extra_new</a>();
<a name="l00125"></a>00125   <span class="keywordflow">return</span> ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">/* Allocate new bgp info structure. */</span>
<a name="l00129"></a>00129 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *
<a name="l00130"></a><a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">00130</a> <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> (<span class="keywordtype">void</span>)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba98916f4c0d0008ff888391232d47d31a">MTYPE_BGP_ROUTE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a>));
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">/* Free bgp route information. */</span>
<a name="l00136"></a>00136 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00137"></a><a class="code" href="bgp__route_8c.html#a5f6151beff24268f62320f62df673be2">00137</a> <a class="code" href="bgp__route_8c.html#a5f6151beff24268f62320f62df673be2">bgp_info_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo)
<a name="l00138"></a>00138 {
<a name="l00139"></a>00139   <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>)
<a name="l00140"></a>00140     <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l00141"></a>00141   
<a name="l00142"></a>00142   <a class="code" href="bgp__route_8c.html#a757f441d0a803a7bbc6bc79dfa3200bd">bgp_info_extra_free</a> (&amp;binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>); <span class="comment">/* bgp_info peer reference */</span>
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba98916f4c0d0008ff888391232d47d31a">MTYPE_BGP_ROUTE</a>, binfo);
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *
<a name="l00150"></a><a class="code" href="bgp__route_8h.html#a659c82db6cce309f5b40eb1aff360ea6">00150</a> <a class="code" href="bgp__route_8c.html#a58d087602593301ee3256a1ffd1321b8">bgp_info_lock</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo)
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152   binfo-&gt;<a class="code" href="structbgp__info.html#a0bd502e73cab1b70ed893edffd9977cc">lock</a>++;
<a name="l00153"></a>00153   <span class="keywordflow">return</span> binfo;
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *
<a name="l00157"></a><a class="code" href="bgp__route_8h.html#a08aecc5ca9b3d1055fcc1de43226d891">00157</a> <a class="code" href="bgp__route_8c.html#a3616cc85cfe85d5f7911aa6f10f03eea">bgp_info_unlock</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo)
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (binfo &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#a0bd502e73cab1b70ed893edffd9977cc">lock</a> &gt; 0);
<a name="l00160"></a>00160   binfo-&gt;<a class="code" href="structbgp__info.html#a0bd502e73cab1b70ed893edffd9977cc">lock</a>--;
<a name="l00161"></a>00161   
<a name="l00162"></a>00162   <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a0bd502e73cab1b70ed893edffd9977cc">lock</a> == 0)
<a name="l00163"></a>00163     {
<a name="l00164"></a>00164 <span class="preprocessor">#if 0</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: unlocked and freeing&quot;</span>, __func__);
<a name="l00166"></a>00166       <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
<a name="l00167"></a>00167 <span class="preprocessor">#endif</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span>      <a class="code" href="bgp__route_8c.html#a5f6151beff24268f62320f62df673be2">bgp_info_free</a> (binfo);
<a name="l00169"></a>00169       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="preprocessor">#if 0</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a0bd502e73cab1b70ed893edffd9977cc">lock</a> == 1)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: unlocked to 1&quot;</span>, __func__);
<a name="l00176"></a>00176       <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 <span class="preprocessor">#endif</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>  
<a name="l00180"></a>00180   <span class="keywordflow">return</span> binfo;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="keywordtype">void</span>
<a name="l00184"></a><a class="code" href="bgp__route_8h.html#ac7472ce06f993cd544f794c7b0381954">00184</a> <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *top;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   top = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00189"></a>00189   
<a name="l00190"></a>00190   ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a> = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00191"></a>00191   ri-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00192"></a>00192   <span class="keywordflow">if</span> (top)
<a name="l00193"></a>00193     top-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a> = ri;
<a name="l00194"></a>00194   rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = ri;
<a name="l00195"></a>00195   
<a name="l00196"></a>00196   <a class="code" href="bgp__route_8c.html#a58d087602593301ee3256a1ffd1321b8">bgp_info_lock</a> (ri);
<a name="l00197"></a>00197   <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
<a name="l00198"></a>00198   <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>); <span class="comment">/* bgp_info peer reference */</span>
<a name="l00199"></a>00199 }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="comment">/* Do the actual removal of info from RIB, for use by bgp_process </span>
<a name="l00202"></a>00202 <span class="comment">   completion callback *only* */</span>
<a name="l00203"></a>00203 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00204"></a><a class="code" href="bgp__route_8c.html#a4475c3919634039951683b34a18b1dee">00204</a> <a class="code" href="bgp__route_8c.html#a4475c3919634039951683b34a18b1dee">bgp_info_reap</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00205"></a>00205 {
<a name="l00206"></a>00206   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l00207"></a>00207     ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a> = ri-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a>;
<a name="l00208"></a>00208   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a>)
<a name="l00209"></a>00209     ri-&gt;<a class="code" href="structbgp__info.html#aa0fdbfcd4a2876a68a4476136b01fe3b">prev</a>-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a> = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l00210"></a>00210   <span class="keywordflow">else</span>
<a name="l00211"></a>00211     rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l00212"></a>00212   
<a name="l00213"></a>00213   <a class="code" href="bgp__route_8c.html#a3616cc85cfe85d5f7911aa6f10f03eea">bgp_info_unlock</a> (ri);
<a name="l00214"></a>00214   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="keywordtype">void</span>
<a name="l00218"></a><a class="code" href="bgp__route_8h.html#abfe260239e1b72a286e9c45a5aa1afbd">00218</a> <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00219"></a>00219 {
<a name="l00220"></a>00220   <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>);
<a name="l00221"></a>00221   <span class="comment">/* set of previous already took care of pcount */</span>
<a name="l00222"></a>00222   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l00223"></a>00223 }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="comment">/* undo the effects of a previous call to bgp_info_delete; typically</span>
<a name="l00226"></a>00226 <span class="comment">   called when a route is deleted and then quickly re-added before the</span>
<a name="l00227"></a>00227 <span class="comment">   deletion has been processed */</span>
<a name="l00228"></a>00228 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00229"></a><a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">00229</a> <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00230"></a>00230 {
<a name="l00231"></a>00231   <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>);
<a name="l00232"></a>00232   <span class="comment">/* unset of previous already took care of pcount */</span>
<a name="l00233"></a>00233   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l00234"></a>00234 }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 <span class="comment">/* Adjust pcount as required */</span>   
<a name="l00237"></a>00237 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00238"></a><a class="code" href="bgp__route_8c.html#af45d15e7f24645ea70bf8f3c8250921d">00238</a> <a class="code" href="bgp__route_8c.html#af45d15e7f24645ea70bf8f3c8250921d">bgp_pcount_adjust</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri)
<a name="l00239"></a>00239 {
<a name="l00240"></a>00240   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>);
<a name="l00241"></a>00241   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ri &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>);
<a name="l00242"></a>00242 
<a name="l00243"></a>00243   <span class="comment">/* Ignore &#39;pcount&#39; for RS-client tables */</span>
<a name="l00244"></a>00244   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5099bb3c9ff5831a90846db78724e652">type</a> != <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>
<a name="l00245"></a>00245       || ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>)
<a name="l00246"></a>00246     <span class="keywordflow">return</span>;
<a name="l00247"></a>00247     
<a name="l00248"></a>00248   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri)
<a name="l00249"></a>00249       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aff6e02f7d4d370e90e7eba7323b7f335">BGP_INFO_COUNTED</a>))
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251           
<a name="l00252"></a>00252       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aff6e02f7d4d370e90e7eba7323b7f335">BGP_INFO_COUNTED</a>);
<a name="l00253"></a>00253       
<a name="l00254"></a>00254       <span class="comment">/* slight hack, but more robust against errors. */</span>
<a name="l00255"></a>00255       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>])
<a name="l00256"></a>00256         ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>]--;
<a name="l00257"></a>00257       <span class="keywordflow">else</span>
<a name="l00258"></a>00258         {
<a name="l00259"></a>00259           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: Asked to decrement 0 prefix count for peer %s&quot;</span>,
<a name="l00260"></a>00260                      __func__, ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00261"></a>00261           <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_WARNING);
<a name="l00262"></a>00262           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: Please report to Quagga bugzilla&quot;</span>, __func__);
<a name="l00263"></a>00263         }      
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri) 
<a name="l00266"></a>00266            &amp;&amp; !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aff6e02f7d4d370e90e7eba7323b7f335">BGP_INFO_COUNTED</a>))
<a name="l00267"></a>00267     {
<a name="l00268"></a>00268       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aff6e02f7d4d370e90e7eba7323b7f335">BGP_INFO_COUNTED</a>);
<a name="l00269"></a>00269       ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>]++;
<a name="l00270"></a>00270     }
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 <span class="comment">/* Set/unset bgp_info flags, adjusting any other state as needed.</span>
<a name="l00275"></a>00275 <span class="comment"> * This is here primarily to keep prefix-count in check.</span>
<a name="l00276"></a>00276 <span class="comment"> */</span>
<a name="l00277"></a>00277 <span class="keywordtype">void</span>
<a name="l00278"></a><a class="code" href="bgp__route_8h.html#ae5eb4de33b827eb9901877a609e2a41e">00278</a> <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, u_int32_t flag)
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, flag);
<a name="l00281"></a>00281   
<a name="l00282"></a>00282   <span class="comment">/* early bath if we know it&#39;s not a flag that changes useability state */</span>
<a name="l00283"></a>00283   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>|<a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l00284"></a>00284     <span class="keywordflow">return</span>;
<a name="l00285"></a>00285   
<a name="l00286"></a>00286   <a class="code" href="bgp__route_8c.html#af45d15e7f24645ea70bf8f3c8250921d">bgp_pcount_adjust</a> (rn, ri);
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 <span class="keywordtype">void</span>
<a name="l00290"></a><a class="code" href="bgp__route_8h.html#aa0b07d2d5f1e2f1f8bfccedb2f4d19af">00290</a> <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, u_int32_t flag)
<a name="l00291"></a>00291 {
<a name="l00292"></a>00292   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, flag);
<a name="l00293"></a>00293   
<a name="l00294"></a>00294   <span class="comment">/* early bath if we know it&#39;s not a flag that changes useability state */</span>
<a name="l00295"></a>00295   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>|<a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l00296"></a>00296     <span class="keywordflow">return</span>;
<a name="l00297"></a>00297   
<a name="l00298"></a>00298   <a class="code" href="bgp__route_8c.html#af45d15e7f24645ea70bf8f3c8250921d">bgp_pcount_adjust</a> (rn, ri);
<a name="l00299"></a>00299 }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="comment">/* Get MED value.  If MED value is missing and &quot;bgp bestpath</span>
<a name="l00302"></a>00302 <span class="comment">   missing-as-worst&quot; is specified, treat it as the worst value. */</span>
<a name="l00303"></a>00303 <span class="keyword">static</span> u_int32_t
<a name="l00304"></a><a class="code" href="bgp__route_8c.html#a58dff46a744315de3961a85990be81c9">00304</a> <a class="code" href="bgp__route_8c.html#a58dff46a744315de3961a85990be81c9">bgp_med_value</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l00307"></a>00307     <span class="keywordflow">return</span> attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
<a name="l00308"></a>00308   <span class="keywordflow">else</span>
<a name="l00309"></a>00309     {
<a name="l00310"></a>00310       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#af7ddec77890c22a31bb91af392832b15">BGP_FLAG_MED_MISSING_AS_WORST</a>))
<a name="l00311"></a>00311     <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8h.html#afd4e8f98deac933c51048df75bf14c22">BGP_MED_MAX</a>;
<a name="l00312"></a>00312       <span class="keywordflow">else</span>
<a name="l00313"></a>00313     <span class="keywordflow">return</span> 0;
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="comment">/* Compare two bgp route entity.  br is preferable then return 1. */</span>
<a name="l00318"></a>00318 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00319"></a><a class="code" href="bgp__route_8c.html#adb9d04630ab93d7aee4950ee2a1b0ead">00319</a> <a class="code" href="bgp__route_8c.html#adb9d04630ab93d7aee4950ee2a1b0ead">bgp_info_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *exist)
<a name="l00320"></a>00320 {
<a name="l00321"></a>00321   u_int32_t new_pref;
<a name="l00322"></a>00322   u_int32_t exist_pref;
<a name="l00323"></a>00323   u_int32_t new_med;
<a name="l00324"></a>00324   u_int32_t exist_med;
<a name="l00325"></a>00325   u_int32_t new_weight = 0;
<a name="l00326"></a>00326   u_int32_t exist_weight = 0;
<a name="l00327"></a>00327   <span class="keyword">struct </span>in_addr new_id;
<a name="l00328"></a>00328   <span class="keyword">struct </span>in_addr exist_id;
<a name="l00329"></a>00329   <span class="keywordtype">int</span> new_cluster;
<a name="l00330"></a>00330   <span class="keywordtype">int</span> exist_cluster;
<a name="l00331"></a>00331   <span class="keywordtype">int</span> internal_as_route = 0;
<a name="l00332"></a>00332   <span class="keywordtype">int</span> confed_as_route = 0;
<a name="l00333"></a>00333   <span class="keywordtype">int</span> ret;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="comment">/* 0. Null check. */</span>
<a name="l00336"></a>00336   <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00337"></a>00337     <span class="keywordflow">return</span> 0;
<a name="l00338"></a>00338   <span class="keywordflow">if</span> (exist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00339"></a>00339     <span class="keywordflow">return</span> 1;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341   <span class="comment">/* 1. Weight check. */</span>
<a name="l00342"></a>00342   <span class="keywordflow">if</span> (new-&gt;attr-&gt;extra)
<a name="l00343"></a>00343     new_weight = <span class="keyword">new</span>-&gt;attr-&gt;extra-&gt;weight;
<a name="l00344"></a>00344   <span class="keywordflow">if</span> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00345"></a>00345     exist_weight = exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>;
<a name="l00346"></a>00346   <span class="keywordflow">if</span> (new_weight &gt; exist_weight)
<a name="l00347"></a>00347     <span class="keywordflow">return</span> 1;
<a name="l00348"></a>00348   <span class="keywordflow">if</span> (new_weight &lt; exist_weight)
<a name="l00349"></a>00349     <span class="keywordflow">return</span> 0;
<a name="l00350"></a>00350 
<a name="l00351"></a>00351   <span class="comment">/* 2. Local preference check. */</span>
<a name="l00352"></a>00352   <span class="keywordflow">if</span> (new-&gt;attr-&gt;flag &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l00353"></a>00353     new_pref = <span class="keyword">new</span>-&gt;attr-&gt;local_pref;
<a name="l00354"></a>00354   <span class="keywordflow">else</span>
<a name="l00355"></a>00355     new_pref = bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>;
<a name="l00356"></a>00356 
<a name="l00357"></a>00357   <span class="keywordflow">if</span> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l00358"></a>00358     exist_pref = exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>;
<a name="l00359"></a>00359   <span class="keywordflow">else</span>
<a name="l00360"></a>00360     exist_pref = bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>;
<a name="l00361"></a>00361     
<a name="l00362"></a>00362   <span class="keywordflow">if</span> (new_pref &gt; exist_pref)
<a name="l00363"></a>00363     <span class="keywordflow">return</span> 1;
<a name="l00364"></a>00364   <span class="keywordflow">if</span> (new_pref &lt; exist_pref)
<a name="l00365"></a>00365     <span class="keywordflow">return</span> 0;
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   <span class="comment">/* 3. Local route check. */</span>
<a name="l00368"></a>00368   <span class="keywordflow">if</span> (new-&gt;sub_type == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l00369"></a>00369     <span class="keywordflow">return</span> 1;
<a name="l00370"></a>00370   <span class="keywordflow">if</span> (exist-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l00371"></a>00371     <span class="keywordflow">return</span> 0;
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <span class="keywordflow">if</span> (new-&gt;sub_type == <a class="code" href="bgp__route_8h.html#a0e973ed2530863b634c03e48637ce7b0">BGP_ROUTE_REDISTRIBUTE</a>)
<a name="l00374"></a>00374     <span class="keywordflow">return</span> 1;
<a name="l00375"></a>00375   <span class="keywordflow">if</span> (exist-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a0e973ed2530863b634c03e48637ce7b0">BGP_ROUTE_REDISTRIBUTE</a>)
<a name="l00376"></a>00376     <span class="keywordflow">return</span> 0;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (new-&gt;sub_type == <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l00379"></a>00379     <span class="keywordflow">return</span> 1;
<a name="l00380"></a>00380   <span class="keywordflow">if</span> (exist-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l00381"></a>00381     <span class="keywordflow">return</span> 0;
<a name="l00382"></a>00382 
<a name="l00383"></a>00383   <span class="comment">/* 4. AS path length check. */</span>
<a name="l00384"></a>00384   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a1c9218156b20a2a0641bdd096fed76c0">BGP_FLAG_ASPATH_IGNORE</a>))
<a name="l00385"></a>00385     {
<a name="l00386"></a>00386       <span class="keywordtype">int</span> exist_hops = <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00387"></a>00387       <span class="keywordtype">int</span> exist_confeds = <a class="code" href="bgp__aspath_8c.html#a8638c553cd3d2c87161aa489ea0a45d7">aspath_count_confeds</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00388"></a>00388       
<a name="l00389"></a>00389       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a2daf5bdb7e1c87887b425c4f138d49f6">BGP_FLAG_ASPATH_CONFED</a>))
<a name="l00390"></a>00390     {
<a name="l00391"></a>00391       <span class="keywordtype">int</span> aspath_hops;
<a name="l00392"></a>00392       
<a name="l00393"></a>00393       aspath_hops = <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (new-&gt;attr-&gt;aspath);
<a name="l00394"></a>00394           aspath_hops += <a class="code" href="bgp__aspath_8c.html#a8638c553cd3d2c87161aa489ea0a45d7">aspath_count_confeds</a> (new-&gt;attr-&gt;aspath);
<a name="l00395"></a>00395           
<a name="l00396"></a>00396       <span class="keywordflow">if</span> ( aspath_hops &lt; (exist_hops + exist_confeds))
<a name="l00397"></a>00397         <span class="keywordflow">return</span> 1;
<a name="l00398"></a>00398       <span class="keywordflow">if</span> ( aspath_hops &gt; (exist_hops + exist_confeds))
<a name="l00399"></a>00399         <span class="keywordflow">return</span> 0;
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401       <span class="keywordflow">else</span>
<a name="l00402"></a>00402     {
<a name="l00403"></a>00403       <span class="keywordtype">int</span> newhops = <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (new-&gt;attr-&gt;aspath);
<a name="l00404"></a>00404       
<a name="l00405"></a>00405       <span class="keywordflow">if</span> (newhops &lt; exist_hops)
<a name="l00406"></a>00406         <span class="keywordflow">return</span> 1;
<a name="l00407"></a>00407           <span class="keywordflow">if</span> (newhops &gt; exist_hops)
<a name="l00408"></a>00408         <span class="keywordflow">return</span> 0;
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410     }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <span class="comment">/* 5. Origin check. */</span>
<a name="l00413"></a>00413   <span class="keywordflow">if</span> (new-&gt;attr-&gt;origin &lt; exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l00414"></a>00414     <span class="keywordflow">return</span> 1;
<a name="l00415"></a>00415   <span class="keywordflow">if</span> (new-&gt;attr-&gt;origin &gt; exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l00416"></a>00416     <span class="keywordflow">return</span> 0;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   <span class="comment">/* 6. MED check. */</span>
<a name="l00419"></a>00419   internal_as_route = (<a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (new-&gt;attr-&gt;aspath) == 0
<a name="l00420"></a>00420               &amp;&amp; <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) == 0);
<a name="l00421"></a>00421   confed_as_route = (<a class="code" href="bgp__aspath_8c.html#a8638c553cd3d2c87161aa489ea0a45d7">aspath_count_confeds</a> (new-&gt;attr-&gt;aspath) &gt; 0
<a name="l00422"></a>00422             &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a8638c553cd3d2c87161aa489ea0a45d7">aspath_count_confeds</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) &gt; 0
<a name="l00423"></a>00423             &amp;&amp; <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (new-&gt;attr-&gt;aspath) == 0
<a name="l00424"></a>00424             &amp;&amp; <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) == 0);
<a name="l00425"></a>00425   
<a name="l00426"></a>00426   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a89cb4c8d9453fb88c6360ea5f8dd7075">BGP_FLAG_ALWAYS_COMPARE_MED</a>)
<a name="l00427"></a>00427       || (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abdc54bbffd7bff820138d5e671e70efa">BGP_FLAG_MED_CONFED</a>)
<a name="l00428"></a>00428      &amp;&amp; confed_as_route)
<a name="l00429"></a>00429       || <a class="code" href="bgp__aspath_8c.html#a5f979a1ff3bc3908684e4592e5c383eb">aspath_cmp_left</a> (new-&gt;attr-&gt;aspath, exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l00430"></a>00430       || <a class="code" href="bgp__aspath_8c.html#ace7eb37e6ea088fb0ea82c9ae4c58375">aspath_cmp_left_confed</a> (new-&gt;attr-&gt;aspath, exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l00431"></a>00431       || internal_as_route)
<a name="l00432"></a>00432     {
<a name="l00433"></a>00433       new_med = <a class="code" href="bgp__route_8c.html#a58dff46a744315de3961a85990be81c9">bgp_med_value</a> (new-&gt;attr, bgp);
<a name="l00434"></a>00434       exist_med = <a class="code" href="bgp__route_8c.html#a58dff46a744315de3961a85990be81c9">bgp_med_value</a> (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, bgp);
<a name="l00435"></a>00435 
<a name="l00436"></a>00436       <span class="keywordflow">if</span> (new_med &lt; exist_med)
<a name="l00437"></a>00437     <span class="keywordflow">return</span> 1;
<a name="l00438"></a>00438       <span class="keywordflow">if</span> (new_med &gt; exist_med)
<a name="l00439"></a>00439     <span class="keywordflow">return</span> 0;
<a name="l00440"></a>00440     }
<a name="l00441"></a>00441 
<a name="l00442"></a>00442   <span class="comment">/* 7. Peer type check. */</span>
<a name="l00443"></a>00443   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (new-&gt;peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
<a name="l00444"></a>00444       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00445"></a>00445     <span class="keywordflow">return</span> 1;
<a name="l00446"></a>00446   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (new-&gt;peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
<a name="l00447"></a>00447       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l00448"></a>00448     <span class="keywordflow">return</span> 1;
<a name="l00449"></a>00449   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (new-&gt;peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
<a name="l00450"></a>00450       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00451"></a>00451     <span class="keywordflow">return</span> 0;
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (new-&gt;peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a> 
<a name="l00453"></a>00453       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00454"></a>00454     <span class="keywordflow">return</span> 0;
<a name="l00455"></a>00455 
<a name="l00456"></a>00456   <span class="comment">/* 8. IGP metric check. */</span>
<a name="l00457"></a>00457   <span class="keywordflow">if</span> (new-&gt;extra || exist-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00458"></a>00458     {
<a name="l00459"></a>00459       uint32_t newm = (<span class="keyword">new</span>-&gt;extra ? <span class="keyword">new</span>-&gt;extra-&gt;igpmetric : 0);
<a name="l00460"></a>00460       uint32_t existm = (exist-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> ? exist-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> : 0);
<a name="l00461"></a>00461       
<a name="l00462"></a>00462       <span class="keywordflow">if</span> (newm &lt; existm)
<a name="l00463"></a>00463         <span class="keywordflow">return</span> 1;
<a name="l00464"></a>00464       <span class="keywordflow">if</span> (newm &gt; existm)
<a name="l00465"></a>00465         <span class="keywordflow">return</span> 0;
<a name="l00466"></a>00466     }
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="comment">/* 9. Maximum path check. */</span>
<a name="l00469"></a>00469 
<a name="l00470"></a>00470   <span class="comment">/* 10. If both paths are external, prefer the path that was received</span>
<a name="l00471"></a>00471 <span class="comment">     first (the oldest one).  This step minimizes route-flap, since a</span>
<a name="l00472"></a>00472 <span class="comment">     newer path won&#39;t displace an older one, even if it was the</span>
<a name="l00473"></a>00473 <span class="comment">     preferred route based on the additional decision criteria below.  */</span>
<a name="l00474"></a>00474   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab508173624f08e35b426cb4f97af55f7">BGP_FLAG_COMPARE_ROUTER_ID</a>)
<a name="l00475"></a>00475       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (new-&gt;peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l00476"></a>00476       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00477"></a>00477     {
<a name="l00478"></a>00478       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l00479"></a>00479     <span class="keywordflow">return</span> 1;
<a name="l00480"></a>00480       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (exist-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l00481"></a>00481     <span class="keywordflow">return</span> 0;
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="comment">/* 11. Rourter-ID comparision. */</span>
<a name="l00485"></a>00485   <span class="keywordflow">if</span> (new-&gt;attr-&gt;flag &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l00486"></a>00486     new_id.s_addr = new-&gt;attr-&gt;extra-&gt;originator_id.s_addr;
<a name="l00487"></a>00487   <span class="keywordflow">else</span>
<a name="l00488"></a>00488     new_id.s_addr = new-&gt;peer-&gt;remote_id.s_addr;
<a name="l00489"></a>00489   if (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l00490"></a>00490     exist_id.s_addr = exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>.s_addr;
<a name="l00491"></a>00491   <span class="keywordflow">else</span>
<a name="l00492"></a>00492     exist_id.s_addr = exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>.s_addr;
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   if (ntohl (new_id.s_addr) &lt; ntohl (exist_id.s_addr))
<a name="l00495"></a>00495     <span class="keywordflow">return</span> 1;
<a name="l00496"></a>00496   <span class="keywordflow">if</span> (ntohl (new_id.s_addr) &gt; ntohl (exist_id.s_addr))
<a name="l00497"></a>00497     <span class="keywordflow">return</span> 0;
<a name="l00498"></a>00498 
<a name="l00499"></a>00499   <span class="comment">/* 12. Cluster length comparision. */</span>
<a name="l00500"></a>00500   <span class="keywordflow">if</span> (new-&gt;attr-&gt;flag &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>))
<a name="l00501"></a>00501     new_cluster = new-&gt;attr-&gt;extra-&gt;cluster-&gt;length;
<a name="l00502"></a>00502   <span class="keywordflow">else</span>
<a name="l00503"></a>00503     new_cluster = 0;
<a name="l00504"></a>00504   if (exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>))
<a name="l00505"></a>00505     exist_cluster = exist-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;
<a name="l00506"></a>00506   <span class="keywordflow">else</span>
<a name="l00507"></a>00507     exist_cluster = 0;
<a name="l00508"></a>00508 
<a name="l00509"></a>00509   if (new_cluster &lt; exist_cluster)
<a name="l00510"></a>00510     <span class="keywordflow">return</span> 1;
<a name="l00511"></a>00511   <span class="keywordflow">if</span> (new_cluster &gt; exist_cluster)
<a name="l00512"></a>00512     <span class="keywordflow">return</span> 0;
<a name="l00513"></a>00513 
<a name="l00514"></a>00514   <span class="comment">/* 13. Neighbor address comparision. */</span>
<a name="l00515"></a>00515   ret = <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (new-&gt;peer-&gt;su_remote, exist-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>);
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   <span class="keywordflow">if</span> (ret == 1)
<a name="l00518"></a>00518     <span class="keywordflow">return</span> 0;
<a name="l00519"></a>00519   <span class="keywordflow">if</span> (ret == -1)
<a name="l00520"></a>00520     <span class="keywordflow">return</span> 1;
<a name="l00521"></a>00521 
<a name="l00522"></a>00522   <span class="keywordflow">return</span> 1;
<a name="l00523"></a>00523 }
<a name="l00524"></a>00524 
<a name="l00525"></a>00525 <span class="keyword">static</span> <span class="keyword">enum</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72">filter_type</a>
<a name="l00526"></a><a class="code" href="bgp__route_8c.html#a779dd558c9e37130d6ac9029b74cdf12">00526</a> <a class="code" href="bgp__route_8c.html#a779dd558c9e37130d6ac9029b74cdf12">bgp_input_filter</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l00527"></a>00527           <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00528"></a>00528 {
<a name="l00529"></a>00529   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00530"></a>00530 
<a name="l00531"></a>00531   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00532"></a>00532 
<a name="l00533"></a>00533 <span class="preprocessor">#define FILTER_EXIST_WARN(F,f,filter) \</span>
<a name="l00534"></a>00534 <span class="preprocessor">  if (BGP_DEBUG (update, UPDATE_IN) \</span>
<a name="l00535"></a>00535 <span class="preprocessor">      &amp;&amp; !(F ## _IN (filter))) \</span>
<a name="l00536"></a>00536 <span class="preprocessor">    plog_warn (peer-&gt;log, &quot;%s: Could not find configured input %s-list %s!&quot;, \</span>
<a name="l00537"></a>00537 <span class="preprocessor">               peer-&gt;host, #f, F ## _IN_NAME(filter));</span>
<a name="l00538"></a>00538 <span class="preprocessor"></span>  
<a name="l00539"></a>00539   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#adde5be7d0e3ee93b4cbcdc35c20dcf14">DISTRIBUTE_IN_NAME</a> (filter)) {
<a name="l00540"></a>00540     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(DISTRIBUTE, <a class="code" href="structdistribute.html">distribute</a>, filter);
<a name="l00541"></a>00541       
<a name="l00542"></a>00542     <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a> (filter), p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00543"></a>00543       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00544"></a>00544   }
<a name="l00545"></a>00545 
<a name="l00546"></a>00546   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a633cce0e1ccfb302dd012ef0286ec75a">PREFIX_LIST_IN_NAME</a> (filter)) {
<a name="l00547"></a>00547     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(PREFIX_LIST, <a class="code" href="structprefix.html">prefix</a>, filter);
<a name="l00548"></a>00548     
<a name="l00549"></a>00549     <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (<a class="code" href="bgp__route_8h.html#ad143503066e23e446015fc61ba2e72ed">PREFIX_LIST_IN</a> (filter), p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00550"></a>00550       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00551"></a>00551   }
<a name="l00552"></a>00552   
<a name="l00553"></a>00553   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51c6471831f36ab7819abac5582a83d2">FILTER_LIST_IN_NAME</a> (filter)) {
<a name="l00554"></a>00554     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(FILTER_LIST, as, filter);
<a name="l00555"></a>00555     
<a name="l00556"></a>00556     <span class="keywordflow">if</span> (<a class="code" href="bgp__filter_8c.html#a3c54cce31fdf945adf395324469658c5">as_list_apply</a> (<a class="code" href="bgp__route_8h.html#ae97bb21aa1bfa3da36fe31980b840098">FILTER_LIST_IN</a> (filter), attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)== <a class="code" href="bgp__filter_8h.html#a2e45819ce90a8f1b29bad627c87bef8ba5d37f9a4db61d8f7ef503e8582aba781">AS_FILTER_DENY</a>)
<a name="l00557"></a>00557       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00558"></a>00558   }
<a name="l00559"></a>00559   
<a name="l00560"></a>00560   <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a68ef3d4c373520eb5b085236bf4eeef8">FILTER_PERMIT</a>;
<a name="l00561"></a>00561 <span class="preprocessor">#undef FILTER_EXIST_WARN</span>
<a name="l00562"></a>00562 <span class="preprocessor"></span>}
<a name="l00563"></a>00563 
<a name="l00564"></a>00564 <span class="keyword">static</span> <span class="keyword">enum</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72">filter_type</a>
<a name="l00565"></a><a class="code" href="bgp__route_8c.html#a964b57dc2ca2170b988ca239878a9118">00565</a> <a class="code" href="bgp__route_8c.html#a964b57dc2ca2170b988ca239878a9118">bgp_output_filter</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l00566"></a>00566            <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00567"></a>00567 {
<a name="l00568"></a>00568   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00569"></a>00569 
<a name="l00570"></a>00570   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="preprocessor">#define FILTER_EXIST_WARN(F,f,filter) \</span>
<a name="l00573"></a>00573 <span class="preprocessor">  if (BGP_DEBUG (update, UPDATE_OUT) \</span>
<a name="l00574"></a>00574 <span class="preprocessor">      &amp;&amp; !(F ## _OUT (filter))) \</span>
<a name="l00575"></a>00575 <span class="preprocessor">    plog_warn (peer-&gt;log, &quot;%s: Could not find configured output %s-list %s!&quot;, \</span>
<a name="l00576"></a>00576 <span class="preprocessor">               peer-&gt;host, #f, F ## _OUT_NAME(filter));</span>
<a name="l00577"></a>00577 <span class="preprocessor"></span>
<a name="l00578"></a>00578   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#aa6a662c312c62895639e9bdb1acb86c4">DISTRIBUTE_OUT_NAME</a> (filter)) {
<a name="l00579"></a>00579     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(DISTRIBUTE, <a class="code" href="structdistribute.html">distribute</a>, filter);
<a name="l00580"></a>00580     
<a name="l00581"></a>00581     <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a> (filter), p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00582"></a>00582       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00583"></a>00583   }
<a name="l00584"></a>00584 
<a name="l00585"></a>00585   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a0b2a78984ce18b840dba34e64295c2cf">PREFIX_LIST_OUT_NAME</a> (filter)) {
<a name="l00586"></a>00586     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(PREFIX_LIST, <a class="code" href="structprefix.html">prefix</a>, filter);
<a name="l00587"></a>00587     
<a name="l00588"></a>00588     <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (<a class="code" href="bgp__route_8h.html#ab694ea0ccae4db3b7e858c2517e41480">PREFIX_LIST_OUT</a> (filter), p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00589"></a>00589       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00590"></a>00590   }
<a name="l00591"></a>00591 
<a name="l00592"></a>00592   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a806f03b22742b30b320bcb6bfdbbbb80">FILTER_LIST_OUT_NAME</a> (filter)) {
<a name="l00593"></a>00593     <a class="code" href="bgp__route_8c.html#aad2e59c9369c87c82dfa5675d8d07bd7">FILTER_EXIST_WARN</a>(FILTER_LIST, as, filter);
<a name="l00594"></a>00594     
<a name="l00595"></a>00595     <span class="keywordflow">if</span> (<a class="code" href="bgp__filter_8c.html#a3c54cce31fdf945adf395324469658c5">as_list_apply</a> (<a class="code" href="bgp__route_8h.html#aa5c389065b014b5737f4a216a708b361">FILTER_LIST_OUT</a> (filter), attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) == <a class="code" href="bgp__filter_8h.html#a2e45819ce90a8f1b29bad627c87bef8ba5d37f9a4db61d8f7ef503e8582aba781">AS_FILTER_DENY</a>)
<a name="l00596"></a>00596       <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>;
<a name="l00597"></a>00597   }
<a name="l00598"></a>00598 
<a name="l00599"></a>00599   <span class="keywordflow">return</span> <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a68ef3d4c373520eb5b085236bf4eeef8">FILTER_PERMIT</a>;
<a name="l00600"></a>00600 <span class="preprocessor">#undef FILTER_EXIST_WARN</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>}
<a name="l00602"></a>00602 
<a name="l00603"></a>00603 <span class="comment">/* If community attribute includes no_export then return 1. */</span>
<a name="l00604"></a>00604 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00605"></a><a class="code" href="bgp__route_8c.html#a52f73611e235740976722005ed9da75b">00605</a> <a class="code" href="bgp__route_8c.html#a52f73611e235740976722005ed9da75b">bgp_community_filter</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00606"></a>00606 {
<a name="l00607"></a>00607   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l00608"></a>00608     {
<a name="l00609"></a>00609       <span class="comment">/* NO_ADVERTISE check. */</span>
<a name="l00610"></a>00610       <span class="keywordflow">if</span> (<a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#ad48733d7ee618f0eb7371ca7300af9fc">COMMUNITY_NO_ADVERTISE</a>))
<a name="l00611"></a>00611     <span class="keywordflow">return</span> 1;
<a name="l00612"></a>00612 
<a name="l00613"></a>00613       <span class="comment">/* NO_EXPORT check. */</span>
<a name="l00614"></a>00614       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp;
<a name="l00615"></a>00615       <a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#a219dabc199faf8a9c3d75d8cccd2aa04">COMMUNITY_NO_EXPORT</a>))
<a name="l00616"></a>00616     <span class="keywordflow">return</span> 1;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618       <span class="comment">/* NO_EXPORT_SUBCONFED check. */</span>
<a name="l00619"></a>00619       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
<a name="l00620"></a>00620       || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l00621"></a>00621     <span class="keywordflow">if</span> (<a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#a689f5d1583f5815924638159de3d3832">COMMUNITY_NO_EXPORT_SUBCONFED</a>))
<a name="l00622"></a>00622       <span class="keywordflow">return</span> 1;
<a name="l00623"></a>00623     }
<a name="l00624"></a>00624   <span class="keywordflow">return</span> 0;
<a name="l00625"></a>00625 }
<a name="l00626"></a>00626 
<a name="l00627"></a>00627 <span class="comment">/* Route reflection loop check.  */</span>
<a name="l00628"></a>00628 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00629"></a><a class="code" href="bgp__route_8c.html#a7e09865b6ccdcb2325e714cffa6ed5f2">00629</a> <a class="code" href="bgp__route_8c.html#a7e09865b6ccdcb2325e714cffa6ed5f2">bgp_cluster_filter</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00630"></a>00630 {
<a name="l00631"></a>00631   <span class="keyword">struct </span>in_addr cluster_id;
<a name="l00632"></a>00632 
<a name="l00633"></a>00633   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
<a name="l00634"></a>00634     {
<a name="l00635"></a>00635       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
<a name="l00636"></a>00636     cluster_id = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>;
<a name="l00637"></a>00637       <span class="keywordflow">else</span>
<a name="l00638"></a>00638     cluster_id = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;
<a name="l00639"></a>00639       
<a name="l00640"></a>00640       <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#af224634d5d6d41781af26d88d9f3c85b">cluster_loop_check</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>, cluster_id))
<a name="l00641"></a>00641     <span class="keywordflow">return</span> 1;
<a name="l00642"></a>00642     }
<a name="l00643"></a>00643   <span class="keywordflow">return</span> 0;
<a name="l00644"></a>00644 }
<a name="l00645"></a>00645 
<a name="l00646"></a>00646 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00647"></a><a class="code" href="bgp__route_8c.html#a2f762007f1c8ecfd0a06a8430d1e0523">00647</a> <a class="code" href="bgp__route_8c.html#a2f762007f1c8ecfd0a06a8430d1e0523">bgp_input_modifier</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l00648"></a>00648             <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00649"></a>00649 {
<a name="l00650"></a>00650   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00651"></a>00651   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l00652"></a>00652   <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516">route_map_result_t</a> ret;
<a name="l00653"></a>00653 
<a name="l00654"></a>00654   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00655"></a>00655 
<a name="l00656"></a>00656   <span class="comment">/* Apply default weight value. */</span>
<a name="l00657"></a>00657   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>)
<a name="l00658"></a>00658     (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;weight = peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
<a name="l00659"></a>00659 
<a name="l00660"></a>00660   <span class="comment">/* Route map apply. */</span>
<a name="l00661"></a>00661   if (<a class="code" href="bgp__route_8h.html#a7ce451237d01fbec8276be12dd5355dc">ROUTE_MAP_IN_NAME</a> (filter))
<a name="l00662"></a>00662     {
<a name="l00663"></a>00663       <span class="comment">/* Duplicate current value to new strucutre for modification. */</span>
<a name="l00664"></a>00664       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = <a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l00665"></a>00665       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = <a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l00666"></a>00666 
<a name="l00667"></a>00667       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#ac0c69451f1b38928f7e90bbf7ea7f2df">PEER_RMAP_TYPE_IN</a>); 
<a name="l00668"></a>00668 
<a name="l00669"></a>00669       <span class="comment">/* Apply BGP route map to the attribute. */</span>
<a name="l00670"></a>00670       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#ac48b58884ad8f80b21a9e116ce3097f8">ROUTE_MAP_IN</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l00671"></a>00671 
<a name="l00672"></a>00672       peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l00673"></a>00673 
<a name="l00674"></a>00674       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l00675"></a>00675     {
<a name="l00676"></a>00676       <span class="comment">/* Free newly generated AS path and community by route-map. */</span>
<a name="l00677"></a>00677       <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (attr);
<a name="l00678"></a>00678       <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>;
<a name="l00679"></a>00679     }
<a name="l00680"></a>00680     }
<a name="l00681"></a>00681   <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644aa7d1859ac879fafcd59953ee1e27b134">RMAP_PERMIT</a>;
<a name="l00682"></a>00682 }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00685"></a><a class="code" href="bgp__route_8c.html#ad1c9f872f6253932e08bbc9d071f39c3">00685</a> <a class="code" href="bgp__route_8c.html#ad1c9f872f6253932e08bbc9d071f39c3">bgp_export_modifier</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l00686"></a>00686         <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00687"></a>00687 {
<a name="l00688"></a>00688   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00689"></a>00689   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l00690"></a>00690   <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516">route_map_result_t</a> ret;
<a name="l00691"></a>00691 
<a name="l00692"></a>00692   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   <span class="comment">/* Route map apply. */</span>
<a name="l00695"></a>00695   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a9a3b5d5b467eb3306b8399063dbaca05">ROUTE_MAP_EXPORT_NAME</a> (filter))
<a name="l00696"></a>00696     {
<a name="l00697"></a>00697       <span class="comment">/* Duplicate current value to new strucutre for modification. */</span>
<a name="l00698"></a>00698       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = rsclient;
<a name="l00699"></a>00699       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = <a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l00700"></a>00700 
<a name="l00701"></a>00701       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a5d239df7c366c66f144cac26eea3c7f9">PEER_RMAP_TYPE_EXPORT</a>);
<a name="l00702"></a>00702 
<a name="l00703"></a>00703       <span class="comment">/* Apply BGP route map to the attribute. */</span>
<a name="l00704"></a>00704       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#aee3fa611a841ec8c25ef28971e2c1791">ROUTE_MAP_EXPORT</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l00705"></a>00705 
<a name="l00706"></a>00706       rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l00707"></a>00707 
<a name="l00708"></a>00708       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l00709"></a>00709         {
<a name="l00710"></a>00710           <span class="comment">/* Free newly generated AS path and community by route-map. */</span>
<a name="l00711"></a>00711           <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (attr);
<a name="l00712"></a>00712           <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>;
<a name="l00713"></a>00713         }
<a name="l00714"></a>00714     }
<a name="l00715"></a>00715   <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644aa7d1859ac879fafcd59953ee1e27b134">RMAP_PERMIT</a>;
<a name="l00716"></a>00716 }
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00719"></a><a class="code" href="bgp__route_8c.html#a0b543935bc92b0cd8fa61813637f0179">00719</a> <a class="code" href="bgp__route_8c.html#a0b543935bc92b0cd8fa61813637f0179">bgp_import_modifier</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l00720"></a>00720         <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00721"></a>00721 {
<a name="l00722"></a>00722   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00723"></a>00723   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l00724"></a>00724   <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516">route_map_result_t</a> ret;
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   filter = &amp;rsclient-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00727"></a>00727 
<a name="l00728"></a>00728   <span class="comment">/* Apply default weight value. */</span>
<a name="l00729"></a>00729   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>)
<a name="l00730"></a>00730     (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;weight = peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
<a name="l00731"></a>00731 
<a name="l00732"></a>00732   <span class="comment">/* Route map apply. */</span>
<a name="l00733"></a>00733   if (<a class="code" href="bgp__route_8h.html#ab0211ed3cdec21a8ad4ea8b9329cbfdc">ROUTE_MAP_IMPORT_NAME</a> (filter))
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735       <span class="comment">/* Duplicate current value to new strucutre for modification. */</span>
<a name="l00736"></a>00736       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = <a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l00737"></a>00737       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = <a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l00738"></a>00738 
<a name="l00739"></a>00739       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a02dc8b409a25e5e440fd4f9b580fcdf7">PEER_RMAP_TYPE_IMPORT</a>);
<a name="l00740"></a>00740 
<a name="l00741"></a>00741       <span class="comment">/* Apply BGP route map to the attribute. */</span>
<a name="l00742"></a>00742       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#aaf7edc00b003acb19b6b2f48c6be6c02">ROUTE_MAP_IMPORT</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l00743"></a>00743 
<a name="l00744"></a>00744       peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l00745"></a>00745 
<a name="l00746"></a>00746       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l00747"></a>00747         {
<a name="l00748"></a>00748           <span class="comment">/* Free newly generated AS path and community by route-map. */</span>
<a name="l00749"></a>00749           <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (attr);
<a name="l00750"></a>00750           <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>;
<a name="l00751"></a>00751         }
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753   <span class="keywordflow">return</span> <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644aa7d1859ac879fafcd59953ee1e27b134">RMAP_PERMIT</a>;
<a name="l00754"></a>00754 }
<a name="l00755"></a>00755 
<a name="l00756"></a>00756 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00757"></a><a class="code" href="bgp__route_8c.html#a7a3b743168235f6f62a99f82c20fcdf1">00757</a> <a class="code" href="bgp__route_8c.html#a7a3b743168235f6f62a99f82c20fcdf1">bgp_announce_check</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l00758"></a>00758             <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00759"></a>00759 {
<a name="l00760"></a>00760   <span class="keywordtype">int</span> ret;
<a name="l00761"></a>00761   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l00762"></a>00762   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00763"></a>00763   <span class="keyword">struct </span>peer *from;
<a name="l00764"></a>00764   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l00765"></a>00765   <span class="keywordtype">int</span> transparent;
<a name="l00766"></a>00766   <span class="keywordtype">int</span> reflect;
<a name="l00767"></a>00767 
<a name="l00768"></a>00768   from = ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l00769"></a>00769   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00770"></a>00770   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l00771"></a>00771   
<a name="l00772"></a>00772   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l00773"></a>00773     <span class="keywordflow">return</span> 0;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775   <span class="comment">/* Do not send announces to RS-clients from the &#39;normal&#39; bgp_table. */</span>
<a name="l00776"></a>00776   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l00777"></a>00777     <span class="keywordflow">return</span> 0;
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   <span class="comment">/* Do not send back route to sender. */</span>
<a name="l00780"></a>00780   <span class="keywordflow">if</span> (from == peer)
<a name="l00781"></a>00781     <span class="keywordflow">return</span> 0;
<a name="l00782"></a>00782 
<a name="l00783"></a>00783   <span class="comment">/* If peer&#39;s id and route&#39;s nexthop are same. draft-ietf-idr-bgp4-23 5.1.3 */</span>
<a name="l00784"></a>00784   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET
<a name="l00785"></a>00785       &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, &amp;ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>))
<a name="l00786"></a>00786     <span class="keywordflow">return</span> 0;
<a name="l00787"></a>00787 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00788"></a>00788 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6
<a name="l00789"></a>00789      &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, &amp;ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>))
<a name="l00790"></a>00790     <span class="keywordflow">return</span> 0;
<a name="l00791"></a>00791 <span class="preprocessor">#endif</span>
<a name="l00792"></a>00792 <span class="preprocessor"></span>
<a name="l00793"></a>00793   <span class="comment">/* Aggregate-address suppress check. */</span>
<a name="l00794"></a>00794   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l00795"></a>00795     <span class="keywordflow">if</span> (! <a class="code" href="bgp__route_8h.html#a5d8b5b2174fe271354ba0def2c0a749e">UNSUPPRESS_MAP_NAME</a> (filter))
<a name="l00796"></a>00796       <span class="keywordflow">return</span> 0;
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   <span class="comment">/* Default route check.  */</span>
<a name="l00799"></a>00799   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>))
<a name="l00800"></a>00800     {
<a name="l00801"></a>00801       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr == INADDR_ANY)
<a name="l00802"></a>00802     <span class="keywordflow">return</span> 0;
<a name="l00803"></a>00803 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00804"></a>00804 <span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 0)
<a name="l00805"></a>00805     <span class="keywordflow">return</span> 0;
<a name="l00806"></a>00806 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00807"></a>00807     }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809   <span class="comment">/* Transparency check. */</span>
<a name="l00810"></a>00810   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l00811"></a>00811       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (from-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l00812"></a>00812     transparent = 1;
<a name="l00813"></a>00813   <span class="keywordflow">else</span>
<a name="l00814"></a>00814     transparent = 0;
<a name="l00815"></a>00815 
<a name="l00816"></a>00816   <span class="comment">/* If community is not disabled check the no-export and local. */</span>
<a name="l00817"></a>00817   <span class="keywordflow">if</span> (! transparent &amp;&amp; <a class="code" href="bgp__route_8c.html#a52f73611e235740976722005ed9da75b">bgp_community_filter</a> (peer, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>)) 
<a name="l00818"></a>00818     <span class="keywordflow">return</span> 0;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   <span class="comment">/* If the attribute has originator-id and it is same as remote</span>
<a name="l00821"></a>00821 <span class="comment">     peer&#39;s id. */</span>
<a name="l00822"></a>00822   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l00823"></a>00823     {
<a name="l00824"></a>00824       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, &amp;ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>))
<a name="l00825"></a>00825     {
<a name="l00826"></a>00826       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))  
<a name="l00827"></a>00827         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l00828"></a>00828           <span class="stringliteral">&quot;%s [Update:SEND] %s/%d originator-id is same as remote router-id&quot;</span>,
<a name="l00829"></a>00829           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00830"></a>00830           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l00831"></a>00831           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00832"></a>00832       <span class="keywordflow">return</span> 0;
<a name="l00833"></a>00833     }
<a name="l00834"></a>00834     }
<a name="l00835"></a>00835  
<a name="l00836"></a>00836   <span class="comment">/* ORF prefix-list filter check */</span>
<a name="l00837"></a>00837   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>)
<a name="l00838"></a>00838       &amp;&amp; (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4883c0951321050f52731ef009c2dd17">PEER_CAP_ORF_PREFIX_SM_RCV</a>)
<a name="l00839"></a>00839       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae0da0dd013880e12f7d1160d002735a6">PEER_CAP_ORF_PREFIX_SM_OLD_RCV</a>)))
<a name="l00840"></a>00840     <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi])
<a name="l00841"></a>00841       {
<a name="l00842"></a>00842     <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi], p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00843"></a>00843           <span class="keywordflow">return</span> 0;
<a name="l00844"></a>00844       }
<a name="l00845"></a>00845 
<a name="l00846"></a>00846   <span class="comment">/* Output filter check. */</span>
<a name="l00847"></a>00847   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a964b57dc2ca2170b988ca239878a9118">bgp_output_filter</a> (peer, p, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, afi, safi) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00848"></a>00848     {
<a name="l00849"></a>00849       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))
<a name="l00850"></a>00850     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l00851"></a>00851           <span class="stringliteral">&quot;%s [Update:SEND] %s/%d is filtered&quot;</span>,
<a name="l00852"></a>00852           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00853"></a>00853           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l00854"></a>00854           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00855"></a>00855       <span class="keywordflow">return</span> 0;
<a name="l00856"></a>00856     }
<a name="l00857"></a>00857 
<a name="l00858"></a>00858 <span class="preprocessor">#ifdef BGP_SEND_ASPATH_CHECK</span>
<a name="l00859"></a>00859 <span class="preprocessor"></span>  <span class="comment">/* AS path loop check. */</span>
<a name="l00860"></a>00860   <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
<a name="l00861"></a>00861     {
<a name="l00862"></a>00862       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))  
<a name="l00863"></a>00863         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, 
<a name="l00864"></a>00864           <span class="stringliteral">&quot;%s [Update:SEND] suppress announcement to peer AS %u is AS path.&quot;</span>,
<a name="l00865"></a>00865           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
<a name="l00866"></a>00866       <span class="keywordflow">return</span> 0;
<a name="l00867"></a>00867     }
<a name="l00868"></a>00868 <span class="preprocessor">#endif </span><span class="comment">/* BGP_SEND_ASPATH_CHECK */</span>
<a name="l00869"></a>00869 
<a name="l00870"></a>00870   <span class="comment">/* If we&#39;re a CONFED we need to loop check the CONFED ID too */</span>
<a name="l00871"></a>00871   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l00872"></a>00872     {
<a name="l00873"></a>00873       <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a>(ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>))
<a name="l00874"></a>00874     {
<a name="l00875"></a>00875       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))  
<a name="l00876"></a>00876         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, 
<a name="l00877"></a>00877           <span class="stringliteral">&quot;%s [Update:SEND] suppress announcement to peer AS %u is AS path.&quot;</span>,
<a name="l00878"></a>00878           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00879"></a>00879           bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>);
<a name="l00880"></a>00880       <span class="keywordflow">return</span> 0;
<a name="l00881"></a>00881     }      
<a name="l00882"></a>00882     }
<a name="l00883"></a>00883 
<a name="l00884"></a>00884   <span class="comment">/* Route-Reflect check. */</span>
<a name="l00885"></a>00885   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00886"></a>00886     reflect = 1;
<a name="l00887"></a>00887   <span class="keywordflow">else</span>
<a name="l00888"></a>00888     reflect = 0;
<a name="l00889"></a>00889 
<a name="l00890"></a>00890   <span class="comment">/* IBGP reflection check. */</span>
<a name="l00891"></a>00891   <span class="keywordflow">if</span> (reflect)
<a name="l00892"></a>00892     {
<a name="l00893"></a>00893       <span class="comment">/* A route from a Client peer. */</span>
<a name="l00894"></a>00894       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (from-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>))
<a name="l00895"></a>00895     {
<a name="l00896"></a>00896       <span class="comment">/* Reflect to all the Non-Client peers and also to the</span>
<a name="l00897"></a>00897 <span class="comment">             Client peers other than the originator.  Originator check</span>
<a name="l00898"></a>00898 <span class="comment">             is already done.  So there is noting to do. */</span>
<a name="l00899"></a>00899       <span class="comment">/* no bgp client-to-client reflection check. */</span>
<a name="l00900"></a>00900       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ac0d32e044da2ef04e2cb924c60c9186c">BGP_FLAG_NO_CLIENT_TO_CLIENT</a>))
<a name="l00901"></a>00901         <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>))
<a name="l00902"></a>00902           <span class="keywordflow">return</span> 0;
<a name="l00903"></a>00903     }
<a name="l00904"></a>00904       <span class="keywordflow">else</span>
<a name="l00905"></a>00905     {
<a name="l00906"></a>00906       <span class="comment">/* A route from a Non-client peer. Reflect to all other</span>
<a name="l00907"></a>00907 <span class="comment">         clients. */</span>
<a name="l00908"></a>00908       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>))
<a name="l00909"></a>00909         <span class="keywordflow">return</span> 0;
<a name="l00910"></a>00910     }
<a name="l00911"></a>00911     }
<a name="l00912"></a>00912   
<a name="l00913"></a>00913   <span class="comment">/* AS-Pathlimit check */</span>
<a name="l00914"></a>00914   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00915"></a>00915     <span class="comment">/* Our ASN has not yet been pre-pended, that&#39;s done in packet_attribute</span>
<a name="l00916"></a>00916 <span class="comment">     * on output. Hence the test here is for &gt;=.</span>
<a name="l00917"></a>00917 <span class="comment">     */</span>
<a name="l00918"></a>00918     <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) &gt;= ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>)
<a name="l00919"></a>00919       {
<a name="l00920"></a>00920         <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))
<a name="l00921"></a>00921           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s [Update:SEND] suppressed, AS-Pathlimit TTL %u exceeded&quot;</span>,
<a name="l00922"></a>00922                      peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
<a name="l00923"></a>00923         <span class="keywordflow">return</span> 0;
<a name="l00924"></a>00924       }
<a name="l00925"></a>00925   
<a name="l00926"></a>00926   <span class="comment">/* For modify attribute, copy it to temporary structure. */</span>
<a name="l00927"></a>00927   <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (attr, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l00928"></a>00928   
<a name="l00929"></a>00929   <span class="comment">/* If local-preference is not set. */</span>
<a name="l00930"></a>00930   <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
<a name="l00931"></a>00931        || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>) 
<a name="l00932"></a>00932       &amp;&amp; (! (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))))
<a name="l00933"></a>00933     {
<a name="l00934"></a>00934       attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
<a name="l00935"></a>00935       attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>;
<a name="l00936"></a>00936     }
<a name="l00937"></a>00937 
<a name="l00938"></a>00938   <span class="comment">/* Remove MED if its an EBGP peer - will get overwritten by route-maps */</span>
<a name="l00939"></a>00939   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
<a name="l00940"></a>00940       &amp;&amp; attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l00941"></a>00941     {
<a name="l00942"></a>00942       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> != bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> &amp;&amp; ! transparent
<a name="l00943"></a>00943       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>))
<a name="l00944"></a>00944     attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp;= ~(<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>));
<a name="l00945"></a>00945     }
<a name="l00946"></a>00946 
<a name="l00947"></a>00947   <span class="comment">/* next-hop-set */</span>
<a name="l00948"></a>00948   <span class="keywordflow">if</span> (transparent || reflect
<a name="l00949"></a>00949       || (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)
<a name="l00950"></a>00950       &amp;&amp; ((p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr)
<a name="l00951"></a>00951 #ifdef HAVE_IPV6
<a name="l00952"></a>00952           || (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; 
<a name="l00953"></a>00953                   ! IN6_IS_ADDR_UNSPECIFIED(&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
<a name="l00954"></a>00954 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l00955"></a>00955           )))
<a name="l00956"></a>00956     {
<a name="l00957"></a>00957       <span class="comment">/* NEXT-HOP Unchanged. */</span>
<a name="l00958"></a>00958     }
<a name="l00959"></a>00959   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a81ac724618a5428b3af519e296c0263e">PEER_FLAG_NEXTHOP_SELF</a>)
<a name="l00960"></a>00960        || (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
<a name="l00961"></a>00961 #ifdef HAVE_IPV6
<a name="l00962"></a>00962        || (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; 
<a name="l00963"></a>00963                IN6_IS_ADDR_UNSPECIFIED(&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
<a name="l00964"></a>00964 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l00965"></a>00965        || (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l00966"></a>00966            &amp;&amp; <a class="code" href="bgp__nexthop_8c.html#a40288c74e1b34a270e8b017b5ee1cc02">bgp_multiaccess_check_v4</a> (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>) == 0))
<a name="l00967"></a>00967     {
<a name="l00968"></a>00968       <span class="comment">/* Set IPv4 nexthop. */</span>
<a name="l00969"></a>00969       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00970"></a>00970     {
<a name="l00971"></a>00971       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00972"></a>00972         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>,
<a name="l00973"></a>00973                 <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
<a name="l00974"></a>00974       <span class="keywordflow">else</span>
<a name="l00975"></a>00975         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
<a name="l00976"></a>00976     }
<a name="l00977"></a>00977 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00978"></a>00978 <span class="preprocessor"></span>      <span class="comment">/* Set IPv6 nexthop. */</span>
<a name="l00979"></a>00979       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00980"></a>00980     {
<a name="l00981"></a>00981       <span class="comment">/* IPv6 global nexthop must be included. */</span>
<a name="l00982"></a>00982       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_global, 
<a name="l00983"></a>00983           <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l00984"></a>00984       attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l00985"></a>00985     }
<a name="l00986"></a>00986 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00987"></a>00987     }
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00990"></a>00990 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00991"></a>00991     {
<a name="l00992"></a>00992       <span class="comment">/* Left nexthop_local unchanged if so configured. */</span> 
<a name="l00993"></a>00993       <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], 
<a name="l00994"></a>00994            <a class="code" href="bgpd_8h.html#abba8d6c84283161714fa65e519a3e3ac">PEER_FLAG_NEXTHOP_LOCAL_UNCHANGED</a>) )
<a name="l00995"></a>00995         {
<a name="l00996"></a>00996           <span class="keywordflow">if</span> ( IN6_IS_ADDR_LINKLOCAL (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local) )
<a name="l00997"></a>00997             attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=32;
<a name="l00998"></a>00998           <span class="keywordflow">else</span>
<a name="l00999"></a>00999             attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=16;
<a name="l01000"></a>01000         }
<a name="l01001"></a>01001 
<a name="l01002"></a>01002       <span class="comment">/* Default nexthop_local treatment for non-RS-Clients */</span>
<a name="l01003"></a>01003       <span class="keywordflow">else</span> 
<a name="l01004"></a>01004         {
<a name="l01005"></a>01005       <span class="comment">/* Link-local address should not be transit to different peer. */</span>
<a name="l01006"></a>01006       attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01007"></a>01007 
<a name="l01008"></a>01008       <span class="comment">/* Set link-local address for shared network peer. */</span>
<a name="l01009"></a>01009       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> 
<a name="l01010"></a>01010       &amp;&amp; ! IN6_IS_ADDR_UNSPECIFIED (&amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local))
<a name="l01011"></a>01011     {
<a name="l01012"></a>01012       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local, 
<a name="l01013"></a>01013           <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l01014"></a>01014       attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 32;
<a name="l01015"></a>01015     }
<a name="l01016"></a>01016 
<a name="l01017"></a>01017       <span class="comment">/* If bgpd act as BGP-4+ route-reflector, do not send link-local</span>
<a name="l01018"></a>01018 <span class="comment">     address.*/</span>
<a name="l01019"></a>01019       <span class="keywordflow">if</span> (reflect)
<a name="l01020"></a>01020     attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01021"></a>01021 
<a name="l01022"></a>01022       <span class="comment">/* If BGP-4+ link-local nexthop is not link-local nexthop. */</span>
<a name="l01023"></a>01023       <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL (&amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local))
<a name="l01024"></a>01024     attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01025"></a>01025     }
<a name="l01026"></a>01026 
<a name="l01027"></a>01027     }
<a name="l01028"></a>01028 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01029"></a>01029 
<a name="l01030"></a>01030   <span class="comment">/* AS-Pathlimit: Check ASN for private/confed */</span>
<a name="l01031"></a>01031   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>)
<a name="l01032"></a>01032     {
<a name="l01033"></a>01033       <span class="comment">/* locally originated update */</span>
<a name="l01034"></a>01034       <span class="keywordflow">if</span> (!attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
<a name="l01035"></a>01035         attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l01036"></a>01036       
<a name="l01037"></a>01037       <span class="comment">/* if the AS_PATHLIMIT attribute is attached to a prefix by a</span>
<a name="l01038"></a>01038 <span class="comment">         member of a confederation, then when the prefix is advertised outside</span>
<a name="l01039"></a>01039 <span class="comment">         of the confederation boundary, then the AS number of the</span>
<a name="l01040"></a>01040 <span class="comment">         confederation member inside of the AS_PATHLIMIT attribute should be</span>
<a name="l01041"></a>01041 <span class="comment">         replaced by the confederation&#39;s AS number. */</span>
<a name="l01042"></a>01042       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a> 
<a name="l01043"></a>01043           &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l01044"></a>01044         attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l01045"></a>01045 
<a name="l01046"></a>01046       <span class="comment">/* Private ASN should be updated whenever announcement leaves</span>
<a name="l01047"></a>01047 <span class="comment">       * private space. This is deliberately done after simple confed</span>
<a name="l01048"></a>01048 <span class="comment">       * based update..</span>
<a name="l01049"></a>01049 <span class="comment">       */</span>
<a name="l01050"></a>01050       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> &gt;= <a class="code" href="bgp__aspath_8h.html#ac7d780d83cdd277414ca9ba2785ff152">BGP_PRIVATE_AS_MIN</a>
<a name="l01051"></a>01051           &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> &lt;= <a class="code" href="bgp__aspath_8h.html#a5eab303011de75bf71ee2d346bed9927">BGP_PRIVATE_AS_MAX</a>)
<a name="l01052"></a>01052         {
<a name="l01053"></a>01053           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> &lt; <a class="code" href="bgp__aspath_8h.html#ac7d780d83cdd277414ca9ba2785ff152">BGP_PRIVATE_AS_MIN</a> 
<a name="l01054"></a>01054               || peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> &gt; <a class="code" href="bgp__aspath_8h.html#a5eab303011de75bf71ee2d346bed9927">BGP_PRIVATE_AS_MAX</a>)
<a name="l01055"></a>01055             attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l01056"></a>01056           <span class="comment">/* Ours is private, try using theirs.. */</span>
<a name="l01057"></a>01057           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> &lt; <a class="code" href="bgp__aspath_8h.html#ac7d780d83cdd277414ca9ba2785ff152">BGP_PRIVATE_AS_MIN</a>
<a name="l01058"></a>01058                    || peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> &gt; <a class="code" href="bgp__aspath_8h.html#a5eab303011de75bf71ee2d346bed9927">BGP_PRIVATE_AS_MAX</a>)
<a name="l01059"></a>01059             attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l01060"></a>01060         }
<a name="l01061"></a>01061     }
<a name="l01062"></a>01062   
<a name="l01063"></a>01063   <span class="comment">/* If this is EBGP peer and remove-private-AS is set.  */</span>
<a name="l01064"></a>01064   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l01065"></a>01065       &amp;&amp; <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>)
<a name="l01066"></a>01066       &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a808020dd81343ccfb8f4cf5f50f5f11c">aspath_private_as_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>))
<a name="l01067"></a>01067     attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aa737121f7df6f3e64869fc9a6c330b2f">aspath_empty_get</a> ();
<a name="l01068"></a>01068 
<a name="l01069"></a>01069   <span class="comment">/* Route map &amp; unsuppress-map apply. */</span>
<a name="l01070"></a>01070   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a74b8c19a64169d6d012582c4350ee71b">ROUTE_MAP_OUT_NAME</a> (filter)
<a name="l01071"></a>01071       || (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>) )
<a name="l01072"></a>01072     {
<a name="l01073"></a>01073       <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l01074"></a>01074       <span class="keyword">struct </span>attr dummy_attr = { 0 };
<a name="l01075"></a>01075       
<a name="l01076"></a>01076       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = peer;
<a name="l01077"></a>01077       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr;
<a name="l01078"></a>01078 
<a name="l01079"></a>01079       <span class="comment">/* The route reflector is not allowed to modify the attributes</span>
<a name="l01080"></a>01080 <span class="comment">     of the reflected IBGP routes. */</span>
<a name="l01081"></a>01081       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
<a name="l01082"></a>01082       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l01083"></a>01083     {
<a name="l01084"></a>01084       <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (&amp;dummy_attr, attr);
<a name="l01085"></a>01085       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = &amp;dummy_attr;
<a name="l01086"></a>01086     }
<a name="l01087"></a>01087 
<a name="l01088"></a>01088       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a8936848c8f5360ec5b4544e3cd86cda1">PEER_RMAP_TYPE_OUT</a>); 
<a name="l01089"></a>01089 
<a name="l01090"></a>01090       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l01091"></a>01091     ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#a346dd5110ed3bda9be8ffd4a42e5f52b">UNSUPPRESS_MAP</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l01092"></a>01092       <span class="keywordflow">else</span>
<a name="l01093"></a>01093     ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#a723d63ede8a87e162c1bf2097b2466b6">ROUTE_MAP_OUT</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l01094"></a>01094 
<a name="l01095"></a>01095       peer-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l01096"></a>01096       
<a name="l01097"></a>01097       <span class="keywordflow">if</span> (dummy_attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l01098"></a>01098         <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;dummy_attr);
<a name="l01099"></a>01099       
<a name="l01100"></a>01100       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l01101"></a>01101     {
<a name="l01102"></a>01102       <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (attr);
<a name="l01103"></a>01103       <span class="keywordflow">return</span> 0;
<a name="l01104"></a>01104     }
<a name="l01105"></a>01105     }
<a name="l01106"></a>01106   <span class="keywordflow">return</span> 1;
<a name="l01107"></a>01107 }
<a name="l01108"></a>01108 
<a name="l01109"></a>01109 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01110"></a><a class="code" href="bgp__route_8c.html#a35b4c8839d28c1fadc0173bfe0898234">01110</a> <a class="code" href="bgp__route_8c.html#a35b4c8839d28c1fadc0173bfe0898234">bgp_announce_check_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient,
<a name="l01111"></a>01111         <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01112"></a>01112 {
<a name="l01113"></a>01113   <span class="keywordtype">int</span> ret;
<a name="l01114"></a>01114   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l01115"></a>01115   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l01116"></a>01116   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l01117"></a>01117   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *from;
<a name="l01118"></a>01118   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01119"></a>01119 
<a name="l01120"></a>01120   from = ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l01121"></a>01121   filter = &amp;rsclient-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l01122"></a>01122   bgp = rsclient-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l01123"></a>01123 
<a name="l01124"></a>01124   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l01125"></a>01125     <span class="keywordflow">return</span> 0;
<a name="l01126"></a>01126 
<a name="l01127"></a>01127   <span class="comment">/* Do not send back route to sender. */</span>
<a name="l01128"></a>01128   <span class="keywordflow">if</span> (from == rsclient)
<a name="l01129"></a>01129     <span class="keywordflow">return</span> 0;
<a name="l01130"></a>01130 
<a name="l01131"></a>01131   <span class="comment">/* Aggregate-address suppress check. */</span>
<a name="l01132"></a>01132   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l01133"></a>01133     <span class="keywordflow">if</span> (! <a class="code" href="bgp__route_8h.html#a5d8b5b2174fe271354ba0def2c0a749e">UNSUPPRESS_MAP_NAME</a> (filter))
<a name="l01134"></a>01134       <span class="keywordflow">return</span> 0;
<a name="l01135"></a>01135 
<a name="l01136"></a>01136   <span class="comment">/* Default route check.  */</span>
<a name="l01137"></a>01137   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi],
<a name="l01138"></a>01138           <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>))
<a name="l01139"></a>01139     {
<a name="l01140"></a>01140       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr == INADDR_ANY)
<a name="l01141"></a>01141         <span class="keywordflow">return</span> 0;
<a name="l01142"></a>01142 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01143"></a>01143 <span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 0)
<a name="l01144"></a>01144         <span class="keywordflow">return</span> 0;
<a name="l01145"></a>01145 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01146"></a>01146     }
<a name="l01147"></a>01147 
<a name="l01148"></a>01148   <span class="comment">/* If the attribute has originator-id and it is same as remote</span>
<a name="l01149"></a>01149 <span class="comment">     peer&#39;s id. */</span>
<a name="l01150"></a>01150   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l01151"></a>01151     {
<a name="l01152"></a>01152       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rsclient-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, 
<a name="l01153"></a>01153                           &amp;ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>))
<a name="l01154"></a>01154         {
<a name="l01155"></a>01155          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))
<a name="l01156"></a>01156            <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (rsclient-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l01157"></a>01157                  <span class="stringliteral">&quot;%s [Update:SEND] %s/%d originator-id is same as remote router-id&quot;</span>,
<a name="l01158"></a>01158                  rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01159"></a>01159                  <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01160"></a>01160                  p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l01161"></a>01161          <span class="keywordflow">return</span> 0;
<a name="l01162"></a>01162        }
<a name="l01163"></a>01163     }
<a name="l01164"></a>01164 
<a name="l01165"></a>01165   <span class="comment">/* ORF prefix-list filter check */</span>
<a name="l01166"></a>01166   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>)
<a name="l01167"></a>01167       &amp;&amp; (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4883c0951321050f52731ef009c2dd17">PEER_CAP_ORF_PREFIX_SM_RCV</a>)
<a name="l01168"></a>01168          || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae0da0dd013880e12f7d1160d002735a6">PEER_CAP_ORF_PREFIX_SM_OLD_RCV</a>)))
<a name="l01169"></a>01169     <span class="keywordflow">if</span> (rsclient-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi])
<a name="l01170"></a>01170       {
<a name="l01171"></a>01171        <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (rsclient-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi], p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l01172"></a>01172           <span class="keywordflow">return</span> 0;
<a name="l01173"></a>01173       }
<a name="l01174"></a>01174 
<a name="l01175"></a>01175   <span class="comment">/* Output filter check. */</span>
<a name="l01176"></a>01176   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a964b57dc2ca2170b988ca239878a9118">bgp_output_filter</a> (rsclient, p, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, afi, safi) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l01177"></a>01177     {
<a name="l01178"></a>01178       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))
<a name="l01179"></a>01179        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (rsclient-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l01180"></a>01180              <span class="stringliteral">&quot;%s [Update:SEND] %s/%d is filtered&quot;</span>,
<a name="l01181"></a>01181              rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01182"></a>01182              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01183"></a>01183              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l01184"></a>01184       <span class="keywordflow">return</span> 0;
<a name="l01185"></a>01185     }
<a name="l01186"></a>01186 
<a name="l01187"></a>01187 <span class="preprocessor">#ifdef BGP_SEND_ASPATH_CHECK</span>
<a name="l01188"></a>01188 <span class="preprocessor"></span>  <span class="comment">/* AS path loop check. */</span>
<a name="l01189"></a>01189   <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, rsclient-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
<a name="l01190"></a>01190     {
<a name="l01191"></a>01191       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (filter, FILTER))
<a name="l01192"></a>01192         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (rsclient-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l01193"></a>01193              <span class="stringliteral">&quot;%s [Update:SEND] suppress announcement to peer AS %u is AS path.&quot;</span>,
<a name="l01194"></a>01194              rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, rsclient-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
<a name="l01195"></a>01195       <span class="keywordflow">return</span> 0;
<a name="l01196"></a>01196     }
<a name="l01197"></a>01197 <span class="preprocessor">#endif </span><span class="comment">/* BGP_SEND_ASPATH_CHECK */</span>
<a name="l01198"></a>01198 
<a name="l01199"></a>01199   <span class="comment">/* For modify attribute, copy it to temporary structure. */</span>
<a name="l01200"></a>01200   <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (attr, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l01201"></a>01201 
<a name="l01202"></a>01202   <span class="comment">/* next-hop-set */</span>
<a name="l01203"></a>01203   <span class="keywordflow">if</span> ((p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
<a name="l01204"></a>01204 #ifdef HAVE_IPV6
<a name="l01205"></a>01205           || (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp;
<a name="l01206"></a>01206               IN6_IS_ADDR_UNSPECIFIED(&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
<a name="l01207"></a>01207 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l01208"></a>01208      )
<a name="l01209"></a>01209   {
<a name="l01210"></a>01210     <span class="comment">/* Set IPv4 nexthop. */</span>
<a name="l01211"></a>01211     <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l01212"></a>01212       {
<a name="l01213"></a>01213         <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01214"></a>01214           <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, &amp;rsclient-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>,
<a name="l01215"></a>01215                   <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
<a name="l01216"></a>01216         <span class="keywordflow">else</span>
<a name="l01217"></a>01217           <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>, &amp;rsclient-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
<a name="l01218"></a>01218       }
<a name="l01219"></a>01219 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01220"></a>01220 <span class="preprocessor"></span>    <span class="comment">/* Set IPv6 nexthop. */</span>
<a name="l01221"></a>01221     <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l01222"></a>01222       {
<a name="l01223"></a>01223         <span class="comment">/* IPv6 global nexthop must be included. */</span>
<a name="l01224"></a>01224         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global, &amp;rsclient-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_global,
<a name="l01225"></a>01225                 <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l01226"></a>01226         attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01227"></a>01227       }
<a name="l01228"></a>01228 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01229"></a>01229   }
<a name="l01230"></a>01230 
<a name="l01231"></a>01231 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01232"></a>01232 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l01233"></a>01233     {
<a name="l01234"></a>01234       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l01235"></a>01235       
<a name="l01236"></a>01236       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l01237"></a>01237       
<a name="l01238"></a>01238       <span class="comment">/* Left nexthop_local unchanged if so configured. */</span>
<a name="l01239"></a>01239       <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], 
<a name="l01240"></a>01240            <a class="code" href="bgpd_8h.html#abba8d6c84283161714fa65e519a3e3ac">PEER_FLAG_NEXTHOP_LOCAL_UNCHANGED</a>) )
<a name="l01241"></a>01241         {
<a name="l01242"></a>01242           <span class="keywordflow">if</span> ( IN6_IS_ADDR_LINKLOCAL (&amp;attre-&gt;mp_nexthop_local) )
<a name="l01243"></a>01243             attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=32;
<a name="l01244"></a>01244           <span class="keywordflow">else</span>
<a name="l01245"></a>01245             attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=16;
<a name="l01246"></a>01246         }
<a name="l01247"></a>01247         
<a name="l01248"></a>01248       <span class="comment">/* Default nexthop_local treatment for RS-Clients */</span>
<a name="l01249"></a>01249       <span class="keywordflow">else</span> 
<a name="l01250"></a>01250         { 
<a name="l01251"></a>01251           <span class="comment">/* Announcer and RS-Client are both in the same network */</span>      
<a name="l01252"></a>01252           <span class="keywordflow">if</span> (rsclient-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> &amp;&amp; from-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> &amp;&amp;
<a name="l01253"></a>01253               (rsclient-&gt;<a class="code" href="structpeer.html#a959523b5b0a6ed9a0b87825e42545ec0">ifindex</a> == from-&gt;<a class="code" href="structpeer.html#a959523b5b0a6ed9a0b87825e42545ec0">ifindex</a>))
<a name="l01254"></a>01254             {
<a name="l01255"></a>01255               <span class="keywordflow">if</span> ( IN6_IS_ADDR_LINKLOCAL (&amp;attre-&gt;mp_nexthop_local) )
<a name="l01256"></a>01256                 attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=32;
<a name="l01257"></a>01257               <span class="keywordflow">else</span>
<a name="l01258"></a>01258                 attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>=16;
<a name="l01259"></a>01259             }
<a name="l01260"></a>01260 
<a name="l01261"></a>01261           <span class="comment">/* Set link-local address for shared network peer. */</span>
<a name="l01262"></a>01262           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rsclient-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a>
<a name="l01263"></a>01263               &amp;&amp; IN6_IS_ADDR_LINKLOCAL (&amp;rsclient-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local))
<a name="l01264"></a>01264             {
<a name="l01265"></a>01265               <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attre-&gt;mp_nexthop_local, &amp;rsclient-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local,
<a name="l01266"></a>01266                       <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l01267"></a>01267               attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 32;
<a name="l01268"></a>01268             }
<a name="l01269"></a>01269 
<a name="l01270"></a>01270           <span class="keywordflow">else</span>
<a name="l01271"></a>01271             attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01272"></a>01272         }
<a name="l01273"></a>01273 
<a name="l01274"></a>01274     }
<a name="l01275"></a>01275 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01276"></a>01276 
<a name="l01277"></a>01277 
<a name="l01278"></a>01278   <span class="comment">/* If this is EBGP peer and remove-private-AS is set.  */</span>
<a name="l01279"></a>01279   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (rsclient) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l01280"></a>01280       &amp;&amp; <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (rsclient, afi, safi, <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>)
<a name="l01281"></a>01281       &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a808020dd81343ccfb8f4cf5f50f5f11c">aspath_private_as_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>))
<a name="l01282"></a>01282     attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aa737121f7df6f3e64869fc9a6c330b2f">aspath_empty_get</a> ();
<a name="l01283"></a>01283 
<a name="l01284"></a>01284   <span class="comment">/* Route map &amp; unsuppress-map apply. */</span>
<a name="l01285"></a>01285   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a74b8c19a64169d6d012582c4350ee71b">ROUTE_MAP_OUT_NAME</a> (filter) || (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>) )
<a name="l01286"></a>01286     {
<a name="l01287"></a>01287       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = rsclient;
<a name="l01288"></a>01288       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr;
<a name="l01289"></a>01289 
<a name="l01290"></a>01290       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a8936848c8f5360ec5b4544e3cd86cda1">PEER_RMAP_TYPE_OUT</a>);
<a name="l01291"></a>01291 
<a name="l01292"></a>01292       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l01293"></a>01293         ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#a346dd5110ed3bda9be8ffd4a42e5f52b">UNSUPPRESS_MAP</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l01294"></a>01294       <span class="keywordflow">else</span>
<a name="l01295"></a>01295         ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="bgp__route_8h.html#a723d63ede8a87e162c1bf2097b2466b6">ROUTE_MAP_OUT</a> (filter), p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l01296"></a>01296 
<a name="l01297"></a>01297       rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l01298"></a>01298 
<a name="l01299"></a>01299       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l01300"></a>01300        {
<a name="l01301"></a>01301          <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (attr);
<a name="l01302"></a>01302          <span class="keywordflow">return</span> 0;
<a name="l01303"></a>01303        }
<a name="l01304"></a>01304     }
<a name="l01305"></a>01305 
<a name="l01306"></a>01306   <span class="keywordflow">return</span> 1;
<a name="l01307"></a>01307 }
<a name="l01308"></a>01308 
<a name="l01309"></a><a class="code" href="structbgp__info__pair.html">01309</a> <span class="keyword">struct </span><a class="code" href="structbgp__info__pair.html">bgp_info_pair</a>
<a name="l01310"></a>01310 {
<a name="l01311"></a><a class="code" href="structbgp__info__pair.html#a11d43d9b5328d09118af1d1199fab482">01311</a>   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__info__pair.html#a11d43d9b5328d09118af1d1199fab482">old</a>;
<a name="l01312"></a><a class="code" href="structbgp__info__pair.html#a0b78cac0a00d5e0dd592dde718bdcd01">01312</a>   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l01313"></a>01313 };
<a name="l01314"></a>01314 
<a name="l01315"></a>01315 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01316"></a><a class="code" href="bgp__route_8c.html#aefec15f33656cb69b4b71702afdca06a">01316</a> <a class="code" href="bgp__route_8c.html#aefec15f33656cb69b4b71702afdca06a">bgp_best_selection</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info__pair.html">bgp_info_pair</a> *result)
<a name="l01317"></a>01317 {
<a name="l01318"></a>01318   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *new_select;
<a name="l01319"></a>01319   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *old_select;
<a name="l01320"></a>01320   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l01321"></a>01321   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri1;
<a name="l01322"></a>01322   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri2;
<a name="l01323"></a>01323   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *nextri = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01324"></a>01324   
<a name="l01325"></a>01325   <span class="comment">/* bgp deterministic-med */</span>
<a name="l01326"></a>01326   new_select = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01327"></a>01327   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a872ba22b64e9118e8cda60c6d3c6d5c9">BGP_FLAG_DETERMINISTIC_MED</a>))
<a name="l01328"></a>01328     <span class="keywordflow">for</span> (ri1 = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri1; ri1 = ri1-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l01329"></a>01329       {
<a name="l01330"></a>01330     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri1-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>))
<a name="l01331"></a>01331       <span class="keywordflow">continue</span>;
<a name="l01332"></a>01332     <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri1))
<a name="l01333"></a>01333       <span class="keywordflow">continue</span>;
<a name="l01334"></a>01334 
<a name="l01335"></a>01335     new_select = ri1;
<a name="l01336"></a>01336     <span class="keywordflow">if</span> (ri1-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l01337"></a>01337       <span class="keywordflow">for</span> (ri2 = ri1-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>; ri2; ri2 = ri2-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l01338"></a>01338         {
<a name="l01339"></a>01339           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri2-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>))
<a name="l01340"></a>01340         <span class="keywordflow">continue</span>;
<a name="l01341"></a>01341           <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri2))
<a name="l01342"></a>01342         <span class="keywordflow">continue</span>;
<a name="l01343"></a>01343 
<a name="l01344"></a>01344           <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a5f979a1ff3bc3908684e4592e5c383eb">aspath_cmp_left</a> (ri1-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, ri2-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l01345"></a>01345           || <a class="code" href="bgp__aspath_8c.html#ace7eb37e6ea088fb0ea82c9ae4c58375">aspath_cmp_left_confed</a> (ri1-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>,
<a name="l01346"></a>01346                          ri2-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>))
<a name="l01347"></a>01347         {
<a name="l01348"></a>01348           <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#adb9d04630ab93d7aee4950ee2a1b0ead">bgp_info_cmp</a> (bgp, ri2, new_select))
<a name="l01349"></a>01349             {
<a name="l01350"></a>01350               <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a9486d9e223de55b24716f63d58a615d1">BGP_INFO_DMED_SELECTED</a>);
<a name="l01351"></a>01351               new_select = ri2;
<a name="l01352"></a>01352             }
<a name="l01353"></a>01353 
<a name="l01354"></a>01354           <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri2, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>);
<a name="l01355"></a>01355         }
<a name="l01356"></a>01356         }
<a name="l01357"></a>01357     <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>);
<a name="l01358"></a>01358     <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a9486d9e223de55b24716f63d58a615d1">BGP_INFO_DMED_SELECTED</a>);
<a name="l01359"></a>01359       }
<a name="l01360"></a>01360 
<a name="l01361"></a>01361   <span class="comment">/* Check old selected route and new selected route. */</span>
<a name="l01362"></a>01362   old_select = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01363"></a>01363   new_select = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01364"></a>01364   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; (ri != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (nextri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>, 1); ri = nextri)
<a name="l01365"></a>01365     {
<a name="l01366"></a>01366       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l01367"></a>01367     old_select = ri;
<a name="l01368"></a>01368 
<a name="l01369"></a>01369       <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri))
<a name="l01370"></a>01370         {
<a name="l01371"></a>01371           <span class="comment">/* reap REMOVED routes, if needs be </span>
<a name="l01372"></a>01372 <span class="comment">           * selected route must stay for a while longer though</span>
<a name="l01373"></a>01373 <span class="comment">           */</span>
<a name="l01374"></a>01374           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>)
<a name="l01375"></a>01375               &amp;&amp; (ri != old_select))
<a name="l01376"></a>01376               <a class="code" href="bgp__route_8c.html#a4475c3919634039951683b34a18b1dee">bgp_info_reap</a> (rn, ri);
<a name="l01377"></a>01377           
<a name="l01378"></a>01378           <span class="keywordflow">continue</span>;
<a name="l01379"></a>01379         }
<a name="l01380"></a>01380 
<a name="l01381"></a>01381       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a872ba22b64e9118e8cda60c6d3c6d5c9">BGP_FLAG_DETERMINISTIC_MED</a>)
<a name="l01382"></a>01382           &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a9486d9e223de55b24716f63d58a615d1">BGP_INFO_DMED_SELECTED</a>)))
<a name="l01383"></a>01383     {
<a name="l01384"></a>01384       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>);
<a name="l01385"></a>01385       <span class="keywordflow">continue</span>;
<a name="l01386"></a>01386         }
<a name="l01387"></a>01387       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a1f4be6cad311d6e4638b723b4420f4e9">BGP_INFO_DMED_CHECK</a>);
<a name="l01388"></a>01388       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a9486d9e223de55b24716f63d58a615d1">BGP_INFO_DMED_SELECTED</a>);
<a name="l01389"></a>01389 
<a name="l01390"></a>01390       <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#adb9d04630ab93d7aee4950ee2a1b0ead">bgp_info_cmp</a> (bgp, ri, new_select))
<a name="l01391"></a>01391     new_select = ri;
<a name="l01392"></a>01392     }
<a name="l01393"></a>01393     
<a name="l01394"></a>01394     result-&gt;<a class="code" href="structbgp__info__pair.html#a11d43d9b5328d09118af1d1199fab482">old</a> = old_select;
<a name="l01395"></a>01395     result-&gt;<a class="code" href="structbgp__info__pair.html#a0b78cac0a00d5e0dd592dde718bdcd01">new</a> = new_select;
<a name="l01396"></a>01396 
<a name="l01397"></a>01397     <span class="keywordflow">return</span>;
<a name="l01398"></a>01398 }
<a name="l01399"></a>01399 
<a name="l01400"></a>01400 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01401"></a><a class="code" href="bgp__route_8c.html#a68f69dcd72afe7aeb53608418fc55385">01401</a> <a class="code" href="bgp__route_8c.html#a68f69dcd72afe7aeb53608418fc55385">bgp_process_announce_selected</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *selected,
<a name="l01402"></a>01402                                <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01403"></a>01403 {
<a name="l01404"></a>01404   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l01405"></a>01405   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr = { 0 };
<a name="l01406"></a>01406 
<a name="l01407"></a>01407   p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l01408"></a>01408 
<a name="l01409"></a>01409   <span class="comment">/* Announce route to Established peer. */</span>
<a name="l01410"></a>01410   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01411"></a>01411     <span class="keywordflow">return</span> 0;
<a name="l01412"></a>01412 
<a name="l01413"></a>01413   <span class="comment">/* Address family configuration check. */</span>
<a name="l01414"></a>01414   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l01415"></a>01415     <span class="keywordflow">return</span> 0;
<a name="l01416"></a>01416 
<a name="l01417"></a>01417   <span class="comment">/* First update is deferred until ORF or ROUTE-REFRESH is received */</span>
<a name="l01418"></a>01418   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi],
<a name="l01419"></a>01419       <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>))
<a name="l01420"></a>01420     <span class="keywordflow">return</span> 0;
<a name="l01421"></a>01421 
<a name="l01422"></a>01422   <span class="keywordflow">switch</span> (rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5099bb3c9ff5831a90846db78724e652">type</a>)
<a name="l01423"></a>01423     {
<a name="l01424"></a>01424       <span class="keywordflow">case</span> <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>:
<a name="l01425"></a>01425       <span class="comment">/* Announcement to peer-&gt;conf.  If the route is filtered,</span>
<a name="l01426"></a>01426 <span class="comment">         withdraw it. */</span>
<a name="l01427"></a>01427         <span class="keywordflow">if</span> (selected &amp;&amp; <a class="code" href="bgp__route_8c.html#a7a3b743168235f6f62a99f82c20fcdf1">bgp_announce_check</a> (selected, peer, p, &amp;attr, afi, safi))
<a name="l01428"></a>01428           <a class="code" href="bgp__advertise_8c.html#a3a40b0a670f7854055d71517f5ede018">bgp_adj_out_set</a> (rn, peer, p, &amp;attr, afi, safi, selected);
<a name="l01429"></a>01429         <span class="keywordflow">else</span>
<a name="l01430"></a>01430           <a class="code" href="bgp__advertise_8c.html#adbc62e0dd99f941abbaf231f77930094">bgp_adj_out_unset</a> (rn, peer, p, afi, safi);
<a name="l01431"></a>01431         <span class="keywordflow">break</span>;
<a name="l01432"></a>01432       <span class="keywordflow">case</span> <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0">BGP_TABLE_RSCLIENT</a>:
<a name="l01433"></a>01433         <span class="comment">/* Announcement to peer-&gt;conf.  If the route is filtered, </span>
<a name="l01434"></a>01434 <span class="comment">           withdraw it. */</span>
<a name="l01435"></a>01435         <span class="keywordflow">if</span> (selected &amp;&amp; 
<a name="l01436"></a>01436             <a class="code" href="bgp__route_8c.html#a35b4c8839d28c1fadc0173bfe0898234">bgp_announce_check_rsclient</a> (selected, peer, p, &amp;attr, afi, safi))
<a name="l01437"></a>01437           <a class="code" href="bgp__advertise_8c.html#a3a40b0a670f7854055d71517f5ede018">bgp_adj_out_set</a> (rn, peer, p, &amp;attr, afi, safi, selected);
<a name="l01438"></a>01438         <span class="keywordflow">else</span>
<a name="l01439"></a>01439       <a class="code" href="bgp__advertise_8c.html#adbc62e0dd99f941abbaf231f77930094">bgp_adj_out_unset</a> (rn, peer, p, afi, safi);
<a name="l01440"></a>01440         <span class="keywordflow">break</span>;
<a name="l01441"></a>01441     }
<a name="l01442"></a>01442   
<a name="l01443"></a>01443   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l01444"></a>01444   
<a name="l01445"></a>01445   <span class="keywordflow">return</span> 0;
<a name="l01446"></a>01446 }
<a name="l01447"></a>01447 
<a name="l01448"></a><a class="code" href="structbgp__process__queue.html">01448</a> <span class="keyword">struct </span><a class="code" href="structbgp__process__queue.html">bgp_process_queue</a> 
<a name="l01449"></a>01449 {
<a name="l01450"></a><a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">01450</a>   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">bgp</a>;
<a name="l01451"></a><a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">01451</a>   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a>;
<a name="l01452"></a><a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">01452</a>   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">afi</a>;
<a name="l01453"></a><a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">01453</a>   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">safi</a>;
<a name="l01454"></a>01454 };
<a name="l01455"></a>01455 
<a name="l01456"></a>01456 <span class="keyword">static</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a>
<a name="l01457"></a><a class="code" href="bgp__route_8c.html#a1b806ca9b67898e23d008da9bb105064">01457</a> <a class="code" href="bgp__route_8c.html#a1b806ca9b67898e23d008da9bb105064">bgp_process_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l01458"></a>01458 {
<a name="l01459"></a>01459   <span class="keyword">struct </span><a class="code" href="structbgp__process__queue.html">bgp_process_queue</a> *pq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l01460"></a>01460   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = pq-&gt;<a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">bgp</a>;
<a name="l01461"></a>01461   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = pq-&gt;<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a>;
<a name="l01462"></a>01462   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi = pq-&gt;<a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">afi</a>;
<a name="l01463"></a>01463   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi = pq-&gt;<a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">safi</a>;
<a name="l01464"></a>01464   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *new_select;
<a name="l01465"></a>01465   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *old_select;
<a name="l01466"></a>01466   <span class="keyword">struct </span><a class="code" href="structbgp__info__pair.html">bgp_info_pair</a> old_and_new;
<a name="l01467"></a>01467   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01468"></a>01468   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *rsclient = rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a0ac92882970caab0af8599bceba8f1af">owner</a>;
<a name="l01469"></a>01469   
<a name="l01470"></a>01470   <span class="comment">/* Best path selection. */</span>
<a name="l01471"></a>01471   <a class="code" href="bgp__route_8c.html#aefec15f33656cb69b4b71702afdca06a">bgp_best_selection</a> (bgp, rn, &amp;old_and_new);
<a name="l01472"></a>01472   new_select = old_and_new.<a class="code" href="structbgp__info__pair.html#a0b78cac0a00d5e0dd592dde718bdcd01">new</a>;
<a name="l01473"></a>01473   old_select = old_and_new.<a class="code" href="structbgp__info__pair.html#a11d43d9b5328d09118af1d1199fab482">old</a>;
<a name="l01474"></a>01474 
<a name="l01475"></a>01475   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l01476"></a>01476     {
<a name="l01477"></a>01477       <span class="keywordflow">if</span> (rsclient-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
<a name="l01478"></a>01478         <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (rsclient-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, rsclient))
<a name="l01479"></a>01479           {
<a name="l01480"></a>01480             <span class="comment">/* Nothing to do. */</span>
<a name="l01481"></a>01481             <span class="keywordflow">if</span> (old_select &amp;&amp; old_select == new_select)
<a name="l01482"></a>01482               <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (old_select-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>))
<a name="l01483"></a>01483                 <span class="keywordflow">continue</span>;
<a name="l01484"></a>01484 
<a name="l01485"></a>01485             <span class="keywordflow">if</span> (old_select)
<a name="l01486"></a>01486               <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, old_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01487"></a>01487             <span class="keywordflow">if</span> (new_select)
<a name="l01488"></a>01488               {
<a name="l01489"></a>01489                 <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01490"></a>01490                 <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l01491"></a>01491               }
<a name="l01492"></a>01492 
<a name="l01493"></a>01493             <a class="code" href="bgp__route_8c.html#a68f69dcd72afe7aeb53608418fc55385">bgp_process_announce_selected</a> (rsclient, new_select, rn,
<a name="l01494"></a>01494                                            afi, safi);
<a name="l01495"></a>01495           }
<a name="l01496"></a>01496     }
<a name="l01497"></a>01497   <span class="keywordflow">else</span>
<a name="l01498"></a>01498     {
<a name="l01499"></a>01499       <span class="keywordflow">if</span> (old_select)
<a name="l01500"></a>01500     <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, old_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01501"></a>01501       <span class="keywordflow">if</span> (new_select)
<a name="l01502"></a>01502     {
<a name="l01503"></a>01503       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01504"></a>01504       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l01505"></a>01505     }
<a name="l01506"></a>01506       <a class="code" href="bgp__route_8c.html#a68f69dcd72afe7aeb53608418fc55385">bgp_process_announce_selected</a> (rsclient, new_select, rn, afi, safi);
<a name="l01507"></a>01507     }
<a name="l01508"></a>01508 
<a name="l01509"></a>01509   <span class="keywordflow">if</span> (old_select &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (old_select-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l01510"></a>01510     <a class="code" href="bgp__route_8c.html#a4475c3919634039951683b34a18b1dee">bgp_info_reap</a> (rn, old_select);
<a name="l01511"></a>01511   
<a name="l01512"></a>01512   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rn-&gt;<a class="code" href="structbgp__node.html#a1369def83e1b7e96e76aa05f1c1bb5c8">flags</a>, <a class="code" href="bgp__table_8h.html#a89387d13426993997af6b2cc02600f12">BGP_NODE_PROCESS_SCHEDULED</a>);
<a name="l01513"></a>01513   <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
<a name="l01514"></a>01514 }
<a name="l01515"></a>01515 
<a name="l01516"></a>01516 <span class="keyword">static</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a>
<a name="l01517"></a><a class="code" href="bgp__route_8c.html#a6cc2493931ee28e8ec979bf8f4bf4953">01517</a> <a class="code" href="bgp__route_8c.html#a6cc2493931ee28e8ec979bf8f4bf4953">bgp_process_main</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l01518"></a>01518 {
<a name="l01519"></a>01519   <span class="keyword">struct </span><a class="code" href="structbgp__process__queue.html">bgp_process_queue</a> *pq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l01520"></a>01520   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = pq-&gt;<a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">bgp</a>;
<a name="l01521"></a>01521   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = pq-&gt;<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a>;
<a name="l01522"></a>01522   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi = pq-&gt;<a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">afi</a>;
<a name="l01523"></a>01523   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi = pq-&gt;<a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">safi</a>;
<a name="l01524"></a>01524   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l01525"></a>01525   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *new_select;
<a name="l01526"></a>01526   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *old_select;
<a name="l01527"></a>01527   <span class="keyword">struct </span><a class="code" href="structbgp__info__pair.html">bgp_info_pair</a> old_and_new;
<a name="l01528"></a>01528   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01529"></a>01529   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01530"></a>01530   
<a name="l01531"></a>01531   <span class="comment">/* Best path selection. */</span>
<a name="l01532"></a>01532   <a class="code" href="bgp__route_8c.html#aefec15f33656cb69b4b71702afdca06a">bgp_best_selection</a> (bgp, rn, &amp;old_and_new);
<a name="l01533"></a>01533   old_select = old_and_new.<a class="code" href="structbgp__info__pair.html#a11d43d9b5328d09118af1d1199fab482">old</a>;
<a name="l01534"></a>01534   new_select = old_and_new.<a class="code" href="structbgp__info__pair.html#a0b78cac0a00d5e0dd592dde718bdcd01">new</a>;
<a name="l01535"></a>01535 
<a name="l01536"></a>01536   <span class="comment">/* Nothing to do. */</span>
<a name="l01537"></a>01537   <span class="keywordflow">if</span> (old_select &amp;&amp; old_select == new_select)
<a name="l01538"></a>01538     {
<a name="l01539"></a>01539       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (old_select-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>))
<a name="l01540"></a>01540         {
<a name="l01541"></a>01541           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (old_select-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a364ac84609844c369deadc56ea2ab24f">BGP_INFO_IGP_CHANGED</a>))
<a name="l01542"></a>01542             <a class="code" href="bgp__zebra_8c.html#a7ea53f9049b2f5a323e2991962142d63">bgp_zebra_announce</a> (p, old_select, bgp);
<a name="l01543"></a>01543           
<a name="l01544"></a>01544           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rn-&gt;<a class="code" href="structbgp__node.html#a1369def83e1b7e96e76aa05f1c1bb5c8">flags</a>, <a class="code" href="bgp__table_8h.html#a89387d13426993997af6b2cc02600f12">BGP_NODE_PROCESS_SCHEDULED</a>);
<a name="l01545"></a>01545           <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
<a name="l01546"></a>01546         }
<a name="l01547"></a>01547     }
<a name="l01548"></a>01548 
<a name="l01549"></a>01549   <span class="keywordflow">if</span> (old_select)
<a name="l01550"></a>01550     <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, old_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01551"></a>01551   <span class="keywordflow">if</span> (new_select)
<a name="l01552"></a>01552     {
<a name="l01553"></a>01553       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>);
<a name="l01554"></a>01554       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, new_select, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l01555"></a>01555     }
<a name="l01556"></a>01556 
<a name="l01557"></a>01557 
<a name="l01558"></a>01558   <span class="comment">/* Check each BGP peer. */</span>
<a name="l01559"></a>01559   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l01560"></a>01560     {
<a name="l01561"></a>01561       <a class="code" href="bgp__route_8c.html#a68f69dcd72afe7aeb53608418fc55385">bgp_process_announce_selected</a> (peer, new_select, rn, afi, safi);
<a name="l01562"></a>01562     }
<a name="l01563"></a>01563 
<a name="l01564"></a>01564   <span class="comment">/* FIB update. */</span>
<a name="l01565"></a>01565   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> &amp;&amp; ! bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> &amp;&amp;
<a name="l01566"></a>01566       ! <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#afc24478ef33bb7a27704472d7fd043c4">BGP_OPT_NO_FIB</a>))
<a name="l01567"></a>01567     {
<a name="l01568"></a>01568       <span class="keywordflow">if</span> (new_select 
<a name="l01569"></a>01569       &amp;&amp; new_select-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> 
<a name="l01570"></a>01570       &amp;&amp; new_select-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
<a name="l01571"></a>01571     <a class="code" href="bgp__zebra_8c.html#a7ea53f9049b2f5a323e2991962142d63">bgp_zebra_announce</a> (p, new_select, bgp);
<a name="l01572"></a>01572       <span class="keywordflow">else</span>
<a name="l01573"></a>01573     {
<a name="l01574"></a>01574       <span class="comment">/* Withdraw the route from the kernel. */</span>
<a name="l01575"></a>01575       <span class="keywordflow">if</span> (old_select 
<a name="l01576"></a>01576           &amp;&amp; old_select-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l01577"></a>01577           &amp;&amp; old_select-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
<a name="l01578"></a>01578         <a class="code" href="bgp__zebra_8c.html#a067b7ce285841e44d9fa9d827bb83740">bgp_zebra_withdraw</a> (p, old_select);
<a name="l01579"></a>01579     }
<a name="l01580"></a>01580     }
<a name="l01581"></a>01581     
<a name="l01582"></a>01582   <span class="comment">/* Reap old select bgp_info, it it has been removed */</span>
<a name="l01583"></a>01583   <span class="keywordflow">if</span> (old_select &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (old_select-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l01584"></a>01584     <a class="code" href="bgp__route_8c.html#a4475c3919634039951683b34a18b1dee">bgp_info_reap</a> (rn, old_select);
<a name="l01585"></a>01585   
<a name="l01586"></a>01586   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rn-&gt;<a class="code" href="structbgp__node.html#a1369def83e1b7e96e76aa05f1c1bb5c8">flags</a>, <a class="code" href="bgp__table_8h.html#a89387d13426993997af6b2cc02600f12">BGP_NODE_PROCESS_SCHEDULED</a>);
<a name="l01587"></a>01587   <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
<a name="l01588"></a>01588 }
<a name="l01589"></a>01589 
<a name="l01590"></a>01590 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01591"></a><a class="code" href="bgp__route_8c.html#af596ac3e45fe6f173643ea336dd454d4">01591</a> <a class="code" href="bgp__route_8c.html#af596ac3e45fe6f173643ea336dd454d4">bgp_processq_del</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l01592"></a>01592 {
<a name="l01593"></a>01593   <span class="keyword">struct </span><a class="code" href="structbgp__process__queue.html">bgp_process_queue</a> *pq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l01594"></a>01594   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table = pq-&gt;<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a>-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>;
<a name="l01595"></a>01595   
<a name="l01596"></a>01596   <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a> (pq-&gt;<a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">bgp</a>);
<a name="l01597"></a>01597   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (pq-&gt;<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a>);
<a name="l01598"></a>01598   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (table);
<a name="l01599"></a>01599   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4db5edc8be06ce399a3625397401960f">MTYPE_BGP_PROCESS_QUEUE</a>, pq);
<a name="l01600"></a>01600 }
<a name="l01601"></a>01601 
<a name="l01602"></a>01602 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01603"></a><a class="code" href="bgp__route_8c.html#a6b080892b6ca3f0108ab232772574a3f">01603</a> <a class="code" href="bgp__route_8c.html#a6b080892b6ca3f0108ab232772574a3f">bgp_process_queue_init</a> (<span class="keywordtype">void</span>)
<a name="l01604"></a>01604 {
<a name="l01605"></a>01605   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>
<a name="l01606"></a>01606     = <a class="code" href="workqueue_8c.html#a8b50511bbc60426f371822c0c7aee5cc">work_queue_new</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a>, <span class="stringliteral">&quot;process_main_queue&quot;</span>);
<a name="l01607"></a>01607   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>
<a name="l01608"></a>01608     = <a class="code" href="workqueue_8c.html#a8b50511bbc60426f371822c0c7aee5cc">work_queue_new</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a>, <span class="stringliteral">&quot;process_rsclient_queue&quot;</span>);
<a name="l01609"></a>01609   
<a name="l01610"></a>01610   <span class="keywordflow">if</span> ( !(<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a> &amp;&amp; <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>) )
<a name="l01611"></a>01611     {
<a name="l01612"></a>01612       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: Failed to allocate work queue&quot;</span>, __func__);
<a name="l01613"></a>01613       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l01614"></a>01614     }
<a name="l01615"></a>01615   
<a name="l01616"></a>01616   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#aabcb370748f886f6a167ea3b13a6d372">workfunc</a> = &amp;<a class="code" href="bgp__route_8c.html#a6cc2493931ee28e8ec979bf8f4bf4953">bgp_process_main</a>;
<a name="l01617"></a>01617   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#aabcb370748f886f6a167ea3b13a6d372">workfunc</a> = &amp;<a class="code" href="bgp__route_8c.html#a1b806ca9b67898e23d008da9bb105064">bgp_process_rsclient</a>;
<a name="l01618"></a>01618   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#ae2fdda0df1d6e600e2b4e7849740e9d2">del_item_data</a> = &amp;<a class="code" href="bgp__route_8c.html#af596ac3e45fe6f173643ea336dd454d4">bgp_processq_del</a>;
<a name="l01619"></a>01619   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#ae2fdda0df1d6e600e2b4e7849740e9d2">del_item_data</a>
<a name="l01620"></a>01620     =  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#ae2fdda0df1d6e600e2b4e7849740e9d2">del_item_data</a>;
<a name="l01621"></a>01621   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a74334af11b2e664ed8cd47fa13a76881">max_retries</a>
<a name="l01622"></a>01622     = <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a74334af11b2e664ed8cd47fa13a76881">max_retries</a> = 0;
<a name="l01623"></a>01623   <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a6f998e18d62286e5b77844faf7c3ded2">hold</a>
<a name="l01624"></a>01624     = <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a6f998e18d62286e5b77844faf7c3ded2">hold</a> = 50;
<a name="l01625"></a>01625 }
<a name="l01626"></a>01626 
<a name="l01627"></a>01627 <span class="keywordtype">void</span>
<a name="l01628"></a><a class="code" href="bgp__route_8h.html#a2ea14a69ee3c2a03b1bbee2c3961261d">01628</a> <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>)
<a name="l01629"></a>01629 {
<a name="l01630"></a>01630   <span class="keyword">struct </span><a class="code" href="structbgp__process__queue.html">bgp_process_queue</a> *pqnode;
<a name="l01631"></a>01631   
<a name="l01632"></a>01632   <span class="comment">/* already scheduled for processing? */</span>
<a name="l01633"></a>01633   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rn-&gt;<a class="code" href="structbgp__node.html#a1369def83e1b7e96e76aa05f1c1bb5c8">flags</a>, <a class="code" href="bgp__table_8h.html#a89387d13426993997af6b2cc02600f12">BGP_NODE_PROCESS_SCHEDULED</a>))
<a name="l01634"></a>01634     <span class="keywordflow">return</span>;
<a name="l01635"></a>01635   
<a name="l01636"></a>01636   <span class="keywordflow">if</span> ( (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ||
<a name="l01637"></a>01637        (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) )
<a name="l01638"></a>01638     <a class="code" href="bgp__route_8c.html#a6b080892b6ca3f0108ab232772574a3f">bgp_process_queue_init</a> ();
<a name="l01639"></a>01639   
<a name="l01640"></a>01640   pqnode = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4db5edc8be06ce399a3625397401960f">MTYPE_BGP_PROCESS_QUEUE</a>, 
<a name="l01641"></a>01641                     <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__process__queue.html">bgp_process_queue</a>));
<a name="l01642"></a>01642   <span class="keywordflow">if</span> (!pqnode)
<a name="l01643"></a>01643     <span class="keywordflow">return</span>;
<a name="l01644"></a>01644 
<a name="l01645"></a>01645   <span class="comment">/* all unlocked in bgp_processq_del */</span>
<a name="l01646"></a>01646   <a class="code" href="bgp__table_8c.html#a31e5a9590da2ec7f671d9014a714a885">bgp_table_lock</a> (rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>);
<a name="l01647"></a>01647   pqnode-&gt;<a class="code" href="structbgp__process__queue.html#abf324bfeb9698771f6582fd36f20b916">rn</a> = <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
<a name="l01648"></a>01648   pqnode-&gt;<a class="code" href="structbgp__process__queue.html#a9afd710e5c43ffcfebd9e448ede1ac3f">bgp</a> = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01649"></a>01649   <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (bgp);
<a name="l01650"></a>01650   pqnode-&gt;<a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">afi</a> = <a class="code" href="structbgp__process__queue.html#aab23ff9ce503d676a383be8d9b456430">afi</a>;
<a name="l01651"></a>01651   pqnode-&gt;<a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">safi</a> = <a class="code" href="structbgp__process__queue.html#aaf6f5846c4654daf55532d4cdc63ccd8">safi</a>;
<a name="l01652"></a>01652   
<a name="l01653"></a>01653   <span class="keywordflow">switch</span> (rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5099bb3c9ff5831a90846db78724e652">type</a>)
<a name="l01654"></a>01654     {
<a name="l01655"></a>01655       <span class="keywordflow">case</span> <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>:
<a name="l01656"></a>01656         <a class="code" href="workqueue_8c.html#a193fb769a4d04f3c160c623fd07dfb21">work_queue_add</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>, pqnode);
<a name="l01657"></a>01657         <span class="keywordflow">break</span>;
<a name="l01658"></a>01658       <span class="keywordflow">case</span> <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0">BGP_TABLE_RSCLIENT</a>:
<a name="l01659"></a>01659         <a class="code" href="workqueue_8c.html#a193fb769a4d04f3c160c623fd07dfb21">work_queue_add</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>, pqnode);
<a name="l01660"></a>01660         <span class="keywordflow">break</span>;
<a name="l01661"></a>01661     }
<a name="l01662"></a>01662   
<a name="l01663"></a>01663   <span class="keywordflow">return</span>;
<a name="l01664"></a>01664 }
<a name="l01665"></a>01665 
<a name="l01666"></a>01666 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01667"></a><a class="code" href="bgp__route_8c.html#aa5fa9e55ce4581d5456d115a3f0a38a6">01667</a> <a class="code" href="bgp__route_8c.html#aa5fa9e55ce4581d5456d115a3f0a38a6">bgp_maximum_prefix_restart_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01668"></a>01668 {
<a name="l01669"></a>01669   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01670"></a>01670 
<a name="l01671"></a>01671   peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l01672"></a>01672   peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01673"></a>01673 
<a name="l01674"></a>01674   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01675"></a>01675     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer expired, restore peering&quot;</span>,
<a name="l01676"></a>01676         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01677"></a>01677 
<a name="l01678"></a>01678   <a class="code" href="bgpd_8c.html#aeaa590e7313d03ba1c7418ca2016bf90">peer_clear</a> (peer);
<a name="l01679"></a>01679 
<a name="l01680"></a>01680   <span class="keywordflow">return</span> 0;
<a name="l01681"></a>01681 }
<a name="l01682"></a>01682 
<a name="l01683"></a>01683 <span class="keywordtype">int</span>
<a name="l01684"></a><a class="code" href="bgp__route_8h.html#abc5dfdd23721464c47397f09e2a8d40d">01684</a> <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, 
<a name="l01685"></a>01685                              <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> always)
<a name="l01686"></a>01686 {
<a name="l01687"></a>01687   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>))
<a name="l01688"></a>01688     <span class="keywordflow">return</span> 0;
<a name="l01689"></a>01689 
<a name="l01690"></a>01690   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi] &gt; peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi])
<a name="l01691"></a>01691     {
<a name="l01692"></a>01692       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9ffcb5ccd61d7cdd5809ff789a5f3ee6">PEER_STATUS_PREFIX_LIMIT</a>)
<a name="l01693"></a>01693          &amp;&amp; ! always)
<a name="l01694"></a>01694        <span class="keywordflow">return</span> 0;
<a name="l01695"></a>01695 
<a name="l01696"></a>01696       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_INFO,
<a name="l01697"></a>01697         <span class="stringliteral">&quot;%%MAXPFXEXCEED: No. of %s prefix received from %s %ld exceed, &quot;</span>
<a name="l01698"></a>01698         <span class="stringliteral">&quot;limit %ld&quot;</span>, <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01699"></a>01699         peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi], peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]);
<a name="l01700"></a>01700       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9ffcb5ccd61d7cdd5809ff789a5f3ee6">PEER_STATUS_PREFIX_LIMIT</a>);
<a name="l01701"></a>01701 
<a name="l01702"></a>01702       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
<a name="l01703"></a>01703        <span class="keywordflow">return</span> 0;
<a name="l01704"></a>01704 
<a name="l01705"></a>01705       {
<a name="l01706"></a>01706        u_int8_t ndata[7];
<a name="l01707"></a>01707 
<a name="l01708"></a>01708        <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01709"></a>01709          safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
<a name="l01710"></a>01710          
<a name="l01711"></a>01711        ndata[0] = (afi &gt;&gt;  8);
<a name="l01712"></a>01712        ndata[1] = afi;
<a name="l01713"></a>01713        ndata[2] = safi;
<a name="l01714"></a>01714        ndata[3] = (peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] &gt;&gt; 24);
<a name="l01715"></a>01715        ndata[4] = (peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] &gt;&gt; 16);
<a name="l01716"></a>01716        ndata[5] = (peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] &gt;&gt; 8);
<a name="l01717"></a>01717        ndata[6] = (peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]);
<a name="l01718"></a>01718 
<a name="l01719"></a>01719        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>);
<a name="l01720"></a>01720        <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01721"></a>01721                                   <a class="code" href="bgpd_8h.html#abcf95c6082bef31695fe404a22ff070c">BGP_NOTIFY_CEASE_MAX_PREFIX</a>, ndata, 7);
<a name="l01722"></a>01722       }
<a name="l01723"></a>01723 
<a name="l01724"></a>01724       <span class="comment">/* restart timer start */</span>
<a name="l01725"></a>01725       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi])
<a name="l01726"></a>01726     {
<a name="l01727"></a>01727       peer-&gt;<a class="code" href="structpeer.html#a5fd66e2c0a312e45d6eb755d4025ffd2">v_pmax_restart</a> = peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] * 60;
<a name="l01728"></a>01728 
<a name="l01729"></a>01729       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01730"></a>01730         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer started for %d secs&quot;</span>,
<a name="l01731"></a>01731             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#a5fd66e2c0a312e45d6eb755d4025ffd2">v_pmax_restart</a>);
<a name="l01732"></a>01732 
<a name="l01733"></a>01733       <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>, <a class="code" href="bgp__route_8c.html#aa5fa9e55ce4581d5456d115a3f0a38a6">bgp_maximum_prefix_restart_timer</a>,
<a name="l01734"></a>01734             peer-&gt;<a class="code" href="structpeer.html#a5fd66e2c0a312e45d6eb755d4025ffd2">v_pmax_restart</a>);
<a name="l01735"></a>01735     }
<a name="l01736"></a>01736 
<a name="l01737"></a>01737       <span class="keywordflow">return</span> 1;
<a name="l01738"></a>01738     }
<a name="l01739"></a>01739   <span class="keywordflow">else</span>
<a name="l01740"></a>01740     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9ffcb5ccd61d7cdd5809ff789a5f3ee6">PEER_STATUS_PREFIX_LIMIT</a>);
<a name="l01741"></a>01741 
<a name="l01742"></a>01742   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi] &gt; (peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] * peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] / 100))
<a name="l01743"></a>01743     {
<a name="l01744"></a>01744       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a8ad5053ef329eaa221d650cdda116b61">PEER_STATUS_PREFIX_THRESHOLD</a>)
<a name="l01745"></a>01745          &amp;&amp; ! always)
<a name="l01746"></a>01746        <span class="keywordflow">return</span> 0;
<a name="l01747"></a>01747 
<a name="l01748"></a>01748       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_INFO,
<a name="l01749"></a>01749         <span class="stringliteral">&quot;%%MAXPFX: No. of %s prefix received from %s reaches %ld, max %ld&quot;</span>,
<a name="l01750"></a>01750         <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi],
<a name="l01751"></a>01751         peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]);
<a name="l01752"></a>01752       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a8ad5053ef329eaa221d650cdda116b61">PEER_STATUS_PREFIX_THRESHOLD</a>);
<a name="l01753"></a>01753     }
<a name="l01754"></a>01754   <span class="keywordflow">else</span>
<a name="l01755"></a>01755     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a8ad5053ef329eaa221d650cdda116b61">PEER_STATUS_PREFIX_THRESHOLD</a>);
<a name="l01756"></a>01756   <span class="keywordflow">return</span> 0;
<a name="l01757"></a>01757 }
<a name="l01758"></a>01758 
<a name="l01759"></a>01759 <span class="comment">/* Unconditionally remove the route from the RIB, without taking</span>
<a name="l01760"></a>01760 <span class="comment"> * damping into consideration (eg, because the session went down)</span>
<a name="l01761"></a>01761 <span class="comment"> */</span>
<a name="l01762"></a>01762 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01763"></a><a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">01763</a> <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l01764"></a>01764         <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01765"></a>01765 {
<a name="l01766"></a>01766   <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, afi, safi);
<a name="l01767"></a>01767   
<a name="l01768"></a>01768   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l01769"></a>01769     <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri); <span class="comment">/* keep historical info */</span>
<a name="l01770"></a>01770     
<a name="l01771"></a>01771   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, rn, afi, safi);
<a name="l01772"></a>01772 }
<a name="l01773"></a>01773 
<a name="l01774"></a>01774 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01775"></a><a class="code" href="bgp__route_8c.html#a97b525c43ec4d1f2a86b597317b78051">01775</a> <a class="code" href="bgp__route_8c.html#a97b525c43ec4d1f2a86b597317b78051">bgp_rib_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l01776"></a>01776           <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01777"></a>01777 {
<a name="l01778"></a>01778   <span class="keywordtype">int</span> <a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = <a class="code" href="bgp__damp_8h.html#a37278c4b7ba961f33645a14067033faa">BGP_DAMP_NONE</a>;
<a name="l01779"></a>01779 
<a name="l01780"></a>01780   <span class="comment">/* apply dampening, if result is suppressed, we&#39;ll be retaining </span>
<a name="l01781"></a>01781 <span class="comment">   * the bgp_info in the RIB for historical reference.</span>
<a name="l01782"></a>01782 <span class="comment">   */</span>
<a name="l01783"></a>01783   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
<a name="l01784"></a>01784       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l01785"></a>01785     <span class="keywordflow">if</span> ( (status = <a class="code" href="bgp__damp_8c.html#a6495e2d88335e918ccca6f80fa52cee9">bgp_damp_withdraw</a> (ri, rn, afi, safi, 0)) 
<a name="l01786"></a>01786          == <a class="code" href="bgp__damp_8h.html#a0f58b7873622a8c3d2e28d38e30719e4">BGP_DAMP_SUPPRESSED</a>)
<a name="l01787"></a>01787       {
<a name="l01788"></a>01788         <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, afi, safi);
<a name="l01789"></a>01789         <span class="keywordflow">return</span>;
<a name="l01790"></a>01790       }
<a name="l01791"></a>01791     
<a name="l01792"></a>01792   <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (rn, ri, peer, afi, safi);
<a name="l01793"></a>01793 }
<a name="l01794"></a>01794 
<a name="l01795"></a>01795 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01796"></a><a class="code" href="bgp__route_8c.html#a35a6938b2231aa460e1ce4a1d767b89f">01796</a> <a class="code" href="bgp__route_8c.html#a35a6938b2231aa460e1ce4a1d767b89f">bgp_update_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l01797"></a>01797       <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
<a name="l01798"></a>01798       <span class="keywordtype">int</span> sub_type, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l01799"></a>01799 {
<a name="l01800"></a>01800   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l01801"></a>01801   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01802"></a>01802   <span class="keyword">struct </span>attr new_attr = { 0 };
<a name="l01803"></a>01803   <span class="keyword">struct </span>attr *attr_new;
<a name="l01804"></a>01804   <span class="keyword">struct </span>attr *attr_new2;
<a name="l01805"></a>01805   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l01806"></a>01806   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l01807"></a>01807   <span class="keyword">const</span> <span class="keywordtype">char</span> *reason;
<a name="l01808"></a>01808   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l01809"></a>01809 
<a name="l01810"></a>01810   <span class="comment">/* Do not insert announces from a rsclient into its own &#39;bgp_table&#39;. */</span>
<a name="l01811"></a>01811   <span class="keywordflow">if</span> (peer == rsclient)
<a name="l01812"></a>01812     <span class="keywordflow">return</span>;
<a name="l01813"></a>01813 
<a name="l01814"></a>01814   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l01815"></a>01815   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (rsclient-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l01816"></a>01816 
<a name="l01817"></a>01817   <span class="comment">/* Check previously received route. */</span>
<a name="l01818"></a>01818   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l01819"></a>01819     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == sub_type)
<a name="l01820"></a>01820       <span class="keywordflow">break</span>;
<a name="l01821"></a>01821 
<a name="l01822"></a>01822   <span class="comment">/* AS path loop check. */</span>
<a name="l01823"></a>01823   <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, rsclient-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>) &gt; peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi])
<a name="l01824"></a>01824     {
<a name="l01825"></a>01825       reason = <span class="stringliteral">&quot;as-path contains our own AS;&quot;</span>;
<a name="l01826"></a>01826       <span class="keywordflow">goto</span> filtered;
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828 
<a name="l01829"></a>01829   <span class="comment">/* Route reflector originator ID check.  */</span>
<a name="l01830"></a>01830   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>)
<a name="l01831"></a>01831       &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rsclient-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>))
<a name="l01832"></a>01832     {
<a name="l01833"></a>01833       reason = <span class="stringliteral">&quot;originator is us;&quot;</span>;
<a name="l01834"></a>01834       <span class="keywordflow">goto</span> filtered;
<a name="l01835"></a>01835     }
<a name="l01836"></a>01836   
<a name="l01837"></a>01837   <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (&amp;new_attr, attr);
<a name="l01838"></a>01838 
<a name="l01839"></a>01839   <span class="comment">/* Apply export policy. */</span>
<a name="l01840"></a>01840   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>) &amp;&amp;
<a name="l01841"></a>01841         <a class="code" href="bgp__route_8c.html#ad1c9f872f6253932e08bbc9d071f39c3">bgp_export_modifier</a> (rsclient, peer, p, &amp;new_attr, afi, safi) == <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>)
<a name="l01842"></a>01842     {
<a name="l01843"></a>01843       reason = <span class="stringliteral">&quot;export-policy;&quot;</span>;
<a name="l01844"></a>01844       <span class="keywordflow">goto</span> filtered;
<a name="l01845"></a>01845     }
<a name="l01846"></a>01846 
<a name="l01847"></a>01847   attr_new2 = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;new_attr);
<a name="l01848"></a>01848   
<a name="l01849"></a>01849   <span class="comment">/* Apply import policy. */</span>
<a name="l01850"></a>01850   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a0b543935bc92b0cd8fa61813637f0179">bgp_import_modifier</a> (rsclient, peer, p, &amp;new_attr, afi, safi) == <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>)
<a name="l01851"></a>01851     {
<a name="l01852"></a>01852       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new2);
<a name="l01853"></a>01853 
<a name="l01854"></a>01854       reason = <span class="stringliteral">&quot;import-policy;&quot;</span>;
<a name="l01855"></a>01855       <span class="keywordflow">goto</span> filtered;
<a name="l01856"></a>01856     }
<a name="l01857"></a>01857 
<a name="l01858"></a>01858   attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;new_attr);
<a name="l01859"></a>01859   <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new2);
<a name="l01860"></a>01860 
<a name="l01861"></a>01861   <span class="comment">/* IPv4 unicast next hop check.  */</span>
<a name="l01862"></a>01862   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l01863"></a>01863     {
<a name="l01864"></a>01864      <span class="comment">/* Next hop must not be 0.0.0.0 nor Class E address. */</span>
<a name="l01865"></a>01865       <span class="keywordflow">if</span> (new_attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0
<a name="l01866"></a>01866          || ntohl (new_attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr) &gt;= 0xe0000000)
<a name="l01867"></a>01867        {
<a name="l01868"></a>01868          <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l01869"></a>01869 
<a name="l01870"></a>01870          reason = <span class="stringliteral">&quot;martian next-hop;&quot;</span>;
<a name="l01871"></a>01871          <span class="keywordflow">goto</span> filtered;
<a name="l01872"></a>01872        }
<a name="l01873"></a>01873     }
<a name="l01874"></a>01874   
<a name="l01875"></a>01875   <span class="comment">/* new_attr isn&#39;t passed to any functions after here */</span>
<a name="l01876"></a>01876   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l01877"></a>01877   
<a name="l01878"></a>01878   <span class="comment">/* If the update is implicit withdraw. */</span>
<a name="l01879"></a>01879   <span class="keywordflow">if</span> (ri)
<a name="l01880"></a>01880     {
<a name="l01881"></a>01881       ri-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l01882"></a>01882 
<a name="l01883"></a>01883       <span class="comment">/* Same attribute comes in. */</span>
<a name="l01884"></a>01884       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>)
<a name="l01885"></a>01885           &amp;&amp; <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, attr_new))
<a name="l01886"></a>01886         {
<a name="l01887"></a>01887 
<a name="l01888"></a>01888           <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l01889"></a>01889 
<a name="l01890"></a>01890           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01891"></a>01891             <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l01892"></a>01892                     <span class="stringliteral">&quot;%s rcvd %s/%d for RS-client %s...duplicate ignored&quot;</span>,
<a name="l01893"></a>01893                     peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01894"></a>01894                     <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01895"></a>01895                     p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01896"></a>01896 
<a name="l01897"></a>01897           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l01898"></a>01898           <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l01899"></a>01899 
<a name="l01900"></a>01900           <span class="keywordflow">return</span>;
<a name="l01901"></a>01901         }
<a name="l01902"></a>01902 
<a name="l01903"></a>01903       <span class="comment">/* Withdraw/Announce before we fully processed the withdraw */</span>
<a name="l01904"></a>01904       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l01905"></a>01905         <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a> (rn, ri);
<a name="l01906"></a>01906       
<a name="l01907"></a>01907       <span class="comment">/* Received Logging. */</span>
<a name="l01908"></a>01908       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01909"></a>01909         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d for RS-client %s&quot;</span>,
<a name="l01910"></a>01910                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01911"></a>01911                 <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01912"></a>01912                 p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01913"></a>01913 
<a name="l01914"></a>01914       <span class="comment">/* The attribute is changed. */</span>
<a name="l01915"></a>01915       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l01916"></a>01916 
<a name="l01917"></a>01917       <span class="comment">/* Update to new attribute.  */</span>
<a name="l01918"></a>01918       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l01919"></a>01919       ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr_new;
<a name="l01920"></a>01920 
<a name="l01921"></a>01921       <span class="comment">/* Update MPLS tag.  */</span>
<a name="l01922"></a>01922       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01923"></a>01923         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> ((<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (ri))-&gt;tag, tag, 3);
<a name="l01924"></a>01924 
<a name="l01925"></a>01925       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l01926"></a>01926 
<a name="l01927"></a>01927       <span class="comment">/* Process change. */</span>
<a name="l01928"></a>01928       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l01929"></a>01929       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l01930"></a>01930 
<a name="l01931"></a>01931       <span class="keywordflow">return</span>;
<a name="l01932"></a>01932     }
<a name="l01933"></a>01933 
<a name="l01934"></a>01934   <span class="comment">/* Received Logging. */</span>
<a name="l01935"></a>01935   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01936"></a>01936     {
<a name="l01937"></a>01937       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d for RS-client %s&quot;</span>,
<a name="l01938"></a>01938               peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01939"></a>01939               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01940"></a>01940               p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01941"></a>01941     }
<a name="l01942"></a>01942 
<a name="l01943"></a>01943   <span class="comment">/* Make new BGP info. */</span>
<a name="l01944"></a>01944   <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l01945"></a>01945   <span class="keyword">new</span>-&gt;type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01946"></a>01946   <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a>;
<a name="l01947"></a>01947   <span class="keyword">new</span>-&gt;peer = <a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l01948"></a>01948   <span class="keyword">new</span>-&gt;attr = attr_new;
<a name="l01949"></a>01949   <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l01950"></a>01950 
<a name="l01951"></a>01951   <span class="comment">/* Update MPLS tag. */</span>
<a name="l01952"></a>01952   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01953"></a>01953     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> ((<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (<span class="keyword">new</span>))-&gt;tag, tag, 3);
<a name="l01954"></a>01954 
<a name="l01955"></a>01955   <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, <span class="keyword">new</span>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l01956"></a>01956 
<a name="l01957"></a>01957   <span class="comment">/* Register new BGP information. */</span>
<a name="l01958"></a>01958   <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l01959"></a>01959   
<a name="l01960"></a>01960   <span class="comment">/* route_node_get lock */</span>
<a name="l01961"></a>01961   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l01962"></a>01962   
<a name="l01963"></a>01963   <span class="comment">/* Process change. */</span>
<a name="l01964"></a>01964   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l01965"></a>01965   
<a name="l01966"></a>01966   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l01967"></a>01967   
<a name="l01968"></a>01968   <span class="keywordflow">return</span>;
<a name="l01969"></a>01969 
<a name="l01970"></a>01970  filtered: 
<a name="l01971"></a>01971 
<a name="l01972"></a>01972   <span class="comment">/* This BGP update is filtered.  Log the reason then update BGP entry.  */</span>
<a name="l01973"></a>01973   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01974"></a>01974         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l01975"></a>01975         <span class="stringliteral">&quot;%s rcvd UPDATE about %s/%d -- DENIED for RS-client %s due to: %s&quot;</span>,
<a name="l01976"></a>01976         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01977"></a>01977         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l01978"></a>01978         p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, reason);
<a name="l01979"></a>01979 
<a name="l01980"></a>01980   <span class="keywordflow">if</span> (ri)
<a name="l01981"></a>01981     <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (rn, ri, peer, afi, safi);
<a name="l01982"></a>01982 
<a name="l01983"></a>01983   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l01984"></a>01984   
<a name="l01985"></a>01985   <span class="keywordflow">if</span> (new_attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l01986"></a>01986     <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l01987"></a>01987   
<a name="l01988"></a>01988   <span class="keywordflow">return</span>;
<a name="l01989"></a>01989 }
<a name="l01990"></a>01990 
<a name="l01991"></a>01991 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01992"></a><a class="code" href="bgp__route_8c.html#a6f60f6d4e63b4cb347a05b4b07fb36c9">01992</a> <a class="code" href="bgp__route_8c.html#a6f60f6d4e63b4cb347a05b4b07fb36c9">bgp_withdraw_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l01993"></a>01993       <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a>,
<a name="l01994"></a>01994       <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l01995"></a>01995 {
<a name="l01996"></a>01996   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l01997"></a>01997   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l01998"></a>01998   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l01999"></a>01999 
<a name="l02000"></a>02000   <span class="keywordflow">if</span> (rsclient == peer)
<a name="l02001"></a>02001     <span class="keywordflow">return</span>;
<a name="l02002"></a>02002 
<a name="l02003"></a>02003   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (rsclient-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l02004"></a>02004 
<a name="l02005"></a>02005   <span class="comment">/* Lookup withdrawn route. */</span>
<a name="l02006"></a>02006   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02007"></a>02007     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == sub_type)
<a name="l02008"></a>02008       <span class="keywordflow">break</span>;
<a name="l02009"></a>02009 
<a name="l02010"></a>02010   <span class="comment">/* Withdraw specified route from routing table. */</span>
<a name="l02011"></a>02011   <span class="keywordflow">if</span> (ri &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l02012"></a>02012     <a class="code" href="bgp__route_8c.html#a97b525c43ec4d1f2a86b597317b78051">bgp_rib_withdraw</a> (rn, ri, peer, afi, safi);
<a name="l02013"></a>02013   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l02014"></a>02014     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l02015"></a>02015           <span class="stringliteral">&quot;%s Can&#39;t find the route %s/%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02016"></a>02016           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02017"></a>02017           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02018"></a>02018 
<a name="l02019"></a>02019   <span class="comment">/* Unlock bgp_node_get() lock. */</span>
<a name="l02020"></a>02020   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02021"></a>02021 }
<a name="l02022"></a>02022 
<a name="l02023"></a>02023 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02024"></a><a class="code" href="bgp__route_8c.html#a2a2424f26bef521959d23ff57611f86a">02024</a> <a class="code" href="bgp__route_8c.html#a2a2424f26bef521959d23ff57611f86a">bgp_update_main</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l02025"></a>02025         <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a>,
<a name="l02026"></a>02026         <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag, <span class="keywordtype">int</span> soft_reconfig)
<a name="l02027"></a>02027 {
<a name="l02028"></a>02028   <span class="keywordtype">int</span> ret;
<a name="l02029"></a>02029   <span class="keywordtype">int</span> aspath_loop_count = 0;
<a name="l02030"></a>02030   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02031"></a>02031   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02032"></a>02032   <span class="keyword">struct </span>attr new_attr = { 0 };
<a name="l02033"></a>02033   <span class="keyword">struct </span>attr *attr_new;
<a name="l02034"></a>02034   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02035"></a>02035   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l02036"></a>02036   <span class="keyword">const</span> <span class="keywordtype">char</span> *reason;
<a name="l02037"></a>02037   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l02038"></a>02038 
<a name="l02039"></a>02039   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l02040"></a>02040   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l02041"></a>02041   
<a name="l02042"></a>02042   <span class="comment">/* When peer&#39;s soft reconfiguration enabled.  Record input packet in</span>
<a name="l02043"></a>02043 <span class="comment">     Adj-RIBs-In.  */</span>
<a name="l02044"></a>02044   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
<a name="l02045"></a>02045       &amp;&amp; peer != bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> &amp;&amp; ! soft_reconfig)
<a name="l02046"></a>02046     <a class="code" href="bgp__advertise_8c.html#a77bcda74262e0f3ac53d98898bc76a55">bgp_adj_in_set</a> (rn, peer, attr);
<a name="l02047"></a>02047 
<a name="l02048"></a>02048   <span class="comment">/* Check previously received route. */</span>
<a name="l02049"></a>02049   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02050"></a>02050     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == sub_type)
<a name="l02051"></a>02051       <span class="keywordflow">break</span>;
<a name="l02052"></a>02052 
<a name="l02053"></a>02053   <span class="comment">/* AS path local-as loop check. */</span>
<a name="l02054"></a>02054   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l02055"></a>02055     {
<a name="l02056"></a>02056       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>))
<a name="l02057"></a>02057     aspath_loop_count = 1;
<a name="l02058"></a>02058 
<a name="l02059"></a>02059       <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>) &gt; aspath_loop_count) 
<a name="l02060"></a>02060     {
<a name="l02061"></a>02061       reason = <span class="stringliteral">&quot;as-path contains our own AS;&quot;</span>;
<a name="l02062"></a>02062       <span class="keywordflow">goto</span> filtered;
<a name="l02063"></a>02063     }
<a name="l02064"></a>02064     }
<a name="l02065"></a>02065 
<a name="l02066"></a>02066   <span class="comment">/* AS path loop check. */</span>
<a name="l02067"></a>02067   <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>) &gt; peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi]
<a name="l02068"></a>02068       || (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>)
<a name="l02069"></a>02069       &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a09c83e4313915a5191a19439186f2280">aspath_loop_check</a>(attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>)
<a name="l02070"></a>02070       &gt; peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi]))
<a name="l02071"></a>02071     {
<a name="l02072"></a>02072       reason = <span class="stringliteral">&quot;as-path contains our own AS;&quot;</span>;
<a name="l02073"></a>02073       <span class="keywordflow">goto</span> filtered;
<a name="l02074"></a>02074     }
<a name="l02075"></a>02075 
<a name="l02076"></a>02076   <span class="comment">/* Route reflector originator ID check.  */</span>
<a name="l02077"></a>02077   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>)
<a name="l02078"></a>02078       &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>))
<a name="l02079"></a>02079     {
<a name="l02080"></a>02080       reason = <span class="stringliteral">&quot;originator is us;&quot;</span>;
<a name="l02081"></a>02081       <span class="keywordflow">goto</span> filtered;
<a name="l02082"></a>02082     }
<a name="l02083"></a>02083 
<a name="l02084"></a>02084   <span class="comment">/* Route reflector cluster ID check.  */</span>
<a name="l02085"></a>02085   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a7e09865b6ccdcb2325e714cffa6ed5f2">bgp_cluster_filter</a> (peer, attr))
<a name="l02086"></a>02086     {
<a name="l02087"></a>02087       reason = <span class="stringliteral">&quot;reflected from the same cluster;&quot;</span>;
<a name="l02088"></a>02088       <span class="keywordflow">goto</span>  filtered;
<a name="l02089"></a>02089     }
<a name="l02090"></a>02090 
<a name="l02091"></a>02091   <span class="comment">/* Apply incoming filter.  */</span>
<a name="l02092"></a>02092   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a779dd558c9e37130d6ac9029b74cdf12">bgp_input_filter</a> (peer, p, attr, afi, safi) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l02093"></a>02093     {
<a name="l02094"></a>02094       reason = <span class="stringliteral">&quot;filter;&quot;</span>;
<a name="l02095"></a>02095       <span class="keywordflow">goto</span> filtered;
<a name="l02096"></a>02096     }
<a name="l02097"></a>02097 
<a name="l02098"></a>02098   <span class="comment">/* Apply incoming route-map. */</span>
<a name="l02099"></a>02099   <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (&amp;new_attr, attr);
<a name="l02100"></a>02100 
<a name="l02101"></a>02101   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a2f762007f1c8ecfd0a06a8430d1e0523">bgp_input_modifier</a> (peer, p, &amp;new_attr, afi, safi) == <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>)
<a name="l02102"></a>02102     {
<a name="l02103"></a>02103       reason = <span class="stringliteral">&quot;route-map;&quot;</span>;
<a name="l02104"></a>02104       <span class="keywordflow">goto</span> filtered;
<a name="l02105"></a>02105     }
<a name="l02106"></a>02106 
<a name="l02107"></a>02107   <span class="comment">/* IPv4 unicast next hop check.  */</span>
<a name="l02108"></a>02108   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l02109"></a>02109     {
<a name="l02110"></a>02110       <span class="comment">/* If the peer is EBGP and nexthop is not on connected route,</span>
<a name="l02111"></a>02111 <span class="comment">     discard it.  */</span>
<a name="l02112"></a>02112       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> == 1
<a name="l02113"></a>02113       &amp;&amp; ! <a class="code" href="bgp__nexthop_8c.html#a30cf2195d772dfb889c717a86cd19629">bgp_nexthop_check_ebgp</a> (afi, &amp;new_attr)
<a name="l02114"></a>02114       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
<a name="l02115"></a>02115     {
<a name="l02116"></a>02116       reason = <span class="stringliteral">&quot;non-connected next-hop;&quot;</span>;
<a name="l02117"></a>02117       <span class="keywordflow">goto</span> filtered;
<a name="l02118"></a>02118     }
<a name="l02119"></a>02119 
<a name="l02120"></a>02120       <span class="comment">/* Next hop must not be 0.0.0.0 nor Class E address.  Next hop</span>
<a name="l02121"></a>02121 <span class="comment">     must not be my own address.  */</span>
<a name="l02122"></a>02122       <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#af096de71945dda80bbb7dbb1df574c90">bgp_nexthop_self</a> (afi, &amp;new_attr)
<a name="l02123"></a>02123       || new_attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0
<a name="l02124"></a>02124       || ntohl (new_attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr) &gt;= 0xe0000000)
<a name="l02125"></a>02125     {
<a name="l02126"></a>02126       reason = <span class="stringliteral">&quot;martian next-hop;&quot;</span>;
<a name="l02127"></a>02127       <span class="keywordflow">goto</span> filtered;
<a name="l02128"></a>02128     }
<a name="l02129"></a>02129     }
<a name="l02130"></a>02130 
<a name="l02131"></a>02131   attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;new_attr);
<a name="l02132"></a>02132 
<a name="l02133"></a>02133   <span class="comment">/* If the update is implicit withdraw. */</span>
<a name="l02134"></a>02134   <span class="keywordflow">if</span> (ri)
<a name="l02135"></a>02135     {
<a name="l02136"></a>02136       ri-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l02137"></a>02137 
<a name="l02138"></a>02138       <span class="comment">/* Same attribute comes in. */</span>
<a name="l02139"></a>02139       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>) 
<a name="l02140"></a>02140           &amp;&amp; <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, attr_new))
<a name="l02141"></a>02141     {
<a name="l02142"></a>02142       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l02143"></a>02143 
<a name="l02144"></a>02144       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
<a name="l02145"></a>02145           &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l02146"></a>02146           &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l02147"></a>02147         {
<a name="l02148"></a>02148           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))  
<a name="l02149"></a>02149           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d&quot;</span>,
<a name="l02150"></a>02150           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02151"></a>02151           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02152"></a>02152           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02153"></a>02153 
<a name="l02154"></a>02154           <span class="keywordflow">if</span> (<a class="code" href="bgp__damp_8c.html#ab12b23e18629cfff0fcc114ca69829d5">bgp_damp_update</a> (ri, rn, afi, safi) != <a class="code" href="bgp__damp_8h.html#a0f58b7873622a8c3d2e28d38e30719e4">BGP_DAMP_SUPPRESSED</a>)
<a name="l02155"></a>02155             {
<a name="l02156"></a>02156                   <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, ri, afi, safi);
<a name="l02157"></a>02157                   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l02158"></a>02158                 }
<a name="l02159"></a>02159         }
<a name="l02160"></a>02160           <span class="keywordflow">else</span> <span class="comment">/* Duplicate - odd */</span>
<a name="l02161"></a>02161         {
<a name="l02162"></a>02162           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))  
<a name="l02163"></a>02163         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l02164"></a>02164         <span class="stringliteral">&quot;%s rcvd %s/%d...duplicate ignored&quot;</span>,
<a name="l02165"></a>02165         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02166"></a>02166         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02167"></a>02167         p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02168"></a>02168 
<a name="l02169"></a>02169           <span class="comment">/* graceful restart STALE flag unset. */</span>
<a name="l02170"></a>02170           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l02171"></a>02171         {
<a name="l02172"></a>02172           <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>);
<a name="l02173"></a>02173           <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l02174"></a>02174         }
<a name="l02175"></a>02175         }
<a name="l02176"></a>02176 
<a name="l02177"></a>02177       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02178"></a>02178       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l02179"></a>02179       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l02180"></a>02180       
<a name="l02181"></a>02181       <span class="keywordflow">return</span> 0;
<a name="l02182"></a>02182     }
<a name="l02183"></a>02183 
<a name="l02184"></a>02184       <span class="comment">/* Withdraw/Announce before we fully processed the withdraw */</span>
<a name="l02185"></a>02185       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l02186"></a>02186         {
<a name="l02187"></a>02187           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l02188"></a>02188             <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d, flapped quicker than processing&quot;</span>,
<a name="l02189"></a>02189             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02190"></a>02190             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02191"></a>02191             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02192"></a>02192           <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a> (rn, ri);
<a name="l02193"></a>02193         }
<a name="l02194"></a>02194 
<a name="l02195"></a>02195       <span class="comment">/* Received Logging. */</span>
<a name="l02196"></a>02196       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))  
<a name="l02197"></a>02197     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d&quot;</span>,
<a name="l02198"></a>02198           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02199"></a>02199           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02200"></a>02200           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02201"></a>02201 
<a name="l02202"></a>02202       <span class="comment">/* graceful restart STALE flag unset. */</span>
<a name="l02203"></a>02203       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l02204"></a>02204     <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>);
<a name="l02205"></a>02205 
<a name="l02206"></a>02206       <span class="comment">/* The attribute is changed. */</span>
<a name="l02207"></a>02207       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l02208"></a>02208       
<a name="l02209"></a>02209       <span class="comment">/* implicit withdraw, decrement aggregate and pcount here.</span>
<a name="l02210"></a>02210 <span class="comment">       * only if update is accepted, they&#39;ll increment below.</span>
<a name="l02211"></a>02211 <span class="comment">       */</span>
<a name="l02212"></a>02212       <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, ri, afi, safi);
<a name="l02213"></a>02213       
<a name="l02214"></a>02214       <span class="comment">/* Update bgp route dampening information.  */</span>
<a name="l02215"></a>02215       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
<a name="l02216"></a>02216       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l02217"></a>02217     {
<a name="l02218"></a>02218       <span class="comment">/* This is implicit withdraw so we should update dampening</span>
<a name="l02219"></a>02219 <span class="comment">         information.  */</span>
<a name="l02220"></a>02220       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l02221"></a>02221         <a class="code" href="bgp__damp_8c.html#a6495e2d88335e918ccca6f80fa52cee9">bgp_damp_withdraw</a> (ri, rn, afi, safi, 1);  
<a name="l02222"></a>02222     }
<a name="l02223"></a>02223     
<a name="l02224"></a>02224       <span class="comment">/* Update to new attribute.  */</span>
<a name="l02225"></a>02225       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l02226"></a>02226       ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr_new;
<a name="l02227"></a>02227 
<a name="l02228"></a>02228       <span class="comment">/* Update MPLS tag.  */</span>
<a name="l02229"></a>02229       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02230"></a>02230         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> ((<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (ri))-&gt;tag, tag, 3);
<a name="l02231"></a>02231 
<a name="l02232"></a>02232       <span class="comment">/* Update bgp route dampening information.  */</span>
<a name="l02233"></a>02233       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
<a name="l02234"></a>02234       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l02235"></a>02235     {
<a name="l02236"></a>02236       <span class="comment">/* Now we do normal update dampening.  */</span>
<a name="l02237"></a>02237       ret = <a class="code" href="bgp__damp_8c.html#ab12b23e18629cfff0fcc114ca69829d5">bgp_damp_update</a> (ri, rn, afi, safi);
<a name="l02238"></a>02238       <span class="keywordflow">if</span> (ret == <a class="code" href="bgp__damp_8h.html#a0f58b7873622a8c3d2e28d38e30719e4">BGP_DAMP_SUPPRESSED</a>)
<a name="l02239"></a>02239         {
<a name="l02240"></a>02240           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02241"></a>02241           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l02242"></a>02242           <span class="keywordflow">return</span> 0;
<a name="l02243"></a>02243         }
<a name="l02244"></a>02244     }
<a name="l02245"></a>02245 
<a name="l02246"></a>02246       <span class="comment">/* Nexthop reachability check. */</span>
<a name="l02247"></a>02247       <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> || afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l02248"></a>02248       &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> 
<a name="l02249"></a>02249       &amp;&amp; (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
<a name="l02250"></a>02250               || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>
<a name="l02251"></a>02251           || (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
<a name="l02252"></a>02252           || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>)))
<a name="l02253"></a>02253     {
<a name="l02254"></a>02254       <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (afi, peer, ri, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
<a name="l02255"></a>02255         <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02256"></a>02256       <span class="keywordflow">else</span>
<a name="l02257"></a>02257         <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02258"></a>02258     }
<a name="l02259"></a>02259       <span class="keywordflow">else</span>
<a name="l02260"></a>02260         <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02261"></a>02261 
<a name="l02262"></a>02262       <span class="comment">/* Process change. */</span>
<a name="l02263"></a>02263       <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, ri, afi, safi);
<a name="l02264"></a>02264 
<a name="l02265"></a>02265       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l02266"></a>02266       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02267"></a>02267       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l02268"></a>02268       
<a name="l02269"></a>02269       <span class="keywordflow">return</span> 0;
<a name="l02270"></a>02270     }
<a name="l02271"></a>02271 
<a name="l02272"></a>02272   <span class="comment">/* Received Logging. */</span>
<a name="l02273"></a>02273   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))  
<a name="l02274"></a>02274     {
<a name="l02275"></a>02275       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd %s/%d&quot;</span>,
<a name="l02276"></a>02276         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02277"></a>02277         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02278"></a>02278         p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02279"></a>02279     }
<a name="l02280"></a>02280 
<a name="l02281"></a>02281   <span class="comment">/* Make new BGP info. */</span>
<a name="l02282"></a>02282   <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l02283"></a>02283   <span class="keyword">new</span>-&gt;type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l02284"></a>02284   <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a>;
<a name="l02285"></a>02285   <span class="keyword">new</span>-&gt;peer = <a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l02286"></a>02286   <span class="keyword">new</span>-&gt;attr = attr_new;
<a name="l02287"></a>02287   <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l02288"></a>02288 
<a name="l02289"></a>02289   <span class="comment">/* Update MPLS tag. */</span>
<a name="l02290"></a>02290   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02291"></a>02291     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> ((<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (<span class="keyword">new</span>))-&gt;tag, tag, 3);
<a name="l02292"></a>02292 
<a name="l02293"></a>02293   <span class="comment">/* Nexthop reachability check. */</span>
<a name="l02294"></a>02294   <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> || afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l02295"></a>02295       &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>
<a name="l02296"></a>02296       &amp;&amp; (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
<a name="l02297"></a>02297           || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>
<a name="l02298"></a>02298       || (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
<a name="l02299"></a>02299       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>)))
<a name="l02300"></a>02300     {
<a name="l02301"></a>02301       <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (afi, peer, <span class="keyword">new</span>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
<a name="l02302"></a>02302     <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, <span class="keyword">new</span>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02303"></a>02303       <span class="keywordflow">else</span>
<a name="l02304"></a>02304         <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, <span class="keyword">new</span>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02305"></a>02305     }
<a name="l02306"></a>02306   <span class="keywordflow">else</span>
<a name="l02307"></a>02307     <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, <span class="keyword">new</span>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l02308"></a>02308 
<a name="l02309"></a>02309   <span class="comment">/* Increment prefix */</span>
<a name="l02310"></a>02310   <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, <span class="keyword">new</span>, afi, safi);
<a name="l02311"></a>02311   
<a name="l02312"></a>02312   <span class="comment">/* Register new BGP information. */</span>
<a name="l02313"></a>02313   <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l02314"></a>02314   
<a name="l02315"></a>02315   <span class="comment">/* route_node_get lock */</span>
<a name="l02316"></a>02316   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02317"></a>02317   
<a name="l02318"></a>02318   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l02319"></a>02319   
<a name="l02320"></a>02320   <span class="comment">/* If maximum prefix count is configured and current prefix</span>
<a name="l02321"></a>02321 <span class="comment">     count exeed it. */</span>
<a name="l02322"></a>02322   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, safi, 0))
<a name="l02323"></a>02323     <span class="keywordflow">return</span> -1;
<a name="l02324"></a>02324 
<a name="l02325"></a>02325   <span class="comment">/* Process change. */</span>
<a name="l02326"></a>02326   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l02327"></a>02327 
<a name="l02328"></a>02328   <span class="keywordflow">return</span> 0;
<a name="l02329"></a>02329 
<a name="l02330"></a>02330   <span class="comment">/* This BGP update is filtered.  Log the reason then update BGP</span>
<a name="l02331"></a>02331 <span class="comment">     entry.  */</span>
<a name="l02332"></a>02332  filtered:
<a name="l02333"></a>02333   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l02334"></a>02334     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l02335"></a>02335       <span class="stringliteral">&quot;%s rcvd UPDATE about %s/%d -- DENIED due to: %s&quot;</span>,
<a name="l02336"></a>02336       peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02337"></a>02337       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02338"></a>02338       p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, reason);
<a name="l02339"></a>02339 
<a name="l02340"></a>02340   <span class="keywordflow">if</span> (ri)
<a name="l02341"></a>02341     <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (rn, ri, peer, afi, safi);
<a name="l02342"></a>02342 
<a name="l02343"></a>02343   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02344"></a>02344   
<a name="l02345"></a>02345   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;new_attr);
<a name="l02346"></a>02346   
<a name="l02347"></a>02347   <span class="keywordflow">return</span> 0;
<a name="l02348"></a>02348 }
<a name="l02349"></a>02349 
<a name="l02350"></a>02350 <span class="keywordtype">int</span>
<a name="l02351"></a><a class="code" href="bgp__route_8h.html#a3fd28b643a06863a65e3e9ccaa465b55">02351</a> <a class="code" href="bgp__route_8c.html#adead0e338559e1bf15f14c261fbe975d">bgp_update</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l02352"></a>02352             <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a>,
<a name="l02353"></a>02353             <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag, <span class="keywordtype">int</span> soft_reconfig)
<a name="l02354"></a>02354 {
<a name="l02355"></a>02355   <span class="keyword">struct </span>peer *rsclient;
<a name="l02356"></a>02356   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02357"></a>02357   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02358"></a>02358   <span class="keywordtype">int</span> ret;
<a name="l02359"></a>02359 
<a name="l02360"></a>02360   ret = <a class="code" href="bgp__route_8c.html#a2a2424f26bef521959d23ff57611f86a">bgp_update_main</a> (peer, p, attr, afi, safi, type, sub_type, prd, tag,
<a name="l02361"></a>02361           soft_reconfig);
<a name="l02362"></a>02362 
<a name="l02363"></a>02363   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l02364"></a>02364 
<a name="l02365"></a>02365   <span class="comment">/* Process the update for each RS-client. */</span>
<a name="l02366"></a>02366   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, node, nnode, rsclient))
<a name="l02367"></a>02367     {
<a name="l02368"></a>02368       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l02369"></a>02369         <a class="code" href="bgp__route_8c.html#a35a6938b2231aa460e1ce4a1d767b89f">bgp_update_rsclient</a> (rsclient, afi, safi, attr, peer, p, type,
<a name="l02370"></a>02370                 sub_type, prd, tag);
<a name="l02371"></a>02371     }
<a name="l02372"></a>02372 
<a name="l02373"></a>02373   <span class="keywordflow">return</span> ret;
<a name="l02374"></a>02374 }
<a name="l02375"></a>02375 
<a name="l02376"></a>02376 <span class="keywordtype">int</span>
<a name="l02377"></a><a class="code" href="bgp__route_8h.html#ab19eddf74f3d5f8d8cd7fcc6dd2404cb">02377</a> <a class="code" href="bgp__route_8c.html#a1e246b33bc776aab326a127170921d6d">bgp_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, 
<a name="l02378"></a>02378          <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> sub_type, 
<a name="l02379"></a>02379          <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l02380"></a>02380 {
<a name="l02381"></a>02381   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02382"></a>02382   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l02383"></a>02383   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02384"></a>02384   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02385"></a>02385   <span class="keyword">struct </span>peer *rsclient;
<a name="l02386"></a>02386   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02387"></a>02387 
<a name="l02388"></a>02388   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l02389"></a>02389 
<a name="l02390"></a>02390   <span class="comment">/* Process the withdraw for each RS-client. */</span>
<a name="l02391"></a>02391   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, node, nnode, rsclient))
<a name="l02392"></a>02392     {
<a name="l02393"></a>02393       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l02394"></a>02394         <a class="code" href="bgp__route_8c.html#a6f60f6d4e63b4cb347a05b4b07fb36c9">bgp_withdraw_rsclient</a> (rsclient, afi, safi, peer, p, type, sub_type, prd, tag);
<a name="l02395"></a>02395     }
<a name="l02396"></a>02396 
<a name="l02397"></a>02397   <span class="comment">/* Logging. */</span>
<a name="l02398"></a>02398   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))  
<a name="l02399"></a>02399     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd UPDATE about %s/%d -- withdrawn&quot;</span>,
<a name="l02400"></a>02400       peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02401"></a>02401       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02402"></a>02402       p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02403"></a>02403 
<a name="l02404"></a>02404   <span class="comment">/* Lookup node. */</span>
<a name="l02405"></a>02405   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l02406"></a>02406 
<a name="l02407"></a>02407   <span class="comment">/* If peer is soft reconfiguration enabled.  Record input packet for</span>
<a name="l02408"></a>02408 <span class="comment">     further calculation. */</span>
<a name="l02409"></a>02409   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
<a name="l02410"></a>02410       &amp;&amp; peer != bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>)
<a name="l02411"></a>02411     <a class="code" href="bgp__advertise_8c.html#a88b27370d0e6416445dc1f131053d9f1">bgp_adj_in_unset</a> (rn, peer);
<a name="l02412"></a>02412 
<a name="l02413"></a>02413   <span class="comment">/* Lookup withdrawn route. */</span>
<a name="l02414"></a>02414   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02415"></a>02415     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == sub_type)
<a name="l02416"></a>02416       <span class="keywordflow">break</span>;
<a name="l02417"></a>02417 
<a name="l02418"></a>02418   <span class="comment">/* Withdraw specified route from routing table. */</span>
<a name="l02419"></a>02419   <span class="keywordflow">if</span> (ri &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l02420"></a>02420     <a class="code" href="bgp__route_8c.html#a97b525c43ec4d1f2a86b597317b78051">bgp_rib_withdraw</a> (rn, ri, peer, afi, safi);
<a name="l02421"></a>02421   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l02422"></a>02422     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, 
<a name="l02423"></a>02423       <span class="stringliteral">&quot;%s Can&#39;t find the route %s/%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02424"></a>02424       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l02425"></a>02425       p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02426"></a>02426 
<a name="l02427"></a>02427   <span class="comment">/* Unlock bgp_node_get() lock. */</span>
<a name="l02428"></a>02428   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02429"></a>02429 
<a name="l02430"></a>02430   <span class="keywordflow">return</span> 0;
<a name="l02431"></a>02431 }
<a name="l02432"></a>02432 
<a name="l02433"></a>02433 <span class="keywordtype">void</span>
<a name="l02434"></a><a class="code" href="bgp__route_8h.html#a4432313420cf4b67e1b84b05e4b7a025">02434</a> <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> withdraw)
<a name="l02435"></a>02435 {
<a name="l02436"></a>02436   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02437"></a>02437   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr = { 0 };
<a name="l02438"></a>02438   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a> = { 0 };
<a name="l02439"></a>02439   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l02440"></a>02440   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> binfo;
<a name="l02441"></a>02441   <span class="keyword">struct </span>peer *from;
<a name="l02442"></a>02442   <span class="keywordtype">int</span> ret = <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>;
<a name="l02443"></a>02443   
<a name="l02444"></a>02444   <span class="keywordflow">if</span> (!(afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> || afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>))
<a name="l02445"></a>02445     <span class="keywordflow">return</span>;
<a name="l02446"></a>02446   
<a name="l02447"></a>02447   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l02448"></a>02448   from = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l02449"></a>02449   
<a name="l02450"></a>02450   <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (&amp;attr, <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>);
<a name="l02451"></a>02451   aspath = attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
<a name="l02452"></a>02452   attr.<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>;
<a name="l02453"></a>02453   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
<a name="l02454"></a>02454 
<a name="l02455"></a>02455   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l02456"></a>02456     <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, &amp;p);
<a name="l02457"></a>02457 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02458"></a>02458 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l02459"></a>02459     {
<a name="l02460"></a>02460       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae;
<a name="l02461"></a>02461       attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02462"></a>02462       
<a name="l02463"></a>02463       ae = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;attr);
<a name="l02464"></a>02464       attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = ae;
<a name="l02465"></a>02465       
<a name="l02466"></a>02466       <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;p);
<a name="l02467"></a>02467 
<a name="l02468"></a>02468       <span class="comment">/* IPv6 global nexthop must be included. */</span>
<a name="l02469"></a>02469       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ae-&gt;mp_nexthop_global, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_global, 
<a name="l02470"></a>02470           <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l02471"></a>02471           ae-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l02472"></a>02472  
<a name="l02473"></a>02473       <span class="comment">/* If the peer is on shared nextwork and we have link-local</span>
<a name="l02474"></a>02474 <span class="comment">     nexthop set it. */</span>
<a name="l02475"></a>02475       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> 
<a name="l02476"></a>02476       &amp;&amp; !IN6_IS_ADDR_UNSPECIFIED (&amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local))
<a name="l02477"></a>02477     {
<a name="l02478"></a>02478       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ae-&gt;mp_nexthop_local, &amp;peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.v6_local, 
<a name="l02479"></a>02479           <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
<a name="l02480"></a>02480       ae-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 32;
<a name="l02481"></a>02481     }
<a name="l02482"></a>02482     }
<a name="l02483"></a>02483 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02484"></a>02484 
<a name="l02485"></a>02485   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l02486"></a>02486     {
<a name="l02487"></a>02487       binfo.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l02488"></a>02488       binfo.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = &amp;attr;
<a name="l02489"></a>02489 
<a name="l02490"></a>02490       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#aa2464065e408b72a051e299c8b11e1f9">PEER_RMAP_TYPE_DEFAULT</a>);
<a name="l02491"></a>02491 
<a name="l02492"></a>02492       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a>, &amp;p,
<a name="l02493"></a>02493                  <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;binfo);
<a name="l02494"></a>02494 
<a name="l02495"></a>02495       bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l02496"></a>02496 
<a name="l02497"></a>02497       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l02498"></a>02498     {
<a name="l02499"></a>02499       <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (&amp;attr);
<a name="l02500"></a>02500       withdraw = 1;
<a name="l02501"></a>02501     }
<a name="l02502"></a>02502     }
<a name="l02503"></a>02503 
<a name="l02504"></a>02504   <span class="keywordflow">if</span> (withdraw)
<a name="l02505"></a>02505     {
<a name="l02506"></a>02506       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>))
<a name="l02507"></a>02507     <a class="code" href="bgp__packet_8c.html#aa71da9143ef196d665fd6cb773885f61">bgp_default_withdraw_send</a> (peer, afi, safi);
<a name="l02508"></a>02508       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>);
<a name="l02509"></a>02509     }
<a name="l02510"></a>02510   <span class="keywordflow">else</span>
<a name="l02511"></a>02511     {
<a name="l02512"></a>02512       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>);
<a name="l02513"></a>02513       <a class="code" href="bgp__packet_8c.html#abe0b30eef3af58da0c5ae5e870e91851">bgp_default_update_send</a> (peer, &amp;attr, afi, safi, from);
<a name="l02514"></a>02514     }
<a name="l02515"></a>02515   
<a name="l02516"></a>02516   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l02517"></a>02517   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (aspath);
<a name="l02518"></a>02518 }
<a name="l02519"></a>02519 
<a name="l02520"></a>02520 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02521"></a><a class="code" href="bgp__route_8c.html#aed62e72345c65c8374702d58b4d8a5fa">02521</a> <a class="code" href="bgp__route_8c.html#aed62e72345c65c8374702d58b4d8a5fa">bgp_announce_table</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02522"></a>02522                    <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *table, <span class="keywordtype">int</span> rsclient)
<a name="l02523"></a>02523 {
<a name="l02524"></a>02524   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02525"></a>02525   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02526"></a>02526   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr = { 0 };
<a name="l02527"></a>02527   
<a name="l02528"></a>02528   <span class="keywordflow">if</span> (! table)
<a name="l02529"></a>02529     table = (rsclient) ? peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] : peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l02530"></a>02530 
<a name="l02531"></a>02531   if (safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>
<a name="l02532"></a>02532       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>))
<a name="l02533"></a>02533     <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 0);
<a name="l02534"></a>02534 
<a name="l02535"></a>02535   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a>(rn))
<a name="l02536"></a>02536     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02537"></a>02537       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>) &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> != peer)
<a name="l02538"></a>02538     {
<a name="l02539"></a>02539          <span class="keywordflow">if</span> ( (rsclient) ?
<a name="l02540"></a>02540               (<a class="code" href="bgp__route_8c.html#a35b4c8839d28c1fadc0173bfe0898234">bgp_announce_check_rsclient</a> (ri, peer, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, &amp;attr, afi, safi))
<a name="l02541"></a>02541               : (<a class="code" href="bgp__route_8c.html#a7a3b743168235f6f62a99f82c20fcdf1">bgp_announce_check</a> (ri, peer, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, &amp;attr, afi, safi)))
<a name="l02542"></a>02542         <a class="code" href="bgp__advertise_8c.html#a3a40b0a670f7854055d71517f5ede018">bgp_adj_out_set</a> (rn, peer, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, &amp;attr, afi, safi, ri);
<a name="l02543"></a>02543       <span class="keywordflow">else</span>
<a name="l02544"></a>02544         <a class="code" href="bgp__advertise_8c.html#adbc62e0dd99f941abbaf231f77930094">bgp_adj_out_unset</a> (rn, peer, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi);
<a name="l02545"></a>02545           
<a name="l02546"></a>02546           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l02547"></a>02547     }
<a name="l02548"></a>02548 }
<a name="l02549"></a>02549 
<a name="l02550"></a>02550 <span class="keywordtype">void</span>
<a name="l02551"></a><a class="code" href="bgp__route_8h.html#a2382a6967df7af7f2b52a8afdb9b57b8">02551</a> <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02552"></a>02552 {
<a name="l02553"></a>02553   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02554"></a>02554   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02555"></a>02555 
<a name="l02556"></a>02556   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02557"></a>02557     <span class="keywordflow">return</span>;
<a name="l02558"></a>02558 
<a name="l02559"></a>02559   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l02560"></a>02560     <span class="keywordflow">return</span>;
<a name="l02561"></a>02561 
<a name="l02562"></a>02562   <span class="comment">/* First update is deferred until ORF or ROUTE-REFRESH is received */</span>
<a name="l02563"></a>02563   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>))
<a name="l02564"></a>02564     <span class="keywordflow">return</span>;
<a name="l02565"></a>02565 
<a name="l02566"></a>02566   <span class="keywordflow">if</span> (safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02567"></a>02567     <a class="code" href="bgp__route_8c.html#aed62e72345c65c8374702d58b4d8a5fa">bgp_announce_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l02568"></a>02568   <span class="keywordflow">else</span>
<a name="l02569"></a>02569     <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]); rn;
<a name="l02570"></a>02570      rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a>(rn))
<a name="l02571"></a>02571       <span class="keywordflow">if</span> ((table = (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02572"></a>02572        <a class="code" href="bgp__route_8c.html#aed62e72345c65c8374702d58b4d8a5fa">bgp_announce_table</a> (peer, afi, safi, table, 0);
<a name="l02573"></a>02573 
<a name="l02574"></a>02574   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l02575"></a>02575     <a class="code" href="bgp__route_8c.html#aed62e72345c65c8374702d58b4d8a5fa">bgp_announce_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l02576"></a>02576 }
<a name="l02577"></a>02577 
<a name="l02578"></a>02578 <span class="keywordtype">void</span>
<a name="l02579"></a><a class="code" href="bgp__route_8h.html#ae8a4fa2ea66d3ef20564f2404a5fda5c">02579</a> <a class="code" href="bgp__route_8c.html#a2339aa5e61e6711862d4f6e0eab3ce56">bgp_announce_route_all</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02580"></a>02580 {
<a name="l02581"></a>02581   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>;
<a name="l02582"></a>02582   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>;
<a name="l02583"></a>02583   
<a name="l02584"></a>02584   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l02585"></a>02585     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l02586"></a>02586       <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l02587"></a>02587 }
<a name="l02588"></a>02588 
<a name="l02589"></a>02589 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02590"></a><a class="code" href="bgp__route_8c.html#a9a99b91321b9ba23f772dbc64c285e70">02590</a> <a class="code" href="bgp__route_8c.html#a9a99b91321b9ba23f772dbc64c285e70">bgp_soft_reconfig_table_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>,
<a name="l02591"></a>02591         <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *table)
<a name="l02592"></a>02592 {
<a name="l02593"></a>02593   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02594"></a>02594   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l02595"></a>02595 
<a name="l02596"></a>02596   <span class="keywordflow">if</span> (! table)
<a name="l02597"></a>02597     table = rsclient-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l02598"></a>02598 
<a name="l02599"></a>02599   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02600"></a>02600     <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l02601"></a>02601       {
<a name="l02602"></a>02602         <a class="code" href="bgp__route_8c.html#a35a6938b2231aa460e1ce4a1d767b89f">bgp_update_rsclient</a> (rsclient, afi, safi, ain-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>, ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a>,
<a name="l02603"></a>02603                 &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>, <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02604"></a>02604       }
<a name="l02605"></a>02605 }
<a name="l02606"></a>02606 
<a name="l02607"></a>02607 <span class="keywordtype">void</span>
<a name="l02608"></a><a class="code" href="bgp__route_8h.html#a02e56f5ae76eee6eec3cb44867837609">02608</a> <a class="code" href="bgp__route_8c.html#a5c1eb3bbdaa82d1e5b7b3307de25b12d">bgp_soft_reconfig_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02609"></a>02609 {
<a name="l02610"></a>02610   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02611"></a>02611   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02612"></a>02612   
<a name="l02613"></a>02613   <span class="keywordflow">if</span> (safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02614"></a>02614     <a class="code" href="bgp__route_8c.html#a9a99b91321b9ba23f772dbc64c285e70">bgp_soft_reconfig_table_rsclient</a> (rsclient, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02615"></a>02615 
<a name="l02616"></a>02616   <span class="keywordflow">else</span>
<a name="l02617"></a>02617     <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (rsclient-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]); rn;
<a name="l02618"></a>02618             rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02619"></a>02619       <span class="keywordflow">if</span> ((table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02620"></a>02620         <a class="code" href="bgp__route_8c.html#a9a99b91321b9ba23f772dbc64c285e70">bgp_soft_reconfig_table_rsclient</a> (rsclient, afi, safi, table);
<a name="l02621"></a>02621 }
<a name="l02622"></a>02622 
<a name="l02623"></a>02623 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02624"></a><a class="code" href="bgp__route_8c.html#a361e68a96de5fa35c4d78b6a4c6dc984">02624</a> <a class="code" href="bgp__route_8c.html#a361e68a96de5fa35c4d78b6a4c6dc984">bgp_soft_reconfig_table</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02625"></a>02625              <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>)
<a name="l02626"></a>02626 {
<a name="l02627"></a>02627   <span class="keywordtype">int</span> ret;
<a name="l02628"></a>02628   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02629"></a>02629   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l02630"></a>02630 
<a name="l02631"></a>02631   <span class="keywordflow">if</span> (! table)
<a name="l02632"></a>02632     table = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l02633"></a>02633 
<a name="l02634"></a>02634   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02635"></a>02635     <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l02636"></a>02636       {
<a name="l02637"></a>02637     <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
<a name="l02638"></a>02638       {
<a name="l02639"></a>02639         ret = <a class="code" href="bgp__route_8c.html#adead0e338559e1bf15f14c261fbe975d">bgp_update</a> (peer, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ain-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>, afi, safi,
<a name="l02640"></a>02640                   <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>, <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>,
<a name="l02641"></a>02641                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l02642"></a>02642         <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02643"></a>02643           {
<a name="l02644"></a>02644         <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02645"></a>02645         <span class="keywordflow">return</span>;
<a name="l02646"></a>02646           }
<a name="l02647"></a>02647         <span class="keywordflow">continue</span>;
<a name="l02648"></a>02648       }
<a name="l02649"></a>02649       }
<a name="l02650"></a>02650 }
<a name="l02651"></a>02651 
<a name="l02652"></a>02652 <span class="keywordtype">void</span>
<a name="l02653"></a><a class="code" href="bgp__route_8h.html#a554bf0135ffc3a68ac99947f528cf9fc">02653</a> <a class="code" href="bgp__route_8c.html#a74f36e1ccbb82b25e96dbdda5ba35f66">bgp_soft_reconfig_in</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02654"></a>02654 {
<a name="l02655"></a>02655   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02656"></a>02656   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02657"></a>02657 
<a name="l02658"></a>02658   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02659"></a>02659     <span class="keywordflow">return</span>;
<a name="l02660"></a>02660 
<a name="l02661"></a>02661   <span class="keywordflow">if</span> (safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02662"></a>02662     <a class="code" href="bgp__route_8c.html#a361e68a96de5fa35c4d78b6a4c6dc984">bgp_soft_reconfig_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02663"></a>02663   <span class="keywordflow">else</span>
<a name="l02664"></a>02664     <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]); rn;
<a name="l02665"></a>02665      rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02666"></a>02666       <span class="keywordflow">if</span> ((table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02667"></a>02667     <a class="code" href="bgp__route_8c.html#a361e68a96de5fa35c4d78b6a4c6dc984">bgp_soft_reconfig_table</a> (peer, afi, safi, table);
<a name="l02668"></a>02668 }
<a name="l02669"></a>02669 
<a name="l02670"></a>02670 
<a name="l02671"></a><a class="code" href="structbgp__clear__node__queue.html">02671</a> <span class="keyword">struct </span><a class="code" href="structbgp__clear__node__queue.html">bgp_clear_node_queue</a>
<a name="l02672"></a>02672 {
<a name="l02673"></a><a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">02673</a>   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">rn</a>;
<a name="l02674"></a><a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">02674</a>   <span class="keyword">enum</span> <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81">bgp_clear_route_type</a> <a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">purpose</a>;
<a name="l02675"></a>02675 };
<a name="l02676"></a>02676 
<a name="l02677"></a>02677 <span class="keyword">static</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a>
<a name="l02678"></a><a class="code" href="bgp__route_8c.html#a71b5f58e93daf052072424f96f865cf0">02678</a> <a class="code" href="bgp__route_8c.html#a71b5f58e93daf052072424f96f865cf0">bgp_clear_route_node</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l02679"></a>02679 {
<a name="l02680"></a>02680   <span class="keyword">struct </span><a class="code" href="structbgp__clear__node__queue.html">bgp_clear_node_queue</a> *cnq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l02681"></a>02681   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = cnq-&gt;<a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">rn</a>;
<a name="l02682"></a>02682   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a> = wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a2093df069000fed2a0c44bba8bcb7d68">data</a>;
<a name="l02683"></a>02683   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02684"></a>02684   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi = rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>;
<a name="l02685"></a>02685   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi = rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>;
<a name="l02686"></a>02686   
<a name="l02687"></a>02687   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn &amp;&amp; peer);
<a name="l02688"></a>02688   
<a name="l02689"></a>02689   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02690"></a>02690     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer || cnq-&gt;<a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">purpose</a> == <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>)
<a name="l02691"></a>02691       {
<a name="l02692"></a>02692         <span class="comment">/* graceful restart STALE flag set. */</span>
<a name="l02693"></a>02693         <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>)
<a name="l02694"></a>02694             &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[afi][safi]
<a name="l02695"></a>02695             &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>)
<a name="l02696"></a>02696             &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l02697"></a>02697           <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>);
<a name="l02698"></a>02698         <span class="keywordflow">else</span>
<a name="l02699"></a>02699           <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (rn, ri, peer, afi, safi);
<a name="l02700"></a>02700         <span class="keywordflow">break</span>;
<a name="l02701"></a>02701       }
<a name="l02702"></a>02702   <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
<a name="l02703"></a>02703 }
<a name="l02704"></a>02704 
<a name="l02705"></a>02705 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02706"></a><a class="code" href="bgp__route_8c.html#a2907d3d7870eaf13efa465e491e5d42e">02706</a> <a class="code" href="bgp__route_8c.html#a2907d3d7870eaf13efa465e491e5d42e">bgp_clear_node_queue_del</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l02707"></a>02707 {
<a name="l02708"></a>02708   <span class="keyword">struct </span><a class="code" href="structbgp__clear__node__queue.html">bgp_clear_node_queue</a> *cnq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l02709"></a>02709   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = cnq-&gt;<a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">rn</a>;
<a name="l02710"></a>02710   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table = rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>;
<a name="l02711"></a>02711   
<a name="l02712"></a>02712   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn); 
<a name="l02713"></a>02713   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (table);
<a name="l02714"></a>02714   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba28eaf22226d7f0b2009a7f95872a041a">MTYPE_BGP_CLEAR_NODE_QUEUE</a>, cnq);
<a name="l02715"></a>02715 }
<a name="l02716"></a>02716 
<a name="l02717"></a>02717 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02718"></a><a class="code" href="bgp__route_8c.html#ac0796b20b150f25a0bb4f1427ac71c86">02718</a> <a class="code" href="bgp__route_8c.html#ac0796b20b150f25a0bb4f1427ac71c86">bgp_clear_node_complete</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq)
<a name="l02719"></a>02719 {
<a name="l02720"></a>02720   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a> = wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a2093df069000fed2a0c44bba8bcb7d68">data</a>;
<a name="l02721"></a>02721   
<a name="l02722"></a>02722   <span class="comment">/* Tickle FSM to start moving again */</span>
<a name="l02723"></a>02723   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a2306a95378b3d52b3758e3a58fb2155b">Clearing_Completed</a>);
<a name="l02724"></a>02724 
<a name="l02725"></a>02725   <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* bgp_clear_route */</span>
<a name="l02726"></a>02726 }
<a name="l02727"></a>02727 
<a name="l02728"></a>02728 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02729"></a><a class="code" href="bgp__route_8c.html#a59f1fa7a624fe068801d9dc834b7272f">02729</a> <a class="code" href="bgp__route_8c.html#a59f1fa7a624fe068801d9dc834b7272f">bgp_clear_node_queue_init</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02730"></a>02730 {
<a name="l02731"></a>02731   <span class="keywordtype">char</span> wname[<span class="keyword">sizeof</span>(<span class="stringliteral">&quot;clear xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx&quot;</span>)];
<a name="l02732"></a>02732   
<a name="l02733"></a>02733   <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (wname, <span class="keyword">sizeof</span>(wname), <span class="stringliteral">&quot;clear %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02734"></a>02734 <span class="preprocessor">#undef CLEAR_QUEUE_NAME_LEN</span>
<a name="l02735"></a>02735 <span class="preprocessor"></span>
<a name="l02736"></a>02736   <span class="keywordflow">if</span> ( (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a> = <a class="code" href="workqueue_8c.html#a8b50511bbc60426f371822c0c7aee5cc">work_queue_new</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a>, wname)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02737"></a>02737     {
<a name="l02738"></a>02738       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: Failed to allocate work queue&quot;</span>, __func__);
<a name="l02739"></a>02739       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l02740"></a>02740     }
<a name="l02741"></a>02741   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a6f998e18d62286e5b77844faf7c3ded2">hold</a> = 10;
<a name="l02742"></a>02742   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#aabcb370748f886f6a167ea3b13a6d372">workfunc</a> = &amp;<a class="code" href="bgp__route_8c.html#a71b5f58e93daf052072424f96f865cf0">bgp_clear_route_node</a>;
<a name="l02743"></a>02743   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#ae2fdda0df1d6e600e2b4e7849740e9d2">del_item_data</a> = &amp;<a class="code" href="bgp__route_8c.html#a2907d3d7870eaf13efa465e491e5d42e">bgp_clear_node_queue_del</a>;
<a name="l02744"></a>02744   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a8f91d98335cfc0e547c01194575a9558">completion_func</a> = &amp;<a class="code" href="bgp__route_8c.html#ac0796b20b150f25a0bb4f1427ac71c86">bgp_clear_node_complete</a>;
<a name="l02745"></a>02745   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a74334af11b2e664ed8cd47fa13a76881">max_retries</a> = 0;
<a name="l02746"></a>02746   
<a name="l02747"></a>02747   <span class="comment">/* we only &#39;lock&#39; this peer reference when the queue is actually active */</span>
<a name="l02748"></a>02748   peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a2093df069000fed2a0c44bba8bcb7d68">data</a> = peer;
<a name="l02749"></a>02749 }
<a name="l02750"></a>02750 
<a name="l02751"></a>02751 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02752"></a><a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">02752</a> <a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">bgp_clear_route_table</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02753"></a>02753                        <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *table, <span class="keyword">struct</span> peer *rsclient,
<a name="l02754"></a>02754                        <span class="keyword">enum</span> <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81">bgp_clear_route_type</a> purpose)
<a name="l02755"></a>02755 {
<a name="l02756"></a>02756   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02757"></a>02757   
<a name="l02758"></a>02758   
<a name="l02759"></a>02759   <span class="keywordflow">if</span> (! table)
<a name="l02760"></a>02760     table = (rsclient) ? rsclient-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] : peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l02761"></a>02761   
<a name="l02762"></a>02762   <span class="comment">/* If still no table =&gt; afi/safi isn&#39;t configured at all or smth. */</span>
<a name="l02763"></a>02763   if (! table)
<a name="l02764"></a>02764     <span class="keywordflow">return</span>;
<a name="l02765"></a>02765   
<a name="l02766"></a>02766   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02767"></a>02767     {
<a name="l02768"></a>02768       <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02769"></a>02769       <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l02770"></a>02770       <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *aout;
<a name="l02771"></a>02771       
<a name="l02772"></a>02772       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02773"></a>02773         <span class="keywordflow">continue</span>;
<a name="l02774"></a>02774 
<a name="l02775"></a>02775       <span class="comment">/* XXX:TODO: This is suboptimal, every non-empty route_node is</span>
<a name="l02776"></a>02776 <span class="comment">       * queued for every clearing peer, regardless of whether it is</span>
<a name="l02777"></a>02777 <span class="comment">       * relevant to the peer at hand.</span>
<a name="l02778"></a>02778 <span class="comment">       *</span>
<a name="l02779"></a>02779 <span class="comment">       * Overview: There are 3 different indices which need to be</span>
<a name="l02780"></a>02780 <span class="comment">       * scrubbed, potentially, when a peer is removed:</span>
<a name="l02781"></a>02781 <span class="comment">       *</span>
<a name="l02782"></a>02782 <span class="comment">       * 1 peer&#39;s routes visible via the RIB (ie accepted routes)</span>
<a name="l02783"></a>02783 <span class="comment">       * 2 peer&#39;s routes visible by the (optional) peer&#39;s adj-in index</span>
<a name="l02784"></a>02784 <span class="comment">       * 3 other routes visible by the peer&#39;s adj-out index</span>
<a name="l02785"></a>02785 <span class="comment">       *</span>
<a name="l02786"></a>02786 <span class="comment">       * 3 there is no hurry in scrubbing, once the struct peer is</span>
<a name="l02787"></a>02787 <span class="comment">       * removed from bgp-&gt;peer, we could just GC such deleted peer&#39;s</span>
<a name="l02788"></a>02788 <span class="comment">       * adj-outs at our leisure.</span>
<a name="l02789"></a>02789 <span class="comment">       *</span>
<a name="l02790"></a>02790 <span class="comment">       * 1 and 2 must be &#39;scrubbed&#39; in some way, at least made</span>
<a name="l02791"></a>02791 <span class="comment">       * invisible via RIB index before peer session is allowed to be</span>
<a name="l02792"></a>02792 <span class="comment">       * brought back up. So one needs to know when such a &#39;search&#39; is</span>
<a name="l02793"></a>02793 <span class="comment">       * complete.</span>
<a name="l02794"></a>02794 <span class="comment">       *</span>
<a name="l02795"></a>02795 <span class="comment">       * Ideally:</span>
<a name="l02796"></a>02796 <span class="comment">       *</span>
<a name="l02797"></a>02797 <span class="comment">       * - there&#39;d be a single global queue or a single RIB walker</span>
<a name="l02798"></a>02798 <span class="comment">       * - rather than tracking which route_nodes still need to be</span>
<a name="l02799"></a>02799 <span class="comment">       *   examined on a peer basis, we&#39;d track which peers still</span>
<a name="l02800"></a>02800 <span class="comment">       *   aren&#39;t cleared</span>
<a name="l02801"></a>02801 <span class="comment">       *</span>
<a name="l02802"></a>02802 <span class="comment">       * Given that our per-peer prefix-counts now should be reliable,</span>
<a name="l02803"></a>02803 <span class="comment">       * this may actually be achievable. It doesn&#39;t seem to be a huge</span>
<a name="l02804"></a>02804 <span class="comment">       * problem at this time,</span>
<a name="l02805"></a>02805 <span class="comment">       */</span>
<a name="l02806"></a>02806       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02807"></a>02807         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer || purpose == <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>)
<a name="l02808"></a>02808           {
<a name="l02809"></a>02809             <span class="keyword">struct </span><a class="code" href="structbgp__clear__node__queue.html">bgp_clear_node_queue</a> *cnq;
<a name="l02810"></a>02810 
<a name="l02811"></a>02811             <span class="comment">/* both unlocked in bgp_clear_node_queue_del */</span>
<a name="l02812"></a>02812             <a class="code" href="bgp__table_8c.html#a31e5a9590da2ec7f671d9014a714a885">bgp_table_lock</a> (rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>);
<a name="l02813"></a>02813             <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
<a name="l02814"></a>02814             cnq = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba28eaf22226d7f0b2009a7f95872a041a">MTYPE_BGP_CLEAR_NODE_QUEUE</a>,
<a name="l02815"></a>02815                            <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__clear__node__queue.html">bgp_clear_node_queue</a>));
<a name="l02816"></a>02816             cnq-&gt;<a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">rn</a> = <a class="code" href="structbgp__clear__node__queue.html#a12f80a474cbd6bccad2a53411b8b2b58">rn</a>;
<a name="l02817"></a>02817             cnq-&gt;<a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">purpose</a> = <a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">purpose</a>;
<a name="l02818"></a>02818             <a class="code" href="workqueue_8c.html#a193fb769a4d04f3c160c623fd07dfb21">work_queue_add</a> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>, cnq);
<a name="l02819"></a>02819             <span class="keywordflow">break</span>;
<a name="l02820"></a>02820           }
<a name="l02821"></a>02821 
<a name="l02822"></a>02822       <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l02823"></a>02823         <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer || purpose == <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>)
<a name="l02824"></a>02824           {
<a name="l02825"></a>02825             <a class="code" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (rn, ain);
<a name="l02826"></a>02826             <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02827"></a>02827             <span class="keywordflow">break</span>;
<a name="l02828"></a>02828           }
<a name="l02829"></a>02829       <span class="keywordflow">for</span> (aout = rn-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; aout; aout = aout-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
<a name="l02830"></a>02830         <span class="keywordflow">if</span> (aout-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == peer || purpose == <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>)
<a name="l02831"></a>02831           {
<a name="l02832"></a>02832             <a class="code" href="bgp__advertise_8c.html#a4f008d09b6f5c7288dc27f5a5fbf376f">bgp_adj_out_remove</a> (rn, aout, peer, afi, safi);
<a name="l02833"></a>02833             <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02834"></a>02834             <span class="keywordflow">break</span>;
<a name="l02835"></a>02835           }
<a name="l02836"></a>02836     }
<a name="l02837"></a>02837   <span class="keywordflow">return</span>;
<a name="l02838"></a>02838 }
<a name="l02839"></a>02839 
<a name="l02840"></a>02840 <span class="keywordtype">void</span>
<a name="l02841"></a><a class="code" href="bgp__route_8h.html#a3df4ec5505fc1d5ad1434122c008f9cd">02841</a> <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02842"></a>02842                  <span class="keyword">enum</span> <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81">bgp_clear_route_type</a> <a class="code" href="structbgp__clear__node__queue.html#ac173c5e7a4485ec62d670edea755f19c">purpose</a>)
<a name="l02843"></a>02843 {
<a name="l02844"></a>02844   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02845"></a>02845   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02846"></a>02846   <span class="keyword">struct </span>peer *rsclient;
<a name="l02847"></a>02847   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02848"></a>02848 
<a name="l02849"></a>02849   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02850"></a>02850     <a class="code" href="bgp__route_8c.html#a59f1fa7a624fe068801d9dc834b7272f">bgp_clear_node_queue_init</a> (peer);
<a name="l02851"></a>02851   
<a name="l02852"></a>02852   <span class="comment">/* bgp_fsm.c keeps sessions in state Clearing, not transitioning to</span>
<a name="l02853"></a>02853 <span class="comment">   * Idle until it receives a Clearing_Completed event. This protects</span>
<a name="l02854"></a>02854 <span class="comment">   * against peers which flap faster than we can we clear, which could</span>
<a name="l02855"></a>02855 <span class="comment">   * lead to:</span>
<a name="l02856"></a>02856 <span class="comment">   *</span>
<a name="l02857"></a>02857 <span class="comment">   * a) race with routes from the new session being installed before</span>
<a name="l02858"></a>02858 <span class="comment">   *    clear_route_node visits the node (to delete the route of that</span>
<a name="l02859"></a>02859 <span class="comment">   *    peer)</span>
<a name="l02860"></a>02860 <span class="comment">   * b) resource exhaustion, clear_route_node likely leads to an entry</span>
<a name="l02861"></a>02861 <span class="comment">   *    on the process_main queue. Fast-flapping could cause that queue</span>
<a name="l02862"></a>02862 <span class="comment">   *    to grow and grow.</span>
<a name="l02863"></a>02863 <span class="comment">   */</span>
<a name="l02864"></a>02864   <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#aa7a1097e517f22c4a289a8db9e91005d">thread</a>)
<a name="l02865"></a>02865     <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* bgp_clear_node_complete */</span>
<a name="l02866"></a>02866 
<a name="l02867"></a>02867   <span class="keywordflow">switch</span> (purpose)
<a name="l02868"></a>02868     {
<a name="l02869"></a>02869     <span class="keywordflow">case</span> <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>:
<a name="l02870"></a>02870       <span class="keywordflow">if</span> (safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02871"></a>02871         <a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">bgp_clear_route_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, purpose);
<a name="l02872"></a>02872       <span class="keywordflow">else</span>
<a name="l02873"></a>02873         <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]); rn;
<a name="l02874"></a>02874              rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02875"></a>02875           <span class="keywordflow">if</span> ((table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02876"></a>02876             <a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">bgp_clear_route_table</a> (peer, afi, safi, table, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, purpose);
<a name="l02877"></a>02877 
<a name="l02878"></a>02878       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, node, nnode, rsclient))
<a name="l02879"></a>02879         <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(rsclient-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
<a name="l02880"></a>02880                        <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l02881"></a>02881           <a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">bgp_clear_route_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, rsclient, purpose);
<a name="l02882"></a>02882       <span class="keywordflow">break</span>;
<a name="l02883"></a>02883 
<a name="l02884"></a>02884     <span class="keywordflow">case</span> <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>:
<a name="l02885"></a>02885       <a class="code" href="bgp__route_8c.html#ad3a33b21d2801a0df0a610da8d41783f">bgp_clear_route_table</a> (peer, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, peer, purpose);
<a name="l02886"></a>02886       <span class="keywordflow">break</span>;
<a name="l02887"></a>02887 
<a name="l02888"></a>02888     <span class="keywordflow">default</span>:
<a name="l02889"></a>02889       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (0);
<a name="l02890"></a>02890       <span class="keywordflow">break</span>;
<a name="l02891"></a>02891     }
<a name="l02892"></a>02892   
<a name="l02893"></a>02893   <span class="comment">/* If no routes were cleared, nothing was added to workqueue, the</span>
<a name="l02894"></a>02894 <span class="comment">   * completion function won&#39;t be run by workqueue code - call it here. </span>
<a name="l02895"></a>02895 <span class="comment">   * XXX: Actually, this assumption doesn&#39;t hold, see</span>
<a name="l02896"></a>02896 <span class="comment">   * bgp_clear_route_table(), we queue all non-empty nodes.</span>
<a name="l02897"></a>02897 <span class="comment">   *</span>
<a name="l02898"></a>02898 <span class="comment">   * Additionally, there is a presumption in FSM that clearing is only</span>
<a name="l02899"></a>02899 <span class="comment">   * really needed if peer state is Established - peers in</span>
<a name="l02900"></a>02900 <span class="comment">   * pre-Established states shouldn&#39;t have any route-update state</span>
<a name="l02901"></a>02901 <span class="comment">   * associated with them (in or out).</span>
<a name="l02902"></a>02902 <span class="comment">   *</span>
<a name="l02903"></a>02903 <span class="comment">   * We still can get here in pre-Established though, through</span>
<a name="l02904"></a>02904 <span class="comment">   * peer_delete -&gt; bgp_fsm_change_status, so this is a useful sanity</span>
<a name="l02905"></a>02905 <span class="comment">   * check to ensure the assumption above holds.</span>
<a name="l02906"></a>02906 <span class="comment">   *</span>
<a name="l02907"></a>02907 <span class="comment">   * At some future point, this check could be move to the top of the</span>
<a name="l02908"></a>02908 <span class="comment">   * function, and do a quick early-return when state is</span>
<a name="l02909"></a>02909 <span class="comment">   * pre-Established, avoiding above list and table scans. Once we&#39;re</span>
<a name="l02910"></a>02910 <span class="comment">   * sure it is safe..</span>
<a name="l02911"></a>02911 <span class="comment">   */</span>
<a name="l02912"></a>02912   <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>-&gt;<a class="code" href="structwork__queue.html#aa7a1097e517f22c4a289a8db9e91005d">thread</a>)
<a name="l02913"></a>02913     <a class="code" href="bgp__route_8c.html#ac0796b20b150f25a0bb4f1427ac71c86">bgp_clear_node_complete</a> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>);
<a name="l02914"></a>02914 }
<a name="l02915"></a>02915   
<a name="l02916"></a>02916 <span class="keywordtype">void</span>
<a name="l02917"></a><a class="code" href="bgp__route_8h.html#a179a18ad1eb8a8d2e914f90f4a227226">02917</a> <a class="code" href="bgp__route_8c.html#ac73f860ac71768cc3169bf96512d1b1c">bgp_clear_route_all</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02918"></a>02918 {
<a name="l02919"></a>02919   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l02920"></a>02920   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l02921"></a>02921 
<a name="l02922"></a>02922   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l02923"></a>02923     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l02924"></a>02924       <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>);
<a name="l02925"></a>02925 }
<a name="l02926"></a>02926 
<a name="l02927"></a>02927 <span class="keywordtype">void</span>
<a name="l02928"></a><a class="code" href="bgp__route_8h.html#a7420ba6c9ffc1bee7f06418e2872f1c6">02928</a> <a class="code" href="bgp__route_8c.html#a4abd5523ec63ec028d8ca35259161533">bgp_clear_adj_in</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02929"></a>02929 {
<a name="l02930"></a>02930   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02931"></a>02931   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02932"></a>02932   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l02933"></a>02933 
<a name="l02934"></a>02934   table = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l02935"></a>02935 
<a name="l02936"></a>02936   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02937"></a>02937     <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain ; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l02938"></a>02938       <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
<a name="l02939"></a>02939     {
<a name="l02940"></a>02940           <a class="code" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (rn, ain);
<a name="l02941"></a>02941           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l02942"></a>02942           <span class="keywordflow">break</span>;
<a name="l02943"></a>02943     }
<a name="l02944"></a>02944 }
<a name="l02945"></a>02945 
<a name="l02946"></a>02946 <span class="keywordtype">void</span>
<a name="l02947"></a><a class="code" href="bgp__route_8h.html#a98cfb4a18642829264e13a2397a800ed">02947</a> <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02948"></a>02948 {
<a name="l02949"></a>02949   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02950"></a>02950   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02951"></a>02951   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02952"></a>02952 
<a name="l02953"></a>02953   table = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>];
<a name="l02954"></a>02954 
<a name="l02955"></a>02955   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02956"></a>02956     {
<a name="l02957"></a>02957       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02958"></a>02958     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == peer)
<a name="l02959"></a>02959       {
<a name="l02960"></a>02960         <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l02961"></a>02961           <a class="code" href="bgp__route_8c.html#af17eefd0fc4a1bd8d98f657810e26741">bgp_rib_remove</a> (rn, ri, peer, afi, safi);
<a name="l02962"></a>02962         <span class="keywordflow">break</span>;
<a name="l02963"></a>02963       }
<a name="l02964"></a>02964     }
<a name="l02965"></a>02965 }
<a name="l02966"></a>02966 
<a name="l02967"></a>02967 <span class="comment">/* Delete all kernel routes. */</span>
<a name="l02968"></a>02968 <span class="keywordtype">void</span>
<a name="l02969"></a><a class="code" href="bgp__route_8h.html#adf17dd6a8dfaa2ab4f271b491de030d0">02969</a> <a class="code" href="bgp__route_8c.html#adf17dd6a8dfaa2ab4f271b491de030d0">bgp_cleanup_routes</a> (<span class="keywordtype">void</span>)
<a name="l02970"></a>02970 {
<a name="l02971"></a>02971   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02972"></a>02972   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02973"></a>02973   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l02974"></a>02974   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l02975"></a>02975   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l02976"></a>02976 
<a name="l02977"></a>02977   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l02978"></a>02978     {
<a name="l02979"></a>02979       table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l02980"></a>02980 
<a name="l02981"></a>02981       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02982"></a>02982     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02983"></a>02983       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>)
<a name="l02984"></a>02984           &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> 
<a name="l02985"></a>02985           &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
<a name="l02986"></a>02986         <a class="code" href="bgp__zebra_8c.html#a067b7ce285841e44d9fa9d827bb83740">bgp_zebra_withdraw</a> (&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri);
<a name="l02987"></a>02987 
<a name="l02988"></a>02988       table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l02989"></a>02989 
<a name="l02990"></a>02990       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l02991"></a>02991     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l02992"></a>02992       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>)
<a name="l02993"></a>02993           &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> 
<a name="l02994"></a>02994           &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
<a name="l02995"></a>02995         <a class="code" href="bgp__zebra_8c.html#a067b7ce285841e44d9fa9d827bb83740">bgp_zebra_withdraw</a> (&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri);
<a name="l02996"></a>02996     }
<a name="l02997"></a>02997 }
<a name="l02998"></a>02998 
<a name="l02999"></a>02999 <span class="keywordtype">void</span>
<a name="l03000"></a><a class="code" href="bgpd_8h.html#a716aead52529e1e5b1f5606155e859a5">03000</a> <a class="code" href="bgp__route_8c.html#a716aead52529e1e5b1f5606155e859a5">bgp_reset</a> (<span class="keywordtype">void</span>)
<a name="l03001"></a>03001 {
<a name="l03002"></a>03002   <a class="code" href="vty_8c.html#a637ad9b0152e5e5559bc0c05db07318e">vty_reset</a> ();
<a name="l03003"></a>03003   <a class="code" href="bgp__zebra_8c.html#a2a493e9acff62550bc916134935af412">bgp_zclient_reset</a> ();
<a name="l03004"></a>03004   <a class="code" href="filter_8c.html#a6d46b3b0526d8e0e8dbed60d7f6a695d">access_list_reset</a> ();
<a name="l03005"></a>03005   <a class="code" href="plist_8c.html#a6d3ae1194d033d0d7cf9c3b54a7542ac">prefix_list_reset</a> ();
<a name="l03006"></a>03006 }
<a name="l03007"></a>03007 
<a name="l03008"></a>03008 <span class="comment">/* Parse NLRI stream.  Withdraw NLRI is recognized by NULL attr</span>
<a name="l03009"></a>03009 <span class="comment">   value. */</span>
<a name="l03010"></a>03010 <span class="keywordtype">int</span>
<a name="l03011"></a><a class="code" href="bgp__route_8h.html#a8e19b0828d731508778b7c28a7f17298">03011</a> <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a> *packet)
<a name="l03012"></a>03012 {
<a name="l03013"></a>03013   u_char *pnt;
<a name="l03014"></a>03014   u_char *lim;
<a name="l03015"></a>03015   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l03016"></a>03016   <span class="keywordtype">int</span> psize;
<a name="l03017"></a>03017   <span class="keywordtype">int</span> ret;
<a name="l03018"></a>03018 
<a name="l03019"></a>03019   <span class="comment">/* Check peer status. */</span>
<a name="l03020"></a>03020   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03021"></a>03021     <span class="keywordflow">return</span> 0;
<a name="l03022"></a>03022   
<a name="l03023"></a>03023   pnt = packet-&gt;<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a>;
<a name="l03024"></a>03024   lim = pnt + packet-&gt;<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>;
<a name="l03025"></a>03025 
<a name="l03026"></a>03026   <span class="keywordflow">for</span> (; pnt &lt; lim; pnt += psize)
<a name="l03027"></a>03027     {
<a name="l03028"></a>03028       <span class="comment">/* Clear prefix structure. */</span>
<a name="l03029"></a>03029       memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l03030"></a>03030 
<a name="l03031"></a>03031       <span class="comment">/* Fetch prefix length. */</span>
<a name="l03032"></a>03032       p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = *pnt++;
<a name="l03033"></a>03033       p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a>);
<a name="l03034"></a>03034       
<a name="l03035"></a>03035       <span class="comment">/* Already checked in nlri_sanity_check().  We do double check</span>
<a name="l03036"></a>03036 <span class="comment">         here. */</span>
<a name="l03037"></a>03037       <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; 32)
<a name="l03038"></a>03038       || (packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; 128))
<a name="l03039"></a>03039     <span class="keywordflow">return</span> -1;
<a name="l03040"></a>03040 
<a name="l03041"></a>03041       <span class="comment">/* Packet size overflow check. */</span>
<a name="l03042"></a>03042       psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l03043"></a>03043 
<a name="l03044"></a>03044       <span class="comment">/* When packet overflow occur return immediately. */</span>
<a name="l03045"></a>03045       <span class="keywordflow">if</span> (pnt + psize &gt; lim)
<a name="l03046"></a>03046     <span class="keywordflow">return</span> -1;
<a name="l03047"></a>03047 
<a name="l03048"></a>03048       <span class="comment">/* Fetch prefix from NLRI packet. */</span>
<a name="l03049"></a>03049       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, pnt, psize);
<a name="l03050"></a>03050 
<a name="l03051"></a>03051       <span class="comment">/* Check address. */</span>
<a name="l03052"></a>03052       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; packet-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l03053"></a>03053     {
<a name="l03054"></a>03054       <span class="keywordflow">if</span> (IN_CLASSD (ntohl (p.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr)))
<a name="l03055"></a>03055         {
<a name="l03056"></a>03056          <span class="comment">/* </span>
<a name="l03057"></a>03057 <span class="comment">          * From draft-ietf-idr-bgp4-22, Section 6.3: </span>
<a name="l03058"></a>03058 <span class="comment">          * If a BGP router receives an UPDATE message with a</span>
<a name="l03059"></a>03059 <span class="comment">          * semantically incorrect NLRI field, in which a prefix is</span>
<a name="l03060"></a>03060 <span class="comment">          * semantically incorrect (eg. an unexpected multicast IP</span>
<a name="l03061"></a>03061 <span class="comment">          * address), it should ignore the prefix.</span>
<a name="l03062"></a>03062 <span class="comment">          */</span>
<a name="l03063"></a>03063           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l03064"></a>03064             <span class="stringliteral">&quot;IPv4 unicast NLRI is multicast address %s&quot;</span>,
<a name="l03065"></a>03065             inet_ntoa (p.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l03066"></a>03066 
<a name="l03067"></a>03067           <span class="keywordflow">return</span> -1;
<a name="l03068"></a>03068         }
<a name="l03069"></a>03069     }
<a name="l03070"></a>03070 
<a name="l03071"></a>03071 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l03072"></a>03072 <span class="preprocessor"></span>      <span class="comment">/* Check address. */</span>
<a name="l03073"></a>03073       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; packet-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l03074"></a>03074     {
<a name="l03075"></a>03075       <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
<a name="l03076"></a>03076         {
<a name="l03077"></a>03077           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l03078"></a>03078 
<a name="l03079"></a>03079           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l03080"></a>03080             <span class="stringliteral">&quot;IPv6 link-local NLRI received %s ignore this NLRI&quot;</span>,
<a name="l03081"></a>03081             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;p.u.prefix6, buf, BUFSIZ));
<a name="l03082"></a>03082 
<a name="l03083"></a>03083           <span class="keywordflow">continue</span>;
<a name="l03084"></a>03084         }
<a name="l03085"></a>03085     }
<a name="l03086"></a>03086 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l03087"></a>03087 
<a name="l03088"></a>03088       <span class="comment">/* Normal process. */</span>
<a name="l03089"></a>03089       <span class="keywordflow">if</span> (attr)
<a name="l03090"></a>03090     ret = <a class="code" href="bgp__route_8c.html#adead0e338559e1bf15f14c261fbe975d">bgp_update</a> (peer, &amp;p, attr, packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a>, packet-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a>, 
<a name="l03091"></a>03091               <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>, <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l03092"></a>03092       <span class="keywordflow">else</span>
<a name="l03093"></a>03093     ret = <a class="code" href="bgp__route_8c.html#a1e246b33bc776aab326a127170921d6d">bgp_withdraw</a> (peer, &amp;p, attr, packet-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a>, packet-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a>, 
<a name="l03094"></a>03094                 <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>, <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03095"></a>03095 
<a name="l03096"></a>03096       <span class="comment">/* Address family configuration mismatch or maximum-prefix count</span>
<a name="l03097"></a>03097 <span class="comment">         overflow. */</span>
<a name="l03098"></a>03098       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l03099"></a>03099     <span class="keywordflow">return</span> -1;
<a name="l03100"></a>03100     }
<a name="l03101"></a>03101 
<a name="l03102"></a>03102   <span class="comment">/* Packet length consistency check. */</span>
<a name="l03103"></a>03103   <span class="keywordflow">if</span> (pnt != lim)
<a name="l03104"></a>03104     <span class="keywordflow">return</span> -1;
<a name="l03105"></a>03105 
<a name="l03106"></a>03106   <span class="keywordflow">return</span> 0;
<a name="l03107"></a>03107 }
<a name="l03108"></a>03108 
<a name="l03109"></a>03109 <span class="comment">/* NLRI encode syntax check routine. */</span>
<a name="l03110"></a>03110 <span class="keywordtype">int</span>
<a name="l03111"></a><a class="code" href="bgp__route_8h.html#a121b1ac2ca3b5db4479c018cce058312">03111</a> <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">int</span> afi, u_char *pnt,
<a name="l03112"></a>03112                <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l03113"></a>03113 {
<a name="l03114"></a>03114   u_char *end;
<a name="l03115"></a>03115   u_char <a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l03116"></a>03116   <span class="keywordtype">int</span> psize;
<a name="l03117"></a>03117 
<a name="l03118"></a>03118   end = pnt + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03119"></a>03119 
<a name="l03120"></a>03120   <span class="comment">/* RFC1771 6.3 The NLRI field in the UPDATE message is checked for</span>
<a name="l03121"></a>03121 <span class="comment">     syntactic validity.  If the field is syntactically incorrect,</span>
<a name="l03122"></a>03122 <span class="comment">     then the Error Subcode is set to Invalid Network Field. */</span>
<a name="l03123"></a>03123 
<a name="l03124"></a>03124   <span class="keywordflow">while</span> (pnt &lt; end)
<a name="l03125"></a>03125     {
<a name="l03126"></a>03126       prefixlen = *pnt++;
<a name="l03127"></a>03127       
<a name="l03128"></a>03128       <span class="comment">/* Prefix length check. */</span>
<a name="l03129"></a>03129       <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; prefixlen &gt; 32)
<a name="l03130"></a>03130       || (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; prefixlen &gt; 128))
<a name="l03131"></a>03131     {
<a name="l03132"></a>03132       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, 
<a name="l03133"></a>03133             <span class="stringliteral">&quot;%s [Error] Update packet error (wrong prefix length %d)&quot;</span>,
<a name="l03134"></a>03134             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, prefixlen);
<a name="l03135"></a>03135       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l03136"></a>03136                <a class="code" href="bgpd_8h.html#a80701bbe52975406ae4c176b89a9c5c3">BGP_NOTIFY_UPDATE_INVAL_NETWORK</a>);
<a name="l03137"></a>03137       <span class="keywordflow">return</span> -1;
<a name="l03138"></a>03138     }
<a name="l03139"></a>03139 
<a name="l03140"></a>03140       <span class="comment">/* Packet size overflow check. */</span>
<a name="l03141"></a>03141       psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (prefixlen);
<a name="l03142"></a>03142 
<a name="l03143"></a>03143       <span class="keywordflow">if</span> (pnt + psize &gt; end)
<a name="l03144"></a>03144     {
<a name="l03145"></a>03145       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, 
<a name="l03146"></a>03146             <span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
<a name="l03147"></a>03147             <span class="stringliteral">&quot; (prefix data overflow prefix size is %d)&quot;</span>,
<a name="l03148"></a>03148             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, psize);
<a name="l03149"></a>03149       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l03150"></a>03150                <a class="code" href="bgpd_8h.html#a80701bbe52975406ae4c176b89a9c5c3">BGP_NOTIFY_UPDATE_INVAL_NETWORK</a>);
<a name="l03151"></a>03151       <span class="keywordflow">return</span> -1;
<a name="l03152"></a>03152     }
<a name="l03153"></a>03153 
<a name="l03154"></a>03154       pnt += psize;
<a name="l03155"></a>03155     }
<a name="l03156"></a>03156 
<a name="l03157"></a>03157   <span class="comment">/* Packet length consistency check. */</span>
<a name="l03158"></a>03158   <span class="keywordflow">if</span> (pnt != end)
<a name="l03159"></a>03159     {
<a name="l03160"></a>03160       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l03161"></a>03161         <span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
<a name="l03162"></a>03162         <span class="stringliteral">&quot; (prefix length mismatch with total length)&quot;</span>,
<a name="l03163"></a>03163         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l03164"></a>03164       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l03165"></a>03165                <a class="code" href="bgpd_8h.html#a80701bbe52975406ae4c176b89a9c5c3">BGP_NOTIFY_UPDATE_INVAL_NETWORK</a>);
<a name="l03166"></a>03166       <span class="keywordflow">return</span> -1;
<a name="l03167"></a>03167     }
<a name="l03168"></a>03168   <span class="keywordflow">return</span> 0;
<a name="l03169"></a>03169 }
<a name="l03170"></a>03170 
<a name="l03171"></a>03171 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *
<a name="l03172"></a><a class="code" href="bgp__route_8c.html#a3ba6f7387a668fed8fced2ea48559855">03172</a> <a class="code" href="bgp__route_8c.html#a3ba6f7387a668fed8fced2ea48559855">bgp_static_new</a> (<span class="keywordtype">void</span>)
<a name="l03173"></a>03173 {
<a name="l03174"></a>03174   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae2e0b35f72a03fff0f1512953c333950">MTYPE_BGP_STATIC</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__static.html">bgp_static</a>));
<a name="l03175"></a>03175 }
<a name="l03176"></a>03176 
<a name="l03177"></a>03177 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03178"></a><a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">03178</a> <a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">bgp_static_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>)
<a name="l03179"></a>03179 {
<a name="l03180"></a>03180   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03181"></a>03181     free (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>);
<a name="l03182"></a>03182   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae2e0b35f72a03fff0f1512953c333950">MTYPE_BGP_STATIC</a>, bgp_static);
<a name="l03183"></a>03183 }
<a name="l03184"></a>03184 
<a name="l03185"></a>03185 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03186"></a><a class="code" href="bgp__route_8c.html#aa0a729167c9cf61c833c3c12a7c35e9a">03186</a> <a class="code" href="bgp__route_8c.html#aa0a729167c9cf61c833c3c12a7c35e9a">bgp_static_withdraw_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient,
<a name="l03187"></a>03187         <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03188"></a>03188 {
<a name="l03189"></a>03189   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03190"></a>03190   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l03191"></a>03191 
<a name="l03192"></a>03192   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (rsclient-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi], afi, safi, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03193"></a>03193 
<a name="l03194"></a>03194   <span class="comment">/* Check selected route and self inserted route. */</span>
<a name="l03195"></a>03195   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l03196"></a>03196     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>
<a name="l03197"></a>03197        &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l03198"></a>03198        &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l03199"></a>03199       <span class="keywordflow">break</span>;
<a name="l03200"></a>03200 
<a name="l03201"></a>03201   <span class="comment">/* Withdraw static BGP route from routing table. */</span>
<a name="l03202"></a>03202   <span class="keywordflow">if</span> (ri)
<a name="l03203"></a>03203     {
<a name="l03204"></a>03204       <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l03205"></a>03205       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03206"></a>03206     }
<a name="l03207"></a>03207 
<a name="l03208"></a>03208   <span class="comment">/* Unlock bgp_node_lookup. */</span>
<a name="l03209"></a>03209   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03210"></a>03210 }
<a name="l03211"></a>03211 
<a name="l03212"></a>03212 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03213"></a><a class="code" href="bgp__route_8c.html#adde0f36163e0fb2c47de7cf95f8bbe56">03213</a> <a class="code" href="bgp__route_8c.html#adde0f36163e0fb2c47de7cf95f8bbe56">bgp_static_update_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l03214"></a>03214                             <span class="keyword">struct</span> <a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>,
<a name="l03215"></a>03215                             <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03216"></a>03216 {
<a name="l03217"></a>03217   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03218"></a>03218   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l03219"></a>03219   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l03220"></a>03220   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l03221"></a>03221   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *attr_new;
<a name="l03222"></a>03222   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr = {0 };
<a name="l03223"></a>03223   <span class="keyword">struct </span>attr new_attr = { .<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = 0 };
<a name="l03224"></a>03224   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03225"></a>03225   <span class="keywordtype">int</span> ret;
<a name="l03226"></a>03226   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l03227"></a>03227 
<a name="l03228"></a>03228   bgp = rsclient-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l03229"></a>03229 
<a name="l03230"></a>03230   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bgp_static);
<a name="l03231"></a>03231   <span class="keywordflow">if</span> (!bgp_static)
<a name="l03232"></a>03232     <span class="keywordflow">return</span>;
<a name="l03233"></a>03233 
<a name="l03234"></a>03234   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (rsclient-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi], afi, safi, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03235"></a>03235 
<a name="l03236"></a>03236   <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (&amp;attr, <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>);
<a name="l03237"></a>03237 
<a name="l03238"></a>03238   attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>;
<a name="l03239"></a>03239   attr.<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>;
<a name="l03240"></a>03240   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l03241"></a>03241   
<a name="l03242"></a>03242   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>)
<a name="l03243"></a>03243     {
<a name="l03244"></a>03244       attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
<a name="l03245"></a>03245       attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l03246"></a>03246       attr.<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = 0;
<a name="l03247"></a>03247       attr.<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>;
<a name="l03248"></a>03248     }
<a name="l03249"></a>03249   
<a name="l03250"></a>03250   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a>)
<a name="l03251"></a>03251     attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l03252"></a>03252   
<a name="l03253"></a>03253   <span class="comment">/* Apply network route-map for export to this rsclient. */</span>
<a name="l03254"></a>03254   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03255"></a>03255     {
<a name="l03256"></a>03256       <span class="keyword">struct </span>attr attr_tmp = attr;
<a name="l03257"></a>03257       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = rsclient;
<a name="l03258"></a>03258       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = &amp;attr_tmp;
<a name="l03259"></a>03259       
<a name="l03260"></a>03260       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a5d239df7c366c66f144cac26eea3c7f9">PEER_RMAP_TYPE_EXPORT</a>);
<a name="l03261"></a>03261       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a28df478bfbd24d69abf01dcee51aaa48">PEER_RMAP_TYPE_NETWORK</a>);
<a name="l03262"></a>03262 
<a name="l03263"></a>03263       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>, p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l03264"></a>03264 
<a name="l03265"></a>03265       rsclient-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l03266"></a>03266 
<a name="l03267"></a>03267       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l03268"></a>03268         {
<a name="l03269"></a>03269           <span class="comment">/* Free uninterned attribute. */</span>
<a name="l03270"></a>03270           <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (&amp;attr_tmp);
<a name="l03271"></a>03271 
<a name="l03272"></a>03272           <span class="comment">/* Unintern original. */</span>
<a name="l03273"></a>03273           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03274"></a>03274           <a class="code" href="bgp__route_8c.html#aa0a729167c9cf61c833c3c12a7c35e9a">bgp_static_withdraw_rsclient</a> (bgp, rsclient, p, afi, safi);
<a name="l03275"></a>03275           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03276"></a>03276           
<a name="l03277"></a>03277           <span class="keywordflow">return</span>;
<a name="l03278"></a>03278         }
<a name="l03279"></a>03279       attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr_tmp);
<a name="l03280"></a>03280     }
<a name="l03281"></a>03281   <span class="keywordflow">else</span>
<a name="l03282"></a>03282     attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr);
<a name="l03283"></a>03283   
<a name="l03284"></a>03284   new_attr = *attr_new;
<a name="l03285"></a>03285   
<a name="l03286"></a>03286   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a28df478bfbd24d69abf01dcee51aaa48">PEER_RMAP_TYPE_NETWORK</a>);
<a name="l03287"></a>03287 
<a name="l03288"></a>03288   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8c.html#a0b543935bc92b0cd8fa61813637f0179">bgp_import_modifier</a> (rsclient, bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>, p, &amp;new_attr, afi, safi) 
<a name="l03289"></a>03289         == <a class="code" href="routemap_8h.html#a57b0063c49d180ad8b9d19ae35d7e644ad79be2f4afd690ef956924415e6724bf">RMAP_DENY</a>)
<a name="l03290"></a>03290     {
<a name="l03291"></a>03291       <span class="comment">/* This BGP update is filtered.  Log the reason then update BGP entry.  */</span>
<a name="l03292"></a>03292       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l03293"></a>03293               <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (rsclient-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG,
<a name="l03294"></a>03294               <span class="stringliteral">&quot;Static UPDATE about %s/%d -- DENIED for RS-client %s due to: import-policy&quot;</span>,
<a name="l03295"></a>03295               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l03296"></a>03296               p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rsclient-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l03297"></a>03297 
<a name="l03298"></a>03298       bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l03299"></a>03299 
<a name="l03300"></a>03300       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l03301"></a>03301       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03302"></a>03302       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03303"></a>03303 
<a name="l03304"></a>03304       <a class="code" href="bgp__route_8c.html#aa0a729167c9cf61c833c3c12a7c35e9a">bgp_static_withdraw_rsclient</a> (bgp, rsclient, p, afi, safi);
<a name="l03305"></a>03305       
<a name="l03306"></a>03306       <span class="keywordflow">return</span>;
<a name="l03307"></a>03307     }
<a name="l03308"></a>03308 
<a name="l03309"></a>03309   bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l03310"></a>03310 
<a name="l03311"></a>03311   <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l03312"></a>03312   attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;new_attr);
<a name="l03313"></a>03313 
<a name="l03314"></a>03314   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l03315"></a>03315     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l03316"></a>03316             &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l03317"></a>03317       <span class="keywordflow">break</span>;
<a name="l03318"></a>03318 
<a name="l03319"></a>03319   <span class="keywordflow">if</span> (ri)
<a name="l03320"></a>03320        {
<a name="l03321"></a>03321       <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, attr_new) &amp;&amp;
<a name="l03322"></a>03322       !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l03323"></a>03323         {
<a name="l03324"></a>03324           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03325"></a>03325           <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l03326"></a>03326           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03327"></a>03327           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03328"></a>03328           <span class="keywordflow">return</span>;
<a name="l03329"></a>03329        }
<a name="l03330"></a>03330       <span class="keywordflow">else</span>
<a name="l03331"></a>03331         {
<a name="l03332"></a>03332           <span class="comment">/* The attribute is changed. */</span>
<a name="l03333"></a>03333           <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l03334"></a>03334 
<a name="l03335"></a>03335           <span class="comment">/* Rewrite BGP route information. */</span>
<a name="l03336"></a>03336       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l03337"></a>03337         <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a>(rn, ri);
<a name="l03338"></a>03338           <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l03339"></a>03339           ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr_new;
<a name="l03340"></a>03340           ri-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l03341"></a>03341 
<a name="l03342"></a>03342           <span class="comment">/* Process change. */</span>
<a name="l03343"></a>03343           <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03344"></a>03344           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03345"></a>03345           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03346"></a>03346           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03347"></a>03347           <span class="keywordflow">return</span>;
<a name="l03348"></a>03348         }
<a name="l03349"></a>03349     }
<a name="l03350"></a>03350   
<a name="l03351"></a>03351   <span class="comment">/* Make new BGP info. */</span>
<a name="l03352"></a>03352   <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l03353"></a>03353   <span class="keyword">new</span>-&gt;type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
<a name="l03354"></a>03354   <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>;
<a name="l03355"></a>03355   <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l03356"></a>03356   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l03357"></a>03357   <span class="keyword">new</span>-&gt;attr = attr_new;
<a name="l03358"></a>03358   <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l03359"></a>03359 
<a name="l03360"></a>03360   <span class="comment">/* Register new BGP information. */</span>
<a name="l03361"></a>03361   <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l03362"></a>03362   
<a name="l03363"></a>03363   <span class="comment">/* route_node_get lock */</span>
<a name="l03364"></a>03364   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03365"></a>03365   
<a name="l03366"></a>03366   <span class="comment">/* Process change. */</span>
<a name="l03367"></a>03367   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03368"></a>03368 
<a name="l03369"></a>03369   <span class="comment">/* Unintern original. */</span>
<a name="l03370"></a>03370   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03371"></a>03371   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03372"></a>03372 }
<a name="l03373"></a>03373 
<a name="l03374"></a>03374 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03375"></a><a class="code" href="bgp__route_8c.html#adf87800006cc4fc05a3eb602e9870697">03375</a> <a class="code" href="bgp__route_8c.html#adf87800006cc4fc05a3eb602e9870697">bgp_static_update_main</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l03376"></a>03376            <span class="keyword">struct</span> <a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03377"></a>03377 {
<a name="l03378"></a>03378   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03379"></a>03379   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l03380"></a>03380   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l03381"></a>03381   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l03382"></a>03382   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr = { 0 };
<a name="l03383"></a>03383   <span class="keyword">struct </span>attr *attr_new;
<a name="l03384"></a>03384   <span class="keywordtype">int</span> ret;
<a name="l03385"></a>03385 
<a name="l03386"></a>03386   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bgp_static);
<a name="l03387"></a>03387   <span class="keywordflow">if</span> (!bgp_static)
<a name="l03388"></a>03388     <span class="keywordflow">return</span>;
<a name="l03389"></a>03389 
<a name="l03390"></a>03390   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03391"></a>03391 
<a name="l03392"></a>03392   <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (&amp;attr, <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>);
<a name="l03393"></a>03393   
<a name="l03394"></a>03394   attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>;
<a name="l03395"></a>03395   attr.<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>;
<a name="l03396"></a>03396   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l03397"></a>03397 
<a name="l03398"></a>03398   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>)
<a name="l03399"></a>03399     {
<a name="l03400"></a>03400       attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
<a name="l03401"></a>03401       attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l03402"></a>03402       attr.<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = 0;
<a name="l03403"></a>03403       attr.<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>;
<a name="l03404"></a>03404     }
<a name="l03405"></a>03405 
<a name="l03406"></a>03406   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a>)
<a name="l03407"></a>03407     attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l03408"></a>03408 
<a name="l03409"></a>03409   <span class="comment">/* Apply route-map. */</span>
<a name="l03410"></a>03410   <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03411"></a>03411     {
<a name="l03412"></a>03412       <span class="keyword">struct </span>attr attr_tmp = attr;
<a name="l03413"></a>03413       info.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l03414"></a>03414       info.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = &amp;attr_tmp;
<a name="l03415"></a>03415 
<a name="l03416"></a>03416       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#a28df478bfbd24d69abf01dcee51aaa48">PEER_RMAP_TYPE_NETWORK</a>);
<a name="l03417"></a>03417 
<a name="l03418"></a>03418       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>, p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;info);
<a name="l03419"></a>03419 
<a name="l03420"></a>03420       bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l03421"></a>03421 
<a name="l03422"></a>03422       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l03423"></a>03423     {    
<a name="l03424"></a>03424       <span class="comment">/* Free uninterned attribute. */</span>
<a name="l03425"></a>03425       <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (&amp;attr_tmp);
<a name="l03426"></a>03426 
<a name="l03427"></a>03427       <span class="comment">/* Unintern original. */</span>
<a name="l03428"></a>03428       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03429"></a>03429       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03430"></a>03430       <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, p, afi, safi);
<a name="l03431"></a>03431       <span class="keywordflow">return</span>;
<a name="l03432"></a>03432     }
<a name="l03433"></a>03433       attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr_tmp);
<a name="l03434"></a>03434     }
<a name="l03435"></a>03435   <span class="keywordflow">else</span>
<a name="l03436"></a>03436     attr_new = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr);
<a name="l03437"></a>03437 
<a name="l03438"></a>03438   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l03439"></a>03439     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l03440"></a>03440     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l03441"></a>03441       <span class="keywordflow">break</span>;
<a name="l03442"></a>03442 
<a name="l03443"></a>03443   <span class="keywordflow">if</span> (ri)
<a name="l03444"></a>03444     {
<a name="l03445"></a>03445       <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, attr_new) &amp;&amp;
<a name="l03446"></a>03446       !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l03447"></a>03447     {
<a name="l03448"></a>03448       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03449"></a>03449       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (attr_new);
<a name="l03450"></a>03450       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03451"></a>03451       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03452"></a>03452       <span class="keywordflow">return</span>;
<a name="l03453"></a>03453     }
<a name="l03454"></a>03454       <span class="keywordflow">else</span>
<a name="l03455"></a>03455     {
<a name="l03456"></a>03456       <span class="comment">/* The attribute is changed. */</span>
<a name="l03457"></a>03457       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l03458"></a>03458 
<a name="l03459"></a>03459       <span class="comment">/* Rewrite BGP route information. */</span>
<a name="l03460"></a>03460       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l03461"></a>03461         <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a>(rn, ri);
<a name="l03462"></a>03462       <span class="keywordflow">else</span>
<a name="l03463"></a>03463         <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, ri, afi, safi);
<a name="l03464"></a>03464       <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l03465"></a>03465       ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = attr_new;
<a name="l03466"></a>03466       ri-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l03467"></a>03467 
<a name="l03468"></a>03468       <span class="comment">/* Process change. */</span>
<a name="l03469"></a>03469       <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, ri, afi, safi);
<a name="l03470"></a>03470       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03471"></a>03471       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03472"></a>03472       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03473"></a>03473       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03474"></a>03474       <span class="keywordflow">return</span>;
<a name="l03475"></a>03475     }
<a name="l03476"></a>03476     }
<a name="l03477"></a>03477 
<a name="l03478"></a>03478   <span class="comment">/* Make new BGP info. */</span>
<a name="l03479"></a>03479   <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l03480"></a>03480   <span class="keyword">new</span>-&gt;type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
<a name="l03481"></a>03481   <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>;
<a name="l03482"></a>03482   <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l03483"></a>03483   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l03484"></a>03484   <span class="keyword">new</span>-&gt;attr = attr_new;
<a name="l03485"></a>03485   <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l03486"></a>03486 
<a name="l03487"></a>03487   <span class="comment">/* Aggregate address increment. */</span>
<a name="l03488"></a>03488   <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, <span class="keyword">new</span>, afi, safi);
<a name="l03489"></a>03489   
<a name="l03490"></a>03490   <span class="comment">/* Register new BGP information. */</span>
<a name="l03491"></a>03491   <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l03492"></a>03492   
<a name="l03493"></a>03493   <span class="comment">/* route_node_get lock */</span>
<a name="l03494"></a>03494   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03495"></a>03495   
<a name="l03496"></a>03496   <span class="comment">/* Process change. */</span>
<a name="l03497"></a>03497   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03498"></a>03498 
<a name="l03499"></a>03499   <span class="comment">/* Unintern original. */</span>
<a name="l03500"></a>03500   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l03501"></a>03501   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l03502"></a>03502 }
<a name="l03503"></a>03503 
<a name="l03504"></a>03504 <span class="keywordtype">void</span>
<a name="l03505"></a><a class="code" href="bgp__route_8h.html#a3c60dc79eda8a778b3bd202a10b413c7">03505</a> <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l03506"></a>03506                   <span class="keyword">struct</span> <a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03507"></a>03507 {
<a name="l03508"></a>03508   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *rsclient;
<a name="l03509"></a>03509   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03510"></a>03510 
<a name="l03511"></a>03511   <a class="code" href="bgp__route_8c.html#adf87800006cc4fc05a3eb602e9870697">bgp_static_update_main</a> (bgp, p, bgp_static, afi, safi);
<a name="l03512"></a>03512 
<a name="l03513"></a>03513   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, node, nnode, rsclient))
<a name="l03514"></a>03514     {
<a name="l03515"></a>03515       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rsclient-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l03516"></a>03516         <a class="code" href="bgp__route_8c.html#adde0f36163e0fb2c47de7cf95f8bbe56">bgp_static_update_rsclient</a> (rsclient, p, bgp_static, afi, safi);
<a name="l03517"></a>03517     }
<a name="l03518"></a>03518 }
<a name="l03519"></a>03519 
<a name="l03520"></a>03520 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03521"></a><a class="code" href="bgp__route_8c.html#a993bebd87ca0ad9166c4e65c697c9f79">03521</a> <a class="code" href="bgp__route_8c.html#a993bebd87ca0ad9166c4e65c697c9f79">bgp_static_update_vpnv4</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int16_t afi,
<a name="l03522"></a>03522              u_char safi, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l03523"></a>03523 {
<a name="l03524"></a>03524   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03525"></a>03525   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l03526"></a>03526   
<a name="l03527"></a>03527   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l03528"></a>03528 
<a name="l03529"></a>03529   <span class="comment">/* Make new BGP info. */</span>
<a name="l03530"></a>03530   <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l03531"></a>03531   <span class="keyword">new</span>-&gt;type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
<a name="l03532"></a>03532   <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>;
<a name="l03533"></a>03533   <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l03534"></a>03534   <span class="keyword">new</span>-&gt;attr = <a class="code" href="bgp__attr_8c.html#a975568591569d47a1a18abf72484138a">bgp_attr_default_intern</a> (<a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>);
<a name="l03535"></a>03535   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l03536"></a>03536   <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l03537"></a>03537   <span class="keyword">new</span>-&gt;extra = <a class="code" href="bgp__route_8c.html#a87ee6a929c17bd9186e7125d5670a309">bgp_info_extra_new</a>();
<a name="l03538"></a>03538   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;extra-&gt;tag, tag, 3);
<a name="l03539"></a>03539 
<a name="l03540"></a>03540   <span class="comment">/* Aggregate address increment. */</span>
<a name="l03541"></a>03541   <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, <span class="keyword">new</span>, afi, safi);
<a name="l03542"></a>03542   
<a name="l03543"></a>03543   <span class="comment">/* Register new BGP information. */</span>
<a name="l03544"></a>03544   <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l03545"></a>03545 
<a name="l03546"></a>03546   <span class="comment">/* route_node_get lock */</span>
<a name="l03547"></a>03547   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03548"></a>03548   
<a name="l03549"></a>03549   <span class="comment">/* Process change. */</span>
<a name="l03550"></a>03550   <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03551"></a>03551 }
<a name="l03552"></a>03552 
<a name="l03553"></a>03553 <span class="keywordtype">void</span>
<a name="l03554"></a><a class="code" href="bgp__route_8h.html#a2b87965793d5ca53685fc17b9c5f9cc2">03554</a> <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l03555"></a>03555              <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03556"></a>03556 {
<a name="l03557"></a>03557   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03558"></a>03558   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l03559"></a>03559 
<a name="l03560"></a>03560   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03561"></a>03561 
<a name="l03562"></a>03562   <span class="comment">/* Check selected route and self inserted route. */</span>
<a name="l03563"></a>03563   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l03564"></a>03564     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> 
<a name="l03565"></a>03565     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l03566"></a>03566     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l03567"></a>03567       <span class="keywordflow">break</span>;
<a name="l03568"></a>03568 
<a name="l03569"></a>03569   <span class="comment">/* Withdraw static BGP route from routing table. */</span>
<a name="l03570"></a>03570   <span class="keywordflow">if</span> (ri)
<a name="l03571"></a>03571     {
<a name="l03572"></a>03572       <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, ri, afi, safi);
<a name="l03573"></a>03573       <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l03574"></a>03574       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03575"></a>03575     }
<a name="l03576"></a>03576 
<a name="l03577"></a>03577   <span class="comment">/* Unlock bgp_node_lookup. */</span>
<a name="l03578"></a>03578   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03579"></a>03579 }
<a name="l03580"></a>03580 
<a name="l03581"></a>03581 <span class="keywordtype">void</span>
<a name="l03582"></a><a class="code" href="bgp__route_8h.html#a2fdb62c8a10046002627ce0298e0d404">03582</a> <a class="code" href="bgp__route_8c.html#a2fdb62c8a10046002627ce0298e0d404">bgp_check_local_routes_rsclient</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *rsclient, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03583"></a>03583 {
<a name="l03584"></a>03584   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03585"></a>03585   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03586"></a>03586   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03587"></a>03587   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l03588"></a>03588 
<a name="l03589"></a>03589   bgp = rsclient-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l03590"></a>03590 
<a name="l03591"></a>03591   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l03592"></a>03592     <span class="keywordflow">if</span> ((bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03593"></a>03593       {
<a name="l03594"></a>03594         p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l03595"></a>03595 
<a name="l03596"></a>03596         <a class="code" href="bgp__route_8c.html#adde0f36163e0fb2c47de7cf95f8bbe56">bgp_static_update_rsclient</a> (rsclient, p, bgp_static,
<a name="l03597"></a>03597                 afi, safi);
<a name="l03598"></a>03598       }
<a name="l03599"></a>03599 }
<a name="l03600"></a>03600 
<a name="l03601"></a>03601 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03602"></a><a class="code" href="bgp__route_8c.html#a949bc552da03f5b91ab061802527294b">03602</a> <a class="code" href="bgp__route_8c.html#a949bc552da03f5b91ab061802527294b">bgp_static_withdraw_vpnv4</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int16_t afi,
<a name="l03603"></a>03603                u_char safi, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l03604"></a>03604 {
<a name="l03605"></a>03605   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03606"></a>03606   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l03607"></a>03607 
<a name="l03608"></a>03608   rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], afi, safi, p, prd);
<a name="l03609"></a>03609 
<a name="l03610"></a>03610   <span class="comment">/* Check selected route and self inserted route. */</span>
<a name="l03611"></a>03611   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l03612"></a>03612     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> 
<a name="l03613"></a>03613     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l03614"></a>03614     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a3c52611f8ef467c61080e1444b91d73d">BGP_ROUTE_STATIC</a>)
<a name="l03615"></a>03615       <span class="keywordflow">break</span>;
<a name="l03616"></a>03616 
<a name="l03617"></a>03617   <span class="comment">/* Withdraw static BGP route from routing table. */</span>
<a name="l03618"></a>03618   <span class="keywordflow">if</span> (ri)
<a name="l03619"></a>03619     {
<a name="l03620"></a>03620       <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, ri, afi, safi);
<a name="l03621"></a>03621       <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l03622"></a>03622       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l03623"></a>03623     }
<a name="l03624"></a>03624 
<a name="l03625"></a>03625   <span class="comment">/* Unlock bgp_node_lookup. */</span>
<a name="l03626"></a>03626   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03627"></a>03627 }
<a name="l03628"></a>03628 
<a name="l03629"></a>03629 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03630"></a><a class="code" href="bgp__route_8c.html#a45bb68a5cf818ba7d1921baf0e62ccf2">03630</a> <a class="code" href="bgp__route_8c.html#a45bb68a5cf818ba7d1921baf0e62ccf2">bgp_pathlimit_update_parents</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn,
<a name="l03631"></a>03631                               <span class="keywordtype">int</span> ttl_edge)
<a name="l03632"></a>03632 {
<a name="l03633"></a>03633   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a> = rn;
<a name="l03634"></a>03634   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *sp;
<a name="l03635"></a>03635   
<a name="l03636"></a>03636   <span class="comment">/* Existing static changed TTL, search parents and adjust their atomic */</span>
<a name="l03637"></a>03637   <span class="keywordflow">while</span> ((parent = parent-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>))
<a name="l03638"></a>03638     <span class="keywordflow">if</span> ((sp = parent-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>))
<a name="l03639"></a>03639       {
<a name="l03640"></a>03640         <span class="keywordtype">int</span> sp_level = (sp-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a> ? 1 : 0);
<a name="l03641"></a>03641         ttl_edge ? sp-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a>++ : sp-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a>--;
<a name="l03642"></a>03642         
<a name="l03643"></a>03643         <span class="comment">/* did we change state of parent whether atomic is set or not? */</span>
<a name="l03644"></a>03644         <span class="keywordflow">if</span> (sp_level != (sp-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a> ? 1 : 0))
<a name="l03645"></a>03645           {
<a name="l03646"></a>03646             <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;parent-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, sp,
<a name="l03647"></a>03647                                rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>, rn-&gt;<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>);
<a name="l03648"></a>03648           }
<a name="l03649"></a>03649       }
<a name="l03650"></a>03650 }
<a name="l03651"></a>03651 
<a name="l03652"></a>03652 <span class="comment">/* Configure static BGP network.  When user don&#39;t run zebra, static</span>
<a name="l03653"></a>03653 <span class="comment">   route should be installed as valid.  */</span>
<a name="l03654"></a>03654 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03655"></a><a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">03655</a> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, 
<a name="l03656"></a>03656                 u_int16_t afi, u_char safi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structrmap.html">rmap</a>, <span class="keywordtype">int</span> <a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>,
<a name="l03657"></a>03657                 u_char <a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>)
<a name="l03658"></a>03658 {
<a name="l03659"></a>03659   <span class="keywordtype">int</span> ret;
<a name="l03660"></a>03660   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l03661"></a>03661   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03662"></a>03662   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03663"></a>03663   u_char need_update = 0;
<a name="l03664"></a>03664   u_char ttl_change = 0;
<a name="l03665"></a>03665   u_char ttl_edge = (ttl ? 1 : 0);
<a name="l03666"></a>03666   u_char <span class="keyword">new</span> = 0;
<a name="l03667"></a>03667 
<a name="l03668"></a>03668   <span class="comment">/* Convert IP prefix string to struct prefix. */</span>
<a name="l03669"></a>03669   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;p);
<a name="l03670"></a>03670   <span class="keywordflow">if</span> (! ret)
<a name="l03671"></a>03671     {
<a name="l03672"></a>03672       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03673"></a>03673       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03674"></a>03674     }
<a name="l03675"></a>03675 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l03676"></a>03676 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
<a name="l03677"></a>03677     {
<a name="l03678"></a>03678       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix (link-local address)%s&quot;</span>,
<a name="l03679"></a>03679            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03680"></a>03680       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03681"></a>03681     }
<a name="l03682"></a>03682 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l03683"></a>03683 
<a name="l03684"></a>03684   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l03685"></a>03685 
<a name="l03686"></a>03686   <span class="comment">/* Set BGP static route configuration. */</span>
<a name="l03687"></a>03687   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi], &amp;p);
<a name="l03688"></a>03688 
<a name="l03689"></a>03689   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l03690"></a>03690     {
<a name="l03691"></a>03691       <span class="comment">/* Configuration change. */</span>
<a name="l03692"></a>03692       bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03693"></a>03693 
<a name="l03694"></a>03694       <span class="comment">/* Check previous routes are installed into BGP.  */</span>
<a name="l03695"></a>03695       <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>)
<a name="l03696"></a>03696         {
<a name="l03697"></a>03697           <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a> != backdoor
<a name="l03698"></a>03698               || bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> != ttl)
<a name="l03699"></a>03699             need_update = 1;
<a name="l03700"></a>03700         }
<a name="l03701"></a>03701       
<a name="l03702"></a>03702       <span class="comment">/* need to catch TTL set/unset transitions for handling of</span>
<a name="l03703"></a>03703 <span class="comment">       * ATOMIC_AGGREGATE </span>
<a name="l03704"></a>03704 <span class="comment">       */</span> 
<a name="l03705"></a>03705       <span class="keywordflow">if</span> ((bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> ? 1 : 0) != ttl_edge)
<a name="l03706"></a>03706         ttl_change = 1;
<a name="l03707"></a>03707           
<a name="l03708"></a>03708       bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a> = backdoor;
<a name="l03709"></a>03709       bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> = ttl;
<a name="l03710"></a>03710       
<a name="l03711"></a>03711       <span class="keywordflow">if</span> (rmap)
<a name="l03712"></a>03712     {
<a name="l03713"></a>03713       <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03714"></a>03714         free (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>);
<a name="l03715"></a>03715       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a> = strdup (rmap);
<a name="l03716"></a>03716       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rmap);
<a name="l03717"></a>03717     }
<a name="l03718"></a>03718       <span class="keywordflow">else</span>
<a name="l03719"></a>03719     {
<a name="l03720"></a>03720       <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03721"></a>03721         free (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>);
<a name="l03722"></a>03722       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03723"></a>03723       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03724"></a>03724       bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 0;
<a name="l03725"></a>03725     }
<a name="l03726"></a>03726       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03727"></a>03727     }
<a name="l03728"></a>03728   <span class="keywordflow">else</span>
<a name="l03729"></a>03729     {
<a name="l03730"></a>03730       <span class="comment">/* New configuration. */</span>
<a name="l03731"></a>03731       bgp_static = <a class="code" href="bgp__route_8c.html#a3ba6f7387a668fed8fced2ea48559855">bgp_static_new</a> ();
<a name="l03732"></a>03732       bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a> = backdoor;
<a name="l03733"></a>03733       bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 0;
<a name="l03734"></a>03734       bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a> = 0;
<a name="l03735"></a>03735       bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>.s_addr = 0;
<a name="l03736"></a>03736       bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> = ttl;
<a name="l03737"></a>03737       ttl_change = ttl_edge;
<a name="l03738"></a>03738       <span class="keyword">new</span> = 1;
<a name="l03739"></a>03739       
<a name="l03740"></a>03740       <span class="keywordflow">if</span> (rmap)
<a name="l03741"></a>03741     {
<a name="l03742"></a>03742       <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l03743"></a>03743         free (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>);
<a name="l03744"></a>03744       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a> = strdup (rmap);
<a name="l03745"></a>03745       bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rmap);
<a name="l03746"></a>03746     }
<a name="l03747"></a>03747       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bgp_static;
<a name="l03748"></a>03748     }
<a name="l03749"></a>03749 
<a name="l03750"></a>03750   <span class="comment">/* &quot;.. sites that choose to advertise the</span>
<a name="l03751"></a>03751 <span class="comment">   *  AS_PATHLIMIT path attribute SHOULD advertise the ATOMIC_AGGREGATE on</span>
<a name="l03752"></a>03752 <span class="comment">   *  all less specific covering prefixes as well as the more specific</span>
<a name="l03753"></a>03753 <span class="comment">   *  prefixes.&quot;</span>
<a name="l03754"></a>03754 <span class="comment">   *</span>
<a name="l03755"></a>03755 <span class="comment">   * So:</span>
<a name="l03756"></a>03756 <span class="comment">   * Prefix that has just had pathlimit set/unset:</span>
<a name="l03757"></a>03757 <span class="comment">   * - Must bump ATOMIC refcount on all parents.</span>
<a name="l03758"></a>03758 <span class="comment">   *</span>
<a name="l03759"></a>03759 <span class="comment">   * To catch less specific prefixes:</span>
<a name="l03760"></a>03760 <span class="comment">   * - Must search children for ones with TTL, bump atomic refcount</span>
<a name="l03761"></a>03761 <span class="comment">   *   (we dont care if we&#39;re deleting a less specific prefix..)</span>
<a name="l03762"></a>03762 <span class="comment">   */</span>
<a name="l03763"></a>03763   <span class="keywordflow">if</span> (ttl_change)
<a name="l03764"></a>03764     {
<a name="l03765"></a>03765       <span class="comment">/* Existing static changed TTL, search parents and adjust their atomic */</span>
<a name="l03766"></a>03766       <a class="code" href="bgp__route_8c.html#a45bb68a5cf818ba7d1921baf0e62ccf2">bgp_pathlimit_update_parents</a> (bgp, rn, ttl_edge);
<a name="l03767"></a>03767     }
<a name="l03768"></a>03768   
<a name="l03769"></a>03769   <span class="keywordflow">if</span> (<span class="keyword">new</span>)
<a name="l03770"></a>03770     {
<a name="l03771"></a>03771       <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *child;
<a name="l03772"></a>03772       <span class="keyword">struct </span>bgp_static *sc;
<a name="l03773"></a>03773       
<a name="l03774"></a>03774       <span class="comment">/* New static, search children and bump this statics atomic.. */</span>
<a name="l03775"></a>03775       child = <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn); <span class="comment">/* route_next_until unlocks it.. */</span>
<a name="l03776"></a>03776       <span class="keywordflow">while</span> ((child = <a class="code" href="bgp__table_8c.html#a689ab08e34c8d837709b2033563dcba9">bgp_route_next_until</a> (child, rn)))
<a name="l03777"></a>03777         {
<a name="l03778"></a>03778           <span class="keywordflow">if</span> ((sc = child-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) &amp;&amp; sc-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>)
<a name="l03779"></a>03779             bgp_static-&gt;<a class="code" href="structbgp__static.html#ab4d379ac74eae4070e11b425e938a0e8">atomic</a>++;
<a name="l03780"></a>03780         }
<a name="l03781"></a>03781     }
<a name="l03782"></a>03782   
<a name="l03783"></a>03783   <span class="comment">/* If BGP scan is not enabled, we should install this route here.  */</span>
<a name="l03784"></a>03784   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a6bc6dc724e29fd024f008b87f02e4b54">BGP_FLAG_IMPORT_CHECK</a>))
<a name="l03785"></a>03785     {
<a name="l03786"></a>03786       bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 1;
<a name="l03787"></a>03787 
<a name="l03788"></a>03788       <span class="keywordflow">if</span> (need_update)
<a name="l03789"></a>03789     <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, &amp;p, afi, safi);
<a name="l03790"></a>03790 
<a name="l03791"></a>03791       <span class="keywordflow">if</span> (! bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
<a name="l03792"></a>03792     <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;p, bgp_static, afi, safi);
<a name="l03793"></a>03793     }
<a name="l03794"></a>03794 
<a name="l03795"></a>03795   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03796"></a>03796 }
<a name="l03797"></a>03797 
<a name="l03798"></a>03798 <span class="comment">/* Configure static BGP network. */</span>
<a name="l03799"></a>03799 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03800"></a><a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">03800</a> <a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">bgp_static_unset</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str,
<a name="l03801"></a>03801           u_int16_t afi, u_char safi)
<a name="l03802"></a>03802 {
<a name="l03803"></a>03803   <span class="keywordtype">int</span> ret;
<a name="l03804"></a>03804   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l03805"></a>03805   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03806"></a>03806   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03807"></a>03807 
<a name="l03808"></a>03808   <span class="comment">/* Convert IP prefix string to struct prefix. */</span>
<a name="l03809"></a>03809   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;p);
<a name="l03810"></a>03810   <span class="keywordflow">if</span> (! ret)
<a name="l03811"></a>03811     {
<a name="l03812"></a>03812       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03813"></a>03813       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03814"></a>03814     }
<a name="l03815"></a>03815 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l03816"></a>03816 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
<a name="l03817"></a>03817     {
<a name="l03818"></a>03818       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix (link-local address)%s&quot;</span>,
<a name="l03819"></a>03819            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03820"></a>03820       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03821"></a>03821     }
<a name="l03822"></a>03822 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l03823"></a>03823 
<a name="l03824"></a>03824   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l03825"></a>03825 
<a name="l03826"></a>03826   rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi], &amp;p);
<a name="l03827"></a>03827   <span class="keywordflow">if</span> (! rn)
<a name="l03828"></a>03828     {
<a name="l03829"></a>03829       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified static route configuration.%s&quot;</span>,
<a name="l03830"></a>03830            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03831"></a>03831       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03832"></a>03832     }
<a name="l03833"></a>03833 
<a name="l03834"></a>03834   bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03835"></a>03835   
<a name="l03836"></a>03836   <span class="comment">/* decrement atomic in parents, see bgp_static_set */</span>
<a name="l03837"></a>03837   <a class="code" href="bgp__route_8c.html#a45bb68a5cf818ba7d1921baf0e62ccf2">bgp_pathlimit_update_parents</a> (bgp, rn, 0);
<a name="l03838"></a>03838   
<a name="l03839"></a>03839   <span class="comment">/* Update BGP RIB. */</span>
<a name="l03840"></a>03840   <span class="keywordflow">if</span> (! bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
<a name="l03841"></a>03841     <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, &amp;p, afi, safi);
<a name="l03842"></a>03842 
<a name="l03843"></a>03843   <span class="comment">/* Clear configuration. */</span>
<a name="l03844"></a>03844   <a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">bgp_static_free</a> (bgp_static);
<a name="l03845"></a>03845   rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03846"></a>03846   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03847"></a>03847   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03848"></a>03848 
<a name="l03849"></a>03849   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03850"></a>03850 }
<a name="l03851"></a>03851 
<a name="l03852"></a>03852 <span class="comment">/* Called from bgp_delete().  Delete all static routes from the BGP</span>
<a name="l03853"></a>03853 <span class="comment">   instance. */</span>
<a name="l03854"></a>03854 <span class="keywordtype">void</span>
<a name="l03855"></a><a class="code" href="bgp__route_8h.html#a11050c063fc4bf2dade8bddefecd117e">03855</a> <a class="code" href="bgp__route_8c.html#a4902f0940ffe01568daa3d9df842c874">bgp_static_delete</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l03856"></a>03856 {
<a name="l03857"></a>03857   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l03858"></a>03858   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l03859"></a>03859   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03860"></a>03860   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rm;
<a name="l03861"></a>03861   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l03862"></a>03862   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03863"></a>03863 
<a name="l03864"></a>03864   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l03865"></a>03865     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l03866"></a>03866       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l03867"></a>03867     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03868"></a>03868       {      
<a name="l03869"></a>03869         <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l03870"></a>03870           {
<a name="l03871"></a>03871         table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03872"></a>03872 
<a name="l03873"></a>03873         <span class="keywordflow">for</span> (rm = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rm; rm = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rm))
<a name="l03874"></a>03874           {
<a name="l03875"></a>03875             bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03876"></a>03876             <a class="code" href="bgp__route_8c.html#a949bc552da03f5b91ab061802527294b">bgp_static_withdraw_vpnv4</a> (bgp, &amp;rm-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>,
<a name="l03877"></a>03877                            <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>,
<a name="l03878"></a>03878                            (<span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *)&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>,
<a name="l03879"></a>03879                            bgp_static-&gt;<a class="code" href="structbgp__static.html#ac8be92b08f87ccf5e9817c12542dcfe4">tag</a>);
<a name="l03880"></a>03880             <a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">bgp_static_free</a> (bgp_static);
<a name="l03881"></a>03881             rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03882"></a>03882             <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03883"></a>03883           }
<a name="l03884"></a>03884           }
<a name="l03885"></a>03885         <span class="keywordflow">else</span>
<a name="l03886"></a>03886           {
<a name="l03887"></a>03887         bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03888"></a>03888         <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi);
<a name="l03889"></a>03889         <a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">bgp_static_free</a> (bgp_static);
<a name="l03890"></a>03890         rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03891"></a>03891         <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03892"></a>03892           }
<a name="l03893"></a>03893       }
<a name="l03894"></a>03894 }
<a name="l03895"></a>03895 
<a name="l03896"></a>03896 <span class="keywordtype">int</span>
<a name="l03897"></a><a class="code" href="bgp__route_8h.html#af7cc8ee989b92046e19dc2db89fe1bd8">03897</a> <a class="code" href="bgp__route_8c.html#a477ac70385162d533769b46a560133f6">bgp_static_set_vpnv4</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *rd_str,
<a name="l03898"></a>03898               <span class="keyword">const</span> <span class="keywordtype">char</span> *tag_str)
<a name="l03899"></a>03899 {
<a name="l03900"></a>03900   <span class="keywordtype">int</span> ret;
<a name="l03901"></a>03901   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l03902"></a>03902   <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> prd;
<a name="l03903"></a>03903   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03904"></a>03904   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>;
<a name="l03905"></a>03905   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03906"></a>03906   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l03907"></a>03907   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03908"></a>03908   u_char <a class="code" href="structbgp__static.html#ac8be92b08f87ccf5e9817c12542dcfe4">tag</a>[3];
<a name="l03909"></a>03909 
<a name="l03910"></a>03910   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l03911"></a>03911 
<a name="l03912"></a>03912   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;p);
<a name="l03913"></a>03913   <span class="keywordflow">if</span> (! ret)
<a name="l03914"></a>03914     {
<a name="l03915"></a>03915       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03916"></a>03916       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03917"></a>03917     }
<a name="l03918"></a>03918   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l03919"></a>03919 
<a name="l03920"></a>03920   ret = <a class="code" href="bgp__mplsvpn_8c.html#a296cfbde78d5b77bb55f852b2e1cabdd">str2prefix_rd</a> (rd_str, &amp;prd);
<a name="l03921"></a>03921   <span class="keywordflow">if</span> (! ret)
<a name="l03922"></a>03922     {
<a name="l03923"></a>03923       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed rd%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03924"></a>03924       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03925"></a>03925     }
<a name="l03926"></a>03926 
<a name="l03927"></a>03927   ret = <a class="code" href="bgp__mplsvpn_8c.html#a351be45ea03f40abf1b4247e2a71a8f4">str2tag</a> (tag_str, tag);
<a name="l03928"></a>03928   <span class="keywordflow">if</span> (! ret)
<a name="l03929"></a>03929     {
<a name="l03930"></a>03930       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed tag%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03931"></a>03931       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03932"></a>03932     }
<a name="l03933"></a>03933 
<a name="l03934"></a>03934   prn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>],
<a name="l03935"></a>03935             (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;prd);
<a name="l03936"></a>03936   <span class="keywordflow">if</span> (prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03937"></a>03937     prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MPLS_VPN);
<a name="l03938"></a>03938   <span class="keywordflow">else</span>
<a name="l03939"></a>03939     <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (prn);
<a name="l03940"></a>03940   table = prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l03941"></a>03941 
<a name="l03942"></a>03942   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, &amp;p);
<a name="l03943"></a>03943 
<a name="l03944"></a>03944   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l03945"></a>03945     {
<a name="l03946"></a>03946       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Same network configuration exists%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03947"></a>03947       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l03948"></a>03948     }
<a name="l03949"></a>03949   <span class="keywordflow">else</span>
<a name="l03950"></a>03950     {
<a name="l03951"></a>03951       <span class="comment">/* New configuration. */</span>
<a name="l03952"></a>03952       bgp_static = <a class="code" href="bgp__route_8c.html#a3ba6f7387a668fed8fced2ea48559855">bgp_static_new</a> ();
<a name="l03953"></a>03953       bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 1;
<a name="l03954"></a>03954       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ac8be92b08f87ccf5e9817c12542dcfe4">tag</a>, tag, 3);
<a name="l03955"></a>03955       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bgp_static;
<a name="l03956"></a>03956 
<a name="l03957"></a>03957       <a class="code" href="bgp__route_8c.html#a993bebd87ca0ad9166c4e65c697c9f79">bgp_static_update_vpnv4</a> (bgp, &amp;p, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MPLS_VPN, &amp;prd, tag);
<a name="l03958"></a>03958     }
<a name="l03959"></a>03959 
<a name="l03960"></a>03960   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03961"></a>03961 }
<a name="l03962"></a>03962 
<a name="l03963"></a>03963 <span class="comment">/* Configure static BGP network. */</span>
<a name="l03964"></a>03964 <span class="keywordtype">int</span>
<a name="l03965"></a><a class="code" href="bgp__route_8h.html#adbb9c96c25faf124bcf3e104607777f1">03965</a> <a class="code" href="bgp__route_8c.html#ab02340eb78bf5d97ddafce4f0fc948fa">bgp_static_unset_vpnv4</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, 
<a name="l03966"></a>03966                         <span class="keyword">const</span> <span class="keywordtype">char</span> *rd_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *tag_str)
<a name="l03967"></a>03967 {
<a name="l03968"></a>03968   <span class="keywordtype">int</span> ret;
<a name="l03969"></a>03969   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03970"></a>03970   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l03971"></a>03971   <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> prd;
<a name="l03972"></a>03972   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>;
<a name="l03973"></a>03973   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l03974"></a>03974   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l03975"></a>03975   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l03976"></a>03976   u_char <a class="code" href="structbgp__static.html#ac8be92b08f87ccf5e9817c12542dcfe4">tag</a>[3];
<a name="l03977"></a>03977 
<a name="l03978"></a>03978   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l03979"></a>03979 
<a name="l03980"></a>03980   <span class="comment">/* Convert IP prefix string to struct prefix. */</span>
<a name="l03981"></a>03981   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;p);
<a name="l03982"></a>03982   <span class="keywordflow">if</span> (! ret)
<a name="l03983"></a>03983     {
<a name="l03984"></a>03984       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03985"></a>03985       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03986"></a>03986     }
<a name="l03987"></a>03987   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l03988"></a>03988 
<a name="l03989"></a>03989   ret = <a class="code" href="bgp__mplsvpn_8c.html#a296cfbde78d5b77bb55f852b2e1cabdd">str2prefix_rd</a> (rd_str, &amp;prd);
<a name="l03990"></a>03990   <span class="keywordflow">if</span> (! ret)
<a name="l03991"></a>03991     {
<a name="l03992"></a>03992       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed rd%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03993"></a>03993       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03994"></a>03994     }
<a name="l03995"></a>03995 
<a name="l03996"></a>03996   ret = <a class="code" href="bgp__mplsvpn_8c.html#a351be45ea03f40abf1b4247e2a71a8f4">str2tag</a> (tag_str, tag);
<a name="l03997"></a>03997   <span class="keywordflow">if</span> (! ret)
<a name="l03998"></a>03998     {
<a name="l03999"></a>03999       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed tag%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04000"></a>04000       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04001"></a>04001     }
<a name="l04002"></a>04002 
<a name="l04003"></a>04003   prn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>],
<a name="l04004"></a>04004             (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;prd);
<a name="l04005"></a>04005   <span class="keywordflow">if</span> (prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l04006"></a>04006     prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MPLS_VPN);
<a name="l04007"></a>04007   <span class="keywordflow">else</span>
<a name="l04008"></a>04008     <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (prn);
<a name="l04009"></a>04009   table = prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l04010"></a>04010 
<a name="l04011"></a>04011   rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (table, &amp;p);
<a name="l04012"></a>04012 
<a name="l04013"></a>04013   <span class="keywordflow">if</span> (rn)
<a name="l04014"></a>04014     {
<a name="l04015"></a>04015       <a class="code" href="bgp__route_8c.html#a949bc552da03f5b91ab061802527294b">bgp_static_withdraw_vpnv4</a> (bgp, &amp;p, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MPLS_VPN, &amp;prd, tag);
<a name="l04016"></a>04016 
<a name="l04017"></a>04017       bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l04018"></a>04018       <a class="code" href="bgp__route_8c.html#ab9ed95d988c9782fbfda8fe175344bda">bgp_static_free</a> (bgp_static);
<a name="l04019"></a>04019       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04020"></a>04020       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04021"></a>04021       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04022"></a>04022     }
<a name="l04023"></a>04023   <span class="keywordflow">else</span>
<a name="l04024"></a>04024     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find the route%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04025"></a>04025 
<a name="l04026"></a>04026   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l04027"></a>04027 }
<a name="l04028"></a>04028 
<a name="l04029"></a><a class="code" href="bgp__route_8c.html#a7ce345bb3824b60bf647d936d874322c">04029</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network,
<a name="l04030"></a>04030        bgp_network_cmd,
<a name="l04031"></a>04031        <span class="stringliteral">&quot;network A.B.C.D/M&quot;</span>,
<a name="l04032"></a>04032        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04033"></a>04033        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l04034"></a>04034 {
<a name="l04035"></a>04035   u_char <a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> = 0;
<a name="l04036"></a>04036   
<a name="l04037"></a>04037   <span class="keywordflow">if</span> (argc == 2)
<a name="l04038"></a>04038     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[1], 1, 255);
<a name="l04039"></a>04039   
<a name="l04040"></a>04040   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0],
<a name="l04041"></a>04041              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, ttl);
<a name="l04042"></a>04042 }
<a name="l04043"></a>04043 
<a name="l04044"></a>04044 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network,
<a name="l04045"></a>04045        bgp_network_ttl_cmd,
<a name="l04046"></a>04046        <span class="stringliteral">&quot;network A.B.C.D/M pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04047"></a>04047        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04048"></a>04048        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l04049"></a>04049        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04050"></a>04050        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04051"></a>04051 
<a name="l04052"></a>04052 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_route_map,
<a name="l04053"></a><a class="code" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">04053</a>        <a class="code" href="bgp__route_8c.html#ad5aca6be105a2339aa723cfae3c1822c">bgp_network_route_map_cmd</a>,
<a name="l04054"></a>04054        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> <a class="code" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;,
<a name="l04055"></a>04055        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04056"></a>04056        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>&gt;, e.<a class="code" href="bgp__route_8c.html#a7ffdcd98fe58cb9d89e7f6aa804288e1">g</a>., 35.0.0.0/8\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04057"></a>04057        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04058"></a>04058        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l04059"></a>04059 {
<a name="l04060"></a>04060   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0],
<a name="l04061"></a>04061              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), argv[1], 0, 0);
<a name="l04062"></a>04062 }
<a name="l04063"></a>04063 
<a name="l04064"></a>04064 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_backdoor,
<a name="l04065"></a>04065        bgp_network_backdoor_cmd,
<a name="l04066"></a>04066        <span class="stringliteral">&quot;network A.B.C.D/M backdoor&quot;</span>,
<a name="l04067"></a>04067        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04068"></a>04068        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l04069"></a>04069        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>)
<a name="l04070"></a>04070 {
<a name="l04071"></a>04071   u_char <a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a> = 0;
<a name="l04072"></a>04072   
<a name="l04073"></a>04073   <span class="keywordflow">if</span> (argc == 2)
<a name="l04074"></a>04074     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[1], 1, 255);
<a name="l04075"></a>04075   
<a name="l04076"></a>04076   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>,
<a name="l04077"></a>04077                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1, ttl);
<a name="l04078"></a>04078 }
<a name="l04079"></a>04079 
<a name="l04080"></a>04080 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network_backdoor,
<a name="l04081"></a>04081        bgp_network_backdoor_ttl_cmd,
<a name="l04082"></a>04082        <span class="stringliteral">&quot;network A.B.C.D/M backdoor pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04083"></a>04083        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04084"></a>04084        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l04085"></a>04085        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>
<a name="l04086"></a>04086        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04087"></a>04087        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04088"></a>04088 
<a name="l04089"></a>04089 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask,
<a name="l04090"></a>04090        bgp_network_mask_cmd,
<a name="l04091"></a>04091        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D&quot;,
<a name="l04092"></a>04092        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04093"></a>04093        &quot;Network number\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04094"></a>04094        &quot;Network mask\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l04095"></a>04095        &quot;Network mask\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l04096"></a>04096 {
<a name="l04097"></a>04097   <span class="keywordtype">int</span> ret;
<a name="l04098"></a>04098   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04099"></a>04099   u_char ttl = 0;
<a name="l04100"></a>04100   
<a name="l04101"></a>04101   <span class="keywordflow">if</span> (argc == 3)
<a name="l04102"></a>04102     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[2], 1, 255);
<a name="l04103"></a>04103   
<a name="l04104"></a>04104   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l04105"></a>04105   <span class="keywordflow">if</span> (! ret)
<a name="l04106"></a>04106     {
<a name="l04107"></a>04107       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04108"></a>04108       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04109"></a>04109     }
<a name="l04110"></a>04110 
<a name="l04111"></a>04111   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str,
<a name="l04112"></a>04112              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, ttl);
<a name="l04113"></a>04113 }
<a name="l04114"></a>04114 
<a name="l04115"></a>04115 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network_mask,
<a name="l04116"></a>04116        bgp_network_mask_ttl_cmd,
<a name="l04117"></a>04117        <span class="stringliteral">&quot;network A.B.C.D mask A.B.C.D pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04118"></a>04118        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04119"></a>04119        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04120"></a>04120        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04121"></a>04121        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04122"></a>04122        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04123"></a>04123        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04124"></a>04124 
<a name="l04125"></a>04125 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask_route_map,
<a name="l04126"></a>04126        bgp_network_mask_route_map_cmd,
<a name="l04127"></a>04127        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> <a class="code" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;,
<a name="l04128"></a>04128        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04129"></a>04129        &quot;Network number\n&quot;
<a name="l04130"></a>04130        &quot;Network mask\n&quot;
<a name="l04131"></a>04131        &quot;Network mask\n&quot;
<a name="l04132"></a>04132        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\n&quot;
<a name="l04133"></a>04133        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\n&quot;)
<a name="l04134"></a>04134 {
<a name="l04135"></a>04135   <span class="keywordtype">int</span> ret;
<a name="l04136"></a>04136   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04137"></a>04137   
<a name="l04138"></a>04138   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l04139"></a>04139   <span class="keywordflow">if</span> (! ret)
<a name="l04140"></a>04140     {
<a name="l04141"></a>04141       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04142"></a>04142       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04143"></a>04143     }
<a name="l04144"></a>04144 
<a name="l04145"></a>04145   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str,
<a name="l04146"></a>04146              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), argv[2], 0, 0);
<a name="l04147"></a>04147 }
<a name="l04148"></a>04148 
<a name="l04149"></a>04149 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask_backdoor,
<a name="l04150"></a>04150        bgp_network_mask_backdoor_cmd,
<a name="l04151"></a>04151        <span class="stringliteral">&quot;network A.B.C.D mask A.B.C.D backdoor&quot;</span>,
<a name="l04152"></a>04152        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04153"></a>04153        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04154"></a>04154        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04155"></a>04155        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04156"></a>04156        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>)
<a name="l04157"></a>04157 {
<a name="l04158"></a>04158   <span class="keywordtype">int</span> ret;
<a name="l04159"></a>04159   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04160"></a>04160   u_char ttl = 0;
<a name="l04161"></a>04161   
<a name="l04162"></a>04162   <span class="keywordflow">if</span> (argc == 3)
<a name="l04163"></a>04163     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[2], 1, 255);
<a name="l04164"></a>04164 
<a name="l04165"></a>04165   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l04166"></a>04166   <span class="keywordflow">if</span> (! ret)
<a name="l04167"></a>04167     {
<a name="l04168"></a>04168       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04169"></a>04169       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04170"></a>04170     }
<a name="l04171"></a>04171 
<a name="l04172"></a>04172   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>,
<a name="l04173"></a>04173                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1, ttl);
<a name="l04174"></a>04174 }
<a name="l04175"></a>04175 
<a name="l04176"></a>04176 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network_mask_backdoor,
<a name="l04177"></a>04177        bgp_network_mask_backdoor_ttl_cmd,
<a name="l04178"></a>04178        <span class="stringliteral">&quot;network A.B.C.D mask A.B.C.D backdoor pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04179"></a>04179        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04180"></a>04180        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04181"></a>04181        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04182"></a>04182        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04183"></a>04183        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>
<a name="l04184"></a>04184        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04185"></a>04185        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04186"></a>04186 
<a name="l04187"></a>04187 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask_natural,
<a name="l04188"></a>04188        bgp_network_mask_natural_cmd,
<a name="l04189"></a>04189        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D&quot;,
<a name="l04190"></a>04190        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04191"></a>04191        &quot;Network number\n&quot;)
<a name="l04192"></a>04192 {
<a name="l04193"></a>04193   <span class="keywordtype">int</span> ret;
<a name="l04194"></a>04194   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04195"></a>04195   u_char ttl = 0;
<a name="l04196"></a>04196   
<a name="l04197"></a>04197   <span class="keywordflow">if</span> (argc == 2)
<a name="l04198"></a>04198     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[1], 1, 255);
<a name="l04199"></a>04199 
<a name="l04200"></a>04200   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, prefix_str);
<a name="l04201"></a>04201   <span class="keywordflow">if</span> (! ret)
<a name="l04202"></a>04202     {
<a name="l04203"></a>04203       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04204"></a>04204       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04205"></a>04205     }
<a name="l04206"></a>04206 
<a name="l04207"></a>04207   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str,
<a name="l04208"></a>04208              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, ttl);
<a name="l04209"></a>04209 }
<a name="l04210"></a>04210 
<a name="l04211"></a>04211 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network_mask_natural,
<a name="l04212"></a>04212        bgp_network_mask_natural_ttl_cmd,
<a name="l04213"></a>04213        <span class="stringliteral">&quot;network A.B.C.D pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04214"></a>04214        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04215"></a>04215        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04216"></a>04216        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04217"></a>04217        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04218"></a>04218 
<a name="l04219"></a>04219 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask_natural_route_map,
<a name="l04220"></a>04220        bgp_network_mask_natural_route_map_cmd,
<a name="l04221"></a>04221        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> WORD&quot;,
<a name="l04222"></a>04222        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04223"></a>04223        &quot;Network number\n&quot;
<a name="l04224"></a>04224        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\n&quot;
<a name="l04225"></a>04225        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\n&quot;)
<a name="l04226"></a>04226 {
<a name="l04227"></a>04227   <span class="keywordtype">int</span> ret;
<a name="l04228"></a>04228   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04229"></a>04229 
<a name="l04230"></a>04230   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, prefix_str);
<a name="l04231"></a>04231   <span class="keywordflow">if</span> (! ret)
<a name="l04232"></a>04232     {
<a name="l04233"></a>04233       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04234"></a>04234       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04235"></a>04235     }
<a name="l04236"></a>04236 
<a name="l04237"></a>04237   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str,
<a name="l04238"></a>04238              <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), argv[1], 0, 0);
<a name="l04239"></a>04239 }
<a name="l04240"></a>04240 
<a name="l04241"></a>04241 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_network_mask_natural_backdoor,
<a name="l04242"></a>04242        bgp_network_mask_natural_backdoor_cmd,
<a name="l04243"></a>04243        <span class="stringliteral">&quot;network A.B.C.D backdoor&quot;</span>,
<a name="l04244"></a>04244        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04245"></a>04245        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04246"></a>04246        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>)
<a name="l04247"></a>04247 {
<a name="l04248"></a>04248   <span class="keywordtype">int</span> ret;
<a name="l04249"></a>04249   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04250"></a>04250   u_char ttl = 0;
<a name="l04251"></a>04251   
<a name="l04252"></a>04252   <span class="keywordflow">if</span> (argc == 2)
<a name="l04253"></a>04253     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[1], 1, 255);
<a name="l04254"></a>04254 
<a name="l04255"></a>04255   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, prefix_str);
<a name="l04256"></a>04256   <span class="keywordflow">if</span> (! ret)
<a name="l04257"></a>04257     {
<a name="l04258"></a>04258       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04259"></a>04259       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04260"></a>04260     }
<a name="l04261"></a>04261 
<a name="l04262"></a>04262   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>,
<a name="l04263"></a>04263                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1, ttl);
<a name="l04264"></a>04264 }
<a name="l04265"></a>04265 
<a name="l04266"></a>04266 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_network_mask_natural_backdoor,
<a name="l04267"></a>04267        bgp_network_mask_natural_backdoor_ttl_cmd,
<a name="l04268"></a>04268        <span class="stringliteral">&quot;network A.B.C.D backdoor pathlimit (1-255&gt;&quot;</span>,
<a name="l04269"></a>04269        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04270"></a>04270        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04271"></a>04271        <span class="stringliteral">&quot;Specify a BGP backdoor route\n&quot;</span>
<a name="l04272"></a>04272        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04273"></a>04273        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04274"></a>04274 
<a name="l04275"></a>04275 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_network,
<a name="l04276"></a>04276        no_bgp_network_cmd,
<a name="l04277"></a>04277        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M&quot;,
<a name="l04278"></a>04278        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04279"></a>04279        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04280"></a>04280        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>&gt;, e.<a class="code" href="bgp__route_8c.html#a7ffdcd98fe58cb9d89e7f6aa804288e1">g</a>., 35.0.0.0/8\n&quot;)
<a name="l04281"></a>04281 {
<a name="l04282"></a>04282   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">bgp_static_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, 
<a name="l04283"></a>04283                <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>));
<a name="l04284"></a>04284 }
<a name="l04285"></a>04285 
<a name="l04286"></a>04286 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network,
<a name="l04287"></a>04287        no_bgp_network_ttl_cmd,
<a name="l04288"></a>04288        <span class="stringliteral">&quot;no network A.B.C.D/M pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04289"></a>04289        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04290"></a>04290        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04291"></a>04291        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l04292"></a>04292        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04293"></a>04293        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04294"></a>04294 
<a name="l04295"></a>04295 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network,
<a name="l04296"></a>04296        no_bgp_network_route_map_cmd,
<a name="l04297"></a>04297        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> WORD&quot;,
<a name="l04298"></a>04298        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04299"></a>04299        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04300"></a>04300        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;
<a name="l04301"></a>04301        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\n&quot;
<a name="l04302"></a>04302        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\n&quot;)
<a name="l04303"></a>04303 
<a name="l04304"></a>04304 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network,
<a name="l04305"></a>04305        no_bgp_network_backdoor_cmd,
<a name="l04306"></a>04306        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M <a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>&quot;,
<a name="l04307"></a>04307        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04308"></a>04308        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04309"></a>04309        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;
<a name="l04310"></a>04310        &quot;Specify a BGP backdoor route\n&quot;)
<a name="l04311"></a>04311 
<a name="l04312"></a>04312 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network,
<a name="l04313"></a>04313        no_bgp_network_backdoor_ttl_cmd,
<a name="l04314"></a>04314        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M backdoor pathlimit &lt;0-255&gt;&quot;,
<a name="l04315"></a>04315        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04316"></a>04316        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04317"></a>04317        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;
<a name="l04318"></a>04318        &quot;Specify a BGP backdoor route\n&quot;
<a name="l04319"></a>04319        &quot;AS-Path hopcount limit attribute\n&quot;
<a name="l04320"></a>04320        &quot;AS-Pathlimit TTL, <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> number of AS-Path hops\n&quot;)
<a name="l04321"></a>04321 
<a name="l04322"></a>04322 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_network_mask,
<a name="l04323"></a>04323        no_bgp_network_mask_cmd,
<a name="l04324"></a>04324        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D&quot;,
<a name="l04325"></a>04325        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04326"></a>04326        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04327"></a>04327        &quot;Network number\n&quot;
<a name="l04328"></a>04328        &quot;Network mask\n&quot;
<a name="l04329"></a>04329        &quot;Network mask\n&quot;)
<a name="l04330"></a>04330 {
<a name="l04331"></a>04331   <span class="keywordtype">int</span> ret;
<a name="l04332"></a>04332   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04333"></a>04333 
<a name="l04334"></a>04334   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l04335"></a>04335   <span class="keywordflow">if</span> (! ret)
<a name="l04336"></a>04336     {
<a name="l04337"></a>04337       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04338"></a>04338       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04339"></a>04339     }
<a name="l04340"></a>04340 
<a name="l04341"></a>04341   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">bgp_static_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, 
<a name="l04342"></a>04342                <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>));
<a name="l04343"></a>04343 }
<a name="l04344"></a>04344 
<a name="l04345"></a>04345 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network,
<a name="l04346"></a>04346        no_bgp_network_mask_ttl_cmd,
<a name="l04347"></a>04347        <span class="stringliteral">&quot;no network A.B.C.D mask A.B.C.D pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04348"></a>04348        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04349"></a>04349        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04350"></a>04350        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04351"></a>04351        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04352"></a>04352        <span class="stringliteral">&quot;Network mask\n&quot;</span>
<a name="l04353"></a>04353        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04354"></a>04354        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04355"></a>04355 
<a name="l04356"></a>04356 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask,
<a name="l04357"></a>04357        no_bgp_network_mask_route_map_cmd,
<a name="l04358"></a>04358        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> WORD&quot;,
<a name="l04359"></a>04359        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04360"></a>04360        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04361"></a>04361        &quot;Network number\n&quot;
<a name="l04362"></a>04362        &quot;Network mask\n&quot;
<a name="l04363"></a>04363        &quot;Network mask\n&quot;
<a name="l04364"></a>04364        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\n&quot;
<a name="l04365"></a>04365        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\n&quot;)
<a name="l04366"></a>04366 
<a name="l04367"></a>04367 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask,
<a name="l04368"></a>04368        no_bgp_network_mask_backdoor_cmd,
<a name="l04369"></a>04369        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D backdoor&quot;,
<a name="l04370"></a>04370        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04371"></a>04371        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04372"></a>04372        &quot;Network number\n&quot;
<a name="l04373"></a>04373        &quot;Network mask\n&quot;
<a name="l04374"></a>04374        &quot;Network mask\n&quot;
<a name="l04375"></a>04375        &quot;Specify a BGP backdoor route\n&quot;)
<a name="l04376"></a>04376 
<a name="l04377"></a>04377 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask,
<a name="l04378"></a>04378        no_bgp_network_mask_backdoor_ttl_cmd,
<a name="l04379"></a>04379        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D mask <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D  backdoor pathlimit &lt;0-255&gt;&quot;,
<a name="l04380"></a>04380        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04381"></a>04381        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04382"></a>04382        &quot;Network number\n&quot;
<a name="l04383"></a>04383        &quot;Network mask\n&quot;
<a name="l04384"></a>04384        &quot;Network mask\n&quot;
<a name="l04385"></a>04385        &quot;Specify a BGP backdoor route\n&quot;
<a name="l04386"></a>04386        &quot;AS-Path hopcount limit attribute\n&quot;
<a name="l04387"></a>04387        &quot;AS-Pathlimit TTL, <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> number of AS-Path hops\n&quot;)
<a name="l04388"></a>04388 
<a name="l04389"></a>04389 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_network_mask_natural,
<a name="l04390"></a>04390        no_bgp_network_mask_natural_cmd,
<a name="l04391"></a>04391        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D&quot;,
<a name="l04392"></a>04392        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04393"></a>04393        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04394"></a>04394        &quot;Network number\n&quot;)
<a name="l04395"></a>04395 {
<a name="l04396"></a>04396   <span class="keywordtype">int</span> ret;
<a name="l04397"></a>04397   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l04398"></a>04398 
<a name="l04399"></a>04399   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, prefix_str);
<a name="l04400"></a>04400   <span class="keywordflow">if</span> (! ret)
<a name="l04401"></a>04401     {
<a name="l04402"></a>04402       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04403"></a>04403       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l04404"></a>04404     }
<a name="l04405"></a>04405 
<a name="l04406"></a>04406   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">bgp_static_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, 
<a name="l04407"></a>04407                <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>));
<a name="l04408"></a>04408 }
<a name="l04409"></a>04409 
<a name="l04410"></a>04410 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask_natural,
<a name="l04411"></a>04411        no_bgp_network_mask_natural_route_map_cmd,
<a name="l04412"></a>04412        <span class="stringliteral">&quot;no network A.B.C.D route-map WORD&quot;</span>,
<a name="l04413"></a>04413        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04414"></a>04414        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04415"></a>04415        <span class="stringliteral">&quot;Network number\n&quot;</span>
<a name="l04416"></a>04416        <span class="stringliteral">&quot;Route-map to modify the attributes\n&quot;</span>
<a name="l04417"></a>04417        <span class="stringliteral">&quot;Name of the route map\n&quot;</span>)
<a name="l04418"></a>04418 
<a name="l04419"></a>04419 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask_natural,
<a name="l04420"></a>04420        no_bgp_network_mask_natural_backdoor_cmd,
<a name="l04421"></a>04421        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D backdoor&quot;,
<a name="l04422"></a>04422        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04423"></a>04423        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04424"></a>04424        &quot;Network number\n&quot;
<a name="l04425"></a>04425        &quot;Specify a BGP backdoor route\n&quot;)
<a name="l04426"></a>04426 
<a name="l04427"></a>04427 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask_natural,
<a name="l04428"></a>04428        no_bgp_network_mask_natural_ttl_cmd,
<a name="l04429"></a>04429        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D pathlimit &lt;0-255&gt;&quot;,
<a name="l04430"></a>04430        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04431"></a>04431        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04432"></a>04432        &quot;Network number\n&quot;
<a name="l04433"></a>04433        &quot;AS-Path hopcount limit attribute\n&quot;
<a name="l04434"></a>04434        &quot;AS-Pathlimit TTL, <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> number of AS-Path hops\n&quot;)
<a name="l04435"></a>04435 
<a name="l04436"></a>04436 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_network_mask_natural,
<a name="l04437"></a>04437        no_bgp_network_mask_natural_backdoor_ttl_cmd,
<a name="l04438"></a>04438        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D backdoor pathlimit &lt;0-255&gt;&quot;,
<a name="l04439"></a>04439        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04440"></a>04440        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04441"></a>04441        &quot;Network number\n&quot;
<a name="l04442"></a>04442        &quot;Specify a BGP backdoor route\n&quot;
<a name="l04443"></a>04443        &quot;AS-Path hopcount limit attribute\n&quot;
<a name="l04444"></a>04444        &quot;AS-Pathlimit TTL, <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> number of AS-Path hops\n&quot;)
<a name="l04445"></a>04445 
<a name="l04446"></a>04446 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l04447"></a>04447 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_bgp_network,
<a name="l04448"></a>04448        ipv6_bgp_network_cmd,
<a name="l04449"></a>04449        <span class="stringliteral">&quot;network X:X::X:X/M&quot;</span>,
<a name="l04450"></a>04450        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04451"></a>04451        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l04452"></a>04452 {
<a name="l04453"></a>04453   u_char ttl = 0;
<a name="l04454"></a>04454   
<a name="l04455"></a>04455   <span class="keywordflow">if</span> (argc == 2)
<a name="l04456"></a>04456     <a class="code" href="vty_8h.html#afa25f32d4ba1649dd82cdd80434ac6ac">VTY_GET_INTEGER_RANGE</a> (<span class="stringliteral">&quot;Pathlimit TTL&quot;</span>, ttl, argv[1], 1, 255);
<a name="l04457"></a>04457 
<a name="l04458"></a>04458   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>,
<a name="l04459"></a>04459                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, ttl);
<a name="l04460"></a>04460 }
<a name="l04461"></a>04461 
<a name="l04462"></a>04462 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_bgp_network,
<a name="l04463"></a>04463        ipv6_bgp_network_ttl_cmd,
<a name="l04464"></a>04464        <span class="stringliteral">&quot;network X:X::X:X/M pathlimit &lt;0-255&gt;&quot;</span>,
<a name="l04465"></a>04465        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04466"></a>04466        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>
<a name="l04467"></a>04467        <span class="stringliteral">&quot;AS-Path hopcount limit attribute\n&quot;</span>
<a name="l04468"></a>04468        <span class="stringliteral">&quot;AS-Pathlimit TTL, in number of AS-Path hops\n&quot;</span>)
<a name="l04469"></a>04469 
<a name="l04470"></a>04470 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_bgp_network_route_map,
<a name="l04471"></a>04471        ipv6_bgp_network_route_map_cmd,
<a name="l04472"></a>04472        &quot;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> WORD&quot;,
<a name="l04473"></a>04473        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04474"></a>04474        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;\n&quot;
<a name="l04475"></a>04475        &quot;Route-<a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a> to modify the attributes\n&quot;
<a name="l04476"></a>04476        &quot;Name of the route <a class="code" href="structbgp__static.html#a66a99ae86e2b6f3496a481b7bfd300e9">map</a>\n&quot;)
<a name="l04477"></a>04477 {
<a name="l04478"></a>04478   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#ad82b3e0221971ab424dc936b7fcbea1a">bgp_static_set</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>,
<a name="l04479"></a>04479              <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (<a class="code" href="structvty.html">vty</a>), argv[1], 0, 0);
<a name="l04480"></a>04480 }
<a name="l04481"></a>04481 
<a name="l04482"></a>04482 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_bgp_network,
<a name="l04483"></a>04483        no_ipv6_bgp_network_cmd,
<a name="l04484"></a>04484        <span class="stringliteral">&quot;no network X:X::X:X/M&quot;</span>,
<a name="l04485"></a>04485        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04486"></a>04486        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04487"></a>04487        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l04488"></a>04488 {
<a name="l04489"></a>04489   <span class="keywordflow">return</span> <a class="code" href="bgp__route_8c.html#a5d4486300e5e46449dbbea9ae3f1af77">bgp_static_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l04490"></a>04490 }
<a name="l04491"></a>04491 
<a name="l04492"></a>04492 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_bgp_network,
<a name="l04493"></a>04493        no_ipv6_bgp_network_route_map_cmd,
<a name="l04494"></a>04494        <span class="stringliteral">&quot;no network X:X::X:X/M route-map WORD&quot;</span>,
<a name="l04495"></a>04495        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04496"></a>04496        <span class="stringliteral">&quot;Specify a network to announce via BGP\n&quot;</span>
<a name="l04497"></a>04497        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>
<a name="l04498"></a>04498        <span class="stringliteral">&quot;Route-map to modify the attributes\n&quot;</span>
<a name="l04499"></a>04499        <span class="stringliteral">&quot;Name of the route map\n&quot;</span>)
<a name="l04500"></a>04500 
<a name="l04501"></a>04501 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_bgp_network,
<a name="l04502"></a>04502        no_ipv6_bgp_network_ttl_cmd,
<a name="l04503"></a>04503        &quot;no <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M pathlimit &lt;0-255&gt;&quot;,
<a name="l04504"></a>04504        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04505"></a>04505        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04506"></a>04506        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;\n&quot;
<a name="l04507"></a>04507        &quot;AS-Path hopcount limit attribute\n&quot;
<a name="l04508"></a>04508        &quot;AS-Pathlimit TTL, <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> number of AS-Path hops\n&quot;)
<a name="l04509"></a>04509 
<a name="l04510"></a>04510 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_bgp_network,
<a name="l04511"></a>04511        old_ipv6_bgp_network_cmd,
<a name="l04512"></a>04512        &quot;ipv6 <a class="code" href="structbgp.html">bgp</a> <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M&quot;,
<a name="l04513"></a>04513        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l04514"></a>04514        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l04515"></a>04515        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04516"></a>04516        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;)
<a name="l04517"></a>04517 
<a name="l04518"></a>04518 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_bgp_network,
<a name="l04519"></a>04519        old_no_ipv6_bgp_network_cmd,
<a name="l04520"></a>04520        &quot;no ipv6 <a class="code" href="structbgp.html">bgp</a> <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M&quot;,
<a name="l04521"></a>04521        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l04522"></a>04522        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l04523"></a>04523        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l04524"></a>04524        &quot;Specify a <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a> to announce via BGP\n&quot;
<a name="l04525"></a>04525        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;)
<a name="l04526"></a>04526 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l04527"></a>04527 
<a name="l04528"></a>04528 <span class="comment">/* Aggreagete address:</span>
<a name="l04529"></a>04529 <span class="comment"></span>
<a name="l04530"></a>04530 <span class="comment">  advertise-map  Set condition to advertise attribute</span>
<a name="l04531"></a>04531 <span class="comment">  as-set         Generate AS set path information</span>
<a name="l04532"></a>04532 <span class="comment">  attribute-map  Set attributes of aggregate</span>
<a name="l04533"></a>04533 <span class="comment">  route-map      Set parameters of aggregate</span>
<a name="l04534"></a>04534 <span class="comment">  summary-only   Filter more specific routes from updates</span>
<a name="l04535"></a>04535 <span class="comment">  suppress-map   Conditionally filter more specific routes from updates</span>
<a name="l04536"></a>04536 <span class="comment">  &lt;cr&gt;</span>
<a name="l04537"></a>04537 <span class="comment"> */</span>
<a name="l04538"></a>04538 <span class="keyword">struct </span>bgp_aggregate
<a name="l04539"></a>04539 {
<a name="l04540"></a>04540   <span class="comment">/* Summary-only flag. */</span>
<a name="l04541"></a>04541   u_char summary_only;
<a name="l04542"></a>04542 
<a name="l04543"></a>04543   <span class="comment">/* AS set generation. */</span>
<a name="l04544"></a>04544   u_char as_set;
<a name="l04545"></a>04545 
<a name="l04546"></a>04546   <span class="comment">/* Route-map for aggregated route. */</span>
<a name="l04547"></a>04547   <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *map;
<a name="l04548"></a>04548 
<a name="l04549"></a>04549   <span class="comment">/* Suppress-count. */</span>
<a name="l04550"></a>04550   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l04551"></a>04551 
<a name="l04552"></a>04552   <span class="comment">/* SAFI configuration. */</span>
<a name="l04553"></a>04553   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l04554"></a>04554 };
<a name="l04555"></a>04555 
<a name="l04556"></a>04556 <span class="keyword">static</span> <span class="keyword">struct </span>bgp_aggregate *
<a name="l04557"></a>04557 bgp_aggregate_new (<span class="keywordtype">void</span>)
<a name="l04558"></a>04558 {
<a name="l04559"></a>04559   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f8cb06b2972c92f8b0181166a6faee7">MTYPE_BGP_AGGREGATE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> bgp_aggregate));
<a name="l04560"></a>04560 }
<a name="l04561"></a>04561 
<a name="l04562"></a>04562 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l04563"></a>04563 bgp_aggregate_free (<span class="keyword">struct</span> bgp_aggregate *aggregate)
<a name="l04564"></a>04564 {
<a name="l04565"></a>04565   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8f8cb06b2972c92f8b0181166a6faee7">MTYPE_BGP_AGGREGATE</a>, aggregate);
<a name="l04566"></a>04566 }     
<a name="l04567"></a>04567 
<a name="l04568"></a>04568 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l04569"></a>04569 bgp_aggregate_route (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *rinew,
<a name="l04570"></a>04570              <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *del, 
<a name="l04571"></a>04571              <span class="keyword">struct</span> bgp_aggregate *aggregate)
<a name="l04572"></a>04572 {
<a name="l04573"></a>04573   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l04574"></a>04574   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *top;
<a name="l04575"></a>04575   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04576"></a>04576   u_char origin;
<a name="l04577"></a>04577   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04578"></a>04578   <span class="keyword">struct </span>aspath *asmerge = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04579"></a>04579   <span class="keyword">struct </span><a class="code" href="structcommunity.html">community</a> *<a class="code" href="structcommunity.html">community</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04580"></a>04580   <span class="keyword">struct </span>community *commerge = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04581"></a>04581   <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
<a name="l04582"></a>04582   u_int32_t med = 0;
<a name="l04583"></a>04583   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l04584"></a>04584   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l04585"></a>04585   <span class="keywordtype">int</span> first = 1;
<a name="l04586"></a>04586   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> match = 0;
<a name="l04587"></a>04587 
<a name="l04588"></a>04588   <span class="comment">/* Record adding route&#39;s nexthop and med. */</span>
<a name="l04589"></a>04589   <span class="keywordflow">if</span> (rinew)
<a name="l04590"></a>04590     {
<a name="l04591"></a>04591       <a class="code" href="structnexthop.html">nexthop</a> = rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;
<a name="l04592"></a>04592       med = rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
<a name="l04593"></a>04593     }
<a name="l04594"></a>04594 
<a name="l04595"></a>04595   <span class="comment">/* ORIGIN attribute: If at least one route among routes that are</span>
<a name="l04596"></a>04596 <span class="comment">     aggregated has ORIGIN with the value INCOMPLETE, then the</span>
<a name="l04597"></a>04597 <span class="comment">     aggregated route must have the ORIGIN attribute with the value</span>
<a name="l04598"></a>04598 <span class="comment">     INCOMPLETE. Otherwise, if at least one route among routes that</span>
<a name="l04599"></a>04599 <span class="comment">     are aggregated has ORIGIN with the value EGP, then the aggregated</span>
<a name="l04600"></a>04600 <span class="comment">     route must have the origin attribute with the value EGP. In all</span>
<a name="l04601"></a>04601 <span class="comment">     other case the value of the ORIGIN attribute of the aggregated</span>
<a name="l04602"></a>04602 <span class="comment">     route is INTERNAL. */</span>
<a name="l04603"></a>04603   origin = <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>;
<a name="l04604"></a>04604 
<a name="l04605"></a>04605   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l04606"></a>04606 
<a name="l04607"></a>04607   top = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04608"></a>04608   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p); rn; rn = <a class="code" href="bgp__table_8c.html#a689ab08e34c8d837709b2033563dcba9">bgp_route_next_until</a> (rn, top))
<a name="l04609"></a>04609     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l04610"></a>04610       {
<a name="l04611"></a>04611     match = 0;
<a name="l04612"></a>04612 
<a name="l04613"></a>04613     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l04614"></a>04614       {
<a name="l04615"></a>04615         <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri))
<a name="l04616"></a>04616           <span class="keywordflow">continue</span>;
<a name="l04617"></a>04617 
<a name="l04618"></a>04618         <span class="keywordflow">if</span> (del &amp;&amp; ri == del)
<a name="l04619"></a>04619           <span class="keywordflow">continue</span>;
<a name="l04620"></a>04620 
<a name="l04621"></a>04621         <span class="keywordflow">if</span> (! rinew &amp;&amp; first)
<a name="l04622"></a>04622           {
<a name="l04623"></a>04623         <a class="code" href="structnexthop.html">nexthop</a> = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;
<a name="l04624"></a>04624         med = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
<a name="l04625"></a>04625         first = 0;
<a name="l04626"></a>04626           }
<a name="l04627"></a>04627 
<a name="l04628"></a>04628 <span class="preprocessor">#ifdef AGGREGATE_NEXTHOP_CHECK</span>
<a name="l04629"></a>04629 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>, &amp;<a class="code" href="structnexthop.html">nexthop</a>)
<a name="l04630"></a>04630         || ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> != med)
<a name="l04631"></a>04631           {
<a name="l04632"></a>04632         <span class="keywordflow">if</span> (aspath)
<a name="l04633"></a>04633           <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l04634"></a>04634         <span class="keywordflow">if</span> (community)
<a name="l04635"></a>04635           <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (community);
<a name="l04636"></a>04636         <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04637"></a>04637         <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (top);
<a name="l04638"></a>04638         <span class="keywordflow">return</span>;
<a name="l04639"></a>04639           }
<a name="l04640"></a>04640 <span class="preprocessor">#endif </span><span class="comment">/* AGGREGATE_NEXTHOP_CHECK */</span>
<a name="l04641"></a>04641 
<a name="l04642"></a>04642         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> != <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l04643"></a>04643           {
<a name="l04644"></a>04644         <span class="keywordflow">if</span> (aggregate-&gt;summary_only)
<a name="l04645"></a>04645           {
<a name="l04646"></a>04646             (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (ri))-&gt;suppress++;
<a name="l04647"></a>04647             <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l04648"></a>04648             match++;
<a name="l04649"></a>04649           }
<a name="l04650"></a>04650 
<a name="l04651"></a>04651         aggregate-&gt;count++;
<a name="l04652"></a>04652 
<a name="l04653"></a>04653         <span class="keywordflow">if</span> (aggregate-&gt;as_set)
<a name="l04654"></a>04654           {
<a name="l04655"></a>04655             <span class="keywordflow">if</span> (origin &lt; ri-&gt;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l04656"></a>04656               origin = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
<a name="l04657"></a>04657 
<a name="l04658"></a>04658             <span class="keywordflow">if</span> (aspath)
<a name="l04659"></a>04659               {
<a name="l04660"></a>04660             asmerge = <a class="code" href="bgp__aspath_8c.html#a615342ae906f2fd579780ce7eda4ff6a">aspath_aggregate</a> (aspath, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04661"></a>04661             <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l04662"></a>04662             aspath = asmerge;
<a name="l04663"></a>04663               }
<a name="l04664"></a>04664             <span class="keywordflow">else</span>
<a name="l04665"></a>04665               aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04666"></a>04666 
<a name="l04667"></a>04667             <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l04668"></a>04668               {
<a name="l04669"></a>04669             <span class="keywordflow">if</span> (community)
<a name="l04670"></a>04670               {
<a name="l04671"></a>04671                 commerge = <a class="code" href="bgp__community_8c.html#a973ecafb48d259e461d935a0a6a94ea4">community_merge</a> (community,
<a name="l04672"></a>04672                             ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04673"></a>04673                 community = <a class="code" href="bgp__community_8c.html#a7bab71e747c1164320fd14c061956516">community_uniq_sort</a> (commerge);
<a name="l04674"></a>04674                 <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (commerge);
<a name="l04675"></a>04675               }
<a name="l04676"></a>04676             <span class="keywordflow">else</span>
<a name="l04677"></a>04677               community = <a class="code" href="bgp__community_8c.html#ad93ae545ec0b6971e4cc5b1eb2fbd5eb">community_dup</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04678"></a>04678               }
<a name="l04679"></a>04679           }
<a name="l04680"></a>04680           }
<a name="l04681"></a>04681       }
<a name="l04682"></a>04682     <span class="keywordflow">if</span> (match)
<a name="l04683"></a>04683       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04684"></a>04684       }
<a name="l04685"></a>04685   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (top);
<a name="l04686"></a>04686 
<a name="l04687"></a>04687   <span class="keywordflow">if</span> (rinew)
<a name="l04688"></a>04688     {
<a name="l04689"></a>04689       aggregate-&gt;count++;
<a name="l04690"></a>04690       
<a name="l04691"></a>04691       <span class="keywordflow">if</span> (aggregate-&gt;summary_only)
<a name="l04692"></a>04692         (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (rinew))-&gt;suppress++;
<a name="l04693"></a>04693 
<a name="l04694"></a>04694       <span class="keywordflow">if</span> (aggregate-&gt;as_set)
<a name="l04695"></a>04695     {
<a name="l04696"></a>04696       <span class="keywordflow">if</span> (origin &lt; rinew-&gt;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l04697"></a>04697         origin = rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
<a name="l04698"></a>04698 
<a name="l04699"></a>04699       <span class="keywordflow">if</span> (aspath)
<a name="l04700"></a>04700         {
<a name="l04701"></a>04701           asmerge = <a class="code" href="bgp__aspath_8c.html#a615342ae906f2fd579780ce7eda4ff6a">aspath_aggregate</a> (aspath, rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04702"></a>04702           <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l04703"></a>04703           aspath = asmerge;
<a name="l04704"></a>04704         }
<a name="l04705"></a>04705       <span class="keywordflow">else</span>
<a name="l04706"></a>04706         aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04707"></a>04707 
<a name="l04708"></a>04708       <span class="keywordflow">if</span> (rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l04709"></a>04709         {
<a name="l04710"></a>04710           <span class="keywordflow">if</span> (community)
<a name="l04711"></a>04711         {
<a name="l04712"></a>04712           commerge = <a class="code" href="bgp__community_8c.html#a973ecafb48d259e461d935a0a6a94ea4">community_merge</a> (community,
<a name="l04713"></a>04713                           rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04714"></a>04714           community = <a class="code" href="bgp__community_8c.html#a7bab71e747c1164320fd14c061956516">community_uniq_sort</a> (commerge);
<a name="l04715"></a>04715           <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (commerge);
<a name="l04716"></a>04716         }
<a name="l04717"></a>04717           <span class="keywordflow">else</span>
<a name="l04718"></a>04718         community = <a class="code" href="bgp__community_8c.html#ad93ae545ec0b6971e4cc5b1eb2fbd5eb">community_dup</a> (rinew-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04719"></a>04719         }
<a name="l04720"></a>04720     }
<a name="l04721"></a>04721     }
<a name="l04722"></a>04722 
<a name="l04723"></a>04723   <span class="keywordflow">if</span> (aggregate-&gt;count &gt; 0)
<a name="l04724"></a>04724     {
<a name="l04725"></a>04725       rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04726"></a>04726       <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l04727"></a>04727       <span class="keyword">new</span>-&gt;type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
<a name="l04728"></a>04728       <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>;
<a name="l04729"></a>04729       <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l04730"></a>04730       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l04731"></a>04731       <span class="keyword">new</span>-&gt;attr = <a class="code" href="bgp__attr_8c.html#a70102643d18571653470b272db04c205">bgp_attr_aggregate_intern</a> (bgp, origin, aspath, community, aggregate-&gt;as_set);
<a name="l04732"></a>04732       <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l04733"></a>04733 
<a name="l04734"></a>04734       <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l04735"></a>04735       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04736"></a>04736       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04737"></a>04737     }
<a name="l04738"></a>04738   <span class="keywordflow">else</span>
<a name="l04739"></a>04739     {
<a name="l04740"></a>04740       <span class="keywordflow">if</span> (aspath)
<a name="l04741"></a>04741     <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l04742"></a>04742       <span class="keywordflow">if</span> (community)
<a name="l04743"></a>04743     <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (community);
<a name="l04744"></a>04744     }
<a name="l04745"></a>04745 }
<a name="l04746"></a>04746 
<a name="l04747"></a>04747 <span class="keywordtype">void</span> bgp_aggregate_delete (<span class="keyword">struct</span> bgp *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>,
<a name="l04748"></a>04748                <span class="keyword">struct</span> bgp_aggregate *);
<a name="l04749"></a>04749 
<a name="l04750"></a>04750 <span class="keywordtype">void</span>
<a name="l04751"></a>04751 <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (<span class="keyword">struct</span> bgp *bgp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l04752"></a>04752              <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04753"></a>04753 {
<a name="l04754"></a>04754   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *child;
<a name="l04755"></a>04755   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04756"></a>04756   <span class="keyword">struct </span>bgp_aggregate *aggregate;
<a name="l04757"></a>04757 
<a name="l04758"></a>04758   <span class="comment">/* MPLS-VPN aggregation is not yet supported. */</span>
<a name="l04759"></a>04759   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l04760"></a>04760     <span class="keywordflow">return</span>;
<a name="l04761"></a>04761 
<a name="l04762"></a>04762   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 0)
<a name="l04763"></a>04763     <span class="keywordflow">return</span>;
<a name="l04764"></a>04764 
<a name="l04765"></a>04765   <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri))
<a name="l04766"></a>04766     <span class="keywordflow">return</span>;
<a name="l04767"></a>04767 
<a name="l04768"></a>04768   child = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi], p);
<a name="l04769"></a>04769 
<a name="l04770"></a>04770   <span class="comment">/* Aggregate address configuration check. */</span>
<a name="l04771"></a>04771   <span class="keywordflow">for</span> (rn = child; rn; rn = rn-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>)
<a name="l04772"></a>04772     <span class="keywordflow">if</span> ((aggregate = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l04773"></a>04773       {
<a name="l04774"></a>04774     bgp_aggregate_delete (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, aggregate);
<a name="l04775"></a>04775     bgp_aggregate_route (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, aggregate);
<a name="l04776"></a>04776       }
<a name="l04777"></a>04777   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (child);
<a name="l04778"></a>04778 }
<a name="l04779"></a>04779 
<a name="l04780"></a>04780 <span class="keywordtype">void</span>
<a name="l04781"></a>04781 <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (<span class="keyword">struct</span> bgp *bgp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, 
<a name="l04782"></a>04782              <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *del, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04783"></a>04783 {
<a name="l04784"></a>04784   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *child;
<a name="l04785"></a>04785   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04786"></a>04786   <span class="keyword">struct </span>bgp_aggregate *aggregate;
<a name="l04787"></a>04787 
<a name="l04788"></a>04788   <span class="comment">/* MPLS-VPN aggregation is not yet supported. */</span>
<a name="l04789"></a>04789   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l04790"></a>04790     <span class="keywordflow">return</span>;
<a name="l04791"></a>04791 
<a name="l04792"></a>04792   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 0)
<a name="l04793"></a>04793     <span class="keywordflow">return</span>;
<a name="l04794"></a>04794 
<a name="l04795"></a>04795   child = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi], p);
<a name="l04796"></a>04796 
<a name="l04797"></a>04797   <span class="comment">/* Aggregate address configuration check. */</span>
<a name="l04798"></a>04798   <span class="keywordflow">for</span> (rn = child; rn; rn = rn-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>)
<a name="l04799"></a>04799     <span class="keywordflow">if</span> ((aggregate = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l04800"></a>04800       {
<a name="l04801"></a>04801     bgp_aggregate_delete (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, aggregate);
<a name="l04802"></a>04802     bgp_aggregate_route (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, del, aggregate);
<a name="l04803"></a>04803       }
<a name="l04804"></a>04804   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (child);
<a name="l04805"></a>04805 }
<a name="l04806"></a>04806 
<a name="l04807"></a>04807 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l04808"></a>04808 bgp_aggregate_add (<span class="keyword">struct</span> bgp *bgp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l04809"></a>04809            <span class="keyword">struct</span> bgp_aggregate *aggregate)
<a name="l04810"></a>04810 {
<a name="l04811"></a>04811   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l04812"></a>04812   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *top;
<a name="l04813"></a>04813   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04814"></a>04814   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l04815"></a>04815   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l04816"></a>04816   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> match;
<a name="l04817"></a>04817   u_char origin = <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>;
<a name="l04818"></a>04818   <span class="keyword">struct </span>aspath *aspath = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04819"></a>04819   <span class="keyword">struct </span>aspath *asmerge = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04820"></a>04820   <span class="keyword">struct </span>community *community = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04821"></a>04821   <span class="keyword">struct </span>community *commerge = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04822"></a>04822 
<a name="l04823"></a>04823   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l04824"></a>04824 
<a name="l04825"></a>04825   <span class="comment">/* Sanity check. */</span>
<a name="l04826"></a>04826   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>)
<a name="l04827"></a>04827     <span class="keywordflow">return</span>;
<a name="l04828"></a>04828   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>)
<a name="l04829"></a>04829     <span class="keywordflow">return</span>;
<a name="l04830"></a>04830     
<a name="l04831"></a>04831   <span class="comment">/* If routes exists below this node, generate aggregate routes. */</span>
<a name="l04832"></a>04832   top = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04833"></a>04833   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p); rn; rn = <a class="code" href="bgp__table_8c.html#a689ab08e34c8d837709b2033563dcba9">bgp_route_next_until</a> (rn, top))
<a name="l04834"></a>04834     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l04835"></a>04835       {
<a name="l04836"></a>04836     match = 0;
<a name="l04837"></a>04837 
<a name="l04838"></a>04838     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l04839"></a>04839       {
<a name="l04840"></a>04840         <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri))
<a name="l04841"></a>04841           <span class="keywordflow">continue</span>;
<a name="l04842"></a>04842 
<a name="l04843"></a>04843         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> != <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l04844"></a>04844           {
<a name="l04845"></a>04845         <span class="comment">/* summary-only aggregate route suppress aggregated</span>
<a name="l04846"></a>04846 <span class="comment">           route announcement.  */</span>
<a name="l04847"></a>04847         <span class="keywordflow">if</span> (aggregate-&gt;summary_only)
<a name="l04848"></a>04848           {
<a name="l04849"></a>04849             (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (ri))-&gt;suppress++;
<a name="l04850"></a>04850             <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l04851"></a>04851             match++;
<a name="l04852"></a>04852           }
<a name="l04853"></a>04853         <span class="comment">/* as-set aggregate route generate origin, as path,</span>
<a name="l04854"></a>04854 <span class="comment">           community aggregation.  */</span>
<a name="l04855"></a>04855         <span class="keywordflow">if</span> (aggregate-&gt;as_set)
<a name="l04856"></a>04856           {
<a name="l04857"></a>04857             <span class="keywordflow">if</span> (origin &lt; ri-&gt;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l04858"></a>04858               origin = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
<a name="l04859"></a>04859 
<a name="l04860"></a>04860             <span class="keywordflow">if</span> (aspath)
<a name="l04861"></a>04861               {
<a name="l04862"></a>04862             asmerge = <a class="code" href="bgp__aspath_8c.html#a615342ae906f2fd579780ce7eda4ff6a">aspath_aggregate</a> (aspath, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04863"></a>04863             <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l04864"></a>04864             aspath = asmerge;
<a name="l04865"></a>04865               }
<a name="l04866"></a>04866             <span class="keywordflow">else</span>
<a name="l04867"></a>04867               aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l04868"></a>04868 
<a name="l04869"></a>04869             <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l04870"></a>04870               {
<a name="l04871"></a>04871             <span class="keywordflow">if</span> (community)
<a name="l04872"></a>04872               {
<a name="l04873"></a>04873                 commerge = <a class="code" href="bgp__community_8c.html#a973ecafb48d259e461d935a0a6a94ea4">community_merge</a> (community,
<a name="l04874"></a>04874                             ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04875"></a>04875                 community = <a class="code" href="bgp__community_8c.html#a7bab71e747c1164320fd14c061956516">community_uniq_sort</a> (commerge);
<a name="l04876"></a>04876                 <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (commerge);
<a name="l04877"></a>04877               }
<a name="l04878"></a>04878             <span class="keywordflow">else</span>
<a name="l04879"></a>04879               community = <a class="code" href="bgp__community_8c.html#ad93ae545ec0b6971e4cc5b1eb2fbd5eb">community_dup</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l04880"></a>04880               }
<a name="l04881"></a>04881           }
<a name="l04882"></a>04882         aggregate-&gt;count++;
<a name="l04883"></a>04883           }
<a name="l04884"></a>04884       }
<a name="l04885"></a>04885     
<a name="l04886"></a>04886     <span class="comment">/* If this node is suppressed, process the change. */</span>
<a name="l04887"></a>04887     <span class="keywordflow">if</span> (match)
<a name="l04888"></a>04888       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04889"></a>04889       }
<a name="l04890"></a>04890   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (top);
<a name="l04891"></a>04891 
<a name="l04892"></a>04892   <span class="comment">/* Add aggregate route to BGP table. */</span>
<a name="l04893"></a>04893   <span class="keywordflow">if</span> (aggregate-&gt;count)
<a name="l04894"></a>04894     {
<a name="l04895"></a>04895       rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04896"></a>04896 
<a name="l04897"></a>04897       <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l04898"></a>04898       <span class="keyword">new</span>-&gt;type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
<a name="l04899"></a>04899       <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>;
<a name="l04900"></a>04900       <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l04901"></a>04901       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l04902"></a>04902       <span class="keyword">new</span>-&gt;attr = <a class="code" href="bgp__attr_8c.html#a70102643d18571653470b272db04c205">bgp_attr_aggregate_intern</a> (bgp, origin, aspath, community, aggregate-&gt;as_set);
<a name="l04903"></a>04903       <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l04904"></a>04904 
<a name="l04905"></a>04905       <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (rn, <span class="keyword">new</span>);
<a name="l04906"></a>04906       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04907"></a>04907       
<a name="l04908"></a>04908       <span class="comment">/* Process change. */</span>
<a name="l04909"></a>04909       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04910"></a>04910     }
<a name="l04911"></a>04911 }
<a name="l04912"></a>04912 
<a name="l04913"></a>04913 <span class="keywordtype">void</span>
<a name="l04914"></a>04914 bgp_aggregate_delete (<span class="keyword">struct</span> bgp *bgp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, 
<a name="l04915"></a>04915               <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> bgp_aggregate *aggregate)
<a name="l04916"></a>04916 {
<a name="l04917"></a>04917   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l04918"></a>04918   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *top;
<a name="l04919"></a>04919   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04920"></a>04920   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l04921"></a>04921   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> match;
<a name="l04922"></a>04922 
<a name="l04923"></a>04923   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l04924"></a>04924 
<a name="l04925"></a>04925   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>)
<a name="l04926"></a>04926     <span class="keywordflow">return</span>;
<a name="l04927"></a>04927   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>)
<a name="l04928"></a>04928     <span class="keywordflow">return</span>;
<a name="l04929"></a>04929 
<a name="l04930"></a>04930   <span class="comment">/* If routes exists below this node, generate aggregate routes. */</span>
<a name="l04931"></a>04931   top = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04932"></a>04932   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p); rn; rn = <a class="code" href="bgp__table_8c.html#a689ab08e34c8d837709b2033563dcba9">bgp_route_next_until</a> (rn, top))
<a name="l04933"></a>04933     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l04934"></a>04934       {
<a name="l04935"></a>04935     match = 0;
<a name="l04936"></a>04936 
<a name="l04937"></a>04937     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l04938"></a>04938       {
<a name="l04939"></a>04939         <span class="keywordflow">if</span> (<a class="code" href="bgp__route_8h.html#a51bf9498518258866f4ba6b2b19b587a">BGP_INFO_HOLDDOWN</a> (ri))
<a name="l04940"></a>04940           <span class="keywordflow">continue</span>;
<a name="l04941"></a>04941 
<a name="l04942"></a>04942         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> != <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l04943"></a>04943           {
<a name="l04944"></a>04944         <span class="keywordflow">if</span> (aggregate-&gt;summary_only &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l04945"></a>04945           {
<a name="l04946"></a>04946             ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>--;
<a name="l04947"></a>04947 
<a name="l04948"></a>04948             <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a> == 0)
<a name="l04949"></a>04949               {
<a name="l04950"></a>04950             <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, ri, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l04951"></a>04951             match++;
<a name="l04952"></a>04952               }
<a name="l04953"></a>04953           }
<a name="l04954"></a>04954         aggregate-&gt;count--;
<a name="l04955"></a>04955           }
<a name="l04956"></a>04956       }
<a name="l04957"></a>04957 
<a name="l04958"></a>04958     <span class="comment">/* If this node was suppressed, process the change. */</span>
<a name="l04959"></a>04959     <span class="keywordflow">if</span> (match)
<a name="l04960"></a>04960       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04961"></a>04961       }
<a name="l04962"></a>04962   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (top);
<a name="l04963"></a>04963 
<a name="l04964"></a>04964   <span class="comment">/* Delete aggregate route from BGP table. */</span>
<a name="l04965"></a>04965   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (table, p);
<a name="l04966"></a>04966 
<a name="l04967"></a>04967   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l04968"></a>04968     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> 
<a name="l04969"></a>04969     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>
<a name="l04970"></a>04970     &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l04971"></a>04971       <span class="keywordflow">break</span>;
<a name="l04972"></a>04972 
<a name="l04973"></a>04973   <span class="comment">/* Withdraw static BGP route from routing table. */</span>
<a name="l04974"></a>04974   <span class="keywordflow">if</span> (ri)
<a name="l04975"></a>04975     {
<a name="l04976"></a>04976       <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l04977"></a>04977       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, safi);
<a name="l04978"></a>04978     }
<a name="l04979"></a>04979 
<a name="l04980"></a>04980   <span class="comment">/* Unlock bgp_node_lookup. */</span>
<a name="l04981"></a>04981   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l04982"></a>04982 }
<a name="l04983"></a>04983 
<a name="l04984"></a>04984 <span class="comment">/* Aggregate route attribute. */</span>
<a name="l04985"></a>04985 <span class="preprocessor">#define AGGREGATE_SUMMARY_ONLY 1</span>
<a name="l04986"></a>04986 <span class="preprocessor"></span><span class="preprocessor">#define AGGREGATE_AS_SET       1</span>
<a name="l04987"></a>04987 <span class="preprocessor"></span>
<a name="l04988"></a>04988 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l04989"></a>04989 bgp_aggregate_set (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix_str, 
<a name="l04990"></a>04990                    <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l04991"></a>04991            u_char summary_only, u_char as_set)
<a name="l04992"></a>04992 {
<a name="l04993"></a>04993   <span class="keywordtype">int</span> ret;
<a name="l04994"></a>04994   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l04995"></a>04995   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l04996"></a>04996   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l04997"></a>04997   <span class="keyword">struct </span>bgp_aggregate *aggregate;
<a name="l04998"></a>04998 
<a name="l04999"></a>04999   <span class="comment">/* Convert string to prefix structure. */</span>
<a name="l05000"></a>05000   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (prefix_str, &amp;p);
<a name="l05001"></a>05001   <span class="keywordflow">if</span> (!ret)
<a name="l05002"></a>05002     {
<a name="l05003"></a>05003       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05004"></a>05004       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05005"></a>05005     }
<a name="l05006"></a>05006   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l05007"></a>05007 
<a name="l05008"></a>05008   <span class="comment">/* Get BGP structure. */</span>
<a name="l05009"></a>05009   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l05010"></a>05010 
<a name="l05011"></a>05011   <span class="comment">/* Old configuration check. */</span>
<a name="l05012"></a>05012   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi], &amp;p);
<a name="l05013"></a>05013 
<a name="l05014"></a>05014   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l05015"></a>05015     {
<a name="l05016"></a>05016       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;There is already same aggregate network.%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05017"></a>05017       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l05018"></a>05018       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05019"></a>05019     }
<a name="l05020"></a>05020 
<a name="l05021"></a>05021   <span class="comment">/* Make aggregate address structure. */</span>
<a name="l05022"></a>05022   aggregate = bgp_aggregate_new ();
<a name="l05023"></a>05023   aggregate-&gt;summary_only = summary_only;
<a name="l05024"></a>05024   aggregate-&gt;as_set = as_set;
<a name="l05025"></a>05025   aggregate-&gt;safi = safi;
<a name="l05026"></a>05026   rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = aggregate;
<a name="l05027"></a>05027 
<a name="l05028"></a>05028   <span class="comment">/* Aggregate address insert into BGP routing table. */</span>
<a name="l05029"></a>05029   <span class="keywordflow">if</span> (safi &amp; <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l05030"></a>05030     bgp_aggregate_add (bgp, &amp;p, afi, SAFI_UNICAST, aggregate);
<a name="l05031"></a>05031   <span class="keywordflow">if</span> (safi &amp; <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l05032"></a>05032     bgp_aggregate_add (bgp, &amp;p, afi, SAFI_MULTICAST, aggregate);
<a name="l05033"></a>05033 
<a name="l05034"></a>05034   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l05035"></a>05035 }
<a name="l05036"></a>05036 
<a name="l05037"></a>05037 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l05038"></a>05038 bgp_aggregate_unset (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix_str, 
<a name="l05039"></a>05039                      <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05040"></a>05040 {
<a name="l05041"></a>05041   <span class="keywordtype">int</span> ret;
<a name="l05042"></a>05042   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l05043"></a>05043   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l05044"></a>05044   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l05045"></a>05045   <span class="keyword">struct </span>bgp_aggregate *aggregate;
<a name="l05046"></a>05046 
<a name="l05047"></a>05047   <span class="comment">/* Convert string to prefix structure. */</span>
<a name="l05048"></a>05048   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (prefix_str, &amp;p);
<a name="l05049"></a>05049   <span class="keywordflow">if</span> (!ret)
<a name="l05050"></a>05050     {
<a name="l05051"></a>05051       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05052"></a>05052       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05053"></a>05053     }
<a name="l05054"></a>05054   <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;p);
<a name="l05055"></a>05055 
<a name="l05056"></a>05056   <span class="comment">/* Get BGP structure. */</span>
<a name="l05057"></a>05057   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l05058"></a>05058 
<a name="l05059"></a>05059   <span class="comment">/* Old configuration check. */</span>
<a name="l05060"></a>05060   rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi], &amp;p);
<a name="l05061"></a>05061   <span class="keywordflow">if</span> (! rn)
<a name="l05062"></a>05062     {
<a name="l05063"></a>05063       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% There is no aggregate-address configuration.%s&quot;</span>,
<a name="l05064"></a>05064            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05065"></a>05065       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05066"></a>05066     }
<a name="l05067"></a>05067 
<a name="l05068"></a>05068   aggregate = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l05069"></a>05069   <span class="keywordflow">if</span> (aggregate-&gt;safi &amp; SAFI_UNICAST)
<a name="l05070"></a>05070     bgp_aggregate_delete (bgp, &amp;p, afi, SAFI_UNICAST, aggregate);
<a name="l05071"></a>05071   <span class="keywordflow">if</span> (aggregate-&gt;safi &amp; <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l05072"></a>05072     bgp_aggregate_delete (bgp, &amp;p, afi, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, aggregate);
<a name="l05073"></a>05073 
<a name="l05074"></a>05074   <span class="comment">/* Unlock aggregate address configuration. */</span>
<a name="l05075"></a>05075   rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05076"></a>05076   bgp_aggregate_free (aggregate);
<a name="l05077"></a>05077   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l05078"></a>05078   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l05079"></a>05079 
<a name="l05080"></a>05080   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l05081"></a>05081 }
<a name="l05082"></a>05082 
<a name="l05083"></a>05083 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address,
<a name="l05084"></a>05084        aggregate_address_cmd,
<a name="l05085"></a>05085        <span class="stringliteral">&quot;aggregate-address A.B.C.D/M&quot;</span>,
<a name="l05086"></a>05086        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05087"></a>05087        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>)
<a name="l05088"></a>05088 {
<a name="l05089"></a>05089   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty), 0, 0);
<a name="l05090"></a>05090 }
<a name="l05091"></a>05091 
<a name="l05092"></a>05092 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_mask,
<a name="l05093"></a>05093        aggregate_address_mask_cmd,
<a name="l05094"></a>05094        <span class="stringliteral">&quot;aggregate-address A.B.C.D A.B.C.D&quot;</span>,
<a name="l05095"></a>05095        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05096"></a>05096        <span class="stringliteral">&quot;Aggregate address\n&quot;</span>
<a name="l05097"></a>05097        <span class="stringliteral">&quot;Aggregate mask\n&quot;</span>)
<a name="l05098"></a>05098 {
<a name="l05099"></a>05099   <span class="keywordtype">int</span> ret;
<a name="l05100"></a>05100   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l05101"></a>05101 
<a name="l05102"></a>05102   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l05103"></a>05103 
<a name="l05104"></a>05104   <span class="keywordflow">if</span> (! ret)
<a name="l05105"></a>05105     {
<a name="l05106"></a>05106       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05107"></a>05107       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05108"></a>05108     }
<a name="l05109"></a>05109 
<a name="l05110"></a>05110   <span class="keywordflow">return</span> bgp_aggregate_set (vty, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05111"></a>05111                 0, 0);
<a name="l05112"></a>05112 }
<a name="l05113"></a>05113 
<a name="l05114"></a>05114 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_summary_only,
<a name="l05115"></a>05115        aggregate_address_summary_only_cmd,
<a name="l05116"></a>05116        <span class="stringliteral">&quot;aggregate-address A.B.C.D/M summary-only&quot;</span>,
<a name="l05117"></a>05117        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05118"></a>05118        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05119"></a>05119        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05120"></a>05120 {
<a name="l05121"></a>05121   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05122"></a>05122                 AGGREGATE_SUMMARY_ONLY, 0);
<a name="l05123"></a>05123 }
<a name="l05124"></a>05124 
<a name="l05125"></a>05125 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_mask_summary_only,
<a name="l05126"></a>05126        aggregate_address_mask_summary_only_cmd,
<a name="l05127"></a>05127        <span class="stringliteral">&quot;aggregate-address A.B.C.D A.B.C.D summary-only&quot;</span>,
<a name="l05128"></a>05128        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05129"></a>05129        <span class="stringliteral">&quot;Aggregate address\n&quot;</span>
<a name="l05130"></a>05130        <span class="stringliteral">&quot;Aggregate mask\n&quot;</span>
<a name="l05131"></a>05131        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05132"></a>05132 {
<a name="l05133"></a>05133   <span class="keywordtype">int</span> ret;
<a name="l05134"></a>05134   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l05135"></a>05135 
<a name="l05136"></a>05136   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l05137"></a>05137 
<a name="l05138"></a>05138   <span class="keywordflow">if</span> (! ret)
<a name="l05139"></a>05139     {
<a name="l05140"></a>05140       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05141"></a>05141       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05142"></a>05142     }
<a name="l05143"></a>05143 
<a name="l05144"></a>05144   <span class="keywordflow">return</span> bgp_aggregate_set (vty, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05145"></a>05145                 AGGREGATE_SUMMARY_ONLY, 0);
<a name="l05146"></a>05146 }
<a name="l05147"></a>05147 
<a name="l05148"></a>05148 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_as_set,
<a name="l05149"></a>05149        aggregate_address_as_set_cmd,
<a name="l05150"></a>05150        <span class="stringliteral">&quot;aggregate-address A.B.C.D/M as-set&quot;</span>,
<a name="l05151"></a>05151        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05152"></a>05152        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05153"></a>05153        <span class="stringliteral">&quot;Generate AS set path information\n&quot;</span>)
<a name="l05154"></a>05154 {
<a name="l05155"></a>05155   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05156"></a>05156                 0, AGGREGATE_AS_SET);
<a name="l05157"></a>05157 }
<a name="l05158"></a>05158 
<a name="l05159"></a>05159 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_mask_as_set,
<a name="l05160"></a>05160        aggregate_address_mask_as_set_cmd,
<a name="l05161"></a>05161        <span class="stringliteral">&quot;aggregate-address A.B.C.D A.B.C.D as-set&quot;</span>,
<a name="l05162"></a>05162        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05163"></a>05163        <span class="stringliteral">&quot;Aggregate address\n&quot;</span>
<a name="l05164"></a>05164        <span class="stringliteral">&quot;Aggregate mask\n&quot;</span>
<a name="l05165"></a>05165        <span class="stringliteral">&quot;Generate AS set path information\n&quot;</span>)
<a name="l05166"></a>05166 {
<a name="l05167"></a>05167   <span class="keywordtype">int</span> ret;
<a name="l05168"></a>05168   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l05169"></a>05169 
<a name="l05170"></a>05170   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l05171"></a>05171 
<a name="l05172"></a>05172   <span class="keywordflow">if</span> (! ret)
<a name="l05173"></a>05173     {
<a name="l05174"></a>05174       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05175"></a>05175       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05176"></a>05176     }
<a name="l05177"></a>05177 
<a name="l05178"></a>05178   <span class="keywordflow">return</span> bgp_aggregate_set (vty, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05179"></a>05179                 0, AGGREGATE_AS_SET);
<a name="l05180"></a>05180 }
<a name="l05181"></a>05181 
<a name="l05182"></a>05182 
<a name="l05183"></a>05183 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_as_set_summary,
<a name="l05184"></a>05184        aggregate_address_as_set_summary_cmd,
<a name="l05185"></a>05185        <span class="stringliteral">&quot;aggregate-address A.B.C.D/M as-set summary-only&quot;</span>,
<a name="l05186"></a>05186        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05187"></a>05187        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05188"></a>05188        <span class="stringliteral">&quot;Generate AS set path information\n&quot;</span>
<a name="l05189"></a>05189        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05190"></a>05190 {
<a name="l05191"></a>05191   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05192"></a>05192                 AGGREGATE_SUMMARY_ONLY, AGGREGATE_AS_SET);
<a name="l05193"></a>05193 }
<a name="l05194"></a>05194 
<a name="l05195"></a>05195 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (aggregate_address_as_set_summary,
<a name="l05196"></a>05196        aggregate_address_summary_as_set_cmd,
<a name="l05197"></a>05197        <span class="stringliteral">&quot;aggregate-address A.B.C.D/M summary-only as-set&quot;</span>,
<a name="l05198"></a>05198        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05199"></a>05199        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05200"></a>05200        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>
<a name="l05201"></a>05201        <span class="stringliteral">&quot;Generate AS set path information\n&quot;</span>)
<a name="l05202"></a>05202 
<a name="l05203"></a>05203 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (aggregate_address_mask_as_set_summary,
<a name="l05204"></a>05204        aggregate_address_mask_as_set_summary_cmd,
<a name="l05205"></a>05205        &quot;aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D as-set summary-only&quot;,
<a name="l05206"></a>05206        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05207"></a>05207        &quot;Aggregate address\n&quot;
<a name="l05208"></a>05208        &quot;Aggregate mask\n&quot;
<a name="l05209"></a>05209        &quot;Generate AS set path information\n&quot;
<a name="l05210"></a>05210        &quot;Filter more specific routes from updates\n&quot;)
<a name="l05211"></a>05211 {
<a name="l05212"></a>05212   <span class="keywordtype">int</span> ret;
<a name="l05213"></a>05213   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l05214"></a>05214 
<a name="l05215"></a>05215   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l05216"></a>05216 
<a name="l05217"></a>05217   <span class="keywordflow">if</span> (! ret)
<a name="l05218"></a>05218     {
<a name="l05219"></a>05219       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05220"></a>05220       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05221"></a>05221     }
<a name="l05222"></a>05222 
<a name="l05223"></a>05223   <span class="keywordflow">return</span> bgp_aggregate_set (vty, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l05224"></a>05224                 AGGREGATE_SUMMARY_ONLY, AGGREGATE_AS_SET);
<a name="l05225"></a>05225 }
<a name="l05226"></a>05226 
<a name="l05227"></a>05227 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (aggregate_address_mask_as_set_summary,
<a name="l05228"></a>05228        aggregate_address_mask_summary_as_set_cmd,
<a name="l05229"></a>05229        <span class="stringliteral">&quot;aggregate-address A.B.C.D A.B.C.D summary-only as-set&quot;</span>,
<a name="l05230"></a>05230        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05231"></a>05231        <span class="stringliteral">&quot;Aggregate address\n&quot;</span>
<a name="l05232"></a>05232        <span class="stringliteral">&quot;Aggregate mask\n&quot;</span>
<a name="l05233"></a>05233        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>
<a name="l05234"></a>05234        <span class="stringliteral">&quot;Generate AS set path information\n&quot;</span>)
<a name="l05235"></a>05235 
<a name="l05236"></a>05236 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_aggregate_address,
<a name="l05237"></a>05237        no_aggregate_address_cmd,
<a name="l05238"></a>05238        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M&quot;,
<a name="l05239"></a>05239        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05240"></a>05240        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05241"></a>05241        &quot;Aggregate <a class="code" href="structprefix.html">prefix</a>\n&quot;)
<a name="l05242"></a>05242 {
<a name="l05243"></a>05243   <span class="keywordflow">return</span> bgp_aggregate_unset (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty));
<a name="l05244"></a>05244 }
<a name="l05245"></a>05245 
<a name="l05246"></a>05246 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address,
<a name="l05247"></a>05247        no_aggregate_address_summary_only_cmd,
<a name="l05248"></a>05248        <span class="stringliteral">&quot;no aggregate-address A.B.C.D/M summary-only&quot;</span>,
<a name="l05249"></a>05249        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05250"></a>05250        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05251"></a>05251        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05252"></a>05252        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05253"></a>05253 
<a name="l05254"></a>05254 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address,
<a name="l05255"></a>05255        no_aggregate_address_as_set_cmd,
<a name="l05256"></a>05256        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M as-set&quot;,
<a name="l05257"></a>05257        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05258"></a>05258        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05259"></a>05259        &quot;Aggregate <a class="code" href="structprefix.html">prefix</a>\n&quot;
<a name="l05260"></a>05260        &quot;Generate AS set path information\n&quot;)
<a name="l05261"></a>05261 
<a name="l05262"></a>05262 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address,
<a name="l05263"></a>05263        no_aggregate_address_as_set_summary_cmd,
<a name="l05264"></a>05264        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M as-set summary-only&quot;,
<a name="l05265"></a>05265        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05266"></a>05266        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05267"></a>05267        &quot;Aggregate <a class="code" href="structprefix.html">prefix</a>\n&quot;
<a name="l05268"></a>05268        &quot;Generate AS set path information\n&quot;
<a name="l05269"></a>05269        &quot;Filter more specific routes from updates\n&quot;)
<a name="l05270"></a>05270 
<a name="l05271"></a>05271 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address,
<a name="l05272"></a>05272        no_aggregate_address_summary_as_set_cmd,
<a name="l05273"></a>05273        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M summary-only as-set&quot;,
<a name="l05274"></a>05274        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05275"></a>05275        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05276"></a>05276        &quot;Aggregate <a class="code" href="structprefix.html">prefix</a>\n&quot;
<a name="l05277"></a>05277        &quot;Filter more specific routes from updates\n&quot;
<a name="l05278"></a>05278        &quot;Generate AS set path information\n&quot;)
<a name="l05279"></a>05279 
<a name="l05280"></a>05280 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_aggregate_address_mask,
<a name="l05281"></a>05281        no_aggregate_address_mask_cmd,
<a name="l05282"></a>05282        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D&quot;,
<a name="l05283"></a>05283        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05284"></a>05284        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05285"></a>05285        &quot;Aggregate address\n&quot;
<a name="l05286"></a>05286        &quot;Aggregate mask\n&quot;)
<a name="l05287"></a>05287 {
<a name="l05288"></a>05288   <span class="keywordtype">int</span> ret;
<a name="l05289"></a>05289   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l05290"></a>05290 
<a name="l05291"></a>05291   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l05292"></a>05292 
<a name="l05293"></a>05293   <span class="keywordflow">if</span> (! ret)
<a name="l05294"></a>05294     {
<a name="l05295"></a>05295       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05296"></a>05296       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l05297"></a>05297     }
<a name="l05298"></a>05298 
<a name="l05299"></a>05299   <span class="keywordflow">return</span> bgp_aggregate_unset (vty, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty));
<a name="l05300"></a>05300 }
<a name="l05301"></a>05301 
<a name="l05302"></a>05302 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address_mask,
<a name="l05303"></a>05303        no_aggregate_address_mask_summary_only_cmd,
<a name="l05304"></a>05304        <span class="stringliteral">&quot;no aggregate-address A.B.C.D A.B.C.D summary-only&quot;</span>,
<a name="l05305"></a>05305        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05306"></a>05306        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05307"></a>05307        <span class="stringliteral">&quot;Aggregate address\n&quot;</span>
<a name="l05308"></a>05308        <span class="stringliteral">&quot;Aggregate mask\n&quot;</span>
<a name="l05309"></a>05309        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05310"></a>05310 
<a name="l05311"></a>05311 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address_mask,
<a name="l05312"></a>05312        no_aggregate_address_mask_as_set_cmd,
<a name="l05313"></a>05313        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D as-set&quot;,
<a name="l05314"></a>05314        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05315"></a>05315        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05316"></a>05316        &quot;Aggregate address\n&quot;
<a name="l05317"></a>05317        &quot;Aggregate mask\n&quot;
<a name="l05318"></a>05318        &quot;Generate AS set path information\n&quot;)
<a name="l05319"></a>05319 
<a name="l05320"></a>05320 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address_mask,
<a name="l05321"></a>05321        no_aggregate_address_mask_as_set_summary_cmd,
<a name="l05322"></a>05322        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D as-set summary-only&quot;,
<a name="l05323"></a>05323        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05324"></a>05324        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05325"></a>05325        &quot;Aggregate address\n&quot;
<a name="l05326"></a>05326        &quot;Aggregate mask\n&quot;
<a name="l05327"></a>05327        &quot;Generate AS set path information\n&quot;
<a name="l05328"></a>05328        &quot;Filter more specific routes from updates\n&quot;)
<a name="l05329"></a>05329 
<a name="l05330"></a>05330 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_aggregate_address_mask,
<a name="l05331"></a>05331        no_aggregate_address_mask_summary_as_set_cmd,
<a name="l05332"></a>05332        &quot;no aggregate-address <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D summary-only as-set&quot;,
<a name="l05333"></a>05333        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05334"></a>05334        &quot;Configure BGP aggregate entries\n&quot;
<a name="l05335"></a>05335        &quot;Aggregate address\n&quot;
<a name="l05336"></a>05336        &quot;Aggregate mask\n&quot;
<a name="l05337"></a>05337        &quot;Filter more specific routes from updates\n&quot;
<a name="l05338"></a>05338        &quot;Generate AS set path information\n&quot;)
<a name="l05339"></a>05339 
<a name="l05340"></a>05340 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l05341"></a>05341 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_aggregate_address,
<a name="l05342"></a>05342        ipv6_aggregate_address_cmd,
<a name="l05343"></a>05343        <span class="stringliteral">&quot;aggregate-address X:X::X:X/M&quot;</span>,
<a name="l05344"></a>05344        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05345"></a>05345        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>)
<a name="l05346"></a>05346 {
<a name="l05347"></a>05347   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, 0, 0);
<a name="l05348"></a>05348 }
<a name="l05349"></a>05349 
<a name="l05350"></a>05350 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_aggregate_address_summary_only,
<a name="l05351"></a>05351        ipv6_aggregate_address_summary_only_cmd,
<a name="l05352"></a>05352        <span class="stringliteral">&quot;aggregate-address X:X::X:X/M summary-only&quot;</span>,
<a name="l05353"></a>05353        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05354"></a>05354        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05355"></a>05355        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05356"></a>05356 {
<a name="l05357"></a>05357   <span class="keywordflow">return</span> bgp_aggregate_set (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, 
<a name="l05358"></a>05358                 AGGREGATE_SUMMARY_ONLY, 0);
<a name="l05359"></a>05359 }
<a name="l05360"></a>05360 
<a name="l05361"></a>05361 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_aggregate_address,
<a name="l05362"></a>05362        no_ipv6_aggregate_address_cmd,
<a name="l05363"></a>05363        <span class="stringliteral">&quot;no aggregate-address X:X::X:X/M&quot;</span>,
<a name="l05364"></a>05364        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05365"></a>05365        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05366"></a>05366        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>)
<a name="l05367"></a>05367 {
<a name="l05368"></a>05368   <span class="keywordflow">return</span> bgp_aggregate_unset (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l05369"></a>05369 }
<a name="l05370"></a>05370 
<a name="l05371"></a>05371 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_aggregate_address_summary_only,
<a name="l05372"></a>05372        no_ipv6_aggregate_address_summary_only_cmd,
<a name="l05373"></a>05373        <span class="stringliteral">&quot;no aggregate-address X:X::X:X/M summary-only&quot;</span>,
<a name="l05374"></a>05374        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05375"></a>05375        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05376"></a>05376        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05377"></a>05377        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05378"></a>05378 {
<a name="l05379"></a>05379   <span class="keywordflow">return</span> bgp_aggregate_unset (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l05380"></a>05380 }
<a name="l05381"></a>05381 
<a name="l05382"></a>05382 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_aggregate_address,
<a name="l05383"></a>05383        old_ipv6_aggregate_address_cmd,
<a name="l05384"></a>05384        <span class="stringliteral">&quot;ipv6 bgp aggregate-address X:X::X:X/M&quot;</span>,
<a name="l05385"></a>05385        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l05386"></a>05386        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l05387"></a>05387        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05388"></a>05388        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>)
<a name="l05389"></a>05389 
<a name="l05390"></a>05390 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_aggregate_address_summary_only,
<a name="l05391"></a>05391        old_ipv6_aggregate_address_summary_only_cmd,
<a name="l05392"></a>05392        <span class="stringliteral">&quot;ipv6 bgp aggregate-address X:X::X:X/M summary-only&quot;</span>,
<a name="l05393"></a>05393        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l05394"></a>05394        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l05395"></a>05395        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05396"></a>05396        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05397"></a>05397        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05398"></a>05398 
<a name="l05399"></a>05399 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_aggregate_address,
<a name="l05400"></a>05400        old_no_ipv6_aggregate_address_cmd,
<a name="l05401"></a>05401        <span class="stringliteral">&quot;no ipv6 bgp aggregate-address X:X::X:X/M&quot;</span>,
<a name="l05402"></a>05402        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05403"></a>05403        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l05404"></a>05404        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l05405"></a>05405        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05406"></a>05406        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>)
<a name="l05407"></a>05407 
<a name="l05408"></a>05408 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_aggregate_address_summary_only,
<a name="l05409"></a>05409        old_no_ipv6_aggregate_address_summary_only_cmd,
<a name="l05410"></a>05410        <span class="stringliteral">&quot;no ipv6 bgp aggregate-address X:X::X:X/M summary-only&quot;</span>,
<a name="l05411"></a>05411        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l05412"></a>05412        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l05413"></a>05413        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l05414"></a>05414        <span class="stringliteral">&quot;Configure BGP aggregate entries\n&quot;</span>
<a name="l05415"></a>05415        <span class="stringliteral">&quot;Aggregate prefix\n&quot;</span>
<a name="l05416"></a>05416        <span class="stringliteral">&quot;Filter more specific routes from updates\n&quot;</span>)
<a name="l05417"></a>05417 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l05418"></a>05418 
<a name="l05419"></a>05419 <span class="comment">/* Redistribute route treatment. */</span>
<a name="l05420"></a>05420 <span class="keywordtype">void</span>
<a name="l05421"></a>05421 <a class="code" href="bgp__route_8h.html#ad43d4207e8e8d357b758d7898f59dfec">bgp_redistribute_add</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <span class="keyword">struct</span> in_addr *<a class="code" href="structnexthop.html">nexthop</a>,
<a name="l05422"></a>05422               u_int32_t <a class="code" href="structmetric.html">metric</a>, u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l05423"></a>05423 {
<a name="l05424"></a>05424   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l05425"></a>05425   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l05426"></a>05426   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<span class="keyword">new</span>;
<a name="l05427"></a>05427   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *bi;
<a name="l05428"></a>05428   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> info;
<a name="l05429"></a>05429   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *bn;
<a name="l05430"></a>05430   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a> = { 0 };
<a name="l05431"></a>05431   <span class="keyword">struct </span>attr attr_new = { 0 };
<a name="l05432"></a>05432   <span class="keyword">struct </span>attr *new_attr;
<a name="l05433"></a>05433   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l05434"></a>05434   <span class="keywordtype">int</span> ret;
<a name="l05435"></a>05435 
<a name="l05436"></a>05436   <span class="comment">/* Make default attribute. */</span>
<a name="l05437"></a>05437   <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (&amp;attr, <a class="code" href="bgpd_8h.html#ab150461b04b7be7ff0068c004b732bb9">BGP_ORIGIN_INCOMPLETE</a>);
<a name="l05438"></a>05438   <span class="keywordflow">if</span> (nexthop)
<a name="l05439"></a>05439     attr.<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a> = *<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;
<a name="l05440"></a>05440 
<a name="l05441"></a>05441   attr.<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = metric;
<a name="l05442"></a>05442   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l05443"></a>05443 
<a name="l05444"></a>05444   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l05445"></a>05445     {
<a name="l05446"></a>05446       afi = <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>);
<a name="l05447"></a>05447 
<a name="l05448"></a>05448       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][type])
<a name="l05449"></a>05449     {
<a name="l05450"></a>05450       <span class="comment">/* Copy attribute for modification. */</span>
<a name="l05451"></a>05451       <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (&amp;attr_new, &amp;attr);
<a name="l05452"></a>05452 
<a name="l05453"></a>05453       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][type])
<a name="l05454"></a>05454         attr_new.<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = bgp-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>];
<a name="l05455"></a>05455 
<a name="l05456"></a>05456       <span class="comment">/* Apply route-map. */</span>
<a name="l05457"></a>05457       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a>)
<a name="l05458"></a>05458         {
<a name="l05459"></a>05459           info.peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l05460"></a>05460           info.attr = &amp;attr_new;
<a name="l05461"></a>05461 
<a name="l05462"></a>05462               <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a>, <a class="code" href="bgpd_8h.html#aba4df425743f00b0b48bfb45194cd524">PEER_RMAP_TYPE_REDISTRIBUTE</a>);
<a name="l05463"></a>05463 
<a name="l05464"></a>05464           ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a>, p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>,
<a name="l05465"></a>05465                      &amp;info);
<a name="l05466"></a>05466 
<a name="l05467"></a>05467               bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#afad0d7ca0b1d0d8bdea5bb8eaba1ef65">rmap_type</a> = 0;
<a name="l05468"></a>05468 
<a name="l05469"></a>05469           <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l05470"></a>05470         {
<a name="l05471"></a>05471           <span class="comment">/* Free uninterned attribute. */</span>
<a name="l05472"></a>05472           <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (&amp;attr_new);
<a name="l05473"></a>05473           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr_new);
<a name="l05474"></a>05474           
<a name="l05475"></a>05475           <span class="comment">/* Unintern original. */</span>
<a name="l05476"></a>05476           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l05477"></a>05477           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l05478"></a>05478           <a class="code" href="bgp__route_8h.html#a7484774dce89c4dd82bf5e17b1688cbb">bgp_redistribute_delete</a> (p, type);
<a name="l05479"></a>05479           <span class="keywordflow">return</span>;
<a name="l05480"></a>05480         }
<a name="l05481"></a>05481         }
<a name="l05482"></a>05482 
<a name="l05483"></a>05483           bn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][SAFI_UNICAST], 
<a name="l05484"></a>05484                                  afi, SAFI_UNICAST, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l05485"></a>05485           
<a name="l05486"></a>05486       new_attr = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr_new);
<a name="l05487"></a>05487       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr_new);
<a name="l05488"></a>05488       
<a name="l05489"></a>05489       <span class="keywordflow">for</span> (bi = bn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; bi; bi = bi-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l05490"></a>05490         <span class="keywordflow">if</span> (bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>
<a name="l05491"></a>05491         &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a0e973ed2530863b634c03e48637ce7b0">BGP_ROUTE_REDISTRIBUTE</a>)
<a name="l05492"></a>05492           <span class="keywordflow">break</span>;
<a name="l05493"></a>05493  
<a name="l05494"></a>05494       <span class="keywordflow">if</span> (bi)
<a name="l05495"></a>05495         {
<a name="l05496"></a>05496           <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (bi-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, new_attr) &amp;&amp;
<a name="l05497"></a>05497           !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l05498"></a>05498         {
<a name="l05499"></a>05499           <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (new_attr);
<a name="l05500"></a>05500           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l05501"></a>05501           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l05502"></a>05502           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (bn);
<a name="l05503"></a>05503           <span class="keywordflow">return</span>;
<a name="l05504"></a>05504         }
<a name="l05505"></a>05505           <span class="keywordflow">else</span>
<a name="l05506"></a>05506         {
<a name="l05507"></a>05507           <span class="comment">/* The attribute is changed. */</span>
<a name="l05508"></a>05508           <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (bn, bi, <a class="code" href="bgp__route_8h.html#abf27b05ce5e7ef154318fb01c218d611">BGP_INFO_ATTR_CHANGED</a>);
<a name="l05509"></a>05509  
<a name="l05510"></a>05510           <span class="comment">/* Rewrite BGP route information. */</span>
<a name="l05511"></a>05511           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l05512"></a>05512             <a class="code" href="bgp__route_8c.html#ae6999426a3503ae94836d8e1c040e38c">bgp_info_restore</a>(bn, bi);
<a name="l05513"></a>05513           <span class="keywordflow">else</span>
<a name="l05514"></a>05514             <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, bi, afi, SAFI_UNICAST);
<a name="l05515"></a>05515           <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (bi-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l05516"></a>05516           bi-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = new_attr;
<a name="l05517"></a>05517           bi-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l05518"></a>05518  
<a name="l05519"></a>05519           <span class="comment">/* Process change. */</span>
<a name="l05520"></a>05520           <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, bi, afi, SAFI_UNICAST);
<a name="l05521"></a>05521           <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, bn, afi, SAFI_UNICAST);
<a name="l05522"></a>05522           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (bn);
<a name="l05523"></a>05523           <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l05524"></a>05524           <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l05525"></a>05525           <span class="keywordflow">return</span>;
<a name="l05526"></a>05526         } 
<a name="l05527"></a>05527         }
<a name="l05528"></a>05528 
<a name="l05529"></a>05529       <span class="keyword">new</span> = <a class="code" href="bgp__route_8c.html#ac58054377984aaf2a3436dfe2ca91e53">bgp_info_new</a> ();
<a name="l05530"></a>05530       <span class="keyword">new</span>-&gt;type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l05531"></a>05531       <span class="keyword">new</span>-&gt;sub_type = <a class="code" href="bgp__route_8h.html#a0e973ed2530863b634c03e48637ce7b0">BGP_ROUTE_REDISTRIBUTE</a>;
<a name="l05532"></a>05532       <span class="keyword">new</span>-&gt;peer = bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>;
<a name="l05533"></a>05533       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l05534"></a>05534       <span class="keyword">new</span>-&gt;attr = new_attr;
<a name="l05535"></a>05535       <span class="keyword">new</span>-&gt;uptime = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l05536"></a>05536 
<a name="l05537"></a>05537       <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, p, <span class="keyword">new</span>, afi, SAFI_UNICAST);
<a name="l05538"></a>05538       <a class="code" href="bgp__route_8c.html#ac7472ce06f993cd544f794c7b0381954">bgp_info_add</a> (bn, <span class="keyword">new</span>);
<a name="l05539"></a>05539       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (bn);
<a name="l05540"></a>05540       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, bn, afi, SAFI_UNICAST);
<a name="l05541"></a>05541     }
<a name="l05542"></a>05542     }
<a name="l05543"></a>05543 
<a name="l05544"></a>05544   <span class="comment">/* Unintern original. */</span>
<a name="l05545"></a>05545   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l05546"></a>05546   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l05547"></a>05547 }
<a name="l05548"></a>05548 
<a name="l05549"></a>05549 <span class="keywordtype">void</span>
<a name="l05550"></a>05550 <a class="code" href="bgp__route_8h.html#a7484774dce89c4dd82bf5e17b1688cbb">bgp_redistribute_delete</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, u_char type)
<a name="l05551"></a>05551 {
<a name="l05552"></a>05552   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l05553"></a>05553   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l05554"></a>05554   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l05555"></a>05555   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l05556"></a>05556   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l05557"></a>05557 
<a name="l05558"></a>05558   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l05559"></a>05559     {
<a name="l05560"></a>05560       afi = <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>);
<a name="l05561"></a>05561 
<a name="l05562"></a>05562       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][type])
<a name="l05563"></a>05563     {
<a name="l05564"></a>05564          rn = <a class="code" href="bgp__route_8c.html#a28376b150f4dc5678918739889f323e6">bgp_afi_node_get</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][SAFI_UNICAST], afi, SAFI_UNICAST, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l05565"></a>05565 
<a name="l05566"></a>05566       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l05567"></a>05567         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>
<a name="l05568"></a>05568         &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type)
<a name="l05569"></a>05569           <span class="keywordflow">break</span>;
<a name="l05570"></a>05570 
<a name="l05571"></a>05571       <span class="keywordflow">if</span> (ri)
<a name="l05572"></a>05572         {
<a name="l05573"></a>05573           <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, p, ri, afi, SAFI_UNICAST);
<a name="l05574"></a>05574           <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l05575"></a>05575           <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, SAFI_UNICAST);
<a name="l05576"></a>05576         }
<a name="l05577"></a>05577       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l05578"></a>05578     }
<a name="l05579"></a>05579     }
<a name="l05580"></a>05580 }
<a name="l05581"></a>05581 
<a name="l05582"></a>05582 <span class="comment">/* Withdraw specified route type&#39;s route. */</span>
<a name="l05583"></a>05583 <span class="keywordtype">void</span>
<a name="l05584"></a>05584 <a class="code" href="bgp__route_8h.html#ab7121f0cd3100fffb819723728d50c2e">bgp_redistribute_withdraw</a> (<span class="keyword">struct</span> bgp *bgp, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keywordtype">int</span> type)
<a name="l05585"></a>05585 {
<a name="l05586"></a>05586   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l05587"></a>05587   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l05588"></a>05588   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l05589"></a>05589 
<a name="l05590"></a>05590   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l05591"></a>05591 
<a name="l05592"></a>05592   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l05593"></a>05593     {
<a name="l05594"></a>05594       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l05595"></a>05595     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>
<a name="l05596"></a>05596         &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == type)
<a name="l05597"></a>05597       <span class="keywordflow">break</span>;
<a name="l05598"></a>05598 
<a name="l05599"></a>05599       <span class="keywordflow">if</span> (ri)
<a name="l05600"></a>05600     {
<a name="l05601"></a>05601       <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, afi, SAFI_UNICAST);
<a name="l05602"></a>05602       <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (rn, ri);
<a name="l05603"></a>05603       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, SAFI_UNICAST);
<a name="l05604"></a>05604     }
<a name="l05605"></a>05605     }
<a name="l05606"></a>05606 }
<a name="l05607"></a>05607 
<a name="l05608"></a>05608 <span class="comment">/* Static function to display route. */</span>
<a name="l05609"></a>05609 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l05610"></a>05610 route_vty_out_route (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <span class="keyword">struct</span> vty *vty)
<a name="l05611"></a>05611 {
<a name="l05612"></a>05612   <span class="keywordtype">int</span> len;
<a name="l05613"></a>05613   u_int32_t destination; 
<a name="l05614"></a>05614   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l05615"></a>05615 
<a name="l05616"></a>05616   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l05617"></a>05617     {
<a name="l05618"></a>05618       len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ));
<a name="l05619"></a>05619       destination = ntohl (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr);
<a name="l05620"></a>05620 
<a name="l05621"></a>05621       <span class="keywordflow">if</span> ((IN_CLASSC (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 24)
<a name="l05622"></a>05622       || (IN_CLASSB (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 16)
<a name="l05623"></a>05623       || (IN_CLASSA (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 8)
<a name="l05624"></a>05624       || p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr == 0)
<a name="l05625"></a>05625     {
<a name="l05626"></a>05626       <span class="comment">/* When mask is natural, mask is not displayed. */</span>
<a name="l05627"></a>05627     }
<a name="l05628"></a>05628       <span class="keywordflow">else</span>
<a name="l05629"></a>05629     len += <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;/%d&quot;</span>, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l05630"></a>05630     }
<a name="l05631"></a>05631   <span class="keywordflow">else</span>
<a name="l05632"></a>05632     len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s/%d&quot;</span>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l05633"></a>05633            p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l05634"></a>05634 
<a name="l05635"></a>05635   len = 17 - len;
<a name="l05636"></a>05636   <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05637"></a>05637     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%*s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, 20, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05638"></a>05638   <span class="keywordflow">else</span>
<a name="l05639"></a>05639     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05640"></a>05640 }
<a name="l05641"></a>05641 
<a name="l05642"></a>05642 <span class="keyword">enum</span> bgp_display_type
<a name="l05643"></a>05643 {
<a name="l05644"></a>05644   normal_list,
<a name="l05645"></a>05645 };
<a name="l05646"></a>05646 
<a name="l05647"></a>05647 <span class="comment">/* Print the short form route status for a bgp_info */</span>
<a name="l05648"></a>05648 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l05649"></a>05649 route_vty_short_status_out (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo)
<a name="l05650"></a>05650 {
<a name="l05651"></a>05651  <span class="comment">/* Route status display. */</span>
<a name="l05652"></a>05652   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l05653"></a>05653     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;R&quot;</span>);
<a name="l05654"></a>05654   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l05655"></a>05655     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;S&quot;</span>);
<a name="l05656"></a>05656   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l05657"></a>05657     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;s&quot;</span>);
<a name="l05658"></a>05658   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l05659"></a>05659     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;*&quot;</span>);
<a name="l05660"></a>05660   <span class="keywordflow">else</span>
<a name="l05661"></a>05661     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05662"></a>05662 
<a name="l05663"></a>05663   <span class="comment">/* Selected */</span>
<a name="l05664"></a>05664   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l05665"></a>05665     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;h&quot;</span>);
<a name="l05666"></a>05666   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l05667"></a>05667     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;d&quot;</span>);
<a name="l05668"></a>05668   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l05669"></a>05669     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;&gt;&quot;</span>);
<a name="l05670"></a>05670   <span class="keywordflow">else</span>
<a name="l05671"></a>05671     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05672"></a>05672 
<a name="l05673"></a>05673   <span class="comment">/* Internal route. */</span>
<a name="l05674"></a>05674     <span class="keywordflow">if</span> ((binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>) &amp;&amp; (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>))
<a name="l05675"></a>05675       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;i&quot;</span>);
<a name="l05676"></a>05676     <span class="keywordflow">else</span>
<a name="l05677"></a>05677       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; &quot;</span>); 
<a name="l05678"></a>05678 }
<a name="l05679"></a>05679 
<a name="l05680"></a>05680 <span class="comment">/* called from terminal list command */</span>
<a name="l05681"></a>05681 <span class="keywordtype">void</span>
<a name="l05682"></a>05682 <a class="code" href="bgp__route_8h.html#a9c8ca3acfad463c61259edab3afd7220">route_vty_out</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l05683"></a>05683            <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <span class="keywordtype">int</span> display, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05684"></a>05684 {
<a name="l05685"></a>05685   <span class="keyword">struct </span>attr *attr;
<a name="l05686"></a>05686   
<a name="l05687"></a>05687   <span class="comment">/* short status lead text */</span> 
<a name="l05688"></a>05688   route_vty_short_status_out (vty, binfo);
<a name="l05689"></a>05689   
<a name="l05690"></a>05690   <span class="comment">/* print prefix and mask */</span>
<a name="l05691"></a>05691   <span class="keywordflow">if</span> (! display)
<a name="l05692"></a>05692     route_vty_out_route (p, vty);
<a name="l05693"></a>05693   <span class="keywordflow">else</span>
<a name="l05694"></a>05694     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, 17, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05695"></a>05695 
<a name="l05696"></a>05696   <span class="comment">/* Print attribute */</span>
<a name="l05697"></a>05697   attr = binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l05698"></a>05698   <span class="keywordflow">if</span> (attr) 
<a name="l05699"></a>05699     {
<a name="l05700"></a>05700       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l05701"></a>05701     {
<a name="l05702"></a>05702       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l05703"></a>05703         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>,
<a name="l05704"></a>05704                      inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>));
<a name="l05705"></a>05705       <span class="keywordflow">else</span>
<a name="l05706"></a>05706         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>, inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>));
<a name="l05707"></a>05707     }
<a name="l05708"></a>05708 <span class="preprocessor">#ifdef HAVE_IPV6      </span>
<a name="l05709"></a>05709 <span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l05710"></a>05710     {
<a name="l05711"></a>05711       <span class="keywordtype">int</span> len;
<a name="l05712"></a>05712       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l05713"></a>05713 
<a name="l05714"></a>05714       len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, 
<a name="l05715"></a>05715              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global,
<a name="l05716"></a>05716              buf, BUFSIZ));
<a name="l05717"></a>05717       len = 16 - len;
<a name="l05718"></a>05718       <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05719"></a>05719         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%*s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, 36, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05720"></a>05720       <span class="keywordflow">else</span>
<a name="l05721"></a>05721         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05722"></a>05722     }
<a name="l05723"></a>05723 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l05724"></a>05724 
<a name="l05725"></a>05725       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l05726"></a>05726     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%10d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
<a name="l05727"></a>05727       <span class="keywordflow">else</span>
<a name="l05728"></a>05728     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;          &quot;</span>);
<a name="l05729"></a>05729 
<a name="l05730"></a>05730       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l05731"></a>05731     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%7d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
<a name="l05732"></a>05732       <span class="keywordflow">else</span>
<a name="l05733"></a>05733     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;       &quot;</span>);
<a name="l05734"></a>05734 
<a name="l05735"></a>05735       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%7u &quot;</span>, (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> ? attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> : 0));
<a name="l05736"></a>05736     
<a name="l05737"></a>05737       <span class="comment">/* Print aspath */</span>
<a name="l05738"></a>05738       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l05739"></a>05739         <a class="code" href="bgp__aspath_8c.html#a32814b0bab0791ca1b85145a1b1a0f3f">aspath_print_vty</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05740"></a>05740 
<a name="l05741"></a>05741       <span class="comment">/* Print origin */</span>
<a name="l05742"></a>05742       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="bgp__debug_8c.html#ab1c6c37df170ace398e3657b5df5ba6f">bgp_origin_str</a>[attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>]);
<a name="l05743"></a>05743     }
<a name="l05744"></a>05744   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05745"></a>05745 }  
<a name="l05746"></a>05746 
<a name="l05747"></a>05747 <span class="comment">/* called from terminal list command */</span>
<a name="l05748"></a>05748 <span class="keywordtype">void</span>
<a name="l05749"></a>05749 <a class="code" href="bgp__route_8h.html#a0f21f671849f68f41259f9aa94ba9925">route_vty_out_tmp</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l05750"></a>05750            <span class="keyword">struct</span> attr *attr, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05751"></a>05751 {
<a name="l05752"></a>05752   <span class="comment">/* Route status display. */</span>
<a name="l05753"></a>05753   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;*&quot;</span>);
<a name="l05754"></a>05754   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;&gt;&quot;</span>);
<a name="l05755"></a>05755   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05756"></a>05756 
<a name="l05757"></a>05757   <span class="comment">/* print prefix and mask */</span>
<a name="l05758"></a>05758   route_vty_out_route (p, vty);
<a name="l05759"></a>05759 
<a name="l05760"></a>05760   <span class="comment">/* Print attribute */</span>
<a name="l05761"></a>05761   <span class="keywordflow">if</span> (attr) 
<a name="l05762"></a>05762     {
<a name="l05763"></a>05763       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l05764"></a>05764     {
<a name="l05765"></a>05765       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l05766"></a>05766         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>,
<a name="l05767"></a>05767                      inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>));
<a name="l05768"></a>05768       <span class="keywordflow">else</span>
<a name="l05769"></a>05769         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>, inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>));
<a name="l05770"></a>05770     }
<a name="l05771"></a>05771 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l05772"></a>05772 <span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l05773"></a>05773         {
<a name="l05774"></a>05774           <span class="keywordtype">int</span> len;
<a name="l05775"></a>05775           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l05776"></a>05776           
<a name="l05777"></a>05777           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l05778"></a>05778 
<a name="l05779"></a>05779           len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l05780"></a>05780                          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global,
<a name="l05781"></a>05781                          buf, BUFSIZ));
<a name="l05782"></a>05782           len = 16 - len;
<a name="l05783"></a>05783           <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05784"></a>05784             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%*s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, 36, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05785"></a>05785           <span class="keywordflow">else</span>
<a name="l05786"></a>05786             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05787"></a>05787         }
<a name="l05788"></a>05788 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l05789"></a>05789 
<a name="l05790"></a>05790       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l05791"></a>05791     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%10d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
<a name="l05792"></a>05792       <span class="keywordflow">else</span>
<a name="l05793"></a>05793     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;          &quot;</span>);
<a name="l05794"></a>05794 
<a name="l05795"></a>05795       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l05796"></a>05796     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%7d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
<a name="l05797"></a>05797       <span class="keywordflow">else</span>
<a name="l05798"></a>05798     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;       &quot;</span>);
<a name="l05799"></a>05799       
<a name="l05800"></a>05800       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%7d &quot;</span>, (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> ? attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> : 0));
<a name="l05801"></a>05801       
<a name="l05802"></a>05802       <span class="comment">/* Print aspath */</span>
<a name="l05803"></a>05803       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l05804"></a>05804         <a class="code" href="bgp__aspath_8c.html#a32814b0bab0791ca1b85145a1b1a0f3f">aspath_print_vty</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05805"></a>05805 
<a name="l05806"></a>05806       <span class="comment">/* Print origin */</span>
<a name="l05807"></a>05807       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="bgp__debug_8c.html#ab1c6c37df170ace398e3657b5df5ba6f">bgp_origin_str</a>[attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>]);
<a name="l05808"></a>05808     }
<a name="l05809"></a>05809 
<a name="l05810"></a>05810   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05811"></a>05811 }  
<a name="l05812"></a>05812 
<a name="l05813"></a>05813 <span class="keywordtype">void</span>
<a name="l05814"></a>05814 <a class="code" href="bgp__route_8h.html#ae57510a15d9159581f1e32f10aac1a9c">route_vty_out_tag</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l05815"></a>05815            <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <span class="keywordtype">int</span> display, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05816"></a>05816 {
<a name="l05817"></a>05817   <span class="keyword">struct </span>attr *attr;
<a name="l05818"></a>05818   u_int32_t label = 0;
<a name="l05819"></a>05819   
<a name="l05820"></a>05820   <span class="keywordflow">if</span> (!binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l05821"></a>05821     <span class="keywordflow">return</span>;
<a name="l05822"></a>05822   
<a name="l05823"></a>05823   <span class="comment">/* short status lead text */</span> 
<a name="l05824"></a>05824   route_vty_short_status_out (vty, binfo);
<a name="l05825"></a>05825     
<a name="l05826"></a>05826   <span class="comment">/* print prefix and mask */</span>
<a name="l05827"></a>05827   <span class="keywordflow">if</span> (! display)
<a name="l05828"></a>05828     route_vty_out_route (p, vty);
<a name="l05829"></a>05829   <span class="keywordflow">else</span>
<a name="l05830"></a>05830     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, 17, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05831"></a>05831 
<a name="l05832"></a>05832   <span class="comment">/* Print attribute */</span>
<a name="l05833"></a>05833   attr = binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l05834"></a>05834   <span class="keywordflow">if</span> (attr) 
<a name="l05835"></a>05835     {
<a name="l05836"></a>05836       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l05837"></a>05837     {
<a name="l05838"></a>05838       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l05839"></a>05839         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>,
<a name="l05840"></a>05840                      inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>));
<a name="l05841"></a>05841       <span class="keywordflow">else</span>
<a name="l05842"></a>05842         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-16s&quot;</span>, inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>));
<a name="l05843"></a>05843     }
<a name="l05844"></a>05844 <span class="preprocessor">#ifdef HAVE_IPV6      </span>
<a name="l05845"></a>05845 <span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l05846"></a>05846     {
<a name="l05847"></a>05847       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l05848"></a>05848       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l05849"></a>05849       <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l05850"></a>05850       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
<a name="l05851"></a>05851         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, 
<a name="l05852"></a>05852              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global,
<a name="l05853"></a>05853                      buf, BUFSIZ));
<a name="l05854"></a>05854       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
<a name="l05855"></a>05855         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s(%s)&quot;</span>,
<a name="l05856"></a>05856              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global,
<a name="l05857"></a>05857                         buf, BUFSIZ),
<a name="l05858"></a>05858              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local,
<a name="l05859"></a>05859                         buf1, BUFSIZ));
<a name="l05860"></a>05860       
<a name="l05861"></a>05861     }
<a name="l05862"></a>05862 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l05863"></a>05863     }
<a name="l05864"></a>05864 
<a name="l05865"></a>05865   label = <a class="code" href="bgp__mplsvpn_8c.html#aa210756655b6acea8f6495e194ac5cc7">decode_label</a> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#ab5ce51bbce0f9dc8bb7a922f25e44da0">tag</a>);
<a name="l05866"></a>05866 
<a name="l05867"></a>05867   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;notag/%d&quot;</span>, label);
<a name="l05868"></a>05868 
<a name="l05869"></a>05869   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05870"></a>05870 }  
<a name="l05871"></a>05871 
<a name="l05872"></a>05872 <span class="comment">/* dampening route */</span>
<a name="l05873"></a>05873 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l05874"></a>05874 damp_route_vty_out (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l05875"></a>05875             <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <span class="keywordtype">int</span> display, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05876"></a>05876 {
<a name="l05877"></a>05877   <span class="keyword">struct </span>attr *attr;
<a name="l05878"></a>05878   <span class="keywordtype">int</span> len;
<a name="l05879"></a>05879   <span class="keywordtype">char</span> timebuf[<a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>];
<a name="l05880"></a>05880 
<a name="l05881"></a>05881   <span class="comment">/* short status lead text */</span> 
<a name="l05882"></a>05882   route_vty_short_status_out (vty, binfo);
<a name="l05883"></a>05883   
<a name="l05884"></a>05884   <span class="comment">/* print prefix and mask */</span>
<a name="l05885"></a>05885   <span class="keywordflow">if</span> (! display)
<a name="l05886"></a>05886     route_vty_out_route (p, vty);
<a name="l05887"></a>05887   <span class="keywordflow">else</span>
<a name="l05888"></a>05888     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, 17, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05889"></a>05889 
<a name="l05890"></a>05890   len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l05891"></a>05891   len = 17 - len;
<a name="l05892"></a>05892   <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05893"></a>05893     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%*s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, 34, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05894"></a>05894   <span class="keywordflow">else</span>
<a name="l05895"></a>05895     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05896"></a>05896 
<a name="l05897"></a>05897   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, <a class="code" href="bgp__damp_8c.html#a4dab8cc4c114da6cbe9ff4258a958103">bgp_damp_reuse_time_vty</a> (vty, binfo, timebuf, <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>));
<a name="l05898"></a>05898 
<a name="l05899"></a>05899   <span class="comment">/* Print attribute */</span>
<a name="l05900"></a>05900   attr = binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l05901"></a>05901   <span class="keywordflow">if</span> (attr)
<a name="l05902"></a>05902     {
<a name="l05903"></a>05903       <span class="comment">/* Print aspath */</span>
<a name="l05904"></a>05904       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l05905"></a>05905     <a class="code" href="bgp__aspath_8c.html#a32814b0bab0791ca1b85145a1b1a0f3f">aspath_print_vty</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05906"></a>05906 
<a name="l05907"></a>05907       <span class="comment">/* Print origin */</span>
<a name="l05908"></a>05908       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="bgp__debug_8c.html#ab1c6c37df170ace398e3657b5df5ba6f">bgp_origin_str</a>[attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>]);
<a name="l05909"></a>05909     }
<a name="l05910"></a>05910   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05911"></a>05911 }
<a name="l05912"></a>05912 
<a name="l05913"></a>05913 <span class="comment">/* flap route */</span>
<a name="l05914"></a>05914 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l05915"></a>05915 flap_route_vty_out (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l05916"></a>05916             <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <span class="keywordtype">int</span> display, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05917"></a>05917 {
<a name="l05918"></a>05918   <span class="keyword">struct </span>attr *attr;
<a name="l05919"></a>05919   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l05920"></a>05920   <span class="keywordtype">char</span> timebuf[<a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>];
<a name="l05921"></a>05921   <span class="keywordtype">int</span> len;
<a name="l05922"></a>05922   
<a name="l05923"></a>05923   <span class="keywordflow">if</span> (!binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l05924"></a>05924     <span class="keywordflow">return</span>;
<a name="l05925"></a>05925   
<a name="l05926"></a>05926   bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>;
<a name="l05927"></a>05927 
<a name="l05928"></a>05928   <span class="comment">/* short status lead text */</span>
<a name="l05929"></a>05929   route_vty_short_status_out (vty, binfo);
<a name="l05930"></a>05930   
<a name="l05931"></a>05931   <span class="comment">/* print prefix and mask */</span>
<a name="l05932"></a>05932   <span class="keywordflow">if</span> (! display)
<a name="l05933"></a>05933     route_vty_out_route (p, vty);
<a name="l05934"></a>05934   <span class="keywordflow">else</span>
<a name="l05935"></a>05935     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, 17, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05936"></a>05936 
<a name="l05937"></a>05937   len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l05938"></a>05938   len = 16 - len;
<a name="l05939"></a>05939   <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05940"></a>05940     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%*s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, 33, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05941"></a>05941   <span class="keywordflow">else</span>
<a name="l05942"></a>05942     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05943"></a>05943 
<a name="l05944"></a>05944   len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%d&quot;</span>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#ab12ae05f133ded91a152d8b42c33336a">flap</a>);
<a name="l05945"></a>05945   len = 5 - len;
<a name="l05946"></a>05946   <span class="keywordflow">if</span> (len &lt; 1)
<a name="l05947"></a>05947     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05948"></a>05948   <span class="keywordflow">else</span>
<a name="l05949"></a>05949     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s &quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05950"></a>05950     
<a name="l05951"></a>05951   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, <a class="code" href="bgpd_8c.html#acf827381bb67155dd3f9ec490bc453ff">peer_uptime</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a79b767b81bcc0f2015c6da5651dfa149">start_time</a>,
<a name="l05952"></a>05952        timebuf, <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>));
<a name="l05953"></a>05953 
<a name="l05954"></a>05954   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>)
<a name="l05955"></a>05955       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l05956"></a>05956     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, <a class="code" href="bgp__damp_8c.html#a4dab8cc4c114da6cbe9ff4258a958103">bgp_damp_reuse_time_vty</a> (vty, binfo, timebuf, <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>));
<a name="l05957"></a>05957   <span class="keywordflow">else</span>
<a name="l05958"></a>05958     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%*s &quot;</span>, 8, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05959"></a>05959 
<a name="l05960"></a>05960   <span class="comment">/* Print attribute */</span>
<a name="l05961"></a>05961   attr = binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l05962"></a>05962   <span class="keywordflow">if</span> (attr)
<a name="l05963"></a>05963     {
<a name="l05964"></a>05964       <span class="comment">/* Print aspath */</span>
<a name="l05965"></a>05965       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l05966"></a>05966     <a class="code" href="bgp__aspath_8c.html#a32814b0bab0791ca1b85145a1b1a0f3f">aspath_print_vty</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, <span class="stringliteral">&quot; &quot;</span>);
<a name="l05967"></a>05967 
<a name="l05968"></a>05968       <span class="comment">/* Print origin */</span>
<a name="l05969"></a>05969       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="bgp__debug_8c.html#ab1c6c37df170ace398e3657b5df5ba6f">bgp_origin_str</a>[attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>]);
<a name="l05970"></a>05970     }
<a name="l05971"></a>05971   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05972"></a>05972 }
<a name="l05973"></a>05973 
<a name="l05974"></a>05974 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l05975"></a>05975 route_vty_out_detail (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, 
<a name="l05976"></a>05976               <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l05977"></a>05977 {
<a name="l05978"></a>05978   <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l05979"></a>05979   <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l05980"></a>05980   <span class="keyword">struct </span>attr *attr;
<a name="l05981"></a>05981   <span class="keywordtype">int</span> sockunion_vty_out (<span class="keyword">struct</span> vty *, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *);
<a name="l05982"></a>05982     
<a name="l05983"></a>05983   attr = binfo-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l05984"></a>05984 
<a name="l05985"></a>05985   <span class="keywordflow">if</span> (attr)
<a name="l05986"></a>05986     {
<a name="l05987"></a>05987       <span class="comment">/* Line1 display AS-path, Aggregator */</span>
<a name="l05988"></a>05988       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l05989"></a>05989     {
<a name="l05990"></a>05990       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  &quot;</span>);
<a name="l05991"></a>05991       <span class="keywordflow">if</span> (<a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) == 0)
<a name="l05992"></a>05992         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Local&quot;</span>);
<a name="l05993"></a>05993       <span class="keywordflow">else</span>
<a name="l05994"></a>05994         <a class="code" href="bgp__aspath_8c.html#a32814b0bab0791ca1b85145a1b1a0f3f">aspath_print_vty</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, <span class="stringliteral">&quot;&quot;</span>);
<a name="l05995"></a>05995     }
<a name="l05996"></a>05996 
<a name="l05997"></a>05997       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l05998"></a>05998         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (removed)&quot;</span>);
<a name="l05999"></a>05999       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l06000"></a>06000     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (stale)&quot;</span>);
<a name="l06001"></a>06001       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>)))
<a name="l06002"></a>06002     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (aggregated by %u %s)&quot;</span>, 
<a name="l06003"></a>06003              attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>,
<a name="l06004"></a>06004          inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>));
<a name="l06005"></a>06005       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>))
<a name="l06006"></a>06006     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (Received from a RR-client)&quot;</span>);
<a name="l06007"></a>06007       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l06008"></a>06008     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (Received from a RS-client)&quot;</span>);
<a name="l06009"></a>06009       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l06010"></a>06010     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (history entry)&quot;</span>);
<a name="l06011"></a>06011       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l06012"></a>06012     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, (suppressed due to dampening)&quot;</span>);
<a name="l06013"></a>06013       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06014"></a>06014       
<a name="l06015"></a>06015       <span class="comment">/* Line2 display Next-hop, Neighbor, Router-id */</span>
<a name="l06016"></a>06016       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l06017"></a>06017     {
<a name="l06018"></a>06018       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    %s&quot;</span>, safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a> ?
<a name="l06019"></a>06019            inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>) :
<a name="l06020"></a>06020            inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>));
<a name="l06021"></a>06021     }
<a name="l06022"></a>06022 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l06023"></a>06023 <span class="preprocessor"></span>      <span class="keywordflow">else</span>
<a name="l06024"></a>06024     {
<a name="l06025"></a>06025       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l06026"></a>06026       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    %s&quot;</span>,
<a name="l06027"></a>06027            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global,
<a name="l06028"></a>06028                   buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>));
<a name="l06029"></a>06029     }
<a name="l06030"></a>06030 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l06031"></a>06031 
<a name="l06032"></a>06032       <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> == bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>)
<a name="l06033"></a>06033     {
<a name="l06034"></a>06034       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; from %s &quot;</span>, 
<a name="l06035"></a>06035            p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET ? <span class="stringliteral">&quot;0.0.0.0&quot;</span> : <span class="stringliteral">&quot;::&quot;</span>);
<a name="l06036"></a>06036       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;(%s)&quot;</span>, inet_ntoa(bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>));
<a name="l06037"></a>06037     }
<a name="l06038"></a>06038       <span class="keywordflow">else</span>
<a name="l06039"></a>06039     {
<a name="l06040"></a>06040       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>))
<a name="l06041"></a>06041         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (inaccessible)&quot;</span>); 
<a name="l06042"></a>06042       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a>)
<a name="l06043"></a>06043         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (metric %d)&quot;</span>, binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a>);
<a name="l06044"></a>06044       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; from %s&quot;</span>, <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (&amp;binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>));
<a name="l06045"></a>06045       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l06046"></a>06046         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (%s)&quot;</span>, inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>));
<a name="l06047"></a>06047       <span class="keywordflow">else</span>
<a name="l06048"></a>06048         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (%s)&quot;</span>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, buf1, BUFSIZ));
<a name="l06049"></a>06049     }
<a name="l06050"></a>06050       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06051"></a>06051 
<a name="l06052"></a>06052 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l06053"></a>06053 <span class="preprocessor"></span>      <span class="comment">/* display nexthop local */</span>
<a name="l06054"></a>06054       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
<a name="l06055"></a>06055     {
<a name="l06056"></a>06056       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    (%s)%s&quot;</span>,
<a name="l06057"></a>06057            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local,
<a name="l06058"></a>06058                   buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
<a name="l06059"></a>06059            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06060"></a>06060     }
<a name="l06061"></a>06061 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l06062"></a>06062 
<a name="l06063"></a>06063       <span class="comment">/* Line 3 display Origin, Med, Locpref, Weight, valid, Int/Ext/Local, Atomic, best */</span>
<a name="l06064"></a>06064       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Origin %s&quot;</span>, <a class="code" href="bgp__debug_8c.html#a7123f83b15faa017071a458140399e7c">bgp_origin_long_str</a>[attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>]);
<a name="l06065"></a>06065       
<a name="l06066"></a>06066       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l06067"></a>06067     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, metric %d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
<a name="l06068"></a>06068       
<a name="l06069"></a>06069       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l06070"></a>06070     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, localpref %d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
<a name="l06071"></a>06071       <span class="keywordflow">else</span>
<a name="l06072"></a>06072     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, localpref %d&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>);
<a name="l06073"></a>06073 
<a name="l06074"></a>06074       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> != 0)
<a name="l06075"></a>06075     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, weight %d&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>);
<a name="l06076"></a>06076     
<a name="l06077"></a>06077       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l06078"></a>06078     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, valid&quot;</span>);
<a name="l06079"></a>06079 
<a name="l06080"></a>06080       <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> != bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>)
<a name="l06081"></a>06081     {
<a name="l06082"></a>06082       <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>)
<a name="l06083"></a>06083         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, internal&quot;</span>);
<a name="l06084"></a>06084       <span class="keywordflow">else</span> 
<a name="l06085"></a>06085         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, %s&quot;</span>, 
<a name="l06086"></a>06086              (<a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a>(bgp, binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>) ? <span class="stringliteral">&quot;confed-external&quot;</span> : <span class="stringliteral">&quot;external&quot;</span>));
<a name="l06087"></a>06087     }
<a name="l06088"></a>06088       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a643a61537d50b199b001824d82b2e66d">BGP_ROUTE_AGGREGATE</a>)
<a name="l06089"></a>06089     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, aggregated, local&quot;</span>);
<a name="l06090"></a>06090       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> != <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
<a name="l06091"></a>06091     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, sourced&quot;</span>);
<a name="l06092"></a>06092       <span class="keywordflow">else</span>
<a name="l06093"></a>06093     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, sourced, local&quot;</span>);
<a name="l06094"></a>06094 
<a name="l06095"></a>06095       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
<a name="l06096"></a>06096     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, atomic-aggregate&quot;</span>);
<a name="l06097"></a>06097       
<a name="l06098"></a>06098       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l06099"></a>06099     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, best&quot;</span>);
<a name="l06100"></a>06100 
<a name="l06101"></a>06101       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06102"></a>06102       
<a name="l06103"></a>06103       <span class="comment">/* Line 4 display Community */</span>
<a name="l06104"></a>06104       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l06105"></a>06105     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Community: %s%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ab723f1eb3237360a86acf75893985ce8">str</a>,
<a name="l06106"></a>06106          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06107"></a>06107       
<a name="l06108"></a>06108       <span class="comment">/* Line 5 display Extended-community */</span>
<a name="l06109"></a>06109       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>))
<a name="l06110"></a>06110     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Extended Community: %s%s&quot;</span>, 
<a name="l06111"></a>06111              attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06112"></a>06112       
<a name="l06113"></a>06113       <span class="comment">/* Line 6 display Originator, Cluster-id */</span>
<a name="l06114"></a>06114       <span class="keywordflow">if</span> ((attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>)) ||
<a name="l06115"></a>06115       (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>)))
<a name="l06116"></a>06116     {
<a name="l06117"></a>06117       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l06118"></a>06118       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l06119"></a>06119         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Originator: %s&quot;</span>, 
<a name="l06120"></a>06120                  inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>));
<a name="l06121"></a>06121 
<a name="l06122"></a>06122       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>))
<a name="l06123"></a>06123         {
<a name="l06124"></a>06124           <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l06125"></a>06125           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, Cluster list: &quot;</span>);
<a name="l06126"></a>06126           <span class="keywordflow">for</span> (i = 0; i &lt; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> / 4; i++)
<a name="l06127"></a>06127         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, 
<a name="l06128"></a>06128                  inet_ntoa (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>[i]));
<a name="l06129"></a>06129         }
<a name="l06130"></a>06130       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06131"></a>06131     }
<a name="l06132"></a>06132       
<a name="l06133"></a>06133       <span class="comment">/* 7: AS Pathlimit */</span>
<a name="l06134"></a>06134       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>))
<a name="l06135"></a>06135         {
<a name="l06136"></a>06136           
<a name="l06137"></a>06137           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      AS-Pathlimit: %u&quot;</span>,
<a name="l06138"></a>06138                    attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
<a name="l06139"></a>06139           <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
<a name="l06140"></a>06140             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (%u)&quot;</span>, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>);
<a name="l06141"></a>06141           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06142"></a>06142         }
<a name="l06143"></a>06143       
<a name="l06144"></a>06144       <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>)
<a name="l06145"></a>06145     <a class="code" href="bgp__damp_8c.html#a3d56794255e856c30ce24f0adc808221">bgp_damp_info_vty</a> (vty, binfo);
<a name="l06146"></a>06146 
<a name="l06147"></a>06147       <span class="comment">/* Line 7 display Uptime */</span>
<a name="l06148"></a>06148       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Last update: %s&quot;</span>, ctime (&amp;binfo-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a>));
<a name="l06149"></a>06149     }
<a name="l06150"></a>06150   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06151"></a>06151 }  
<a name="l06152"></a>06152 
<a name="l06153"></a>06153 <span class="preprocessor">#define BGP_SHOW_SCODE_HEADER &quot;Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal,%s              r RIB-failure, S Stale, R Removed%s&quot;</span>
<a name="l06154"></a>06154 <span class="preprocessor"></span><span class="preprocessor">#define BGP_SHOW_OCODE_HEADER &quot;Origin codes: i - IGP, e - EGP, ? - incomplete%s%s&quot;</span>
<a name="l06155"></a>06155 <span class="preprocessor"></span><span class="preprocessor">#define BGP_SHOW_HEADER &quot;   Network          Next Hop            Metric LocPrf Weight Path%s&quot;</span>
<a name="l06156"></a>06156 <span class="preprocessor"></span><span class="preprocessor">#define BGP_SHOW_DAMP_HEADER &quot;   Network          From             Reuse    Path%s&quot;</span>
<a name="l06157"></a>06157 <span class="preprocessor"></span><span class="preprocessor">#define BGP_SHOW_FLAP_HEADER &quot;   Network          From            Flaps Duration Reuse    Path%s&quot;</span>
<a name="l06158"></a>06158 <span class="preprocessor"></span>
<a name="l06159"></a>06159 <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a>
<a name="l06160"></a>06160 {
<a name="l06161"></a>06161   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>,
<a name="l06162"></a>06162   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>,
<a name="l06163"></a>06163   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>,
<a name="l06164"></a>06164   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>,
<a name="l06165"></a>06165   bgp_show_type_route_map,
<a name="l06166"></a>06166   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>,
<a name="l06167"></a>06167   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224af5527ed0df465192325b2736120ae158">bgp_show_type_cidr_only</a>,
<a name="l06168"></a>06168   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>,
<a name="l06169"></a>06169   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>,
<a name="l06170"></a>06170   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad8437fdb3062b2b91e286da9c08e450b">bgp_show_type_community</a>,
<a name="l06171"></a>06171   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ac94e62cabbbff323965c5b03e3dc95bc">bgp_show_type_community_exact</a>,
<a name="l06172"></a>06172   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a3a0f3c2a33d58490f67f74ba8ca3d4c7">bgp_show_type_community_list</a>,
<a name="l06173"></a>06173   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad96b9b7d195891fcfa7f1fcd78c2f0ab">bgp_show_type_community_list_exact</a>,
<a name="l06174"></a>06174   bgp_show_type_flap_statistics,
<a name="l06175"></a>06175   bgp_show_type_flap_address,
<a name="l06176"></a>06176   bgp_show_type_flap_prefix,
<a name="l06177"></a>06177   bgp_show_type_flap_cidr_only,
<a name="l06178"></a>06178   bgp_show_type_flap_regexp,
<a name="l06179"></a>06179   bgp_show_type_flap_filter_list,
<a name="l06180"></a>06180   bgp_show_type_flap_prefix_list,
<a name="l06181"></a>06181   bgp_show_type_flap_prefix_longer,
<a name="l06182"></a>06182   bgp_show_type_flap_route_map,
<a name="l06183"></a>06183   bgp_show_type_flap_neighbor,
<a name="l06184"></a>06184   bgp_show_type_dampend_paths,
<a name="l06185"></a>06185   bgp_show_type_damp_neighbor
<a name="l06186"></a>06186 };
<a name="l06187"></a>06187 
<a name="l06188"></a>06188 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l06189"></a>06189 bgp_show_table (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *table, <span class="keyword">struct</span> in_addr *router_id,
<a name="l06190"></a>06190       <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type, <span class="keywordtype">void</span> *output_arg)
<a name="l06191"></a>06191 {
<a name="l06192"></a>06192   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l06193"></a>06193   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l06194"></a>06194   <span class="keywordtype">int</span> header = 1;
<a name="l06195"></a>06195   <span class="keywordtype">int</span> display;
<a name="l06196"></a>06196   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> output_count;
<a name="l06197"></a>06197 
<a name="l06198"></a>06198   <span class="comment">/* This is first entry point, so reset total line. */</span>
<a name="l06199"></a>06199   output_count = 0;
<a name="l06200"></a>06200 
<a name="l06201"></a>06201   <span class="comment">/* Start processing of routes. */</span>
<a name="l06202"></a>06202   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn)) 
<a name="l06203"></a>06203     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06204"></a>06204       {
<a name="l06205"></a>06205     display = 0;
<a name="l06206"></a>06206 
<a name="l06207"></a>06207     <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l06208"></a>06208       {
<a name="l06209"></a>06209         <span class="keywordflow">if</span> (type == bgp_show_type_flap_statistics
<a name="l06210"></a>06210         || type == bgp_show_type_flap_address
<a name="l06211"></a>06211         || type == bgp_show_type_flap_prefix
<a name="l06212"></a>06212         || type == bgp_show_type_flap_cidr_only
<a name="l06213"></a>06213         || type == bgp_show_type_flap_regexp
<a name="l06214"></a>06214         || type == bgp_show_type_flap_filter_list
<a name="l06215"></a>06215         || type == bgp_show_type_flap_prefix_list
<a name="l06216"></a>06216         || type == bgp_show_type_flap_prefix_longer
<a name="l06217"></a>06217         || type == bgp_show_type_flap_route_map
<a name="l06218"></a>06218         || type == bgp_show_type_flap_neighbor
<a name="l06219"></a>06219         || type == bgp_show_type_dampend_paths
<a name="l06220"></a>06220         || type == bgp_show_type_damp_neighbor)
<a name="l06221"></a>06221           {
<a name="l06222"></a>06222         <span class="keywordflow">if</span> (!(ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>))
<a name="l06223"></a>06223           <span class="keywordflow">continue</span>;
<a name="l06224"></a>06224           }
<a name="l06225"></a>06225         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>
<a name="l06226"></a>06226         || type == bgp_show_type_flap_regexp)
<a name="l06227"></a>06227           {
<a name="l06228"></a>06228         <a class="code" href="structre__pattern__buffer.html">regex_t</a> *regex = output_arg;
<a name="l06229"></a>06229             
<a name="l06230"></a>06230         <span class="keywordflow">if</span> (<a class="code" href="bgp__regex_8c.html#a3f1a23affd7b4f99ad3f000b069801dc">bgp_regexec</a> (regex, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) == <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea4cc3b232a9ce92df5523d8c464c7beb2">REG_NOMATCH</a>)
<a name="l06231"></a>06231           <span class="keywordflow">continue</span>;
<a name="l06232"></a>06232           }
<a name="l06233"></a>06233         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>
<a name="l06234"></a>06234         || type == bgp_show_type_flap_prefix_list)
<a name="l06235"></a>06235           {
<a name="l06236"></a>06236         <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist = output_arg;
<a name="l06237"></a>06237             
<a name="l06238"></a>06238         <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>) != <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a>)
<a name="l06239"></a>06239           <span class="keywordflow">continue</span>;
<a name="l06240"></a>06240           }
<a name="l06241"></a>06241         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>
<a name="l06242"></a>06242         || type == bgp_show_type_flap_filter_list)
<a name="l06243"></a>06243           {
<a name="l06244"></a>06244         <span class="keyword">struct </span><a class="code" href="structas__list.html">as_list</a> *<a class="code" href="structas__list.html">as_list</a> = output_arg;
<a name="l06245"></a>06245 
<a name="l06246"></a>06246         <span class="keywordflow">if</span> (<a class="code" href="bgp__filter_8c.html#a3c54cce31fdf945adf395324469658c5">as_list_apply</a> (as_list, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>) != <a class="code" href="bgp__filter_8h.html#a2e45819ce90a8f1b29bad627c87bef8baf0fc89100dd762e2e8d721501d5d0a62">AS_FILTER_PERMIT</a>)
<a name="l06247"></a>06247           <span class="keywordflow">continue</span>;
<a name="l06248"></a>06248           }
<a name="l06249"></a>06249         <span class="keywordflow">if</span> (type == bgp_show_type_route_map
<a name="l06250"></a>06250         || type == bgp_show_type_flap_route_map)
<a name="l06251"></a>06251           {
<a name="l06252"></a>06252         <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *<a class="code" href="structrmap.html">rmap</a> = output_arg;
<a name="l06253"></a>06253         <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> binfo;
<a name="l06254"></a>06254         <span class="keyword">struct </span>attr dummy_attr = { 0 }; 
<a name="l06255"></a>06255         <span class="keywordtype">int</span> ret;
<a name="l06256"></a>06256 
<a name="l06257"></a>06257         <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (&amp;dummy_attr, ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l06258"></a>06258         binfo.<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> = ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l06259"></a>06259         binfo.<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> = &amp;dummy_attr;
<a name="l06260"></a>06260 
<a name="l06261"></a>06261         ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (rmap, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370adcb3bc0f6448923a387dfe3658ca7bda">RMAP_BGP</a>, &amp;binfo);
<a name="l06262"></a>06262         
<a name="l06263"></a>06263         <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;dummy_attr);
<a name="l06264"></a>06264         
<a name="l06265"></a>06265         <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l06266"></a>06266           <span class="keywordflow">continue</span>;
<a name="l06267"></a>06267           }
<a name="l06268"></a>06268         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>
<a name="l06269"></a>06269         || type == bgp_show_type_flap_neighbor
<a name="l06270"></a>06270         || type == bgp_show_type_damp_neighbor)
<a name="l06271"></a>06271           {
<a name="l06272"></a>06272         <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su = output_arg;
<a name="l06273"></a>06273 
<a name="l06274"></a>06274         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || ! <a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a>(ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>, su))
<a name="l06275"></a>06275           <span class="keywordflow">continue</span>;
<a name="l06276"></a>06276           }
<a name="l06277"></a>06277         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224af5527ed0df465192325b2736120ae158">bgp_show_type_cidr_only</a>
<a name="l06278"></a>06278         || type == bgp_show_type_flap_cidr_only)
<a name="l06279"></a>06279           {
<a name="l06280"></a>06280         u_int32_t destination;
<a name="l06281"></a>06281 
<a name="l06282"></a>06282         destination = ntohl (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr);
<a name="l06283"></a>06283         <span class="keywordflow">if</span> (IN_CLASSC (destination) &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 24)
<a name="l06284"></a>06284           <span class="keywordflow">continue</span>;
<a name="l06285"></a>06285         <span class="keywordflow">if</span> (IN_CLASSB (destination) &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 16)
<a name="l06286"></a>06286           <span class="keywordflow">continue</span>;
<a name="l06287"></a>06287         <span class="keywordflow">if</span> (IN_CLASSA (destination) &amp;&amp; rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 8)
<a name="l06288"></a>06288           <span class="keywordflow">continue</span>;
<a name="l06289"></a>06289           }
<a name="l06290"></a>06290         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>
<a name="l06291"></a>06291         || type == bgp_show_type_flap_prefix_longer)
<a name="l06292"></a>06292           {
<a name="l06293"></a>06293         <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *p = output_arg;
<a name="l06294"></a>06294 
<a name="l06295"></a>06295         <span class="keywordflow">if</span> (! <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (p, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>))
<a name="l06296"></a>06296           <span class="keywordflow">continue</span>;
<a name="l06297"></a>06297           }
<a name="l06298"></a>06298         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>)
<a name="l06299"></a>06299           {
<a name="l06300"></a>06300         <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l06301"></a>06301           <span class="keywordflow">continue</span>;
<a name="l06302"></a>06302           }
<a name="l06303"></a>06303         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad8437fdb3062b2b91e286da9c08e450b">bgp_show_type_community</a>)
<a name="l06304"></a>06304           {
<a name="l06305"></a>06305         <span class="keyword">struct </span>community *com = output_arg;
<a name="l06306"></a>06306 
<a name="l06307"></a>06307         <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> ||
<a name="l06308"></a>06308             ! <a class="code" href="bgp__community_8c.html#a7f39155b89b53a2e34d555ad2912692e">community_match</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, com))
<a name="l06309"></a>06309           <span class="keywordflow">continue</span>;
<a name="l06310"></a>06310           }
<a name="l06311"></a>06311         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ac94e62cabbbff323965c5b03e3dc95bc">bgp_show_type_community_exact</a>)
<a name="l06312"></a>06312           {
<a name="l06313"></a>06313         <span class="keyword">struct </span>community *com = output_arg;
<a name="l06314"></a>06314 
<a name="l06315"></a>06315         <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> ||
<a name="l06316"></a>06316             ! <a class="code" href="bgp__community_8c.html#ab78dd69e6f3b202f3ab726654ea54193">community_cmp</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, com))
<a name="l06317"></a>06317           <span class="keywordflow">continue</span>;
<a name="l06318"></a>06318           }
<a name="l06319"></a>06319         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a3a0f3c2a33d58490f67f74ba8ca3d4c7">bgp_show_type_community_list</a>)
<a name="l06320"></a>06320           {
<a name="l06321"></a>06321         <span class="keyword">struct </span><a class="code" href="structcommunity__list.html">community_list</a> *<a class="code" href="structlist.html">list</a> = output_arg;
<a name="l06322"></a>06322 
<a name="l06323"></a>06323         <span class="keywordflow">if</span> (! <a class="code" href="bgp__clist_8c.html#a12f4fa6dfed00f5e25a73b79368151fd">community_list_match</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, list))
<a name="l06324"></a>06324           <span class="keywordflow">continue</span>;
<a name="l06325"></a>06325           }
<a name="l06326"></a>06326         <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad96b9b7d195891fcfa7f1fcd78c2f0ab">bgp_show_type_community_list_exact</a>)
<a name="l06327"></a>06327           {
<a name="l06328"></a>06328         <span class="keyword">struct </span><a class="code" href="structcommunity__list.html">community_list</a> *list = output_arg;
<a name="l06329"></a>06329 
<a name="l06330"></a>06330         <span class="keywordflow">if</span> (! <a class="code" href="bgp__clist_8c.html#a9c54ba0c7f95697b7a6ce9e0eafa6db3">community_list_exact_match</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, list))
<a name="l06331"></a>06331           <span class="keywordflow">continue</span>;
<a name="l06332"></a>06332           }
<a name="l06333"></a>06333         <span class="keywordflow">if</span> (type == bgp_show_type_flap_address
<a name="l06334"></a>06334         || type == bgp_show_type_flap_prefix)
<a name="l06335"></a>06335           {
<a name="l06336"></a>06336         <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *p = output_arg;
<a name="l06337"></a>06337 
<a name="l06338"></a>06338         <span class="keywordflow">if</span> (! <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, p))
<a name="l06339"></a>06339           <span class="keywordflow">continue</span>;
<a name="l06340"></a>06340 
<a name="l06341"></a>06341         <span class="keywordflow">if</span> (type == bgp_show_type_flap_prefix)
<a name="l06342"></a>06342           <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l06343"></a>06343             <span class="keywordflow">continue</span>;
<a name="l06344"></a>06344           }
<a name="l06345"></a>06345         <span class="keywordflow">if</span> (type == bgp_show_type_dampend_paths
<a name="l06346"></a>06346         || type == bgp_show_type_damp_neighbor)
<a name="l06347"></a>06347           {
<a name="l06348"></a>06348         <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>)
<a name="l06349"></a>06349             || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l06350"></a>06350           <span class="keywordflow">continue</span>;
<a name="l06351"></a>06351           }
<a name="l06352"></a>06352 
<a name="l06353"></a>06353         <span class="keywordflow">if</span> (header)
<a name="l06354"></a>06354           {
<a name="l06355"></a>06355         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP table version is 0, local router ID is %s%s&quot;</span>, inet_ntoa (*router_id), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06356"></a>06356         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_SCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06357"></a>06357         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_OCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06358"></a>06358         <span class="keywordflow">if</span> (type == bgp_show_type_dampend_paths
<a name="l06359"></a>06359             || type == bgp_show_type_damp_neighbor)
<a name="l06360"></a>06360           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_DAMP_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06361"></a>06361         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == bgp_show_type_flap_statistics
<a name="l06362"></a>06362              || type == bgp_show_type_flap_address
<a name="l06363"></a>06363              || type == bgp_show_type_flap_prefix
<a name="l06364"></a>06364              || type == bgp_show_type_flap_cidr_only
<a name="l06365"></a>06365              || type == bgp_show_type_flap_regexp
<a name="l06366"></a>06366              || type == bgp_show_type_flap_filter_list
<a name="l06367"></a>06367              || type == bgp_show_type_flap_prefix_list
<a name="l06368"></a>06368              || type == bgp_show_type_flap_prefix_longer
<a name="l06369"></a>06369              || type == bgp_show_type_flap_route_map
<a name="l06370"></a>06370              || type == bgp_show_type_flap_neighbor)
<a name="l06371"></a>06371           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_FLAP_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06372"></a>06372         <span class="keywordflow">else</span>
<a name="l06373"></a>06373           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06374"></a>06374         header = 0;
<a name="l06375"></a>06375           }
<a name="l06376"></a>06376 
<a name="l06377"></a>06377         <span class="keywordflow">if</span> (type == bgp_show_type_dampend_paths
<a name="l06378"></a>06378         || type == bgp_show_type_damp_neighbor)
<a name="l06379"></a>06379           damp_route_vty_out (vty, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, display, SAFI_UNICAST);
<a name="l06380"></a>06380         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == bgp_show_type_flap_statistics
<a name="l06381"></a>06381              || type == bgp_show_type_flap_address
<a name="l06382"></a>06382              || type == bgp_show_type_flap_prefix
<a name="l06383"></a>06383              || type == bgp_show_type_flap_cidr_only
<a name="l06384"></a>06384              || type == bgp_show_type_flap_regexp
<a name="l06385"></a>06385              || type == bgp_show_type_flap_filter_list
<a name="l06386"></a>06386              || type == bgp_show_type_flap_prefix_list
<a name="l06387"></a>06387              || type == bgp_show_type_flap_prefix_longer
<a name="l06388"></a>06388              || type == bgp_show_type_flap_route_map
<a name="l06389"></a>06389              || type == bgp_show_type_flap_neighbor)
<a name="l06390"></a>06390           flap_route_vty_out (vty, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, display, SAFI_UNICAST);
<a name="l06391"></a>06391         <span class="keywordflow">else</span>
<a name="l06392"></a>06392           <a class="code" href="bgp__route_8h.html#a9c8ca3acfad463c61259edab3afd7220">route_vty_out</a> (vty, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, display, SAFI_UNICAST);
<a name="l06393"></a>06393         display++;
<a name="l06394"></a>06394       }
<a name="l06395"></a>06395     <span class="keywordflow">if</span> (display)
<a name="l06396"></a>06396       output_count++;
<a name="l06397"></a>06397       }
<a name="l06398"></a>06398 
<a name="l06399"></a>06399   <span class="comment">/* No route is displayed */</span>
<a name="l06400"></a>06400   <span class="keywordflow">if</span> (output_count == 0)
<a name="l06401"></a>06401     {
<a name="l06402"></a>06402       <span class="keywordflow">if</span> (type == <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>)
<a name="l06403"></a>06403     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP network exists%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06404"></a>06404     }
<a name="l06405"></a>06405   <span class="keywordflow">else</span>
<a name="l06406"></a>06406     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%sTotal number of prefixes %ld%s&quot;</span>,
<a name="l06407"></a>06407          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, output_count, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06408"></a>06408 
<a name="l06409"></a>06409   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l06410"></a>06410 }
<a name="l06411"></a>06411 
<a name="l06412"></a>06412 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l06413"></a>06413 bgp_show (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l06414"></a>06414          <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type, <span class="keywordtype">void</span> *output_arg)
<a name="l06415"></a>06415 {
<a name="l06416"></a>06416   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l06417"></a>06417 
<a name="l06418"></a>06418   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) {
<a name="l06419"></a>06419     bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l06420"></a>06420   }
<a name="l06421"></a>06421 
<a name="l06422"></a>06422   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06423"></a>06423     {
<a name="l06424"></a>06424       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06425"></a>06425       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06426"></a>06426     }
<a name="l06427"></a>06427 
<a name="l06428"></a>06428 
<a name="l06429"></a>06429   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>];
<a name="l06430"></a>06430 
<a name="l06431"></a>06431   <span class="keywordflow">return</span> bgp_show_table (vty, table, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, type, output_arg);
<a name="l06432"></a>06432 }
<a name="l06433"></a>06433 
<a name="l06434"></a>06434 <span class="comment">/* Header of detailed BGP route information */</span>
<a name="l06435"></a>06435 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l06436"></a>06436 route_vty_out_detail_header (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp,
<a name="l06437"></a>06437                  <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn,
<a name="l06438"></a>06438                              <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l06439"></a>06439 {
<a name="l06440"></a>06440   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l06441"></a>06441   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l06442"></a>06442   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l06443"></a>06443   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l06444"></a>06444   <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l06445"></a>06445   <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l06446"></a>06446   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a> = 0;
<a name="l06447"></a>06447   <span class="keywordtype">int</span> best = 0;
<a name="l06448"></a>06448   <span class="keywordtype">int</span> suppress = 0;
<a name="l06449"></a>06449   <span class="keywordtype">int</span> no_export = 0;
<a name="l06450"></a>06450   <span class="keywordtype">int</span> no_advertise = 0;
<a name="l06451"></a>06451   <span class="keywordtype">int</span> local_as = 0;
<a name="l06452"></a>06452   <span class="keywordtype">int</span> first = 0;
<a name="l06453"></a>06453 
<a name="l06454"></a>06454   p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l06455"></a>06455   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP routing table entry for %s%s%s/%d%s&quot;</span>,
<a name="l06456"></a>06456        (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a> ?
<a name="l06457"></a>06457        <a class="code" href="bgp__mplsvpn_8c.html#a806cd220250d519b75ac7f78cd091bcc">prefix_rd2str</a> (prd, buf1, <a class="code" href="bgp__mplsvpn_8h.html#ac391784ff6cdf85be545665a90194a14">RD_ADDRSTRLEN</a>) : <span class="stringliteral">&quot;&quot;</span>),
<a name="l06458"></a>06458        safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a> ? <span class="stringliteral">&quot;:&quot;</span> : <span class="stringliteral">&quot;&quot;</span>,
<a name="l06459"></a>06459        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf2, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
<a name="l06460"></a>06460        p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06461"></a>06461 
<a name="l06462"></a>06462   <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l06463"></a>06463     {
<a name="l06464"></a>06464       count++;
<a name="l06465"></a>06465       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a43b3eb776824e6b86970e3886120913e">BGP_INFO_SELECTED</a>))
<a name="l06466"></a>06466     {
<a name="l06467"></a>06467       best = <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l06468"></a>06468       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a2ce49edfd26233ffebc24dc616d04835">suppress</a>)
<a name="l06469"></a>06469         suppress = 1;
<a name="l06470"></a>06470       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06471"></a>06471         {
<a name="l06472"></a>06472           <span class="keywordflow">if</span> (<a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#ad48733d7ee618f0eb7371ca7300af9fc">COMMUNITY_NO_ADVERTISE</a>))
<a name="l06473"></a>06473         no_advertise = 1;
<a name="l06474"></a>06474           <span class="keywordflow">if</span> (<a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#a219dabc199faf8a9c3d75d8cccd2aa04">COMMUNITY_NO_EXPORT</a>))
<a name="l06475"></a>06475         no_export = 1;
<a name="l06476"></a>06476           <span class="keywordflow">if</span> (<a class="code" href="bgp__community_8c.html#a0191e40f098590ab68b99a24c2a2e931">community_include</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>, <a class="code" href="bgp__community_8h.html#acacc3f9ae32baf1130b9cd46f1c7bf90">COMMUNITY_LOCAL_AS</a>))
<a name="l06477"></a>06477         local_as = 1;
<a name="l06478"></a>06478         }
<a name="l06479"></a>06479     }
<a name="l06480"></a>06480     }
<a name="l06481"></a>06481 
<a name="l06482"></a>06482   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Paths: (%d available&quot;</span>, count);
<a name="l06483"></a>06483   <span class="keywordflow">if</span> (best)
<a name="l06484"></a>06484     {
<a name="l06485"></a>06485       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, best #%d&quot;</span>, best);
<a name="l06486"></a>06486       <span class="keywordflow">if</span> (safi == SAFI_UNICAST)
<a name="l06487"></a>06487     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, table Default-IP-Routing-Table&quot;</span>);
<a name="l06488"></a>06488     }
<a name="l06489"></a>06489   <span class="keywordflow">else</span>
<a name="l06490"></a>06490     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, no best path&quot;</span>);
<a name="l06491"></a>06491   <span class="keywordflow">if</span> (no_advertise)
<a name="l06492"></a>06492     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, not advertised to any peer&quot;</span>);
<a name="l06493"></a>06493   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (no_export)
<a name="l06494"></a>06494     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, not advertised to EBGP peer&quot;</span>);
<a name="l06495"></a>06495   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (local_as)
<a name="l06496"></a>06496     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, not advertised outside local AS&quot;</span>);
<a name="l06497"></a>06497   <span class="keywordflow">if</span> (suppress)
<a name="l06498"></a>06498     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, Advertisements suppressed by an aggregate.&quot;</span>);
<a name="l06499"></a>06499   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;)%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06500"></a>06500 
<a name="l06501"></a>06501   <span class="comment">/* advertised peer */</span>
<a name="l06502"></a>06502   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l06503"></a>06503     {
<a name="l06504"></a>06504       <span class="keywordflow">if</span> (<a class="code" href="bgp__advertise_8c.html#aebf800b9e88b48d79843ec71e900996e">bgp_adj_out_lookup</a> (peer, p, afi, safi, rn))
<a name="l06505"></a>06505     {
<a name="l06506"></a>06506       <span class="keywordflow">if</span> (! first)
<a name="l06507"></a>06507         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Advertised to non peer-group peers:%s &quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06508"></a>06508       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %s&quot;</span>, <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, buf1, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>));
<a name="l06509"></a>06509       first = 1;
<a name="l06510"></a>06510     }
<a name="l06511"></a>06511     }
<a name="l06512"></a>06512   <span class="keywordflow">if</span> (! first)
<a name="l06513"></a>06513     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Not advertised to any peer&quot;</span>);
<a name="l06514"></a>06514   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06515"></a>06515 }
<a name="l06516"></a>06516 
<a name="l06517"></a>06517 <span class="comment">/* Display specified route of BGP table. */</span>
<a name="l06518"></a>06518 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l06519"></a>06519 bgp_show_route_in_table (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp, 
<a name="l06520"></a>06520                          <span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="structrib.html">rib</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str,
<a name="l06521"></a>06521                          <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd,
<a name="l06522"></a>06522                          <span class="keywordtype">int</span> prefix_check)
<a name="l06523"></a>06523 {
<a name="l06524"></a>06524   <span class="keywordtype">int</span> ret;
<a name="l06525"></a>06525   <span class="keywordtype">int</span> header;
<a name="l06526"></a>06526   <span class="keywordtype">int</span> display = 0;
<a name="l06527"></a>06527   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> match;
<a name="l06528"></a>06528   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l06529"></a>06529   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rm;
<a name="l06530"></a>06530   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l06531"></a>06531   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l06532"></a>06532 
<a name="l06533"></a>06533   <span class="comment">/* Check IP address argument. */</span>
<a name="l06534"></a>06534   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;match);
<a name="l06535"></a>06535   <span class="keywordflow">if</span> (! ret)
<a name="l06536"></a>06536     {
<a name="l06537"></a>06537       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;address is malformed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06538"></a>06538       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06539"></a>06539     }
<a name="l06540"></a>06540 
<a name="l06541"></a>06541   match.family = <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (afi);
<a name="l06542"></a>06542 
<a name="l06543"></a>06543   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l06544"></a>06544     {
<a name="l06545"></a>06545       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (rib); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l06546"></a>06546         {
<a name="l06547"></a>06547           <span class="keywordflow">if</span> (prd &amp;&amp; <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#aff8f7c555d44bdcf53f9e09d3a2d2e68">val</a>, prd-&gt;val, 8) != 0)
<a name="l06548"></a>06548             <span class="keywordflow">continue</span>;
<a name="l06549"></a>06549 
<a name="l06550"></a>06550           <span class="keywordflow">if</span> ((table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06551"></a>06551             {
<a name="l06552"></a>06552               header = 1;
<a name="l06553"></a>06553 
<a name="l06554"></a>06554               <span class="keywordflow">if</span> ((rm = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (table, &amp;match)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06555"></a>06555                 {
<a name="l06556"></a>06556                   <span class="keywordflow">if</span> (prefix_check &amp;&amp; rm-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != match.prefixlen)
<a name="l06557"></a>06557                     <span class="keywordflow">continue</span>;
<a name="l06558"></a>06558 
<a name="l06559"></a>06559                   <span class="keywordflow">for</span> (ri = rm-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l06560"></a>06560                     {
<a name="l06561"></a>06561                       <span class="keywordflow">if</span> (header)
<a name="l06562"></a>06562                         {
<a name="l06563"></a>06563                           route_vty_out_detail_header (vty, bgp, rm, (<span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *)&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>,
<a name="l06564"></a>06564                                                        <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>);
<a name="l06565"></a>06565 
<a name="l06566"></a>06566                           header = 0;
<a name="l06567"></a>06567                         }
<a name="l06568"></a>06568                       display++;
<a name="l06569"></a>06569                       route_vty_out_detail (vty, bgp, &amp;rm-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>);
<a name="l06570"></a>06570                     }
<a name="l06571"></a>06571                 }
<a name="l06572"></a>06572             }
<a name="l06573"></a>06573         }
<a name="l06574"></a>06574     }
<a name="l06575"></a>06575   <span class="keywordflow">else</span>
<a name="l06576"></a>06576     {
<a name="l06577"></a>06577       header = 1;
<a name="l06578"></a>06578 
<a name="l06579"></a>06579       <span class="keywordflow">if</span> ((rn = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (rib, &amp;match)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06580"></a>06580         {
<a name="l06581"></a>06581           <span class="keywordflow">if</span> (! prefix_check || rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == match.prefixlen)
<a name="l06582"></a>06582             {
<a name="l06583"></a>06583               <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l06584"></a>06584                 {
<a name="l06585"></a>06585                   <span class="keywordflow">if</span> (header)
<a name="l06586"></a>06586                     {
<a name="l06587"></a>06587                       route_vty_out_detail_header (vty, bgp, rn, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi);
<a name="l06588"></a>06588                       header = 0;
<a name="l06589"></a>06589                     }
<a name="l06590"></a>06590                   display++;
<a name="l06591"></a>06591                   route_vty_out_detail (vty, bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ri, afi, safi);
<a name="l06592"></a>06592                 }
<a name="l06593"></a>06593             }
<a name="l06594"></a>06594         }
<a name="l06595"></a>06595     }
<a name="l06596"></a>06596 
<a name="l06597"></a>06597   <span class="keywordflow">if</span> (! display)
<a name="l06598"></a>06598     {
<a name="l06599"></a>06599       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Network not in table%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06600"></a>06600       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06601"></a>06601     }
<a name="l06602"></a>06602 
<a name="l06603"></a>06603   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l06604"></a>06604 }
<a name="l06605"></a>06605 
<a name="l06606"></a>06606 <span class="comment">/* Display specified route of Main RIB */</span>
<a name="l06607"></a>06607 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l06608"></a>06608 bgp_show_route (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *view_name, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str,
<a name="l06609"></a>06609         <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd,
<a name="l06610"></a>06610         <span class="keywordtype">int</span> prefix_check)
<a name="l06611"></a>06611 {
<a name="l06612"></a>06612   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l06613"></a>06613 
<a name="l06614"></a>06614   <span class="comment">/* BGP structure lookup. */</span>
<a name="l06615"></a>06615   <span class="keywordflow">if</span> (view_name)
<a name="l06616"></a>06616     {
<a name="l06617"></a>06617       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (view_name);
<a name="l06618"></a>06618       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06619"></a>06619     {
<a name="l06620"></a>06620       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, view_name, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06621"></a>06621       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06622"></a>06622     }
<a name="l06623"></a>06623     }
<a name="l06624"></a>06624   <span class="keywordflow">else</span>
<a name="l06625"></a>06625     {
<a name="l06626"></a>06626       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l06627"></a>06627       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06628"></a>06628     {
<a name="l06629"></a>06629       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06630"></a>06630       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06631"></a>06631     }
<a name="l06632"></a>06632     }
<a name="l06633"></a>06633  
<a name="l06634"></a>06634   <span class="keywordflow">return</span> bgp_show_route_in_table (vty, bgp, bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], ip_str, 
<a name="l06635"></a>06635                                    afi, safi, prd, prefix_check);
<a name="l06636"></a>06636 }
<a name="l06637"></a>06637 
<a name="l06638"></a>06638 <span class="comment">/* BGP route print out function. */</span>
<a name="l06639"></a>06639 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp,
<a name="l06640"></a>06640        show_ip_bgp_cmd,
<a name="l06641"></a>06641        <span class="stringliteral">&quot;show ip bgp&quot;</span>,
<a name="l06642"></a>06642        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06643"></a>06643        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06644"></a>06644        BGP_STR)
<a name="l06645"></a>06645 {
<a name="l06646"></a>06646   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06647"></a>06647 }
<a name="l06648"></a>06648 
<a name="l06649"></a>06649 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4,
<a name="l06650"></a>06650        show_ip_bgp_ipv4_cmd,
<a name="l06651"></a>06651        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast)&quot;</span>,
<a name="l06652"></a>06652        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06653"></a>06653        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06654"></a>06654        BGP_STR
<a name="l06655"></a>06655        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06656"></a>06656        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l06657"></a>06657        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>)
<a name="l06658"></a>06658 {
<a name="l06659"></a>06659   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l06660"></a>06660     <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>,
<a name="l06661"></a>06661                      <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06662"></a>06662  
<a name="l06663"></a>06663   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06664"></a>06664 }
<a name="l06665"></a>06665 
<a name="l06666"></a>06666 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_route,
<a name="l06667"></a>06667        show_ip_bgp_route_cmd,
<a name="l06668"></a>06668        <span class="stringliteral">&quot;show ip bgp A.B.C.D&quot;</span>,
<a name="l06669"></a>06669        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06670"></a>06670        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06671"></a>06671        BGP_STR
<a name="l06672"></a>06672        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06673"></a>06673 {
<a name="l06674"></a>06674   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06675"></a>06675 }
<a name="l06676"></a>06676 
<a name="l06677"></a>06677 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_route,
<a name="l06678"></a>06678        show_ip_bgp_ipv4_route_cmd,
<a name="l06679"></a>06679        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) A.B.C.D&quot;</span>,
<a name="l06680"></a>06680        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06681"></a>06681        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06682"></a>06682        BGP_STR
<a name="l06683"></a>06683        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06684"></a>06684        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l06685"></a>06685        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l06686"></a>06686        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06687"></a>06687 {
<a name="l06688"></a>06688   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l06689"></a>06689     <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06690"></a>06690 
<a name="l06691"></a>06691   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06692"></a>06692 }
<a name="l06693"></a>06693 
<a name="l06694"></a>06694 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_vpnv4_all_route,
<a name="l06695"></a>06695        show_ip_bgp_vpnv4_all_route_cmd,
<a name="l06696"></a>06696        <span class="stringliteral">&quot;show ip bgp vpnv4 all A.B.C.D&quot;</span>,
<a name="l06697"></a>06697        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06698"></a>06698        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06699"></a>06699        BGP_STR
<a name="l06700"></a>06700        <span class="stringliteral">&quot;Display VPNv4 NLRI specific information\n&quot;</span>
<a name="l06701"></a>06701        <span class="stringliteral">&quot;Display information about all VPNv4 NLRIs\n&quot;</span>
<a name="l06702"></a>06702        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06703"></a>06703 {
<a name="l06704"></a>06704   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06705"></a>06705 }
<a name="l06706"></a>06706 
<a name="l06707"></a>06707 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_vpnv4_rd_route,
<a name="l06708"></a>06708        show_ip_bgp_vpnv4_rd_route_cmd,
<a name="l06709"></a>06709        <span class="stringliteral">&quot;show ip bgp vpnv4 rd ASN:nn_or_IP-address:nn A.B.C.D&quot;</span>,
<a name="l06710"></a>06710        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06711"></a>06711        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06712"></a>06712        BGP_STR
<a name="l06713"></a>06713        <span class="stringliteral">&quot;Display VPNv4 NLRI specific information\n&quot;</span>
<a name="l06714"></a>06714        <span class="stringliteral">&quot;Display information for a route distinguisher\n&quot;</span>
<a name="l06715"></a>06715        <span class="stringliteral">&quot;VPN Route Distinguisher\n&quot;</span>
<a name="l06716"></a>06716        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06717"></a>06717 {
<a name="l06718"></a>06718   <span class="keywordtype">int</span> ret;
<a name="l06719"></a>06719   <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> prd;
<a name="l06720"></a>06720 
<a name="l06721"></a>06721   ret = <a class="code" href="bgp__mplsvpn_8c.html#a296cfbde78d5b77bb55f852b2e1cabdd">str2prefix_rd</a> (argv[0], &amp;prd);
<a name="l06722"></a>06722   <span class="keywordflow">if</span> (! ret)
<a name="l06723"></a>06723     {
<a name="l06724"></a>06724       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed Route Distinguisher%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06725"></a>06725       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06726"></a>06726     }
<a name="l06727"></a>06727   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>, &amp;prd, 0);
<a name="l06728"></a>06728 }
<a name="l06729"></a>06729 
<a name="l06730"></a>06730 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_prefix,
<a name="l06731"></a>06731        show_ip_bgp_prefix_cmd,
<a name="l06732"></a>06732        <span class="stringliteral">&quot;show ip bgp A.B.C.D/M&quot;</span>,
<a name="l06733"></a>06733        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06734"></a>06734        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06735"></a>06735        BGP_STR
<a name="l06736"></a>06736        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l06737"></a>06737 {
<a name="l06738"></a>06738   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06739"></a>06739 }
<a name="l06740"></a>06740 
<a name="l06741"></a>06741 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_prefix,
<a name="l06742"></a>06742        show_ip_bgp_ipv4_prefix_cmd,
<a name="l06743"></a>06743        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) A.B.C.D/M&quot;</span>,
<a name="l06744"></a>06744        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06745"></a>06745        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06746"></a>06746        BGP_STR
<a name="l06747"></a>06747        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06748"></a>06748        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l06749"></a>06749        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l06750"></a>06750        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l06751"></a>06751 {
<a name="l06752"></a>06752   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l06753"></a>06753     <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06754"></a>06754 
<a name="l06755"></a>06755   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06756"></a>06756 }
<a name="l06757"></a>06757 
<a name="l06758"></a>06758 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_vpnv4_all_prefix,
<a name="l06759"></a>06759        show_ip_bgp_vpnv4_all_prefix_cmd,
<a name="l06760"></a>06760        <span class="stringliteral">&quot;show ip bgp vpnv4 all A.B.C.D/M&quot;</span>,
<a name="l06761"></a>06761        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06762"></a>06762        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06763"></a>06763        BGP_STR
<a name="l06764"></a>06764        <span class="stringliteral">&quot;Display VPNv4 NLRI specific information\n&quot;</span>
<a name="l06765"></a>06765        <span class="stringliteral">&quot;Display information about all VPNv4 NLRIs\n&quot;</span>
<a name="l06766"></a>06766        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l06767"></a>06767 {
<a name="l06768"></a>06768   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06769"></a>06769 }
<a name="l06770"></a>06770 
<a name="l06771"></a>06771 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_vpnv4_rd_prefix,
<a name="l06772"></a>06772        show_ip_bgp_vpnv4_rd_prefix_cmd,
<a name="l06773"></a>06773        <span class="stringliteral">&quot;show ip bgp vpnv4 rd ASN:nn_or_IP-address:nn A.B.C.D/M&quot;</span>,
<a name="l06774"></a>06774        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06775"></a>06775        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06776"></a>06776        BGP_STR
<a name="l06777"></a>06777        <span class="stringliteral">&quot;Display VPNv4 NLRI specific information\n&quot;</span>
<a name="l06778"></a>06778        <span class="stringliteral">&quot;Display information for a route distinguisher\n&quot;</span>
<a name="l06779"></a>06779        <span class="stringliteral">&quot;VPN Route Distinguisher\n&quot;</span>
<a name="l06780"></a>06780        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l06781"></a>06781 {
<a name="l06782"></a>06782   <span class="keywordtype">int</span> ret;
<a name="l06783"></a>06783   <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> prd;
<a name="l06784"></a>06784 
<a name="l06785"></a>06785   ret = <a class="code" href="bgp__mplsvpn_8c.html#a296cfbde78d5b77bb55f852b2e1cabdd">str2prefix_rd</a> (argv[0], &amp;prd);
<a name="l06786"></a>06786   <span class="keywordflow">if</span> (! ret)
<a name="l06787"></a>06787     {
<a name="l06788"></a>06788       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed Route Distinguisher%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06789"></a>06789       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06790"></a>06790     }
<a name="l06791"></a>06791   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>, &amp;prd, 1);
<a name="l06792"></a>06792 }
<a name="l06793"></a>06793 
<a name="l06794"></a>06794 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view,
<a name="l06795"></a>06795        show_ip_bgp_view_cmd,
<a name="l06796"></a>06796        <span class="stringliteral">&quot;show ip bgp view WORD&quot;</span>,
<a name="l06797"></a>06797        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06798"></a>06798        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06799"></a>06799        BGP_STR
<a name="l06800"></a>06800        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06801"></a>06801        <span class="stringliteral">&quot;BGP view name\n&quot;</span>)
<a name="l06802"></a>06802 {
<a name="l06803"></a>06803   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l06804"></a>06804 
<a name="l06805"></a>06805   <span class="comment">/* BGP structure lookup. */</span>
<a name="l06806"></a>06806   bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l06807"></a>06807   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06808"></a>06808     {
<a name="l06809"></a>06809       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06810"></a>06810       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06811"></a>06811     }
<a name="l06812"></a>06812 
<a name="l06813"></a>06813   <span class="keywordflow">return</span> bgp_show (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06814"></a>06814 }
<a name="l06815"></a>06815 
<a name="l06816"></a>06816 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_route,
<a name="l06817"></a>06817        show_ip_bgp_view_route_cmd,
<a name="l06818"></a>06818        <span class="stringliteral">&quot;show ip bgp view WORD A.B.C.D&quot;</span>,
<a name="l06819"></a>06819        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06820"></a>06820        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06821"></a>06821        BGP_STR
<a name="l06822"></a>06822        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06823"></a>06823        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l06824"></a>06824        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06825"></a>06825 {
<a name="l06826"></a>06826   <span class="keywordflow">return</span> bgp_show_route (vty, argv[0], argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06827"></a>06827 }
<a name="l06828"></a>06828 
<a name="l06829"></a>06829 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_prefix,
<a name="l06830"></a>06830        show_ip_bgp_view_prefix_cmd,
<a name="l06831"></a>06831        <span class="stringliteral">&quot;show ip bgp view WORD A.B.C.D/M&quot;</span>,
<a name="l06832"></a>06832        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06833"></a>06833        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06834"></a>06834        BGP_STR
<a name="l06835"></a>06835        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06836"></a>06836        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l06837"></a>06837        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l06838"></a>06838 {
<a name="l06839"></a>06839   <span class="keywordflow">return</span> bgp_show_route (vty, argv[0], argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06840"></a>06840 }
<a name="l06841"></a>06841 
<a name="l06842"></a>06842 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l06843"></a>06843 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp,
<a name="l06844"></a>06844        show_bgp_cmd,
<a name="l06845"></a>06845        <span class="stringliteral">&quot;show bgp&quot;</span>,
<a name="l06846"></a>06846        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06847"></a>06847        BGP_STR)
<a name="l06848"></a>06848 {
<a name="l06849"></a>06849   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>,
<a name="l06850"></a>06850                    <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06851"></a>06851 }
<a name="l06852"></a>06852 
<a name="l06853"></a>06853 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp,
<a name="l06854"></a>06854        show_bgp_ipv6_cmd,
<a name="l06855"></a>06855        <span class="stringliteral">&quot;show bgp ipv6&quot;</span>,
<a name="l06856"></a>06856        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06857"></a>06857        BGP_STR
<a name="l06858"></a>06858        <span class="stringliteral">&quot;Address family\n&quot;</span>)
<a name="l06859"></a>06859 
<a name="l06860"></a>06860 <span class="comment">/* old command */</span>
<a name="l06861"></a>06861 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp,
<a name="l06862"></a>06862        show_ipv6_bgp_cmd,
<a name="l06863"></a>06863        <span class="stringliteral">&quot;show ipv6 bgp&quot;</span>,
<a name="l06864"></a>06864        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06865"></a>06865        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06866"></a>06866        BGP_STR)
<a name="l06867"></a>06867 {
<a name="l06868"></a>06868   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>,
<a name="l06869"></a>06869                    <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06870"></a>06870 }
<a name="l06871"></a>06871 
<a name="l06872"></a>06872 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_route,
<a name="l06873"></a>06873        show_bgp_route_cmd,
<a name="l06874"></a>06874        <span class="stringliteral">&quot;show bgp X:X::X:X&quot;</span>,
<a name="l06875"></a>06875        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06876"></a>06876        BGP_STR
<a name="l06877"></a>06877        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06878"></a>06878 {
<a name="l06879"></a>06879   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06880"></a>06880 }
<a name="l06881"></a>06881 
<a name="l06882"></a>06882 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_route,
<a name="l06883"></a>06883        show_bgp_ipv6_route_cmd,
<a name="l06884"></a>06884        <span class="stringliteral">&quot;show bgp ipv6 X:X::X:X&quot;</span>,
<a name="l06885"></a>06885        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06886"></a>06886        BGP_STR
<a name="l06887"></a>06887        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06888"></a>06888        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06889"></a>06889 
<a name="l06890"></a>06890 <span class="comment">/* old command */</span>
<a name="l06891"></a>06891 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_route,
<a name="l06892"></a>06892        show_ipv6_bgp_route_cmd,
<a name="l06893"></a>06893        <span class="stringliteral">&quot;show ipv6 bgp X:X::X:X&quot;</span>,
<a name="l06894"></a>06894        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06895"></a>06895        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06896"></a>06896        BGP_STR
<a name="l06897"></a>06897        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06898"></a>06898 {
<a name="l06899"></a>06899   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06900"></a>06900 }
<a name="l06901"></a>06901 
<a name="l06902"></a>06902 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_prefix,
<a name="l06903"></a>06903        show_bgp_prefix_cmd,
<a name="l06904"></a>06904        <span class="stringliteral">&quot;show bgp X:X::X:X/M&quot;</span>,
<a name="l06905"></a>06905        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06906"></a>06906        BGP_STR
<a name="l06907"></a>06907        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l06908"></a>06908 {
<a name="l06909"></a>06909   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06910"></a>06910 }
<a name="l06911"></a>06911 
<a name="l06912"></a>06912 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_prefix,
<a name="l06913"></a>06913        show_bgp_ipv6_prefix_cmd,
<a name="l06914"></a>06914        <span class="stringliteral">&quot;show bgp ipv6 X:X::X:X/M&quot;</span>,
<a name="l06915"></a>06915        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06916"></a>06916        BGP_STR
<a name="l06917"></a>06917        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06918"></a>06918        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l06919"></a>06919 
<a name="l06920"></a>06920 <span class="comment">/* old command */</span>
<a name="l06921"></a>06921 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_prefix,
<a name="l06922"></a>06922        show_ipv6_bgp_prefix_cmd,
<a name="l06923"></a>06923        <span class="stringliteral">&quot;show ipv6 bgp X:X::X:X/M&quot;</span>,
<a name="l06924"></a>06924        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06925"></a>06925        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l06926"></a>06926        BGP_STR
<a name="l06927"></a>06927        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l06928"></a>06928 {
<a name="l06929"></a>06929   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l06930"></a>06930 }
<a name="l06931"></a>06931 
<a name="l06932"></a>06932 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view,
<a name="l06933"></a>06933        show_bgp_view_cmd,
<a name="l06934"></a>06934        <span class="stringliteral">&quot;show bgp view WORD&quot;</span>,
<a name="l06935"></a>06935        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06936"></a>06936        BGP_STR
<a name="l06937"></a>06937        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06938"></a>06938        <span class="stringliteral">&quot;View name\n&quot;</span>)
<a name="l06939"></a>06939 {
<a name="l06940"></a>06940   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l06941"></a>06941 
<a name="l06942"></a>06942   <span class="comment">/* BGP structure lookup. */</span>
<a name="l06943"></a>06943   bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l06944"></a>06944   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l06945"></a>06945     {
<a name="l06946"></a>06946       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l06947"></a>06947       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l06948"></a>06948     }
<a name="l06949"></a>06949   
<a name="l06950"></a>06950   <span class="keywordflow">return</span> bgp_show (vty, bgp, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l06951"></a>06951 }
<a name="l06952"></a>06952 
<a name="l06953"></a>06953 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view,
<a name="l06954"></a>06954        show_bgp_view_ipv6_cmd,
<a name="l06955"></a>06955        <span class="stringliteral">&quot;show bgp view WORD ipv6&quot;</span>,
<a name="l06956"></a>06956        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06957"></a>06957        BGP_STR             
<a name="l06958"></a>06958        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06959"></a>06959        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l06960"></a>06960        <span class="stringliteral">&quot;Address family\n&quot;</span>)
<a name="l06961"></a>06961   
<a name="l06962"></a>06962 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_route,
<a name="l06963"></a>06963        show_bgp_view_route_cmd,
<a name="l06964"></a>06964        <span class="stringliteral">&quot;show bgp view WORD X:X::X:X&quot;</span>,
<a name="l06965"></a>06965        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06966"></a>06966        BGP_STR
<a name="l06967"></a>06967        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06968"></a>06968        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l06969"></a>06969        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06970"></a>06970 {
<a name="l06971"></a>06971   <span class="keywordflow">return</span> bgp_show_route (vty, argv[0], argv[1], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l06972"></a>06972 }
<a name="l06973"></a>06973 
<a name="l06974"></a>06974 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_route,
<a name="l06975"></a>06975        show_bgp_view_ipv6_route_cmd,
<a name="l06976"></a>06976        <span class="stringliteral">&quot;show bgp view WORD ipv6 X:X::X:X&quot;</span>,
<a name="l06977"></a>06977        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06978"></a>06978        BGP_STR
<a name="l06979"></a>06979        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06980"></a>06980        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l06981"></a>06981        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l06982"></a>06982        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l06983"></a>06983 
<a name="l06984"></a>06984 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_prefix,
<a name="l06985"></a>06985        show_bgp_view_prefix_cmd,
<a name="l06986"></a>06986        <span class="stringliteral">&quot;show bgp view WORD X:X::X:X/M&quot;</span>,
<a name="l06987"></a>06987        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l06988"></a>06988        BGP_STR
<a name="l06989"></a>06989        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l06990"></a>06990        <span class="stringliteral">&quot;View name\n&quot;</span>       
<a name="l06991"></a>06991        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l06992"></a>06992 {
<a name="l06993"></a>06993   <span class="keywordflow">return</span> bgp_show_route (vty, argv[0], argv[1], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1); 
<a name="l06994"></a>06994 }
<a name="l06995"></a>06995 
<a name="l06996"></a>06996 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_prefix,
<a name="l06997"></a>06997        show_bgp_view_ipv6_prefix_cmd,
<a name="l06998"></a>06998        <span class="stringliteral">&quot;show bgp view WORD ipv6 X:X::X:X/M&quot;</span>,
<a name="l06999"></a>06999        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07000"></a>07000        BGP_STR
<a name="l07001"></a>07001        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l07002"></a>07002        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l07003"></a>07003        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07004"></a>07004        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)  
<a name="l07005"></a>07005 
<a name="l07006"></a>07006 <span class="comment">/* old command */</span>
<a name="l07007"></a>07007 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp,
<a name="l07008"></a>07008        show_ipv6_mbgp_cmd,
<a name="l07009"></a>07009        <span class="stringliteral">&quot;show ipv6 mbgp&quot;</span>,
<a name="l07010"></a>07010        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07011"></a>07011        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07012"></a>07012        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>)
<a name="l07013"></a>07013 {
<a name="l07014"></a>07014   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>,
<a name="l07015"></a>07015                    <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07016"></a>07016 }
<a name="l07017"></a>07017 
<a name="l07018"></a>07018 <span class="comment">/* old command */</span>
<a name="l07019"></a>07019 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_route,
<a name="l07020"></a>07020        show_ipv6_mbgp_route_cmd,
<a name="l07021"></a>07021        <span class="stringliteral">&quot;show ipv6 mbgp X:X::X:X&quot;</span>,
<a name="l07022"></a>07022        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07023"></a>07023        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07024"></a>07024        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l07025"></a>07025        <span class="stringliteral">&quot;Network in the MBGP routing table to display\n&quot;</span>)
<a name="l07026"></a>07026 {
<a name="l07027"></a>07027   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l07028"></a>07028 }
<a name="l07029"></a>07029 
<a name="l07030"></a>07030 <span class="comment">/* old command */</span>
<a name="l07031"></a>07031 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_prefix,
<a name="l07032"></a>07032        show_ipv6_mbgp_prefix_cmd,
<a name="l07033"></a>07033        <span class="stringliteral">&quot;show ipv6 mbgp X:X::X:X/M&quot;</span>,
<a name="l07034"></a>07034        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07035"></a>07035        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07036"></a>07036        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l07037"></a>07037        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l07038"></a>07038 {
<a name="l07039"></a>07039   <span class="keywordflow">return</span> bgp_show_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l07040"></a>07040 }
<a name="l07041"></a>07041 <span class="preprocessor">#endif</span>
<a name="l07042"></a>07042 <span class="preprocessor"></span>
<a name="l07043"></a>07043 
<a name="l07044"></a>07044 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l07045"></a>07045 bgp_show_regexp (<span class="keyword">struct</span> vty *vty, <span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l07046"></a>07046          <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l07047"></a>07047 {
<a name="l07048"></a>07048   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l07049"></a>07049   <span class="keyword">struct </span><a class="code" href="structbuffer.html">buffer</a> *<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>;
<a name="l07050"></a>07050   <span class="keywordtype">char</span> *regstr;
<a name="l07051"></a>07051   <span class="keywordtype">int</span> first;
<a name="l07052"></a>07052   <a class="code" href="structre__pattern__buffer.html">regex_t</a> *regex;
<a name="l07053"></a>07053   <span class="keywordtype">int</span> rc;
<a name="l07054"></a>07054   
<a name="l07055"></a>07055   first = 0;
<a name="l07056"></a>07056   b = <a class="code" href="buffer_8c.html#a277b94d1c81d4e5ac2e5c59ede1abed9">buffer_new</a> (1024);
<a name="l07057"></a>07057   <span class="keywordflow">for</span> (i = 0; i &lt; argc; i++)
<a name="l07058"></a>07058     {
<a name="l07059"></a>07059       <span class="keywordflow">if</span> (first)
<a name="l07060"></a>07060     <a class="code" href="buffer_8c.html#a3734e531dc5995ac29c055c4b66822d4">buffer_putc</a> (b, <span class="charliteral">&#39; &#39;</span>);
<a name="l07061"></a>07061       <span class="keywordflow">else</span>
<a name="l07062"></a>07062     {
<a name="l07063"></a>07063       <span class="keywordflow">if</span> ((strcmp (argv[i], <span class="stringliteral">&quot;unicast&quot;</span>) == 0) || (strcmp (argv[i], <span class="stringliteral">&quot;multicast&quot;</span>) == 0))
<a name="l07064"></a>07064         <span class="keywordflow">continue</span>;
<a name="l07065"></a>07065       first = 1;
<a name="l07066"></a>07066     }
<a name="l07067"></a>07067 
<a name="l07068"></a>07068       <a class="code" href="buffer_8c.html#a23f67bdda323e69158b6e4587ad19649">buffer_putstr</a> (b, argv[i]);
<a name="l07069"></a>07069     }
<a name="l07070"></a>07070   <a class="code" href="buffer_8c.html#a3734e531dc5995ac29c055c4b66822d4">buffer_putc</a> (b, <span class="charliteral">&#39;\0&#39;</span>);
<a name="l07071"></a>07071 
<a name="l07072"></a>07072   regstr = <a class="code" href="buffer_8c.html#a75902fea80bfc9527677a70130208480">buffer_getstr</a> (b);
<a name="l07073"></a>07073   <a class="code" href="buffer_8c.html#a33630b21db5f9cda080c24c3175bde5a">buffer_free</a> (b);
<a name="l07074"></a>07074 
<a name="l07075"></a>07075   regex = <a class="code" href="bgp__regex_8c.html#a316b90543d312729a458a7ae1cec7e42">bgp_regcomp</a> (regstr);
<a name="l07076"></a>07076   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, regstr);
<a name="l07077"></a>07077   <span class="keywordflow">if</span> (! regex)
<a name="l07078"></a>07078     {
<a name="l07079"></a>07079       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t compile regexp %s%s&quot;</span>, argv[0],
<a name="l07080"></a>07080            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l07081"></a>07081       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l07082"></a>07082     }
<a name="l07083"></a>07083 
<a name="l07084"></a>07084   rc = bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, type, regex);
<a name="l07085"></a>07085   <a class="code" href="bgp__regex_8c.html#a9a7260053c61ff8c6f58e5822d136b88">bgp_regex_free</a> (regex);
<a name="l07086"></a>07086   <span class="keywordflow">return</span> rc;
<a name="l07087"></a>07087 }
<a name="l07088"></a>07088 
<a name="l07089"></a>07089 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_regexp, 
<a name="l07090"></a>07090        show_ip_bgp_regexp_cmd,
<a name="l07091"></a>07091        <span class="stringliteral">&quot;show ip bgp regexp .LINE&quot;</span>,
<a name="l07092"></a>07092        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07093"></a>07093        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07094"></a>07094        BGP_STR
<a name="l07095"></a>07095        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07096"></a>07096        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07097"></a>07097 {
<a name="l07098"></a>07098   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07099"></a>07099               <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07100"></a>07100 }
<a name="l07101"></a>07101 
<a name="l07102"></a>07102 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_regexp, 
<a name="l07103"></a>07103        show_ip_bgp_flap_regexp_cmd,
<a name="l07104"></a>07104        <span class="stringliteral">&quot;show ip bgp flap-statistics regexp .LINE&quot;</span>,
<a name="l07105"></a>07105        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07106"></a>07106        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07107"></a>07107        BGP_STR
<a name="l07108"></a>07108        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l07109"></a>07109        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07110"></a>07110        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07111"></a>07111 {
<a name="l07112"></a>07112   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07113"></a>07113               bgp_show_type_flap_regexp);
<a name="l07114"></a>07114 }
<a name="l07115"></a>07115 
<a name="l07116"></a>07116 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_regexp, 
<a name="l07117"></a>07117        show_ip_bgp_ipv4_regexp_cmd,
<a name="l07118"></a>07118        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) regexp .LINE&quot;</span>,
<a name="l07119"></a>07119        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07120"></a>07120        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07121"></a>07121        BGP_STR
<a name="l07122"></a>07122        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07123"></a>07123        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07124"></a>07124        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07125"></a>07125        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07126"></a>07126        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07127"></a>07127 {
<a name="l07128"></a>07128   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07129"></a>07129     <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07130"></a>07130                 <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07131"></a>07131 
<a name="l07132"></a>07132   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07133"></a>07133               <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07134"></a>07134 }
<a name="l07135"></a>07135 
<a name="l07136"></a>07136 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l07137"></a>07137 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_regexp, 
<a name="l07138"></a>07138        show_bgp_regexp_cmd,
<a name="l07139"></a>07139        <span class="stringliteral">&quot;show bgp regexp .LINE&quot;</span>,
<a name="l07140"></a>07140        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07141"></a>07141        BGP_STR
<a name="l07142"></a>07142        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07143"></a>07143        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07144"></a>07144 {
<a name="l07145"></a>07145   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07146"></a>07146               <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07147"></a>07147 }
<a name="l07148"></a>07148 
<a name="l07149"></a>07149 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_regexp, 
<a name="l07150"></a>07150        show_bgp_ipv6_regexp_cmd,
<a name="l07151"></a>07151        <span class="stringliteral">&quot;show bgp ipv6 regexp .LINE&quot;</span>,
<a name="l07152"></a>07152        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07153"></a>07153        BGP_STR
<a name="l07154"></a>07154        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07155"></a>07155        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07156"></a>07156        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07157"></a>07157 
<a name="l07158"></a>07158 <span class="comment">/* old command */</span>
<a name="l07159"></a>07159 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_regexp, 
<a name="l07160"></a>07160        show_ipv6_bgp_regexp_cmd,
<a name="l07161"></a>07161        <span class="stringliteral">&quot;show ipv6 bgp regexp .LINE&quot;</span>,
<a name="l07162"></a>07162        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07163"></a>07163        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07164"></a>07164        BGP_STR
<a name="l07165"></a>07165        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07166"></a>07166        <span class="stringliteral">&quot;A regular-expression to match the BGP AS paths\n&quot;</span>)
<a name="l07167"></a>07167 {
<a name="l07168"></a>07168   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07169"></a>07169               <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07170"></a>07170 }
<a name="l07171"></a>07171 
<a name="l07172"></a>07172 <span class="comment">/* old command */</span>
<a name="l07173"></a>07173 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_regexp, 
<a name="l07174"></a>07174        show_ipv6_mbgp_regexp_cmd,
<a name="l07175"></a>07175        <span class="stringliteral">&quot;show ipv6 mbgp regexp .LINE&quot;</span>,
<a name="l07176"></a>07176        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07177"></a>07177        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07178"></a>07178        BGP_STR
<a name="l07179"></a>07179        <span class="stringliteral">&quot;Display routes matching the AS path regular expression\n&quot;</span>
<a name="l07180"></a>07180        <span class="stringliteral">&quot;A regular-expression to match the MBGP AS paths\n&quot;</span>)
<a name="l07181"></a>07181 {
<a name="l07182"></a>07182   <span class="keywordflow">return</span> bgp_show_regexp (vty, argc, argv, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07183"></a>07183               <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a35109463530411a4907ed022390179b0">bgp_show_type_regexp</a>);
<a name="l07184"></a>07184 }
<a name="l07185"></a>07185 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l07186"></a>07186 
<a name="l07187"></a>07187 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l07188"></a>07188 bgp_show_prefix_list (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix_list_str, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l07189"></a>07189               <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l07190"></a>07190 {
<a name="l07191"></a>07191   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l07192"></a>07192 
<a name="l07193"></a>07193   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, prefix_list_str);
<a name="l07194"></a>07194   <span class="keywordflow">if</span> (plist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l07195"></a>07195     {
<a name="l07196"></a>07196       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% %s is not a valid prefix-list name%s&quot;</span>,
<a name="l07197"></a>07197                prefix_list_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);       
<a name="l07198"></a>07198       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l07199"></a>07199     }
<a name="l07200"></a>07200 
<a name="l07201"></a>07201   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, type, plist);
<a name="l07202"></a>07202 }
<a name="l07203"></a>07203 
<a name="l07204"></a>07204 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_prefix_list, 
<a name="l07205"></a>07205        show_ip_bgp_prefix_list_cmd,
<a name="l07206"></a>07206        <span class="stringliteral">&quot;show ip bgp prefix-list WORD&quot;</span>,
<a name="l07207"></a>07207        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07208"></a>07208        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07209"></a>07209        BGP_STR
<a name="l07210"></a>07210        <span class="stringliteral">&quot;Display routes conforming to the prefix-list\n&quot;</span>
<a name="l07211"></a>07211        <span class="stringliteral">&quot;IP prefix-list name\n&quot;</span>)
<a name="l07212"></a>07212 {
<a name="l07213"></a>07213   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07214"></a>07214                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07215"></a>07215 }
<a name="l07216"></a>07216 
<a name="l07217"></a>07217 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_prefix_list, 
<a name="l07218"></a>07218        show_ip_bgp_flap_prefix_list_cmd,
<a name="l07219"></a>07219        <span class="stringliteral">&quot;show ip bgp flap-statistics prefix-list WORD&quot;</span>,
<a name="l07220"></a>07220        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07221"></a>07221        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07222"></a>07222        BGP_STR
<a name="l07223"></a>07223        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l07224"></a>07224        <span class="stringliteral">&quot;Display routes conforming to the prefix-list\n&quot;</span>
<a name="l07225"></a>07225        <span class="stringliteral">&quot;IP prefix-list name\n&quot;</span>)
<a name="l07226"></a>07226 {
<a name="l07227"></a>07227   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07228"></a>07228                    bgp_show_type_flap_prefix_list);
<a name="l07229"></a>07229 }
<a name="l07230"></a>07230 
<a name="l07231"></a>07231 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_prefix_list, 
<a name="l07232"></a>07232        show_ip_bgp_ipv4_prefix_list_cmd,
<a name="l07233"></a>07233        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) prefix-list WORD&quot;</span>,
<a name="l07234"></a>07234        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07235"></a>07235        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07236"></a>07236        BGP_STR
<a name="l07237"></a>07237        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07238"></a>07238        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07239"></a>07239        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07240"></a>07240        <span class="stringliteral">&quot;Display routes conforming to the prefix-list\n&quot;</span>
<a name="l07241"></a>07241        <span class="stringliteral">&quot;IP prefix-list name\n&quot;</span>)
<a name="l07242"></a>07242 {
<a name="l07243"></a>07243   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07244"></a>07244     <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07245"></a>07245                      <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07246"></a>07246 
<a name="l07247"></a>07247   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07248"></a>07248                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07249"></a>07249 }
<a name="l07250"></a>07250 
<a name="l07251"></a>07251 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l07252"></a>07252 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_prefix_list, 
<a name="l07253"></a>07253        show_bgp_prefix_list_cmd,
<a name="l07254"></a>07254        <span class="stringliteral">&quot;show bgp prefix-list WORD&quot;</span>,
<a name="l07255"></a>07255        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07256"></a>07256        BGP_STR
<a name="l07257"></a>07257        <span class="stringliteral">&quot;Display routes conforming to the prefix-list\n&quot;</span>
<a name="l07258"></a>07258        <span class="stringliteral">&quot;IPv6 prefix-list name\n&quot;</span>)
<a name="l07259"></a>07259 {
<a name="l07260"></a>07260   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07261"></a>07261                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07262"></a>07262 }
<a name="l07263"></a>07263 
<a name="l07264"></a>07264 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_prefix_list, 
<a name="l07265"></a>07265        show_bgp_ipv6_prefix_list_cmd,
<a name="l07266"></a>07266        <span class="stringliteral">&quot;show bgp ipv6 prefix-list WORD&quot;</span>,
<a name="l07267"></a>07267        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07268"></a>07268        BGP_STR
<a name="l07269"></a>07269        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07270"></a>07270        <span class="stringliteral">&quot;Display routes conforming to the prefix-list\n&quot;</span>
<a name="l07271"></a>07271        <span class="stringliteral">&quot;IPv6 prefix-list name\n&quot;</span>)
<a name="l07272"></a>07272 
<a name="l07273"></a>07273 <span class="comment">/* old command */</span>
<a name="l07274"></a>07274 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_prefix_list, 
<a name="l07275"></a>07275        show_ipv6_bgp_prefix_list_cmd,
<a name="l07276"></a>07276        <span class="stringliteral">&quot;show ipv6 bgp prefix-list WORD&quot;</span>,
<a name="l07277"></a>07277        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07278"></a>07278        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07279"></a>07279        BGP_STR
<a name="l07280"></a>07280        <span class="stringliteral">&quot;Display routes matching the prefix-list\n&quot;</span>
<a name="l07281"></a>07281        <span class="stringliteral">&quot;IPv6 prefix-list name\n&quot;</span>)
<a name="l07282"></a>07282 {
<a name="l07283"></a>07283   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07284"></a>07284                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07285"></a>07285 }
<a name="l07286"></a>07286 
<a name="l07287"></a>07287 <span class="comment">/* old command */</span>
<a name="l07288"></a>07288 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_prefix_list, 
<a name="l07289"></a>07289        show_ipv6_mbgp_prefix_list_cmd,
<a name="l07290"></a>07290        <span class="stringliteral">&quot;show ipv6 mbgp prefix-list WORD&quot;</span>,
<a name="l07291"></a>07291        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07292"></a>07292        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07293"></a>07293        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l07294"></a>07294        <span class="stringliteral">&quot;Display routes matching the prefix-list\n&quot;</span>
<a name="l07295"></a>07295        <span class="stringliteral">&quot;IPv6 prefix-list name\n&quot;</span>)
<a name="l07296"></a>07296 {
<a name="l07297"></a>07297   <span class="keywordflow">return</span> bgp_show_prefix_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07298"></a>07298                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a0d2eda7a68d24a39a898ea68f301bf88">bgp_show_type_prefix_list</a>);
<a name="l07299"></a>07299 }
<a name="l07300"></a>07300 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l07301"></a>07301 
<a name="l07302"></a>07302 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l07303"></a>07303 bgp_show_filter_list (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structfilter.html">filter</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l07304"></a>07304               <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l07305"></a>07305 {
<a name="l07306"></a>07306   <span class="keyword">struct </span>as_list *as_list;
<a name="l07307"></a>07307 
<a name="l07308"></a>07308   as_list = <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (filter);
<a name="l07309"></a>07309   <span class="keywordflow">if</span> (as_list == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l07310"></a>07310     {
<a name="l07311"></a>07311       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% %s is not a valid AS-path access-list name%s&quot;</span>, filter, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);        
<a name="l07312"></a>07312       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l07313"></a>07313     }
<a name="l07314"></a>07314 
<a name="l07315"></a>07315   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, type, as_list);
<a name="l07316"></a>07316 }
<a name="l07317"></a>07317 
<a name="l07318"></a>07318 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_filter_list, 
<a name="l07319"></a>07319        show_ip_bgp_filter_list_cmd,
<a name="l07320"></a>07320        <span class="stringliteral">&quot;show ip bgp filter-list WORD&quot;</span>,
<a name="l07321"></a>07321        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07322"></a>07322        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07323"></a>07323        BGP_STR
<a name="l07324"></a>07324        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07325"></a>07325        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07326"></a>07326 {
<a name="l07327"></a>07327   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07328"></a>07328                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07329"></a>07329 }
<a name="l07330"></a>07330 
<a name="l07331"></a>07331 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_filter_list, 
<a name="l07332"></a>07332        show_ip_bgp_flap_filter_list_cmd,
<a name="l07333"></a>07333        <span class="stringliteral">&quot;show ip bgp flap-statistics filter-list WORD&quot;</span>,
<a name="l07334"></a>07334        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07335"></a>07335        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07336"></a>07336        BGP_STR
<a name="l07337"></a>07337        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l07338"></a>07338        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07339"></a>07339        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07340"></a>07340 {
<a name="l07341"></a>07341   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07342"></a>07342                    bgp_show_type_flap_filter_list);
<a name="l07343"></a>07343 }
<a name="l07344"></a>07344 
<a name="l07345"></a>07345 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_filter_list, 
<a name="l07346"></a>07346        show_ip_bgp_ipv4_filter_list_cmd,
<a name="l07347"></a>07347        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) filter-list WORD&quot;</span>,
<a name="l07348"></a>07348        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07349"></a>07349        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07350"></a>07350        BGP_STR
<a name="l07351"></a>07351        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07352"></a>07352        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07353"></a>07353        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07354"></a>07354        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07355"></a>07355        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07356"></a>07356 {
<a name="l07357"></a>07357   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07358"></a>07358     <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07359"></a>07359                      <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07360"></a>07360   
<a name="l07361"></a>07361   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07362"></a>07362                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07363"></a>07363 }
<a name="l07364"></a>07364 
<a name="l07365"></a>07365 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l07366"></a>07366 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_filter_list, 
<a name="l07367"></a>07367        show_bgp_filter_list_cmd,
<a name="l07368"></a>07368        <span class="stringliteral">&quot;show bgp filter-list WORD&quot;</span>,
<a name="l07369"></a>07369        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07370"></a>07370        BGP_STR
<a name="l07371"></a>07371        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07372"></a>07372        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07373"></a>07373 {
<a name="l07374"></a>07374   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07375"></a>07375                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07376"></a>07376 }
<a name="l07377"></a>07377 
<a name="l07378"></a>07378 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_filter_list, 
<a name="l07379"></a>07379        show_bgp_ipv6_filter_list_cmd,
<a name="l07380"></a>07380        <span class="stringliteral">&quot;show bgp ipv6 filter-list WORD&quot;</span>,
<a name="l07381"></a>07381        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07382"></a>07382        BGP_STR
<a name="l07383"></a>07383        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07384"></a>07384        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07385"></a>07385        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07386"></a>07386 
<a name="l07387"></a>07387 <span class="comment">/* old command */</span>
<a name="l07388"></a>07388 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_filter_list, 
<a name="l07389"></a>07389        show_ipv6_bgp_filter_list_cmd,
<a name="l07390"></a>07390        <span class="stringliteral">&quot;show ipv6 bgp filter-list WORD&quot;</span>,
<a name="l07391"></a>07391        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07392"></a>07392        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07393"></a>07393        BGP_STR
<a name="l07394"></a>07394        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07395"></a>07395        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07396"></a>07396 {
<a name="l07397"></a>07397   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07398"></a>07398                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07399"></a>07399 }
<a name="l07400"></a>07400 
<a name="l07401"></a>07401 <span class="comment">/* old command */</span>
<a name="l07402"></a>07402 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_filter_list, 
<a name="l07403"></a>07403        show_ipv6_mbgp_filter_list_cmd,
<a name="l07404"></a>07404        <span class="stringliteral">&quot;show ipv6 mbgp filter-list WORD&quot;</span>,
<a name="l07405"></a>07405        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07406"></a>07406        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07407"></a>07407        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l07408"></a>07408        <span class="stringliteral">&quot;Display routes conforming to the filter-list\n&quot;</span>
<a name="l07409"></a>07409        <span class="stringliteral">&quot;Regular expression access list name\n&quot;</span>)
<a name="l07410"></a>07410 {
<a name="l07411"></a>07411   <span class="keywordflow">return</span> bgp_show_filter_list (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07412"></a>07412                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ab42dba932aaf8c38575222fb983eda2e">bgp_show_type_filter_list</a>);
<a name="l07413"></a>07413 }
<a name="l07414"></a>07414 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l07415"></a>07415 
<a name="l07416"></a>07416 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l07417"></a>07417 bgp_show_route_map (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *rmap_str, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l07418"></a>07418             <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l07419"></a>07419 {
<a name="l07420"></a>07420   <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *rmap;
<a name="l07421"></a>07421 
<a name="l07422"></a>07422   rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rmap_str);
<a name="l07423"></a>07423   <span class="keywordflow">if</span> (! rmap)
<a name="l07424"></a>07424     {
<a name="l07425"></a>07425       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% %s is not a valid route-map name%s&quot;</span>,
<a name="l07426"></a>07426            rmap_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);      
<a name="l07427"></a>07427       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l07428"></a>07428     }
<a name="l07429"></a>07429 
<a name="l07430"></a>07430   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, type, rmap);
<a name="l07431"></a>07431 }
<a name="l07432"></a>07432 
<a name="l07433"></a>07433 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_route_map, 
<a name="l07434"></a>07434        show_ip_bgp_route_map_cmd,
<a name="l07435"></a>07435        <span class="stringliteral">&quot;show ip bgp route-map WORD&quot;</span>,
<a name="l07436"></a>07436        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07437"></a>07437        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07438"></a>07438        BGP_STR
<a name="l07439"></a>07439        <span class="stringliteral">&quot;Display routes matching the route-map\n&quot;</span>
<a name="l07440"></a>07440        <span class="stringliteral">&quot;A route-map to match on\n&quot;</span>)
<a name="l07441"></a>07441 {
<a name="l07442"></a>07442   <span class="keywordflow">return</span> bgp_show_route_map (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07443"></a>07443                  bgp_show_type_route_map);
<a name="l07444"></a>07444 }
<a name="l07445"></a>07445 
<a name="l07446"></a>07446 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_route_map, 
<a name="l07447"></a>07447        show_ip_bgp_flap_route_map_cmd,
<a name="l07448"></a>07448        <span class="stringliteral">&quot;show ip bgp flap-statistics route-map WORD&quot;</span>,
<a name="l07449"></a>07449        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07450"></a>07450        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07451"></a>07451        BGP_STR
<a name="l07452"></a>07452        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l07453"></a>07453        <span class="stringliteral">&quot;Display routes matching the route-map\n&quot;</span>
<a name="l07454"></a>07454        <span class="stringliteral">&quot;A route-map to match on\n&quot;</span>)
<a name="l07455"></a>07455 {
<a name="l07456"></a>07456   <span class="keywordflow">return</span> bgp_show_route_map (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07457"></a>07457                  bgp_show_type_flap_route_map);
<a name="l07458"></a>07458 }
<a name="l07459"></a>07459 
<a name="l07460"></a>07460 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_route_map, 
<a name="l07461"></a>07461        show_ip_bgp_ipv4_route_map_cmd,
<a name="l07462"></a>07462        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) route-map WORD&quot;</span>,
<a name="l07463"></a>07463        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07464"></a>07464        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07465"></a>07465        BGP_STR
<a name="l07466"></a>07466        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07467"></a>07467        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07468"></a>07468        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07469"></a>07469        <span class="stringliteral">&quot;Display routes matching the route-map\n&quot;</span>
<a name="l07470"></a>07470        <span class="stringliteral">&quot;A route-map to match on\n&quot;</span>)
<a name="l07471"></a>07471 {
<a name="l07472"></a>07472   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07473"></a>07473     <span class="keywordflow">return</span> bgp_show_route_map (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07474"></a>07474                    bgp_show_type_route_map);
<a name="l07475"></a>07475 
<a name="l07476"></a>07476   <span class="keywordflow">return</span> bgp_show_route_map (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07477"></a>07477                  bgp_show_type_route_map);
<a name="l07478"></a>07478 }
<a name="l07479"></a>07479 
<a name="l07480"></a>07480 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_route_map, 
<a name="l07481"></a>07481        show_bgp_route_map_cmd,
<a name="l07482"></a>07482        <span class="stringliteral">&quot;show bgp route-map WORD&quot;</span>,
<a name="l07483"></a>07483        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07484"></a>07484        BGP_STR
<a name="l07485"></a>07485        <span class="stringliteral">&quot;Display routes matching the route-map\n&quot;</span>
<a name="l07486"></a>07486        <span class="stringliteral">&quot;A route-map to match on\n&quot;</span>)
<a name="l07487"></a>07487 {
<a name="l07488"></a>07488   <span class="keywordflow">return</span> bgp_show_route_map (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07489"></a>07489                  bgp_show_type_route_map);
<a name="l07490"></a>07490 }
<a name="l07491"></a>07491 
<a name="l07492"></a>07492 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_route_map, 
<a name="l07493"></a>07493        show_bgp_ipv6_route_map_cmd,
<a name="l07494"></a>07494        <span class="stringliteral">&quot;show bgp ipv6 route-map WORD&quot;</span>,
<a name="l07495"></a>07495        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07496"></a>07496        BGP_STR
<a name="l07497"></a>07497        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07498"></a>07498        <span class="stringliteral">&quot;Display routes matching the route-map\n&quot;</span>
<a name="l07499"></a>07499        <span class="stringliteral">&quot;A route-map to match on\n&quot;</span>)
<a name="l07500"></a>07500 
<a name="l07501"></a>07501 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_cidr_only,
<a name="l07502"></a>07502        show_ip_bgp_cidr_only_cmd,
<a name="l07503"></a>07503        <span class="stringliteral">&quot;show ip bgp cidr-only&quot;</span>,
<a name="l07504"></a>07504        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07505"></a>07505        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07506"></a>07506        BGP_STR
<a name="l07507"></a>07507        <span class="stringliteral">&quot;Display only routes with non-natural netmasks\n&quot;</span>)
<a name="l07508"></a>07508 {
<a name="l07509"></a>07509     <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07510"></a>07510              <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224af5527ed0df465192325b2736120ae158">bgp_show_type_cidr_only</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07511"></a>07511 }
<a name="l07512"></a>07512 
<a name="l07513"></a>07513 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_cidr_only,
<a name="l07514"></a>07514        show_ip_bgp_flap_cidr_only_cmd,
<a name="l07515"></a>07515        <span class="stringliteral">&quot;show ip bgp flap-statistics cidr-only&quot;</span>,
<a name="l07516"></a>07516        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07517"></a>07517        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07518"></a>07518        BGP_STR
<a name="l07519"></a>07519        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l07520"></a>07520        <span class="stringliteral">&quot;Display only routes with non-natural netmasks\n&quot;</span>)
<a name="l07521"></a>07521 {
<a name="l07522"></a>07522   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07523"></a>07523            bgp_show_type_flap_cidr_only, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07524"></a>07524 }
<a name="l07525"></a>07525 
<a name="l07526"></a>07526 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_cidr_only,
<a name="l07527"></a>07527        show_ip_bgp_ipv4_cidr_only_cmd,
<a name="l07528"></a>07528        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) cidr-only&quot;</span>,
<a name="l07529"></a>07529        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07530"></a>07530        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07531"></a>07531        BGP_STR
<a name="l07532"></a>07532        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07533"></a>07533        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07534"></a>07534        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07535"></a>07535        <span class="stringliteral">&quot;Display only routes with non-natural netmasks\n&quot;</span>)
<a name="l07536"></a>07536 {
<a name="l07537"></a>07537   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07538"></a>07538     <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07539"></a>07539              <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224af5527ed0df465192325b2736120ae158">bgp_show_type_cidr_only</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07540"></a>07540 
<a name="l07541"></a>07541   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07542"></a>07542              <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224af5527ed0df465192325b2736120ae158">bgp_show_type_cidr_only</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07543"></a>07543 }
<a name="l07544"></a>07544 
<a name="l07545"></a>07545 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_community_all,
<a name="l07546"></a>07546        show_ip_bgp_community_all_cmd,
<a name="l07547"></a>07547        <span class="stringliteral">&quot;show ip bgp community&quot;</span>,
<a name="l07548"></a>07548        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07549"></a>07549        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07550"></a>07550        BGP_STR
<a name="l07551"></a>07551        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07552"></a>07552 {
<a name="l07553"></a>07553   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07554"></a>07554              <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07555"></a>07555 }
<a name="l07556"></a>07556 
<a name="l07557"></a>07557 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_community_all,
<a name="l07558"></a>07558        show_ip_bgp_ipv4_community_all_cmd,
<a name="l07559"></a>07559        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community&quot;</span>,
<a name="l07560"></a>07560        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07561"></a>07561        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07562"></a>07562        BGP_STR
<a name="l07563"></a>07563        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07564"></a>07564        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07565"></a>07565        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07566"></a>07566        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07567"></a>07567 {
<a name="l07568"></a>07568   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07569"></a>07569     <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07570"></a>07570              <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07571"></a>07571  
<a name="l07572"></a>07572   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l07573"></a>07573            <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07574"></a>07574 }
<a name="l07575"></a>07575 
<a name="l07576"></a>07576 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l07577"></a>07577 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_community_all,
<a name="l07578"></a>07578        show_bgp_community_all_cmd,
<a name="l07579"></a>07579        <span class="stringliteral">&quot;show bgp community&quot;</span>,
<a name="l07580"></a>07580        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07581"></a>07581        BGP_STR
<a name="l07582"></a>07582        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07583"></a>07583 {
<a name="l07584"></a>07584   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07585"></a>07585            <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07586"></a>07586 }
<a name="l07587"></a>07587 
<a name="l07588"></a>07588 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_all,
<a name="l07589"></a>07589        show_bgp_ipv6_community_all_cmd,
<a name="l07590"></a>07590        <span class="stringliteral">&quot;show bgp ipv6 community&quot;</span>,
<a name="l07591"></a>07591        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07592"></a>07592        BGP_STR
<a name="l07593"></a>07593        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07594"></a>07594        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07595"></a>07595 
<a name="l07596"></a>07596 <span class="comment">/* old command */</span>
<a name="l07597"></a>07597 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_community_all,
<a name="l07598"></a>07598        show_ipv6_bgp_community_all_cmd,
<a name="l07599"></a>07599        <span class="stringliteral">&quot;show ipv6 bgp community&quot;</span>,
<a name="l07600"></a>07600        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07601"></a>07601        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07602"></a>07602        BGP_STR
<a name="l07603"></a>07603        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07604"></a>07604 {
<a name="l07605"></a>07605   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l07606"></a>07606            <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07607"></a>07607 }
<a name="l07608"></a>07608 
<a name="l07609"></a>07609 <span class="comment">/* old command */</span>
<a name="l07610"></a>07610 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_community_all,
<a name="l07611"></a>07611        show_ipv6_mbgp_community_all_cmd,
<a name="l07612"></a>07612        <span class="stringliteral">&quot;show ipv6 mbgp community&quot;</span>,
<a name="l07613"></a>07613        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07614"></a>07614        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l07615"></a>07615        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l07616"></a>07616        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>)
<a name="l07617"></a>07617 {
<a name="l07618"></a>07618   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l07619"></a>07619            <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a45bfc69383b603b2704715be9a16e841">bgp_show_type_community_all</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l07620"></a>07620 }
<a name="l07621"></a>07621 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l07622"></a>07622 
<a name="l07623"></a>07623 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l07624"></a>07624 bgp_show_community (<span class="keyword">struct</span> vty *vty, <span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv, <span class="keywordtype">int</span> exact,
<a name="l07625"></a>07625                     u_int16_t afi, u_char safi)
<a name="l07626"></a>07626 {
<a name="l07627"></a>07627   <span class="keyword">struct </span>community *com;
<a name="l07628"></a>07628   <span class="keyword">struct </span><a class="code" href="structbuffer.html">buffer</a> *b;
<a name="l07629"></a>07629   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l07630"></a>07630   <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
<a name="l07631"></a>07631   <span class="keywordtype">int</span> first = 0;
<a name="l07632"></a>07632 
<a name="l07633"></a>07633   b = <a class="code" href="buffer_8c.html#a277b94d1c81d4e5ac2e5c59ede1abed9">buffer_new</a> (1024);
<a name="l07634"></a>07634   <span class="keywordflow">for</span> (i = 0; i &lt; argc; i++)
<a name="l07635"></a>07635     {
<a name="l07636"></a>07636       <span class="keywordflow">if</span> (first)
<a name="l07637"></a>07637         <a class="code" href="buffer_8c.html#a3734e531dc5995ac29c055c4b66822d4">buffer_putc</a> (b, <span class="charliteral">&#39; &#39;</span>);
<a name="l07638"></a>07638       <span class="keywordflow">else</span>
<a name="l07639"></a>07639     {
<a name="l07640"></a>07640       <span class="keywordflow">if</span> ((strcmp (argv[i], <span class="stringliteral">&quot;unicast&quot;</span>) == 0) || (strcmp (argv[i], <span class="stringliteral">&quot;multicast&quot;</span>) == 0))
<a name="l07641"></a>07641         <span class="keywordflow">continue</span>;
<a name="l07642"></a>07642       first = 1;
<a name="l07643"></a>07643     }
<a name="l07644"></a>07644       
<a name="l07645"></a>07645       <a class="code" href="buffer_8c.html#a23f67bdda323e69158b6e4587ad19649">buffer_putstr</a> (b, argv[i]);
<a name="l07646"></a>07646     }
<a name="l07647"></a>07647   <a class="code" href="buffer_8c.html#a3734e531dc5995ac29c055c4b66822d4">buffer_putc</a> (b, <span class="charliteral">&#39;\0&#39;</span>);
<a name="l07648"></a>07648 
<a name="l07649"></a>07649   str = <a class="code" href="buffer_8c.html#a75902fea80bfc9527677a70130208480">buffer_getstr</a> (b);
<a name="l07650"></a>07650   <a class="code" href="buffer_8c.html#a33630b21db5f9cda080c24c3175bde5a">buffer_free</a> (b);
<a name="l07651"></a>07651 
<a name="l07652"></a>07652   com = <a class="code" href="bgp__community_8c.html#ae6b14a28bd7622ffb1b9f5b20897e648">community_str2com</a> (str);
<a name="l07653"></a>07653   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, str);
<a name="l07654"></a>07654   <span class="keywordflow">if</span> (! com)
<a name="l07655"></a>07655     {
<a name="l07656"></a>07656       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Community malformed: %s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l07657"></a>07657       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l07658"></a>07658     }
<a name="l07659"></a>07659 
<a name="l07660"></a>07660   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi,
<a name="l07661"></a>07661                    (exact ? <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ac94e62cabbbff323965c5b03e3dc95bc">bgp_show_type_community_exact</a> :
<a name="l07662"></a>07662                     <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad8437fdb3062b2b91e286da9c08e450b">bgp_show_type_community</a>), com);
<a name="l07663"></a>07663 }
<a name="l07664"></a>07664 
<a name="l07665"></a>07665 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_community,
<a name="l07666"></a>07666        show_ip_bgp_community_cmd,
<a name="l07667"></a>07667        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07668"></a>07668        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07669"></a>07669        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07670"></a>07670        BGP_STR
<a name="l07671"></a>07671        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07672"></a>07672        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07673"></a>07673        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07674"></a>07674        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07675"></a>07675        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07676"></a>07676 {
<a name="l07677"></a>07677   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l07678"></a>07678 }
<a name="l07679"></a>07679 
<a name="l07680"></a>07680 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community,
<a name="l07681"></a>07681        show_ip_bgp_community2_cmd,
<a name="l07682"></a>07682        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07683"></a>07683        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07684"></a>07684        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07685"></a>07685        BGP_STR
<a name="l07686"></a>07686        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07687"></a>07687        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07688"></a>07688        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07689"></a>07689        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07690"></a>07690        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07691"></a>07691        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07692"></a>07692        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07693"></a>07693        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07694"></a>07694        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07695"></a>07695     
<a name="l07696"></a>07696 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community,
<a name="l07697"></a>07697        show_ip_bgp_community3_cmd,
<a name="l07698"></a>07698        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07699"></a>07699        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07700"></a>07700        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07701"></a>07701        BGP_STR
<a name="l07702"></a>07702        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07703"></a>07703        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07704"></a>07704        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07705"></a>07705        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07706"></a>07706        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07707"></a>07707        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07708"></a>07708        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07709"></a>07709        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07710"></a>07710        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07711"></a>07711        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07712"></a>07712        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07713"></a>07713        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07714"></a>07714        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07715"></a>07715     
<a name="l07716"></a>07716 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community,
<a name="l07717"></a>07717        show_ip_bgp_community4_cmd,
<a name="l07718"></a>07718        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07719"></a>07719        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07720"></a>07720        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07721"></a>07721        BGP_STR
<a name="l07722"></a>07722        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07723"></a>07723        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07724"></a>07724        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07725"></a>07725        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07726"></a>07726        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07727"></a>07727        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07728"></a>07728        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07729"></a>07729        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07730"></a>07730        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07731"></a>07731        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07732"></a>07732        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07733"></a>07733        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07734"></a>07734        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07735"></a>07735        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07736"></a>07736        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07737"></a>07737        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07738"></a>07738        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07739"></a>07739 
<a name="l07740"></a>07740 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_community,
<a name="l07741"></a>07741        show_ip_bgp_ipv4_community_cmd,
<a name="l07742"></a>07742        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07743"></a>07743        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07744"></a>07744        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07745"></a>07745        BGP_STR
<a name="l07746"></a>07746        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07747"></a>07747        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07748"></a>07748        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07749"></a>07749        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07750"></a>07750        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07751"></a>07751        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07752"></a>07752        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07753"></a>07753        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07754"></a>07754 {
<a name="l07755"></a>07755   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07756"></a>07756     <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l07757"></a>07757  
<a name="l07758"></a>07758   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l07759"></a>07759 }
<a name="l07760"></a>07760 
<a name="l07761"></a>07761 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community,
<a name="l07762"></a>07762        show_ip_bgp_ipv4_community2_cmd,
<a name="l07763"></a>07763        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07764"></a>07764        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07765"></a>07765        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07766"></a>07766        BGP_STR
<a name="l07767"></a>07767        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07768"></a>07768        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07769"></a>07769        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07770"></a>07770        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07771"></a>07771        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07772"></a>07772        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07773"></a>07773        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07774"></a>07774        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07775"></a>07775        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07776"></a>07776        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07777"></a>07777        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07778"></a>07778        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07779"></a>07779     
<a name="l07780"></a>07780 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community,
<a name="l07781"></a>07781        show_ip_bgp_ipv4_community3_cmd,
<a name="l07782"></a>07782        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07783"></a>07783        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07784"></a>07784        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07785"></a>07785        BGP_STR
<a name="l07786"></a>07786        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07787"></a>07787        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07788"></a>07788        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07789"></a>07789        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07790"></a>07790        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07791"></a>07791        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07792"></a>07792        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07793"></a>07793        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07794"></a>07794        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07795"></a>07795        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07796"></a>07796        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07797"></a>07797        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07798"></a>07798        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07799"></a>07799        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07800"></a>07800        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07801"></a>07801        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07802"></a>07802     
<a name="l07803"></a>07803 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community,
<a name="l07804"></a>07804        show_ip_bgp_ipv4_community4_cmd,
<a name="l07805"></a>07805        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l07806"></a>07806        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07807"></a>07807        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07808"></a>07808        BGP_STR
<a name="l07809"></a>07809        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07810"></a>07810        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07811"></a>07811        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07812"></a>07812        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07813"></a>07813        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07814"></a>07814        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07815"></a>07815        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07816"></a>07816        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07817"></a>07817        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07818"></a>07818        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07819"></a>07819        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07820"></a>07820        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07821"></a>07821        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07822"></a>07822        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07823"></a>07823        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07824"></a>07824        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07825"></a>07825        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07826"></a>07826        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07827"></a>07827        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07828"></a>07828        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l07829"></a>07829 
<a name="l07830"></a>07830 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_community_exact,
<a name="l07831"></a>07831        show_ip_bgp_community_exact_cmd,
<a name="l07832"></a>07832        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07833"></a>07833        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07834"></a>07834        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07835"></a>07835        BGP_STR
<a name="l07836"></a>07836        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07837"></a>07837        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07838"></a>07838        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07839"></a>07839        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07840"></a>07840        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07841"></a>07841        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07842"></a>07842 {
<a name="l07843"></a>07843   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l07844"></a>07844 }
<a name="l07845"></a>07845 
<a name="l07846"></a>07846 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community_exact,
<a name="l07847"></a>07847        show_ip_bgp_community2_exact_cmd,
<a name="l07848"></a>07848        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07849"></a>07849        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07850"></a>07850        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07851"></a>07851        BGP_STR
<a name="l07852"></a>07852        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07853"></a>07853        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07854"></a>07854        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07855"></a>07855        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07856"></a>07856        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07857"></a>07857        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07858"></a>07858        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07859"></a>07859        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07860"></a>07860        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07861"></a>07861        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07862"></a>07862 
<a name="l07863"></a>07863 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community_exact,
<a name="l07864"></a>07864        show_ip_bgp_community3_exact_cmd,
<a name="l07865"></a>07865        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07866"></a>07866        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07867"></a>07867        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07868"></a>07868        BGP_STR
<a name="l07869"></a>07869        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07870"></a>07870        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07871"></a>07871        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07872"></a>07872        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07873"></a>07873        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07874"></a>07874        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07875"></a>07875        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07876"></a>07876        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07877"></a>07877        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07878"></a>07878        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07879"></a>07879        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07880"></a>07880        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07881"></a>07881        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07882"></a>07882        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07883"></a>07883 
<a name="l07884"></a>07884 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_community_exact,
<a name="l07885"></a>07885        show_ip_bgp_community4_exact_cmd,
<a name="l07886"></a>07886        <span class="stringliteral">&quot;show ip bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07887"></a>07887        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07888"></a>07888        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07889"></a>07889        BGP_STR
<a name="l07890"></a>07890        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07891"></a>07891        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07892"></a>07892        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07893"></a>07893        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07894"></a>07894        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07895"></a>07895        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07896"></a>07896        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07897"></a>07897        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07898"></a>07898        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07899"></a>07899        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07900"></a>07900        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07901"></a>07901        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07902"></a>07902        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07903"></a>07903        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07904"></a>07904        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07905"></a>07905        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07906"></a>07906        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07907"></a>07907        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07908"></a>07908 
<a name="l07909"></a>07909 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_community_exact,
<a name="l07910"></a>07910        show_ip_bgp_ipv4_community_exact_cmd,
<a name="l07911"></a>07911        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07912"></a>07912        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07913"></a>07913        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07914"></a>07914        BGP_STR
<a name="l07915"></a>07915        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07916"></a>07916        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07917"></a>07917        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07918"></a>07918        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07919"></a>07919        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07920"></a>07920        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07921"></a>07921        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07922"></a>07922        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07923"></a>07923        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07924"></a>07924 {
<a name="l07925"></a>07925   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l07926"></a>07926     <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l07927"></a>07927  
<a name="l07928"></a>07928   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l07929"></a>07929 }
<a name="l07930"></a>07930 
<a name="l07931"></a>07931 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community_exact,
<a name="l07932"></a>07932        show_ip_bgp_ipv4_community2_exact_cmd,
<a name="l07933"></a>07933        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07934"></a>07934        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07935"></a>07935        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07936"></a>07936        BGP_STR
<a name="l07937"></a>07937        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07938"></a>07938        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07939"></a>07939        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07940"></a>07940        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07941"></a>07941        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07942"></a>07942        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07943"></a>07943        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07944"></a>07944        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07945"></a>07945        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07946"></a>07946        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07947"></a>07947        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07948"></a>07948        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07949"></a>07949        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07950"></a>07950 
<a name="l07951"></a>07951 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community_exact,
<a name="l07952"></a>07952        show_ip_bgp_ipv4_community3_exact_cmd,
<a name="l07953"></a>07953        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07954"></a>07954        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07955"></a>07955        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07956"></a>07956        BGP_STR
<a name="l07957"></a>07957        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07958"></a>07958        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07959"></a>07959        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07960"></a>07960        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07961"></a>07961        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07962"></a>07962        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07963"></a>07963        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07964"></a>07964        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07965"></a>07965        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07966"></a>07966        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07967"></a>07967        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07968"></a>07968        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07969"></a>07969        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07970"></a>07970        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07971"></a>07971        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07972"></a>07972        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07973"></a>07973        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l07974"></a>07974        
<a name="l07975"></a>07975 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_ipv4_community_exact,
<a name="l07976"></a>07976        show_ip_bgp_ipv4_community4_exact_cmd,
<a name="l07977"></a>07977        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l07978"></a>07978        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l07979"></a>07979        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l07980"></a>07980        BGP_STR
<a name="l07981"></a>07981        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l07982"></a>07982        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07983"></a>07983        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l07984"></a>07984        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l07985"></a>07985        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07986"></a>07986        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07987"></a>07987        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07988"></a>07988        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07989"></a>07989        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07990"></a>07990        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07991"></a>07991        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07992"></a>07992        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07993"></a>07993        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07994"></a>07994        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07995"></a>07995        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l07996"></a>07996        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l07997"></a>07997        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l07998"></a>07998        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l07999"></a>07999        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08000"></a>08000        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08001"></a>08001        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08002"></a>08002 
<a name="l08003"></a>08003 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l08004"></a>08004 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_community,
<a name="l08005"></a>08005        show_bgp_community_cmd,
<a name="l08006"></a>08006        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08007"></a>08007        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08008"></a>08008        BGP_STR
<a name="l08009"></a>08009        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08010"></a>08010        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08011"></a>08011        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08012"></a>08012        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08013"></a>08013        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08014"></a>08014 {
<a name="l08015"></a>08015   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08016"></a>08016 }
<a name="l08017"></a>08017 
<a name="l08018"></a>08018 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08019"></a>08019        show_bgp_ipv6_community_cmd,
<a name="l08020"></a>08020        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08021"></a>08021        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08022"></a>08022        BGP_STR
<a name="l08023"></a>08023        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08024"></a>08024        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08025"></a>08025        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08026"></a>08026        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08027"></a>08027        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08028"></a>08028        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08029"></a>08029 
<a name="l08030"></a>08030 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08031"></a>08031        show_bgp_community2_cmd,
<a name="l08032"></a>08032        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08033"></a>08033        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08034"></a>08034        BGP_STR
<a name="l08035"></a>08035        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08036"></a>08036        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08037"></a>08037        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08038"></a>08038        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08039"></a>08039        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08040"></a>08040        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08041"></a>08041        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08042"></a>08042        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08043"></a>08043        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08044"></a>08044 
<a name="l08045"></a>08045 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08046"></a>08046        show_bgp_ipv6_community2_cmd,
<a name="l08047"></a>08047        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08048"></a>08048        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08049"></a>08049        BGP_STR
<a name="l08050"></a>08050        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08051"></a>08051        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08052"></a>08052        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08053"></a>08053        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08054"></a>08054        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08055"></a>08055        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08056"></a>08056        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08057"></a>08057        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08058"></a>08058        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08059"></a>08059        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08060"></a>08060     
<a name="l08061"></a>08061 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08062"></a>08062        show_bgp_community3_cmd,
<a name="l08063"></a>08063        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08064"></a>08064        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08065"></a>08065        BGP_STR
<a name="l08066"></a>08066        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08067"></a>08067        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08068"></a>08068        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08069"></a>08069        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08070"></a>08070        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08071"></a>08071        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08072"></a>08072        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08073"></a>08073        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08074"></a>08074        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08075"></a>08075        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08076"></a>08076        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08077"></a>08077        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08078"></a>08078        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08079"></a>08079 
<a name="l08080"></a>08080 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08081"></a>08081        show_bgp_ipv6_community3_cmd,
<a name="l08082"></a>08082        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08083"></a>08083        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08084"></a>08084        BGP_STR
<a name="l08085"></a>08085        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08086"></a>08086        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08087"></a>08087        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08088"></a>08088        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08089"></a>08089        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08090"></a>08090        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08091"></a>08091        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08092"></a>08092        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08093"></a>08093        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08094"></a>08094        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08095"></a>08095        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08096"></a>08096        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08097"></a>08097        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08098"></a>08098        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08099"></a>08099 
<a name="l08100"></a>08100 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08101"></a>08101        show_bgp_community4_cmd,
<a name="l08102"></a>08102        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08103"></a>08103        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08104"></a>08104        BGP_STR
<a name="l08105"></a>08105        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08106"></a>08106        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08107"></a>08107        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08108"></a>08108        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08109"></a>08109        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08110"></a>08110        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08111"></a>08111        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08112"></a>08112        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08113"></a>08113        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08114"></a>08114        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08115"></a>08115        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08116"></a>08116        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08117"></a>08117        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08118"></a>08118        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08119"></a>08119        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08120"></a>08120        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08121"></a>08121        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08122"></a>08122 
<a name="l08123"></a>08123 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community,
<a name="l08124"></a>08124        show_bgp_ipv6_community4_cmd,
<a name="l08125"></a>08125        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08126"></a>08126        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08127"></a>08127        BGP_STR
<a name="l08128"></a>08128        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08129"></a>08129        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08130"></a>08130        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08131"></a>08131        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08132"></a>08132        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08133"></a>08133        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08134"></a>08134        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08135"></a>08135        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08136"></a>08136        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08137"></a>08137        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08138"></a>08138        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08139"></a>08139        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08140"></a>08140        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08141"></a>08141        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08142"></a>08142        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08143"></a>08143        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08144"></a>08144        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08145"></a>08145        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08146"></a>08146 
<a name="l08147"></a>08147 <span class="comment">/* old command */</span>
<a name="l08148"></a>08148 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_community,
<a name="l08149"></a>08149        show_ipv6_bgp_community_cmd,
<a name="l08150"></a>08150        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08151"></a>08151        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08152"></a>08152        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08153"></a>08153        BGP_STR
<a name="l08154"></a>08154        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08155"></a>08155        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08156"></a>08156        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08157"></a>08157        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08158"></a>08158        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08159"></a>08159 {
<a name="l08160"></a>08160   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08161"></a>08161 }
<a name="l08162"></a>08162 
<a name="l08163"></a>08163 <span class="comment">/* old command */</span>
<a name="l08164"></a>08164 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community,
<a name="l08165"></a>08165        show_ipv6_bgp_community2_cmd,
<a name="l08166"></a>08166        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08167"></a>08167        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08168"></a>08168        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08169"></a>08169        BGP_STR
<a name="l08170"></a>08170        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08171"></a>08171        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08172"></a>08172        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08173"></a>08173        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08174"></a>08174        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08175"></a>08175        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08176"></a>08176        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08177"></a>08177        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08178"></a>08178        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08179"></a>08179 
<a name="l08180"></a>08180 <span class="comment">/* old command */</span>
<a name="l08181"></a>08181 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community,
<a name="l08182"></a>08182        show_ipv6_bgp_community3_cmd,
<a name="l08183"></a>08183        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08184"></a>08184        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08185"></a>08185        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08186"></a>08186        BGP_STR
<a name="l08187"></a>08187        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08188"></a>08188        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08189"></a>08189        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08190"></a>08190        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08191"></a>08191        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08192"></a>08192        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08193"></a>08193        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08194"></a>08194        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08195"></a>08195        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08196"></a>08196        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08197"></a>08197        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08198"></a>08198        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08199"></a>08199        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08200"></a>08200 
<a name="l08201"></a>08201 <span class="comment">/* old command */</span>
<a name="l08202"></a>08202 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community,
<a name="l08203"></a>08203        show_ipv6_bgp_community4_cmd,
<a name="l08204"></a>08204        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08205"></a>08205        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08206"></a>08206        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08207"></a>08207        BGP_STR
<a name="l08208"></a>08208        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08209"></a>08209        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08210"></a>08210        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08211"></a>08211        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08212"></a>08212        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08213"></a>08213        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08214"></a>08214        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08215"></a>08215        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08216"></a>08216        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08217"></a>08217        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08218"></a>08218        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08219"></a>08219        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08220"></a>08220        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08221"></a>08221        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08222"></a>08222        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08223"></a>08223        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08224"></a>08224        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08225"></a>08225 
<a name="l08226"></a>08226 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_community_exact,
<a name="l08227"></a>08227        show_bgp_community_exact_cmd,
<a name="l08228"></a>08228        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08229"></a>08229        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08230"></a>08230        BGP_STR
<a name="l08231"></a>08231        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08232"></a>08232        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08233"></a>08233        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08234"></a>08234        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08235"></a>08235        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08236"></a>08236        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08237"></a>08237 {
<a name="l08238"></a>08238   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08239"></a>08239 }
<a name="l08240"></a>08240 
<a name="l08241"></a>08241 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08242"></a>08242        show_bgp_ipv6_community_exact_cmd,
<a name="l08243"></a>08243        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08244"></a>08244        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08245"></a>08245        BGP_STR
<a name="l08246"></a>08246        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08247"></a>08247        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08248"></a>08248        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08249"></a>08249        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08250"></a>08250        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08251"></a>08251        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08252"></a>08252        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08253"></a>08253 
<a name="l08254"></a>08254 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08255"></a>08255        show_bgp_community2_exact_cmd,
<a name="l08256"></a>08256        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08257"></a>08257        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08258"></a>08258        BGP_STR
<a name="l08259"></a>08259        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08260"></a>08260        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08261"></a>08261        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08262"></a>08262        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08263"></a>08263        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08264"></a>08264        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08265"></a>08265        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08266"></a>08266        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08267"></a>08267        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08268"></a>08268        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08269"></a>08269 
<a name="l08270"></a>08270 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08271"></a>08271        show_bgp_ipv6_community2_exact_cmd,
<a name="l08272"></a>08272        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08273"></a>08273        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08274"></a>08274        BGP_STR
<a name="l08275"></a>08275        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08276"></a>08276        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08277"></a>08277        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08278"></a>08278        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08279"></a>08279        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08280"></a>08280        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08281"></a>08281        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08282"></a>08282        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08283"></a>08283        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08284"></a>08284        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08285"></a>08285        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08286"></a>08286 
<a name="l08287"></a>08287 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08288"></a>08288        show_bgp_community3_exact_cmd,
<a name="l08289"></a>08289        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08290"></a>08290        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08291"></a>08291        BGP_STR
<a name="l08292"></a>08292        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08293"></a>08293        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08294"></a>08294        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08295"></a>08295        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08296"></a>08296        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08297"></a>08297        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08298"></a>08298        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08299"></a>08299        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08300"></a>08300        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08301"></a>08301        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08302"></a>08302        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08303"></a>08303        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08304"></a>08304        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08305"></a>08305        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08306"></a>08306 
<a name="l08307"></a>08307 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08308"></a>08308        show_bgp_ipv6_community3_exact_cmd,
<a name="l08309"></a>08309        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08310"></a>08310        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08311"></a>08311        BGP_STR
<a name="l08312"></a>08312        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08313"></a>08313        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08314"></a>08314        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08315"></a>08315        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08316"></a>08316        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08317"></a>08317        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08318"></a>08318        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08319"></a>08319        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08320"></a>08320        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08321"></a>08321        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08322"></a>08322        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08323"></a>08323        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08324"></a>08324        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08325"></a>08325        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08326"></a>08326        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08327"></a>08327 
<a name="l08328"></a>08328 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08329"></a>08329        show_bgp_community4_exact_cmd,
<a name="l08330"></a>08330        <span class="stringliteral">&quot;show bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08331"></a>08331        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08332"></a>08332        BGP_STR
<a name="l08333"></a>08333        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08334"></a>08334        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08335"></a>08335        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08336"></a>08336        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08337"></a>08337        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08338"></a>08338        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08339"></a>08339        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08340"></a>08340        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08341"></a>08341        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08342"></a>08342        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08343"></a>08343        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08344"></a>08344        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08345"></a>08345        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08346"></a>08346        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08347"></a>08347        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08348"></a>08348        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08349"></a>08349        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08350"></a>08350        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08351"></a>08351  
<a name="l08352"></a>08352 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_exact,
<a name="l08353"></a>08353        show_bgp_ipv6_community4_exact_cmd,
<a name="l08354"></a>08354        <span class="stringliteral">&quot;show bgp ipv6 community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08355"></a>08355        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08356"></a>08356        BGP_STR
<a name="l08357"></a>08357        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08358"></a>08358        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08359"></a>08359        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08360"></a>08360        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08361"></a>08361        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08362"></a>08362        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08363"></a>08363        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08364"></a>08364        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08365"></a>08365        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08366"></a>08366        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08367"></a>08367        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08368"></a>08368        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08369"></a>08369        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08370"></a>08370        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08371"></a>08371        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08372"></a>08372        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08373"></a>08373        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08374"></a>08374        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08375"></a>08375        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08376"></a>08376 
<a name="l08377"></a>08377 <span class="comment">/* old command */</span>
<a name="l08378"></a>08378 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_community_exact,
<a name="l08379"></a>08379        show_ipv6_bgp_community_exact_cmd,
<a name="l08380"></a>08380        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08381"></a>08381        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08382"></a>08382        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08383"></a>08383        BGP_STR
<a name="l08384"></a>08384        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08385"></a>08385        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08386"></a>08386        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08387"></a>08387        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08388"></a>08388        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08389"></a>08389        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08390"></a>08390 {
<a name="l08391"></a>08391   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08392"></a>08392 }
<a name="l08393"></a>08393 
<a name="l08394"></a>08394 <span class="comment">/* old command */</span>
<a name="l08395"></a>08395 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community_exact,
<a name="l08396"></a>08396        show_ipv6_bgp_community2_exact_cmd,
<a name="l08397"></a>08397        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08398"></a>08398        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08399"></a>08399        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08400"></a>08400        BGP_STR
<a name="l08401"></a>08401        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08402"></a>08402        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08403"></a>08403        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08404"></a>08404        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08405"></a>08405        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08406"></a>08406        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08407"></a>08407        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08408"></a>08408        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08409"></a>08409        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08410"></a>08410        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08411"></a>08411 
<a name="l08412"></a>08412 <span class="comment">/* old command */</span>
<a name="l08413"></a>08413 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community_exact,
<a name="l08414"></a>08414        show_ipv6_bgp_community3_exact_cmd,
<a name="l08415"></a>08415        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08416"></a>08416        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08417"></a>08417        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08418"></a>08418        BGP_STR
<a name="l08419"></a>08419        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08420"></a>08420        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08421"></a>08421        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08422"></a>08422        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08423"></a>08423        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08424"></a>08424        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08425"></a>08425        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08426"></a>08426        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08427"></a>08427        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08428"></a>08428        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08429"></a>08429        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08430"></a>08430        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08431"></a>08431        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08432"></a>08432        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08433"></a>08433 
<a name="l08434"></a>08434 <span class="comment">/* old command */</span>
<a name="l08435"></a>08435 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_bgp_community_exact,
<a name="l08436"></a>08436        show_ipv6_bgp_community4_exact_cmd,
<a name="l08437"></a>08437        <span class="stringliteral">&quot;show ipv6 bgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08438"></a>08438        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08439"></a>08439        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08440"></a>08440        BGP_STR
<a name="l08441"></a>08441        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08442"></a>08442        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08443"></a>08443        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08444"></a>08444        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08445"></a>08445        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08446"></a>08446        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08447"></a>08447        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08448"></a>08448        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08449"></a>08449        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08450"></a>08450        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08451"></a>08451        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08452"></a>08452        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08453"></a>08453        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08454"></a>08454        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08455"></a>08455        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08456"></a>08456        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08457"></a>08457        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08458"></a>08458        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08459"></a>08459  
<a name="l08460"></a>08460 <span class="comment">/* old command */</span>
<a name="l08461"></a>08461 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_community,
<a name="l08462"></a>08462        show_ipv6_mbgp_community_cmd,
<a name="l08463"></a>08463        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08464"></a>08464        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08465"></a>08465        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08466"></a>08466        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08467"></a>08467        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08468"></a>08468        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08469"></a>08469        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08470"></a>08470        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08471"></a>08471        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08472"></a>08472 {
<a name="l08473"></a>08473   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08474"></a>08474 }
<a name="l08475"></a>08475 
<a name="l08476"></a>08476 <span class="comment">/* old command */</span>
<a name="l08477"></a>08477 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community,
<a name="l08478"></a>08478        show_ipv6_mbgp_community2_cmd,
<a name="l08479"></a>08479        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08480"></a>08480        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08481"></a>08481        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08482"></a>08482        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08483"></a>08483        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08484"></a>08484        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08485"></a>08485        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08486"></a>08486        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08487"></a>08487        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08488"></a>08488        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08489"></a>08489        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08490"></a>08490        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08491"></a>08491        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08492"></a>08492 
<a name="l08493"></a>08493 <span class="comment">/* old command */</span>
<a name="l08494"></a>08494 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community,
<a name="l08495"></a>08495        show_ipv6_mbgp_community3_cmd,
<a name="l08496"></a>08496        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08497"></a>08497        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08498"></a>08498        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08499"></a>08499        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08500"></a>08500        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08501"></a>08501        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08502"></a>08502        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08503"></a>08503        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08504"></a>08504        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08505"></a>08505        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08506"></a>08506        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08507"></a>08507        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08508"></a>08508        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08509"></a>08509        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08510"></a>08510        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08511"></a>08511        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08512"></a>08512        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08513"></a>08513 
<a name="l08514"></a>08514 <span class="comment">/* old command */</span>
<a name="l08515"></a>08515 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community,
<a name="l08516"></a>08516        show_ipv6_mbgp_community4_cmd,
<a name="l08517"></a>08517        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export)&quot;</span>,
<a name="l08518"></a>08518        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08519"></a>08519        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08520"></a>08520        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08521"></a>08521        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08522"></a>08522        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08523"></a>08523        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08524"></a>08524        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08525"></a>08525        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08526"></a>08526        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08527"></a>08527        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08528"></a>08528        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08529"></a>08529        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08530"></a>08530        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08531"></a>08531        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08532"></a>08532        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08533"></a>08533        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08534"></a>08534        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08535"></a>08535        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08536"></a>08536        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08537"></a>08537        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>)
<a name="l08538"></a>08538 
<a name="l08539"></a>08539 <span class="comment">/* old command */</span>
<a name="l08540"></a>08540 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_community_exact,
<a name="l08541"></a>08541        show_ipv6_mbgp_community_exact_cmd,
<a name="l08542"></a>08542        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08543"></a>08543        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08544"></a>08544        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08545"></a>08545        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08546"></a>08546        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08547"></a>08547        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08548"></a>08548        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08549"></a>08549        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08550"></a>08550        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08551"></a>08551        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08552"></a>08552 {
<a name="l08553"></a>08553   <span class="keywordflow">return</span> bgp_show_community (vty, argc, argv, 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08554"></a>08554 }
<a name="l08555"></a>08555 
<a name="l08556"></a>08556 <span class="comment">/* old command */</span>
<a name="l08557"></a>08557 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community_exact,
<a name="l08558"></a>08558        show_ipv6_mbgp_community2_exact_cmd,
<a name="l08559"></a>08559        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08560"></a>08560        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08561"></a>08561        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08562"></a>08562        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08563"></a>08563        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08564"></a>08564        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08565"></a>08565        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08566"></a>08566        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08567"></a>08567        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08568"></a>08568        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08569"></a>08569        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08570"></a>08570        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08571"></a>08571        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08572"></a>08572        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08573"></a>08573 
<a name="l08574"></a>08574 <span class="comment">/* old command */</span>
<a name="l08575"></a>08575 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community_exact,
<a name="l08576"></a>08576        show_ipv6_mbgp_community3_exact_cmd,
<a name="l08577"></a>08577        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08578"></a>08578        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08579"></a>08579        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08580"></a>08580        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08581"></a>08581        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08582"></a>08582        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08583"></a>08583        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08584"></a>08584        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08585"></a>08585        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08586"></a>08586        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08587"></a>08587        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08588"></a>08588        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08589"></a>08589        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08590"></a>08590        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08591"></a>08591        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08592"></a>08592        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08593"></a>08593        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08594"></a>08594        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08595"></a>08595 
<a name="l08596"></a>08596 <span class="comment">/* old command */</span>
<a name="l08597"></a>08597 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ipv6_mbgp_community_exact,
<a name="l08598"></a>08598        show_ipv6_mbgp_community4_exact_cmd,
<a name="l08599"></a>08599        <span class="stringliteral">&quot;show ipv6 mbgp community (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) (AA:NN|local-AS|no-advertise|no-export) exact-match&quot;</span>,
<a name="l08600"></a>08600        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08601"></a>08601        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08602"></a>08602        <a class="code" href="command_8h.html#a1e4cc9c0c2f29229182af13058f339c3">MBGP_STR</a>
<a name="l08603"></a>08603        <span class="stringliteral">&quot;Display routes matching the communities\n&quot;</span>
<a name="l08604"></a>08604        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08605"></a>08605        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08606"></a>08606        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08607"></a>08607        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08608"></a>08608        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08609"></a>08609        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08610"></a>08610        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08611"></a>08611        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08612"></a>08612        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08613"></a>08613        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08614"></a>08614        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08615"></a>08615        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08616"></a>08616        <span class="stringliteral">&quot;community number\n&quot;</span>
<a name="l08617"></a>08617        <span class="stringliteral">&quot;Do not send outside local AS (well-known community)\n&quot;</span>
<a name="l08618"></a>08618        <span class="stringliteral">&quot;Do not advertise to any peer (well-known community)\n&quot;</span>
<a name="l08619"></a>08619        <span class="stringliteral">&quot;Do not export to next AS (well-known community)\n&quot;</span>
<a name="l08620"></a>08620        <span class="stringliteral">&quot;Exact match of the communities&quot;</span>)
<a name="l08621"></a>08621 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l08622"></a>08622 
<a name="l08623"></a>08623 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l08624"></a>08624 bgp_show_community_list (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *com, <span class="keywordtype">int</span> exact,
<a name="l08625"></a>08625              u_int16_t afi, u_char safi)
<a name="l08626"></a>08626 {
<a name="l08627"></a>08627   <span class="keyword">struct </span><a class="code" href="structcommunity__list.html">community_list</a> *list;
<a name="l08628"></a>08628 
<a name="l08629"></a>08629   list = <a class="code" href="bgp__clist_8c.html#a2c0159e743b11dc2143b7f74a65ce156">community_list_lookup</a> (<a class="code" href="bgp__clist_8h.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">bgp_clist</a>, com, <a class="code" href="bgp__clist_8h.html#a71bf5583c66d28746342ec73632efe06">COMMUNITY_LIST_MASTER</a>);
<a name="l08630"></a>08630   <span class="keywordflow">if</span> (list == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l08631"></a>08631     {
<a name="l08632"></a>08632       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% %s is not a valid community-list name%s&quot;</span>, com,
<a name="l08633"></a>08633            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08634"></a>08634       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l08635"></a>08635     }
<a name="l08636"></a>08636 
<a name="l08637"></a>08637   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi,
<a name="l08638"></a>08638                    (exact ? <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224ad96b9b7d195891fcfa7f1fcd78c2f0ab">bgp_show_type_community_list_exact</a> :
<a name="l08639"></a>08639                     <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a3a0f3c2a33d58490f67f74ba8ca3d4c7">bgp_show_type_community_list</a>), list);
<a name="l08640"></a>08640 }
<a name="l08641"></a>08641 
<a name="l08642"></a>08642 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_community_list,
<a name="l08643"></a>08643        show_ip_bgp_community_list_cmd,
<a name="l08644"></a>08644        <span class="stringliteral">&quot;show ip bgp community-list (&lt;1-500&gt;|WORD)&quot;</span>,
<a name="l08645"></a>08645        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08646"></a>08646        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08647"></a>08647        BGP_STR
<a name="l08648"></a>08648        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08649"></a>08649        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08650"></a>08650        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08651"></a>08651 {
<a name="l08652"></a>08652   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l08653"></a>08653 }
<a name="l08654"></a>08654 
<a name="l08655"></a>08655 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_community_list,
<a name="l08656"></a>08656        show_ip_bgp_ipv4_community_list_cmd,
<a name="l08657"></a>08657        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community-list (&lt;1-500&gt;|WORD)&quot;</span>,
<a name="l08658"></a>08658        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08659"></a>08659        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08660"></a>08660        BGP_STR
<a name="l08661"></a>08661        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08662"></a>08662        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08663"></a>08663        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08664"></a>08664        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08665"></a>08665        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08666"></a>08666        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08667"></a>08667 {
<a name="l08668"></a>08668   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l08669"></a>08669     <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[1], 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08670"></a>08670   
<a name="l08671"></a>08671   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[1], 0, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l08672"></a>08672 }
<a name="l08673"></a>08673 
<a name="l08674"></a>08674 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_community_list_exact,
<a name="l08675"></a>08675        show_ip_bgp_community_list_exact_cmd,
<a name="l08676"></a>08676        <span class="stringliteral">&quot;show ip bgp community-list (&lt;1-500&gt;|WORD) exact-match&quot;</span>,
<a name="l08677"></a>08677        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08678"></a>08678        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08679"></a>08679        BGP_STR
<a name="l08680"></a>08680        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08681"></a>08681        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08682"></a>08682        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08683"></a>08683        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08684"></a>08684 {
<a name="l08685"></a>08685   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l08686"></a>08686 }
<a name="l08687"></a>08687 
<a name="l08688"></a>08688 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_community_list_exact,
<a name="l08689"></a>08689        show_ip_bgp_ipv4_community_list_exact_cmd,
<a name="l08690"></a>08690        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) community-list (&lt;1-500&gt;|WORD) exact-match&quot;</span>,
<a name="l08691"></a>08691        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08692"></a>08692        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08693"></a>08693        BGP_STR
<a name="l08694"></a>08694        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08695"></a>08695        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08696"></a>08696        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08697"></a>08697        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08698"></a>08698        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08699"></a>08699        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08700"></a>08700        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08701"></a>08701 {
<a name="l08702"></a>08702   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l08703"></a>08703     <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[1], 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08704"></a>08704  
<a name="l08705"></a>08705   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[1], 1, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l08706"></a>08706 }
<a name="l08707"></a>08707 
<a name="l08708"></a>08708 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l08709"></a>08709 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_community_list,
<a name="l08710"></a>08710        show_bgp_community_list_cmd,
<a name="l08711"></a>08711        <span class="stringliteral">&quot;show bgp community-list (&lt;1-500&gt;|WORD)&quot;</span>,
<a name="l08712"></a>08712        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08713"></a>08713        BGP_STR
<a name="l08714"></a>08714        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08715"></a>08715        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08716"></a>08716        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08717"></a>08717 {
<a name="l08718"></a>08718   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08719"></a>08719 }
<a name="l08720"></a>08720 
<a name="l08721"></a>08721 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_list,
<a name="l08722"></a>08722        show_bgp_ipv6_community_list_cmd,
<a name="l08723"></a>08723        <span class="stringliteral">&quot;show bgp ipv6 community-list (&lt;1-500&gt;|WORD)&quot;</span>,
<a name="l08724"></a>08724        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08725"></a>08725        BGP_STR
<a name="l08726"></a>08726        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08727"></a>08727        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08728"></a>08728        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08729"></a>08729        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08730"></a>08730 
<a name="l08731"></a>08731 <span class="comment">/* old command */</span>
<a name="l08732"></a>08732 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_community_list,
<a name="l08733"></a>08733        show_ipv6_bgp_community_list_cmd,
<a name="l08734"></a>08734        <span class="stringliteral">&quot;show ipv6 bgp community-list WORD&quot;</span>,
<a name="l08735"></a>08735        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08736"></a>08736        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08737"></a>08737        BGP_STR
<a name="l08738"></a>08738        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08739"></a>08739        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08740"></a>08740 {
<a name="l08741"></a>08741   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08742"></a>08742 }
<a name="l08743"></a>08743 
<a name="l08744"></a>08744 <span class="comment">/* old command */</span>
<a name="l08745"></a>08745 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_community_list,
<a name="l08746"></a>08746        show_ipv6_mbgp_community_list_cmd,
<a name="l08747"></a>08747        <span class="stringliteral">&quot;show ipv6 mbgp community-list WORD&quot;</span>,
<a name="l08748"></a>08748        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08749"></a>08749        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08750"></a>08750        MBGP_STR
<a name="l08751"></a>08751        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08752"></a>08752        <span class="stringliteral">&quot;community-list name\n&quot;</span>)
<a name="l08753"></a>08753 {
<a name="l08754"></a>08754   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 0, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08755"></a>08755 }
<a name="l08756"></a>08756 
<a name="l08757"></a>08757 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_community_list_exact,
<a name="l08758"></a>08758        show_bgp_community_list_exact_cmd,
<a name="l08759"></a>08759        <span class="stringliteral">&quot;show bgp community-list (&lt;1-500&gt;|WORD) exact-match&quot;</span>,
<a name="l08760"></a>08760        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08761"></a>08761        BGP_STR
<a name="l08762"></a>08762        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08763"></a>08763        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08764"></a>08764        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08765"></a>08765        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08766"></a>08766 {
<a name="l08767"></a>08767   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08768"></a>08768 }
<a name="l08769"></a>08769 
<a name="l08770"></a>08770 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_community_list_exact,
<a name="l08771"></a>08771        show_bgp_ipv6_community_list_exact_cmd,
<a name="l08772"></a>08772        <span class="stringliteral">&quot;show bgp ipv6 community-list (&lt;1-500&gt;|WORD) exact-match&quot;</span>,
<a name="l08773"></a>08773        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08774"></a>08774        BGP_STR
<a name="l08775"></a>08775        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08776"></a>08776        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08777"></a>08777        <span class="stringliteral">&quot;community-list number\n&quot;</span>
<a name="l08778"></a>08778        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08779"></a>08779        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08780"></a>08780 
<a name="l08781"></a>08781 <span class="comment">/* old command */</span>
<a name="l08782"></a>08782 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_community_list_exact,
<a name="l08783"></a>08783        show_ipv6_bgp_community_list_exact_cmd,
<a name="l08784"></a>08784        <span class="stringliteral">&quot;show ipv6 bgp community-list WORD exact-match&quot;</span>,
<a name="l08785"></a>08785        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08786"></a>08786        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08787"></a>08787        BGP_STR
<a name="l08788"></a>08788        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08789"></a>08789        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08790"></a>08790        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08791"></a>08791 {
<a name="l08792"></a>08792   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l08793"></a>08793 }
<a name="l08794"></a>08794 
<a name="l08795"></a>08795 <span class="comment">/* old command */</span>
<a name="l08796"></a>08796 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_community_list_exact,
<a name="l08797"></a>08797        show_ipv6_mbgp_community_list_exact_cmd,
<a name="l08798"></a>08798        <span class="stringliteral">&quot;show ipv6 mbgp community-list WORD exact-match&quot;</span>,
<a name="l08799"></a>08799        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08800"></a>08800        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08801"></a>08801        MBGP_STR
<a name="l08802"></a>08802        <span class="stringliteral">&quot;Display routes matching the community-list\n&quot;</span>
<a name="l08803"></a>08803        <span class="stringliteral">&quot;community-list name\n&quot;</span>
<a name="l08804"></a>08804        <span class="stringliteral">&quot;Exact match of the communities\n&quot;</span>)
<a name="l08805"></a>08805 {
<a name="l08806"></a>08806   <span class="keywordflow">return</span> bgp_show_community_list (vty, argv[0], 1, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l08807"></a>08807 }
<a name="l08808"></a>08808 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l08809"></a>08809 
<a name="l08810"></a>08810 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l08811"></a>08811 bgp_show_prefix_longer (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l08812"></a>08812             <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l08813"></a>08813 {
<a name="l08814"></a>08814   <span class="keywordtype">int</span> ret;
<a name="l08815"></a>08815   <span class="keyword">struct </span>prefix *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l08816"></a>08816 
<a name="l08817"></a>08817   p = <a class="code" href="prefix_8c.html#a334dfe0b68e0de68379895a8ff3057e7">prefix_new</a>();
<a name="l08818"></a>08818 
<a name="l08819"></a>08819   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (prefix, p);
<a name="l08820"></a>08820   <span class="keywordflow">if</span> (! ret)
<a name="l08821"></a>08821     {
<a name="l08822"></a>08822       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed Prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08823"></a>08823       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l08824"></a>08824     }
<a name="l08825"></a>08825 
<a name="l08826"></a>08826   ret = bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, afi, safi, type, p);
<a name="l08827"></a>08827   <a class="code" href="prefix_8c.html#a5d8a68bc25fb973c471e61aaeb76a015">prefix_free</a>(p);
<a name="l08828"></a>08828   <span class="keywordflow">return</span> ret;
<a name="l08829"></a>08829 }
<a name="l08830"></a>08830 
<a name="l08831"></a>08831 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_prefix_longer,
<a name="l08832"></a>08832        show_ip_bgp_prefix_longer_cmd,
<a name="l08833"></a>08833        <span class="stringliteral">&quot;show ip bgp A.B.C.D/M longer-prefixes&quot;</span>,
<a name="l08834"></a>08834        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08835"></a>08835        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08836"></a>08836        BGP_STR
<a name="l08837"></a>08837        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l08838"></a>08838        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08839"></a>08839 {
<a name="l08840"></a>08840   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l08841"></a>08841                  <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08842"></a>08842 }
<a name="l08843"></a>08843 
<a name="l08844"></a>08844 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_prefix_longer,
<a name="l08845"></a>08845        show_ip_bgp_flap_prefix_longer_cmd,
<a name="l08846"></a>08846        <span class="stringliteral">&quot;show ip bgp flap-statistics A.B.C.D/M longer-prefixes&quot;</span>,
<a name="l08847"></a>08847        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08848"></a>08848        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08849"></a>08849        BGP_STR
<a name="l08850"></a>08850        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l08851"></a>08851        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l08852"></a>08852        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08853"></a>08853 {
<a name="l08854"></a>08854   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l08855"></a>08855                  bgp_show_type_flap_prefix_longer);
<a name="l08856"></a>08856 }
<a name="l08857"></a>08857 
<a name="l08858"></a>08858 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_prefix_longer,
<a name="l08859"></a>08859        show_ip_bgp_ipv4_prefix_longer_cmd,
<a name="l08860"></a>08860        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) A.B.C.D/M longer-prefixes&quot;</span>,
<a name="l08861"></a>08861        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08862"></a>08862        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08863"></a>08863        BGP_STR
<a name="l08864"></a>08864        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08865"></a>08865        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08866"></a>08866        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l08867"></a>08867        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l08868"></a>08868        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08869"></a>08869 {
<a name="l08870"></a>08870   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l08871"></a>08871     <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l08872"></a>08872                    <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08873"></a>08873 
<a name="l08874"></a>08874   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[1], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l08875"></a>08875                  <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08876"></a>08876 }
<a name="l08877"></a>08877 
<a name="l08878"></a>08878 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_address,
<a name="l08879"></a>08879        show_ip_bgp_flap_address_cmd,
<a name="l08880"></a>08880        <span class="stringliteral">&quot;show ip bgp flap-statistics A.B.C.D&quot;</span>,
<a name="l08881"></a>08881        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08882"></a>08882        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08883"></a>08883        BGP_STR
<a name="l08884"></a>08884        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l08885"></a>08885        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l08886"></a>08886 {
<a name="l08887"></a>08887   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l08888"></a>08888                  bgp_show_type_flap_address);
<a name="l08889"></a>08889 }
<a name="l08890"></a>08890 
<a name="l08891"></a>08891 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_prefix,
<a name="l08892"></a>08892        show_ip_bgp_flap_prefix_cmd,
<a name="l08893"></a>08893        <span class="stringliteral">&quot;show ip bgp flap-statistics A.B.C.D/M&quot;</span>,
<a name="l08894"></a>08894        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08895"></a>08895        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l08896"></a>08896        BGP_STR
<a name="l08897"></a>08897        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>
<a name="l08898"></a>08898        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l08899"></a>08899 {
<a name="l08900"></a>08900   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l08901"></a>08901                  bgp_show_type_flap_prefix);
<a name="l08902"></a>08902 }
<a name="l08903"></a>08903 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l08904"></a>08904 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_prefix_longer,
<a name="l08905"></a>08905        show_bgp_prefix_longer_cmd,
<a name="l08906"></a>08906        <span class="stringliteral">&quot;show bgp X:X::X:X/M longer-prefixes&quot;</span>,
<a name="l08907"></a>08907        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08908"></a>08908        BGP_STR
<a name="l08909"></a>08909        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>
<a name="l08910"></a>08910        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08911"></a>08911 {
<a name="l08912"></a>08912   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l08913"></a>08913                  <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08914"></a>08914 }
<a name="l08915"></a>08915 
<a name="l08916"></a>08916 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_prefix_longer,
<a name="l08917"></a>08917        show_bgp_ipv6_prefix_longer_cmd,
<a name="l08918"></a>08918        <span class="stringliteral">&quot;show bgp ipv6 X:X::X:X/M longer-prefixes&quot;</span>,
<a name="l08919"></a>08919        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08920"></a>08920        BGP_STR
<a name="l08921"></a>08921        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l08922"></a>08922        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>
<a name="l08923"></a>08923        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08924"></a>08924 
<a name="l08925"></a>08925 <span class="comment">/* old command */</span>
<a name="l08926"></a>08926 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_bgp_prefix_longer,
<a name="l08927"></a>08927        show_ipv6_bgp_prefix_longer_cmd,
<a name="l08928"></a>08928        <span class="stringliteral">&quot;show ipv6 bgp X:X::X:X/M longer-prefixes&quot;</span>,
<a name="l08929"></a>08929        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08930"></a>08930        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08931"></a>08931        BGP_STR
<a name="l08932"></a>08932        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l08933"></a>08933        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08934"></a>08934 {
<a name="l08935"></a>08935   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l08936"></a>08936                  <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08937"></a>08937 }
<a name="l08938"></a>08938 
<a name="l08939"></a>08939 <span class="comment">/* old command */</span>
<a name="l08940"></a>08940 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_mbgp_prefix_longer,
<a name="l08941"></a>08941        show_ipv6_mbgp_prefix_longer_cmd,
<a name="l08942"></a>08942        <span class="stringliteral">&quot;show ipv6 mbgp X:X::X:X/M longer-prefixes&quot;</span>,
<a name="l08943"></a>08943        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l08944"></a>08944        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l08945"></a>08945        MBGP_STR
<a name="l08946"></a>08946        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l08947"></a>08947        <span class="stringliteral">&quot;Display route and more specific routes\n&quot;</span>)
<a name="l08948"></a>08948 {
<a name="l08949"></a>08949   <span class="keywordflow">return</span> bgp_show_prefix_longer (vty, argv[0], <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l08950"></a>08950                  <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a2499ca18f107f909d7c97242740d9f86">bgp_show_type_prefix_longer</a>);
<a name="l08951"></a>08951 }
<a name="l08952"></a>08952 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l08953"></a>08953 
<a name="l08954"></a>08954 <span class="keyword">static</span> <span class="keyword">struct </span>peer *
<a name="l08955"></a>08955 peer_lookup_in_view (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *view_name, 
<a name="l08956"></a>08956                      <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str)
<a name="l08957"></a>08957 {
<a name="l08958"></a>08958   <span class="keywordtype">int</span> ret;
<a name="l08959"></a>08959   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l08960"></a>08960   <span class="keyword">struct </span>peer *peer;
<a name="l08961"></a>08961   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> su;
<a name="l08962"></a>08962 
<a name="l08963"></a>08963   <span class="comment">/* BGP structure lookup. */</span>
<a name="l08964"></a>08964   <span class="keywordflow">if</span> (view_name)
<a name="l08965"></a>08965     {
<a name="l08966"></a>08966       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (view_name);
<a name="l08967"></a>08967       <span class="keywordflow">if</span> (! bgp)
<a name="l08968"></a>08968         {
<a name="l08969"></a>08969           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, view_name, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08970"></a>08970           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l08971"></a>08971         }      
<a name="l08972"></a>08972     }
<a name="l08973"></a>08973   <span class="keywordflow">else</span>
<a name="l08974"></a>08974     {
<a name="l08975"></a>08975       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l08976"></a>08976       <span class="keywordflow">if</span> (! bgp)
<a name="l08977"></a>08977         {
<a name="l08978"></a>08978           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08979"></a>08979           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l08980"></a>08980         }
<a name="l08981"></a>08981     }
<a name="l08982"></a>08982 
<a name="l08983"></a>08983   <span class="comment">/* Get peer sockunion. */</span>  
<a name="l08984"></a>08984   ret = <a class="code" href="sockunion_8c.html#aaa4fbd35d2f9346b70e0d6c9e66cae79">str2sockunion</a> (ip_str, &amp;su);
<a name="l08985"></a>08985   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l08986"></a>08986     {
<a name="l08987"></a>08987       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed address: %s%s&quot;</span>, ip_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08988"></a>08988       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l08989"></a>08989     }
<a name="l08990"></a>08990 
<a name="l08991"></a>08991   <span class="comment">/* Peer structure lookup. */</span>
<a name="l08992"></a>08992   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, &amp;su);
<a name="l08993"></a>08993   <span class="keywordflow">if</span> (! peer)
<a name="l08994"></a>08994     {
<a name="l08995"></a>08995       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No such neighbor%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l08996"></a>08996       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l08997"></a>08997     }
<a name="l08998"></a>08998   
<a name="l08999"></a>08999   <span class="keywordflow">return</span> peer;
<a name="l09000"></a>09000 }
<a name="l09001"></a>09001 
<a name="l09002"></a>09002 <span class="keyword">enum</span> bgp_stats
<a name="l09003"></a>09003 {
<a name="l09004"></a>09004   BGP_STATS_MAXBITLEN = 0,
<a name="l09005"></a>09005   BGP_STATS_RIB,
<a name="l09006"></a>09006   BGP_STATS_PREFIXES,
<a name="l09007"></a>09007   BGP_STATS_TOTPLEN,
<a name="l09008"></a>09008   BGP_STATS_UNAGGREGATEABLE,
<a name="l09009"></a>09009   BGP_STATS_MAX_AGGREGATEABLE,
<a name="l09010"></a>09010   BGP_STATS_AGGREGATES,
<a name="l09011"></a>09011   BGP_STATS_SPACE,
<a name="l09012"></a>09012   BGP_STATS_ASPATH_COUNT,
<a name="l09013"></a>09013   BGP_STATS_ASPATH_MAXHOPS,
<a name="l09014"></a>09014   BGP_STATS_ASPATH_TOTHOPS,
<a name="l09015"></a>09015   BGP_STATS_ASPATH_MAXSIZE,
<a name="l09016"></a>09016   BGP_STATS_ASPATH_TOTSIZE,
<a name="l09017"></a>09017   BGP_STATS_ASN_HIGHEST,
<a name="l09018"></a>09018   BGP_STATS_MAX,
<a name="l09019"></a>09019 };
<a name="l09020"></a>09020 
<a name="l09021"></a>09021 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *table_stats_strs[] =
<a name="l09022"></a>09022 {
<a name="l09023"></a>09023   [BGP_STATS_PREFIXES]            = <span class="stringliteral">&quot;Total Prefixes&quot;</span>,
<a name="l09024"></a>09024   [BGP_STATS_TOTPLEN]             = <span class="stringliteral">&quot;Average prefix length&quot;</span>,
<a name="l09025"></a>09025   [BGP_STATS_RIB]                 = <span class="stringliteral">&quot;Total Advertisements&quot;</span>,
<a name="l09026"></a>09026   [BGP_STATS_UNAGGREGATEABLE]     = <span class="stringliteral">&quot;Unaggregateable prefixes&quot;</span>,
<a name="l09027"></a>09027   [BGP_STATS_MAX_AGGREGATEABLE]   = <span class="stringliteral">&quot;Maximum aggregateable prefixes&quot;</span>,
<a name="l09028"></a>09028   [BGP_STATS_AGGREGATES]          = <span class="stringliteral">&quot;BGP Aggregate advertisements&quot;</span>,
<a name="l09029"></a>09029   [BGP_STATS_SPACE]               = <span class="stringliteral">&quot;Address space advertised&quot;</span>,
<a name="l09030"></a>09030   [BGP_STATS_ASPATH_COUNT]        = <span class="stringliteral">&quot;Advertisements with paths&quot;</span>,
<a name="l09031"></a>09031   [BGP_STATS_ASPATH_MAXHOPS]      = <span class="stringliteral">&quot;Longest AS-Path (hops)&quot;</span>,
<a name="l09032"></a>09032   [BGP_STATS_ASPATH_MAXSIZE]      = <span class="stringliteral">&quot;Largest AS-Path (bytes)&quot;</span>,
<a name="l09033"></a>09033   [BGP_STATS_ASPATH_TOTHOPS]      = <span class="stringliteral">&quot;Average AS-Path length (hops)&quot;</span>,
<a name="l09034"></a>09034   [BGP_STATS_ASPATH_TOTSIZE]      = <span class="stringliteral">&quot;Average AS-Path size (bytes)&quot;</span>,
<a name="l09035"></a>09035   [BGP_STATS_ASN_HIGHEST]         = <span class="stringliteral">&quot;Highest public ASN&quot;</span>,
<a name="l09036"></a>09036   [BGP_STATS_MAX] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l09037"></a>09037 };
<a name="l09038"></a>09038 
<a name="l09039"></a>09039 <span class="keyword">struct </span>bgp_table_stats
<a name="l09040"></a>09040 {
<a name="l09041"></a>09041   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l09042"></a>09042   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> counts[BGP_STATS_MAX];
<a name="l09043"></a>09043 };
<a name="l09044"></a>09044 
<a name="l09045"></a>09045 <span class="preprocessor">#if 0</span>
<a name="l09046"></a>09046 <span class="preprocessor"></span><span class="preprocessor">#define TALLY_SIGFIG 100000</span>
<a name="l09047"></a>09047 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l09048"></a>09048 ravg_tally (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> count, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> oldavg, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> newval)
<a name="l09049"></a>09049 {
<a name="l09050"></a>09050   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> newtot = (count-1) * oldavg + (newval * TALLY_SIGFIG);
<a name="l09051"></a>09051   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> res = (newtot * TALLY_SIGFIG) / count;
<a name="l09052"></a>09052   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ret = newtot / <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l09053"></a>09053   
<a name="l09054"></a>09054   <span class="keywordflow">if</span> ((res % TALLY_SIGFIG) &gt; (TALLY_SIGFIG/2))
<a name="l09055"></a>09055     <span class="keywordflow">return</span> ret + 1;
<a name="l09056"></a>09056   <span class="keywordflow">else</span>
<a name="l09057"></a>09057     <span class="keywordflow">return</span> ret;
<a name="l09058"></a>09058 }
<a name="l09059"></a>09059 <span class="preprocessor">#endif</span>
<a name="l09060"></a>09060 <span class="preprocessor"></span>
<a name="l09061"></a>09061 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09062"></a>09062 bgp_table_stats_walker (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l09063"></a>09063 {
<a name="l09064"></a>09064   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l09065"></a>09065   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *top;
<a name="l09066"></a>09066   <span class="keyword">struct </span>bgp_table_stats *ts = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l09067"></a>09067   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> space = 0;
<a name="l09068"></a>09068   
<a name="l09069"></a>09069   <span class="keywordflow">if</span> (!(top = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (ts-&gt;table)))
<a name="l09070"></a>09070     <span class="keywordflow">return</span> 0;
<a name="l09071"></a>09071 
<a name="l09072"></a>09072   <span class="keywordflow">switch</span> (top-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>)
<a name="l09073"></a>09073     {
<a name="l09074"></a>09074       <span class="keywordflow">case</span> AF_INET:
<a name="l09075"></a>09075         space = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l09076"></a>09076         <span class="keywordflow">break</span>;
<a name="l09077"></a>09077       <span class="keywordflow">case</span> AF_INET6:
<a name="l09078"></a>09078         space = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l09079"></a>09079         <span class="keywordflow">break</span>;
<a name="l09080"></a>09080     }
<a name="l09081"></a>09081     
<a name="l09082"></a>09082   ts-&gt;counts[BGP_STATS_MAXBITLEN] = space;
<a name="l09083"></a>09083 
<a name="l09084"></a>09084   <span class="keywordflow">for</span> (rn = top; rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l09085"></a>09085     {
<a name="l09086"></a>09086       <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l09087"></a>09087       <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a> = rn-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>;
<a name="l09088"></a>09088       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rinum = 0;
<a name="l09089"></a>09089       
<a name="l09090"></a>09090       <span class="keywordflow">if</span> (rn == top)
<a name="l09091"></a>09091         <span class="keywordflow">continue</span>;
<a name="l09092"></a>09092       
<a name="l09093"></a>09093       <span class="keywordflow">if</span> (!rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l09094"></a>09094         <span class="keywordflow">continue</span>;
<a name="l09095"></a>09095       
<a name="l09096"></a>09096       ts-&gt;counts[BGP_STATS_PREFIXES]++;
<a name="l09097"></a>09097       ts-&gt;counts[BGP_STATS_TOTPLEN] += rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l09098"></a>09098 
<a name="l09099"></a>09099 <span class="preprocessor">#if 0</span>
<a name="l09100"></a>09100 <span class="preprocessor"></span>      ts-&gt;counts[BGP_STATS_AVGPLEN]
<a name="l09101"></a>09101         = ravg_tally (ts-&gt;counts[BGP_STATS_PREFIXES],
<a name="l09102"></a>09102                       ts-&gt;counts[BGP_STATS_AVGPLEN],
<a name="l09103"></a>09103                       rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l09104"></a>09104 <span class="preprocessor">#endif</span>
<a name="l09105"></a>09105 <span class="preprocessor"></span>      
<a name="l09106"></a>09106       <span class="comment">/* check if the prefix is included by any other announcements */</span>
<a name="l09107"></a>09107       <span class="keywordflow">while</span> (prn &amp;&amp; !prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l09108"></a>09108         prn = prn-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>;
<a name="l09109"></a>09109       
<a name="l09110"></a>09110       <span class="keywordflow">if</span> (prn == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || prn == top)
<a name="l09111"></a>09111         {
<a name="l09112"></a>09112           ts-&gt;counts[BGP_STATS_UNAGGREGATEABLE]++;
<a name="l09113"></a>09113           <span class="comment">/* announced address space */</span>
<a name="l09114"></a>09114           <span class="keywordflow">if</span> (space)
<a name="l09115"></a>09115             ts-&gt;counts[BGP_STATS_SPACE] += 1 &lt;&lt; (space - rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l09116"></a>09116         }
<a name="l09117"></a>09117       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l09118"></a>09118         ts-&gt;counts[BGP_STATS_MAX_AGGREGATEABLE]++;
<a name="l09119"></a>09119       
<a name="l09120"></a>09120       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l09121"></a>09121         {
<a name="l09122"></a>09122           rinum++;
<a name="l09123"></a>09123           ts-&gt;counts[BGP_STATS_RIB]++;
<a name="l09124"></a>09124           
<a name="l09125"></a>09125           <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> &amp;&amp;
<a name="l09126"></a>09126               (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>,
<a name="l09127"></a>09127                            <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))))
<a name="l09128"></a>09128             ts-&gt;counts[BGP_STATS_AGGREGATES]++;
<a name="l09129"></a>09129           
<a name="l09130"></a>09130           <span class="comment">/* as-path stats */</span>
<a name="l09131"></a>09131           if (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l09132"></a>09132             {
<a name="l09133"></a>09133               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hops = <a class="code" href="bgp__aspath_8c.html#ae0142a952a7219bbe0244f266ab0f0f5">aspath_count_hops</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l09134"></a>09134               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = <a class="code" href="bgp__aspath_8c.html#a20eefbd15a5076d10ad6e1e37d800bf2">aspath_size</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l09135"></a>09135               <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> highest = <a class="code" href="bgp__aspath_8c.html#ab1c68ac1741167dd6e631f6eb6d12705">aspath_highest</a> (ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l09136"></a>09136               
<a name="l09137"></a>09137               ts-&gt;counts[BGP_STATS_ASPATH_COUNT]++;
<a name="l09138"></a>09138               
<a name="l09139"></a>09139               <span class="keywordflow">if</span> (hops &gt; ts-&gt;counts[BGP_STATS_ASPATH_MAXHOPS])
<a name="l09140"></a>09140                 ts-&gt;counts[BGP_STATS_ASPATH_MAXHOPS] = hops;
<a name="l09141"></a>09141               
<a name="l09142"></a>09142               <span class="keywordflow">if</span> (size &gt; ts-&gt;counts[BGP_STATS_ASPATH_MAXSIZE])
<a name="l09143"></a>09143                 ts-&gt;counts[BGP_STATS_ASPATH_MAXSIZE] = size;
<a name="l09144"></a>09144               
<a name="l09145"></a>09145               ts-&gt;counts[BGP_STATS_ASPATH_TOTHOPS] += hops;
<a name="l09146"></a>09146               ts-&gt;counts[BGP_STATS_ASPATH_TOTSIZE] += size;
<a name="l09147"></a>09147 <span class="preprocessor">#if 0</span>
<a name="l09148"></a>09148 <span class="preprocessor"></span>              ts-&gt;counts[BGP_STATS_ASPATH_AVGHOPS] 
<a name="l09149"></a>09149                 = ravg_tally (ts-&gt;counts[BGP_STATS_ASPATH_COUNT],
<a name="l09150"></a>09150                               ts-&gt;counts[BGP_STATS_ASPATH_AVGHOPS],
<a name="l09151"></a>09151                               hops);
<a name="l09152"></a>09152               ts-&gt;counts[BGP_STATS_ASPATH_AVGSIZE]
<a name="l09153"></a>09153                 = ravg_tally (ts-&gt;counts[BGP_STATS_ASPATH_COUNT],
<a name="l09154"></a>09154                               ts-&gt;counts[BGP_STATS_ASPATH_AVGSIZE],
<a name="l09155"></a>09155                               size);
<a name="l09156"></a>09156 <span class="preprocessor">#endif</span>
<a name="l09157"></a>09157 <span class="preprocessor"></span>              <span class="keywordflow">if</span> (highest &gt; ts-&gt;counts[BGP_STATS_ASN_HIGHEST])
<a name="l09158"></a>09158                 ts-&gt;counts[BGP_STATS_ASN_HIGHEST] = highest;
<a name="l09159"></a>09159             }
<a name="l09160"></a>09160         }
<a name="l09161"></a>09161     }
<a name="l09162"></a>09162   <span class="keywordflow">return</span> 0;
<a name="l09163"></a>09163 }
<a name="l09164"></a>09164 
<a name="l09165"></a>09165 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09166"></a>09166 bgp_table_stats (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l09167"></a>09167 {
<a name="l09168"></a>09168   <span class="keyword">struct </span>bgp_table_stats ts;
<a name="l09169"></a>09169   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l09170"></a>09170   
<a name="l09171"></a>09171   <span class="keywordflow">if</span> (!bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi])
<a name="l09172"></a>09172     {
<a name="l09173"></a>09173       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No RIB exist for the AFI/SAFI%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09174"></a>09174       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09175"></a>09175     }
<a name="l09176"></a>09176   
<a name="l09177"></a>09177   memset (&amp;ts, 0, <span class="keyword">sizeof</span> (ts));
<a name="l09178"></a>09178   ts.table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l09179"></a>09179   <a class="code" href="thread_8h.html#adfc9185c89375a240b90ab50241c497d">thread_execute</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a>, bgp_table_stats_walker, &amp;ts, 0);
<a name="l09180"></a>09180 
<a name="l09181"></a>09181   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP %s RIB statistics%s%s&quot;</span>,
<a name="l09182"></a>09182            <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09183"></a>09183   
<a name="l09184"></a>09184   <span class="keywordflow">for</span> (i = 0; i &lt; BGP_STATS_MAX; i++)
<a name="l09185"></a>09185     {
<a name="l09186"></a>09186       <span class="keywordflow">if</span> (!table_stats_strs[i])
<a name="l09187"></a>09187         <span class="keywordflow">continue</span>;
<a name="l09188"></a>09188       
<a name="l09189"></a>09189       <span class="keywordflow">switch</span> (i)
<a name="l09190"></a>09190         {
<a name="l09191"></a>09191 <span class="preprocessor">#if 0</span>
<a name="l09192"></a>09192 <span class="preprocessor"></span>          <span class="keywordflow">case</span> BGP_STATS_ASPATH_AVGHOPS:
<a name="l09193"></a>09193           <span class="keywordflow">case</span> BGP_STATS_ASPATH_AVGSIZE:
<a name="l09194"></a>09194           <span class="keywordflow">case</span> BGP_STATS_AVGPLEN:
<a name="l09195"></a>09195             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: &quot;</span>, table_stats_strs[i]);
<a name="l09196"></a>09196             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f&quot;</span>,
<a name="l09197"></a>09197                      (<span class="keywordtype">float</span>)ts.counts[i] / (<span class="keywordtype">float</span>)TALLY_SIGFIG);
<a name="l09198"></a>09198             <span class="keywordflow">break</span>;
<a name="l09199"></a>09199 <span class="preprocessor">#endif</span>
<a name="l09200"></a>09200 <span class="preprocessor"></span>          <span class="keywordflow">case</span> BGP_STATS_ASPATH_TOTHOPS:
<a name="l09201"></a>09201           <span class="keywordflow">case</span> BGP_STATS_ASPATH_TOTSIZE:
<a name="l09202"></a>09202             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: &quot;</span>, table_stats_strs[i]);
<a name="l09203"></a>09203             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f&quot;</span>,
<a name="l09204"></a>09204                      ts.counts[i] ?
<a name="l09205"></a>09205                      (<span class="keywordtype">float</span>)ts.counts[i] / 
<a name="l09206"></a>09206                       (<span class="keywordtype">float</span>)ts.counts[BGP_STATS_ASPATH_COUNT]
<a name="l09207"></a>09207                      : 0);
<a name="l09208"></a>09208             <span class="keywordflow">break</span>;
<a name="l09209"></a>09209           <span class="keywordflow">case</span> BGP_STATS_TOTPLEN:
<a name="l09210"></a>09210             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: &quot;</span>, table_stats_strs[i]);
<a name="l09211"></a>09211             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f&quot;</span>,
<a name="l09212"></a>09212                      ts.counts[i] ?
<a name="l09213"></a>09213                      (<span class="keywordtype">float</span>)ts.counts[i] / 
<a name="l09214"></a>09214                       (<span class="keywordtype">float</span>)ts.counts[BGP_STATS_PREFIXES]
<a name="l09215"></a>09215                      : 0);
<a name="l09216"></a>09216             <span class="keywordflow">break</span>;
<a name="l09217"></a>09217           <span class="keywordflow">case</span> BGP_STATS_SPACE:
<a name="l09218"></a>09218             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: &quot;</span>, table_stats_strs[i]);
<a name="l09219"></a>09219             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12llu%s&quot;</span>, ts.counts[i], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09220"></a>09220             <span class="keywordflow">if</span> (ts.counts[BGP_STATS_MAXBITLEN] &lt; 9)
<a name="l09221"></a>09221               <span class="keywordflow">break</span>;
<a name="l09222"></a>09222             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%30s: &quot;</span>, <span class="stringliteral">&quot;%% announced &quot;</span>);
<a name="l09223"></a>09223             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f%s&quot;</span>, 
<a name="l09224"></a>09224                      100 * (<span class="keywordtype">float</span>)ts.counts[BGP_STATS_SPACE] / 
<a name="l09225"></a>09225                        (<span class="keywordtype">float</span>)((uint64_t)1UL &lt;&lt; ts.counts[BGP_STATS_MAXBITLEN]),
<a name="l09226"></a>09226                        <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09227"></a>09227             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%30s: &quot;</span>, <span class="stringliteral">&quot;/8 equivalent &quot;</span>);
<a name="l09228"></a>09228             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f%s&quot;</span>, 
<a name="l09229"></a>09229                      (<span class="keywordtype">float</span>)ts.counts[BGP_STATS_SPACE] / 
<a name="l09230"></a>09230                        (<span class="keywordtype">float</span>)(1UL &lt;&lt; (ts.counts[BGP_STATS_MAXBITLEN] - 8)),
<a name="l09231"></a>09231                      <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09232"></a>09232             <span class="keywordflow">if</span> (ts.counts[BGP_STATS_MAXBITLEN] &lt; 25)
<a name="l09233"></a>09233               <span class="keywordflow">break</span>;
<a name="l09234"></a>09234             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%30s: &quot;</span>, <span class="stringliteral">&quot;/24 equivalent &quot;</span>);
<a name="l09235"></a>09235             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12.2f&quot;</span>, 
<a name="l09236"></a>09236                      (<span class="keywordtype">float</span>)ts.counts[BGP_STATS_SPACE] / 
<a name="l09237"></a>09237                        (<span class="keywordtype">float</span>)(1UL &lt;&lt; (ts.counts[BGP_STATS_MAXBITLEN] - 24)));
<a name="l09238"></a>09238             <span class="keywordflow">break</span>;
<a name="l09239"></a>09239           <span class="keywordflow">default</span>:
<a name="l09240"></a>09240             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: &quot;</span>, table_stats_strs[i]);
<a name="l09241"></a>09241             <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%12llu&quot;</span>, ts.counts[i]);
<a name="l09242"></a>09242         }
<a name="l09243"></a>09243         
<a name="l09244"></a>09244       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09245"></a>09245     }
<a name="l09246"></a>09246   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l09247"></a>09247 }
<a name="l09248"></a>09248 
<a name="l09249"></a>09249 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09250"></a>09250 bgp_table_stats_vty (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>,
<a name="l09251"></a>09251                      <span class="keyword">const</span> <span class="keywordtype">char</span> *afi_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *safi_str)
<a name="l09252"></a>09252 {
<a name="l09253"></a>09253   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l09254"></a>09254   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l09255"></a>09255   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l09256"></a>09256   
<a name="l09257"></a>09257  <span class="keywordflow">if</span> (name)
<a name="l09258"></a>09258     bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (name);
<a name="l09259"></a>09259   <span class="keywordflow">else</span>
<a name="l09260"></a>09260     bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l09261"></a>09261 
<a name="l09262"></a>09262   <span class="keywordflow">if</span> (!bgp)
<a name="l09263"></a>09263     {
<a name="l09264"></a>09264       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No such BGP instance exist%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09265"></a>09265       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09266"></a>09266     }
<a name="l09267"></a>09267   <span class="keywordflow">if</span> (strncmp (afi_str, <span class="stringliteral">&quot;ipv&quot;</span>, 3) == 0)
<a name="l09268"></a>09268     {
<a name="l09269"></a>09269       <span class="keywordflow">if</span> (strncmp (afi_str, <span class="stringliteral">&quot;ipv4&quot;</span>, 4) == 0)
<a name="l09270"></a>09270         afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
<a name="l09271"></a>09271       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (afi_str, <span class="stringliteral">&quot;ipv6&quot;</span>, 4) == 0)
<a name="l09272"></a>09272         afi = <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>;
<a name="l09273"></a>09273       <span class="keywordflow">else</span>
<a name="l09274"></a>09274         {
<a name="l09275"></a>09275           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Invalid address family %s%s&quot;</span>,
<a name="l09276"></a>09276                    afi_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09277"></a>09277           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09278"></a>09278         }
<a name="l09279"></a>09279       <span class="keywordflow">if</span> (strncmp (safi_str, <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l09280"></a>09280         safi = <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>;
<a name="l09281"></a>09281       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (safi_str, <span class="stringliteral">&quot;u&quot;</span>, 1) == 0)
<a name="l09282"></a>09282         safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>;
<a name="l09283"></a>09283       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (safi_str, <span class="stringliteral">&quot;vpnv4&quot;</span>, 5) == 0)
<a name="l09284"></a>09284         safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
<a name="l09285"></a>09285       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (safi_str, <span class="stringliteral">&quot;vpnv6&quot;</span>, 6) == 0)
<a name="l09286"></a>09286         safi = <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>;
<a name="l09287"></a>09287       <span class="keywordflow">else</span>
<a name="l09288"></a>09288         {
<a name="l09289"></a>09289           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Invalid subsequent address family %s%s&quot;</span>,
<a name="l09290"></a>09290                    safi_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09291"></a>09291           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09292"></a>09292         }
<a name="l09293"></a>09293     }
<a name="l09294"></a>09294   <span class="keywordflow">else</span>
<a name="l09295"></a>09295     {
<a name="l09296"></a>09296       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Invalid address family %s%s&quot;</span>,
<a name="l09297"></a>09297                afi_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09298"></a>09298       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09299"></a>09299     }
<a name="l09300"></a>09300 
<a name="l09301"></a>09301   <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi ==  <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>)
<a name="l09302"></a>09302       || (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>))
<a name="l09303"></a>09303     {
<a name="l09304"></a>09304       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Invalid subsequent address family %s for %s%s&quot;</span>,
<a name="l09305"></a>09305                afi_str, safi_str, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09306"></a>09306       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09307"></a>09307     }
<a name="l09308"></a>09308   <span class="keywordflow">return</span> bgp_table_stats (vty, bgp, afi, safi);
<a name="l09309"></a>09309 }
<a name="l09310"></a>09310 
<a name="l09311"></a>09311 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_statistics,
<a name="l09312"></a>09312        show_bgp_statistics_cmd,
<a name="l09313"></a>09313        <span class="stringliteral">&quot;show bgp (ipv4|ipv6) (unicast|multicast) statistics&quot;</span>,
<a name="l09314"></a>09314        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09315"></a>09315        BGP_STR
<a name="l09316"></a>09316        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09317"></a>09317        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09318"></a>09318        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09319"></a>09319        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09320"></a>09320        <span class="stringliteral">&quot;BGP RIB advertisement statistics\n&quot;</span>)
<a name="l09321"></a>09321 {
<a name="l09322"></a>09322   <span class="keywordflow">return</span> bgp_table_stats_vty (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], argv[1]);
<a name="l09323"></a>09323 }
<a name="l09324"></a>09324 
<a name="l09325"></a>09325 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_statistics,
<a name="l09326"></a>09326        show_bgp_statistics_vpnv4_cmd,
<a name="l09327"></a>09327        <span class="stringliteral">&quot;show bgp (ipv4) (vpnv4) statistics&quot;</span>,
<a name="l09328"></a>09328        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09329"></a>09329        BGP_STR
<a name="l09330"></a>09330        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09331"></a>09331        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09332"></a>09332        <span class="stringliteral">&quot;BGP RIB advertisement statistics\n&quot;</span>)
<a name="l09333"></a>09333 
<a name="l09334"></a>09334 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_statistics_view,
<a name="l09335"></a>09335        show_bgp_statistics_view_cmd,
<a name="l09336"></a>09336        <span class="stringliteral">&quot;show bgp view WORD (ipv4|ipv6) (unicast|multicast) statistics&quot;</span>,
<a name="l09337"></a>09337        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09338"></a>09338        BGP_STR
<a name="l09339"></a>09339        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09340"></a>09340        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09341"></a>09341        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09342"></a>09342        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09343"></a>09343        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09344"></a>09344        <span class="stringliteral">&quot;BGP RIB advertisement statistics\n&quot;</span>)
<a name="l09345"></a>09345 {
<a name="l09346"></a>09346   <span class="keywordflow">return</span> bgp_table_stats_vty (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], argv[1]);
<a name="l09347"></a>09347 }
<a name="l09348"></a>09348 
<a name="l09349"></a>09349 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_statistics_view,
<a name="l09350"></a>09350        show_bgp_statistics_view_vpnv4_cmd,
<a name="l09351"></a>09351        <span class="stringliteral">&quot;show bgp view WORD (ipv4) (vpnv4) statistics&quot;</span>,
<a name="l09352"></a>09352        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09353"></a>09353        BGP_STR
<a name="l09354"></a>09354        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09355"></a>09355        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09356"></a>09356        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09357"></a>09357        <span class="stringliteral">&quot;BGP RIB advertisement statistics\n&quot;</span>)
<a name="l09358"></a>09358 
<a name="l09359"></a>09359 <span class="keyword">enum</span> bgp_pcounts
<a name="l09360"></a>09360 {
<a name="l09361"></a>09361   PCOUNT_ADJ_IN = 0,
<a name="l09362"></a>09362   PCOUNT_DAMPED,
<a name="l09363"></a>09363   PCOUNT_REMOVED,
<a name="l09364"></a>09364   PCOUNT_HISTORY,
<a name="l09365"></a>09365   PCOUNT_STALE,
<a name="l09366"></a>09366   PCOUNT_VALID,
<a name="l09367"></a>09367   PCOUNT_ALL,
<a name="l09368"></a>09368   PCOUNT_COUNTED,
<a name="l09369"></a>09369   PCOUNT_PFCNT, <span class="comment">/* the figure we display to users */</span>
<a name="l09370"></a>09370   PCOUNT_MAX,
<a name="l09371"></a>09371 };
<a name="l09372"></a>09372 
<a name="l09373"></a>09373 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *pcount_strs[] =
<a name="l09374"></a>09374 {
<a name="l09375"></a>09375   [PCOUNT_ADJ_IN]  = <span class="stringliteral">&quot;Adj-in&quot;</span>,
<a name="l09376"></a>09376   [PCOUNT_DAMPED]  = <span class="stringliteral">&quot;Damped&quot;</span>,
<a name="l09377"></a>09377   [PCOUNT_REMOVED] = <span class="stringliteral">&quot;Removed&quot;</span>,
<a name="l09378"></a>09378   [PCOUNT_HISTORY] = <span class="stringliteral">&quot;History&quot;</span>,
<a name="l09379"></a>09379   [PCOUNT_STALE]   = <span class="stringliteral">&quot;Stale&quot;</span>,
<a name="l09380"></a>09380   [PCOUNT_VALID]   = <span class="stringliteral">&quot;Valid&quot;</span>,
<a name="l09381"></a>09381   [PCOUNT_ALL]     = <span class="stringliteral">&quot;All RIB&quot;</span>,
<a name="l09382"></a>09382   [PCOUNT_COUNTED] = <span class="stringliteral">&quot;PfxCt counted&quot;</span>,
<a name="l09383"></a>09383   [PCOUNT_PFCNT]   = <span class="stringliteral">&quot;Useable&quot;</span>,
<a name="l09384"></a>09384   [PCOUNT_MAX]     = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l09385"></a>09385 };
<a name="l09386"></a>09386 
<a name="l09387"></a>09387 <span class="keyword">struct </span>peer_pcounts
<a name="l09388"></a>09388 {
<a name="l09389"></a>09389   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count[PCOUNT_MAX];
<a name="l09390"></a>09390   <span class="keyword">const</span> <span class="keyword">struct </span>peer *peer;
<a name="l09391"></a>09391   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l09392"></a>09392 };
<a name="l09393"></a>09393 
<a name="l09394"></a>09394 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09395"></a>09395 bgp_peer_count_walker (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l09396"></a>09396 {
<a name="l09397"></a>09397   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l09398"></a>09398   <span class="keyword">struct </span>peer_pcounts *pc = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l09399"></a>09399   <span class="keyword">const</span> <span class="keyword">struct </span>peer *peer = pc-&gt;peer;
<a name="l09400"></a>09400   
<a name="l09401"></a>09401   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (pc-&gt;table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l09402"></a>09402     {
<a name="l09403"></a>09403       <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l09404"></a>09404       <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l09405"></a>09405       
<a name="l09406"></a>09406       <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l09407"></a>09407         <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
<a name="l09408"></a>09408           pc-&gt;count[PCOUNT_ADJ_IN]++;
<a name="l09409"></a>09409 
<a name="l09410"></a>09410       <span class="keywordflow">for</span> (ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; ri; ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
<a name="l09411"></a>09411         {
<a name="l09412"></a>09412           <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l09413"></a>09413           
<a name="l09414"></a>09414           <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a> != peer)
<a name="l09415"></a>09415             <span class="keywordflow">continue</span>;
<a name="l09416"></a>09416           
<a name="l09417"></a>09417           pc-&gt;count[PCOUNT_ALL]++;
<a name="l09418"></a>09418           
<a name="l09419"></a>09419           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l09420"></a>09420             pc-&gt;count[PCOUNT_DAMPED]++;
<a name="l09421"></a>09421           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l09422"></a>09422             pc-&gt;count[PCOUNT_HISTORY]++;
<a name="l09423"></a>09423           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a0ff836da32782fe548f3fe570e5107e7">BGP_INFO_REMOVED</a>))
<a name="l09424"></a>09424             pc-&gt;count[PCOUNT_REMOVED]++;
<a name="l09425"></a>09425           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>))
<a name="l09426"></a>09426             pc-&gt;count[PCOUNT_STALE]++;
<a name="l09427"></a>09427           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>))
<a name="l09428"></a>09428             pc-&gt;count[PCOUNT_VALID]++;
<a name="l09429"></a>09429           <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l09430"></a>09430             pc-&gt;count[PCOUNT_PFCNT]++;
<a name="l09431"></a>09431           
<a name="l09432"></a>09432           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aff6e02f7d4d370e90e7eba7323b7f335">BGP_INFO_COUNTED</a>))
<a name="l09433"></a>09433             {
<a name="l09434"></a>09434               pc-&gt;count[PCOUNT_COUNTED]++;
<a name="l09435"></a>09435               <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l09436"></a>09436                 <a class="code" href="log_8h.html#af170599d58fb9b176145c7703d3d8748">plog_warn</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l09437"></a>09437                            <span class="stringliteral">&quot;%s [pcount] %s/%d is counted but flags 0x%x&quot;</span>,
<a name="l09438"></a>09438                            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l09439"></a>09439                            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>,
<a name="l09440"></a>09440                                      buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l09441"></a>09441                            rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l09442"></a>09442                            ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>);
<a name="l09443"></a>09443             }
<a name="l09444"></a>09444           <span class="keywordflow">else</span>
<a name="l09445"></a>09445             {
<a name="l09446"></a>09446               <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aee2c962749a7df25a38ccd80559e50d5">BGP_INFO_UNUSEABLE</a>))
<a name="l09447"></a>09447                 <a class="code" href="log_8h.html#af170599d58fb9b176145c7703d3d8748">plog_warn</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l09448"></a>09448                            <span class="stringliteral">&quot;%s [pcount] %s/%d not counted but flags 0x%x&quot;</span>,
<a name="l09449"></a>09449                            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l09450"></a>09450                            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>,
<a name="l09451"></a>09451                                      buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l09452"></a>09452                            rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l09453"></a>09453                            ri-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>);
<a name="l09454"></a>09454             }
<a name="l09455"></a>09455         }
<a name="l09456"></a>09456     }
<a name="l09457"></a>09457   <span class="keywordflow">return</span> 0;
<a name="l09458"></a>09458 }
<a name="l09459"></a>09459 
<a name="l09460"></a>09460 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09461"></a>09461 bgp_peer_counts (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> peer *peer, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l09462"></a>09462 {
<a name="l09463"></a>09463   <span class="keyword">struct </span>peer_pcounts pcounts = { .peer = peer };
<a name="l09464"></a>09464   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l09465"></a>09465   
<a name="l09466"></a>09466   <span class="keywordflow">if</span> (!peer || !peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a> || !peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi]
<a name="l09467"></a>09467       || !peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi])
<a name="l09468"></a>09468     {
<a name="l09469"></a>09469       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No such neighbor or address family%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09470"></a>09470       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09471"></a>09471     }
<a name="l09472"></a>09472   
<a name="l09473"></a>09473   memset (&amp;pcounts, 0, <span class="keyword">sizeof</span>(pcounts));
<a name="l09474"></a>09474   pcounts.peer = peer;
<a name="l09475"></a>09475   pcounts.table = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l09476"></a>09476   
<a name="l09477"></a>09477   <span class="comment">/* in-place call via thread subsystem so as to record execution time</span>
<a name="l09478"></a>09478 <span class="comment">   * stats for the thread-walk (i.e. ensure this can&#39;t be blamed on</span>
<a name="l09479"></a>09479 <span class="comment">   * on just vty_read()).</span>
<a name="l09480"></a>09480 <span class="comment">   */</span>
<a name="l09481"></a>09481   <a class="code" href="thread_8h.html#adfc9185c89375a240b90ab50241c497d">thread_execute</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a>, bgp_peer_count_walker, &amp;pcounts, 0);
<a name="l09482"></a>09482   
<a name="l09483"></a>09483   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Prefix counts for %s, %s%s&quot;</span>, 
<a name="l09484"></a>09484            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09485"></a>09485   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;PfxCt: %ld%s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09486"></a>09486   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%sCounts from RIB table walk:%s%s&quot;</span>, 
<a name="l09487"></a>09487            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09488"></a>09488 
<a name="l09489"></a>09489   <span class="keywordflow">for</span> (i = 0; i &lt; PCOUNT_MAX; i++)
<a name="l09490"></a>09490       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%20s: %-10d%s&quot;</span>,
<a name="l09491"></a>09491                pcount_strs[i], pcounts.count[i], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09492"></a>09492 
<a name="l09493"></a>09493   <span class="keywordflow">if</span> (pcounts.count[PCOUNT_PFCNT] != peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi])
<a name="l09494"></a>09494     {
<a name="l09495"></a>09495       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s [pcount] PfxCt drift!%s&quot;</span>,
<a name="l09496"></a>09496                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09497"></a>09497       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Please report this bug, with the above command output%s&quot;</span>,
<a name="l09498"></a>09498               <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09499"></a>09499     }
<a name="l09500"></a>09500                
<a name="l09501"></a>09501   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l09502"></a>09502 }
<a name="l09503"></a>09503 
<a name="l09504"></a>09504 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_neighbor_prefix_counts,
<a name="l09505"></a>09505        show_ip_bgp_neighbor_prefix_counts_cmd,
<a name="l09506"></a>09506        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) prefix-counts&quot;</span>,
<a name="l09507"></a>09507        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09508"></a>09508        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09509"></a>09509        BGP_STR
<a name="l09510"></a>09510        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09511"></a>09511        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09512"></a>09512        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09513"></a>09513        <span class="stringliteral">&quot;Display detailed prefix count information\n&quot;</span>)
<a name="l09514"></a>09514 {
<a name="l09515"></a>09515   <span class="keyword">struct </span>peer *peer;
<a name="l09516"></a>09516 
<a name="l09517"></a>09517   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);  
<a name="l09518"></a>09518   <span class="keywordflow">if</span> (! peer) 
<a name="l09519"></a>09519     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09520"></a>09520  
<a name="l09521"></a>09521   <span class="keywordflow">return</span> bgp_peer_counts (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l09522"></a>09522 }
<a name="l09523"></a>09523 
<a name="l09524"></a>09524 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_ipv6_neighbor_prefix_counts,
<a name="l09525"></a>09525        show_bgp_ipv6_neighbor_prefix_counts_cmd,
<a name="l09526"></a>09526        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) prefix-counts&quot;</span>,
<a name="l09527"></a>09527        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09528"></a>09528        BGP_STR
<a name="l09529"></a>09529        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09530"></a>09530        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09531"></a>09531        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09532"></a>09532        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09533"></a>09533        <span class="stringliteral">&quot;Display detailed prefix count information\n&quot;</span>)
<a name="l09534"></a>09534 {
<a name="l09535"></a>09535   <span class="keyword">struct </span>peer *peer;
<a name="l09536"></a>09536 
<a name="l09537"></a>09537   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);  
<a name="l09538"></a>09538   <span class="keywordflow">if</span> (! peer) 
<a name="l09539"></a>09539     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09540"></a>09540  
<a name="l09541"></a>09541   <span class="keywordflow">return</span> bgp_peer_counts (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l09542"></a>09542 }
<a name="l09543"></a>09543 
<a name="l09544"></a>09544 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_neighbor_prefix_counts,
<a name="l09545"></a>09545        show_ip_bgp_ipv4_neighbor_prefix_counts_cmd,
<a name="l09546"></a>09546        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) neighbors (A.B.C.D|X:X::X:X) prefix-counts&quot;</span>,
<a name="l09547"></a>09547        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09548"></a>09548        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09549"></a>09549        BGP_STR
<a name="l09550"></a>09550        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09551"></a>09551        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09552"></a>09552        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09553"></a>09553        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09554"></a>09554        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09555"></a>09555        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09556"></a>09556        <span class="stringliteral">&quot;Display detailed prefix count information\n&quot;</span>)
<a name="l09557"></a>09557 {
<a name="l09558"></a>09558   <span class="keyword">struct </span>peer *peer;
<a name="l09559"></a>09559 
<a name="l09560"></a>09560   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1]);
<a name="l09561"></a>09561   <span class="keywordflow">if</span> (! peer)
<a name="l09562"></a>09562     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09563"></a>09563 
<a name="l09564"></a>09564   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l09565"></a>09565     <span class="keywordflow">return</span> bgp_peer_counts (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l09566"></a>09566 
<a name="l09567"></a>09567   <span class="keywordflow">return</span> bgp_peer_counts (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l09568"></a>09568 }
<a name="l09569"></a>09569 
<a name="l09570"></a>09570 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_vpnv4_neighbor_prefix_counts,
<a name="l09571"></a>09571        show_ip_bgp_vpnv4_neighbor_prefix_counts_cmd,
<a name="l09572"></a>09572        <span class="stringliteral">&quot;show ip bgp vpnv4 all neighbors (A.B.C.D|X:X::X:X) prefix-counts&quot;</span>,
<a name="l09573"></a>09573        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09574"></a>09574        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09575"></a>09575        BGP_STR
<a name="l09576"></a>09576        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09577"></a>09577        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09578"></a>09578        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09579"></a>09579        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09580"></a>09580        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09581"></a>09581        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09582"></a>09582        <span class="stringliteral">&quot;Display detailed prefix count information\n&quot;</span>)
<a name="l09583"></a>09583 {
<a name="l09584"></a>09584   <span class="keyword">struct </span>peer *peer;
<a name="l09585"></a>09585 
<a name="l09586"></a>09586   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09587"></a>09587   <span class="keywordflow">if</span> (! peer)
<a name="l09588"></a>09588     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09589"></a>09589   
<a name="l09590"></a>09590   <span class="keywordflow">return</span> bgp_peer_counts (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>);
<a name="l09591"></a>09591 }
<a name="l09592"></a>09592 
<a name="l09593"></a>09593 
<a name="l09594"></a>09594 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l09595"></a>09595 show_adj_route (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> peer *peer, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l09596"></a>09596         <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>)
<a name="l09597"></a>09597 {
<a name="l09598"></a>09598   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l09599"></a>09599   <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *ain;
<a name="l09600"></a>09600   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
<a name="l09601"></a>09601   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> output_count;
<a name="l09602"></a>09602   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l09603"></a>09603   <span class="keywordtype">int</span> header1 = 1;
<a name="l09604"></a>09604   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l09605"></a>09605   <span class="keywordtype">int</span> header2 = 1;
<a name="l09606"></a>09606 
<a name="l09607"></a>09607   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l09608"></a>09608 
<a name="l09609"></a>09609   <span class="keywordflow">if</span> (! bgp)
<a name="l09610"></a>09610     <span class="keywordflow">return</span>;
<a name="l09611"></a>09611 
<a name="l09612"></a>09612   table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi];
<a name="l09613"></a>09613 
<a name="l09614"></a>09614   output_count = 0;
<a name="l09615"></a>09615     
<a name="l09616"></a>09616   <span class="keywordflow">if</span> (! in &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi],
<a name="l09617"></a>09617               <a class="code" href="bgpd_8h.html#a7ce39647237ee1e1b720e6d0d4056efe">PEER_STATUS_DEFAULT_ORIGINATE</a>))
<a name="l09618"></a>09618     {
<a name="l09619"></a>09619       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP table version is 0, local router ID is %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09620"></a>09620       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_SCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09621"></a>09621       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_OCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09622"></a>09622 
<a name="l09623"></a>09623       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Originating default network 0.0.0.0%s%s&quot;</span>,
<a name="l09624"></a>09624            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09625"></a>09625       header1 = 0;
<a name="l09626"></a>09626     }
<a name="l09627"></a>09627 
<a name="l09628"></a>09628   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l09629"></a>09629     <span class="keywordflow">if</span> (in)
<a name="l09630"></a>09630       {
<a name="l09631"></a>09631     <span class="keywordflow">for</span> (ain = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; ain; ain = ain-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
<a name="l09632"></a>09632       <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
<a name="l09633"></a>09633         {
<a name="l09634"></a>09634           <span class="keywordflow">if</span> (header1)
<a name="l09635"></a>09635         {
<a name="l09636"></a>09636           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP table version is 0, local router ID is %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09637"></a>09637           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_SCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09638"></a>09638           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_OCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09639"></a>09639           header1 = 0;
<a name="l09640"></a>09640         }
<a name="l09641"></a>09641           <span class="keywordflow">if</span> (header2)
<a name="l09642"></a>09642         {
<a name="l09643"></a>09643           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09644"></a>09644           header2 = 0;
<a name="l09645"></a>09645         }
<a name="l09646"></a>09646           <span class="keywordflow">if</span> (ain-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>)
<a name="l09647"></a>09647         { 
<a name="l09648"></a>09648           <a class="code" href="bgp__route_8h.html#a0f21f671849f68f41259f9aa94ba9925">route_vty_out_tmp</a> (vty, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, ain-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>, safi);
<a name="l09649"></a>09649           output_count++;
<a name="l09650"></a>09650         }
<a name="l09651"></a>09651         }
<a name="l09652"></a>09652       }
<a name="l09653"></a>09653     <span class="keywordflow">else</span>
<a name="l09654"></a>09654       {
<a name="l09655"></a>09655     <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
<a name="l09656"></a>09656       <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == peer)
<a name="l09657"></a>09657         {
<a name="l09658"></a>09658           <span class="keywordflow">if</span> (header1)
<a name="l09659"></a>09659         {
<a name="l09660"></a>09660           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;BGP table version is 0, local router ID is %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09661"></a>09661           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_SCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09662"></a>09662           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_OCODE_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09663"></a>09663           header1 = 0;
<a name="l09664"></a>09664         }
<a name="l09665"></a>09665           <span class="keywordflow">if</span> (header2)
<a name="l09666"></a>09666         {
<a name="l09667"></a>09667           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, BGP_SHOW_HEADER, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09668"></a>09668           header2 = 0;
<a name="l09669"></a>09669         }
<a name="l09670"></a>09670           <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
<a name="l09671"></a>09671         {   
<a name="l09672"></a>09672           <a class="code" href="bgp__route_8h.html#a0f21f671849f68f41259f9aa94ba9925">route_vty_out_tmp</a> (vty, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>, safi);
<a name="l09673"></a>09673           output_count++;
<a name="l09674"></a>09674         }
<a name="l09675"></a>09675         }
<a name="l09676"></a>09676       }
<a name="l09677"></a>09677   
<a name="l09678"></a>09678   <span class="keywordflow">if</span> (output_count != 0)
<a name="l09679"></a>09679     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%sTotal number of prefixes %ld%s&quot;</span>,
<a name="l09680"></a>09680          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, output_count, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09681"></a>09681 }
<a name="l09682"></a>09682 
<a name="l09683"></a>09683 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l09684"></a>09684 peer_adj_routes (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> peer *peer, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> in)
<a name="l09685"></a>09685 {    
<a name="l09686"></a>09686   <span class="keywordflow">if</span> (! peer || ! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l09687"></a>09687     {
<a name="l09688"></a>09688       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No such neighbor or address family%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09689"></a>09689       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09690"></a>09690     }
<a name="l09691"></a>09691 
<a name="l09692"></a>09692   <span class="keywordflow">if</span> (in &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
<a name="l09693"></a>09693     {
<a name="l09694"></a>09694       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inbound soft reconfiguration not enabled%s&quot;</span>,
<a name="l09695"></a>09695            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09696"></a>09696       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09697"></a>09697     }
<a name="l09698"></a>09698 
<a name="l09699"></a>09699   show_adj_route (vty, peer, afi, safi, in);
<a name="l09700"></a>09700 
<a name="l09701"></a>09701   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l09702"></a>09702 }
<a name="l09703"></a>09703 
<a name="l09704"></a>09704 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_neighbor_advertised_route,
<a name="l09705"></a>09705        show_ip_bgp_view_neighbor_advertised_route_cmd,
<a name="l09706"></a>09706        <span class="stringliteral">&quot;show ip bgp view WORD neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09707"></a>09707        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09708"></a>09708        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09709"></a>09709        BGP_STR
<a name="l09710"></a>09710        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09711"></a>09711        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09712"></a>09712        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09713"></a>09713        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09714"></a>09714        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09715"></a>09715        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09716"></a>09716 {
<a name="l09717"></a>09717   <span class="keyword">struct </span>peer *peer;
<a name="l09718"></a>09718 
<a name="l09719"></a>09719   <span class="keywordflow">if</span> (argc == 2)
<a name="l09720"></a>09720     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l09721"></a>09721   <span class="keywordflow">else</span>
<a name="l09722"></a>09722     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09723"></a>09723 
<a name="l09724"></a>09724   <span class="keywordflow">if</span> (! peer) 
<a name="l09725"></a>09725     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09726"></a>09726  
<a name="l09727"></a>09727   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, 0);
<a name="l09728"></a>09728 }
<a name="l09729"></a>09729 
<a name="l09730"></a>09730 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_view_neighbor_advertised_route,
<a name="l09731"></a>09731        show_ip_bgp_neighbor_advertised_route_cmd,
<a name="l09732"></a>09732        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09733"></a>09733        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09734"></a>09734        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09735"></a>09735        BGP_STR
<a name="l09736"></a>09736        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09737"></a>09737        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09738"></a>09738        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09739"></a>09739        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09740"></a>09740 
<a name="l09741"></a>09741 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_neighbor_advertised_route,
<a name="l09742"></a>09742        show_ip_bgp_ipv4_neighbor_advertised_route_cmd,
<a name="l09743"></a>09743        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09744"></a>09744        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09745"></a>09745        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09746"></a>09746        BGP_STR
<a name="l09747"></a>09747        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09748"></a>09748        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09749"></a>09749        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09750"></a>09750        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09751"></a>09751        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09752"></a>09752        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09753"></a>09753        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09754"></a>09754 {
<a name="l09755"></a>09755   <span class="keyword">struct </span>peer *peer;
<a name="l09756"></a>09756 
<a name="l09757"></a>09757   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1]);
<a name="l09758"></a>09758   <span class="keywordflow">if</span> (! peer)
<a name="l09759"></a>09759     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09760"></a>09760 
<a name="l09761"></a>09761   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l09762"></a>09762     <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, 0);
<a name="l09763"></a>09763 
<a name="l09764"></a>09764   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, 0);
<a name="l09765"></a>09765 }
<a name="l09766"></a>09766 
<a name="l09767"></a>09767 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l09768"></a>09768 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_advertised_route,
<a name="l09769"></a>09769        show_bgp_view_neighbor_advertised_route_cmd,
<a name="l09770"></a>09770        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09771"></a>09771        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09772"></a>09772        BGP_STR
<a name="l09773"></a>09773        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09774"></a>09774        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09775"></a>09775        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09776"></a>09776        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09777"></a>09777        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09778"></a>09778        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09779"></a>09779 {
<a name="l09780"></a>09780   <span class="keyword">struct </span>peer *peer;
<a name="l09781"></a>09781 
<a name="l09782"></a>09782   <span class="keywordflow">if</span> (argc == 2)
<a name="l09783"></a>09783     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l09784"></a>09784   <span class="keywordflow">else</span>
<a name="l09785"></a>09785     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09786"></a>09786 
<a name="l09787"></a>09787   <span class="keywordflow">if</span> (! peer)
<a name="l09788"></a>09788     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;    
<a name="l09789"></a>09789 
<a name="l09790"></a>09790   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, 0);
<a name="l09791"></a>09791 }
<a name="l09792"></a>09792 
<a name="l09793"></a>09793 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_advertised_route,
<a name="l09794"></a>09794        show_bgp_view_ipv6_neighbor_advertised_route_cmd,
<a name="l09795"></a>09795        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09796"></a>09796        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09797"></a>09797        BGP_STR
<a name="l09798"></a>09798        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09799"></a>09799        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09800"></a>09800        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09801"></a>09801        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09802"></a>09802        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09803"></a>09803        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09804"></a>09804        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09805"></a>09805 
<a name="l09806"></a>09806 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_received_routes,
<a name="l09807"></a>09807        show_bgp_view_neighbor_received_routes_cmd,
<a name="l09808"></a>09808        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l09809"></a>09809        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09810"></a>09810        BGP_STR
<a name="l09811"></a>09811        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09812"></a>09812        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09813"></a>09813        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09814"></a>09814        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09815"></a>09815        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09816"></a>09816        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l09817"></a>09817 {
<a name="l09818"></a>09818   <span class="keyword">struct </span>peer *peer;
<a name="l09819"></a>09819 
<a name="l09820"></a>09820   <span class="keywordflow">if</span> (argc == 2)
<a name="l09821"></a>09821     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l09822"></a>09822   <span class="keywordflow">else</span>
<a name="l09823"></a>09823     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09824"></a>09824 
<a name="l09825"></a>09825   <span class="keywordflow">if</span> (! peer)
<a name="l09826"></a>09826     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09827"></a>09827 
<a name="l09828"></a>09828   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, 1);
<a name="l09829"></a>09829 }
<a name="l09830"></a>09830 
<a name="l09831"></a>09831 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_received_routes,
<a name="l09832"></a>09832        show_bgp_view_ipv6_neighbor_received_routes_cmd,
<a name="l09833"></a>09833        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l09834"></a>09834        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09835"></a>09835        BGP_STR
<a name="l09836"></a>09836        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09837"></a>09837        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09838"></a>09838        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09839"></a>09839        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09840"></a>09840        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09841"></a>09841        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09842"></a>09842        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l09843"></a>09843 
<a name="l09844"></a>09844 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_advertised_route,
<a name="l09845"></a>09845        show_bgp_neighbor_advertised_route_cmd,
<a name="l09846"></a>09846        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09847"></a>09847        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09848"></a>09848        BGP_STR
<a name="l09849"></a>09849        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09850"></a>09850        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09851"></a>09851        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09852"></a>09852        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09853"></a>09853        
<a name="l09854"></a>09854 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_advertised_route,
<a name="l09855"></a>09855        show_bgp_ipv6_neighbor_advertised_route_cmd,
<a name="l09856"></a>09856        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09857"></a>09857        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09858"></a>09858        BGP_STR
<a name="l09859"></a>09859        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09860"></a>09860        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09861"></a>09861        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09862"></a>09862        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09863"></a>09863        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09864"></a>09864 
<a name="l09865"></a>09865 <span class="comment">/* old command */</span>
<a name="l09866"></a>09866 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_advertised_route,
<a name="l09867"></a>09867        ipv6_bgp_neighbor_advertised_route_cmd,
<a name="l09868"></a>09868        <span class="stringliteral">&quot;show ipv6 bgp neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09869"></a>09869        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09870"></a>09870        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l09871"></a>09871        BGP_STR
<a name="l09872"></a>09872        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09873"></a>09873        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09874"></a>09874        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09875"></a>09875        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09876"></a>09876   
<a name="l09877"></a>09877 <span class="comment">/* old command */</span>
<a name="l09878"></a>09878 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_mbgp_neighbor_advertised_route,
<a name="l09879"></a>09879        ipv6_mbgp_neighbor_advertised_route_cmd,
<a name="l09880"></a>09880        <span class="stringliteral">&quot;show ipv6 mbgp neighbors (A.B.C.D|X:X::X:X) advertised-routes&quot;</span>,
<a name="l09881"></a>09881        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09882"></a>09882        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l09883"></a>09883        MBGP_STR
<a name="l09884"></a>09884        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09885"></a>09885        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09886"></a>09886        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09887"></a>09887        <span class="stringliteral">&quot;Display the routes advertised to a BGP neighbor\n&quot;</span>)
<a name="l09888"></a>09888 {
<a name="l09889"></a>09889   <span class="keyword">struct </span>peer *peer;
<a name="l09890"></a>09890 
<a name="l09891"></a>09891   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09892"></a>09892   <span class="keywordflow">if</span> (! peer)
<a name="l09893"></a>09893     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;  
<a name="l09894"></a>09894 
<a name="l09895"></a>09895   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, 0);
<a name="l09896"></a>09896 }
<a name="l09897"></a>09897 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l09898"></a>09898 
<a name="l09899"></a>09899 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_neighbor_received_routes,
<a name="l09900"></a>09900        show_ip_bgp_view_neighbor_received_routes_cmd,
<a name="l09901"></a>09901        <span class="stringliteral">&quot;show ip bgp view WORD neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l09902"></a>09902        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09903"></a>09903        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09904"></a>09904        BGP_STR
<a name="l09905"></a>09905        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l09906"></a>09906        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l09907"></a>09907        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09908"></a>09908        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09909"></a>09909        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09910"></a>09910        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l09911"></a>09911 {
<a name="l09912"></a>09912   <span class="keyword">struct </span>peer *peer;
<a name="l09913"></a>09913 
<a name="l09914"></a>09914   <span class="keywordflow">if</span> (argc == 2)
<a name="l09915"></a>09915     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l09916"></a>09916   <span class="keywordflow">else</span>
<a name="l09917"></a>09917     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l09918"></a>09918 
<a name="l09919"></a>09919   <span class="keywordflow">if</span> (! peer)
<a name="l09920"></a>09920     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09921"></a>09921 
<a name="l09922"></a>09922   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, 1);
<a name="l09923"></a>09923 }
<a name="l09924"></a>09924 
<a name="l09925"></a>09925 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_view_neighbor_received_routes,
<a name="l09926"></a>09926        show_ip_bgp_neighbor_received_routes_cmd,
<a name="l09927"></a>09927        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l09928"></a>09928        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09929"></a>09929        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09930"></a>09930        BGP_STR
<a name="l09931"></a>09931        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09932"></a>09932        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09933"></a>09933        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09934"></a>09934        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l09935"></a>09935 
<a name="l09936"></a>09936 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_neighbor_received_routes,
<a name="l09937"></a>09937        show_ip_bgp_ipv4_neighbor_received_routes_cmd,
<a name="l09938"></a>09938        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l09939"></a>09939        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09940"></a>09940        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09941"></a>09941        BGP_STR
<a name="l09942"></a>09942        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l09943"></a>09943        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09944"></a>09944        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l09945"></a>09945        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09946"></a>09946        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09947"></a>09947        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09948"></a>09948        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l09949"></a>09949 {
<a name="l09950"></a>09950   <span class="keyword">struct </span>peer *peer;
<a name="l09951"></a>09951 
<a name="l09952"></a>09952   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1]);
<a name="l09953"></a>09953   <span class="keywordflow">if</span> (! peer)
<a name="l09954"></a>09954     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09955"></a>09955   
<a name="l09956"></a>09956   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l09957"></a>09957     <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, 1);
<a name="l09958"></a>09958 
<a name="l09959"></a>09959   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, 1);
<a name="l09960"></a>09960 }
<a name="l09961"></a>09961 
<a name="l09962"></a>09962 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_neighbor_received_prefix_filter,
<a name="l09963"></a>09963        show_ip_bgp_neighbor_received_prefix_filter_cmd,
<a name="l09964"></a>09964        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l09965"></a>09965        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l09966"></a>09966        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l09967"></a>09967        BGP_STR
<a name="l09968"></a>09968        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l09969"></a>09969        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09970"></a>09970        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l09971"></a>09971        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l09972"></a>09972        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l09973"></a>09973 {
<a name="l09974"></a>09974   <span class="keywordtype">char</span> name[BUFSIZ];
<a name="l09975"></a>09975   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l09976"></a>09976   <span class="keyword">struct </span>peer *peer;
<a name="l09977"></a>09977   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l09978"></a>09978 
<a name="l09979"></a>09979   su = <a class="code" href="sockunion_8c.html#a3dffcd96d7fff7136a7a35d44727ca0d">sockunion_str2su</a> (argv[0]);
<a name="l09980"></a>09980   <span class="keywordflow">if</span> (su == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l09981"></a>09981     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09982"></a>09982 
<a name="l09983"></a>09983   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, su);
<a name="l09984"></a>09984   <span class="keywordflow">if</span> (! peer)
<a name="l09985"></a>09985     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l09986"></a>09986 
<a name="l09987"></a>09987   sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l09988"></a>09988   count =  <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l09989"></a>09989   <span class="keywordflow">if</span> (count)
<a name="l09990"></a>09990     {
<a name="l09991"></a>09991       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Address family: IPv4 Unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l09992"></a>09992       <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (vty, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l09993"></a>09993     }
<a name="l09994"></a>09994 
<a name="l09995"></a>09995   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l09996"></a>09996 }
<a name="l09997"></a>09997 
<a name="l09998"></a>09998 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_neighbor_received_prefix_filter,
<a name="l09999"></a>09999        show_ip_bgp_ipv4_neighbor_received_prefix_filter_cmd,
<a name="l10000"></a>10000        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l10001"></a>10001        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10002"></a>10002        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10003"></a>10003        BGP_STR
<a name="l10004"></a>10004        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10005"></a>10005        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l10006"></a>10006        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l10007"></a>10007        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10008"></a>10008        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10009"></a>10009        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10010"></a>10010        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l10011"></a>10011        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l10012"></a>10012 {
<a name="l10013"></a>10013   <span class="keywordtype">char</span> name[BUFSIZ];
<a name="l10014"></a>10014   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l10015"></a>10015   <span class="keyword">struct </span>peer *peer;
<a name="l10016"></a>10016   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l10017"></a>10017 
<a name="l10018"></a>10018   su = <a class="code" href="sockunion_8c.html#a3dffcd96d7fff7136a7a35d44727ca0d">sockunion_str2su</a> (argv[1]);
<a name="l10019"></a>10019   <span class="keywordflow">if</span> (su == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10020"></a>10020     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10021"></a>10021 
<a name="l10022"></a>10022   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, su);
<a name="l10023"></a>10023   <span class="keywordflow">if</span> (! peer)
<a name="l10024"></a>10024     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10025"></a>10025 
<a name="l10026"></a>10026   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l10027"></a>10027     {
<a name="l10028"></a>10028       sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l10029"></a>10029       count =  <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l10030"></a>10030       <span class="keywordflow">if</span> (count)
<a name="l10031"></a>10031     {
<a name="l10032"></a>10032       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Address family: IPv4 Multicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10033"></a>10033       <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (vty, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l10034"></a>10034     }
<a name="l10035"></a>10035     }
<a name="l10036"></a>10036   <span class="keywordflow">else</span> 
<a name="l10037"></a>10037     {
<a name="l10038"></a>10038       sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l10039"></a>10039       count =  <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l10040"></a>10040       <span class="keywordflow">if</span> (count)
<a name="l10041"></a>10041     {
<a name="l10042"></a>10042       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Address family: IPv4 Unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10043"></a>10043       <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (vty, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, name);
<a name="l10044"></a>10044     }
<a name="l10045"></a>10045     }
<a name="l10046"></a>10046 
<a name="l10047"></a>10047   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l10048"></a>10048 }
<a name="l10049"></a>10049 
<a name="l10050"></a>10050 
<a name="l10051"></a>10051 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l10052"></a>10052 <span class="preprocessor"></span><a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_received_routes,
<a name="l10053"></a>10053        show_bgp_neighbor_received_routes_cmd,
<a name="l10054"></a>10054        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l10055"></a>10055        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10056"></a>10056        BGP_STR
<a name="l10057"></a>10057        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10058"></a>10058        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10059"></a>10059        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10060"></a>10060        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l10061"></a>10061 
<a name="l10062"></a>10062 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_received_routes,
<a name="l10063"></a>10063        show_bgp_ipv6_neighbor_received_routes_cmd,
<a name="l10064"></a>10064        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l10065"></a>10065        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10066"></a>10066        BGP_STR
<a name="l10067"></a>10067        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10068"></a>10068        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10069"></a>10069        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10070"></a>10070        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10071"></a>10071        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l10072"></a>10072 
<a name="l10073"></a>10073 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_neighbor_received_prefix_filter,
<a name="l10074"></a>10074        show_bgp_neighbor_received_prefix_filter_cmd,
<a name="l10075"></a>10075        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l10076"></a>10076        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10077"></a>10077        BGP_STR
<a name="l10078"></a>10078        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10079"></a>10079        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10080"></a>10080        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10081"></a>10081        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l10082"></a>10082        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l10083"></a>10083 {
<a name="l10084"></a>10084   <span class="keywordtype">char</span> name[BUFSIZ];
<a name="l10085"></a>10085   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l10086"></a>10086   <span class="keyword">struct </span>peer *peer;
<a name="l10087"></a>10087   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l10088"></a>10088 
<a name="l10089"></a>10089   su = <a class="code" href="sockunion_8c.html#a3dffcd96d7fff7136a7a35d44727ca0d">sockunion_str2su</a> (argv[0]);
<a name="l10090"></a>10090   <span class="keywordflow">if</span> (su == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10091"></a>10091     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10092"></a>10092 
<a name="l10093"></a>10093   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, su);
<a name="l10094"></a>10094   <span class="keywordflow">if</span> (! peer)
<a name="l10095"></a>10095     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10096"></a>10096 
<a name="l10097"></a>10097   sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l10098"></a>10098   count =  <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, name);
<a name="l10099"></a>10099   <span class="keywordflow">if</span> (count)
<a name="l10100"></a>10100     {
<a name="l10101"></a>10101       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Address family: IPv6 Unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10102"></a>10102       <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (vty, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, name);
<a name="l10103"></a>10103     }
<a name="l10104"></a>10104 
<a name="l10105"></a>10105   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l10106"></a>10106 }
<a name="l10107"></a>10107 
<a name="l10108"></a>10108 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_neighbor_received_prefix_filter,
<a name="l10109"></a>10109        show_bgp_ipv6_neighbor_received_prefix_filter_cmd,
<a name="l10110"></a>10110        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l10111"></a>10111        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10112"></a>10112        BGP_STR
<a name="l10113"></a>10113        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10114"></a>10114        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10115"></a>10115        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10116"></a>10116        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10117"></a>10117        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l10118"></a>10118        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l10119"></a>10119 
<a name="l10120"></a>10120 <span class="comment">/* old command */</span>
<a name="l10121"></a>10121 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_received_routes,
<a name="l10122"></a>10122        ipv6_bgp_neighbor_received_routes_cmd,
<a name="l10123"></a>10123        <span class="stringliteral">&quot;show ipv6 bgp neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l10124"></a>10124        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10125"></a>10125        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l10126"></a>10126        BGP_STR
<a name="l10127"></a>10127        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10128"></a>10128        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10129"></a>10129        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10130"></a>10130        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l10131"></a>10131 
<a name="l10132"></a>10132 <span class="comment">/* old command */</span>
<a name="l10133"></a>10133 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_mbgp_neighbor_received_routes,
<a name="l10134"></a>10134        ipv6_mbgp_neighbor_received_routes_cmd,
<a name="l10135"></a>10135        <span class="stringliteral">&quot;show ipv6 mbgp neighbors (A.B.C.D|X:X::X:X) received-routes&quot;</span>,
<a name="l10136"></a>10136        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10137"></a>10137        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l10138"></a>10138        MBGP_STR
<a name="l10139"></a>10139        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10140"></a>10140        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10141"></a>10141        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10142"></a>10142        <span class="stringliteral">&quot;Display the received routes from neighbor\n&quot;</span>)
<a name="l10143"></a>10143 {
<a name="l10144"></a>10144   <span class="keyword">struct </span>peer *peer;
<a name="l10145"></a>10145 
<a name="l10146"></a>10146   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10147"></a>10147   <span class="keywordflow">if</span> (! peer)
<a name="l10148"></a>10148     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10149"></a>10149 
<a name="l10150"></a>10150   <span class="keywordflow">return</span> peer_adj_routes (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>, 1);
<a name="l10151"></a>10151 }
<a name="l10152"></a>10152 
<a name="l10153"></a>10153 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_received_prefix_filter,
<a name="l10154"></a>10154        show_bgp_view_neighbor_received_prefix_filter_cmd,
<a name="l10155"></a>10155        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l10156"></a>10156        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10157"></a>10157        BGP_STR
<a name="l10158"></a>10158        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10159"></a>10159        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l10160"></a>10160        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10161"></a>10161        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10162"></a>10162        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10163"></a>10163        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l10164"></a>10164        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l10165"></a>10165 {
<a name="l10166"></a>10166   <span class="keywordtype">char</span> name[BUFSIZ];
<a name="l10167"></a>10167   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l10168"></a>10168   <span class="keyword">struct </span>peer *peer;
<a name="l10169"></a>10169   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l10170"></a>10170   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
<a name="l10171"></a>10171 
<a name="l10172"></a>10172   <span class="comment">/* BGP structure lookup. */</span>
<a name="l10173"></a>10173   bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l10174"></a>10174   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10175"></a>10175   {  
<a name="l10176"></a>10176       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10177"></a>10177       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10178"></a>10178     }
<a name="l10179"></a>10179   
<a name="l10180"></a>10180   su = <a class="code" href="sockunion_8c.html#a3dffcd96d7fff7136a7a35d44727ca0d">sockunion_str2su</a> (argv[1]);
<a name="l10181"></a>10181   <span class="keywordflow">if</span> (su == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10182"></a>10182     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10183"></a>10183 
<a name="l10184"></a>10184   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, su);
<a name="l10185"></a>10185   <span class="keywordflow">if</span> (! peer)
<a name="l10186"></a>10186     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10187"></a>10187 
<a name="l10188"></a>10188   sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l10189"></a>10189   count =  <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, name);
<a name="l10190"></a>10190   <span class="keywordflow">if</span> (count)
<a name="l10191"></a>10191     {
<a name="l10192"></a>10192       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Address family: IPv6 Unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10193"></a>10193       <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (vty, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, name);
<a name="l10194"></a>10194     }
<a name="l10195"></a>10195 
<a name="l10196"></a>10196   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l10197"></a>10197 }
<a name="l10198"></a>10198 
<a name="l10199"></a>10199 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_received_prefix_filter,
<a name="l10200"></a>10200        show_bgp_view_ipv6_neighbor_received_prefix_filter_cmd,
<a name="l10201"></a>10201        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) received prefix-filter&quot;</span>,
<a name="l10202"></a>10202        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10203"></a>10203        BGP_STR
<a name="l10204"></a>10204        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10205"></a>10205        <span class="stringliteral">&quot;View name\n&quot;</span>
<a name="l10206"></a>10206        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10207"></a>10207        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10208"></a>10208        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10209"></a>10209        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10210"></a>10210        <span class="stringliteral">&quot;Display information received from a BGP neighbor\n&quot;</span>
<a name="l10211"></a>10211        <span class="stringliteral">&quot;Display the prefixlist filter\n&quot;</span>)
<a name="l10212"></a>10212 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l10213"></a>10213 
<a name="l10214"></a>10214 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l10215"></a>10215 bgp_show_neighbor_route (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> peer *peer, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l10216"></a>10216              <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">enum</span> <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224">bgp_show_type</a> type)
<a name="l10217"></a>10217 {
<a name="l10218"></a>10218   <span class="keywordflow">if</span> (! peer || ! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l10219"></a>10219     {
<a name="l10220"></a>10220       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No such neighbor or address family%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10221"></a>10221       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10222"></a>10222     }
<a name="l10223"></a>10223  
<a name="l10224"></a>10224   <span class="keywordflow">return</span> bgp_show (vty, peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, afi, safi, type, &amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>);
<a name="l10225"></a>10225 }
<a name="l10226"></a>10226 
<a name="l10227"></a>10227 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_neighbor_routes,
<a name="l10228"></a>10228        show_ip_bgp_neighbor_routes_cmd,
<a name="l10229"></a>10229        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10230"></a>10230        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10231"></a>10231        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10232"></a>10232        BGP_STR
<a name="l10233"></a>10233        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10234"></a>10234        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10235"></a>10235        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10236"></a>10236        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10237"></a>10237 {
<a name="l10238"></a>10238   <span class="keyword">struct </span>peer *peer;
<a name="l10239"></a>10239 
<a name="l10240"></a>10240   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10241"></a>10241   <span class="keywordflow">if</span> (! peer)
<a name="l10242"></a>10242     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10243"></a>10243     
<a name="l10244"></a>10244   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l10245"></a>10245                   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>);
<a name="l10246"></a>10246 }
<a name="l10247"></a>10247 
<a name="l10248"></a>10248 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_neighbor_flap,
<a name="l10249"></a>10249        show_ip_bgp_neighbor_flap_cmd,
<a name="l10250"></a>10250        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) flap-statistics&quot;</span>,
<a name="l10251"></a>10251        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10252"></a>10252        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10253"></a>10253        BGP_STR
<a name="l10254"></a>10254        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10255"></a>10255        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10256"></a>10256        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10257"></a>10257        <span class="stringliteral">&quot;Display flap statistics of the routes learned from neighbor\n&quot;</span>)
<a name="l10258"></a>10258 {
<a name="l10259"></a>10259   <span class="keyword">struct </span>peer *peer;
<a name="l10260"></a>10260 
<a name="l10261"></a>10261   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10262"></a>10262   <span class="keywordflow">if</span> (! peer)
<a name="l10263"></a>10263     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10264"></a>10264     
<a name="l10265"></a>10265   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l10266"></a>10266                   bgp_show_type_flap_neighbor);
<a name="l10267"></a>10267 }
<a name="l10268"></a>10268 
<a name="l10269"></a>10269 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_neighbor_damp,
<a name="l10270"></a>10270        show_ip_bgp_neighbor_damp_cmd,
<a name="l10271"></a>10271        <span class="stringliteral">&quot;show ip bgp neighbors (A.B.C.D|X:X::X:X) dampened-routes&quot;</span>,
<a name="l10272"></a>10272        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10273"></a>10273        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10274"></a>10274        BGP_STR
<a name="l10275"></a>10275        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10276"></a>10276        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10277"></a>10277        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10278"></a>10278        <span class="stringliteral">&quot;Display the dampened routes received from neighbor\n&quot;</span>)
<a name="l10279"></a>10279 {
<a name="l10280"></a>10280   <span class="keyword">struct </span>peer *peer;
<a name="l10281"></a>10281 
<a name="l10282"></a>10282   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10283"></a>10283   <span class="keywordflow">if</span> (! peer)
<a name="l10284"></a>10284     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10285"></a>10285     
<a name="l10286"></a>10286   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l10287"></a>10287                   bgp_show_type_damp_neighbor);
<a name="l10288"></a>10288 }
<a name="l10289"></a>10289 
<a name="l10290"></a>10290 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_ipv4_neighbor_routes,
<a name="l10291"></a>10291        show_ip_bgp_ipv4_neighbor_routes_cmd,
<a name="l10292"></a>10292        <span class="stringliteral">&quot;show ip bgp ipv4 (unicast|multicast) neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10293"></a>10293        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10294"></a>10294        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10295"></a>10295        BGP_STR
<a name="l10296"></a>10296        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10297"></a>10297        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l10298"></a>10298        <span class="stringliteral">&quot;Address Family modifier\n&quot;</span>
<a name="l10299"></a>10299        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10300"></a>10300        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10301"></a>10301        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10302"></a>10302        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10303"></a>10303 {
<a name="l10304"></a>10304   <span class="keyword">struct </span>peer *peer;
<a name="l10305"></a>10305 
<a name="l10306"></a>10306   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1]);
<a name="l10307"></a>10307   <span class="keywordflow">if</span> (! peer)
<a name="l10308"></a>10308     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10309"></a>10309  
<a name="l10310"></a>10310   <span class="keywordflow">if</span> (strncmp (argv[0], <span class="stringliteral">&quot;m&quot;</span>, 1) == 0)
<a name="l10311"></a>10311     <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l10312"></a>10312                     <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>);
<a name="l10313"></a>10313 
<a name="l10314"></a>10314   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l10315"></a>10315                   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>);
<a name="l10316"></a>10316 }
<a name="l10317"></a>10317 
<a name="l10318"></a>10318 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_rsclient,
<a name="l10319"></a>10319        show_ip_bgp_view_rsclient_cmd,
<a name="l10320"></a>10320        <span class="stringliteral">&quot;show ip bgp view WORD rsclient (A.B.C.D|X:X::X:X)&quot;</span>,
<a name="l10321"></a>10321        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10322"></a>10322        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10323"></a>10323        BGP_STR
<a name="l10324"></a>10324        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10325"></a>10325        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10326"></a>10326        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10327"></a>10327        <a class="code" href="command_8h.html#adea1765cb4d5317694399cb0f03ba7b8">NEIGHBOR_ADDR_STR</a>)
<a name="l10328"></a>10328 {
<a name="l10329"></a>10329   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l10330"></a>10330   <span class="keyword">struct </span>peer *peer;
<a name="l10331"></a>10331 
<a name="l10332"></a>10332   <span class="keywordflow">if</span> (argc == 2)
<a name="l10333"></a>10333     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10334"></a>10334   <span class="keywordflow">else</span>
<a name="l10335"></a>10335     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10336"></a>10336 
<a name="l10337"></a>10337   <span class="keywordflow">if</span> (! peer)
<a name="l10338"></a>10338     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10339"></a>10339 
<a name="l10340"></a>10340   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST])
<a name="l10341"></a>10341     {
<a name="l10342"></a>10342       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10343"></a>10343             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10344"></a>10344       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10345"></a>10345     }
<a name="l10346"></a>10346 
<a name="l10347"></a>10347   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST],
<a name="l10348"></a>10348               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10349"></a>10349     {
<a name="l10350"></a>10350       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10351"></a>10351             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10352"></a>10352       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10353"></a>10353     }
<a name="l10354"></a>10354 
<a name="l10355"></a>10355   table = peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l10356"></a>10356 
<a name="l10357"></a>10357   <span class="keywordflow">return</span> bgp_show_table (vty, table, &amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l10358"></a>10358 }
<a name="l10359"></a>10359 
<a name="l10360"></a>10360 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_view_rsclient,
<a name="l10361"></a>10361        show_ip_bgp_rsclient_cmd,
<a name="l10362"></a>10362        <span class="stringliteral">&quot;show ip bgp rsclient (A.B.C.D|X:X::X:X)&quot;</span>,
<a name="l10363"></a>10363        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10364"></a>10364        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10365"></a>10365        BGP_STR
<a name="l10366"></a>10366        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10367"></a>10367        NEIGHBOR_ADDR_STR)
<a name="l10368"></a>10368 
<a name="l10369"></a>10369 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_rsclient_route,
<a name="l10370"></a>10370        show_ip_bgp_view_rsclient_route_cmd,
<a name="l10371"></a>10371        <span class="stringliteral">&quot;show ip bgp view WORD rsclient (A.B.C.D|X:X::X:X) A.B.C.D&quot;</span>,
<a name="l10372"></a>10372        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10373"></a>10373        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10374"></a>10374        BGP_STR
<a name="l10375"></a>10375        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10376"></a>10376        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10377"></a>10377        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10378"></a>10378        NEIGHBOR_ADDR_STR
<a name="l10379"></a>10379        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l10380"></a>10380 {
<a name="l10381"></a>10381   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l10382"></a>10382   <span class="keyword">struct </span>peer *peer;
<a name="l10383"></a>10383 
<a name="l10384"></a>10384   <span class="comment">/* BGP structure lookup. */</span>
<a name="l10385"></a>10385   <span class="keywordflow">if</span> (argc == 3)
<a name="l10386"></a>10386     {
<a name="l10387"></a>10387       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l10388"></a>10388       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10389"></a>10389     {
<a name="l10390"></a>10390       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10391"></a>10391       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10392"></a>10392     }
<a name="l10393"></a>10393     }
<a name="l10394"></a>10394   <span class="keywordflow">else</span>
<a name="l10395"></a>10395     {
<a name="l10396"></a>10396       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l10397"></a>10397       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10398"></a>10398     {
<a name="l10399"></a>10399       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10400"></a>10400       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10401"></a>10401     }
<a name="l10402"></a>10402     }
<a name="l10403"></a>10403 
<a name="l10404"></a>10404   <span class="keywordflow">if</span> (argc == 3)
<a name="l10405"></a>10405     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10406"></a>10406   <span class="keywordflow">else</span>
<a name="l10407"></a>10407     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10408"></a>10408 
<a name="l10409"></a>10409   <span class="keywordflow">if</span> (! peer)
<a name="l10410"></a>10410     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10411"></a>10411 
<a name="l10412"></a>10412   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST])
<a name="l10413"></a>10413     {
<a name="l10414"></a>10414       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10415"></a>10415             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10416"></a>10416       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10417"></a>10417 }
<a name="l10418"></a>10418 
<a name="l10419"></a>10419   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST],
<a name="l10420"></a>10420               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10421"></a>10421     {
<a name="l10422"></a>10422       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10423"></a>10423             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10424"></a>10424       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10425"></a>10425     }
<a name="l10426"></a>10426  
<a name="l10427"></a>10427   <span class="keywordflow">return</span> bgp_show_route_in_table (vty, bgp, peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST], 
<a name="l10428"></a>10428                                   (argc == 3) ? argv[2] : argv[1],
<a name="l10429"></a>10429                                   <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l10430"></a>10430 }
<a name="l10431"></a>10431 
<a name="l10432"></a>10432 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_view_rsclient_route,
<a name="l10433"></a>10433        show_ip_bgp_rsclient_route_cmd,
<a name="l10434"></a>10434        <span class="stringliteral">&quot;show ip bgp rsclient (A.B.C.D|X:X::X:X) A.B.C.D&quot;</span>,
<a name="l10435"></a>10435        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10436"></a>10436        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10437"></a>10437        BGP_STR
<a name="l10438"></a>10438        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10439"></a>10439        NEIGHBOR_ADDR_STR
<a name="l10440"></a>10440        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l10441"></a>10441 
<a name="l10442"></a>10442 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_view_rsclient_prefix,
<a name="l10443"></a>10443        show_ip_bgp_view_rsclient_prefix_cmd,
<a name="l10444"></a>10444        <span class="stringliteral">&quot;show ip bgp view WORD rsclient (A.B.C.D|X:X::X:X) A.B.C.D/M&quot;</span>,
<a name="l10445"></a>10445        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10446"></a>10446        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10447"></a>10447        BGP_STR
<a name="l10448"></a>10448        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10449"></a>10449        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10450"></a>10450        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10451"></a>10451        NEIGHBOR_ADDR_STR
<a name="l10452"></a>10452        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l10453"></a>10453 {
<a name="l10454"></a>10454   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l10455"></a>10455   <span class="keyword">struct </span>peer *peer;
<a name="l10456"></a>10456 
<a name="l10457"></a>10457   <span class="comment">/* BGP structure lookup. */</span>
<a name="l10458"></a>10458   <span class="keywordflow">if</span> (argc == 3)
<a name="l10459"></a>10459     {
<a name="l10460"></a>10460       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l10461"></a>10461       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10462"></a>10462     {
<a name="l10463"></a>10463       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10464"></a>10464       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10465"></a>10465     }
<a name="l10466"></a>10466     }
<a name="l10467"></a>10467   <span class="keywordflow">else</span>
<a name="l10468"></a>10468     {
<a name="l10469"></a>10469       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l10470"></a>10470       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10471"></a>10471     {
<a name="l10472"></a>10472       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10473"></a>10473       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10474"></a>10474     }
<a name="l10475"></a>10475     }
<a name="l10476"></a>10476 
<a name="l10477"></a>10477   <span class="keywordflow">if</span> (argc == 3)
<a name="l10478"></a>10478     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10479"></a>10479   <span class="keywordflow">else</span>
<a name="l10480"></a>10480   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10481"></a>10481 
<a name="l10482"></a>10482   <span class="keywordflow">if</span> (! peer)
<a name="l10483"></a>10483     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10484"></a>10484     
<a name="l10485"></a>10485   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST])
<a name="l10486"></a>10486     {
<a name="l10487"></a>10487       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10488"></a>10488             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10489"></a>10489       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10490"></a>10490 }
<a name="l10491"></a>10491 
<a name="l10492"></a>10492   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST],
<a name="l10493"></a>10493               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10494"></a>10494 {
<a name="l10495"></a>10495       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10496"></a>10496             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10497"></a>10497     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10498"></a>10498     }
<a name="l10499"></a>10499     
<a name="l10500"></a>10500   <span class="keywordflow">return</span> bgp_show_route_in_table (vty, bgp, peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST], 
<a name="l10501"></a>10501                                   (argc == 3) ? argv[2] : argv[1],
<a name="l10502"></a>10502                                   <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l10503"></a>10503 }
<a name="l10504"></a>10504 
<a name="l10505"></a>10505 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_ip_bgp_view_rsclient_prefix,
<a name="l10506"></a>10506        show_ip_bgp_rsclient_prefix_cmd,
<a name="l10507"></a>10507        <span class="stringliteral">&quot;show ip bgp rsclient (A.B.C.D|X:X::X:X) A.B.C.D/M&quot;</span>,
<a name="l10508"></a>10508        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10509"></a>10509        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l10510"></a>10510        BGP_STR
<a name="l10511"></a>10511        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10512"></a>10512        NEIGHBOR_ADDR_STR
<a name="l10513"></a>10513        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l10514"></a>10514 
<a name="l10515"></a>10515 
<a name="l10516"></a>10516 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l10517"></a>10517 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_routes,
<a name="l10518"></a>10518        show_bgp_view_neighbor_routes_cmd,
<a name="l10519"></a>10519        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10520"></a>10520        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10521"></a>10521        BGP_STR
<a name="l10522"></a>10522        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10523"></a>10523        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10524"></a>10524        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10525"></a>10525        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10526"></a>10526        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10527"></a>10527        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10528"></a>10528 {
<a name="l10529"></a>10529   <span class="keyword">struct </span>peer *peer;
<a name="l10530"></a>10530 
<a name="l10531"></a>10531   <span class="keywordflow">if</span> (argc == 2)
<a name="l10532"></a>10532     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10533"></a>10533   <span class="keywordflow">else</span>
<a name="l10534"></a>10534     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10535"></a>10535    
<a name="l10536"></a>10536   <span class="keywordflow">if</span> (! peer)
<a name="l10537"></a>10537     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10538"></a>10538 
<a name="l10539"></a>10539   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l10540"></a>10540                   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>);
<a name="l10541"></a>10541 }
<a name="l10542"></a>10542 
<a name="l10543"></a>10543 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_routes,
<a name="l10544"></a>10544        show_bgp_view_ipv6_neighbor_routes_cmd,
<a name="l10545"></a>10545        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10546"></a>10546        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10547"></a>10547        BGP_STR
<a name="l10548"></a>10548        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10549"></a>10549        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10550"></a>10550        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10551"></a>10551        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10552"></a>10552        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10553"></a>10553        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10554"></a>10554        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10555"></a>10555 
<a name="l10556"></a>10556 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_damp,
<a name="l10557"></a>10557        show_bgp_view_neighbor_damp_cmd,
<a name="l10558"></a>10558        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) dampened-routes&quot;</span>,
<a name="l10559"></a>10559        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10560"></a>10560        BGP_STR
<a name="l10561"></a>10561        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10562"></a>10562        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10563"></a>10563        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10564"></a>10564        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10565"></a>10565        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10566"></a>10566        <span class="stringliteral">&quot;Display the dampened routes received from neighbor\n&quot;</span>)
<a name="l10567"></a>10567 {
<a name="l10568"></a>10568   <span class="keyword">struct </span>peer *peer;
<a name="l10569"></a>10569 
<a name="l10570"></a>10570   <span class="keywordflow">if</span> (argc == 2)
<a name="l10571"></a>10571     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10572"></a>10572   <span class="keywordflow">else</span>
<a name="l10573"></a>10573     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10574"></a>10574 
<a name="l10575"></a>10575   <span class="keywordflow">if</span> (! peer)
<a name="l10576"></a>10576     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10577"></a>10577 
<a name="l10578"></a>10578   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l10579"></a>10579                   bgp_show_type_damp_neighbor);
<a name="l10580"></a>10580 }
<a name="l10581"></a>10581 
<a name="l10582"></a>10582 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_damp,
<a name="l10583"></a>10583        show_bgp_view_ipv6_neighbor_damp_cmd,
<a name="l10584"></a>10584        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) dampened-routes&quot;</span>,
<a name="l10585"></a>10585        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10586"></a>10586        BGP_STR
<a name="l10587"></a>10587        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10588"></a>10588        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10589"></a>10589        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10590"></a>10590        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10591"></a>10591        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10592"></a>10592        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10593"></a>10593        <span class="stringliteral">&quot;Display the dampened routes received from neighbor\n&quot;</span>)
<a name="l10594"></a>10594 
<a name="l10595"></a>10595 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_neighbor_flap,
<a name="l10596"></a>10596        show_bgp_view_neighbor_flap_cmd,
<a name="l10597"></a>10597        <span class="stringliteral">&quot;show bgp view WORD neighbors (A.B.C.D|X:X::X:X) flap-statistics&quot;</span>,
<a name="l10598"></a>10598        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10599"></a>10599        BGP_STR
<a name="l10600"></a>10600        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10601"></a>10601        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10602"></a>10602        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10603"></a>10603        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10604"></a>10604        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10605"></a>10605        <span class="stringliteral">&quot;Display flap statistics of the routes learned from neighbor\n&quot;</span>)
<a name="l10606"></a>10606 {
<a name="l10607"></a>10607   <span class="keyword">struct </span>peer *peer;
<a name="l10608"></a>10608 
<a name="l10609"></a>10609   <span class="keywordflow">if</span> (argc == 2)
<a name="l10610"></a>10610     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10611"></a>10611   <span class="keywordflow">else</span>
<a name="l10612"></a>10612     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10613"></a>10613 
<a name="l10614"></a>10614   <span class="keywordflow">if</span> (! peer)
<a name="l10615"></a>10615     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10616"></a>10616 
<a name="l10617"></a>10617   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST,
<a name="l10618"></a>10618                   bgp_show_type_flap_neighbor);
<a name="l10619"></a>10619 }
<a name="l10620"></a>10620 
<a name="l10621"></a>10621 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_flap,
<a name="l10622"></a>10622        show_bgp_view_ipv6_neighbor_flap_cmd,
<a name="l10623"></a>10623        <span class="stringliteral">&quot;show bgp view WORD ipv6 neighbors (A.B.C.D|X:X::X:X) flap-statistics&quot;</span>,
<a name="l10624"></a>10624        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10625"></a>10625        BGP_STR
<a name="l10626"></a>10626        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10627"></a>10627        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10628"></a>10628        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10629"></a>10629        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10630"></a>10630        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10631"></a>10631        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10632"></a>10632        <span class="stringliteral">&quot;Display flap statistics of the routes learned from neighbor\n&quot;</span>)
<a name="l10633"></a>10633        
<a name="l10634"></a>10634 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_routes,
<a name="l10635"></a>10635        show_bgp_neighbor_routes_cmd,
<a name="l10636"></a>10636        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10637"></a>10637        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10638"></a>10638        BGP_STR
<a name="l10639"></a>10639        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10640"></a>10640        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10641"></a>10641        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10642"></a>10642        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10643"></a>10643 
<a name="l10644"></a>10644 
<a name="l10645"></a>10645 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_routes,
<a name="l10646"></a>10646        show_bgp_ipv6_neighbor_routes_cmd,
<a name="l10647"></a>10647        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10648"></a>10648        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10649"></a>10649        BGP_STR
<a name="l10650"></a>10650        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10651"></a>10651        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10652"></a>10652        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10653"></a>10653        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10654"></a>10654        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10655"></a>10655 
<a name="l10656"></a>10656 <span class="comment">/* old command */</span>
<a name="l10657"></a>10657 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_routes,
<a name="l10658"></a>10658        ipv6_bgp_neighbor_routes_cmd,
<a name="l10659"></a>10659        <span class="stringliteral">&quot;show ipv6 bgp neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10660"></a>10660        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10661"></a>10661        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l10662"></a>10662        BGP_STR
<a name="l10663"></a>10663        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10664"></a>10664        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10665"></a>10665        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10666"></a>10666        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10667"></a>10667 
<a name="l10668"></a>10668 <span class="comment">/* old command */</span>
<a name="l10669"></a>10669 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_mbgp_neighbor_routes,
<a name="l10670"></a>10670        ipv6_mbgp_neighbor_routes_cmd,
<a name="l10671"></a>10671        <span class="stringliteral">&quot;show ipv6 mbgp neighbors (A.B.C.D|X:X::X:X) routes&quot;</span>,
<a name="l10672"></a>10672        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10673"></a>10673        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l10674"></a>10674        MBGP_STR
<a name="l10675"></a>10675        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10676"></a>10676        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10677"></a>10677        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10678"></a>10678        <span class="stringliteral">&quot;Display routes learned from neighbor\n&quot;</span>)
<a name="l10679"></a>10679 {
<a name="l10680"></a>10680   <span class="keyword">struct </span>peer *peer;
<a name="l10681"></a>10681 
<a name="l10682"></a>10682   peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10683"></a>10683   <span class="keywordflow">if</span> (! peer)
<a name="l10684"></a>10684     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10685"></a>10685  
<a name="l10686"></a>10686   <span class="keywordflow">return</span> bgp_show_neighbor_route (vty, peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>,
<a name="l10687"></a>10687                   <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224a1b22bf3ffc2791723ea0a31a7426a641">bgp_show_type_neighbor</a>);
<a name="l10688"></a>10688 }
<a name="l10689"></a>10689 
<a name="l10690"></a>10690 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_flap,
<a name="l10691"></a>10691        show_bgp_neighbor_flap_cmd,
<a name="l10692"></a>10692        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) flap-statistics&quot;</span>,
<a name="l10693"></a>10693        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10694"></a>10694        BGP_STR
<a name="l10695"></a>10695        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10696"></a>10696        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10697"></a>10697        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10698"></a>10698        <span class="stringliteral">&quot;Display flap statistics of the routes learned from neighbor\n&quot;</span>)
<a name="l10699"></a>10699 
<a name="l10700"></a>10700 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_flap,
<a name="l10701"></a>10701        show_bgp_ipv6_neighbor_flap_cmd,
<a name="l10702"></a>10702        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) flap-statistics&quot;</span>,
<a name="l10703"></a>10703        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10704"></a>10704        BGP_STR
<a name="l10705"></a>10705        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10706"></a>10706        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10707"></a>10707        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10708"></a>10708        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10709"></a>10709        <span class="stringliteral">&quot;Display flap statistics of the routes learned from neighbor\n&quot;</span>)
<a name="l10710"></a>10710 
<a name="l10711"></a>10711 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_damp,
<a name="l10712"></a>10712        show_bgp_neighbor_damp_cmd,
<a name="l10713"></a>10713        <span class="stringliteral">&quot;show bgp neighbors (A.B.C.D|X:X::X:X) dampened-routes&quot;</span>,
<a name="l10714"></a>10714        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10715"></a>10715        BGP_STR
<a name="l10716"></a>10716        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10717"></a>10717        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10718"></a>10718        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10719"></a>10719        <span class="stringliteral">&quot;Display the dampened routes received from neighbor\n&quot;</span>)
<a name="l10720"></a>10720 
<a name="l10721"></a>10721 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_neighbor_damp,
<a name="l10722"></a>10722        show_bgp_ipv6_neighbor_damp_cmd,
<a name="l10723"></a>10723        <span class="stringliteral">&quot;show bgp ipv6 neighbors (A.B.C.D|X:X::X:X) dampened-routes&quot;</span>,
<a name="l10724"></a>10724        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10725"></a>10725        BGP_STR
<a name="l10726"></a>10726        <span class="stringliteral">&quot;Address family\n&quot;</span>
<a name="l10727"></a>10727        <span class="stringliteral">&quot;Detailed information on TCP and BGP neighbor connections\n&quot;</span>
<a name="l10728"></a>10728        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10729"></a>10729        <span class="stringliteral">&quot;Neighbor to display information about\n&quot;</span>
<a name="l10730"></a>10730        <span class="stringliteral">&quot;Display the dampened routes received from neighbor\n&quot;</span>)
<a name="l10731"></a>10731 
<a name="l10732"></a>10732 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_rsclient,
<a name="l10733"></a>10733        show_bgp_view_rsclient_cmd,
<a name="l10734"></a>10734        <span class="stringliteral">&quot;show bgp view WORD rsclient (A.B.C.D|X:X::X:X)&quot;</span>,
<a name="l10735"></a>10735        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10736"></a>10736        BGP_STR
<a name="l10737"></a>10737        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10738"></a>10738        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10739"></a>10739        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10740"></a>10740        NEIGHBOR_ADDR_STR)
<a name="l10741"></a>10741 {
<a name="l10742"></a>10742   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l10743"></a>10743   <span class="keyword">struct </span>peer *peer;
<a name="l10744"></a>10744 
<a name="l10745"></a>10745   <span class="keywordflow">if</span> (argc == 2)
<a name="l10746"></a>10746     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10747"></a>10747   <span class="keywordflow">else</span>
<a name="l10748"></a>10748     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10749"></a>10749 
<a name="l10750"></a>10750   <span class="keywordflow">if</span> (! peer)
<a name="l10751"></a>10751     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10752"></a>10752 
<a name="l10753"></a>10753   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l10754"></a>10754     {
<a name="l10755"></a>10755       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10756"></a>10756             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10757"></a>10757       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10758"></a>10758     }
<a name="l10759"></a>10759 
<a name="l10760"></a>10760   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l10761"></a>10761               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10762"></a>10762     {
<a name="l10763"></a>10763       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10764"></a>10764             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10765"></a>10765       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10766"></a>10766     }
<a name="l10767"></a>10767 
<a name="l10768"></a>10768   table = peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l10769"></a>10769 
<a name="l10770"></a>10770   <span class="keywordflow">return</span> bgp_show_table (vty, table, &amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, <a class="code" href="bgp__mplsvpn_8c.html#ac195e619a0a62398127e5551f4e6b224abf37805650c47f8027ad95cff9c9487a">bgp_show_type_normal</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l10771"></a>10771 }
<a name="l10772"></a>10772 
<a name="l10773"></a>10773 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_rsclient,
<a name="l10774"></a>10774        show_bgp_rsclient_cmd,
<a name="l10775"></a>10775        <span class="stringliteral">&quot;show bgp rsclient (A.B.C.D|X:X::X:X)&quot;</span>,
<a name="l10776"></a>10776        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10777"></a>10777        BGP_STR
<a name="l10778"></a>10778        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10779"></a>10779        NEIGHBOR_ADDR_STR)
<a name="l10780"></a>10780 
<a name="l10781"></a>10781 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_rsclient_route,
<a name="l10782"></a>10782        show_bgp_view_rsclient_route_cmd,
<a name="l10783"></a>10783        <span class="stringliteral">&quot;show bgp view WORD rsclient (A.B.C.D|X:X::X:X) X:X::X:X&quot;</span>,
<a name="l10784"></a>10784        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10785"></a>10785        BGP_STR
<a name="l10786"></a>10786        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10787"></a>10787        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10788"></a>10788        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10789"></a>10789        NEIGHBOR_ADDR_STR
<a name="l10790"></a>10790        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l10791"></a>10791 {
<a name="l10792"></a>10792   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l10793"></a>10793   <span class="keyword">struct </span>peer *peer;
<a name="l10794"></a>10794 
<a name="l10795"></a>10795   <span class="comment">/* BGP structure lookup. */</span>
<a name="l10796"></a>10796   <span class="keywordflow">if</span> (argc == 3)
<a name="l10797"></a>10797     {
<a name="l10798"></a>10798       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l10799"></a>10799       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10800"></a>10800         {
<a name="l10801"></a>10801           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10802"></a>10802           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10803"></a>10803         }
<a name="l10804"></a>10804     }
<a name="l10805"></a>10805   <span class="keywordflow">else</span>
<a name="l10806"></a>10806     {
<a name="l10807"></a>10807       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l10808"></a>10808       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10809"></a>10809         {
<a name="l10810"></a>10810           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10811"></a>10811           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10812"></a>10812         }
<a name="l10813"></a>10813     }
<a name="l10814"></a>10814 
<a name="l10815"></a>10815   <span class="keywordflow">if</span> (argc == 3)
<a name="l10816"></a>10816     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10817"></a>10817   <span class="keywordflow">else</span>
<a name="l10818"></a>10818     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10819"></a>10819 
<a name="l10820"></a>10820   <span class="keywordflow">if</span> (! peer)
<a name="l10821"></a>10821     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10822"></a>10822 
<a name="l10823"></a>10823   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l10824"></a>10824     {
<a name="l10825"></a>10825       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10826"></a>10826             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10827"></a>10827       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10828"></a>10828     }
<a name="l10829"></a>10829 
<a name="l10830"></a>10830   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l10831"></a>10831               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10832"></a>10832     {
<a name="l10833"></a>10833       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10834"></a>10834             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10835"></a>10835       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10836"></a>10836     }
<a name="l10837"></a>10837 
<a name="l10838"></a>10838   <span class="keywordflow">return</span> bgp_show_route_in_table (vty, bgp, peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l10839"></a>10839                                   (argc == 3) ? argv[2] : argv[1],
<a name="l10840"></a>10840                                   <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l10841"></a>10841 }
<a name="l10842"></a>10842 
<a name="l10843"></a>10843 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_rsclient_route,
<a name="l10844"></a>10844        show_bgp_rsclient_route_cmd,
<a name="l10845"></a>10845        <span class="stringliteral">&quot;show bgp rsclient (A.B.C.D|X:X::X:X) X:X::X:X&quot;</span>,
<a name="l10846"></a>10846        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10847"></a>10847        BGP_STR
<a name="l10848"></a>10848        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10849"></a>10849        NEIGHBOR_ADDR_STR
<a name="l10850"></a>10850        <span class="stringliteral">&quot;Network in the BGP routing table to display\n&quot;</span>)
<a name="l10851"></a>10851 
<a name="l10852"></a>10852 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_bgp_view_rsclient_prefix,
<a name="l10853"></a>10853        show_bgp_view_rsclient_prefix_cmd,
<a name="l10854"></a>10854        <span class="stringliteral">&quot;show bgp view WORD rsclient (A.B.C.D|X:X::X:X) X:X::X:X/M&quot;</span>,
<a name="l10855"></a>10855        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10856"></a>10856        BGP_STR
<a name="l10857"></a>10857        <span class="stringliteral">&quot;BGP view\n&quot;</span>
<a name="l10858"></a>10858        <span class="stringliteral">&quot;BGP view name\n&quot;</span>
<a name="l10859"></a>10859        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10860"></a>10860        NEIGHBOR_ADDR_STR
<a name="l10861"></a>10861        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l10862"></a>10862 {
<a name="l10863"></a>10863   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l10864"></a>10864   <span class="keyword">struct </span>peer *peer;
<a name="l10865"></a>10865 
<a name="l10866"></a>10866   <span class="comment">/* BGP structure lookup. */</span>
<a name="l10867"></a>10867   <span class="keywordflow">if</span> (argc == 3)
<a name="l10868"></a>10868     {
<a name="l10869"></a>10869       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (argv[0]);
<a name="l10870"></a>10870       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10871"></a>10871         {
<a name="l10872"></a>10872           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find BGP view %s%s&quot;</span>, argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10873"></a>10873           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10874"></a>10874         }
<a name="l10875"></a>10875     }
<a name="l10876"></a>10876   <span class="keywordflow">else</span>
<a name="l10877"></a>10877     {
<a name="l10878"></a>10878       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l10879"></a>10879       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l10880"></a>10880         {
<a name="l10881"></a>10881           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10882"></a>10882           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10883"></a>10883         }
<a name="l10884"></a>10884     }
<a name="l10885"></a>10885 
<a name="l10886"></a>10886   <span class="keywordflow">if</span> (argc == 3)
<a name="l10887"></a>10887     peer = peer_lookup_in_view (vty, argv[0], argv[1]);
<a name="l10888"></a>10888   <span class="keywordflow">else</span>
<a name="l10889"></a>10889     peer = peer_lookup_in_view (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0]);
<a name="l10890"></a>10890 
<a name="l10891"></a>10891   <span class="keywordflow">if</span> (! peer)
<a name="l10892"></a>10892     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10893"></a>10893 
<a name="l10894"></a>10894   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l10895"></a>10895     {
<a name="l10896"></a>10896       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Activate the neighbor for the address family first%s&quot;</span>,
<a name="l10897"></a>10897             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10898"></a>10898       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10899"></a>10899     }
<a name="l10900"></a>10900 
<a name="l10901"></a>10901   <span class="keywordflow">if</span> ( ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l10902"></a>10902               <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l10903"></a>10903     {
<a name="l10904"></a>10904       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Neighbor is not a Route-Server client%s&quot;</span>,
<a name="l10905"></a>10905             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10906"></a>10906       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10907"></a>10907     }
<a name="l10908"></a>10908 
<a name="l10909"></a>10909   <span class="keywordflow">return</span> bgp_show_route_in_table (vty, bgp, peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l10910"></a>10910                                   (argc == 3) ? argv[2] : argv[1],
<a name="l10911"></a>10911                                   <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l10912"></a>10912 }
<a name="l10913"></a>10913 
<a name="l10914"></a>10914 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_bgp_view_rsclient_prefix,
<a name="l10915"></a>10915        show_bgp_rsclient_prefix_cmd,
<a name="l10916"></a>10916        <span class="stringliteral">&quot;show bgp rsclient (A.B.C.D|X:X::X:X) X:X::X:X/M&quot;</span>,
<a name="l10917"></a>10917        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l10918"></a>10918        BGP_STR
<a name="l10919"></a>10919        <span class="stringliteral">&quot;Information about Route Server Client\n&quot;</span>
<a name="l10920"></a>10920        NEIGHBOR_ADDR_STR
<a name="l10921"></a>10921        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l10922"></a>10922 
<a name="l10923"></a>10923 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l10924"></a>10924 
<a name="l10925"></a>10925 <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *bgp_distance_table;
<a name="l10926"></a>10926 
<a name="l10927"></a>10927 <span class="keyword">struct </span>bgp_distance
<a name="l10928"></a>10928 {
<a name="l10929"></a>10929   <span class="comment">/* Distance value for the IP source prefix. */</span>
<a name="l10930"></a>10930   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l10931"></a>10931 
<a name="l10932"></a>10932   <span class="comment">/* Name of the access-list to be matched. */</span>
<a name="l10933"></a>10933   <span class="keywordtype">char</span> *<a class="code" href="structaccess__list.html">access_list</a>;
<a name="l10934"></a>10934 };
<a name="l10935"></a>10935 
<a name="l10936"></a>10936 <span class="keyword">static</span> <span class="keyword">struct </span>bgp_distance *
<a name="l10937"></a>10937 bgp_distance_new (<span class="keywordtype">void</span>)
<a name="l10938"></a>10938 {
<a name="l10939"></a>10939   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae963efcbc93d8c291e0074c172237a51">MTYPE_BGP_DISTANCE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> bgp_distance));
<a name="l10940"></a>10940 }
<a name="l10941"></a>10941 
<a name="l10942"></a>10942 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l10943"></a>10943 bgp_distance_free (<span class="keyword">struct</span> bgp_distance *bdistance)
<a name="l10944"></a>10944 {
<a name="l10945"></a>10945   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae963efcbc93d8c291e0074c172237a51">MTYPE_BGP_DISTANCE</a>, bdistance);
<a name="l10946"></a>10946 }
<a name="l10947"></a>10947 
<a name="l10948"></a>10948 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l10949"></a>10949 bgp_distance_set (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *distance_str, 
<a name="l10950"></a>10950                   <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *access_list_str)
<a name="l10951"></a>10951 {
<a name="l10952"></a>10952   <span class="keywordtype">int</span> ret;
<a name="l10953"></a>10953   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l10954"></a>10954   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l10955"></a>10955   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l10956"></a>10956   <span class="keyword">struct </span>bgp_distance *bdistance;
<a name="l10957"></a>10957 
<a name="l10958"></a>10958   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;p);
<a name="l10959"></a>10959   <span class="keywordflow">if</span> (ret == 0)
<a name="l10960"></a>10960     {
<a name="l10961"></a>10961       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l10962"></a>10962       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l10963"></a>10963     }
<a name="l10964"></a>10964 
<a name="l10965"></a>10965   distance = atoi (distance_str);
<a name="l10966"></a>10966 
<a name="l10967"></a>10967   <span class="comment">/* Get BGP distance node. */</span>
<a name="l10968"></a>10968   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp_distance_table, (<span class="keyword">struct</span> prefix *) &amp;p);
<a name="l10969"></a>10969   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l10970"></a>10970     {
<a name="l10971"></a>10971       bdistance = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l10972"></a>10972       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l10973"></a>10973     }
<a name="l10974"></a>10974   <span class="keywordflow">else</span>
<a name="l10975"></a>10975     {
<a name="l10976"></a>10976       bdistance = bgp_distance_new ();
<a name="l10977"></a>10977       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bdistance;
<a name="l10978"></a>10978     }
<a name="l10979"></a>10979 
<a name="l10980"></a>10980   <span class="comment">/* Set distance value. */</span>
<a name="l10981"></a>10981   bdistance-&gt;distance = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l10982"></a>10982 
<a name="l10983"></a>10983   <span class="comment">/* Reset access-list configuration. */</span>
<a name="l10984"></a>10984   <span class="keywordflow">if</span> (bdistance-&gt;access_list)
<a name="l10985"></a>10985     {
<a name="l10986"></a>10986       free (bdistance-&gt;access_list);
<a name="l10987"></a>10987       bdistance-&gt;access_list = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l10988"></a>10988     }
<a name="l10989"></a>10989   <span class="keywordflow">if</span> (access_list_str)
<a name="l10990"></a>10990     bdistance-&gt;access_list = strdup (access_list_str);
<a name="l10991"></a>10991 
<a name="l10992"></a>10992   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l10993"></a>10993 }
<a name="l10994"></a>10994 
<a name="l10995"></a>10995 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l10996"></a>10996 bgp_distance_unset (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *distance_str, 
<a name="l10997"></a>10997                     <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *access_list_str)
<a name="l10998"></a>10998 {
<a name="l10999"></a>10999   <span class="keywordtype">int</span> ret;
<a name="l11000"></a>11000   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l11001"></a>11001   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l11002"></a>11002   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11003"></a>11003   <span class="keyword">struct </span>bgp_distance *bdistance;
<a name="l11004"></a>11004 
<a name="l11005"></a>11005   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;p);
<a name="l11006"></a>11006   <span class="keywordflow">if</span> (ret == 0)
<a name="l11007"></a>11007     {
<a name="l11008"></a>11008       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11009"></a>11009       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11010"></a>11010     }
<a name="l11011"></a>11011 
<a name="l11012"></a>11012   distance = atoi (distance_str);
<a name="l11013"></a>11013 
<a name="l11014"></a>11014   rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp_distance_table, (<span class="keyword">struct</span> prefix *)&amp;p);
<a name="l11015"></a>11015   <span class="keywordflow">if</span> (! rn)
<a name="l11016"></a>11016     {
<a name="l11017"></a>11017       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find specified prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11018"></a>11018       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11019"></a>11019     }
<a name="l11020"></a>11020 
<a name="l11021"></a>11021   bdistance = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l11022"></a>11022 
<a name="l11023"></a>11023   <span class="keywordflow">if</span> (bdistance-&gt;access_list)
<a name="l11024"></a>11024     free (bdistance-&gt;access_list);
<a name="l11025"></a>11025   bgp_distance_free (bdistance);
<a name="l11026"></a>11026 
<a name="l11027"></a>11027   rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l11028"></a>11028   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l11029"></a>11029   <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l11030"></a>11030 
<a name="l11031"></a>11031   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11032"></a>11032 }
<a name="l11033"></a>11033 
<a name="l11034"></a>11034 <span class="comment">/* Apply BGP information to distance method. */</span>
<a name="l11035"></a>11035 u_char
<a name="l11036"></a>11036 <a class="code" href="bgp__route_8h.html#a45aae1ba2d5eedac029237c73f16881e">bgp_distance_apply</a> (<span class="keyword">struct</span> prefix *p, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *rinfo, <span class="keyword">struct</span> bgp *bgp)
<a name="l11037"></a>11037 {
<a name="l11038"></a>11038   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11039"></a>11039   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> q;
<a name="l11040"></a>11040   <span class="keyword">struct </span>peer *peer;
<a name="l11041"></a>11041   <span class="keyword">struct </span>bgp_distance *bdistance;
<a name="l11042"></a>11042   <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
<a name="l11043"></a>11043   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l11044"></a>11044 
<a name="l11045"></a>11045   <span class="keywordflow">if</span> (! bgp)
<a name="l11046"></a>11046     <span class="keywordflow">return</span> 0;
<a name="l11047"></a>11047 
<a name="l11048"></a>11048   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET)
<a name="l11049"></a>11049     <span class="keywordflow">return</span> 0;
<a name="l11050"></a>11050 
<a name="l11051"></a>11051   peer = rinfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l11052"></a>11052 
<a name="l11053"></a>11053   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family != AF_INET)
<a name="l11054"></a>11054     <span class="keywordflow">return</span> 0;
<a name="l11055"></a>11055 
<a name="l11056"></a>11056   memset (&amp;q, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l11057"></a>11057   q.family = AF_INET;
<a name="l11058"></a>11058   q.prefix = peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
<a name="l11059"></a>11059   q.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l11060"></a>11060 
<a name="l11061"></a>11061   <span class="comment">/* Check source address. */</span>
<a name="l11062"></a>11062   rn = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (bgp_distance_table, (<span class="keyword">struct</span> prefix *) &amp;q);
<a name="l11063"></a>11063   <span class="keywordflow">if</span> (rn)
<a name="l11064"></a>11064     {
<a name="l11065"></a>11065       bdistance = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l11066"></a>11066       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l11067"></a>11067 
<a name="l11068"></a>11068       <span class="keywordflow">if</span> (bdistance-&gt;access_list)
<a name="l11069"></a>11069     {
<a name="l11070"></a>11070       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, bdistance-&gt;access_list);
<a name="l11071"></a>11071       <span class="keywordflow">if</span> (alist &amp;&amp; <a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist, p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a68ef3d4c373520eb5b085236bf4eeef8">FILTER_PERMIT</a>)
<a name="l11072"></a>11072         <span class="keywordflow">return</span> bdistance-&gt;distance;
<a name="l11073"></a>11073     }
<a name="l11074"></a>11074       <span class="keywordflow">else</span>
<a name="l11075"></a>11075     <span class="keywordflow">return</span> bdistance-&gt;distance;
<a name="l11076"></a>11076     }
<a name="l11077"></a>11077 
<a name="l11078"></a>11078   <span class="comment">/* Backdoor check. */</span>
<a name="l11079"></a>11079   rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST], p);
<a name="l11080"></a>11080   <span class="keywordflow">if</span> (rn)
<a name="l11081"></a>11081     {
<a name="l11082"></a>11082       bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l11083"></a>11083       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l11084"></a>11084 
<a name="l11085"></a>11085       <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
<a name="l11086"></a>11086     {
<a name="l11087"></a>11087       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a>)
<a name="l11088"></a>11088         <span class="keywordflow">return</span> bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a>;
<a name="l11089"></a>11089       <span class="keywordflow">else</span>
<a name="l11090"></a>11090         <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#ab433352fd29a3a549b6b29cd58df28a6">ZEBRA_IBGP_DISTANCE_DEFAULT</a>;
<a name="l11091"></a>11091     }
<a name="l11092"></a>11092     }
<a name="l11093"></a>11093 
<a name="l11094"></a>11094   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l11095"></a>11095     {
<a name="l11096"></a>11096       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a>)
<a name="l11097"></a>11097     <span class="keywordflow">return</span> bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a>;
<a name="l11098"></a>11098       <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#aaf0d981b443458e5b63b242691be7c81">ZEBRA_EBGP_DISTANCE_DEFAULT</a>;
<a name="l11099"></a>11099     }
<a name="l11100"></a>11100   <span class="keywordflow">else</span>
<a name="l11101"></a>11101     {
<a name="l11102"></a>11102       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a>)
<a name="l11103"></a>11103     <span class="keywordflow">return</span> bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a>;
<a name="l11104"></a>11104       <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#ab433352fd29a3a549b6b29cd58df28a6">ZEBRA_IBGP_DISTANCE_DEFAULT</a>;
<a name="l11105"></a>11105     }
<a name="l11106"></a>11106 }
<a name="l11107"></a>11107 
<a name="l11108"></a>11108 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_distance,
<a name="l11109"></a>11109        bgp_distance_cmd,
<a name="l11110"></a>11110        <span class="stringliteral">&quot;distance bgp &lt;1-255&gt; &lt;1-255&gt; &lt;1-255&gt;&quot;</span>,
<a name="l11111"></a>11111        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11112"></a>11112        <span class="stringliteral">&quot;BGP distance\n&quot;</span>
<a name="l11113"></a>11113        <span class="stringliteral">&quot;Distance for routes external to the AS\n&quot;</span>
<a name="l11114"></a>11114        <span class="stringliteral">&quot;Distance for routes internal to the AS\n&quot;</span>
<a name="l11115"></a>11115        <span class="stringliteral">&quot;Distance for local routes\n&quot;</span>)
<a name="l11116"></a>11116 {
<a name="l11117"></a>11117   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l11118"></a>11118 
<a name="l11119"></a>11119   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l11120"></a>11120 
<a name="l11121"></a>11121   bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a> = atoi (argv[0]);
<a name="l11122"></a>11122   bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a> = atoi (argv[1]);
<a name="l11123"></a>11123   bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a> = atoi (argv[2]);
<a name="l11124"></a>11124   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11125"></a>11125 }
<a name="l11126"></a>11126 
<a name="l11127"></a>11127 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_distance,
<a name="l11128"></a>11128        no_bgp_distance_cmd,
<a name="l11129"></a>11129        <span class="stringliteral">&quot;no distance bgp &lt;1-255&gt; &lt;1-255&gt; &lt;1-255&gt;&quot;</span>,
<a name="l11130"></a>11130        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11131"></a>11131        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11132"></a>11132        <span class="stringliteral">&quot;BGP distance\n&quot;</span>
<a name="l11133"></a>11133        <span class="stringliteral">&quot;Distance for routes external to the AS\n&quot;</span>
<a name="l11134"></a>11134        <span class="stringliteral">&quot;Distance for routes internal to the AS\n&quot;</span>
<a name="l11135"></a>11135        <span class="stringliteral">&quot;Distance for local routes\n&quot;</span>)
<a name="l11136"></a>11136 {
<a name="l11137"></a>11137   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l11138"></a>11138 
<a name="l11139"></a>11139   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l11140"></a>11140 
<a name="l11141"></a>11141   bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a>= 0;
<a name="l11142"></a>11142   bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a> = 0;
<a name="l11143"></a>11143   bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a> = 0;
<a name="l11144"></a>11144   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11145"></a>11145 }
<a name="l11146"></a>11146 
<a name="l11147"></a>11147 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_distance,
<a name="l11148"></a>11148        no_bgp_distance2_cmd,
<a name="l11149"></a>11149        <span class="stringliteral">&quot;no distance bgp&quot;</span>,
<a name="l11150"></a>11150        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11151"></a>11151        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11152"></a>11152        <span class="stringliteral">&quot;BGP distance\n&quot;</span>)
<a name="l11153"></a>11153 
<a name="l11154"></a>11154 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_distance_source,
<a name="l11155"></a>11155        bgp_distance_source_cmd,
<a name="l11156"></a>11156        &quot;distance &lt;1-255&gt; <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M&quot;,
<a name="l11157"></a>11157        &quot;Define an administrative distance\n&quot;
<a name="l11158"></a>11158        &quot;Administrative distance\n&quot;
<a name="l11159"></a>11159        &quot;IP <a class="code" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> prefix\n&quot;)
<a name="l11160"></a>11160 {
<a name="l11161"></a>11161   bgp_distance_set (vty, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l11162"></a>11162   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11163"></a>11163 }
<a name="l11164"></a>11164 
<a name="l11165"></a>11165 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_distance_source,
<a name="l11166"></a>11166        no_bgp_distance_source_cmd,
<a name="l11167"></a>11167        <span class="stringliteral">&quot;no distance &lt;1-255&gt; A.B.C.D/M&quot;</span>,
<a name="l11168"></a>11168        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11169"></a>11169        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11170"></a>11170        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l11171"></a>11171        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>)
<a name="l11172"></a>11172 {
<a name="l11173"></a>11173   bgp_distance_unset (vty, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l11174"></a>11174   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11175"></a>11175 }
<a name="l11176"></a>11176 
<a name="l11177"></a>11177 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_distance_source_access_list,
<a name="l11178"></a>11178        bgp_distance_source_access_list_cmd,
<a name="l11179"></a>11179        <span class="stringliteral">&quot;distance &lt;1-255&gt; A.B.C.D/M WORD&quot;</span>,
<a name="l11180"></a>11180        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11181"></a>11181        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l11182"></a>11182        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>
<a name="l11183"></a>11183        <span class="stringliteral">&quot;Access list name\n&quot;</span>)
<a name="l11184"></a>11184 {
<a name="l11185"></a>11185   bgp_distance_set (vty, argv[0], argv[1], argv[2]);
<a name="l11186"></a>11186   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11187"></a>11187 }
<a name="l11188"></a>11188 
<a name="l11189"></a>11189 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_distance_source_access_list,
<a name="l11190"></a>11190        no_bgp_distance_source_access_list_cmd,
<a name="l11191"></a>11191        <span class="stringliteral">&quot;no distance &lt;1-255&gt; A.B.C.D/M WORD&quot;</span>,
<a name="l11192"></a>11192        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11193"></a>11193        <span class="stringliteral">&quot;Define an administrative distance\n&quot;</span>
<a name="l11194"></a>11194        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l11195"></a>11195        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>
<a name="l11196"></a>11196        <span class="stringliteral">&quot;Access list name\n&quot;</span>)
<a name="l11197"></a>11197 {
<a name="l11198"></a>11198   bgp_distance_unset (vty, argv[0], argv[1], argv[2]);
<a name="l11199"></a>11199   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11200"></a>11200 }
<a name="l11201"></a>11201 
<a name="l11202"></a>11202 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_damp_set,
<a name="l11203"></a>11203        bgp_damp_set_cmd,
<a name="l11204"></a>11204        <span class="stringliteral">&quot;bgp dampening &lt;1-45&gt; &lt;1-20000&gt; &lt;1-20000&gt; &lt;1-255&gt;&quot;</span>,
<a name="l11205"></a>11205        <span class="stringliteral">&quot;BGP Specific commands\n&quot;</span>
<a name="l11206"></a>11206        <span class="stringliteral">&quot;Enable route-flap dampening\n&quot;</span>
<a name="l11207"></a>11207        <span class="stringliteral">&quot;Half-life time for the penalty\n&quot;</span>
<a name="l11208"></a>11208        <span class="stringliteral">&quot;Value to start reusing a route\n&quot;</span>
<a name="l11209"></a>11209        <span class="stringliteral">&quot;Value to start suppressing a route\n&quot;</span>
<a name="l11210"></a>11210        <span class="stringliteral">&quot;Maximum duration to suppress a stable route\n&quot;</span>)
<a name="l11211"></a>11211 {
<a name="l11212"></a>11212   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l11213"></a>11213   <span class="keywordtype">int</span> half = <a class="code" href="bgp__damp_8h.html#a099e218170293741c73cc9dbfff822f8">DEFAULT_HALF_LIFE</a> * 60;
<a name="l11214"></a>11214   <span class="keywordtype">int</span> reuse = <a class="code" href="bgp__damp_8h.html#a3bf1dcbb80b956851a56ad50639e2acd">DEFAULT_REUSE</a>;
<a name="l11215"></a>11215   <span class="keywordtype">int</span> suppress = <a class="code" href="bgp__damp_8h.html#a94af1812833b72e6cc01e6d2c253fdd7">DEFAULT_SUPPRESS</a>;
<a name="l11216"></a>11216   <span class="keywordtype">int</span> max = 4 * half;
<a name="l11217"></a>11217 
<a name="l11218"></a>11218   <span class="keywordflow">if</span> (argc == 4)
<a name="l11219"></a>11219     {
<a name="l11220"></a>11220       half = atoi (argv[0]) * 60;
<a name="l11221"></a>11221       reuse = atoi (argv[1]);
<a name="l11222"></a>11222       suppress = atoi (argv[2]);
<a name="l11223"></a>11223       max = atoi (argv[3]) * 60;
<a name="l11224"></a>11224     }
<a name="l11225"></a>11225   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (argc == 1)
<a name="l11226"></a>11226     {
<a name="l11227"></a>11227       half = atoi (argv[0]) * 60;
<a name="l11228"></a>11228       max = 4 * half;
<a name="l11229"></a>11229     }
<a name="l11230"></a>11230 
<a name="l11231"></a>11231   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l11232"></a>11232   <span class="keywordflow">return</span> <a class="code" href="bgp__damp_8c.html#a1c4a2f4e76f8ebba440c7a7db87bf2d2">bgp_damp_enable</a> (bgp, <a class="code" href="bgp__route_8h.html#a70784e3a19cf0c0482e98535f6a66e6d">bgp_node_afi</a> (vty), <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty),
<a name="l11233"></a>11233               half, reuse, suppress, max);
<a name="l11234"></a>11234 }
<a name="l11235"></a>11235 
<a name="l11236"></a>11236 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_damp_set,
<a name="l11237"></a>11237        bgp_damp_set2_cmd,
<a name="l11238"></a>11238        <span class="stringliteral">&quot;bgp dampening &lt;1-45&gt;&quot;</span>,
<a name="l11239"></a>11239        <span class="stringliteral">&quot;BGP Specific commands\n&quot;</span>
<a name="l11240"></a>11240        <span class="stringliteral">&quot;Enable route-flap dampening\n&quot;</span>
<a name="l11241"></a>11241        <span class="stringliteral">&quot;Half-life time for the penalty\n&quot;</span>)
<a name="l11242"></a>11242 
<a name="l11243"></a>11243 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_damp_set,
<a name="l11244"></a>11244        bgp_damp_set3_cmd,
<a name="l11245"></a>11245        &quot;bgp dampening&quot;,
<a name="l11246"></a>11246        &quot;BGP Specific commands\n&quot;
<a name="l11247"></a>11247        &quot;Enable <a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>-flap dampening\n&quot;)
<a name="l11248"></a>11248 
<a name="l11249"></a>11249 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_damp_unset,
<a name="l11250"></a>11250        bgp_damp_unset_cmd,
<a name="l11251"></a>11251        &quot;no bgp dampening&quot;,
<a name="l11252"></a>11252        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11253"></a>11253        &quot;BGP Specific commands\n&quot;
<a name="l11254"></a>11254        &quot;Enable <a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>-flap dampening\n&quot;)
<a name="l11255"></a>11255 {
<a name="l11256"></a>11256   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l11257"></a>11257 
<a name="l11258"></a>11258   bgp = vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l11259"></a>11259   <span class="keywordflow">return</span> <a class="code" href="bgp__damp_8c.html#a12aae1fce37ad880818236997eb67e51">bgp_damp_disable</a> (bgp, <a class="code" href="bgp__route_8h.html#a70784e3a19cf0c0482e98535f6a66e6d">bgp_node_afi</a> (vty), <a class="code" href="bgp__route_8h.html#ad5e89c162061cc75087adcc4527438b1">bgp_node_safi</a> (vty));
<a name="l11260"></a>11260 }
<a name="l11261"></a>11261 
<a name="l11262"></a>11262 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (bgp_damp_unset,
<a name="l11263"></a>11263        bgp_damp_unset2_cmd,
<a name="l11264"></a>11264        <span class="stringliteral">&quot;no bgp dampening &lt;1-45&gt; &lt;1-20000&gt; &lt;1-20000&gt; &lt;1-255&gt;&quot;</span>,
<a name="l11265"></a>11265        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l11266"></a>11266        <span class="stringliteral">&quot;BGP Specific commands\n&quot;</span>
<a name="l11267"></a>11267        <span class="stringliteral">&quot;Enable route-flap dampening\n&quot;</span>
<a name="l11268"></a>11268        <span class="stringliteral">&quot;Half-life time for the penalty\n&quot;</span>
<a name="l11269"></a>11269        <span class="stringliteral">&quot;Value to start reusing a route\n&quot;</span>
<a name="l11270"></a>11270        <span class="stringliteral">&quot;Value to start suppressing a route\n&quot;</span>
<a name="l11271"></a>11271        <span class="stringliteral">&quot;Maximum duration to suppress a stable route\n&quot;</span>)
<a name="l11272"></a>11272 
<a name="l11273"></a>11273 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_dampened_paths,
<a name="l11274"></a>11274        show_ip_bgp_dampened_paths_cmd,
<a name="l11275"></a>11275        &quot;show <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> bgp dampened-paths&quot;,
<a name="l11276"></a>11276        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l11277"></a>11277        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11278"></a>11278        BGP_STR
<a name="l11279"></a>11279        &quot;Display paths suppressed due to dampening\n&quot;)
<a name="l11280"></a>11280 {
<a name="l11281"></a>11281   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, bgp_show_type_dampend_paths,
<a name="l11282"></a>11282                    <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l11283"></a>11283 }
<a name="l11284"></a>11284 
<a name="l11285"></a>11285 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_flap_statistics,
<a name="l11286"></a>11286        show_ip_bgp_flap_statistics_cmd,
<a name="l11287"></a>11287        <span class="stringliteral">&quot;show ip bgp flap-statistics&quot;</span>,
<a name="l11288"></a>11288        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l11289"></a>11289        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11290"></a>11290        BGP_STR
<a name="l11291"></a>11291        <span class="stringliteral">&quot;Display flap statistics of routes\n&quot;</span>)
<a name="l11292"></a>11292 {
<a name="l11293"></a>11293   <span class="keywordflow">return</span> bgp_show (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST,
<a name="l11294"></a>11294                    bgp_show_type_flap_statistics, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l11295"></a>11295 }
<a name="l11296"></a>11296 
<a name="l11297"></a>11297 <span class="comment">/* Display specified route of BGP table. */</span>
<a name="l11298"></a>11298 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l11299"></a>11299 bgp_clear_damp_route (<span class="keyword">struct</span> vty *vty, <span class="keyword">const</span> <span class="keywordtype">char</span> *view_name, 
<a name="l11300"></a>11300                       <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, 
<a name="l11301"></a>11301                       <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, <span class="keywordtype">int</span> prefix_check)
<a name="l11302"></a>11302 {
<a name="l11303"></a>11303   <span class="keywordtype">int</span> ret;
<a name="l11304"></a>11304   <span class="keyword">struct </span>prefix match;
<a name="l11305"></a>11305   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11306"></a>11306   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rm;
<a name="l11307"></a>11307   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri;
<a name="l11308"></a>11308   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *ri_temp;
<a name="l11309"></a>11309   <span class="keyword">struct </span>bgp *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l11310"></a>11310   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l11311"></a>11311 
<a name="l11312"></a>11312   <span class="comment">/* BGP structure lookup. */</span>
<a name="l11313"></a>11313   <span class="keywordflow">if</span> (view_name)
<a name="l11314"></a>11314     {
<a name="l11315"></a>11315       bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (view_name);
<a name="l11316"></a>11316       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11317"></a>11317     {
<a name="l11318"></a>11318       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find BGP view %s%s&quot;</span>, view_name, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11319"></a>11319       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11320"></a>11320     }
<a name="l11321"></a>11321     }
<a name="l11322"></a>11322   <span class="keywordflow">else</span>
<a name="l11323"></a>11323     {
<a name="l11324"></a>11324       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l11325"></a>11325       <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11326"></a>11326     {
<a name="l11327"></a>11327       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% No BGP process is configured%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11328"></a>11328       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11329"></a>11329     }
<a name="l11330"></a>11330     }
<a name="l11331"></a>11331 
<a name="l11332"></a>11332   <span class="comment">/* Check IP address argument. */</span>
<a name="l11333"></a>11333   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (ip_str, &amp;match);
<a name="l11334"></a>11334   <span class="keywordflow">if</span> (! ret)
<a name="l11335"></a>11335     {
<a name="l11336"></a>11336       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% address is malformed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11337"></a>11337       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11338"></a>11338     }
<a name="l11339"></a>11339 
<a name="l11340"></a>11340   match.family = <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (afi);
<a name="l11341"></a>11341 
<a name="l11342"></a>11342   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l11343"></a>11343     {
<a name="l11344"></a>11344       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l11345"></a>11345         {
<a name="l11346"></a>11346           <span class="keywordflow">if</span> (prd &amp;&amp; <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#aff8f7c555d44bdcf53f9e09d3a2d2e68">val</a>, prd-&gt;val, 8) != 0)
<a name="l11347"></a>11347             <span class="keywordflow">continue</span>;
<a name="l11348"></a>11348 
<a name="l11349"></a>11349       <span class="keywordflow">if</span> ((table = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11350"></a>11350         <span class="keywordflow">if</span> ((rm = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (table, &amp;match)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11351"></a>11351           <span class="keywordflow">if</span> (! prefix_check || rm-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == match.prefixlen)
<a name="l11352"></a>11352         {
<a name="l11353"></a>11353           ri = rm-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l11354"></a>11354           <span class="keywordflow">while</span> (ri)
<a name="l11355"></a>11355             {
<a name="l11356"></a>11356               <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>)
<a name="l11357"></a>11357             {
<a name="l11358"></a>11358               ri_temp = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l11359"></a>11359               <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>, 1);
<a name="l11360"></a>11360               ri = ri_temp;
<a name="l11361"></a>11361             }
<a name="l11362"></a>11362               <span class="keywordflow">else</span>
<a name="l11363"></a>11363             ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l11364"></a>11364             }
<a name="l11365"></a>11365         }
<a name="l11366"></a>11366         }
<a name="l11367"></a>11367     }
<a name="l11368"></a>11368   <span class="keywordflow">else</span>
<a name="l11369"></a>11369     {
<a name="l11370"></a>11370       <span class="keywordflow">if</span> ((rn = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi], &amp;match)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11371"></a>11371     <span class="keywordflow">if</span> (! prefix_check || rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == match.prefixlen)
<a name="l11372"></a>11372       {
<a name="l11373"></a>11373         ri = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l11374"></a>11374         <span class="keywordflow">while</span> (ri)
<a name="l11375"></a>11375           {
<a name="l11376"></a>11376         <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>)
<a name="l11377"></a>11377           {
<a name="l11378"></a>11378             ri_temp = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l11379"></a>11379             <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>, 1);
<a name="l11380"></a>11380             ri = ri_temp;
<a name="l11381"></a>11381           }
<a name="l11382"></a>11382         <span class="keywordflow">else</span>
<a name="l11383"></a>11383           ri = ri-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l11384"></a>11384           }
<a name="l11385"></a>11385       }
<a name="l11386"></a>11386     }
<a name="l11387"></a>11387 
<a name="l11388"></a>11388   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11389"></a>11389 }
<a name="l11390"></a>11390 
<a name="l11391"></a>11391 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_bgp_dampening,
<a name="l11392"></a>11392        clear_ip_bgp_dampening_cmd,
<a name="l11393"></a>11393        <span class="stringliteral">&quot;clear ip bgp dampening&quot;</span>,
<a name="l11394"></a>11394        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l11395"></a>11395        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11396"></a>11396        BGP_STR
<a name="l11397"></a>11397        <span class="stringliteral">&quot;Clear route flap dampening information\n&quot;</span>)
<a name="l11398"></a>11398 {
<a name="l11399"></a>11399   <a class="code" href="bgp__damp_8c.html#a87eff85caf5992e70da951242cccc565">bgp_damp_info_clean</a> ();
<a name="l11400"></a>11400   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l11401"></a>11401 }
<a name="l11402"></a>11402 
<a name="l11403"></a>11403 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_bgp_dampening_prefix,
<a name="l11404"></a>11404        clear_ip_bgp_dampening_prefix_cmd,
<a name="l11405"></a>11405        <span class="stringliteral">&quot;clear ip bgp dampening A.B.C.D/M&quot;</span>,
<a name="l11406"></a>11406        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l11407"></a>11407        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11408"></a>11408        BGP_STR
<a name="l11409"></a>11409        <span class="stringliteral">&quot;Clear route flap dampening information\n&quot;</span>
<a name="l11410"></a>11410        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l11411"></a>11411 {
<a name="l11412"></a>11412   <span class="keywordflow">return</span> bgp_clear_damp_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>,
<a name="l11413"></a>11413                    SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 1);
<a name="l11414"></a>11414 }
<a name="l11415"></a>11415 
<a name="l11416"></a>11416 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_bgp_dampening_address,
<a name="l11417"></a>11417        clear_ip_bgp_dampening_address_cmd,
<a name="l11418"></a>11418        <span class="stringliteral">&quot;clear ip bgp dampening A.B.C.D&quot;</span>,
<a name="l11419"></a>11419        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l11420"></a>11420        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11421"></a>11421        BGP_STR
<a name="l11422"></a>11422        <span class="stringliteral">&quot;Clear route flap dampening information\n&quot;</span>
<a name="l11423"></a>11423        <span class="stringliteral">&quot;Network to clear damping information\n&quot;</span>)
<a name="l11424"></a>11424 {
<a name="l11425"></a>11425   <span class="keywordflow">return</span> bgp_clear_damp_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[0], <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>,
<a name="l11426"></a>11426                    SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l11427"></a>11427 }
<a name="l11428"></a>11428 
<a name="l11429"></a>11429 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_bgp_dampening_address_mask,
<a name="l11430"></a>11430        clear_ip_bgp_dampening_address_mask_cmd,
<a name="l11431"></a>11431        <span class="stringliteral">&quot;clear ip bgp dampening A.B.C.D A.B.C.D&quot;</span>,
<a name="l11432"></a>11432        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l11433"></a>11433        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l11434"></a>11434        BGP_STR
<a name="l11435"></a>11435        <span class="stringliteral">&quot;Clear route flap dampening information\n&quot;</span>
<a name="l11436"></a>11436        <span class="stringliteral">&quot;Network to clear damping information\n&quot;</span>
<a name="l11437"></a>11437        <span class="stringliteral">&quot;Network mask\n&quot;</span>)
<a name="l11438"></a>11438 {
<a name="l11439"></a>11439   <span class="keywordtype">int</span> ret;
<a name="l11440"></a>11440   <span class="keywordtype">char</span> prefix_str[BUFSIZ];
<a name="l11441"></a>11441 
<a name="l11442"></a>11442   ret = <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (argv[0], argv[1], prefix_str);
<a name="l11443"></a>11443   <span class="keywordflow">if</span> (! ret)
<a name="l11444"></a>11444     {
<a name="l11445"></a>11445       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Inconsistent address and mask%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11446"></a>11446       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l11447"></a>11447     }
<a name="l11448"></a>11448 
<a name="l11449"></a>11449   <span class="keywordflow">return</span> bgp_clear_damp_route (vty, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, prefix_str, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>,
<a name="l11450"></a>11450                    SAFI_UNICAST, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l11451"></a>11451 }
<a name="l11452"></a>11452 
<a name="l11453"></a>11453 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l11454"></a>11454 bgp_config_write_network_vpnv4 (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp,
<a name="l11455"></a>11455                 <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> *write)
<a name="l11456"></a>11456 {
<a name="l11457"></a>11457   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>;
<a name="l11458"></a>11458   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11459"></a>11459   <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;
<a name="l11460"></a>11460   <span class="keyword">struct </span>prefix *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l11461"></a>11461   <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *prd;
<a name="l11462"></a>11462   <span class="keyword">struct </span>bgp_static *bgp_static;
<a name="l11463"></a>11463   u_int32_t label;
<a name="l11464"></a>11464   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l11465"></a>11465   <span class="keywordtype">char</span> rdbuf[<a class="code" href="bgp__mplsvpn_8h.html#ac391784ff6cdf85be545665a90194a14">RD_ADDRSTRLEN</a>];
<a name="l11466"></a>11466   
<a name="l11467"></a>11467   <span class="comment">/* Network configuration. */</span>
<a name="l11468"></a>11468   <span class="keywordflow">for</span> (prn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); prn; prn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (prn))
<a name="l11469"></a>11469     <span class="keywordflow">if</span> ((table = prn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11470"></a>11470       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn)) 
<a name="l11471"></a>11471     <span class="keywordflow">if</span> ((bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11472"></a>11472       {
<a name="l11473"></a>11473         p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l11474"></a>11474         prd = (<span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *) &amp;prn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l11475"></a>11475 
<a name="l11476"></a>11476         <span class="comment">/* &quot;address-family&quot; display.  */</span>
<a name="l11477"></a>11477         <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, write);
<a name="l11478"></a>11478 
<a name="l11479"></a>11479         <span class="comment">/* &quot;network&quot; configuration display.  */</span>
<a name="l11480"></a>11480         <a class="code" href="bgp__mplsvpn_8c.html#a806cd220250d519b75ac7f78cd091bcc">prefix_rd2str</a> (prd, rdbuf, <a class="code" href="bgp__mplsvpn_8h.html#ac391784ff6cdf85be545665a90194a14">RD_ADDRSTRLEN</a>);
<a name="l11481"></a>11481         label = <a class="code" href="bgp__mplsvpn_8c.html#aa210756655b6acea8f6495e194ac5cc7">decode_label</a> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ac8be92b08f87ccf5e9817c12542dcfe4">tag</a>);
<a name="l11482"></a>11482 
<a name="l11483"></a>11483         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; network %s/%d rd %s tag %d&quot;</span>,
<a name="l11484"></a>11484              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>), 
<a name="l11485"></a>11485              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l11486"></a>11486              rdbuf, label);
<a name="l11487"></a>11487         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11488"></a>11488       }
<a name="l11489"></a>11489   <span class="keywordflow">return</span> 0;
<a name="l11490"></a>11490 }
<a name="l11491"></a>11491 
<a name="l11492"></a>11492 <span class="comment">/* Configuration of static route announcement and aggregate</span>
<a name="l11493"></a>11493 <span class="comment">   information. */</span>
<a name="l11494"></a>11494 <span class="keywordtype">int</span>
<a name="l11495"></a>11495 <a class="code" href="bgp__route_8h.html#aa38f753615df9694fa3f47fa11b3ebf2">bgp_config_write_network</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp,
<a name="l11496"></a>11496               <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> *write)
<a name="l11497"></a>11497 {
<a name="l11498"></a>11498   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11499"></a>11499   <span class="keyword">struct </span>prefix *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l11500"></a>11500   <span class="keyword">struct </span>bgp_static *bgp_static;
<a name="l11501"></a>11501   <span class="keyword">struct </span>bgp_aggregate *bgp_aggregate;
<a name="l11502"></a>11502   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l11503"></a>11503   
<a name="l11504"></a>11504   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == SAFI_MPLS_VPN)
<a name="l11505"></a>11505     <span class="keywordflow">return</span> bgp_config_write_network_vpnv4 (vty, bgp, afi, safi, write);
<a name="l11506"></a>11506 
<a name="l11507"></a>11507   <span class="comment">/* Network configuration. */</span>
<a name="l11508"></a>11508   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn)) 
<a name="l11509"></a>11509     <span class="keywordflow">if</span> ((bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11510"></a>11510       {
<a name="l11511"></a>11511     p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l11512"></a>11512 
<a name="l11513"></a>11513     <span class="comment">/* &quot;address-family&quot; display.  */</span>
<a name="l11514"></a>11514     <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, write);
<a name="l11515"></a>11515 
<a name="l11516"></a>11516     <span class="comment">/* &quot;network&quot; configuration display.  */</span>
<a name="l11517"></a>11517     <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>) &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l11518"></a>11518       {
<a name="l11519"></a>11519         u_int32_t destination; 
<a name="l11520"></a>11520         <span class="keyword">struct </span>in_addr netmask;
<a name="l11521"></a>11521 
<a name="l11522"></a>11522         destination = ntohl (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr);
<a name="l11523"></a>11523         <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;netmask);
<a name="l11524"></a>11524         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; network %s&quot;</span>,
<a name="l11525"></a>11525              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>));
<a name="l11526"></a>11526 
<a name="l11527"></a>11527         <span class="keywordflow">if</span> ((IN_CLASSC (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 24)
<a name="l11528"></a>11528         || (IN_CLASSB (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 16)
<a name="l11529"></a>11529         || (IN_CLASSA (destination) &amp;&amp; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 8)
<a name="l11530"></a>11530         || p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr == 0)
<a name="l11531"></a>11531           {
<a name="l11532"></a>11532         <span class="comment">/* Natural mask is not display. */</span>
<a name="l11533"></a>11533           }
<a name="l11534"></a>11534         <span class="keywordflow">else</span>
<a name="l11535"></a>11535           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; mask %s&quot;</span>, inet_ntoa (netmask));
<a name="l11536"></a>11536       }
<a name="l11537"></a>11537     <span class="keywordflow">else</span>
<a name="l11538"></a>11538       {
<a name="l11539"></a>11539         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; network %s/%d&quot;</span>,
<a name="l11540"></a>11540              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>), 
<a name="l11541"></a>11541              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l11542"></a>11542       }
<a name="l11543"></a>11543 
<a name="l11544"></a>11544     <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l11545"></a>11545       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route-map %s&quot;</span>, bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>);
<a name="l11546"></a>11546     <span class="keywordflow">else</span> 
<a name="l11547"></a>11547       {
<a name="l11548"></a>11548         <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
<a name="l11549"></a>11549           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; backdoor&quot;</span>);
<a name="l11550"></a>11550             <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>)
<a name="l11551"></a>11551               <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; pathlimit %u&quot;</span>, bgp_static-&gt;<a class="code" href="structbgp__static.html#aaad8a5db923a971cbbd054f20ccaac1c">ttl</a>);
<a name="l11552"></a>11552           }
<a name="l11553"></a>11553 
<a name="l11554"></a>11554     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11555"></a>11555       }
<a name="l11556"></a>11556 
<a name="l11557"></a>11557   <span class="comment">/* Aggregate-address configuration. */</span>
<a name="l11558"></a>11558   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l11559"></a>11559     <span class="keywordflow">if</span> ((bgp_aggregate = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11560"></a>11560       {
<a name="l11561"></a>11561     p = &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l11562"></a>11562 
<a name="l11563"></a>11563     <span class="comment">/* &quot;address-family&quot; display.  */</span>
<a name="l11564"></a>11564     <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, write);
<a name="l11565"></a>11565 
<a name="l11566"></a>11566     <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>) &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l11567"></a>11567       {
<a name="l11568"></a>11568         <span class="keyword">struct </span>in_addr netmask;
<a name="l11569"></a>11569 
<a name="l11570"></a>11570         <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;netmask);
<a name="l11571"></a>11571         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; aggregate-address %s %s&quot;</span>,
<a name="l11572"></a>11572              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l11573"></a>11573              inet_ntoa (netmask));
<a name="l11574"></a>11574       }
<a name="l11575"></a>11575     <span class="keywordflow">else</span>
<a name="l11576"></a>11576       {
<a name="l11577"></a>11577         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; aggregate-address %s/%d&quot;</span>,
<a name="l11578"></a>11578              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l11579"></a>11579              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l11580"></a>11580       }
<a name="l11581"></a>11581 
<a name="l11582"></a>11582     <span class="keywordflow">if</span> (bgp_aggregate-&gt;as_set)
<a name="l11583"></a>11583       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; as-set&quot;</span>);
<a name="l11584"></a>11584     
<a name="l11585"></a>11585     <span class="keywordflow">if</span> (bgp_aggregate-&gt;summary_only)
<a name="l11586"></a>11586       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; summary-only&quot;</span>);
<a name="l11587"></a>11587 
<a name="l11588"></a>11588     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11589"></a>11589       }
<a name="l11590"></a>11590 
<a name="l11591"></a>11591   <span class="keywordflow">return</span> 0;
<a name="l11592"></a>11592 }
<a name="l11593"></a>11593 
<a name="l11594"></a>11594 <span class="keywordtype">int</span>
<a name="l11595"></a>11595 <a class="code" href="bgp__route_8h.html#ac7a2375c41537180015d8dd33798155e">bgp_config_write_distance</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> bgp *bgp)
<a name="l11596"></a>11596 {
<a name="l11597"></a>11597   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l11598"></a>11598   <span class="keyword">struct </span>bgp_distance *bdistance;
<a name="l11599"></a>11599 
<a name="l11600"></a>11600   <span class="comment">/* Distance configuration. */</span>
<a name="l11601"></a>11601   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a>
<a name="l11602"></a>11602       &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a>
<a name="l11603"></a>11603       &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a>
<a name="l11604"></a>11604       &amp;&amp; (bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a> != <a class="code" href="zebra_8h.html#aaf0d981b443458e5b63b242691be7c81">ZEBRA_EBGP_DISTANCE_DEFAULT</a>
<a name="l11605"></a>11605       || bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a> != <a class="code" href="zebra_8h.html#ab433352fd29a3a549b6b29cd58df28a6">ZEBRA_IBGP_DISTANCE_DEFAULT</a>
<a name="l11606"></a>11606       || bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a> != <a class="code" href="zebra_8h.html#ab433352fd29a3a549b6b29cd58df28a6">ZEBRA_IBGP_DISTANCE_DEFAULT</a>))
<a name="l11607"></a>11607     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance bgp %d %d %d%s&quot;</span>,
<a name="l11608"></a>11608          bgp-&gt;<a class="code" href="structbgp.html#a22994b8eb002dca7dde59d9406300d78">distance_ebgp</a>, bgp-&gt;<a class="code" href="structbgp.html#ab0fc2e1fd33b37be80656bbfa2f23e7d">distance_ibgp</a>, bgp-&gt;<a class="code" href="structbgp.html#a32af49a20c905923ec760d3b81502ca3">distance_local</a>,
<a name="l11609"></a>11609          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11610"></a>11610   
<a name="l11611"></a>11611   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp_distance_table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l11612"></a>11612     <span class="keywordflow">if</span> ((bdistance = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l11613"></a>11613       {
<a name="l11614"></a>11614     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance %d %s/%d %s%s&quot;</span>, bdistance-&gt;distance,
<a name="l11615"></a>11615          inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l11616"></a>11616          bdistance-&gt;access_list ? bdistance-&gt;access_list : <span class="stringliteral">&quot;&quot;</span>,
<a name="l11617"></a>11617          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l11618"></a>11618       }
<a name="l11619"></a>11619 
<a name="l11620"></a>11620   <span class="keywordflow">return</span> 0;
<a name="l11621"></a>11621 }
<a name="l11622"></a>11622 
<a name="l11623"></a>11623 <span class="comment">/* Allocate routing table structure and install commands. */</span>
<a name="l11624"></a>11624 <span class="keywordtype">void</span>
<a name="l11625"></a>11625 <a class="code" href="bgp__route_8h.html#a1d94be4492850d1be9670012f7706620">bgp_route_init</a> (<span class="keywordtype">void</span>)
<a name="l11626"></a>11626 {
<a name="l11627"></a>11627   <span class="comment">/* Init BGP distance table. */</span>
<a name="l11628"></a>11628   bgp_distance_table = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l11629"></a>11629 
<a name="l11630"></a>11630   <span class="comment">/* IPv4 BGP commands. */</span>
<a name="l11631"></a>11631   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_cmd);
<a name="l11632"></a>11632   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_cmd);
<a name="l11633"></a>11633   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_natural_cmd);
<a name="l11634"></a>11634   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;<a class="code" href="bgp__route_8c.html#ad5aca6be105a2339aa723cfae3c1822c">bgp_network_route_map_cmd</a>);
<a name="l11635"></a>11635   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_route_map_cmd);
<a name="l11636"></a>11636   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_natural_route_map_cmd);
<a name="l11637"></a>11637   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_backdoor_cmd);
<a name="l11638"></a>11638   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_backdoor_cmd);
<a name="l11639"></a>11639   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_natural_backdoor_cmd);
<a name="l11640"></a>11640   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_ttl_cmd);
<a name="l11641"></a>11641   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_ttl_cmd);
<a name="l11642"></a>11642   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_natural_ttl_cmd);
<a name="l11643"></a>11643   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_backdoor_ttl_cmd);
<a name="l11644"></a>11644   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_backdoor_ttl_cmd);
<a name="l11645"></a>11645   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_network_mask_natural_backdoor_ttl_cmd);
<a name="l11646"></a>11646   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11647"></a>11647   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_cmd);
<a name="l11648"></a>11648   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_natural_cmd);
<a name="l11649"></a>11649   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_route_map_cmd);
<a name="l11650"></a>11650   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_route_map_cmd);
<a name="l11651"></a>11651   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_natural_route_map_cmd);
<a name="l11652"></a>11652   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_backdoor_cmd);
<a name="l11653"></a>11653   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_backdoor_cmd);
<a name="l11654"></a>11654   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_natural_backdoor_cmd);
<a name="l11655"></a>11655   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_ttl_cmd);
<a name="l11656"></a>11656   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_ttl_cmd);
<a name="l11657"></a>11657   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_natural_ttl_cmd);
<a name="l11658"></a>11658   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_backdoor_ttl_cmd);
<a name="l11659"></a>11659   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_backdoor_ttl_cmd);
<a name="l11660"></a>11660   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_network_mask_natural_backdoor_ttl_cmd);
<a name="l11661"></a>11661 
<a name="l11662"></a>11662   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_cmd);
<a name="l11663"></a>11663   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_mask_cmd);
<a name="l11664"></a>11664   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_summary_only_cmd);
<a name="l11665"></a>11665   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_mask_summary_only_cmd);
<a name="l11666"></a>11666   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_as_set_cmd);
<a name="l11667"></a>11667   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_mask_as_set_cmd);
<a name="l11668"></a>11668   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_as_set_summary_cmd);
<a name="l11669"></a>11669   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_mask_as_set_summary_cmd);
<a name="l11670"></a>11670   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_summary_as_set_cmd);
<a name="l11671"></a>11671   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;aggregate_address_mask_summary_as_set_cmd);
<a name="l11672"></a>11672   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_cmd);
<a name="l11673"></a>11673   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_summary_only_cmd);
<a name="l11674"></a>11674   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_as_set_cmd);
<a name="l11675"></a>11675   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_as_set_summary_cmd);
<a name="l11676"></a>11676   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_summary_as_set_cmd);
<a name="l11677"></a>11677   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_mask_cmd);
<a name="l11678"></a>11678   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_mask_summary_only_cmd);
<a name="l11679"></a>11679   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_mask_as_set_cmd);
<a name="l11680"></a>11680   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_mask_as_set_summary_cmd);
<a name="l11681"></a>11681   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_aggregate_address_mask_summary_as_set_cmd);
<a name="l11682"></a>11682 
<a name="l11683"></a>11683   <span class="comment">/* IPv4 unicast configuration.  */</span>
<a name="l11684"></a>11684   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_cmd);
<a name="l11685"></a>11685   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_cmd);
<a name="l11686"></a>11686   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_natural_cmd);
<a name="l11687"></a>11687   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;<a class="code" href="bgp__route_8c.html#ad5aca6be105a2339aa723cfae3c1822c">bgp_network_route_map_cmd</a>);
<a name="l11688"></a>11688   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_route_map_cmd);
<a name="l11689"></a>11689   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_natural_route_map_cmd);
<a name="l11690"></a>11690   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_ttl_cmd);
<a name="l11691"></a>11691   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_ttl_cmd);
<a name="l11692"></a>11692   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_natural_ttl_cmd);
<a name="l11693"></a>11693   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_backdoor_ttl_cmd);
<a name="l11694"></a>11694   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_backdoor_ttl_cmd);
<a name="l11695"></a>11695   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_network_mask_natural_backdoor_ttl_cmd);  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11696"></a>11696   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_cmd);
<a name="l11697"></a>11697   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_natural_cmd);
<a name="l11698"></a>11698   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_route_map_cmd);
<a name="l11699"></a>11699   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_route_map_cmd);
<a name="l11700"></a>11700   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_natural_route_map_cmd);
<a name="l11701"></a>11701   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_ttl_cmd);
<a name="l11702"></a>11702   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_ttl_cmd);
<a name="l11703"></a>11703   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_natural_ttl_cmd);
<a name="l11704"></a>11704   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_backdoor_ttl_cmd);
<a name="l11705"></a>11705   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_backdoor_ttl_cmd);
<a name="l11706"></a>11706   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_mask_natural_backdoor_ttl_cmd);  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11707"></a>11707   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_cmd);
<a name="l11708"></a>11708   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_mask_cmd);
<a name="l11709"></a>11709   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_summary_only_cmd);
<a name="l11710"></a>11710   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_mask_summary_only_cmd);
<a name="l11711"></a>11711   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_as_set_cmd);
<a name="l11712"></a>11712   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_mask_as_set_cmd);
<a name="l11713"></a>11713   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_as_set_summary_cmd);
<a name="l11714"></a>11714   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_mask_as_set_summary_cmd);
<a name="l11715"></a>11715   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_summary_as_set_cmd);
<a name="l11716"></a>11716   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;aggregate_address_mask_summary_as_set_cmd);
<a name="l11717"></a>11717   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_cmd);
<a name="l11718"></a>11718   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_summary_only_cmd);
<a name="l11719"></a>11719   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_as_set_cmd);
<a name="l11720"></a>11720   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_as_set_summary_cmd);
<a name="l11721"></a>11721   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_summary_as_set_cmd);
<a name="l11722"></a>11722   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_mask_cmd);
<a name="l11723"></a>11723   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_mask_summary_only_cmd);
<a name="l11724"></a>11724   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_mask_as_set_cmd);
<a name="l11725"></a>11725   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_mask_as_set_summary_cmd);
<a name="l11726"></a>11726   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_aggregate_address_mask_summary_as_set_cmd);
<a name="l11727"></a>11727 
<a name="l11728"></a>11728   <span class="comment">/* IPv4 multicast configuration.  */</span>
<a name="l11729"></a>11729   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_cmd);
<a name="l11730"></a>11730   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_cmd);
<a name="l11731"></a>11731   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_natural_cmd);
<a name="l11732"></a>11732   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;<a class="code" href="bgp__route_8c.html#ad5aca6be105a2339aa723cfae3c1822c">bgp_network_route_map_cmd</a>);
<a name="l11733"></a>11733   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_route_map_cmd);
<a name="l11734"></a>11734   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_natural_route_map_cmd);
<a name="l11735"></a>11735   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_ttl_cmd);
<a name="l11736"></a>11736   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_ttl_cmd);
<a name="l11737"></a>11737   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_natural_ttl_cmd);
<a name="l11738"></a>11738   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_backdoor_ttl_cmd);
<a name="l11739"></a>11739   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_backdoor_ttl_cmd);
<a name="l11740"></a>11740   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;bgp_network_mask_natural_backdoor_ttl_cmd);  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11741"></a>11741   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11742"></a>11742   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_cmd);
<a name="l11743"></a>11743   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_natural_cmd);
<a name="l11744"></a>11744   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_route_map_cmd);
<a name="l11745"></a>11745   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_route_map_cmd);
<a name="l11746"></a>11746   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_natural_route_map_cmd);
<a name="l11747"></a>11747   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_ttl_cmd);
<a name="l11748"></a>11748   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_ttl_cmd);
<a name="l11749"></a>11749   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_natural_ttl_cmd);
<a name="l11750"></a>11750   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_backdoor_ttl_cmd);
<a name="l11751"></a>11751   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_backdoor_ttl_cmd);
<a name="l11752"></a>11752   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_bgp_network_mask_natural_backdoor_ttl_cmd);  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;no_bgp_network_cmd);
<a name="l11753"></a>11753   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_cmd);
<a name="l11754"></a>11754   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_mask_cmd);
<a name="l11755"></a>11755   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_summary_only_cmd);
<a name="l11756"></a>11756   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_mask_summary_only_cmd);
<a name="l11757"></a>11757   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_as_set_cmd);
<a name="l11758"></a>11758   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_mask_as_set_cmd);
<a name="l11759"></a>11759   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_as_set_summary_cmd);
<a name="l11760"></a>11760   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_mask_as_set_summary_cmd);
<a name="l11761"></a>11761   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_summary_as_set_cmd);
<a name="l11762"></a>11762   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;aggregate_address_mask_summary_as_set_cmd);
<a name="l11763"></a>11763   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_cmd);
<a name="l11764"></a>11764   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_summary_only_cmd);
<a name="l11765"></a>11765   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_as_set_cmd);
<a name="l11766"></a>11766   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_as_set_summary_cmd);
<a name="l11767"></a>11767   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_summary_as_set_cmd);
<a name="l11768"></a>11768   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_mask_cmd);
<a name="l11769"></a>11769   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_mask_summary_only_cmd);
<a name="l11770"></a>11770   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_mask_as_set_cmd);
<a name="l11771"></a>11771   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_mask_as_set_summary_cmd);
<a name="l11772"></a>11772   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a0f046c161a229e71ed9da963e29c961d">BGP_IPV4M_NODE</a>, &amp;no_aggregate_address_mask_summary_as_set_cmd);
<a name="l11773"></a>11773 
<a name="l11774"></a>11774   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_cmd);
<a name="l11775"></a>11775   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_cmd);
<a name="l11776"></a>11776   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_route_cmd);
<a name="l11777"></a>11777   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_route_cmd);
<a name="l11778"></a>11778   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_vpnv4_all_route_cmd);
<a name="l11779"></a>11779   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_route_cmd);
<a name="l11780"></a>11780   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_prefix_cmd);
<a name="l11781"></a>11781   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_cmd);
<a name="l11782"></a>11782   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_vpnv4_all_prefix_cmd);
<a name="l11783"></a>11783   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_prefix_cmd);
<a name="l11784"></a>11784   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_cmd);
<a name="l11785"></a>11785   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_route_cmd);
<a name="l11786"></a>11786   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_prefix_cmd);
<a name="l11787"></a>11787   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_regexp_cmd);
<a name="l11788"></a>11788   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_regexp_cmd);
<a name="l11789"></a>11789   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_prefix_list_cmd);
<a name="l11790"></a>11790   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_list_cmd);
<a name="l11791"></a>11791   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_filter_list_cmd);
<a name="l11792"></a>11792   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_filter_list_cmd);
<a name="l11793"></a>11793   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_route_map_cmd);
<a name="l11794"></a>11794   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_route_map_cmd);
<a name="l11795"></a>11795   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_cidr_only_cmd);
<a name="l11796"></a>11796   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_cidr_only_cmd);
<a name="l11797"></a>11797   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community_all_cmd);
<a name="l11798"></a>11798   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community_all_cmd);
<a name="l11799"></a>11799   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community_cmd);
<a name="l11800"></a>11800   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community2_cmd);
<a name="l11801"></a>11801   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community3_cmd);
<a name="l11802"></a>11802   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community4_cmd);
<a name="l11803"></a>11803   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community_cmd);
<a name="l11804"></a>11804   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community2_cmd);
<a name="l11805"></a>11805   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community3_cmd);
<a name="l11806"></a>11806   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community4_cmd);
<a name="l11807"></a>11807   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community_exact_cmd);
<a name="l11808"></a>11808   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community2_exact_cmd);
<a name="l11809"></a>11809   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community3_exact_cmd);
<a name="l11810"></a>11810   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community4_exact_cmd);
<a name="l11811"></a>11811   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community_exact_cmd);
<a name="l11812"></a>11812   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community2_exact_cmd);
<a name="l11813"></a>11813   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community3_exact_cmd);
<a name="l11814"></a>11814   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community4_exact_cmd);
<a name="l11815"></a>11815   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community_list_cmd);
<a name="l11816"></a>11816   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community_list_cmd);
<a name="l11817"></a>11817   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_community_list_exact_cmd);
<a name="l11818"></a>11818   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_community_list_exact_cmd);
<a name="l11819"></a>11819   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_prefix_longer_cmd);
<a name="l11820"></a>11820   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_longer_cmd);
<a name="l11821"></a>11821   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_advertised_route_cmd);
<a name="l11822"></a>11822   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_advertised_route_cmd);
<a name="l11823"></a>11823   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_received_routes_cmd);
<a name="l11824"></a>11824   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_received_routes_cmd);
<a name="l11825"></a>11825   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_routes_cmd);
<a name="l11826"></a>11826   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_routes_cmd);
<a name="l11827"></a>11827   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_received_prefix_filter_cmd);
<a name="l11828"></a>11828   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_received_prefix_filter_cmd);
<a name="l11829"></a>11829   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_dampened_paths_cmd);
<a name="l11830"></a>11830   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_statistics_cmd);
<a name="l11831"></a>11831   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_address_cmd);
<a name="l11832"></a>11832   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_prefix_cmd);
<a name="l11833"></a>11833   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_cidr_only_cmd);
<a name="l11834"></a>11834   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_regexp_cmd);
<a name="l11835"></a>11835   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_filter_list_cmd);
<a name="l11836"></a>11836   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_prefix_list_cmd);
<a name="l11837"></a>11837   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_prefix_longer_cmd);
<a name="l11838"></a>11838   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_flap_route_map_cmd);
<a name="l11839"></a>11839   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_flap_cmd);
<a name="l11840"></a>11840   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_neighbor_damp_cmd);
<a name="l11841"></a>11841   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_rsclient_cmd);
<a name="l11842"></a>11842   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_rsclient_route_cmd);
<a name="l11843"></a>11843   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_rsclient_prefix_cmd);
<a name="l11844"></a>11844   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_neighbor_advertised_route_cmd);
<a name="l11845"></a>11845   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_neighbor_received_routes_cmd);
<a name="l11846"></a>11846   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_rsclient_cmd);
<a name="l11847"></a>11847   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_rsclient_route_cmd);
<a name="l11848"></a>11848   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_view_rsclient_prefix_cmd);
<a name="l11849"></a>11849   
<a name="l11850"></a>11850   <span class="comment">/* Restricted node: VIEW_NODE - (set of dangerous commands) */</span>
<a name="l11851"></a>11851   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_route_cmd);
<a name="l11852"></a>11852   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_route_cmd);
<a name="l11853"></a>11853   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_route_cmd);
<a name="l11854"></a>11854   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_prefix_cmd);
<a name="l11855"></a>11855   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_cmd);
<a name="l11856"></a>11856   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_vpnv4_all_prefix_cmd);
<a name="l11857"></a>11857   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_prefix_cmd);
<a name="l11858"></a>11858   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_view_route_cmd);
<a name="l11859"></a>11859   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_view_prefix_cmd);
<a name="l11860"></a>11860   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community_cmd);
<a name="l11861"></a>11861   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community2_cmd);
<a name="l11862"></a>11862   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community3_cmd);
<a name="l11863"></a>11863   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community4_cmd);
<a name="l11864"></a>11864   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community_cmd);
<a name="l11865"></a>11865   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community2_cmd);
<a name="l11866"></a>11866   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community3_cmd);
<a name="l11867"></a>11867   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community4_cmd);
<a name="l11868"></a>11868   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community_exact_cmd);
<a name="l11869"></a>11869   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community2_exact_cmd);
<a name="l11870"></a>11870   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community3_exact_cmd);
<a name="l11871"></a>11871   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_community4_exact_cmd);
<a name="l11872"></a>11872   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community_exact_cmd);
<a name="l11873"></a>11873   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community2_exact_cmd);
<a name="l11874"></a>11874   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community3_exact_cmd);
<a name="l11875"></a>11875   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_ipv4_community4_exact_cmd);
<a name="l11876"></a>11876   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_rsclient_route_cmd);
<a name="l11877"></a>11877   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_rsclient_prefix_cmd);
<a name="l11878"></a>11878   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_view_rsclient_route_cmd);
<a name="l11879"></a>11879   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_view_rsclient_prefix_cmd);
<a name="l11880"></a>11880 
<a name="l11881"></a>11881   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_cmd);
<a name="l11882"></a>11882   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_cmd);
<a name="l11883"></a>11883   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_route_cmd);
<a name="l11884"></a>11884   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_route_cmd);
<a name="l11885"></a>11885   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_vpnv4_all_route_cmd);
<a name="l11886"></a>11886   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_route_cmd);
<a name="l11887"></a>11887   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_prefix_cmd);
<a name="l11888"></a>11888   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_cmd);
<a name="l11889"></a>11889   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_vpnv4_all_prefix_cmd);
<a name="l11890"></a>11890   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_vpnv4_rd_prefix_cmd);
<a name="l11891"></a>11891   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_cmd);
<a name="l11892"></a>11892   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_route_cmd);
<a name="l11893"></a>11893   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_prefix_cmd);
<a name="l11894"></a>11894   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_regexp_cmd);
<a name="l11895"></a>11895   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_regexp_cmd);
<a name="l11896"></a>11896   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_prefix_list_cmd);
<a name="l11897"></a>11897   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_list_cmd);
<a name="l11898"></a>11898   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_filter_list_cmd);
<a name="l11899"></a>11899   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_filter_list_cmd);
<a name="l11900"></a>11900   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_route_map_cmd);
<a name="l11901"></a>11901   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_route_map_cmd);
<a name="l11902"></a>11902   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_cidr_only_cmd);
<a name="l11903"></a>11903   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_cidr_only_cmd);
<a name="l11904"></a>11904   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community_all_cmd);
<a name="l11905"></a>11905   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community_all_cmd);
<a name="l11906"></a>11906   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community_cmd);
<a name="l11907"></a>11907   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community2_cmd);
<a name="l11908"></a>11908   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community3_cmd);
<a name="l11909"></a>11909   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community4_cmd);
<a name="l11910"></a>11910   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community_cmd);
<a name="l11911"></a>11911   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community2_cmd);
<a name="l11912"></a>11912   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community3_cmd);
<a name="l11913"></a>11913   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community4_cmd);
<a name="l11914"></a>11914   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community_exact_cmd);
<a name="l11915"></a>11915   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community2_exact_cmd);
<a name="l11916"></a>11916   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community3_exact_cmd);
<a name="l11917"></a>11917   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community4_exact_cmd);
<a name="l11918"></a>11918   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community_exact_cmd);
<a name="l11919"></a>11919   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community2_exact_cmd);
<a name="l11920"></a>11920   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community3_exact_cmd);
<a name="l11921"></a>11921   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community4_exact_cmd);
<a name="l11922"></a>11922   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community_list_cmd);
<a name="l11923"></a>11923   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community_list_cmd);
<a name="l11924"></a>11924   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_community_list_exact_cmd);
<a name="l11925"></a>11925   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_community_list_exact_cmd);
<a name="l11926"></a>11926   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_prefix_longer_cmd);
<a name="l11927"></a>11927   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_prefix_longer_cmd);
<a name="l11928"></a>11928   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_advertised_route_cmd);
<a name="l11929"></a>11929   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_advertised_route_cmd);
<a name="l11930"></a>11930   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_received_routes_cmd);
<a name="l11931"></a>11931   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_received_routes_cmd);
<a name="l11932"></a>11932   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_routes_cmd);
<a name="l11933"></a>11933   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_routes_cmd);
<a name="l11934"></a>11934   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_received_prefix_filter_cmd);
<a name="l11935"></a>11935   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_received_prefix_filter_cmd);
<a name="l11936"></a>11936   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_dampened_paths_cmd);
<a name="l11937"></a>11937   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_statistics_cmd);
<a name="l11938"></a>11938   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_address_cmd);
<a name="l11939"></a>11939   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_prefix_cmd);
<a name="l11940"></a>11940   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_cidr_only_cmd);
<a name="l11941"></a>11941   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_regexp_cmd);
<a name="l11942"></a>11942   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_filter_list_cmd);
<a name="l11943"></a>11943   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_prefix_list_cmd);
<a name="l11944"></a>11944   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_prefix_longer_cmd);
<a name="l11945"></a>11945   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_flap_route_map_cmd);
<a name="l11946"></a>11946   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_flap_cmd);
<a name="l11947"></a>11947   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_damp_cmd);
<a name="l11948"></a>11948   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_rsclient_cmd);
<a name="l11949"></a>11949   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_rsclient_route_cmd);
<a name="l11950"></a>11950   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_rsclient_prefix_cmd);
<a name="l11951"></a>11951   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_neighbor_advertised_route_cmd);
<a name="l11952"></a>11952   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_neighbor_received_routes_cmd);
<a name="l11953"></a>11953   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_rsclient_cmd);
<a name="l11954"></a>11954   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_rsclient_route_cmd);
<a name="l11955"></a>11955   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_view_rsclient_prefix_cmd);
<a name="l11956"></a>11956 
<a name="l11957"></a>11957  <span class="comment">/* BGP dampening clear commands */</span>
<a name="l11958"></a>11958   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_bgp_dampening_cmd);
<a name="l11959"></a>11959   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_bgp_dampening_prefix_cmd);
<a name="l11960"></a>11960   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_bgp_dampening_address_cmd);
<a name="l11961"></a>11961   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_bgp_dampening_address_mask_cmd);
<a name="l11962"></a>11962 
<a name="l11963"></a>11963   <span class="comment">/* prefix count */</span>
<a name="l11964"></a>11964   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_neighbor_prefix_counts_cmd);
<a name="l11965"></a>11965   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_ipv4_neighbor_prefix_counts_cmd);
<a name="l11966"></a>11966   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_vpnv4_neighbor_prefix_counts_cmd);
<a name="l11967"></a>11967 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l11968"></a>11968 <span class="preprocessor"></span>  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_prefix_counts_cmd);
<a name="l11969"></a>11969 
<a name="l11970"></a>11970   <span class="comment">/* New config IPv6 BGP commands.  */</span>
<a name="l11971"></a>11971   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;ipv6_bgp_network_cmd);
<a name="l11972"></a>11972   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;ipv6_bgp_network_route_map_cmd);
<a name="l11973"></a>11973   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;ipv6_bgp_network_ttl_cmd);
<a name="l11974"></a>11974   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;no_ipv6_bgp_network_cmd);
<a name="l11975"></a>11975   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;no_ipv6_bgp_network_route_map_cmd);
<a name="l11976"></a>11976   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;no_ipv6_bgp_network_ttl_cmd);
<a name="l11977"></a>11977 
<a name="l11978"></a>11978   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;ipv6_aggregate_address_cmd);
<a name="l11979"></a>11979   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;ipv6_aggregate_address_summary_only_cmd);
<a name="l11980"></a>11980   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;no_ipv6_aggregate_address_cmd);
<a name="l11981"></a>11981   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ad40fb52980325d9440b23b5f86701ffc">BGP_IPV6_NODE</a>, &amp;no_ipv6_aggregate_address_summary_only_cmd);
<a name="l11982"></a>11982 
<a name="l11983"></a>11983   <span class="comment">/* Old config IPv6 BGP commands.  */</span>
<a name="l11984"></a>11984   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_ipv6_bgp_network_cmd);
<a name="l11985"></a>11985   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_no_ipv6_bgp_network_cmd);
<a name="l11986"></a>11986 
<a name="l11987"></a>11987   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_ipv6_aggregate_address_cmd);
<a name="l11988"></a>11988   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_ipv6_aggregate_address_summary_only_cmd);
<a name="l11989"></a>11989   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_no_ipv6_aggregate_address_cmd);
<a name="l11990"></a>11990   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;old_no_ipv6_aggregate_address_summary_only_cmd);
<a name="l11991"></a>11991 
<a name="l11992"></a>11992   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_cmd);
<a name="l11993"></a>11993   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_cmd);
<a name="l11994"></a>11994   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_route_cmd);
<a name="l11995"></a>11995   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_route_cmd);
<a name="l11996"></a>11996   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_prefix_cmd);
<a name="l11997"></a>11997   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_prefix_cmd);
<a name="l11998"></a>11998   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_regexp_cmd);
<a name="l11999"></a>11999   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_regexp_cmd);
<a name="l12000"></a>12000   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_prefix_list_cmd);
<a name="l12001"></a>12001   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_prefix_list_cmd);
<a name="l12002"></a>12002   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_filter_list_cmd);
<a name="l12003"></a>12003   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_filter_list_cmd);
<a name="l12004"></a>12004   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_route_map_cmd);
<a name="l12005"></a>12005   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_route_map_cmd);
<a name="l12006"></a>12006   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community_all_cmd);
<a name="l12007"></a>12007   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community_all_cmd);
<a name="l12008"></a>12008   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community_cmd);
<a name="l12009"></a>12009   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community_cmd);
<a name="l12010"></a>12010   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community2_cmd);
<a name="l12011"></a>12011   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community2_cmd);
<a name="l12012"></a>12012   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community3_cmd);
<a name="l12013"></a>12013   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community3_cmd);
<a name="l12014"></a>12014   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community4_cmd);
<a name="l12015"></a>12015   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community4_cmd);
<a name="l12016"></a>12016   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community_exact_cmd);
<a name="l12017"></a>12017   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community_exact_cmd);
<a name="l12018"></a>12018   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community2_exact_cmd);
<a name="l12019"></a>12019   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community2_exact_cmd);
<a name="l12020"></a>12020   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community3_exact_cmd);
<a name="l12021"></a>12021   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community3_exact_cmd);
<a name="l12022"></a>12022   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community4_exact_cmd);
<a name="l12023"></a>12023   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community4_exact_cmd);
<a name="l12024"></a>12024   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community_list_cmd);
<a name="l12025"></a>12025   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community_list_cmd);
<a name="l12026"></a>12026   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_community_list_exact_cmd);
<a name="l12027"></a>12027   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_community_list_exact_cmd);
<a name="l12028"></a>12028   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_prefix_longer_cmd);
<a name="l12029"></a>12029   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_prefix_longer_cmd);
<a name="l12030"></a>12030   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_advertised_route_cmd);
<a name="l12031"></a>12031   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_advertised_route_cmd);
<a name="l12032"></a>12032   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_received_routes_cmd);
<a name="l12033"></a>12033   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_received_routes_cmd);
<a name="l12034"></a>12034   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_routes_cmd);
<a name="l12035"></a>12035   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_routes_cmd);
<a name="l12036"></a>12036   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_received_prefix_filter_cmd);
<a name="l12037"></a>12037   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_received_prefix_filter_cmd);
<a name="l12038"></a>12038   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_flap_cmd);
<a name="l12039"></a>12039   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_flap_cmd);
<a name="l12040"></a>12040   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_neighbor_damp_cmd);
<a name="l12041"></a>12041   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_ipv6_neighbor_damp_cmd);
<a name="l12042"></a>12042   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_rsclient_cmd);
<a name="l12043"></a>12043   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_rsclient_route_cmd);
<a name="l12044"></a>12044   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_rsclient_prefix_cmd);
<a name="l12045"></a>12045   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_cmd);
<a name="l12046"></a>12046   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_cmd);
<a name="l12047"></a>12047   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_route_cmd);
<a name="l12048"></a>12048   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_route_cmd);
<a name="l12049"></a>12049   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_prefix_cmd);
<a name="l12050"></a>12050   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_prefix_cmd);
<a name="l12051"></a>12051   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_advertised_route_cmd);
<a name="l12052"></a>12052   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_advertised_route_cmd);
<a name="l12053"></a>12053   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_received_routes_cmd);
<a name="l12054"></a>12054   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_received_routes_cmd);
<a name="l12055"></a>12055   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_routes_cmd);
<a name="l12056"></a>12056   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_routes_cmd);
<a name="l12057"></a>12057   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_received_prefix_filter_cmd);
<a name="l12058"></a>12058   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_received_prefix_filter_cmd);
<a name="l12059"></a>12059   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_flap_cmd);
<a name="l12060"></a>12060   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_flap_cmd);
<a name="l12061"></a>12061   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_neighbor_damp_cmd);
<a name="l12062"></a>12062   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_damp_cmd); 
<a name="l12063"></a>12063   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_rsclient_cmd);
<a name="l12064"></a>12064   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_rsclient_route_cmd);
<a name="l12065"></a>12065   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_bgp_view_rsclient_prefix_cmd);
<a name="l12066"></a>12066   
<a name="l12067"></a>12067   <span class="comment">/* Restricted:</span>
<a name="l12068"></a>12068 <span class="comment">   * VIEW_NODE - (set of dangerous commands) - (commands dependent on prev) </span>
<a name="l12069"></a>12069 <span class="comment">   */</span>
<a name="l12070"></a>12070   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_route_cmd);
<a name="l12071"></a>12071   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_route_cmd);
<a name="l12072"></a>12072   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_prefix_cmd);
<a name="l12073"></a>12073   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_prefix_cmd);
<a name="l12074"></a>12074   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community_cmd);
<a name="l12075"></a>12075   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community_cmd);
<a name="l12076"></a>12076   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community2_cmd);
<a name="l12077"></a>12077   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community2_cmd);
<a name="l12078"></a>12078   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community3_cmd);
<a name="l12079"></a>12079   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community3_cmd);
<a name="l12080"></a>12080   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community4_cmd);
<a name="l12081"></a>12081   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community4_cmd);
<a name="l12082"></a>12082   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community_exact_cmd);
<a name="l12083"></a>12083   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community_exact_cmd);
<a name="l12084"></a>12084   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community2_exact_cmd);
<a name="l12085"></a>12085   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community2_exact_cmd);
<a name="l12086"></a>12086   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community3_exact_cmd);
<a name="l12087"></a>12087   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community3_exact_cmd);
<a name="l12088"></a>12088   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_community4_exact_cmd);
<a name="l12089"></a>12089   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_ipv6_community4_exact_cmd);
<a name="l12090"></a>12090   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_rsclient_route_cmd);
<a name="l12091"></a>12091   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_rsclient_prefix_cmd);
<a name="l12092"></a>12092   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_route_cmd);
<a name="l12093"></a>12093   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_ipv6_route_cmd);
<a name="l12094"></a>12094   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_prefix_cmd);
<a name="l12095"></a>12095   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_ipv6_prefix_cmd);
<a name="l12096"></a>12096   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_neighbor_received_prefix_filter_cmd);
<a name="l12097"></a>12097   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_received_prefix_filter_cmd);
<a name="l12098"></a>12098   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_rsclient_route_cmd);
<a name="l12099"></a>12099   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_bgp_view_rsclient_prefix_cmd);
<a name="l12100"></a>12100 
<a name="l12101"></a>12101   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_cmd);
<a name="l12102"></a>12102   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_cmd);
<a name="l12103"></a>12103   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_route_cmd);
<a name="l12104"></a>12104   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_route_cmd);
<a name="l12105"></a>12105   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_prefix_cmd);
<a name="l12106"></a>12106   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_prefix_cmd);
<a name="l12107"></a>12107   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_regexp_cmd);
<a name="l12108"></a>12108   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_regexp_cmd);
<a name="l12109"></a>12109   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_prefix_list_cmd);
<a name="l12110"></a>12110   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_prefix_list_cmd);
<a name="l12111"></a>12111   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_filter_list_cmd);
<a name="l12112"></a>12112   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_filter_list_cmd);
<a name="l12113"></a>12113   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_route_map_cmd);
<a name="l12114"></a>12114   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_route_map_cmd);
<a name="l12115"></a>12115   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community_all_cmd);
<a name="l12116"></a>12116   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community_all_cmd);
<a name="l12117"></a>12117   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community_cmd);
<a name="l12118"></a>12118   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community_cmd);
<a name="l12119"></a>12119   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community2_cmd);
<a name="l12120"></a>12120   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community2_cmd);
<a name="l12121"></a>12121   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community3_cmd);
<a name="l12122"></a>12122   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community3_cmd);
<a name="l12123"></a>12123   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community4_cmd);
<a name="l12124"></a>12124   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community4_cmd);
<a name="l12125"></a>12125   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community_exact_cmd);
<a name="l12126"></a>12126   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community_exact_cmd);
<a name="l12127"></a>12127   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community2_exact_cmd);
<a name="l12128"></a>12128   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community2_exact_cmd);
<a name="l12129"></a>12129   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community3_exact_cmd);
<a name="l12130"></a>12130   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community3_exact_cmd);
<a name="l12131"></a>12131   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community4_exact_cmd);
<a name="l12132"></a>12132   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community4_exact_cmd);
<a name="l12133"></a>12133   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community_list_cmd);
<a name="l12134"></a>12134   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community_list_cmd);
<a name="l12135"></a>12135   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_community_list_exact_cmd);
<a name="l12136"></a>12136   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_community_list_exact_cmd);
<a name="l12137"></a>12137   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_prefix_longer_cmd);
<a name="l12138"></a>12138   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_prefix_longer_cmd);
<a name="l12139"></a>12139   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_advertised_route_cmd);
<a name="l12140"></a>12140   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_advertised_route_cmd);
<a name="l12141"></a>12141   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_received_routes_cmd);
<a name="l12142"></a>12142   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_received_routes_cmd);
<a name="l12143"></a>12143   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_routes_cmd);
<a name="l12144"></a>12144   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_routes_cmd);
<a name="l12145"></a>12145   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_received_prefix_filter_cmd);
<a name="l12146"></a>12146   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_received_prefix_filter_cmd);
<a name="l12147"></a>12147   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_flap_cmd);
<a name="l12148"></a>12148   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_flap_cmd);
<a name="l12149"></a>12149   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_neighbor_damp_cmd);
<a name="l12150"></a>12150   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_ipv6_neighbor_damp_cmd);
<a name="l12151"></a>12151   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_rsclient_cmd);
<a name="l12152"></a>12152   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_rsclient_route_cmd);
<a name="l12153"></a>12153   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_rsclient_prefix_cmd);
<a name="l12154"></a>12154   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_cmd);
<a name="l12155"></a>12155   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_cmd);
<a name="l12156"></a>12156   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_route_cmd);
<a name="l12157"></a>12157   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_route_cmd);
<a name="l12158"></a>12158   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_prefix_cmd);
<a name="l12159"></a>12159   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_prefix_cmd);
<a name="l12160"></a>12160   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_advertised_route_cmd);
<a name="l12161"></a>12161   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_advertised_route_cmd);
<a name="l12162"></a>12162   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_received_routes_cmd);
<a name="l12163"></a>12163   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_received_routes_cmd);
<a name="l12164"></a>12164   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_routes_cmd);
<a name="l12165"></a>12165   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_routes_cmd);
<a name="l12166"></a>12166   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_received_prefix_filter_cmd);
<a name="l12167"></a>12167   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_received_prefix_filter_cmd);
<a name="l12168"></a>12168   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_flap_cmd);
<a name="l12169"></a>12169   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_flap_cmd);
<a name="l12170"></a>12170   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_neighbor_damp_cmd);
<a name="l12171"></a>12171   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_ipv6_neighbor_damp_cmd);
<a name="l12172"></a>12172   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_rsclient_cmd);
<a name="l12173"></a>12173   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_rsclient_route_cmd);
<a name="l12174"></a>12174   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_view_rsclient_prefix_cmd);
<a name="l12175"></a>12175   
<a name="l12176"></a>12176   <span class="comment">/* Statistics */</span>
<a name="l12177"></a>12177   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_statistics_cmd);
<a name="l12178"></a>12178   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_statistics_vpnv4_cmd);
<a name="l12179"></a>12179   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_statistics_view_cmd);
<a name="l12180"></a>12180   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_bgp_statistics_view_vpnv4_cmd);
<a name="l12181"></a>12181   
<a name="l12182"></a>12182   <span class="comment">/* old command */</span>
<a name="l12183"></a>12183   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_cmd);
<a name="l12184"></a>12184   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_route_cmd);
<a name="l12185"></a>12185   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_prefix_cmd);
<a name="l12186"></a>12186   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_regexp_cmd);
<a name="l12187"></a>12187   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_prefix_list_cmd);
<a name="l12188"></a>12188   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_filter_list_cmd);
<a name="l12189"></a>12189   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community_all_cmd);
<a name="l12190"></a>12190   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community_cmd);
<a name="l12191"></a>12191   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community2_cmd);
<a name="l12192"></a>12192   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community3_cmd);
<a name="l12193"></a>12193   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community4_cmd);
<a name="l12194"></a>12194   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community_exact_cmd);
<a name="l12195"></a>12195   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community2_exact_cmd);
<a name="l12196"></a>12196   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community3_exact_cmd);
<a name="l12197"></a>12197   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community4_exact_cmd);
<a name="l12198"></a>12198   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community_list_cmd);
<a name="l12199"></a>12199   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_community_list_exact_cmd);
<a name="l12200"></a>12200   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_bgp_prefix_longer_cmd);
<a name="l12201"></a>12201   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_cmd);
<a name="l12202"></a>12202   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_route_cmd);
<a name="l12203"></a>12203   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_prefix_cmd);
<a name="l12204"></a>12204   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_regexp_cmd);
<a name="l12205"></a>12205   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_prefix_list_cmd);
<a name="l12206"></a>12206   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_filter_list_cmd);
<a name="l12207"></a>12207   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community_all_cmd);
<a name="l12208"></a>12208   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community_cmd);
<a name="l12209"></a>12209   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community2_cmd);
<a name="l12210"></a>12210   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community3_cmd);
<a name="l12211"></a>12211   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community4_cmd);
<a name="l12212"></a>12212   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community_exact_cmd);
<a name="l12213"></a>12213   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community2_exact_cmd);
<a name="l12214"></a>12214   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community3_exact_cmd);
<a name="l12215"></a>12215   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community4_exact_cmd);
<a name="l12216"></a>12216   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community_list_cmd);
<a name="l12217"></a>12217   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_community_list_exact_cmd);
<a name="l12218"></a>12218   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_mbgp_prefix_longer_cmd);
<a name="l12219"></a>12219   
<a name="l12220"></a>12220   <span class="comment">/* old command */</span>
<a name="l12221"></a>12221   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_cmd);
<a name="l12222"></a>12222   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_route_cmd);
<a name="l12223"></a>12223   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_prefix_cmd);
<a name="l12224"></a>12224   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_regexp_cmd);
<a name="l12225"></a>12225   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_prefix_list_cmd);
<a name="l12226"></a>12226   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_filter_list_cmd);
<a name="l12227"></a>12227   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community_all_cmd);
<a name="l12228"></a>12228   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community_cmd);
<a name="l12229"></a>12229   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community2_cmd);
<a name="l12230"></a>12230   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community3_cmd);
<a name="l12231"></a>12231   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community4_cmd);
<a name="l12232"></a>12232   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community_exact_cmd);
<a name="l12233"></a>12233   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community2_exact_cmd);
<a name="l12234"></a>12234   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community3_exact_cmd);
<a name="l12235"></a>12235   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community4_exact_cmd);
<a name="l12236"></a>12236   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community_list_cmd);
<a name="l12237"></a>12237   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_community_list_exact_cmd);
<a name="l12238"></a>12238   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_bgp_prefix_longer_cmd);
<a name="l12239"></a>12239   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_cmd);
<a name="l12240"></a>12240   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_route_cmd);
<a name="l12241"></a>12241   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_prefix_cmd);
<a name="l12242"></a>12242   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_regexp_cmd);
<a name="l12243"></a>12243   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_prefix_list_cmd);
<a name="l12244"></a>12244   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_filter_list_cmd);
<a name="l12245"></a>12245   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community_all_cmd);
<a name="l12246"></a>12246   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community_cmd);
<a name="l12247"></a>12247   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community2_cmd);
<a name="l12248"></a>12248   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community3_cmd);
<a name="l12249"></a>12249   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community4_cmd);
<a name="l12250"></a>12250   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community_exact_cmd);
<a name="l12251"></a>12251   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community2_exact_cmd);
<a name="l12252"></a>12252   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community3_exact_cmd);
<a name="l12253"></a>12253   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community4_exact_cmd);
<a name="l12254"></a>12254   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community_list_cmd);
<a name="l12255"></a>12255   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_community_list_exact_cmd);
<a name="l12256"></a>12256   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_mbgp_prefix_longer_cmd);
<a name="l12257"></a>12257 
<a name="l12258"></a>12258   <span class="comment">/* old command */</span>
<a name="l12259"></a>12259   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_bgp_neighbor_advertised_route_cmd);
<a name="l12260"></a>12260   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_bgp_neighbor_advertised_route_cmd);
<a name="l12261"></a>12261   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_mbgp_neighbor_advertised_route_cmd);
<a name="l12262"></a>12262   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_mbgp_neighbor_advertised_route_cmd);
<a name="l12263"></a>12263 
<a name="l12264"></a>12264   <span class="comment">/* old command */</span>
<a name="l12265"></a>12265   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_bgp_neighbor_received_routes_cmd);
<a name="l12266"></a>12266   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_bgp_neighbor_received_routes_cmd);
<a name="l12267"></a>12267   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_mbgp_neighbor_received_routes_cmd);
<a name="l12268"></a>12268   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_mbgp_neighbor_received_routes_cmd);
<a name="l12269"></a>12269 
<a name="l12270"></a>12270   <span class="comment">/* old command */</span>
<a name="l12271"></a>12271   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_bgp_neighbor_routes_cmd);
<a name="l12272"></a>12272   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_bgp_neighbor_routes_cmd);
<a name="l12273"></a>12273   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;ipv6_mbgp_neighbor_routes_cmd);
<a name="l12274"></a>12274   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;ipv6_mbgp_neighbor_routes_cmd);
<a name="l12275"></a>12275 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l12276"></a>12276 
<a name="l12277"></a>12277   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_distance_cmd);
<a name="l12278"></a>12278   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_distance_cmd);
<a name="l12279"></a>12279   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_distance2_cmd);
<a name="l12280"></a>12280   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_distance_source_cmd);
<a name="l12281"></a>12281   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_distance_source_cmd);
<a name="l12282"></a>12282   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_distance_source_access_list_cmd);
<a name="l12283"></a>12283   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_distance_source_access_list_cmd);
<a name="l12284"></a>12284 
<a name="l12285"></a>12285   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_damp_set_cmd);
<a name="l12286"></a>12286   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_damp_set2_cmd);
<a name="l12287"></a>12287   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_damp_set3_cmd);
<a name="l12288"></a>12288   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_damp_unset_cmd);
<a name="l12289"></a>12289   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_damp_unset2_cmd);
<a name="l12290"></a>12290   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_damp_set_cmd);
<a name="l12291"></a>12291   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_damp_set2_cmd);
<a name="l12292"></a>12292   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_damp_set3_cmd);
<a name="l12293"></a>12293   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_damp_unset_cmd);
<a name="l12294"></a>12294   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7391c0900502387d3204e9de89022905">BGP_IPV4_NODE</a>, &amp;bgp_damp_unset2_cmd);
<a name="l12295"></a>12295 }
<a name="l12296"></a>12296 
<a name="l12297"></a>12297 <span class="keywordtype">void</span>
<a name="l12298"></a>12298 <a class="code" href="bgp__route_8h.html#a12f57c2100947b29dacea6b47b0bfa79">bgp_route_finish</a> (<span class="keywordtype">void</span>)
<a name="l12299"></a>12299 {
<a name="l12300"></a>12300   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (bgp_distance_table);
<a name="l12301"></a>12301   bgp_distance_table = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l12302"></a>12302 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__route_8c.html">bgp_route.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:03 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
