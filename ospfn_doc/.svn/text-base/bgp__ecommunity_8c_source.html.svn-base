<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_ecommunity.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__ecommunity_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_ecommunity.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__ecommunity_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP Extended Communities Attribute</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 2000 Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="bgp__ecommunity_8h.html">bgpd/bgp_ecommunity.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">/* Hash of community attribute. */</span>
<a name="l00033"></a><a class="code" href="bgp__ecommunity_8c.html#a1e5651d8256a8964ef2447cec37cf2bf">00033</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="bgp__ecommunity_8c.html#a1e5651d8256a8964ef2447cec37cf2bf">ecomhash</a>;
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">/* Allocate a new ecommunities.  */</span>
<a name="l00036"></a>00036 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00037"></a><a class="code" href="bgp__ecommunity_8c.html#a5c8680e239492bb28a06e48c2bf932da">00037</a> <a class="code" href="bgp__ecommunity_8c.html#a5c8680e239492bb28a06e48c2bf932da">ecommunity_new</a> (<span class="keywordtype">void</span>)
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039   <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *) <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7503e1ea86f33fa9d23b0aeaea03e836">MTYPE_ECOMMUNITY</a>,
<a name="l00040"></a>00040                     <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a>));
<a name="l00041"></a>00041 }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">/* Allocate ecommunities.  */</span>
<a name="l00044"></a>00044 <span class="keywordtype">void</span>
<a name="l00045"></a><a class="code" href="bgp__ecommunity_8h.html#a681f44cef491568dfc1d0328ef19d500">00045</a> <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>)
<a name="l00048"></a>00048     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>, ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>);
<a name="l00049"></a>00049   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>)
<a name="l00050"></a>00050     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba88ab42bbd8fb0ec06228f8baf67a3bd6">MTYPE_ECOMMUNITY_STR</a>, ecom-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>);
<a name="l00051"></a>00051   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7503e1ea86f33fa9d23b0aeaea03e836">MTYPE_ECOMMUNITY</a>, ecom);
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="comment">/* Add a new Extended Communities value to Extended Communities</span>
<a name="l00055"></a>00055 <span class="comment">   Attribute structure.  When the value is already exists in the</span>
<a name="l00056"></a>00056 <span class="comment">   structure, we don&#39;t add the value.  Newly added value is sorted by</span>
<a name="l00057"></a>00057 <span class="comment">   numerical order.  When the value is added to the structure return 1</span>
<a name="l00058"></a>00058 <span class="comment">   else return 0.  */</span>
<a name="l00059"></a>00059 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00060"></a><a class="code" href="bgp__ecommunity_8c.html#a8c077f7bd7bcddb7d1418f3c8a2d9565">00060</a> <a class="code" href="bgp__ecommunity_8c.html#a8c077f7bd7bcddb7d1418f3c8a2d9565">ecommunity_add_val</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom, <span class="keyword">struct</span> <a class="code" href="structecommunity__val.html">ecommunity_val</a> *eval)
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062   u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00063"></a>00063   <span class="keywordtype">int</span> ret;
<a name="l00064"></a>00064   <span class="keywordtype">int</span> c;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">/* When this is fist value, just add it.  */</span>
<a name="l00067"></a>00067   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069       ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>++;
<a name="l00070"></a>00070       ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>, <a class="code" href="bgp__ecommunity_8h.html#a7b8f2920f9a3bd6da9b025c300743e97">ecom_length</a> (ecom));
<a name="l00071"></a>00071       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>, <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00072"></a>00072       <span class="keywordflow">return</span> 1;
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="comment">/* If the value already exists in the structure return 0.  */</span>
<a name="l00076"></a>00076   c = 0;
<a name="l00077"></a>00077   <span class="keywordflow">for</span> (p = ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>; c &lt; ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; p += <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>, c++)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079       ret = <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (p, eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>, <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00080"></a>00080       <span class="keywordflow">if</span> (ret == 0)
<a name="l00081"></a>00081         <span class="keywordflow">return</span> 0;
<a name="l00082"></a>00082       <span class="keywordflow">if</span> (ret &gt; 0)
<a name="l00083"></a>00083         <span class="keywordflow">break</span>;
<a name="l00084"></a>00084     }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="comment">/* Add the value to the structure with numerical sorting.  */</span>
<a name="l00087"></a>00087   ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>++;
<a name="l00088"></a>00088   ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>, ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, <a class="code" href="bgp__ecommunity_8h.html#a7b8f2920f9a3bd6da9b025c300743e97">ecom_length</a> (ecom));
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   memmove (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (c + 1) * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>,
<a name="l00091"></a>00091        ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + c * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>,
<a name="l00092"></a>00092        (ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> - 1 - c) * ECOMMUNITY_SIZE);
<a name="l00093"></a>00093   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + c * ECOMMUNITY_SIZE, eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>, ECOMMUNITY_SIZE);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   <span class="keywordflow">return</span> 1;
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="comment">/* This function takes pointer to Extended Communites strucutre then</span>
<a name="l00099"></a>00099 <span class="comment">   create a new Extended Communities structure by uniq and sort each</span>
<a name="l00100"></a>00100 <span class="comment">   Extended Communities value.  */</span>
<a name="l00101"></a>00101 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00102"></a><a class="code" href="bgp__ecommunity_8c.html#ae2517bca0f0c191496e72124f55e0513">00102</a> <a class="code" href="bgp__ecommunity_8c.html#ae2517bca0f0c191496e72124f55e0513">ecommunity_uniq_sort</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00105"></a>00105   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<span class="keyword">new</span>;
<a name="l00106"></a>00106   <span class="keyword">struct </span><a class="code" href="structecommunity__val.html">ecommunity_val</a> *eval;
<a name="l00107"></a>00107   
<a name="l00108"></a>00108   <span class="keywordflow">if</span> (! ecom)
<a name="l00109"></a>00109     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00110"></a>00110   
<a name="l00111"></a>00111   <span class="keyword">new</span> = <a class="code" href="bgp__ecommunity_8c.html#a5c8680e239492bb28a06e48c2bf932da">ecommunity_new</a> ();
<a name="l00112"></a>00112   
<a name="l00113"></a>00113   <span class="keywordflow">for</span> (i = 0; i &lt; ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115       eval = (<span class="keyword">struct </span><a class="code" href="structecommunity__val.html">ecommunity_val</a> *) (ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>));
<a name="l00116"></a>00116       <a class="code" href="bgp__ecommunity_8c.html#a8c077f7bd7bcddb7d1418f3c8a2d9565">ecommunity_add_val</a> (<span class="keyword">new</span>, eval);
<a name="l00117"></a>00117     }
<a name="l00118"></a>00118   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="comment">/* Parse Extended Communites Attribute in BGP packet.  */</span>
<a name="l00122"></a>00122 <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00123"></a><a class="code" href="bgp__ecommunity_8h.html#a41a92d80d132ec088bbfd1072944c385">00123</a> <a class="code" href="bgp__ecommunity_8c.html#a39113bc26f62bbd119fa0da3484f3f86">ecommunity_parse</a> (u_int8_t *pnt, u_short <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l00124"></a>00124 {
<a name="l00125"></a>00125   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> tmp;
<a name="l00126"></a>00126   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<span class="keyword">new</span>;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128   <span class="comment">/* Length check.  */</span>
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (length % <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>)
<a name="l00130"></a>00130     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="comment">/* Prepare tmporary structure for making a new Extended Communities</span>
<a name="l00133"></a>00133 <span class="comment">     Attribute.  */</span>
<a name="l00134"></a>00134   tmp.<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> = length / <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>;
<a name="l00135"></a>00135   tmp.<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> = pnt;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="comment">/* Create a new Extended Communities Attribute by uniq and sort each</span>
<a name="l00138"></a>00138 <span class="comment">     Extended Communities value  */</span>
<a name="l00139"></a>00139   <span class="keyword">new</span> = <a class="code" href="bgp__ecommunity_8c.html#ae2517bca0f0c191496e72124f55e0513">ecommunity_uniq_sort</a> (&amp;tmp);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="keywordflow">return</span> <a class="code" href="bgp__ecommunity_8c.html#aef15f1927a9085dd8f1df7fa612794db">ecommunity_intern</a> (<span class="keyword">new</span>);
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">/* Duplicate the Extended Communities Attribute structure.  */</span>
<a name="l00145"></a>00145 <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00146"></a><a class="code" href="bgp__ecommunity_8h.html#a6e9fc4f01f922751c7f410edf7a93cad">00146</a> <a class="code" href="bgp__ecommunity_8c.html#a7b33bca36537fc5e96127cfb7e3f5601">ecommunity_dup</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<span class="keyword">new</span>;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7503e1ea86f33fa9d23b0aeaea03e836">MTYPE_ECOMMUNITY</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a>));
<a name="l00151"></a>00151   <span class="keyword">new</span>-&gt;size = ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>;
<a name="l00152"></a>00152   <span class="keywordflow">if</span> (new-&gt;size)
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154       <span class="keyword">new</span>-&gt;val = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>, ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00155"></a>00155       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;val, ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00156"></a>00156     }
<a name="l00157"></a>00157   <span class="keywordflow">else</span>
<a name="l00158"></a>00158     <span class="keyword">new</span>-&gt;val = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00159"></a>00159   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="comment">/* Retrun string representation of communities attribute. */</span>
<a name="l00163"></a>00163 <span class="keywordtype">char</span> *
<a name="l00164"></a><a class="code" href="bgp__ecommunity_8h.html#aaa4f85c53eaf505aab0798a3323cf252">00164</a> <a class="code" href="bgp__ecommunity_8c.html#acf79813b21f80e7f2966706a4df198e8">ecommunity_str</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <span class="keywordflow">if</span> (! ecom-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>)
<a name="l00167"></a>00167     ecom-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a> = <a class="code" href="bgp__ecommunity_8c.html#a8ffcee89340db2108bd11edf28852b11">ecommunity_ecom2str</a> (ecom, <a class="code" href="bgp__ecommunity_8h.html#ae776d41484b625ccb00ad109d4965451">ECOMMUNITY_FORMAT_DISPLAY</a>);
<a name="l00168"></a>00168   <span class="keywordflow">return</span> ecom-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>;
<a name="l00169"></a>00169 }
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="comment">/* Merge two Extended Communities Attribute structure.  */</span>
<a name="l00172"></a>00172 <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00173"></a><a class="code" href="bgp__ecommunity_8h.html#a3c55a503f9803a70f2b8392a900d7d96">00173</a> <a class="code" href="bgp__ecommunity_8c.html#acaf75691d0751ca4418b498415cd0aec">ecommunity_merge</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom1, <span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom2)
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175   <span class="keywordflow">if</span> (ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>)
<a name="l00176"></a>00176     ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>, ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, 
<a name="l00177"></a>00177                (ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> + ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>) * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00178"></a>00178   <span class="keywordflow">else</span>
<a name="l00179"></a>00179     ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7e96150c726ab7623a792baa503a6a24">MTYPE_ECOMMUNITY_VAL</a>,
<a name="l00180"></a>00180               (ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> + ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>) * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>),
<a name="l00183"></a>00183       ecom2-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>);
<a name="l00184"></a>00184   ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> += ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="keywordflow">return</span> ecom1;
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="comment">/* Intern Extended Communities Attribute.  */</span>
<a name="l00190"></a>00190 <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00191"></a><a class="code" href="bgp__ecommunity_8h.html#aa6b2b50991689bc8b36b3d71900705e8">00191</a> <a class="code" href="bgp__ecommunity_8c.html#aef15f1927a9085dd8f1df7fa612794db">ecommunity_intern</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *find;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ecom-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a> == 0);
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   find = (<span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *) <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (ecomhash, ecom, <a class="code" href="hash_8c.html#ac2705f6d220cf4d8049201e369ff6d62">hash_alloc_intern</a>);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (find != ecom)
<a name="l00200"></a>00200     <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (ecom);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   find-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>++;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   <span class="keywordflow">if</span> (! find-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a>)
<a name="l00205"></a>00205     find-&gt;<a class="code" href="structecommunity.html#ac84ecde7f5b18c5c070ba22400fb0cb6">str</a> = <a class="code" href="bgp__ecommunity_8c.html#a8ffcee89340db2108bd11edf28852b11">ecommunity_ecom2str</a> (find, <a class="code" href="bgp__ecommunity_8h.html#ae776d41484b625ccb00ad109d4965451">ECOMMUNITY_FORMAT_DISPLAY</a>);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="keywordflow">return</span> find;
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="comment">/* Unintern Extended Communities Attribute.  */</span>
<a name="l00211"></a>00211 <span class="keywordtype">void</span>
<a name="l00212"></a><a class="code" href="bgp__ecommunity_8h.html#af356e82da85fe44e2a8ebcf88b3b1c15">00212</a> <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom)
<a name="l00213"></a>00213 {
<a name="l00214"></a>00214   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *ret;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
<a name="l00217"></a>00217     ecom-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>--;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <span class="comment">/* Pull off from hash.  */</span>
<a name="l00220"></a>00220   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a> == 0)
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222       <span class="comment">/* Extended community must be in the hash.  */</span>
<a name="l00223"></a>00223       ret = (<span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *) <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (ecomhash, ecom);
<a name="l00224"></a>00224       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ret != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00225"></a>00225 
<a name="l00226"></a>00226       <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (ecom);
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 <span class="comment">/* Utinity function to make hash key.  */</span>
<a name="l00231"></a>00231 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00232"></a><a class="code" href="bgp__ecommunity_8h.html#a1893a1f68e0ed988ca076a37e16f0f5b">00232</a> <a class="code" href="bgp__ecommunity_8c.html#adb13cb51e62ac1f0e4a3cf6137748409">ecommunity_hash_make</a> (<span class="keywordtype">void</span> *arg)
<a name="l00233"></a>00233 {
<a name="l00234"></a>00234   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *ecom = arg;
<a name="l00235"></a>00235   <span class="keywordtype">int</span> c;
<a name="l00236"></a>00236   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00237"></a>00237   u_int8_t *pnt;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   key = 0;
<a name="l00240"></a>00240   pnt = ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>;
<a name="l00241"></a>00241   
<a name="l00242"></a>00242   <span class="keywordflow">for</span> (c = 0; c &lt; ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>; c++)
<a name="l00243"></a>00243     key += pnt[c];
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="comment">/* Compare two Extended Communities Attribute structure.  */</span>
<a name="l00249"></a>00249 <span class="keywordtype">int</span>
<a name="l00250"></a><a class="code" href="bgp__ecommunity_8h.html#afcfe4a392cf5997e08e3e798d74df6ef">00250</a> <a class="code" href="bgp__ecommunity_8c.html#aedf7f522590389592309042fdbae6fef">ecommunity_cmp</a> (<span class="keyword">const</span> <span class="keywordtype">void</span> *arg1, <span class="keyword">const</span> <span class="keywordtype">void</span> *arg2)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *ecom1 = arg1;
<a name="l00253"></a>00253   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *ecom2 = arg2;
<a name="l00254"></a>00254   
<a name="l00255"></a>00255   <span class="keywordflow">return</span> (ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> == ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>
<a name="l00256"></a>00256       &amp;&amp; <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, ecom2-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>) == 0);
<a name="l00257"></a>00257 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="comment">/* Initialize Extended Comminities related hash. */</span>
<a name="l00260"></a>00260 <span class="keywordtype">void</span>
<a name="l00261"></a><a class="code" href="bgp__ecommunity_8h.html#a51951f652cd586d53176801edb217319">00261</a> <a class="code" href="bgp__ecommunity_8c.html#a51951f652cd586d53176801edb217319">ecommunity_init</a> (<span class="keywordtype">void</span>)
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263   ecomhash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__ecommunity_8c.html#adb13cb51e62ac1f0e4a3cf6137748409">ecommunity_hash_make</a>, <a class="code" href="bgp__ecommunity_8c.html#aedf7f522590389592309042fdbae6fef">ecommunity_cmp</a>);
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 <span class="keywordtype">void</span>
<a name="l00267"></a><a class="code" href="bgp__ecommunity_8h.html#a3909ede3d29a88faad854a2833ec9322">00267</a> <a class="code" href="bgp__ecommunity_8c.html#a3909ede3d29a88faad854a2833ec9322">ecommunity_finish</a> (<span class="keywordtype">void</span>)
<a name="l00268"></a>00268 {
<a name="l00269"></a>00269   <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (ecomhash);
<a name="l00270"></a>00270   ecomhash = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="comment">/* Extended Communities token enum. */</span>
<a name="l00274"></a><a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8">00274</a> <span class="keyword">enum</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8">ecommunity_token</a>
<a name="l00275"></a>00275 {
<a name="l00276"></a><a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">00276</a>   <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">ecommunity_token_rt</a>,
<a name="l00277"></a><a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">00277</a>   <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>,
<a name="l00278"></a><a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8af8b32df295bef7efe65453a7f19fc34b">00278</a>   <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8af8b32df295bef7efe65453a7f19fc34b">ecommunity_token_val</a>,
<a name="l00279"></a><a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8aac56d87b21b76002951708922564e867">00279</a>   <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8aac56d87b21b76002951708922564e867">ecommunity_token_unknown</a>
<a name="l00280"></a>00280 };
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment">/* Get next Extended Communities token from the string. */</span>
<a name="l00283"></a>00283 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00284"></a><a class="code" href="bgp__ecommunity_8c.html#a7fa09e5778b96bf677f66c355d5dcad1">00284</a> <a class="code" href="bgp__ecommunity_8c.html#a7fa09e5778b96bf677f66c355d5dcad1">ecommunity_gettoken</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keyword">struct</span> <a class="code" href="structecommunity__val.html">ecommunity_val</a> *eval,
<a name="l00285"></a>00285              <span class="keyword">enum</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8">ecommunity_token</a> *token)
<a name="l00286"></a>00286 {
<a name="l00287"></a>00287   <span class="keywordtype">int</span> ret;
<a name="l00288"></a>00288   <span class="keywordtype">int</span> dot = 0;
<a name="l00289"></a>00289   <span class="keywordtype">int</span> digit = 0;
<a name="l00290"></a>00290   <span class="keywordtype">int</span> separator = 0;
<a name="l00291"></a>00291   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
<a name="l00292"></a>00292   <span class="keywordtype">char</span> *endptr;
<a name="l00293"></a>00293   <span class="keyword">struct </span>in_addr ip;
<a name="l00294"></a>00294   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as = 0;
<a name="l00295"></a>00295   u_int32_t <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = 0;
<a name="l00296"></a>00296   <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a> + 1];
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="comment">/* Skip white space. */</span>
<a name="l00299"></a>00299   <span class="keywordflow">while</span> (isspace ((<span class="keywordtype">int</span>) *p))
<a name="l00300"></a>00300     {
<a name="l00301"></a>00301       p++;
<a name="l00302"></a>00302       str++;
<a name="l00303"></a>00303     }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   <span class="comment">/* Check the end of the line. */</span>
<a name="l00306"></a>00306   <span class="keywordflow">if</span> (*p == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00307"></a>00307     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="comment">/* &quot;rt&quot; and &quot;soo&quot; keyword parse. */</span>
<a name="l00310"></a>00310   <span class="keywordflow">if</span> (! isdigit ((<span class="keywordtype">int</span>) *p)) 
<a name="l00311"></a>00311     {
<a name="l00312"></a>00312       <span class="comment">/* &quot;rt&quot; match check.  */</span>
<a name="l00313"></a>00313       <span class="keywordflow">if</span> (tolower ((<span class="keywordtype">int</span>) *p) == <span class="charliteral">&#39;r&#39;</span>)
<a name="l00314"></a>00314     {
<a name="l00315"></a>00315       p++;
<a name="l00316"></a>00316       <span class="keywordflow">if</span> (tolower ((<span class="keywordtype">int</span>) *p) == <span class="charliteral">&#39;t&#39;</span>)
<a name="l00317"></a>00317         {
<a name="l00318"></a>00318           p++;
<a name="l00319"></a>00319           *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">ecommunity_token_rt</a>;
<a name="l00320"></a>00320           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00321"></a>00321         }
<a name="l00322"></a>00322       <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">int</span>) *p) || *p == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00323"></a>00323         {
<a name="l00324"></a>00324           *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">ecommunity_token_rt</a>;
<a name="l00325"></a>00325           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00326"></a>00326         }
<a name="l00327"></a>00327       <span class="keywordflow">goto</span> error;
<a name="l00328"></a>00328     }
<a name="l00329"></a>00329       <span class="comment">/* &quot;soo&quot; match check.  */</span>
<a name="l00330"></a>00330       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tolower ((<span class="keywordtype">int</span>) *p) == <span class="charliteral">&#39;s&#39;</span>)
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       p++;
<a name="l00333"></a>00333       <span class="keywordflow">if</span> (tolower ((<span class="keywordtype">int</span>) *p) == <span class="charliteral">&#39;o&#39;</span>)
<a name="l00334"></a>00334         {
<a name="l00335"></a>00335           p++;
<a name="l00336"></a>00336           <span class="keywordflow">if</span> (tolower ((<span class="keywordtype">int</span>) *p) == <span class="charliteral">&#39;o&#39;</span>)
<a name="l00337"></a>00337         {
<a name="l00338"></a>00338           p++;
<a name="l00339"></a>00339           *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>;
<a name="l00340"></a>00340           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00341"></a>00341         }
<a name="l00342"></a>00342           <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">int</span>) *p) || *p == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00343"></a>00343         {
<a name="l00344"></a>00344           *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>;
<a name="l00345"></a>00345           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00346"></a>00346         }
<a name="l00347"></a>00347           <span class="keywordflow">goto</span> error;
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349       <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">int</span>) *p) || *p == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00350"></a>00350         {
<a name="l00351"></a>00351           *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>;
<a name="l00352"></a>00352           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00353"></a>00353         }
<a name="l00354"></a>00354       <span class="keywordflow">goto</span> error;
<a name="l00355"></a>00355     }
<a name="l00356"></a>00356       <span class="keywordflow">goto</span> error;
<a name="l00357"></a>00357     }
<a name="l00358"></a>00358   
<a name="l00359"></a>00359   <span class="comment">/* What a mess, there are several possibilities:</span>
<a name="l00360"></a>00360 <span class="comment">   *</span>
<a name="l00361"></a>00361 <span class="comment">   * a) A.B.C.D:MN</span>
<a name="l00362"></a>00362 <span class="comment">   * b) EF:OPQR</span>
<a name="l00363"></a>00363 <span class="comment">   * c) GHJK:MN</span>
<a name="l00364"></a>00364 <span class="comment">   *</span>
<a name="l00365"></a>00365 <span class="comment">   * A.B.C.D: Four Byte IP</span>
<a name="l00366"></a>00366 <span class="comment">   * EF:      Two byte ASN</span>
<a name="l00367"></a>00367 <span class="comment">   * GHJK:    Four-byte ASN</span>
<a name="l00368"></a>00368 <span class="comment">   * MN:      Two byte value</span>
<a name="l00369"></a>00369 <span class="comment">   * OPQR:    Four byte value</span>
<a name="l00370"></a>00370 <span class="comment">   *</span>
<a name="l00371"></a>00371 <span class="comment">   */</span>
<a name="l00372"></a>00372   <span class="keywordflow">while</span> (isdigit ((<span class="keywordtype">int</span>) *p) || *p == <span class="charliteral">&#39;:&#39;</span> || *p == <span class="charliteral">&#39;.&#39;</span>) 
<a name="l00373"></a>00373     {
<a name="l00374"></a>00374       <span class="keywordflow">if</span> (*p == <span class="charliteral">&#39;:&#39;</span>)
<a name="l00375"></a>00375     {
<a name="l00376"></a>00376       <span class="keywordflow">if</span> (separator)
<a name="l00377"></a>00377         <span class="keywordflow">goto</span> error;
<a name="l00378"></a>00378 
<a name="l00379"></a>00379       separator = 1;
<a name="l00380"></a>00380       digit = 0;
<a name="l00381"></a>00381       
<a name="l00382"></a>00382       <span class="keywordflow">if</span> ((p - str) &gt; <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>)
<a name="l00383"></a>00383         <span class="keywordflow">goto</span> error;
<a name="l00384"></a>00384           memset (buf, 0, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a> + 1);
<a name="l00385"></a>00385           <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (buf, str, p - str);
<a name="l00386"></a>00386           
<a name="l00387"></a>00387       <span class="keywordflow">if</span> (dot)
<a name="l00388"></a>00388         {
<a name="l00389"></a>00389           <span class="comment">/* Parsing A.B.C.D in:</span>
<a name="l00390"></a>00390 <span class="comment">               * A.B.C.D:MN</span>
<a name="l00391"></a>00391 <span class="comment">               */</span>
<a name="l00392"></a>00392           ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (buf, &amp;ip);
<a name="l00393"></a>00393           <span class="keywordflow">if</span> (ret == 0)
<a name="l00394"></a>00394             <span class="keywordflow">goto</span> error;
<a name="l00395"></a>00395         }
<a name="l00396"></a>00396           <span class="keywordflow">else</span>
<a name="l00397"></a>00397             {
<a name="l00398"></a>00398               <span class="comment">/* ASN */</span>
<a name="l00399"></a>00399               as = strtoul (buf, &amp;endptr, 10);
<a name="l00400"></a>00400               <span class="keywordflow">if</span> (*endptr != <span class="charliteral">&#39;\0&#39;</span> || as == <a class="code" href="bgp__aspath_8h.html#acd90833d0f197c0d00067713d06777e5">BGP_AS4_MAX</a>)
<a name="l00401"></a>00401                 <span class="keywordflow">goto</span> error;
<a name="l00402"></a>00402             }
<a name="l00403"></a>00403     }
<a name="l00404"></a>00404       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*p == <span class="charliteral">&#39;.&#39;</span>)
<a name="l00405"></a>00405     {
<a name="l00406"></a>00406       <span class="keywordflow">if</span> (separator)
<a name="l00407"></a>00407         <span class="keywordflow">goto</span> error;
<a name="l00408"></a>00408       dot++;
<a name="l00409"></a>00409       <span class="keywordflow">if</span> (dot &gt; 4)
<a name="l00410"></a>00410         <span class="keywordflow">goto</span> error;
<a name="l00411"></a>00411     }
<a name="l00412"></a>00412       <span class="keywordflow">else</span>
<a name="l00413"></a>00413     {
<a name="l00414"></a>00414       digit = 1;
<a name="l00415"></a>00415       
<a name="l00416"></a>00416       <span class="comment">/* We&#39;re past the IP/ASN part */</span>
<a name="l00417"></a>00417       <span class="keywordflow">if</span> (separator)
<a name="l00418"></a>00418         {
<a name="l00419"></a>00419           val *= 10;
<a name="l00420"></a>00420           val += (*p - <span class="charliteral">&#39;0&#39;</span>);
<a name="l00421"></a>00421             }
<a name="l00422"></a>00422     }
<a name="l00423"></a>00423       p++;
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="comment">/* Low digit part must be there. */</span>
<a name="l00427"></a>00427   <span class="keywordflow">if</span> (!digit || !separator)
<a name="l00428"></a>00428     <span class="keywordflow">goto</span> error;
<a name="l00429"></a>00429 
<a name="l00430"></a>00430   <span class="comment">/* Encode result into routing distinguisher.  */</span>
<a name="l00431"></a>00431   <span class="keywordflow">if</span> (dot)
<a name="l00432"></a>00432     {
<a name="l00433"></a>00433       <span class="keywordflow">if</span> (val &gt; <a class="code" href="zebra_8h.html#a3ea490c9b3617d4479bd80ef93cd5602">UINT16_MAX</a>)
<a name="l00434"></a>00434         <span class="keywordflow">goto</span> error;
<a name="l00435"></a>00435       
<a name="l00436"></a>00436       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[0] = <a class="code" href="bgp__ecommunity_8h.html#add3332bd43b2bf6671248d62d7a35d76">ECOMMUNITY_ENCODE_IP</a>;
<a name="l00437"></a>00437       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[1] = 0;
<a name="l00438"></a>00438       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[2], &amp;ip, sizeof (<span class="keyword">struct</span> in_addr));
<a name="l00439"></a>00439       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[6] = (val &gt;&gt; 8) &amp; 0xff;
<a name="l00440"></a>00440       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[7] = val &amp; 0xff;
<a name="l00441"></a>00441     }
<a name="l00442"></a>00442   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (as &gt; <a class="code" href="bgp__aspath_8h.html#a5a3365c8e7924ca85bd9675dc6597908">BGP_AS_MAX</a>)
<a name="l00443"></a>00443     {
<a name="l00444"></a>00444       <span class="keywordflow">if</span> (val &gt; <a class="code" href="zebra_8h.html#a3ea490c9b3617d4479bd80ef93cd5602">UINT16_MAX</a>)
<a name="l00445"></a>00445         <span class="keywordflow">goto</span> error;
<a name="l00446"></a>00446       
<a name="l00447"></a>00447       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[0] = <a class="code" href="bgp__ecommunity_8h.html#a3dcbf837dbbf16fd378107e0eca189c1">ECOMMUNITY_ENCODE_AS4</a>;
<a name="l00448"></a>00448       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[1] = 0;
<a name="l00449"></a>00449       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[2] = (as &gt;&gt;24) &amp; 0xff;
<a name="l00450"></a>00450       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[3] = (as &gt;&gt;16) &amp; 0xff;
<a name="l00451"></a>00451       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[4] = (as &gt;&gt;8) &amp; 0xff;
<a name="l00452"></a>00452       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[5] =  as &amp; 0xff;
<a name="l00453"></a>00453       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[6] = (val &gt;&gt; 8) &amp; 0xff;
<a name="l00454"></a>00454       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[7] = val &amp; 0xff;
<a name="l00455"></a>00455     }
<a name="l00456"></a>00456   <span class="keywordflow">else</span>
<a name="l00457"></a>00457     {
<a name="l00458"></a>00458       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[0] = <a class="code" href="bgp__ecommunity_8h.html#a2a7257f261521fc390fe77823e002f8e">ECOMMUNITY_ENCODE_AS</a>;
<a name="l00459"></a>00459       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[1] = 0;
<a name="l00460"></a>00460       
<a name="l00461"></a>00461       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[2] = (as &gt;&gt;8) &amp; 0xff;
<a name="l00462"></a>00462       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[3] = as &amp; 0xff;
<a name="l00463"></a>00463       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[4] = (val &gt;&gt;24) &amp; 0xff;
<a name="l00464"></a>00464       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[5] = (val &gt;&gt;16) &amp; 0xff;
<a name="l00465"></a>00465       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[6] = (val &gt;&gt;8) &amp; 0xff;
<a name="l00466"></a>00466       eval-&gt;<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[7] = val &amp; 0xff;
<a name="l00467"></a>00467     }
<a name="l00468"></a>00468   *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8af8b32df295bef7efe65453a7f19fc34b">ecommunity_token_val</a>;
<a name="l00469"></a>00469   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00470"></a>00470 
<a name="l00471"></a>00471  error:
<a name="l00472"></a>00472   *token = <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8aac56d87b21b76002951708922564e867">ecommunity_token_unknown</a>;
<a name="l00473"></a>00473   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00474"></a>00474 }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="comment">/* Convert string to extended community attribute. </span>
<a name="l00477"></a>00477 <span class="comment"></span>
<a name="l00478"></a>00478 <span class="comment">   When type is already known, please specify both str and type.  str</span>
<a name="l00479"></a>00479 <span class="comment">   should not include keyword such as &quot;rt&quot; and &quot;soo&quot;.  Type is</span>
<a name="l00480"></a>00480 <span class="comment">   ECOMMUNITY_ROUTE_TARGET or ECOMMUNITY_SITE_ORIGIN.</span>
<a name="l00481"></a>00481 <span class="comment">   keyword_included should be zero.</span>
<a name="l00482"></a>00482 <span class="comment"></span>
<a name="l00483"></a>00483 <span class="comment">   For example route-map&#39;s &quot;set extcommunity&quot; command case:</span>
<a name="l00484"></a>00484 <span class="comment"></span>
<a name="l00485"></a>00485 <span class="comment">   &quot;rt 100:1 100:2 100:3&quot;        -&gt; str = &quot;100:1 100:2 100:3&quot;</span>
<a name="l00486"></a>00486 <span class="comment">                                    type = ECOMMUNITY_ROUTE_TARGET</span>
<a name="l00487"></a>00487 <span class="comment">                                    keyword_included = 0</span>
<a name="l00488"></a>00488 <span class="comment"></span>
<a name="l00489"></a>00489 <span class="comment">   &quot;soo 100:1&quot;                   -&gt; str = &quot;100:1&quot;</span>
<a name="l00490"></a>00490 <span class="comment">                                    type = ECOMMUNITY_SITE_ORIGIN</span>
<a name="l00491"></a>00491 <span class="comment">                                    keyword_included = 0</span>
<a name="l00492"></a>00492 <span class="comment"></span>
<a name="l00493"></a>00493 <span class="comment">   When string includes keyword for each extended community value.</span>
<a name="l00494"></a>00494 <span class="comment">   Please specify keyword_included as non-zero value.</span>
<a name="l00495"></a>00495 <span class="comment"></span>
<a name="l00496"></a>00496 <span class="comment">   For example standard extcommunity-list case:</span>
<a name="l00497"></a>00497 <span class="comment"></span>
<a name="l00498"></a>00498 <span class="comment">   &quot;rt 100:1 rt 100:2 soo 100:1&quot; -&gt; str = &quot;rt 100:1 rt 100:2 soo 100:1&quot;</span>
<a name="l00499"></a>00499 <span class="comment">                                    type = 0</span>
<a name="l00500"></a>00500 <span class="comment">                                    keyword_include = 1</span>
<a name="l00501"></a>00501 <span class="comment">*/</span>
<a name="l00502"></a>00502 <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *
<a name="l00503"></a><a class="code" href="bgp__ecommunity_8h.html#aa75e237fe48f20efd1bdbf21e4ad9a2c">00503</a> <a class="code" href="bgp__ecommunity_8c.html#a6da70afe62091b6c7ead2e602cfc03fd">ecommunity_str2com</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> keyword_included)
<a name="l00504"></a>00504 {
<a name="l00505"></a>00505   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *ecom = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00506"></a>00506   <span class="keyword">enum</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8">ecommunity_token</a> token;
<a name="l00507"></a>00507   <span class="keyword">struct </span><a class="code" href="structecommunity__val.html">ecommunity_val</a> eval;
<a name="l00508"></a>00508   <span class="keywordtype">int</span> keyword = 0;
<a name="l00509"></a>00509 
<a name="l00510"></a>00510   <span class="keywordflow">while</span> ((str = <a class="code" href="bgp__ecommunity_8c.html#a7fa09e5778b96bf677f66c355d5dcad1">ecommunity_gettoken</a> (str, &amp;eval, &amp;token)))
<a name="l00511"></a>00511     {
<a name="l00512"></a>00512       <span class="keywordflow">switch</span> (token)
<a name="l00513"></a>00513     {
<a name="l00514"></a>00514     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">ecommunity_token_rt</a>:
<a name="l00515"></a>00515     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>:
<a name="l00516"></a>00516       <span class="keywordflow">if</span> (! keyword_included || keyword)
<a name="l00517"></a>00517         {
<a name="l00518"></a>00518           <span class="keywordflow">if</span> (ecom)
<a name="l00519"></a>00519         <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (ecom);
<a name="l00520"></a>00520           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00521"></a>00521         }
<a name="l00522"></a>00522       keyword = 1;
<a name="l00523"></a>00523 
<a name="l00524"></a>00524       <span class="keywordflow">if</span> (token == <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8a336bf0600251466caa11483ce5f367f2">ecommunity_token_rt</a>)
<a name="l00525"></a>00525         {
<a name="l00526"></a>00526           type = <a class="code" href="bgp__ecommunity_8h.html#aec21b73c39c6171daf21da2bc83d8b80">ECOMMUNITY_ROUTE_TARGET</a>;
<a name="l00527"></a>00527         }
<a name="l00528"></a>00528       <span class="keywordflow">if</span> (token == <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8ae32d3f9dd7115e536c11bd5bf20f1062">ecommunity_token_soo</a>)
<a name="l00529"></a>00529         {
<a name="l00530"></a>00530           type = <a class="code" href="bgp__ecommunity_8h.html#afc5aa27c7ca7236b4ff369bf01828f73">ECOMMUNITY_SITE_ORIGIN</a>;
<a name="l00531"></a>00531         }
<a name="l00532"></a>00532       <span class="keywordflow">break</span>;
<a name="l00533"></a>00533     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8af8b32df295bef7efe65453a7f19fc34b">ecommunity_token_val</a>:
<a name="l00534"></a>00534       <span class="keywordflow">if</span> (keyword_included)
<a name="l00535"></a>00535         {
<a name="l00536"></a>00536           <span class="keywordflow">if</span> (! keyword)
<a name="l00537"></a>00537         {
<a name="l00538"></a>00538           <span class="keywordflow">if</span> (ecom)
<a name="l00539"></a>00539             <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (ecom);
<a name="l00540"></a>00540           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00541"></a>00541         }
<a name="l00542"></a>00542           keyword = 0;
<a name="l00543"></a>00543         }
<a name="l00544"></a>00544       <span class="keywordflow">if</span> (ecom == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00545"></a>00545         ecom = <a class="code" href="bgp__ecommunity_8c.html#a5c8680e239492bb28a06e48c2bf932da">ecommunity_new</a> ();
<a name="l00546"></a>00546       eval.<a class="code" href="structecommunity__val.html#ae347ea5620815ddb4a9e3f74abd44463">val</a>[1] = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00547"></a>00547       <a class="code" href="bgp__ecommunity_8c.html#a8c077f7bd7bcddb7d1418f3c8a2d9565">ecommunity_add_val</a> (ecom, &amp;eval);
<a name="l00548"></a>00548       <span class="keywordflow">break</span>;
<a name="l00549"></a>00549     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8c.html#a1fe7ebd31a0667bb11e4e2fc062d86b8aac56d87b21b76002951708922564e867">ecommunity_token_unknown</a>:
<a name="l00550"></a>00550     <span class="keywordflow">default</span>:
<a name="l00551"></a>00551       <span class="keywordflow">if</span> (ecom)
<a name="l00552"></a>00552         <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (ecom);
<a name="l00553"></a>00553       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00554"></a>00554     }
<a name="l00555"></a>00555     }
<a name="l00556"></a>00556   <span class="keywordflow">return</span> ecom;
<a name="l00557"></a>00557 }
<a name="l00558"></a>00558 
<a name="l00559"></a>00559 <span class="comment">/* Convert extended community attribute to string.  </span>
<a name="l00560"></a>00560 <span class="comment"></span>
<a name="l00561"></a>00561 <span class="comment">   Due to historical reason of industry standard implementation, there</span>
<a name="l00562"></a>00562 <span class="comment">   are three types of format.</span>
<a name="l00563"></a>00563 <span class="comment"></span>
<a name="l00564"></a>00564 <span class="comment">   route-map set extcommunity format</span>
<a name="l00565"></a>00565 <span class="comment">        &quot;rt 100:1 100:2&quot;</span>
<a name="l00566"></a>00566 <span class="comment">        &quot;soo 100:3&quot;</span>
<a name="l00567"></a>00567 <span class="comment"></span>
<a name="l00568"></a>00568 <span class="comment">   extcommunity-list</span>
<a name="l00569"></a>00569 <span class="comment">        &quot;rt 100:1 rt 100:2 soo 100:3&quot;</span>
<a name="l00570"></a>00570 <span class="comment"></span>
<a name="l00571"></a>00571 <span class="comment">   &quot;show ip bgp&quot; and extcommunity-list regular expression matching</span>
<a name="l00572"></a>00572 <span class="comment">        &quot;RT:100:1 RT:100:2 SoO:100:3&quot;</span>
<a name="l00573"></a>00573 <span class="comment"></span>
<a name="l00574"></a>00574 <span class="comment">   For each formath please use below definition for format:</span>
<a name="l00575"></a>00575 <span class="comment"></span>
<a name="l00576"></a>00576 <span class="comment">   ECOMMUNITY_FORMAT_ROUTE_MAP</span>
<a name="l00577"></a>00577 <span class="comment">   ECOMMUNITY_FORMAT_COMMUNITY_LIST</span>
<a name="l00578"></a>00578 <span class="comment">   ECOMMUNITY_FORMAT_DISPLAY</span>
<a name="l00579"></a>00579 <span class="comment">*/</span>
<a name="l00580"></a>00580 <span class="keywordtype">char</span> *
<a name="l00581"></a><a class="code" href="bgp__ecommunity_8h.html#a1bb2cca537fdd20657d7d6e42c479b3d">00581</a> <a class="code" href="bgp__ecommunity_8c.html#a8ffcee89340db2108bd11edf28852b11">ecommunity_ecom2str</a> (<span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom, <span class="keywordtype">int</span> format)
<a name="l00582"></a>00582 {
<a name="l00583"></a>00583   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00584"></a>00584   u_int8_t *pnt;
<a name="l00585"></a>00585   <span class="keywordtype">int</span> encode = 0;
<a name="l00586"></a>00586   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
<a name="l00587"></a>00587 <span class="preprocessor">#define ECOMMUNITY_STR_DEFAULT_LEN  27</span>
<a name="l00588"></a>00588 <span class="preprocessor"></span>  <span class="keywordtype">int</span> str_size;
<a name="l00589"></a>00589   <span class="keywordtype">int</span> str_pnt;
<a name="l00590"></a>00590   <span class="keywordtype">char</span> *str_buf;
<a name="l00591"></a>00591   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="prefix_8h.html#a6b458105367a186babd858fd008a66be">prefix</a>;
<a name="l00592"></a>00592   <span class="keywordtype">int</span> len = 0;
<a name="l00593"></a>00593   <span class="keywordtype">int</span> first = 1;
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   <span class="comment">/* For parse Extended Community attribute tupple. */</span>
<a name="l00596"></a>00596   <span class="keyword">struct </span>ecommunity_as
<a name="l00597"></a>00597   {
<a name="l00598"></a>00598     <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as;
<a name="l00599"></a>00599     u_int32_t <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00600"></a>00600   } eas;
<a name="l00601"></a>00601 
<a name="l00602"></a>00602   <span class="keyword">struct </span>ecommunity_ip
<a name="l00603"></a>00603   {
<a name="l00604"></a>00604     <span class="keyword">struct </span>in_addr ip;
<a name="l00605"></a>00605     u_int16_t <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00606"></a>00606   } eip;
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="keywordflow">if</span> (ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> == 0)
<a name="l00609"></a>00609     {
<a name="l00610"></a>00610       str_buf = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba88ab42bbd8fb0ec06228f8baf67a3bd6">MTYPE_ECOMMUNITY_STR</a>, 1);
<a name="l00611"></a>00611       str_buf[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00612"></a>00612       <span class="keywordflow">return</span> str_buf;
<a name="l00613"></a>00613     }
<a name="l00614"></a>00614 
<a name="l00615"></a>00615   <span class="comment">/* Prepare buffer.  */</span>
<a name="l00616"></a>00616   str_buf = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba88ab42bbd8fb0ec06228f8baf67a3bd6">MTYPE_ECOMMUNITY_STR</a>, <a class="code" href="bgp__ecommunity_8c.html#a4738cdf6044ba342d530a1d7de371046">ECOMMUNITY_STR_DEFAULT_LEN</a> + 1);
<a name="l00617"></a>00617   str_size = <a class="code" href="bgp__ecommunity_8c.html#a4738cdf6044ba342d530a1d7de371046">ECOMMUNITY_STR_DEFAULT_LEN</a> + 1;
<a name="l00618"></a>00618   str_pnt = 0;
<a name="l00619"></a>00619 
<a name="l00620"></a>00620   <span class="keywordflow">for</span> (i = 0; i &lt; ecom-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
<a name="l00621"></a>00621     {
<a name="l00622"></a>00622       <span class="comment">/* Space between each value.  */</span>
<a name="l00623"></a>00623       <span class="keywordflow">if</span> (! first)
<a name="l00624"></a>00624     str_buf[str_pnt++] = <span class="charliteral">&#39; &#39;</span>;
<a name="l00625"></a>00625 
<a name="l00626"></a>00626       pnt = ecom-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
<a name="l00627"></a>00627 
<a name="l00628"></a>00628       <span class="comment">/* High-order octet of type. */</span>
<a name="l00629"></a>00629       encode = *pnt++;
<a name="l00630"></a>00630       <span class="keywordflow">if</span> (encode != <a class="code" href="bgp__ecommunity_8h.html#a2a7257f261521fc390fe77823e002f8e">ECOMMUNITY_ENCODE_AS</a> &amp;&amp; encode != <a class="code" href="bgp__ecommunity_8h.html#add3332bd43b2bf6671248d62d7a35d76">ECOMMUNITY_ENCODE_IP</a>
<a name="l00631"></a>00631               &amp;&amp; encode != <a class="code" href="bgp__ecommunity_8h.html#a3dcbf837dbbf16fd378107e0eca189c1">ECOMMUNITY_ENCODE_AS4</a>)
<a name="l00632"></a>00632     {
<a name="l00633"></a>00633       len = sprintf (str_buf + str_pnt, <span class="stringliteral">&quot;?&quot;</span>);
<a name="l00634"></a>00634       str_pnt += len;
<a name="l00635"></a>00635       first = 0;
<a name="l00636"></a>00636       <span class="keywordflow">continue</span>;
<a name="l00637"></a>00637     }
<a name="l00638"></a>00638       
<a name="l00639"></a>00639       <span class="comment">/* Low-order octet of type. */</span>
<a name="l00640"></a>00640       type = *pnt++;
<a name="l00641"></a>00641       <span class="keywordflow">if</span> (type !=  <a class="code" href="bgp__ecommunity_8h.html#aec21b73c39c6171daf21da2bc83d8b80">ECOMMUNITY_ROUTE_TARGET</a> &amp;&amp; type != <a class="code" href="bgp__ecommunity_8h.html#afc5aa27c7ca7236b4ff369bf01828f73">ECOMMUNITY_SITE_ORIGIN</a>)
<a name="l00642"></a>00642     {
<a name="l00643"></a>00643       len = sprintf (str_buf + str_pnt, <span class="stringliteral">&quot;?&quot;</span>);
<a name="l00644"></a>00644       str_pnt += len;
<a name="l00645"></a>00645       first = 0;
<a name="l00646"></a>00646       <span class="keywordflow">continue</span>;
<a name="l00647"></a>00647     }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649       <span class="keywordflow">switch</span> (format)
<a name="l00650"></a>00650     {
<a name="l00651"></a>00651     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8h.html#acfff5b888f4007173f66dc1f83ad4e94">ECOMMUNITY_FORMAT_COMMUNITY_LIST</a>:
<a name="l00652"></a>00652       prefix = (type == <a class="code" href="bgp__ecommunity_8h.html#aec21b73c39c6171daf21da2bc83d8b80">ECOMMUNITY_ROUTE_TARGET</a> ? <span class="stringliteral">&quot;rt &quot;</span> : <span class="stringliteral">&quot;soo &quot;</span>);
<a name="l00653"></a>00653       <span class="keywordflow">break</span>;
<a name="l00654"></a>00654     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8h.html#ae776d41484b625ccb00ad109d4965451">ECOMMUNITY_FORMAT_DISPLAY</a>:
<a name="l00655"></a>00655       prefix = (type == <a class="code" href="bgp__ecommunity_8h.html#aec21b73c39c6171daf21da2bc83d8b80">ECOMMUNITY_ROUTE_TARGET</a> ? <span class="stringliteral">&quot;RT:&quot;</span> : <span class="stringliteral">&quot;SoO:&quot;</span>);
<a name="l00656"></a>00656       <span class="keywordflow">break</span>;
<a name="l00657"></a>00657     <span class="keywordflow">case</span> <a class="code" href="bgp__ecommunity_8h.html#ae48e2763a7862e95cd480e85c0295bd9">ECOMMUNITY_FORMAT_ROUTE_MAP</a>:
<a name="l00658"></a>00658       prefix = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00659"></a>00659       <span class="keywordflow">break</span>;
<a name="l00660"></a>00660     <span class="keywordflow">default</span>:
<a name="l00661"></a>00661       prefix = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00662"></a>00662       <span class="keywordflow">break</span>;
<a name="l00663"></a>00663     }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665       <span class="comment">/* Make it sure size is enough.  */</span>
<a name="l00666"></a>00666       <span class="keywordflow">while</span> (str_pnt + <a class="code" href="bgp__ecommunity_8c.html#a4738cdf6044ba342d530a1d7de371046">ECOMMUNITY_STR_DEFAULT_LEN</a> &gt;= str_size)
<a name="l00667"></a>00667     {
<a name="l00668"></a>00668       str_size *= 2;
<a name="l00669"></a>00669       str_buf = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba88ab42bbd8fb0ec06228f8baf67a3bd6">MTYPE_ECOMMUNITY_STR</a>, str_buf, str_size);
<a name="l00670"></a>00670     }
<a name="l00671"></a>00671 
<a name="l00672"></a>00672       <span class="comment">/* Put string into buffer.  */</span>
<a name="l00673"></a>00673       <span class="keywordflow">if</span> (encode == <a class="code" href="bgp__ecommunity_8h.html#a3dcbf837dbbf16fd378107e0eca189c1">ECOMMUNITY_ENCODE_AS4</a>)
<a name="l00674"></a>00674     {
<a name="l00675"></a>00675       eas.as = (*pnt++ &lt;&lt; 24);
<a name="l00676"></a>00676       eas.as |= (*pnt++ &lt;&lt; 16);
<a name="l00677"></a>00677       eas.as |= (*pnt++ &lt;&lt; 8);
<a name="l00678"></a>00678       eas.as |= (*pnt++);
<a name="l00679"></a>00679 
<a name="l00680"></a>00680       eas.val = (*pnt++ &lt;&lt; 8);
<a name="l00681"></a>00681       eas.val |= (*pnt++);
<a name="l00682"></a>00682 
<a name="l00683"></a>00683       len = sprintf( str_buf + str_pnt, <span class="stringliteral">&quot;%s%u:%d&quot;</span>, prefix,
<a name="l00684"></a>00684                         eas.as, eas.val );
<a name="l00685"></a>00685       str_pnt += len;
<a name="l00686"></a>00686       first = 0;
<a name="l00687"></a>00687     }
<a name="l00688"></a>00688       <span class="keywordflow">if</span> (encode == <a class="code" href="bgp__ecommunity_8h.html#a2a7257f261521fc390fe77823e002f8e">ECOMMUNITY_ENCODE_AS</a>)
<a name="l00689"></a>00689     {
<a name="l00690"></a>00690       eas.as = (*pnt++ &lt;&lt; 8);
<a name="l00691"></a>00691       eas.as |= (*pnt++);
<a name="l00692"></a>00692 
<a name="l00693"></a>00693       eas.val = (*pnt++ &lt;&lt; 24);
<a name="l00694"></a>00694       eas.val |= (*pnt++ &lt;&lt; 16);
<a name="l00695"></a>00695       eas.val |= (*pnt++ &lt;&lt; 8);
<a name="l00696"></a>00696       eas.val |= (*pnt++);
<a name="l00697"></a>00697 
<a name="l00698"></a>00698       len = sprintf (str_buf + str_pnt, <span class="stringliteral">&quot;%s%u:%d&quot;</span>, prefix,
<a name="l00699"></a>00699              eas.as, eas.val);
<a name="l00700"></a>00700       str_pnt += len;
<a name="l00701"></a>00701       first = 0;
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (encode == <a class="code" href="bgp__ecommunity_8h.html#add3332bd43b2bf6671248d62d7a35d76">ECOMMUNITY_ENCODE_IP</a>)
<a name="l00704"></a>00704     {
<a name="l00705"></a>00705       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;eip.ip, pnt, 4);
<a name="l00706"></a>00706       pnt += 4;
<a name="l00707"></a>00707       eip.val = (*pnt++ &lt;&lt; 8);
<a name="l00708"></a>00708       eip.val |= (*pnt++);
<a name="l00709"></a>00709 
<a name="l00710"></a>00710       len = sprintf (str_buf + str_pnt, <span class="stringliteral">&quot;%s%s:%d&quot;</span>, prefix,
<a name="l00711"></a>00711              inet_ntoa (eip.ip), eip.val);
<a name="l00712"></a>00712       str_pnt += len;
<a name="l00713"></a>00713       first = 0;
<a name="l00714"></a>00714     }
<a name="l00715"></a>00715     }
<a name="l00716"></a>00716   <span class="keywordflow">return</span> str_buf;
<a name="l00717"></a>00717 }
<a name="l00718"></a>00718 
<a name="l00719"></a>00719 <span class="keywordtype">int</span>
<a name="l00720"></a><a class="code" href="bgp__ecommunity_8h.html#afee1bdfd1ae2759ddcecc45ece967cdb">00720</a> <a class="code" href="bgp__ecommunity_8c.html#a492220e57649c8ea7c1ef5dc4656b1f7">ecommunity_match</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom1, 
<a name="l00721"></a>00721                   <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structecommunity.html">ecommunity</a> *ecom2)
<a name="l00722"></a>00722 {
<a name="l00723"></a>00723   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00724"></a>00724   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a> = 0;
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   <span class="keywordflow">if</span> (ecom1 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; ecom2 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00727"></a>00727     <span class="keywordflow">return</span> 1;
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <span class="keywordflow">if</span> (ecom1 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || ecom2 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00730"></a>00730     <span class="keywordflow">return</span> 0;
<a name="l00731"></a>00731 
<a name="l00732"></a>00732   <span class="keywordflow">if</span> (ecom1-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> &lt; ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>)
<a name="l00733"></a>00733     <span class="keywordflow">return</span> 0;
<a name="l00734"></a>00734 
<a name="l00735"></a>00735   <span class="comment">/* Every community on com2 needs to be on com1 for this to match */</span>
<a name="l00736"></a>00736   <span class="keywordflow">while</span> (i &lt; ecom1-&gt;size &amp;&amp; j &lt; ecom2-&gt;size)
<a name="l00737"></a>00737     {
<a name="l00738"></a>00738       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (ecom1-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + i, ecom2-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + j, <a class="code" href="bgp__ecommunity_8h.html#a54885db56ce5049e450fc8ea15bfbed8">ECOMMUNITY_SIZE</a>) == 0)
<a name="l00739"></a>00739         j++;
<a name="l00740"></a>00740       i++;
<a name="l00741"></a>00741     }
<a name="l00742"></a>00742 
<a name="l00743"></a>00743   <span class="keywordflow">if</span> (j == ecom2-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>)
<a name="l00744"></a>00744     <span class="keywordflow">return</span> 1;
<a name="l00745"></a>00745   <span class="keywordflow">else</span>
<a name="l00746"></a>00746     <span class="keywordflow">return</span> 0;
<a name="l00747"></a>00747 }
<a name="l00748"></a>00748 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__ecommunity_8c.html">bgp_ecommunity.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
