<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/irdp_main.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('irdp__main_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/irdp_main.c</div>  </div>
</div>
<div class="contents">
<a href="irdp__main_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> *</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2000  Robert Olsson.</span>
<a name="l00004"></a>00004 <span class="comment"> * Swedish University of Agricultural Sciences</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00009"></a>00009 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00010"></a>00010 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00011"></a>00011 <span class="comment"> * later version.</span>
<a name="l00012"></a>00012 <span class="comment"> *</span>
<a name="l00013"></a>00013 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> *</span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00020"></a>00020 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00021"></a>00021 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">/* </span>
<a name="l00025"></a>00025 <span class="comment"> * This work includes work with the following copywrite:</span>
<a name="l00026"></a>00026 <span class="comment"> *</span>
<a name="l00027"></a>00027 <span class="comment"> * Copyright (C) 1997, 2000 Kunihiro Ishiguro</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> */</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">/* </span>
<a name="l00032"></a>00032 <span class="comment"> * Thanks to Jens Låås at Swedish University of Agricultural Sciences</span>
<a name="l00033"></a>00033 <span class="comment"> * for reviewing and tests.</span>
<a name="l00034"></a>00034 <span class="comment"> */</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#ifdef HAVE_IRDP</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="sockopt_8h.html">sockopt.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ioctl_8h.html">ioctl.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="connected_8h.html">connected.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="zclient_8h.html">zclient.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="rtadv_8h.html">zebra/rtadv.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="redistribute_8h.html">zebra/redistribute.h</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="irdp_8h.html">zebra/irdp.h</a>&quot;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &lt;netinet/ip_icmp.h&gt;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="preprocessor">#include &quot;<a class="code" href="checksum_8h.html">checksum.h</a>&quot;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00065"></a>00065 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00066"></a>00066 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">/* GLOBAL VARS */</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">/* Master of threads. */</span>
<a name="l00073"></a>00073 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00074"></a>00074 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *t_irdp_raw;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">/* Timer interval of irdp. */</span>
<a name="l00077"></a>00077 <span class="keywordtype">int</span> irdp_timer_interval = <a class="code" href="irdp_8h.html#a2bc6a99aedf914acf7b536bb40bef7c0">IRDP_DEFAULT_INTERVAL</a>;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 <span class="keywordtype">int</span>
<a name="l00080"></a>00080 <a class="code" href="irdp_8h.html#ad5e2fff01c32231dfdbda84ab716581a">irdp_sock_init</a> (<span class="keywordtype">void</span>)
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082   <span class="keywordtype">int</span> ret, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00083"></a>00083   <span class="keywordtype">int</span> save_errno;
<a name="l00084"></a>00084   <span class="keywordtype">int</span> sock;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>) )
<a name="l00087"></a>00087        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;irdp_sock_init: could not raise privs, %s&quot;</span>,
<a name="l00088"></a>00088                   <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno) );
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   sock = socket (AF_INET, SOCK_RAW, IPPROTO_ICMP);
<a name="l00091"></a>00091   save_errno = errno;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>) )
<a name="l00094"></a>00094        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;irdp_sock_init: could not lower privs, %s&quot;</span>,
<a name="l00095"></a>00095              <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno) );
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="keywordflow">if</span> (sock &lt; 0) {
<a name="l00098"></a>00098     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;IRDP: can&#39;t create irdp socket %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00099"></a>00099     <span class="keywordflow">return</span> sock;
<a name="l00100"></a>00100   };
<a name="l00101"></a>00101   
<a name="l00102"></a>00102   i = 1;
<a name="l00103"></a>00103   ret = setsockopt (sock, IPPROTO_IP, IP_TTL, 
<a name="l00104"></a>00104                         (<span class="keywordtype">void</span> *) &amp;i, <span class="keyword">sizeof</span> (i));
<a name="l00105"></a>00105   <span class="keywordflow">if</span> (ret &lt; 0) {
<a name="l00106"></a>00106     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;IRDP: can&#39;t do irdp sockopt %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00107"></a>00107     close(sock);
<a name="l00108"></a>00108     <span class="keywordflow">return</span> ret;
<a name="l00109"></a>00109   };
<a name="l00110"></a>00110   
<a name="l00111"></a>00111   ret = <a class="code" href="sockopt_8c.html#a892470b0232aca4e68e88117d2cb46ed">setsockopt_ifindex</a> (AF_INET, sock, 1);
<a name="l00112"></a>00112   <span class="keywordflow">if</span> (ret &lt; 0) {
<a name="l00113"></a>00113     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;IRDP: can&#39;t do irdp sockopt %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00114"></a>00114     close(sock);
<a name="l00115"></a>00115     <span class="keywordflow">return</span> ret;
<a name="l00116"></a>00116   };
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   t_irdp_raw = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="irdp_8h.html#a57dba503931bce6ecede03a01126bb0d">irdp_read_raw</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock); 
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="keywordflow">return</span> sock;
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00125"></a>00125 get_pref(<span class="keyword">struct</span> <a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00128"></a>00128   <span class="keyword">struct </span><a class="code" href="structAdv.html">Adv</a> *adv;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="comment">/* Use default preference or use the override pref */</span>
<a name="l00131"></a>00131   
<a name="l00132"></a>00132   <span class="keywordflow">if</span>( irdp-&gt;<a class="code" href="structirdp__interface.html#a9ba17cd375749856e370822749a66364">AdvPrefList</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
<a name="l00133"></a>00133     <span class="keywordflow">return</span> irdp-&gt;<a class="code" href="structirdp__interface.html#ad6feb0430cb4e0175fc67b8d2c46695f">Preference</a>;
<a name="l00134"></a>00134   
<a name="l00135"></a>00135   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (irdp-&gt;<a class="code" href="structirdp__interface.html#a9ba17cd375749856e370822749a66364">AdvPrefList</a>, node, adv))
<a name="l00136"></a>00136     <span class="keywordflow">if</span>( p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr == adv-&gt;<a class="code" href="structAdv.html#a20684e70dcdb4f2ce577d745b44f5b5e">ip</a>.s_addr )
<a name="l00137"></a>00137       <span class="keywordflow">return</span> adv-&gt;<a class="code" href="structAdv.html#aa71dbbf6ccaf5dc0b2188fc13cd81203">pref</a>;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="keywordflow">return</span> irdp-&gt;<a class="code" href="structirdp__interface.html#ad6feb0430cb4e0175fc67b8d2c46695f">Preference</a>;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="comment">/* Make ICMP Router Advertisement Message. */</span>
<a name="l00143"></a>00143 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00144"></a>00144 make_advertisement_packet (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, 
<a name="l00145"></a>00145                <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p,
<a name="l00146"></a>00146                <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi=ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00149"></a>00149   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp=&amp;zi-&gt;irdp;
<a name="l00150"></a>00150   <span class="keywordtype">int</span> size;
<a name="l00151"></a>00151   <span class="keywordtype">int</span> pref;
<a name="l00152"></a>00152   u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154   pref =  get_pref(irdp, p);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="irdp_8h.html#a378e8c9e15b519665b52161df53eea56">ICMP_ROUTERADVERT</a>); <span class="comment">/* Type. */</span>
<a name="l00157"></a>00157   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Code. */</span>
<a name="l00158"></a>00158   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);       <span class="comment">/* Checksum. */</span>
<a name="l00159"></a>00159   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);       <span class="comment">/* Num address. */</span>
<a name="l00160"></a>00160   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 2);       <span class="comment">/* Address Entry Size. */</span>
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#adfdb4deb2ff2361ef5155b8a723a2a71">IF_SHUTDOWN</a>)  
<a name="l00163"></a>00163     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00164"></a>00164   <span class="keywordflow">else</span> 
<a name="l00165"></a>00165     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, irdp-&gt;<a class="code" href="structirdp__interface.html#a6191977db97705a111471b1d8121d294">Lifetime</a>);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, htonl(p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr)); <span class="comment">/* Router address. */</span>
<a name="l00168"></a>00168   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, pref);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="comment">/* in_cksum return network byte order value */</span>
<a name="l00171"></a>00171   size = 16;
<a name="l00172"></a>00172   checksum = <a class="code" href="checksum_8c.html#afd7d8e31fdd7d500d89ee477149e95fd">in_cksum</a> (s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, size);
<a name="l00173"></a>00173   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 2, htons(checksum));
<a name="l00174"></a>00174 
<a name="l00175"></a>00175   <span class="keywordflow">return</span> size;
<a name="l00176"></a>00176 }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00179"></a>00179 irdp_send(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *s)
<a name="l00180"></a>00180 {
<a name="l00181"></a>00181   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi=ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00182"></a>00182   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp=&amp;zi-&gt;irdp;
<a name="l00183"></a>00183   u_int32_t dst;
<a name="l00184"></a>00184   u_int32_t ttl=1;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="keywordflow">if</span> (! (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; IFF_UP)) <span class="keywordflow">return</span>; 
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#a1919bcbd3897b1292bb651072821ff0e">IF_BROADCAST</a>) 
<a name="l00189"></a>00189     dst =INADDR_BROADCAST ;
<a name="l00190"></a>00190   <span class="keywordflow">else</span> 
<a name="l00191"></a>00191     dst = htonl(<a class="code" href="irdp_8h.html#a112cc4cb9eae716e77d9466c30512739">INADDR_ALLHOSTS_GROUP</a>);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#a01e296fff96c0fbfaa5f8ee45017ca4b">IF_DEBUG_MESSAGES</a>) 
<a name="l00194"></a>00194     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;IRDP: TX Advert on %s %s/%d Holdtime=%d Preference=%d&quot;</span>, 
<a name="l00195"></a>00195           ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l00196"></a>00196           inet_ntoa(p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), 
<a name="l00197"></a>00197           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l00198"></a>00198           irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#adfdb4deb2ff2361ef5155b8a723a2a71">IF_SHUTDOWN</a>? 0 : irdp-&gt;<a class="code" href="structirdp__interface.html#a6191977db97705a111471b1d8121d294">Lifetime</a>,
<a name="l00199"></a>00199           get_pref(irdp, p));
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <a class="code" href="irdp_8h.html#a41b082463f3c6a45be4f645061845ebe">send_packet</a> (ifp, s, dst, p, ttl);
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="keyword">static</span> <span class="keywordtype">void</span> irdp_advertisement (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00205"></a>00205 {
<a name="l00206"></a>00206   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00207"></a>00207   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (128);
<a name="l00208"></a>00208   make_advertisement_packet (ifp, p, s);
<a name="l00209"></a>00209   irdp_send(ifp, p, s);
<a name="l00210"></a>00210   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l00211"></a>00211 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keywordtype">int</span> <a class="code" href="irdp_8h.html#a5cbc02635e115ae58c8238ea2ae3449d">irdp_send_thread</a>(<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t_advert)
<a name="l00214"></a>00214 {
<a name="l00215"></a>00215   u_int32_t <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>, tmp;
<a name="l00216"></a>00216   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t_advert);
<a name="l00217"></a>00217   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi=ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00218"></a>00218   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp=&amp;zi-&gt;irdp;
<a name="l00219"></a>00219   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00220"></a>00220   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00221"></a>00221   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp;= ~<a class="code" href="irdp_8h.html#a6e3161e6a16b51ba4d4171f2a1d31916">IF_SOLICIT</a>;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="keywordflow">if</span>(ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>) 
<a name="l00226"></a>00226     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, ifc))
<a name="l00227"></a>00227       {
<a name="l00228"></a>00228         p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00229"></a>00229         
<a name="l00230"></a>00230         <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET)
<a name="l00231"></a>00231           <span class="keywordflow">continue</span>;
<a name="l00232"></a>00232         
<a name="l00233"></a>00233         irdp_advertisement(ifp, p);
<a name="l00234"></a>00234         irdp-&gt;<a class="code" href="structirdp__interface.html#a264a9bdf00b058b4eb504158e800f311">irdp_sent</a>++;
<a name="l00235"></a>00235       }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   tmp = irdp-&gt;<a class="code" href="structirdp__interface.html#a6d4896a50b601db3bc66ed519cb25997">MaxAdvertInterval</a>-irdp-&gt;<a class="code" href="structirdp__interface.html#ac18909c72e5c8f05ac614050a5748a89">MinAdvertInterval</a>;
<a name="l00238"></a>00238   timer =  (random () % tmp ) + 1;
<a name="l00239"></a>00239   timer = irdp-&gt;<a class="code" href="structirdp__interface.html#ac18909c72e5c8f05ac614050a5748a89">MinAdvertInterval</a> + <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#a264a9bdf00b058b4eb504158e800f311">irdp_sent</a> &lt;  <a class="code" href="irdp_8h.html#af98bb5473ef17a987d2377c81c9af234">MAX_INITIAL_ADVERTISEMENTS</a> &amp;&amp;
<a name="l00242"></a>00242      timer &gt; <a class="code" href="irdp_8h.html#a6c37d5bdbb054e236fbe6635dadbaaae">MAX_INITIAL_ADVERT_INTERVAL</a> ) 
<a name="l00243"></a>00243       timer= <a class="code" href="irdp_8h.html#a6c37d5bdbb054e236fbe6635dadbaaae">MAX_INITIAL_ADVERT_INTERVAL</a>;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#ac51952dd0e6297aa85ef238395a63e31">IF_DEBUG_MISC</a>)
<a name="l00246"></a>00246     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;IRDP: New timer for %s set to %u\n&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, timer);
<a name="l00247"></a>00247 
<a name="l00248"></a>00248   irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a>(<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="irdp_8h.html#a5cbc02635e115ae58c8238ea2ae3449d">irdp_send_thread</a>, ifp, timer);
<a name="l00249"></a>00249   <span class="keywordflow">return</span> 0;
<a name="l00250"></a>00250 }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="keywordtype">void</span> <a class="code" href="irdp_8h.html#a154bd5193f1a6f1e374f0893fe2f1c91">irdp_advert_off</a>(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00253"></a>00253 {
<a name="l00254"></a>00254   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi=ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00255"></a>00255   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp=&amp;zi-&gt;irdp;
<a name="l00256"></a>00256   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00257"></a>00257   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00258"></a>00258   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00259"></a>00259   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00260"></a>00260 
<a name="l00261"></a>00261   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a>)  <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a>(irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a>);
<a name="l00262"></a>00262   irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00263"></a>00263   
<a name="l00264"></a>00264   <span class="keywordflow">if</span>(ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>) 
<a name="l00265"></a>00265     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, ifc))
<a name="l00266"></a>00266       {
<a name="l00267"></a>00267         p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         <span class="comment">/* Output some packets with Lifetime 0 </span>
<a name="l00270"></a>00270 <span class="comment">           we should add a wait...</span>
<a name="l00271"></a>00271 <span class="comment">        */</span>
<a name="l00272"></a>00272 
<a name="l00273"></a>00273         <span class="keywordflow">for</span>(i=0; i&lt; <a class="code" href="irdp_8h.html#a14d6755f12a646db237a4ac1b1a72459">IRDP_LAST_ADVERT_MESSAGES</a>; i++) 
<a name="l00274"></a>00274           {
<a name="l00275"></a>00275             irdp-&gt;<a class="code" href="structirdp__interface.html#a264a9bdf00b058b4eb504158e800f311">irdp_sent</a>++;
<a name="l00276"></a>00276             irdp_advertisement(ifp, p);
<a name="l00277"></a>00277           }
<a name="l00278"></a>00278       }
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="keywordtype">void</span> <a class="code" href="irdp_8h.html#aa0da7f8d086828e23a521962b5733713">process_solicit</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00283"></a>00283 {
<a name="l00284"></a>00284   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi=ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00285"></a>00285   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp=&amp;zi-&gt;irdp;
<a name="l00286"></a>00286   u_int32_t <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   <span class="comment">/* When SOLICIT is active we reject further incoming solicits </span>
<a name="l00289"></a>00289 <span class="comment">     this keeps down the answering rate so we don&#39;t have think</span>
<a name="l00290"></a>00290 <span class="comment">     about DoS attacks here. */</span>
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="keywordflow">if</span>( irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#a6e3161e6a16b51ba4d4171f2a1d31916">IF_SOLICIT</a>) <span class="keywordflow">return</span>;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294   irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> |= <a class="code" href="irdp_8h.html#a6e3161e6a16b51ba4d4171f2a1d31916">IF_SOLICIT</a>;
<a name="l00295"></a>00295   <span class="keywordflow">if</span>(irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a>)  <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a>(irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a>);
<a name="l00296"></a>00296   irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   timer =  (random () % <a class="code" href="irdp_8h.html#aef6cd2d513ab0c858861c94e06c4b8e9">MAX_RESPONSE_DELAY</a>) + 1;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   irdp-&gt;<a class="code" href="structirdp__interface.html#a0407cafbdf99f5ffeb7afefcab968434">t_advertise</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a>(<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, 
<a name="l00301"></a>00301                        <a class="code" href="irdp_8h.html#a5cbc02635e115ae58c8238ea2ae3449d">irdp_send_thread</a>, 
<a name="l00302"></a>00302                        ifp, 
<a name="l00303"></a>00303                        timer);
<a name="l00304"></a>00304 }
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="keywordtype">void</span> <a class="code" href="irdp_8h.html#a3d965bfa2322ccd12348227b2d92dd12">irdp_finish</a>()
<a name="l00307"></a>00307 {
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00310"></a>00310   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00311"></a>00311   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zi;
<a name="l00312"></a>00312   <span class="keyword">struct </span><a class="code" href="structirdp__interface.html">irdp_interface</a> *irdp;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;IRDP: Received shutdown notification.&quot;</span>);
<a name="l00315"></a>00315   
<a name="l00316"></a>00316   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
<a name="l00317"></a>00317     {
<a name="l00318"></a>00318       zi = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00319"></a>00319       
<a name="l00320"></a>00320       <span class="keywordflow">if</span> (!zi) 
<a name="l00321"></a>00321         <span class="keywordflow">continue</span>;
<a name="l00322"></a>00322       irdp = &amp;zi-&gt;irdp;
<a name="l00323"></a>00323       <span class="keywordflow">if</span> (!irdp) 
<a name="l00324"></a>00324         <span class="keywordflow">continue</span>;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326       <span class="keywordflow">if</span> (irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> &amp; <a class="code" href="irdp_8h.html#a0c4695e17aaa65f9b0ca6de343b3ddc3">IF_ACTIVE</a> ) 
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328       irdp-&gt;<a class="code" href="structirdp__interface.html#af2621e1d5348c8b60c941c4f31594e0a">flags</a> |= <a class="code" href="irdp_8h.html#adfdb4deb2ff2361ef5155b8a723a2a71">IF_SHUTDOWN</a>;
<a name="l00329"></a>00329       <a class="code" href="irdp_8h.html#a154bd5193f1a6f1e374f0893fe2f1c91">irdp_advert_off</a>(ifp);
<a name="l00330"></a>00330         }
<a name="l00331"></a>00331     }
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IRDP */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="irdp__main_8c.html">irdp_main.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
