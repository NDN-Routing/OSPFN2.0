<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rt_ioctl.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rt__ioctl_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">zebra/rt_ioctl.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zserv_8h_source.html">zebra/zserv.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rib_8h_source.html">zebra/rib.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="debug_8h_source.html">zebra/debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rt_8h_source.html">zebra/rt.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for rt_ioctl.c:</div>
<div class="dyncontent">
<div class="center"><img src="rt__ioctl_8c__incl.png" border="0" usemap="#zebra_2rt__ioctl_8c" alt=""/></div>
<map name="zebra_2rt__ioctl_8c" id="zebra_2rt__ioctl_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1443,80,1509,107"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="2893,229,2960,256"/><area shape="rect" id="node65" href="log_8h.html" title="log.h" alt="" coords="2765,80,2816,107"/><area shape="rect" id="node68" href="if_8h.html" title="if.h" alt="" coords="3041,155,3081,181"/><area shape="rect" id="node72" href="zserv_8h.html" title="zebra/zserv.h" alt="" coords="3103,80,3204,107"/><area shape="rect" id="node74" href="rib_8h.html" title="rib.h" alt="" coords="2903,155,2951,181"/><area shape="rect" id="node81" href="debug_8h.html" title="zebra/debug.h" alt="" coords="3229,80,3336,107"/><area shape="rect" id="node83" href="rt_8h.html" title="zebra/rt.h" alt="" coords="2949,80,3027,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="816,155,893,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="918,155,967,181"/><area shape="rect" id="node63" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2880,304,2973,331"/><area shape="rect" id="node70" href="linklist_8h.html" title="linklist.h" alt="" coords="3026,229,3096,256"/><area shape="rect" id="node78" href="workqueue_8h.html" title="workqueue.h" alt="" coords="3106,155,3205,181"/></map>
</div>
</div>
<p><a href="rt__ioctl_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#a0dbe43a64cbf994bf9189e7767f93342">kernel_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#a54c9eb9ac2fbe371db6478c1829f1418">kernel_read</a> (int sock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#a0e4895dfc69189d5b8669ae7495a0d16">kernel_add_route</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *dest, struct in_addr *gate, int index, int <a class="el" href="structflags.html">flags</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#aa4d28c8a810b7295d595c7a0e14c6398">kernel_ioctl_ipv4</a> (u_long cmd, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, int family)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#afea56d96d08fd5aab1d8e506cd4b25c0">kernel_add_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__ioctl_8c.html#af2913f44f44cac8461b82b362ebbe986">kernel_delete_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="afea56d96d08fd5aab1d8e506cd4b25c0"></a><!-- doxytag: member="rt_ioctl.c::kernel_add_ipv4" ref="afea56d96d08fd5aab1d8e506cd4b25c0" args="(struct prefix *p, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00340">340</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__ioctl_8c.html#aa4d28c8a810b7295d595c7a0e14c6398">kernel_ioctl_ipv4</a> (SIOCADDRT, p, rib, AF_INET);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0e4895dfc69189d5b8669ae7495a0d16"></a><!-- doxytag: member="rt_ioctl.c::kernel_add_route" ref="a0e4895dfc69189d5b8669ae7495a0d16" args="(struct prefix_ipv4 *dest, struct in_addr *gate, int index, int flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_add_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00067">67</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
  <span class="keyword">struct </span>rtentry rtentry;
  <span class="keyword">struct </span>sockaddr_in sin_dest, sin_mask, sin_gate;

  memset (&amp;rtentry, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtentry));

  <span class="comment">/* Make destination. */</span>
  memset (&amp;sin_dest, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  sin_dest.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>  sin_dest.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
  sin_dest.sin_addr = dest-&gt;prefix;

  <span class="comment">/* Make gateway. */</span>
  <span class="keywordflow">if</span> (gate)
    {
      memset (&amp;sin_gate, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
      sin_gate.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>      sin_gate.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
      sin_gate.sin_addr = *gate;
    }

  memset (&amp;sin_mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  sin_mask.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>      sin_gate.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (dest-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;sin_mask.sin_addr);

  <span class="comment">/* Set destination address, mask and gateway.*/</span>
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_dst, &amp;sin_dest, sizeof (<span class="keyword">struct</span> sockaddr_in));
  <span class="keywordflow">if</span> (gate)
    <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_gateway, &amp;sin_gate, sizeof (<span class="keyword">struct</span> sockaddr_in));
<span class="preprocessor">#ifndef SUNOS_5</span>
<span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_genmask, &amp;sin_mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>

  <span class="comment">/* Routing entry flag set. */</span>
  <span class="keywordflow">if</span> (dest-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> == 32)
    rtentry.rt_flags |= RTF_HOST;

  <span class="keywordflow">if</span> (gate &amp;&amp; gate-&gt;s_addr != INADDR_ANY)
    rtentry.rt_flags |= RTF_GATEWAY;

  rtentry.rt_flags |= RTF_UP;

  <span class="comment">/* Additional flags */</span>
  rtentry.rt_flags |= <a class="code" href="structflags.html">flags</a>;


  <span class="comment">/* For tagging route. */</span>
  <span class="comment">/* rtentry.rt_flags |= RTF_DYNAMIC; */</span>

  <span class="comment">/* Open socket for ioctl. */</span>
  sock = socket (AF_INET, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t make socket\n&quot;</span>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Send message by ioctl(). */</span>
  ret = ioctl (sock, SIOCADDRT, &amp;rtentry);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="keywordflow">switch</span> (errno) 
    {
    <span class="keywordflow">case</span> EEXIST:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a0a0de38e97fdf5982db3089fbd2f5390">ZEBRA_ERR_RTEXIST</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> ENETUNREACH:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#abc4674f17b06a1504d045b9024d786eb">ZEBRA_ERR_RTUNREACH</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> EPERM:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a687118019065da5a34e06d98d56eb714">ZEBRA_ERR_EPERM</a>;
      <span class="keywordflow">break</span>;
    }

      close (sock);
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;write : %s (%d)&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno), errno);
      <span class="keywordflow">return</span> 1;
    }
  close (sock);

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af2913f44f44cac8461b82b362ebbe986"></a><!-- doxytag: member="rt_ioctl.c::kernel_delete_ipv4" ref="af2913f44f44cac8461b82b362ebbe986" args="(struct prefix *p, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00346">346</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__ioctl_8c.html#aa4d28c8a810b7295d595c7a0e14c6398">kernel_ioctl_ipv4</a> (SIOCDELRT, p, rib, AF_INET);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0dbe43a64cbf994bf9189e7767f93342"></a><!-- doxytag: member="rt_ioctl.c::kernel_init" ref="a0dbe43a64cbf994bf9189e7767f93342" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void kernel_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00037">37</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa4d28c8a810b7295d595c7a0e14c6398"></a><!-- doxytag: member="rt_ioctl.c::kernel_ioctl_ipv4" ref="aa4d28c8a810b7295d595c7a0e14c6398" args="(u_long cmd, struct prefix *p, struct rib *rib, int family)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int kernel_ioctl_ipv4 </td>
          <td>(</td>
          <td class="paramtype">u_long&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>family</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00166">166</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
  <span class="keyword">struct </span>rtentry rtentry;
  <span class="keyword">struct </span>sockaddr_in sin_dest, sin_mask, sin_gate;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keywordtype">int</span> nexthop_num = 0;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  memset (&amp;rtentry, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtentry));

  <span class="comment">/* Make destination. */</span>
  memset (&amp;sin_dest, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  sin_dest.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>  sin_dest.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
  sin_dest.sin_addr = p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rtentry.rt_flags, RTF_REJECT);

      <span class="keywordflow">if</span> (cmd == SIOCADDRT)
    <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

      <span class="keywordflow">goto</span> skip;
    }

  memset (&amp;sin_gate, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));

  <span class="comment">/* Make gateway. */</span>
  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    {
      <span class="keywordflow">if</span> ((cmd == SIOCADDRT 
       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
      || (cmd == SIOCDELRT
          &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
        {
          <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a> ||
          nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
        {
          sin_gate.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>          sin_gate.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
          sin_gate.sin_addr = nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;
          rtentry.rt_flags |= RTF_GATEWAY;
        }
          <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
          || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
        {
          ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
          <span class="keywordflow">if</span> (ifp)
            rtentry.rt_dev = ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>;
          <span class="keywordflow">else</span>
            <span class="keywordflow">return</span> -1;
        }
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a> ||
          nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
        {
          sin_gate.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>          sin_gate.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
          sin_gate.sin_addr = nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;
          rtentry.rt_flags |= RTF_GATEWAY;
        }
          <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
          || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
        {
          ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
          <span class="keywordflow">if</span> (ifp)
            rtentry.rt_dev = ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>;
          <span class="keywordflow">else</span>
            <span class="keywordflow">return</span> -1;
        }
        }

      <span class="keywordflow">if</span> (cmd == SIOCADDRT)
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

      nexthop_num++;
      <span class="keywordflow">break</span>;
    }
    }

  <span class="comment">/* If there is no useful nexthop then return. */</span>
  <span class="keywordflow">if</span> (nexthop_num == 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath(): No useful nexthop.&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

 skip:

  memset (&amp;sin_mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  sin_mask.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>  sin_mask.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;sin_mask.sin_addr);

  <span class="comment">/* Set destination address, mask and gateway.*/</span>
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_dst, &amp;sin_dest, sizeof (<span class="keyword">struct</span> sockaddr_in));

  <span class="keywordflow">if</span> (rtentry.rt_flags &amp; RTF_GATEWAY)
    <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_gateway, &amp;sin_gate, sizeof (<span class="keyword">struct</span> sockaddr_in));

<span class="preprocessor">#ifndef SUNOS_5</span>
<span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rtentry.rt_genmask, &amp;sin_mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>

  <span class="comment">/* Metric.  It seems metric minus one value is installed... */</span>
  rtentry.rt_metric = rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>;

  <span class="comment">/* Routing entry flag set. */</span>
  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == 32)
    rtentry.rt_flags |= RTF_HOST;

  rtentry.rt_flags |= RTF_UP;

  <span class="comment">/* Additional flags */</span>
  <span class="comment">/* rtentry.rt_flags |= flags; */</span>

  <span class="comment">/* For tagging route. */</span>
  <span class="comment">/* rtentry.rt_flags |= RTF_DYNAMIC; */</span>

  <span class="comment">/* Open socket for ioctl. */</span>
  sock = socket (AF_INET, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t make socket\n&quot;</span>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Send message by ioctl(). */</span>
  ret = ioctl (sock, cmd, &amp;rtentry);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="keywordflow">switch</span> (errno) 
    {
    <span class="keywordflow">case</span> EEXIST:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a0a0de38e97fdf5982db3089fbd2f5390">ZEBRA_ERR_RTEXIST</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> ENETUNREACH:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#abc4674f17b06a1504d045b9024d786eb">ZEBRA_ERR_RTUNREACH</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> EPERM:
      close (sock);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a687118019065da5a34e06d98d56eb714">ZEBRA_ERR_EPERM</a>;
      <span class="keywordflow">break</span>;
    }

      close (sock);
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;write : %s (%d)&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno), errno);
      <span class="keywordflow">return</span> ret;
    }
  close (sock);

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a54c9eb9ac2fbe371db6478c1829f1418"></a><!-- doxytag: member="rt_ioctl.c::kernel_read" ref="a54c9eb9ac2fbe371db6478c1829f1418" args="(int sock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void kernel_read </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__ioctl_8c_source.html#l00044">44</a> of file <a class="el" href="rt__ioctl_8c_source.html">rt_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rt__ioctl_8c.html">rt_ioctl.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:38 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
