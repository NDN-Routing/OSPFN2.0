<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ripngd/ripng_peer.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ripng__peer_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ripngd/ripng_peer.c</div>  </div>
</div>
<div class="contents">
<a href="ripng__peer_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* RIPng peer support</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2000 Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/* RIPng support added by Vincent Jardin &lt;vincent.jardin@6wind.com&gt;</span>
<a name="l00023"></a>00023 <span class="comment"> * Copyright (C) 2002 6WIND</span>
<a name="l00024"></a>00024 <span class="comment"> */</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="ripngd_8h.html">ripngd/ripngd.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="ripng__nexthop_8h.html">ripngd/ripng_nexthop.h</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">/* Linked list of RIPng peer. */</span>
<a name="l00040"></a><a class="code" href="ripng__peer_8c.html#a7c8a6b83d3aca60397b6eac3d8e5379b">00040</a> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *<a class="code" href="rip__peer_8c.html#a7c8a6b83d3aca60397b6eac3d8e5379b">peer_list</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *
<a name="l00043"></a><a class="code" href="ripng__peer_8c.html#a69b41f51d8969b1d1063175b20c38543">00043</a> <a class="code" href="ripng__peer_8c.html#a69b41f51d8969b1d1063175b20c38543">ripng_peer_new</a> (<span class="keywordtype">void</span>)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa19cd8372e647401d14a3e92d46363b4">MTYPE_RIPNG_PEER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng__peer.html">ripng_peer</a>));
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00049"></a><a class="code" href="ripng__peer_8c.html#a3c1fe9375e3e00095e6a24ab3932600a">00049</a> <a class="code" href="ripng__peer_8c.html#a3c1fe9375e3e00095e6a24ab3932600a">ripng_peer_free</a> (<span class="keyword">struct</span> <a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa19cd8372e647401d14a3e92d46363b4">MTYPE_RIPNG_PEER</a>, peer);
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *
<a name="l00055"></a><a class="code" href="ripngd_8h.html#ad14e01af181f2063f2aed7f570245dca">00055</a> <a class="code" href="ripng__peer_8c.html#af277d57f57c62af2eea151be9052cf60">ripng_peer_lookup</a> (<span class="keyword">struct</span> in6_addr *<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00058"></a>00058   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer_list, node, nnode, peer))
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;peer-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>, addr))
<a name="l00063"></a>00063     <span class="keywordflow">return</span> peer;
<a name="l00064"></a>00064     }
<a name="l00065"></a>00065   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *
<a name="l00069"></a><a class="code" href="ripngd_8h.html#a82b3cc1e6b0433c279abe9964756abaa">00069</a> <a class="code" href="ripng__peer_8c.html#a7f07be82babcd2a0e8e05381e988bcdf">ripng_peer_lookup_next</a> (<span class="keyword">struct</span> in6_addr *<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00072"></a>00072   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer_list, node, nnode, peer))
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#ab3a3ba08113b69b7744a216a47b1ede7">addr6_cmp</a>(&amp;peer-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>, addr) &gt; 0) 
<a name="l00077"></a>00077     <span class="keywordflow">return</span> peer;
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">/* RIPng peer is timeout.</span>
<a name="l00083"></a>00083 <span class="comment"> * Garbage collector.</span>
<a name="l00084"></a>00084 <span class="comment"> **/</span>
<a name="l00085"></a>00085 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00086"></a><a class="code" href="ripng__peer_8c.html#ae37bb347d78d9c68179ffd58587bc1b5">00086</a> <a class="code" href="ripng__peer_8c.html#ae37bb347d78d9c68179ffd58587bc1b5">ripng_peer_timeout</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l00091"></a>00091   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (peer_list, peer);
<a name="l00092"></a>00092   <a class="code" href="ripng__peer_8c.html#a3c1fe9375e3e00095e6a24ab3932600a">ripng_peer_free</a> (peer);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   <span class="keywordflow">return</span> 0;
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* Get RIPng peer.  At the same time update timeout thread. */</span>
<a name="l00098"></a>00098 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *
<a name="l00099"></a><a class="code" href="ripng__peer_8c.html#a21c4dbeded8b2e4022e39c0bca6ea364">00099</a> <a class="code" href="ripng__peer_8c.html#a21c4dbeded8b2e4022e39c0bca6ea364">ripng_peer_get</a> (<span class="keyword">struct</span> in6_addr *<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   peer = <a class="code" href="ripng__peer_8c.html#af277d57f57c62af2eea151be9052cf60">ripng_peer_lookup</a> (addr);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <span class="keywordflow">if</span> (peer)
<a name="l00106"></a>00106     {
<a name="l00107"></a>00107       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structripng__peer.html#aa06ef76b0fdff271669216f4cd1f18fc">t_timeout</a>)
<a name="l00108"></a>00108     <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (peer-&gt;<a class="code" href="structripng__peer.html#aa06ef76b0fdff271669216f4cd1f18fc">t_timeout</a>);
<a name="l00109"></a>00109     }
<a name="l00110"></a>00110   <span class="keywordflow">else</span>
<a name="l00111"></a>00111     {
<a name="l00112"></a>00112       peer = <a class="code" href="ripng__peer_8c.html#a69b41f51d8969b1d1063175b20c38543">ripng_peer_new</a> ();
<a name="l00113"></a>00113       peer-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a> = *<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>; <span class="comment">/* XXX */</span>
<a name="l00114"></a>00114       <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (peer_list, peer);
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="comment">/* Update timeout thread. */</span>
<a name="l00118"></a>00118   peer-&gt;<a class="code" href="structripng__peer.html#aa06ef76b0fdff271669216f4cd1f18fc">t_timeout</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripng__peer_8c.html#ae37bb347d78d9c68179ffd58587bc1b5">ripng_peer_timeout</a>, peer,
<a name="l00119"></a>00119                       <a class="code" href="ripngd_8h.html#a9ae7d5ddd3f225a368f7602b80336ae1">RIPNG_PEER_TIMER_DEFAULT</a>);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   <span class="comment">/* Last update time set. */</span>
<a name="l00122"></a>00122   time (&amp;peer-&gt;<a class="code" href="structripng__peer.html#ac1a4315deabeef2ceb6c03d3686049b3">uptime</a>);
<a name="l00123"></a>00123   
<a name="l00124"></a>00124   <span class="keywordflow">return</span> peer;
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="keywordtype">void</span>
<a name="l00128"></a><a class="code" href="ripngd_8h.html#af68cb48bb99417530acb6d418c374c02">00128</a> <a class="code" href="ripng__peer_8c.html#a06a24eac18e1422c66467aa3ebaff2ba">ripng_peer_update</a> (<span class="keyword">struct</span> sockaddr_in6 *from, u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00131"></a>00131   peer = <a class="code" href="ripng__peer_8c.html#a21c4dbeded8b2e4022e39c0bca6ea364">ripng_peer_get</a> (&amp;from-&gt;sin6_addr);
<a name="l00132"></a>00132   peer-&gt;<a class="code" href="structripng__peer.html#a20f3daeb0ebe81b6ab2718b2615709ca">version</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="keywordtype">void</span>
<a name="l00136"></a><a class="code" href="ripngd_8h.html#a560232fa98681c5329d1db7c9fab82fd">00136</a> <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (<span class="keyword">struct</span> sockaddr_in6 *from)
<a name="l00137"></a>00137 {
<a name="l00138"></a>00138   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00139"></a>00139   peer = <a class="code" href="ripng__peer_8c.html#a21c4dbeded8b2e4022e39c0bca6ea364">ripng_peer_get</a> (&amp;from-&gt;sin6_addr);
<a name="l00140"></a>00140   peer-&gt;<a class="code" href="structripng__peer.html#a37a2a5728d915ad5ab88d8906947680a">recv_badroutes</a>++;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="keywordtype">void</span>
<a name="l00144"></a><a class="code" href="ripngd_8h.html#aaafc5bc795fed8c52a5aa3429ce9dadd">00144</a> <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (<span class="keyword">struct</span> sockaddr_in6 *from)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00147"></a>00147   peer = <a class="code" href="ripng__peer_8c.html#a21c4dbeded8b2e4022e39c0bca6ea364">ripng_peer_get</a> (&amp;from-&gt;sin6_addr);
<a name="l00148"></a>00148   peer-&gt;<a class="code" href="structripng__peer.html#a9918c7e87070825bb53b1bcabe9395f8">recv_badpackets</a>++;
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="comment">/* Display peer uptime. */</span>
<a name="l00152"></a>00152 <span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00153"></a><a class="code" href="ripng__peer_8c.html#a96fa3cb87efce3afc6f5e54cead531ee">00153</a> <a class="code" href="ripng__peer_8c.html#a96fa3cb87efce3afc6f5e54cead531ee">ripng_peer_uptime</a> (<span class="keyword">struct</span> <a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> len)
<a name="l00154"></a>00154 {
<a name="l00155"></a>00155   time_t <a class="code" href="structripng__peer.html#ac1a4315deabeef2ceb6c03d3686049b3">uptime</a>;
<a name="l00156"></a>00156   <span class="keyword">struct </span>tm *tm;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   <span class="comment">/* If there is no connection has been done before print `never&#39;. */</span>
<a name="l00159"></a>00159   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structripng__peer.html#ac1a4315deabeef2ceb6c03d3686049b3">uptime</a> == 0)
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;never   &quot;</span>);
<a name="l00162"></a>00162       <span class="keywordflow">return</span> buf;
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   <span class="comment">/* Get current time. */</span>
<a name="l00166"></a>00166   uptime = time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00167"></a>00167   uptime -= peer-&gt;<a class="code" href="structripng__peer.html#ac1a4315deabeef2ceb6c03d3686049b3">uptime</a>;
<a name="l00168"></a>00168   tm = gmtime (&amp;uptime);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="comment">/* Making formatted timer strings. */</span>
<a name="l00171"></a>00171 <span class="preprocessor">#define ONE_DAY_SECOND 60*60*24</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="preprocessor">#define ONE_WEEK_SECOND 60*60*24*7</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>
<a name="l00174"></a>00174   <span class="keywordflow">if</span> (uptime &lt; <a class="code" href="bgp__damp_8c.html#a8950077f458e540a8b4292539e0120cf">ONE_DAY_SECOND</a>)
<a name="l00175"></a>00175     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02d:%02d:%02d&quot;</span>, 
<a name="l00176"></a>00176           tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec);
<a name="l00177"></a>00177   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uptime &lt; <a class="code" href="bgp__damp_8c.html#a762bcaaf64d0f21361ca5c0262b49f33">ONE_WEEK_SECOND</a>)
<a name="l00178"></a>00178     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%dd%02dh%02dm&quot;</span>, 
<a name="l00179"></a>00179           tm-&gt;tm_yday, tm-&gt;tm_hour, tm-&gt;tm_min);
<a name="l00180"></a>00180   <span class="keywordflow">else</span>
<a name="l00181"></a>00181     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02dw%dd%02dh&quot;</span>, 
<a name="l00182"></a>00182           tm-&gt;tm_yday/7, tm-&gt;tm_yday - ((tm-&gt;tm_yday/7) * 7), tm-&gt;tm_hour);
<a name="l00183"></a>00183   <span class="keywordflow">return</span> buf;
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="keywordtype">void</span>
<a name="l00187"></a><a class="code" href="ripngd_8h.html#ae8a8d19dc9fcb5ab372ccc076513d560">00187</a> <a class="code" href="ripng__peer_8c.html#a9e69b216cd232654b9a39b7fd28ee392">ripng_peer_display</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00188"></a>00188 {
<a name="l00189"></a>00189   <span class="keyword">struct </span><a class="code" href="structripng__peer.html">ripng_peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00190"></a>00190   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00191"></a>00191 <span class="preprocessor">#define RIPNG_UPTIME_LEN 25</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span>  <span class="keywordtype">char</span> timebuf[<a class="code" href="ripng__peer_8c.html#afbf9a124ed5e15df0fe044457f1907f7">RIPNG_UPTIME_LEN</a>];
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer_list, node, nnode, peer))
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    %s %s%14s %10d %10d %10d      %s%s&quot;</span>, inet6_ntoa (peer-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>),
<a name="l00197"></a>00197                <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <span class="stringliteral">&quot; &quot;</span>,
<a name="l00198"></a>00198            peer-&gt;<a class="code" href="structripng__peer.html#a9918c7e87070825bb53b1bcabe9395f8">recv_badpackets</a>, peer-&gt;<a class="code" href="structripng__peer.html#a37a2a5728d915ad5ab88d8906947680a">recv_badroutes</a>,
<a name="l00199"></a>00199            <a class="code" href="zebra_8h.html#a3f233464553ff02e0c23d8d2f85498ae">ZEBRA_RIPNG_DISTANCE_DEFAULT</a>,
<a name="l00200"></a>00200            <a class="code" href="ripng__peer_8c.html#a96fa3cb87efce3afc6f5e54cead531ee">ripng_peer_uptime</a> (peer, timebuf, <a class="code" href="ripng__peer_8c.html#afbf9a124ed5e15df0fe044457f1907f7">RIPNG_UPTIME_LEN</a>),
<a name="l00201"></a>00201            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203 }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00206"></a><a class="code" href="ripng__peer_8c.html#ae867e98d6515251d824cb4164bdc5596">00206</a> <a class="code" href="ripng__peer_8c.html#ae867e98d6515251d824cb4164bdc5596">ripng_peer_list_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structripng__peer.html">ripng_peer</a> *p1, <span class="keyword">struct</span> <a class="code" href="structripng__peer.html">ripng_peer</a> *p2)
<a name="l00207"></a>00207 {
<a name="l00208"></a>00208   <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#ab3a3ba08113b69b7744a216a47b1ede7">addr6_cmp</a>(&amp;p1-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>, &amp;p2-&gt;<a class="code" href="structripng__peer.html#ab6b613f7807911fd2eafc25e066e0e4f">addr</a>) &gt; 0;
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="keywordtype">void</span>
<a name="l00212"></a><a class="code" href="ripngd_8h.html#a3cf46b341743373271a7fc16b6ee5279">00212</a> <a class="code" href="ripng__peer_8c.html#aadc82eb2819caa1b6884a5bc6bafe32e">ripng_peer_init</a> ()
<a name="l00213"></a>00213 {
<a name="l00214"></a>00214   peer_list = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00215"></a>00215   peer_list-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *)) <a class="code" href="ripng__peer_8c.html#ae867e98d6515251d824cb4164bdc5596">ripng_peer_list_cmp</a>;
<a name="l00216"></a>00216 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ripng__peer_8c.html">ripng_peer.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:08 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
