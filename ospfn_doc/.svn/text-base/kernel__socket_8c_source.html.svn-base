<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/kernel_socket.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('kernel__socket_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/kernel_socket.c</div>  </div>
</div>
<div class="contents">
<a href="kernel__socket_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Kernel communication using routing socket.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="connected_8h.html">connected.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="ioctl_8h.html">ioctl.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="str_8h.html">str.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">rib.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="debug_8h.html">zebra/debug.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="kernel__socket_8h.html">zebra/kernel_socket.h</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00042"></a>00042 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/*</span>
<a name="l00045"></a>00045 <span class="comment"> * Given a sockaddr length, round it up to include pad bytes following</span>
<a name="l00046"></a>00046 <span class="comment"> * it.  Assumes the kernel pads to sizeof(long).</span>
<a name="l00047"></a>00047 <span class="comment"> *</span>
<a name="l00048"></a>00048 <span class="comment"> * XXX: why is ROUNDUP(0) sizeof(long)?  0 is an illegal sockaddr</span>
<a name="l00049"></a>00049 <span class="comment"> * length anyway (&lt; sizeof (struct sockaddr)), so this shouldn&#39;t</span>
<a name="l00050"></a>00050 <span class="comment"> * matter.</span>
<a name="l00051"></a>00051 <span class="comment"> */</span>
<a name="l00052"></a><a class="code" href="kernel__socket_8c.html#a7713a96869529a163384148cafc2dc55">00052</a> <span class="preprocessor">#define ROUNDUP(a) \</span>
<a name="l00053"></a>00053 <span class="preprocessor">  ((a) &gt; 0 ? (1 + (((a) - 1) | (sizeof(long) - 1))) : sizeof(long))</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="comment">/*</span>
<a name="l00056"></a>00056 <span class="comment"> * Given a pointer (sockaddr or void *), return the number of bytes</span>
<a name="l00057"></a>00057 <span class="comment"> * taken up by the sockaddr and any padding needed for alignment.</span>
<a name="l00058"></a>00058 <span class="comment"> */</span>
<a name="l00059"></a>00059 <span class="preprocessor">#if defined(HAVE_STRUCT_SOCKADDR_SA_LEN)</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#define SAROUNDUP(X)   ROUNDUP(((struct sockaddr *)(X))-&gt;sa_len)</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#elif defined(HAVE_IPV6)</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="comment">/*</span>
<a name="l00063"></a>00063 <span class="comment"> * One would hope all fixed-size structure definitions are aligned,</span>
<a name="l00064"></a>00064 <span class="comment"> * but round them up nonetheless.</span>
<a name="l00065"></a>00065 <span class="comment"> */</span>
<a name="l00066"></a>00066 <span class="preprocessor">#define SAROUNDUP(X) \</span>
<a name="l00067"></a>00067 <span class="preprocessor">    (((struct sockaddr *)(X))-&gt;sa_family == AF_INET ?   \</span>
<a name="l00068"></a>00068 <span class="preprocessor">      ROUNDUP(sizeof(struct sockaddr_in)):\</span>
<a name="l00069"></a>00069 <span class="preprocessor">      (((struct sockaddr *)(X))-&gt;sa_family == AF_INET6 ? \</span>
<a name="l00070"></a>00070 <span class="preprocessor">       ROUNDUP(sizeof(struct sockaddr_in6)) :  \</span>
<a name="l00071"></a>00071 <span class="preprocessor">       (((struct sockaddr *)(X))-&gt;sa_family == AF_LINK ? \</span>
<a name="l00072"></a>00072 <span class="preprocessor">         ROUNDUP(sizeof(struct sockaddr_dl)) : sizeof(struct sockaddr))))</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* HAVE_IPV6 */</span> 
<a name="l00074"></a><a class="code" href="kernel__socket_8c.html#aab94f8fb1b5dbdc6eb3e38b00e360b8b">00074</a> <span class="preprocessor">#define SAROUNDUP(X) \</span>
<a name="l00075"></a>00075 <span class="preprocessor">      (((struct sockaddr *)(X))-&gt;sa_family == AF_INET ?   \</span>
<a name="l00076"></a>00076 <span class="preprocessor">        ROUNDUP(sizeof(struct sockaddr_in)):\</span>
<a name="l00077"></a>00077 <span class="preprocessor">         (((struct sockaddr *)(X))-&gt;sa_family == AF_LINK ? \</span>
<a name="l00078"></a>00078 <span class="preprocessor">           ROUNDUP(sizeof(struct sockaddr_dl)) : sizeof(struct sockaddr)))</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_SA_LEN */</span>
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="comment">/* We use an additional pointer in following, pdest, rather than (DEST)</span>
<a name="l00082"></a>00082 <span class="comment"> * directly, because gcc will warn if the macro is expanded and DEST is NULL,</span>
<a name="l00083"></a>00083 <span class="comment"> * complaining that memcpy is being passed a NULL value, despite the fact</span>
<a name="l00084"></a>00084 <span class="comment"> * the if (NULL) makes it impossible.</span>
<a name="l00085"></a>00085 <span class="comment"> */</span>
<a name="l00086"></a><a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">00086</a> <span class="preprocessor">#define RTA_ADDR_GET(DEST, RTA, RTMADDRS, PNT) \</span>
<a name="l00087"></a>00087 <span class="preprocessor">  if ((RTMADDRS) &amp; (RTA)) \</span>
<a name="l00088"></a>00088 <span class="preprocessor">    { \</span>
<a name="l00089"></a>00089 <span class="preprocessor">      void *pdest = (DEST); \</span>
<a name="l00090"></a>00090 <span class="preprocessor">      int len = SAROUNDUP ((PNT)); \</span>
<a name="l00091"></a>00091 <span class="preprocessor">      if ( ((DEST) != NULL) &amp;&amp; \</span>
<a name="l00092"></a>00092 <span class="preprocessor">           af_check (((struct sockaddr *)(PNT))-&gt;sa_family)) \</span>
<a name="l00093"></a>00093 <span class="preprocessor">        memcpy (pdest, (PNT), len); \</span>
<a name="l00094"></a>00094 <span class="preprocessor">      (PNT) += len; \</span>
<a name="l00095"></a>00095 <span class="preprocessor">    }</span>
<a name="l00096"></a><a class="code" href="kernel__socket_8c.html#a649ad50a5b9df8693536089a2490692d">00096</a> <span class="preprocessor"></span><span class="preprocessor">#define RTA_ATTR_GET(DEST, RTA, RTMADDRS, PNT) \</span>
<a name="l00097"></a>00097 <span class="preprocessor">  if ((RTMADDRS) &amp; (RTA)) \</span>
<a name="l00098"></a>00098 <span class="preprocessor">    { \</span>
<a name="l00099"></a>00099 <span class="preprocessor">      void *pdest = (DEST); \</span>
<a name="l00100"></a>00100 <span class="preprocessor">      int len = SAROUNDUP ((PNT)); \</span>
<a name="l00101"></a>00101 <span class="preprocessor">      if ((DEST) != NULL) \</span>
<a name="l00102"></a>00102 <span class="preprocessor">        memcpy (pdest, (PNT), len); \</span>
<a name="l00103"></a>00103 <span class="preprocessor">      (PNT) += len; \</span>
<a name="l00104"></a>00104 <span class="preprocessor">    }</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>
<a name="l00106"></a><a class="code" href="kernel__socket_8c.html#a81155b84f08593daf8f0585445bba88a">00106</a> <span class="preprocessor">#define RTA_NAME_GET(DEST, RTA, RTMADDRS, PNT, LEN) \</span>
<a name="l00107"></a>00107 <span class="preprocessor">  if ((RTMADDRS) &amp; (RTA)) \</span>
<a name="l00108"></a>00108 <span class="preprocessor">    { \</span>
<a name="l00109"></a>00109 <span class="preprocessor">      u_char *pdest = (u_char *) (DEST); \</span>
<a name="l00110"></a>00110 <span class="preprocessor">      int len = SAROUNDUP ((PNT)); \</span>
<a name="l00111"></a>00111 <span class="preprocessor">      struct sockaddr_dl *sdl = (struct sockaddr_dl *)(PNT); \</span>
<a name="l00112"></a>00112 <span class="preprocessor">      if (IS_ZEBRA_DEBUG_KERNEL) \</span>
<a name="l00113"></a>00113 <span class="preprocessor">        zlog_debug (&quot;%s: RTA_SDL_GET nlen %d, alen %d&quot;, \</span>
<a name="l00114"></a>00114 <span class="preprocessor">                    __func__, sdl-&gt;sdl_nlen, sdl-&gt;sdl_alen); \</span>
<a name="l00115"></a>00115 <span class="preprocessor">      if ( ((DEST) != NULL) &amp;&amp; (sdl-&gt;sdl_family == AF_LINK) \</span>
<a name="l00116"></a>00116 <span class="preprocessor">           &amp;&amp; (sdl-&gt;sdl_nlen &lt; IFNAMSIZ) &amp;&amp; (sdl-&gt;sdl_nlen &lt;= len) ) \</span>
<a name="l00117"></a>00117 <span class="preprocessor">        { \</span>
<a name="l00118"></a>00118 <span class="preprocessor">          memcpy (pdest, sdl-&gt;sdl_data, sdl-&gt;sdl_nlen); \</span>
<a name="l00119"></a>00119 <span class="preprocessor">          pdest[sdl-&gt;sdl_nlen] = &#39;\0&#39;; \</span>
<a name="l00120"></a>00120 <span class="preprocessor">          (LEN) = sdl-&gt;sdl_nlen; \</span>
<a name="l00121"></a>00121 <span class="preprocessor">        } \</span>
<a name="l00122"></a>00122 <span class="preprocessor">      (PNT) += len; \</span>
<a name="l00123"></a>00123 <span class="preprocessor">    } \</span>
<a name="l00124"></a>00124 <span class="preprocessor">  else \</span>
<a name="l00125"></a>00125 <span class="preprocessor">    { \</span>
<a name="l00126"></a>00126 <span class="preprocessor">      (LEN) = 0; \</span>
<a name="l00127"></a>00127 <span class="preprocessor">    }</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="comment">/* Routing socket message types. */</span>
<a name="l00129"></a><a class="code" href="kernel__socket_8h.html#abde8587e366f57128877856ecca368e1">00129</a> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="kernel__socket_8c.html#abde8587e366f57128877856ecca368e1">rtm_type_str</a>[] =
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131   {RTM_ADD,      <span class="stringliteral">&quot;RTM_ADD&quot;</span>},
<a name="l00132"></a>00132   {RTM_DELETE,   <span class="stringliteral">&quot;RTM_DELETE&quot;</span>},
<a name="l00133"></a>00133   {RTM_CHANGE,   <span class="stringliteral">&quot;RTM_CHANGE&quot;</span>},
<a name="l00134"></a>00134   {RTM_GET,      <span class="stringliteral">&quot;RTM_GET&quot;</span>},
<a name="l00135"></a>00135   {RTM_LOSING,   <span class="stringliteral">&quot;RTM_LOSING&quot;</span>},
<a name="l00136"></a>00136   {RTM_REDIRECT, <span class="stringliteral">&quot;RTM_REDIRECT&quot;</span>},
<a name="l00137"></a>00137   {RTM_MISS,     <span class="stringliteral">&quot;RTM_MISS&quot;</span>},
<a name="l00138"></a>00138   {RTM_LOCK,     <span class="stringliteral">&quot;RTM_LOCK&quot;</span>},
<a name="l00139"></a>00139 <span class="preprocessor">#ifdef OLDADD</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span>  {RTM_OLDADD,   <span class="stringliteral">&quot;RTM_OLDADD&quot;</span>},
<a name="l00141"></a>00141 <span class="preprocessor">#endif </span><span class="comment">/* RTM_OLDADD */</span>
<a name="l00142"></a>00142 <span class="preprocessor">#ifdef RTM_OLDDEL</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>  {RTM_OLDDEL,   <span class="stringliteral">&quot;RTM_OLDDEL&quot;</span>},
<a name="l00144"></a>00144 <span class="preprocessor">#endif </span><span class="comment">/* RTM_OLDDEL */</span>
<a name="l00145"></a>00145   {RTM_RESOLVE,  <span class="stringliteral">&quot;RTM_RESOLVE&quot;</span>},
<a name="l00146"></a>00146   {RTM_NEWADDR,  <span class="stringliteral">&quot;RTM_NEWADDR&quot;</span>},
<a name="l00147"></a>00147   {RTM_DELADDR,  <span class="stringliteral">&quot;RTM_DELADDR&quot;</span>},
<a name="l00148"></a>00148   {RTM_IFINFO,   <span class="stringliteral">&quot;RTM_IFINFO&quot;</span>},
<a name="l00149"></a>00149 <span class="preprocessor">#ifdef RTM_OIFINFO</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span>  {RTM_OIFINFO,   <span class="stringliteral">&quot;RTM_OIFINFO&quot;</span>},
<a name="l00151"></a>00151 <span class="preprocessor">#endif </span><span class="comment">/* RTM_OIFINFO */</span>
<a name="l00152"></a>00152 <span class="preprocessor">#ifdef RTM_NEWMADDR</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>  {RTM_NEWMADDR, <span class="stringliteral">&quot;RTM_NEWMADDR&quot;</span>},
<a name="l00154"></a>00154 <span class="preprocessor">#endif </span><span class="comment">/* RTM_NEWMADDR */</span>
<a name="l00155"></a>00155 <span class="preprocessor">#ifdef RTM_DELMADDR</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>  {RTM_DELMADDR, <span class="stringliteral">&quot;RTM_DELMADDR&quot;</span>},
<a name="l00157"></a>00157 <span class="preprocessor">#endif </span><span class="comment">/* RTM_DELMADDR */</span>
<a name="l00158"></a>00158 <span class="preprocessor">#ifdef RTM_IFANNOUNCE</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>  {RTM_IFANNOUNCE, <span class="stringliteral">&quot;RTM_IFANNOUNCE&quot;</span>},
<a name="l00160"></a>00160 <span class="preprocessor">#endif </span><span class="comment">/* RTM_IFANNOUNCE */</span>
<a name="l00161"></a>00161   {0,            <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
<a name="l00162"></a>00162 };
<a name="l00163"></a>00163 
<a name="l00164"></a><a class="code" href="kernel__socket_8c.html#aa5d1c9b38cbefbb64a3ba2467a74213e">00164</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="kernel__socket_8c.html#aa5d1c9b38cbefbb64a3ba2467a74213e">rtm_flag_str</a>[] =
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   {RTF_UP,        <span class="stringliteral">&quot;UP&quot;</span>},
<a name="l00167"></a>00167   {RTF_GATEWAY,   <span class="stringliteral">&quot;GATEWAY&quot;</span>},
<a name="l00168"></a>00168   {RTF_HOST,      <span class="stringliteral">&quot;HOST&quot;</span>},
<a name="l00169"></a>00169   {RTF_REJECT,    <span class="stringliteral">&quot;REJECT&quot;</span>},
<a name="l00170"></a>00170   {RTF_DYNAMIC,   <span class="stringliteral">&quot;DYNAMIC&quot;</span>},
<a name="l00171"></a>00171   {RTF_MODIFIED,  <span class="stringliteral">&quot;MODIFIED&quot;</span>},
<a name="l00172"></a>00172   {RTF_DONE,      <span class="stringliteral">&quot;DONE&quot;</span>},
<a name="l00173"></a>00173 <span class="preprocessor">#ifdef RTF_MASK</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>  {RTF_MASK,      <span class="stringliteral">&quot;MASK&quot;</span>},
<a name="l00175"></a>00175 <span class="preprocessor">#endif </span><span class="comment">/* RTF_MASK */</span>
<a name="l00176"></a>00176 <span class="preprocessor">#ifdef RTF_CLONING</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span>  {RTF_CLONING,   <span class="stringliteral">&quot;CLONING&quot;</span>},
<a name="l00178"></a>00178 <span class="preprocessor">#endif </span><span class="comment">/* RTF_CLONING */</span>
<a name="l00179"></a>00179   {RTF_XRESOLVE,  <span class="stringliteral">&quot;XRESOLVE&quot;</span>},
<a name="l00180"></a>00180   {RTF_LLINFO,    <span class="stringliteral">&quot;LLINFO&quot;</span>},
<a name="l00181"></a>00181   {RTF_STATIC,    <span class="stringliteral">&quot;STATIC&quot;</span>},
<a name="l00182"></a>00182   {RTF_BLACKHOLE, <span class="stringliteral">&quot;BLACKHOLE&quot;</span>},
<a name="l00183"></a>00183 <span class="preprocessor">#ifdef RTF_PRIVATE</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>  {RTF_PRIVATE,   <span class="stringliteral">&quot;PRIVATE&quot;</span>},
<a name="l00185"></a>00185 <span class="preprocessor">#endif </span><span class="comment">/* RTF_PRIVATE */</span>
<a name="l00186"></a>00186   {RTF_PROTO1,    <span class="stringliteral">&quot;PROTO1&quot;</span>},
<a name="l00187"></a>00187   {RTF_PROTO2,    <span class="stringliteral">&quot;PROTO2&quot;</span>},
<a name="l00188"></a>00188 <span class="preprocessor">#ifdef RTF_PRCLONING</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span>  {RTF_PRCLONING, <span class="stringliteral">&quot;PRCLONING&quot;</span>},
<a name="l00190"></a>00190 <span class="preprocessor">#endif </span><span class="comment">/* RTF_PRCLONING */</span>
<a name="l00191"></a>00191 <span class="preprocessor">#ifdef RTF_WASCLONED</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span>  {RTF_WASCLONED, <span class="stringliteral">&quot;WASCLONED&quot;</span>},
<a name="l00193"></a>00193 <span class="preprocessor">#endif </span><span class="comment">/* RTF_WASCLONED */</span>
<a name="l00194"></a>00194 <span class="preprocessor">#ifdef RTF_PROTO3</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>  {RTF_PROTO3,    <span class="stringliteral">&quot;PROTO3&quot;</span>},
<a name="l00196"></a>00196 <span class="preprocessor">#endif </span><span class="comment">/* RTF_PROTO3 */</span>
<a name="l00197"></a>00197 <span class="preprocessor">#ifdef RTF_PINNED</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span>  {RTF_PINNED,    <span class="stringliteral">&quot;PINNED&quot;</span>},
<a name="l00199"></a>00199 <span class="preprocessor">#endif </span><span class="comment">/* RTF_PINNED */</span>
<a name="l00200"></a>00200 <span class="preprocessor">#ifdef RTF_LOCAL</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>  {RTF_LOCAL,    <span class="stringliteral">&quot;LOCAL&quot;</span>},
<a name="l00202"></a>00202 <span class="preprocessor">#endif </span><span class="comment">/* RTF_LOCAL */</span>
<a name="l00203"></a>00203 <span class="preprocessor">#ifdef RTF_BROADCAST</span>
<a name="l00204"></a>00204 <span class="preprocessor"></span>  {RTF_BROADCAST, <span class="stringliteral">&quot;BROADCAST&quot;</span>},
<a name="l00205"></a>00205 <span class="preprocessor">#endif </span><span class="comment">/* RTF_BROADCAST */</span>
<a name="l00206"></a>00206 <span class="preprocessor">#ifdef RTF_MULTICAST</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>  {RTF_MULTICAST, <span class="stringliteral">&quot;MULTICAST&quot;</span>},
<a name="l00208"></a>00208 <span class="preprocessor">#endif </span><span class="comment">/* RTF_MULTICAST */</span>
<a name="l00209"></a>00209 <span class="preprocessor">#ifdef RTF_MULTIRT</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>  {RTF_MULTIRT,   <span class="stringliteral">&quot;MULTIRT&quot;</span>},
<a name="l00211"></a>00211 <span class="preprocessor">#endif </span><span class="comment">/* RTF_MULTIRT */</span>
<a name="l00212"></a>00212 <span class="preprocessor">#ifdef RTF_SETSRC</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>  {RTF_SETSRC,    <span class="stringliteral">&quot;SETSRC&quot;</span>},
<a name="l00214"></a>00214 <span class="preprocessor">#endif </span><span class="comment">/* RTF_SETSRC */</span>
<a name="l00215"></a>00215   {0,             <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
<a name="l00216"></a>00216 };
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <span class="comment">/* Kernel routing update socket. */</span>
<a name="l00219"></a><a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">00219</a> <span class="keywordtype">int</span> <a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a> = -1;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="comment">/* Yes I&#39;m checking ugly routing socket behavior. */</span>
<a name="l00222"></a>00222 <span class="comment">/* #define DEBUG */</span>
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="comment">/* Supported address family check. */</span>
<a name="l00225"></a>00225 <span class="keyword">static</span> <span class="keywordtype">int</span> <span class="keyword">inline</span>
<a name="l00226"></a><a class="code" href="kernel__socket_8c.html#a5e5b94c424d0c81686a7114d75739d4e">00226</a> <a class="code" href="kernel__socket_8c.html#a5e5b94c424d0c81686a7114d75739d4e">af_check</a> (<span class="keywordtype">int</span> family)
<a name="l00227"></a>00227 {
<a name="l00228"></a>00228   <span class="keywordflow">if</span> (family == AF_INET)
<a name="l00229"></a>00229     <span class="keywordflow">return</span> 1;
<a name="l00230"></a>00230 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (family == AF_INET6)
<a name="l00232"></a>00232     <span class="keywordflow">return</span> 1;
<a name="l00233"></a>00233 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00234"></a>00234   <span class="keywordflow">return</span> 0;
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">/* Dump routing table flag for debug purpose. */</span>
<a name="l00238"></a>00238 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00239"></a><a class="code" href="kernel__socket_8c.html#a32712c46b7a679cefafa26ac8a62af2d">00239</a> <a class="code" href="kernel__socket_8c.html#a32712c46b7a679cefafa26ac8a62af2d">rtm_flag_dump</a> (<span class="keywordtype">int</span> flag)
<a name="l00240"></a>00240 {
<a name="l00241"></a>00241   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> *mes;
<a name="l00242"></a>00242   <span class="keyword">static</span> <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   buf[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00245"></a>00245   <span class="keywordflow">for</span> (mes = rtm_flag_str; mes-&gt;<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a> != 0; mes++)
<a name="l00246"></a>00246     {
<a name="l00247"></a>00247       <span class="keywordflow">if</span> (mes-&gt;<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a> &amp; flag)
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249       <a class="code" href="str_8c.html#aaba2fbb66c47f200e8279e7a11bbfe07" title="Like strncat() but does not 0 fill the buffer and always null terminates.">strlcat</a> (buf, mes-&gt;<a class="code" href="structmessage.html#afd25323d5a42a5d73ebb8c85c5f7bd6f">str</a>, BUFSIZ);
<a name="l00250"></a>00250       <a class="code" href="str_8c.html#aaba2fbb66c47f200e8279e7a11bbfe07" title="Like strncat() but does not 0 fill the buffer and always null terminates.">strlcat</a> (buf, <span class="stringliteral">&quot; &quot;</span>, BUFSIZ);
<a name="l00251"></a>00251     }
<a name="l00252"></a>00252     }
<a name="l00253"></a>00253   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Kernel: %s&quot;</span>, buf);
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="preprocessor">#ifdef RTM_IFANNOUNCE</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span><span class="comment">/* Interface adding function */</span>
<a name="l00258"></a>00258 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00259"></a>00259 ifan_read (<span class="keyword">struct</span> if_announcemsghdr *ifan)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00262"></a>00262   
<a name="l00263"></a>00263   ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifan-&gt;ifan_index);
<a name="l00264"></a>00264   
<a name="l00265"></a>00265   <span class="keywordflow">if</span> (ifp)
<a name="l00266"></a>00266     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ( (ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> == ifan-&gt;ifan_index) 
<a name="l00267"></a>00267              || (ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> == <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>) );
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="keywordflow">if</span> ( (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00270"></a>00270       || ((ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> == <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>)
<a name="l00271"></a>00271           &amp;&amp; (ifan-&gt;ifan_what == IFAN_ARRIVAL)) )
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00274"></a>00274         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: creating interface for ifindex %d, name %s&quot;</span>,
<a name="l00275"></a>00275                     __func__, ifan-&gt;ifan_index, ifan-&gt;ifan_name);
<a name="l00276"></a>00276       
<a name="l00277"></a>00277       <span class="comment">/* Create Interface */</span>
<a name="l00278"></a>00278       ifp = <a class="code" href="if_8c.html#a18fa51c3b90a3afa1f564e85a2f4c62b">if_get_by_name_len</a>(ifan-&gt;ifan_name,
<a name="l00279"></a>00279                    <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifan-&gt;ifan_name,
<a name="l00280"></a>00280                        <span class="keyword">sizeof</span>(ifan-&gt;ifan_name)));
<a name="l00281"></a>00281       ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifan-&gt;ifan_index;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283       <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
<a name="l00284"></a>00284     }
<a name="l00285"></a>00285   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; ifan-&gt;ifan_what == IFAN_DEPARTURE)
<a name="l00286"></a>00286     <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (ifp);
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (ifp);
<a name="l00289"></a>00289   <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (ifp);
<a name="l00290"></a>00290   <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (ifp);
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00293"></a>00293     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: interface %s index %d&quot;</span>, 
<a name="l00294"></a>00294                 __func__, ifan-&gt;ifan_name, ifan-&gt;ifan_index);
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="keywordflow">return</span> 0;
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 <span class="preprocessor">#endif </span><span class="comment">/* RTM_IFANNOUNCE */</span>
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span><span class="comment">/* BSD link detect translation */</span>
<a name="l00302"></a>00302 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00303"></a>00303 bsd_linkdetect_translate (<span class="keyword">struct</span> if_msghdr *ifm)
<a name="l00304"></a>00304 {
<a name="l00305"></a>00305   <span class="keywordflow">if</span> ((ifm-&gt;ifm_data.ifi_link_state &gt;= LINK_STATE_UP) ||
<a name="l00306"></a>00306       (ifm-&gt;ifm_data.ifi_link_state == LINK_STATE_UNKNOWN))
<a name="l00307"></a>00307     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(ifm-&gt;ifm_flags, IFF_RUNNING);
<a name="l00308"></a>00308   <span class="keywordflow">else</span>
<a name="l00309"></a>00309     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(ifm-&gt;ifm_flags, IFF_RUNNING);
<a name="l00310"></a>00310 }
<a name="l00311"></a>00311 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT */</span>
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 <span class="comment">/*</span>
<a name="l00314"></a>00314 <span class="comment"> * Handle struct if_msghdr obtained from reading routing socket or</span>
<a name="l00315"></a>00315 <span class="comment"> * sysctl (from interface_list).  There may or may not be sockaddrs</span>
<a name="l00316"></a>00316 <span class="comment"> * present after the header.</span>
<a name="l00317"></a>00317 <span class="comment"> */</span>
<a name="l00318"></a>00318 <span class="keywordtype">int</span>
<a name="l00319"></a><a class="code" href="kernel__socket_8h.html#a40bb5e61156f9a2ee077cdd82ab905d6">00319</a> <a class="code" href="kernel__socket_8c.html#aa77e17c2a468e19c7bf0935bb78b6b48">ifm_read</a> (<span class="keyword">struct</span> if_msghdr *ifm)
<a name="l00320"></a>00320 {
<a name="l00321"></a>00321   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00322"></a>00322   <span class="keywordtype">char</span> ifname[IFNAMSIZ];
<a name="l00323"></a>00323   <span class="keywordtype">short</span> ifnlen = 0;
<a name="l00324"></a>00324   caddr_t *cp;
<a name="l00325"></a>00325   
<a name="l00326"></a>00326   <span class="comment">/* terminate ifname at head (for strnlen) and tail (for safety) */</span>
<a name="l00327"></a>00327   ifname[IFNAMSIZ - 1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00328"></a>00328   
<a name="l00329"></a>00329   <span class="comment">/* paranoia: sanity check structure */</span>
<a name="l00330"></a>00330   <span class="keywordflow">if</span> (ifm-&gt;ifm_msglen &lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> if_msghdr))
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;ifm_read: ifm-&gt;ifm_msglen %d too short\n&quot;</span>,
<a name="l00333"></a>00333         ifm-&gt;ifm_msglen);
<a name="l00334"></a>00334       <span class="keywordflow">return</span> -1;
<a name="l00335"></a>00335     }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="comment">/*</span>
<a name="l00338"></a>00338 <span class="comment">   * Check for a sockaddr_dl following the message.  First, point to</span>
<a name="l00339"></a>00339 <span class="comment">   * where a socakddr might be if one follows the message.</span>
<a name="l00340"></a>00340 <span class="comment">   */</span>
<a name="l00341"></a>00341   cp = (<span class="keywordtype">void</span> *)(ifm + 1);
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00344"></a>00344 <span class="preprocessor"></span>  <span class="comment">/* </span>
<a name="l00345"></a>00345 <span class="comment">   * XXX This behavior should be narrowed to only the kernel versions</span>
<a name="l00346"></a>00346 <span class="comment">   * for which the structures returned do not match the headers.</span>
<a name="l00347"></a>00347 <span class="comment">   *</span>
<a name="l00348"></a>00348 <span class="comment">   * if_msghdr_t on 64 bit kernels in Solaris 9 and earlier versions</span>
<a name="l00349"></a>00349 <span class="comment">   * is 12 bytes larger than the 32 bit version.</span>
<a name="l00350"></a>00350 <span class="comment">   */</span>
<a name="l00351"></a>00351   <span class="keywordflow">if</span> (((<span class="keyword">struct</span> sockaddr *) cp)-&gt;sa_family == AF_UNSPEC)
<a name="l00352"></a>00352     cp = cp + 12;
<a name="l00353"></a>00353 <span class="preprocessor">#endif</span>
<a name="l00354"></a>00354 <span class="preprocessor"></span>
<a name="l00355"></a>00355   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_DST, ifm-&gt;ifm_addrs, cp);
<a name="l00356"></a>00356   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_GATEWAY, ifm-&gt;ifm_addrs, cp);
<a name="l00357"></a>00357   <a class="code" href="kernel__socket_8c.html#a649ad50a5b9df8693536089a2490692d">RTA_ATTR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_NETMASK, ifm-&gt;ifm_addrs, cp);
<a name="l00358"></a>00358   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_GENMASK, ifm-&gt;ifm_addrs, cp);
<a name="l00359"></a>00359   <a class="code" href="kernel__socket_8c.html#a81155b84f08593daf8f0585445bba88a">RTA_NAME_GET</a> (ifname, RTA_IFP, ifm-&gt;ifm_addrs, cp, ifnlen);
<a name="l00360"></a>00360   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_IFA, ifm-&gt;ifm_addrs, cp);
<a name="l00361"></a>00361   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_AUTHOR, ifm-&gt;ifm_addrs, cp);
<a name="l00362"></a>00362   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_BRD, ifm-&gt;ifm_addrs, cp);
<a name="l00363"></a>00363   
<a name="l00364"></a>00364   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00365"></a>00365     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: sdl ifname %s&quot;</span>, __func__, (ifnlen ? ifname : <span class="stringliteral">&quot;(nil)&quot;</span>));
<a name="l00366"></a>00366   
<a name="l00367"></a>00367   <span class="comment">/* </span>
<a name="l00368"></a>00368 <span class="comment">   * Look up on ifindex first, because ifindices are the primary handle for</span>
<a name="l00369"></a>00369 <span class="comment">   * interfaces across the user/kernel boundary, for most systems.  (Some</span>
<a name="l00370"></a>00370 <span class="comment">   * messages, such as up/down status changes on NetBSD, do not include a</span>
<a name="l00371"></a>00371 <span class="comment">   * sockaddr_dl).</span>
<a name="l00372"></a>00372 <span class="comment">   */</span>
<a name="l00373"></a>00373   <span class="keywordflow">if</span> ( (ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifm-&gt;ifm_index)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375       <span class="comment">/* we have an ifp, verify that the name matches as some systems,</span>
<a name="l00376"></a>00376 <span class="comment">       * eg Solaris, have a 1:many association of ifindex:ifname</span>
<a name="l00377"></a>00377 <span class="comment">       * if they dont match, we dont have the correct ifp and should</span>
<a name="l00378"></a>00378 <span class="comment">       * set it back to NULL to let next check do lookup by name</span>
<a name="l00379"></a>00379 <span class="comment">       */</span>
<a name="l00380"></a>00380       <span class="keywordflow">if</span> (ifnlen &amp;&amp; (strncmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifname, IFNAMSIZ) != 0) )
<a name="l00381"></a>00381         {
<a name="l00382"></a>00382           <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00383"></a>00383             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifp name %s doesnt match sdl name %s&quot;</span>,
<a name="l00384"></a>00384                         __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifname);
<a name="l00385"></a>00385           ifp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00386"></a>00386         }
<a name="l00387"></a>00387     }
<a name="l00388"></a>00388   
<a name="l00389"></a>00389   <span class="comment">/* </span>
<a name="l00390"></a>00390 <span class="comment">   * If we dont have an ifp, try looking up by name.  Particularly as some</span>
<a name="l00391"></a>00391 <span class="comment">   * systems (Solaris) have a 1:many mapping of ifindex:ifname - the ifname</span>
<a name="l00392"></a>00392 <span class="comment">   * is therefore our unique handle to that interface.</span>
<a name="l00393"></a>00393 <span class="comment">   *</span>
<a name="l00394"></a>00394 <span class="comment">   * Interfaces specified in the configuration file for which the ifindex</span>
<a name="l00395"></a>00395 <span class="comment">   * has not been determined will have ifindex == IFINDEX_INTERNAL, and such</span>
<a name="l00396"></a>00396 <span class="comment">   * interfaces are found by this search, and then their ifindex values can</span>
<a name="l00397"></a>00397 <span class="comment">   * be filled in.</span>
<a name="l00398"></a>00398 <span class="comment">   */</span>
<a name="l00399"></a>00399   <span class="keywordflow">if</span> ( (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; ifnlen)
<a name="l00400"></a>00400     ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (ifname);
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   <span class="comment">/*</span>
<a name="l00403"></a>00403 <span class="comment">   * If ifp still does not exist or has an invalid index (IFINDEX_INTERNAL),</span>
<a name="l00404"></a>00404 <span class="comment">   * create or fill in an interface.</span>
<a name="l00405"></a>00405 <span class="comment">   */</span>
<a name="l00406"></a>00406   <span class="keywordflow">if</span> ((ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) || (ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> == <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>))
<a name="l00407"></a>00407     {
<a name="l00408"></a>00408       <span class="comment">/*</span>
<a name="l00409"></a>00409 <span class="comment">       * To create or fill in an interface, a sockaddr_dl (via</span>
<a name="l00410"></a>00410 <span class="comment">       * RTA_IFP) is required.</span>
<a name="l00411"></a>00411 <span class="comment">       */</span>
<a name="l00412"></a>00412       <span class="keywordflow">if</span> (!ifnlen)
<a name="l00413"></a>00413     {
<a name="l00414"></a>00414       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Interface index %d (new) missing ifname\n&quot;</span>,
<a name="l00415"></a>00415              ifm-&gt;ifm_index);
<a name="l00416"></a>00416       <span class="keywordflow">return</span> -1;
<a name="l00417"></a>00417     }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 <span class="preprocessor">#ifndef RTM_IFANNOUNCE</span>
<a name="l00420"></a>00420 <span class="preprocessor"></span>      <span class="comment">/* Down-&gt;Down interface should be ignored here.</span>
<a name="l00421"></a>00421 <span class="comment">       * See further comment below.</span>
<a name="l00422"></a>00422 <span class="comment">       */</span>
<a name="l00423"></a>00423       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifm-&gt;ifm_flags, IFF_UP))
<a name="l00424"></a>00424         <span class="keywordflow">return</span> 0;
<a name="l00425"></a>00425 <span class="preprocessor">#endif </span><span class="comment">/* !RTM_IFANNOUNCE */</span>
<a name="l00426"></a>00426       
<a name="l00427"></a>00427       <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00428"></a>00428         {
<a name="l00429"></a>00429       <span class="comment">/* Interface that zebra was not previously aware of, so create. */</span> 
<a name="l00430"></a>00430       ifp = <a class="code" href="if_8c.html#a5a7398837ed51febeaea57200f118fd5">if_create</a> (ifname, ifnlen);
<a name="l00431"></a>00431       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00432"></a>00432         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: creating ifp for ifindex %d&quot;</span>, 
<a name="l00433"></a>00433                     __func__, ifm-&gt;ifm_index);
<a name="l00434"></a>00434         }
<a name="l00435"></a>00435 
<a name="l00436"></a>00436       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00437"></a>00437         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: updated/created ifp, ifname %s, ifindex %d&quot;</span>,
<a name="l00438"></a>00438                     __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l00439"></a>00439       <span class="comment">/* </span>
<a name="l00440"></a>00440 <span class="comment">       * Fill in newly created interface structure, or larval</span>
<a name="l00441"></a>00441 <span class="comment">       * structure with ifindex IFINDEX_INTERNAL.</span>
<a name="l00442"></a>00442 <span class="comment">       */</span>
<a name="l00443"></a>00443       ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifm-&gt;ifm_index;
<a name="l00444"></a>00444       
<a name="l00445"></a>00445 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT </span><span class="comment">/* translate BSD kernel msg for link-state */</span>
<a name="l00446"></a>00446       bsd_linkdetect_translate(ifm);
<a name="l00447"></a>00447 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT */</span>
<a name="l00448"></a>00448 
<a name="l00449"></a>00449       <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, ifm-&gt;ifm_flags);
<a name="l00450"></a>00450 <span class="preprocessor">#if defined(__bsdi__)</span>
<a name="l00451"></a>00451 <span class="preprocessor"></span>      <a class="code" href="mtu__kvm_8c.html#a22befd5d91949a56b0bc9ec619706ba3">if_kvm_get_mtu</a> (ifp);
<a name="l00452"></a>00452 <span class="preprocessor">#else</span>
<a name="l00453"></a>00453 <span class="preprocessor"></span>      <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (ifp);
<a name="l00454"></a>00454 <span class="preprocessor">#endif </span><span class="comment">/* __bsdi__ */</span>
<a name="l00455"></a>00455       <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (ifp);
<a name="l00456"></a>00456 
<a name="l00457"></a>00457       <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
<a name="l00458"></a>00458     }
<a name="l00459"></a>00459   <span class="keywordflow">else</span>
<a name="l00460"></a>00460     <span class="comment">/*</span>
<a name="l00461"></a>00461 <span class="comment">     * Interface structure exists.  Adjust stored flags from</span>
<a name="l00462"></a>00462 <span class="comment">     * notification.  If interface has up-&gt;down or down-&gt;up</span>
<a name="l00463"></a>00463 <span class="comment">     * transition, call state change routines (to adjust routes,</span>
<a name="l00464"></a>00464 <span class="comment">     * notify routing daemons, etc.).  (Other flag changes are stored</span>
<a name="l00465"></a>00465 <span class="comment">     * but apparently do not trigger action.)</span>
<a name="l00466"></a>00466 <span class="comment">     */</span>
<a name="l00467"></a>00467     {
<a name="l00468"></a>00468       <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> != ifm-&gt;ifm_index)
<a name="l00469"></a>00469         {
<a name="l00470"></a>00470           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: index mismatch, ifname %s, ifp index %d, &quot;</span>
<a name="l00471"></a>00471                      <span class="stringliteral">&quot;ifm index %d&quot;</span>, 
<a name="l00472"></a>00472                      __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, ifm-&gt;ifm_index);
<a name="l00473"></a>00473           <span class="keywordflow">return</span> -1;
<a name="l00474"></a>00474         }
<a name="l00475"></a>00475       
<a name="l00476"></a>00476 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT </span><span class="comment">/* translate BSD kernel msg for link-state */</span>
<a name="l00477"></a>00477       bsd_linkdetect_translate(ifm);
<a name="l00478"></a>00478 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT */</span>
<a name="l00479"></a>00479 
<a name="l00480"></a>00480       <span class="comment">/* update flags and handle operative-&gt;inoperative transition, if any */</span>
<a name="l00481"></a>00481       <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, ifm-&gt;ifm_flags);
<a name="l00482"></a>00482       
<a name="l00483"></a>00483 <span class="preprocessor">#ifndef RTM_IFANNOUNCE</span>
<a name="l00484"></a>00484 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
<a name="l00485"></a>00485           {
<a name="l00486"></a>00486             <span class="comment">/* No RTM_IFANNOUNCE on this platform, so we can never</span>
<a name="l00487"></a>00487 <span class="comment">             * distinguish between ~IFF_UP and delete. We must presume</span>
<a name="l00488"></a>00488 <span class="comment">             * it has been deleted.</span>
<a name="l00489"></a>00489 <span class="comment">             * Eg, Solaris will not notify us of unplumb.</span>
<a name="l00490"></a>00490 <span class="comment">             *</span>
<a name="l00491"></a>00491 <span class="comment">             * XXX: Fixme - this should be runtime detected</span>
<a name="l00492"></a>00492 <span class="comment">             * So that a binary compiled on a system with IFANNOUNCE</span>
<a name="l00493"></a>00493 <span class="comment">             * will still behave correctly if run on a platform without</span>
<a name="l00494"></a>00494 <span class="comment">             */</span>
<a name="l00495"></a>00495             <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (ifp);
<a name="l00496"></a>00496           }
<a name="l00497"></a>00497 <span class="preprocessor">#endif </span><span class="comment">/* RTM_IFANNOUNCE */</span>
<a name="l00498"></a>00498       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
<a name="l00499"></a>00499       {
<a name="l00500"></a>00500 <span class="preprocessor">#if defined(__bsdi__)</span>
<a name="l00501"></a>00501 <span class="preprocessor"></span>        <a class="code" href="mtu__kvm_8c.html#a22befd5d91949a56b0bc9ec619706ba3">if_kvm_get_mtu</a> (ifp);
<a name="l00502"></a>00502 <span class="preprocessor">#else</span>
<a name="l00503"></a>00503 <span class="preprocessor"></span>        <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (ifp);
<a name="l00504"></a>00504 <span class="preprocessor">#endif </span><span class="comment">/* __bsdi__ */</span>
<a name="l00505"></a>00505         <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (ifp);
<a name="l00506"></a>00506       }
<a name="l00507"></a>00507     }
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 <span class="preprocessor">#ifdef HAVE_NET_RT_IFLIST</span>
<a name="l00510"></a>00510 <span class="preprocessor"></span>  ifp-&gt;stats = ifm-&gt;ifm_data;
<a name="l00511"></a>00511 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_NET_RT_IFLIST */</span>
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00514"></a>00514     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: interface %s index %d&quot;</span>, 
<a name="l00515"></a>00515                 __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   <span class="keywordflow">return</span> 0;
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">/* Address read from struct ifa_msghdr. */</span>
<a name="l00521"></a>00521 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00522"></a><a class="code" href="kernel__socket_8c.html#a4d3b3add5b26bd61a5eca2cd442b276e">00522</a> <a class="code" href="kernel__socket_8c.html#a4d3b3add5b26bd61a5eca2cd442b276e">ifam_read_mesg</a> (<span class="keyword">struct</span> ifa_msghdr *ifm,
<a name="l00523"></a>00523         <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *addr,
<a name="l00524"></a>00524         <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *mask,
<a name="l00525"></a>00525         <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *brd,
<a name="l00526"></a>00526         <span class="keywordtype">char</span> *ifname,
<a name="l00527"></a>00527         <span class="keywordtype">short</span> *ifnlen)
<a name="l00528"></a>00528 {
<a name="l00529"></a>00529   caddr_t pnt, end;
<a name="l00530"></a>00530   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> dst;
<a name="l00531"></a>00531   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> gateway;
<a name="l00532"></a>00532 
<a name="l00533"></a>00533   pnt = (caddr_t)(ifm + 1);
<a name="l00534"></a>00534   end = ((caddr_t)ifm) + ifm-&gt;ifam_msglen;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="comment">/* Be sure structure is cleared */</span>
<a name="l00537"></a>00537   memset (mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00538"></a>00538   memset (addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00539"></a>00539   memset (brd, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00540"></a>00540   memset (&amp;dst, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00541"></a>00541   memset (&amp;gateway, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00542"></a>00542 
<a name="l00543"></a>00543   <span class="comment">/* We fetch each socket variable into sockunion. */</span>
<a name="l00544"></a>00544   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (&amp;dst, RTA_DST, ifm-&gt;ifam_addrs, pnt);
<a name="l00545"></a>00545   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (&amp;gateway, RTA_GATEWAY, ifm-&gt;ifam_addrs, pnt);
<a name="l00546"></a>00546   <a class="code" href="kernel__socket_8c.html#a649ad50a5b9df8693536089a2490692d">RTA_ATTR_GET</a> (mask, RTA_NETMASK, ifm-&gt;ifam_addrs, pnt);
<a name="l00547"></a>00547   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_GENMASK, ifm-&gt;ifam_addrs, pnt);
<a name="l00548"></a>00548   <a class="code" href="kernel__socket_8c.html#a81155b84f08593daf8f0585445bba88a">RTA_NAME_GET</a> (ifname, RTA_IFP, ifm-&gt;ifam_addrs, pnt, *ifnlen);
<a name="l00549"></a>00549   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (addr, RTA_IFA, ifm-&gt;ifam_addrs, pnt);
<a name="l00550"></a>00550   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_AUTHOR, ifm-&gt;ifam_addrs, pnt);
<a name="l00551"></a>00551   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (brd, RTA_BRD, ifm-&gt;ifam_addrs, pnt);
<a name="l00552"></a>00552 
<a name="l00553"></a>00553   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00554"></a>00554     {
<a name="l00555"></a>00555       <span class="keywordflow">switch</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a>(addr))
<a name="l00556"></a>00556         {
<a name="l00557"></a>00557     <span class="keywordflow">case</span> AF_INET:
<a name="l00558"></a>00558       {
<a name="l00559"></a>00559         <span class="keywordtype">char</span> buf[4][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00560"></a>00560         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifindex %d, ifname %s, ifam_addrs 0x%x, &quot;</span>
<a name="l00561"></a>00561             <span class="stringliteral">&quot;ifam_flags 0x%x, addr %s/%d broad %s dst %s &quot;</span>
<a name="l00562"></a>00562             <span class="stringliteral">&quot;gateway %s&quot;</span>,
<a name="l00563"></a>00563             __func__, ifm-&gt;ifam_index,
<a name="l00564"></a>00564             (ifnlen ? ifname : <span class="stringliteral">&quot;(nil)&quot;</span>), ifm-&gt;ifam_addrs,
<a name="l00565"></a>00565             ifm-&gt;ifam_flags,
<a name="l00566"></a>00566             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET,&amp;addr-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00567"></a>00567                       buf[0],<span class="keyword">sizeof</span>(buf[0])),
<a name="l00568"></a>00568             <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a>(mask-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr),
<a name="l00569"></a>00569             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET,&amp;brd-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00570"></a>00570                       buf[1],<span class="keyword">sizeof</span>(buf[1])),
<a name="l00571"></a>00571             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET,&amp;dst.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00572"></a>00572                       buf[2],<span class="keyword">sizeof</span>(buf[2])),
<a name="l00573"></a>00573             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET,&amp;gateway.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00574"></a>00574                       buf[3],<span class="keyword">sizeof</span>(buf[3])));
<a name="l00575"></a>00575       }
<a name="l00576"></a>00576       <span class="keywordflow">break</span>;
<a name="l00577"></a>00577 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00578"></a>00578 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00579"></a>00579       {
<a name="l00580"></a>00580         <span class="keywordtype">char</span> buf[4][<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l00581"></a>00581         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifindex %d, ifname %s, ifam_addrs 0x%x, &quot;</span>
<a name="l00582"></a>00582             <span class="stringliteral">&quot;ifam_flags 0x%x, addr %s/%d broad %s dst %s &quot;</span>
<a name="l00583"></a>00583             <span class="stringliteral">&quot;gateway %s&quot;</span>,
<a name="l00584"></a>00584             __func__, ifm-&gt;ifam_index, 
<a name="l00585"></a>00585             (ifnlen ? ifname : <span class="stringliteral">&quot;(nil)&quot;</span>), ifm-&gt;ifam_addrs,
<a name="l00586"></a>00586             ifm-&gt;ifam_flags,
<a name="l00587"></a>00587             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6,&amp;addr-&gt;sin6.sin6_addr,
<a name="l00588"></a>00588                       buf[0],<span class="keyword">sizeof</span>(buf[0])),
<a name="l00589"></a>00589             ip6_masklen(mask-&gt;sin6.sin6_addr),
<a name="l00590"></a>00590             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6,&amp;brd-&gt;sin6.sin6_addr,
<a name="l00591"></a>00591                       buf[1],<span class="keyword">sizeof</span>(buf[1])),
<a name="l00592"></a>00592             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6,&amp;dst.sin6.sin6_addr,
<a name="l00593"></a>00593                       buf[2],<span class="keyword">sizeof</span>(buf[2])),
<a name="l00594"></a>00594             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6,&amp;gateway.sin6.sin6_addr,
<a name="l00595"></a>00595                       buf[3],<span class="keyword">sizeof</span>(buf[3])));
<a name="l00596"></a>00596       }
<a name="l00597"></a>00597       <span class="keywordflow">break</span>;
<a name="l00598"></a>00598 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00599"></a>00599         <span class="keywordflow">default</span>:
<a name="l00600"></a>00600       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifindex %d, ifname %s, ifam_addrs 0x%x&quot;</span>,
<a name="l00601"></a>00601               __func__, ifm-&gt;ifam_index, 
<a name="l00602"></a>00602               (ifnlen ? ifname : <span class="stringliteral">&quot;(nil)&quot;</span>), ifm-&gt;ifam_addrs);
<a name="l00603"></a>00603       <span class="keywordflow">break</span>;
<a name="l00604"></a>00604         }
<a name="l00605"></a>00605     }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607   <span class="comment">/* Assert read up end point matches to end point */</span>
<a name="l00608"></a>00608   <span class="keywordflow">if</span> (pnt != end)
<a name="l00609"></a>00609     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ifam_read() does&#39;t read all socket data&quot;</span>);
<a name="l00610"></a>00610 }
<a name="l00611"></a>00611 
<a name="l00612"></a>00612 <span class="comment">/* Interface&#39;s address information get. */</span>
<a name="l00613"></a>00613 <span class="keywordtype">int</span>
<a name="l00614"></a><a class="code" href="kernel__socket_8h.html#af2ba6a009426105d5f2896b61d3a61d1">00614</a> <a class="code" href="kernel__socket_8c.html#a13d417744f4455ef28100a3907b3a7dd">ifam_read</a> (<span class="keyword">struct</span> ifa_msghdr *ifam)
<a name="l00615"></a>00615 {
<a name="l00616"></a>00616   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00617"></a>00617   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> addr, mask, brd;
<a name="l00618"></a>00618   <span class="keywordtype">char</span> ifname[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>];
<a name="l00619"></a>00619   <span class="keywordtype">short</span> ifnlen = 0;
<a name="l00620"></a>00620   <span class="keywordtype">char</span> isalias = 0;
<a name="l00621"></a>00621   <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a> = 0;
<a name="l00622"></a>00622   
<a name="l00623"></a>00623   ifname[0] = ifname[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a> - 1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00624"></a>00624   
<a name="l00625"></a>00625   <span class="comment">/* Allocate and read address information. */</span>
<a name="l00626"></a>00626   <a class="code" href="kernel__socket_8c.html#a4d3b3add5b26bd61a5eca2cd442b276e">ifam_read_mesg</a> (ifam, &amp;addr, &amp;mask, &amp;brd, ifname, &amp;ifnlen);
<a name="l00627"></a>00627   
<a name="l00628"></a>00628   <span class="keywordflow">if</span> ((ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a>(ifam-&gt;ifam_index)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00629"></a>00629     {
<a name="l00630"></a>00630       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: no interface for ifname %s, index %d&quot;</span>, 
<a name="l00631"></a>00631                  __func__, ifname, ifam-&gt;ifam_index);
<a name="l00632"></a>00632       <span class="keywordflow">return</span> -1;
<a name="l00633"></a>00633     }
<a name="l00634"></a>00634   
<a name="l00635"></a>00635   <span class="keywordflow">if</span> (ifnlen &amp;&amp; strncmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifname, <a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>))
<a name="l00636"></a>00636     isalias = 1;
<a name="l00637"></a>00637   
<a name="l00638"></a>00638   <span class="comment">/* N.B. The info in ifa_msghdr does not tell us whether the RTA_BRD</span>
<a name="l00639"></a>00639 <span class="comment">     field contains a broadcast address or a peer address, so we are forced to</span>
<a name="l00640"></a>00640 <span class="comment">     rely upon the interface type. */</span>
<a name="l00641"></a>00641   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a>(ifp))
<a name="l00642"></a>00642     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(flags, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>);
<a name="l00643"></a>00643 
<a name="l00644"></a>00644 <span class="preprocessor">#if 0</span>
<a name="l00645"></a>00645 <span class="preprocessor"></span>  <span class="comment">/* it might seem cute to grab the interface metric here, however</span>
<a name="l00646"></a>00646 <span class="comment">   * we&#39;re processing an address update message, and so some systems</span>
<a name="l00647"></a>00647 <span class="comment">   * (e.g. FBSD) dont bother to fill in ifam_metric. Disabled, but left</span>
<a name="l00648"></a>00648 <span class="comment">   * in deliberately, as comment.</span>
<a name="l00649"></a>00649 <span class="comment">   */</span>
<a name="l00650"></a>00650   ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = ifam-&gt;ifam_metric;
<a name="l00651"></a>00651 <span class="preprocessor">#endif</span>
<a name="l00652"></a>00652 <span class="preprocessor"></span>
<a name="l00653"></a>00653   <span class="comment">/* Add connected address. */</span>
<a name="l00654"></a>00654   <span class="keywordflow">switch</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a> (&amp;addr))
<a name="l00655"></a>00655     {
<a name="l00656"></a>00656     <span class="keywordflow">case</span> AF_INET:
<a name="l00657"></a>00657       <span class="keywordflow">if</span> (ifam-&gt;ifam_type == RTM_NEWADDR)
<a name="l00658"></a>00658     <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (ifp, flags, &amp;addr.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, 
<a name="l00659"></a>00659                 <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr),
<a name="l00660"></a>00660                 &amp;brd.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr,
<a name="l00661"></a>00661                 (isalias ? ifname : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));
<a name="l00662"></a>00662       <span class="keywordflow">else</span>
<a name="l00663"></a>00663     <a class="code" href="connected_8c.html#a751e06dc0752d03ac5c08c34b99d83f7">connected_delete_ipv4</a> (ifp, flags, &amp;addr.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, 
<a name="l00664"></a>00664                    <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr),
<a name="l00665"></a>00665                    &amp;brd.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
<a name="l00666"></a>00666       <span class="keywordflow">break</span>;
<a name="l00667"></a>00667 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00668"></a>00668 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00669"></a>00669       <span class="comment">/* Unset interface index from link-local address when IPv6 stack</span>
<a name="l00670"></a>00670 <span class="comment">     is KAME. */</span>
<a name="l00671"></a>00671       <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;addr.sin6.sin6_addr))
<a name="l00672"></a>00672     <a class="code" href="sockunion_8h.html#ac5e492dc1d10f95eb64eaac05ec9bab0">SET_IN6_LINKLOCAL_IFINDEX</a> (addr.sin6.sin6_addr, 0);
<a name="l00673"></a>00673 
<a name="l00674"></a>00674       <span class="keywordflow">if</span> (ifam-&gt;ifam_type == RTM_NEWADDR)
<a name="l00675"></a>00675     connected_add_ipv6 (ifp, flags, &amp;addr.sin6.sin6_addr, 
<a name="l00676"></a>00676                 ip6_masklen (mask.sin6.sin6_addr),
<a name="l00677"></a>00677                 &amp;brd.sin6.sin6_addr,
<a name="l00678"></a>00678                 (isalias ? ifname : NULL));
<a name="l00679"></a>00679       <span class="keywordflow">else</span>
<a name="l00680"></a>00680     connected_delete_ipv6 (ifp,
<a name="l00681"></a>00681                    &amp;addr.sin6.sin6_addr, 
<a name="l00682"></a>00682                    ip6_masklen (mask.sin6.sin6_addr),
<a name="l00683"></a>00683                    &amp;brd.sin6.sin6_addr);
<a name="l00684"></a>00684       <span class="keywordflow">break</span>;
<a name="l00685"></a>00685 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00686"></a>00686     <span class="keywordflow">default</span>:
<a name="l00687"></a>00687       <span class="comment">/* Unsupported family silently ignore... */</span>
<a name="l00688"></a>00688       <span class="keywordflow">break</span>;
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690   
<a name="l00691"></a>00691   <span class="comment">/* Check interface flag for implicit up of the interface. */</span>
<a name="l00692"></a>00692   <a class="code" href="interface_8c.html#a284b04b55021b6c0086761ea4c400214">if_refresh</a> (ifp);
<a name="l00693"></a>00693 
<a name="l00694"></a>00694 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00695"></a>00695 <span class="preprocessor"></span>  <span class="comment">/* In addition to lacking IFANNOUNCE, on SUNOS IFF_UP is strange. </span>
<a name="l00696"></a>00696 <span class="comment">   * See comments for SUNOS_5 in interface.c::if_flags_mangle.</span>
<a name="l00697"></a>00697 <span class="comment">   * </span>
<a name="l00698"></a>00698 <span class="comment">   * Here we take care of case where the real IFF_UP was previously</span>
<a name="l00699"></a>00699 <span class="comment">   * unset (as kept in struct zebra_if.primary_state) and the mangled</span>
<a name="l00700"></a>00700 <span class="comment">   * IFF_UP (ie IFF_UP set || listcount(connected) has now transitioned</span>
<a name="l00701"></a>00701 <span class="comment">   * to unset due to the lost non-primary address having DELADDR&#39;d.</span>
<a name="l00702"></a>00702 <span class="comment">   *</span>
<a name="l00703"></a>00703 <span class="comment">   * we must delete the interface, because in between here and next</span>
<a name="l00704"></a>00704 <span class="comment">   * event for this interface-name the administrator could unplumb</span>
<a name="l00705"></a>00705 <span class="comment">   * and replumb the interface.</span>
<a name="l00706"></a>00706 <span class="comment">   */</span>
<a name="l00707"></a>00707   <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
<a name="l00708"></a>00708     <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (ifp);
<a name="l00709"></a>00709 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00710"></a>00710   
<a name="l00711"></a>00711   <span class="keywordflow">return</span> 0;
<a name="l00712"></a>00712 }
<a name="l00713"></a>00713 
<a name="l00714"></a>00714 <span class="comment">/* Interface function for reading kernel routing table information. */</span>
<a name="l00715"></a>00715 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00716"></a><a class="code" href="kernel__socket_8c.html#af1b66c3a30aa8673ce6c36a558aa6c8d">00716</a> <a class="code" href="kernel__socket_8c.html#af1b66c3a30aa8673ce6c36a558aa6c8d">rtm_read_mesg</a> (<span class="keyword">struct</span> rt_msghdr *rtm,
<a name="l00717"></a>00717            <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *dest,
<a name="l00718"></a>00718            <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *mask,
<a name="l00719"></a>00719            <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *gate,
<a name="l00720"></a>00720            <span class="keywordtype">char</span> *ifname,
<a name="l00721"></a>00721            <span class="keywordtype">short</span> *ifnlen)
<a name="l00722"></a>00722 {
<a name="l00723"></a>00723   caddr_t pnt, end;
<a name="l00724"></a>00724 
<a name="l00725"></a>00725   <span class="comment">/* Pnt points out socket data start point. */</span>
<a name="l00726"></a>00726   pnt = (caddr_t)(rtm + 1);
<a name="l00727"></a>00727   end = ((caddr_t)rtm) + rtm-&gt;rtm_msglen;
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <span class="comment">/* rt_msghdr version check. */</span>
<a name="l00730"></a>00730   <span class="keywordflow">if</span> (rtm-&gt;rtm_version != RTM_VERSION) 
<a name="l00731"></a>00731       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING,
<a name="l00732"></a>00732           <span class="stringliteral">&quot;Routing message version different %d should be %d.&quot;</span>
<a name="l00733"></a>00733           <span class="stringliteral">&quot;This may cause problem\n&quot;</span>, rtm-&gt;rtm_version, RTM_VERSION);
<a name="l00734"></a>00734   
<a name="l00735"></a>00735   <span class="comment">/* Be sure structure is cleared */</span>
<a name="l00736"></a>00736   memset (dest, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00737"></a>00737   memset (gate, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00738"></a>00738   memset (mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00739"></a>00739 
<a name="l00740"></a>00740   <span class="comment">/* We fetch each socket variable into sockunion. */</span>
<a name="l00741"></a>00741   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (dest, RTA_DST, rtm-&gt;rtm_addrs, pnt);
<a name="l00742"></a>00742   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (gate, RTA_GATEWAY, rtm-&gt;rtm_addrs, pnt);
<a name="l00743"></a>00743   <a class="code" href="kernel__socket_8c.html#a649ad50a5b9df8693536089a2490692d">RTA_ATTR_GET</a> (mask, RTA_NETMASK, rtm-&gt;rtm_addrs, pnt);
<a name="l00744"></a>00744   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_GENMASK, rtm-&gt;rtm_addrs, pnt);
<a name="l00745"></a>00745   <a class="code" href="kernel__socket_8c.html#a81155b84f08593daf8f0585445bba88a">RTA_NAME_GET</a> (ifname, RTA_IFP, rtm-&gt;rtm_addrs, pnt, *ifnlen);
<a name="l00746"></a>00746   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_IFA, rtm-&gt;rtm_addrs, pnt);
<a name="l00747"></a>00747   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_AUTHOR, rtm-&gt;rtm_addrs, pnt);
<a name="l00748"></a>00748   <a class="code" href="kernel__socket_8c.html#a320d212ad09e1667ef63896eb9d4b44f">RTA_ADDR_GET</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, RTA_BRD, rtm-&gt;rtm_addrs, pnt);
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <span class="comment">/* If there is netmask information set it&#39;s family same as</span>
<a name="l00751"></a>00751 <span class="comment">     destination family*/</span>
<a name="l00752"></a>00752   <span class="keywordflow">if</span> (rtm-&gt;rtm_addrs &amp; RTA_NETMASK)
<a name="l00753"></a>00753     mask-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family = dest-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family;
<a name="l00754"></a>00754 
<a name="l00755"></a>00755   <span class="comment">/* Assert read up to the end of pointer. */</span>
<a name="l00756"></a>00756   <span class="keywordflow">if</span> (pnt != end) 
<a name="l00757"></a>00757       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;rtm_read() does&#39;t read all socket data.&quot;</span>);
<a name="l00758"></a>00758 
<a name="l00759"></a>00759   <span class="keywordflow">return</span> rtm-&gt;rtm_flags;
<a name="l00760"></a>00760 }
<a name="l00761"></a>00761 
<a name="l00762"></a>00762 <span class="keywordtype">void</span>
<a name="l00763"></a><a class="code" href="kernel__socket_8h.html#a58dee3cc734a4253629a230c2b5facb3">00763</a> <a class="code" href="kernel__socket_8c.html#a78dde4b354c422ab8da1f12313e2b242">rtm_read</a> (<span class="keyword">struct</span> rt_msghdr *rtm)
<a name="l00764"></a>00764 {
<a name="l00765"></a>00765   <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>;
<a name="l00766"></a>00766   u_char zebra_flags;
<a name="l00767"></a>00767   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> dest, mask, gate;
<a name="l00768"></a>00768   <span class="keywordtype">char</span> ifname[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a> + 1];
<a name="l00769"></a>00769   <span class="keywordtype">short</span> ifnlen = 0;
<a name="l00770"></a>00770 
<a name="l00771"></a>00771   zebra_flags = 0;
<a name="l00772"></a>00772 
<a name="l00773"></a>00773   <span class="comment">/* Read destination and netmask and gateway from rtm message</span>
<a name="l00774"></a>00774 <span class="comment">     structure. */</span>
<a name="l00775"></a>00775   flags = <a class="code" href="kernel__socket_8c.html#af1b66c3a30aa8673ce6c36a558aa6c8d">rtm_read_mesg</a> (rtm, &amp;dest, &amp;mask, &amp;gate, ifname, &amp;ifnlen);
<a name="l00776"></a>00776   <span class="keywordflow">if</span> (!(flags &amp; RTF_DONE))
<a name="l00777"></a>00777     <span class="keywordflow">return</span>;
<a name="l00778"></a>00778   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00779"></a>00779     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: got rtm of type %d (%s)&quot;</span>, __func__, rtm-&gt;rtm_type,
<a name="l00780"></a>00780       <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type));
<a name="l00781"></a>00781 
<a name="l00782"></a>00782 <span class="preprocessor">#ifdef RTF_CLONED   </span><span class="comment">/*bsdi, netbsd 1.6*/</span>
<a name="l00783"></a>00783   <span class="keywordflow">if</span> (flags &amp; RTF_CLONED)
<a name="l00784"></a>00784     <span class="keywordflow">return</span>;
<a name="l00785"></a>00785 <span class="preprocessor">#endif</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span><span class="preprocessor">#ifdef RTF_WASCLONED    </span><span class="comment">/*freebsd*/</span>
<a name="l00787"></a>00787   <span class="keywordflow">if</span> (flags &amp; RTF_WASCLONED)
<a name="l00788"></a>00788     <span class="keywordflow">return</span>;
<a name="l00789"></a>00789 <span class="preprocessor">#endif</span>
<a name="l00790"></a>00790 <span class="preprocessor"></span>
<a name="l00791"></a>00791   <span class="keywordflow">if</span> ((rtm-&gt;rtm_type == RTM_ADD) &amp;&amp; ! (flags &amp; RTF_UP))
<a name="l00792"></a>00792     <span class="keywordflow">return</span>;
<a name="l00793"></a>00793 
<a name="l00794"></a>00794   <span class="comment">/* This is connected route. */</span>
<a name="l00795"></a>00795   <span class="keywordflow">if</span> (! (flags &amp; RTF_GATEWAY))
<a name="l00796"></a>00796       <span class="keywordflow">return</span>;
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   <span class="keywordflow">if</span> (flags &amp; RTF_PROTO1)
<a name="l00799"></a>00799     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (zebra_flags, <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>);
<a name="l00800"></a>00800 
<a name="l00801"></a>00801   <span class="comment">/* This is persistent route. */</span>
<a name="l00802"></a>00802   <span class="keywordflow">if</span> (flags &amp; RTF_STATIC)
<a name="l00803"></a>00803     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (zebra_flags, <a class="code" href="zebra_8h.html#ab431b0ccaaad3c3b3db45ee82afeedbc">ZEBRA_FLAG_STATIC</a>);
<a name="l00804"></a>00804 
<a name="l00805"></a>00805   <span class="comment">/* This is a reject or blackhole route */</span>
<a name="l00806"></a>00806   <span class="keywordflow">if</span> (flags &amp; RTF_REJECT)
<a name="l00807"></a>00807     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (zebra_flags, <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>);
<a name="l00808"></a>00808   <span class="keywordflow">if</span> (flags &amp; RTF_BLACKHOLE)
<a name="l00809"></a>00809     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (zebra_flags, <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>);
<a name="l00810"></a>00810 
<a name="l00811"></a>00811   <span class="keywordflow">if</span> (dest.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00812"></a>00812     {
<a name="l00813"></a>00813       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00814"></a>00814 
<a name="l00815"></a>00815       p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00816"></a>00816       p.prefix = dest.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
<a name="l00817"></a>00817       <span class="keywordflow">if</span> (flags &amp; RTF_HOST)
<a name="l00818"></a>00818     p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00819"></a>00819       <span class="keywordflow">else</span>
<a name="l00820"></a>00820     p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
<a name="l00821"></a>00821       
<a name="l00822"></a>00822       <span class="comment">/* Catch self originated messages and match them against our current RIB.</span>
<a name="l00823"></a>00823 <span class="comment">       * At the same time, ignore unconfirmed messages, they should be tracked</span>
<a name="l00824"></a>00824 <span class="comment">       * by rtm_write() and kernel_rtm_ipv4().</span>
<a name="l00825"></a>00825 <span class="comment">       */</span>
<a name="l00826"></a>00826       <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTM_GET &amp;&amp; rtm-&gt;rtm_pid == <a class="code" href="zebra_2main_8c.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>)
<a name="l00827"></a>00827       {
<a name="l00828"></a>00828         <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], gate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00829"></a>00829         <span class="keywordtype">int</span> ret;
<a name="l00830"></a>00830         <span class="keywordflow">if</span> (! <a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
<a name="l00831"></a>00831           <span class="keywordflow">return</span>;
<a name="l00832"></a>00832         ret = <a class="code" href="rib_8h.html#adcea093692973a8a89f900090dd98efa">rib_lookup_ipv4_route</a> (&amp;p, &amp;gate); 
<a name="l00833"></a>00833         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p.prefix, buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
<a name="l00834"></a>00834         <span class="keywordflow">switch</span> (rtm-&gt;rtm_type)
<a name="l00835"></a>00835         {
<a name="l00836"></a>00836           <span class="keywordflow">case</span> RTM_ADD:
<a name="l00837"></a>00837           <span class="keywordflow">case</span> RTM_GET:
<a name="l00838"></a>00838           <span class="keywordflow">case</span> RTM_CHANGE:
<a name="l00839"></a>00839             <span class="comment">/* The kernel notifies us about a new route in FIB created by us.</span>
<a name="l00840"></a>00840 <span class="comment">               Do we have a correspondent entry in our RIB? */</span>
<a name="l00841"></a>00841             <span class="keywordflow">switch</span> (ret)
<a name="l00842"></a>00842             {
<a name="l00843"></a>00843               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>:
<a name="l00844"></a>00844                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: desync: RR isn&#39;t yet in RIB, while already in FIB&quot;</span>,
<a name="l00845"></a>00845                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00846"></a>00846                 <span class="keywordflow">break</span>;
<a name="l00847"></a>00847               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a290672d06c3ac72507581e01b0355f54">ZEBRA_RIB_FOUND_CONNECTED</a>:
<a name="l00848"></a>00848               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a7dca43fe20de4c7ec983e753a2770eca">ZEBRA_RIB_FOUND_NOGATE</a>:
<a name="l00849"></a>00849                 <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;gate.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, gate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
<a name="l00850"></a>00850                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: desync: RR is in RIB, but gate differs (ours is %s)&quot;</span>,
<a name="l00851"></a>00851                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, gate_buf);
<a name="l00852"></a>00852                 <span class="keywordflow">break</span>;
<a name="l00853"></a>00853               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a3a4f094d5db63d16353294cac5ce2939">ZEBRA_RIB_FOUND_EXACT</a>: <span class="comment">/* RIB RR == FIB RR */</span>
<a name="l00854"></a>00854                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: done Ok&quot;</span>,
<a name="l00855"></a>00855                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00856"></a>00856                 <a class="code" href="rib_8h.html#adc61871284bbff9f70de52e3b1399347">rib_lookup_and_dump</a> (&amp;p);
<a name="l00857"></a>00857                 <span class="keywordflow">return</span>;
<a name="l00858"></a>00858                 <span class="keywordflow">break</span>;
<a name="l00859"></a>00859             }
<a name="l00860"></a>00860             <span class="keywordflow">break</span>;
<a name="l00861"></a>00861           <span class="keywordflow">case</span> RTM_DELETE:
<a name="l00862"></a>00862             <span class="comment">/* The kernel notifies us about a route deleted by us. Do we still</span>
<a name="l00863"></a>00863 <span class="comment">               have it in the RIB? Do we have anything instead? */</span>
<a name="l00864"></a>00864             <span class="keywordflow">switch</span> (ret)
<a name="l00865"></a>00865             {
<a name="l00866"></a>00866               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a3a4f094d5db63d16353294cac5ce2939">ZEBRA_RIB_FOUND_EXACT</a>:
<a name="l00867"></a>00867                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: desync: RR is still in RIB, while already not in FIB&quot;</span>,
<a name="l00868"></a>00868                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00869"></a>00869                 <a class="code" href="rib_8h.html#adc61871284bbff9f70de52e3b1399347">rib_lookup_and_dump</a> (&amp;p);
<a name="l00870"></a>00870                 <span class="keywordflow">break</span>;
<a name="l00871"></a>00871               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a290672d06c3ac72507581e01b0355f54">ZEBRA_RIB_FOUND_CONNECTED</a>:
<a name="l00872"></a>00872               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a7dca43fe20de4c7ec983e753a2770eca">ZEBRA_RIB_FOUND_NOGATE</a>:
<a name="l00873"></a>00873                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: desync: RR is still in RIB, plus gate differs&quot;</span>,
<a name="l00874"></a>00874                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00875"></a>00875                 <a class="code" href="rib_8h.html#adc61871284bbff9f70de52e3b1399347">rib_lookup_and_dump</a> (&amp;p);
<a name="l00876"></a>00876                 <span class="keywordflow">break</span>;
<a name="l00877"></a>00877               <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>: <span class="comment">/* RIB RR == FIB RR */</span>
<a name="l00878"></a>00878                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %s/%d: done Ok&quot;</span>,
<a name="l00879"></a>00879                   __func__, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type), buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00880"></a>00880                 <a class="code" href="rib_8h.html#adc61871284bbff9f70de52e3b1399347">rib_lookup_and_dump</a> (&amp;p);
<a name="l00881"></a>00881                 <span class="keywordflow">return</span>;
<a name="l00882"></a>00882                 <span class="keywordflow">break</span>;
<a name="l00883"></a>00883             }
<a name="l00884"></a>00884             <span class="keywordflow">break</span>;
<a name="l00885"></a>00885           <span class="keywordflow">default</span>:
<a name="l00886"></a>00886             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: warning: loopback RTM of type %s received&quot;</span>,
<a name="l00887"></a>00887               __func__, buf, p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type));
<a name="l00888"></a>00888         }
<a name="l00889"></a>00889         <span class="keywordflow">return</span>;
<a name="l00890"></a>00890       }
<a name="l00891"></a>00891 
<a name="l00892"></a>00892       <span class="comment">/* Change, delete the old prefix, we have no further information</span>
<a name="l00893"></a>00893 <span class="comment">       * to specify the route really</span>
<a name="l00894"></a>00894 <span class="comment">       */</span>
<a name="l00895"></a>00895       <span class="keywordflow">if</span> (rtm-&gt;rtm_type == RTM_CHANGE)
<a name="l00896"></a>00896         <a class="code" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, &amp;p,
<a name="l00897"></a>00897                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00898"></a>00898       
<a name="l00899"></a>00899       <span class="keywordflow">if</span> (rtm-&gt;rtm_type == RTM_GET 
<a name="l00900"></a>00900           || rtm-&gt;rtm_type == RTM_ADD
<a name="l00901"></a>00901           || rtm-&gt;rtm_type == RTM_CHANGE)
<a name="l00902"></a>00902     <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, 
<a name="l00903"></a>00903               &amp;p, &amp;gate.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0, 0, 0);
<a name="l00904"></a>00904       <span class="keywordflow">else</span>
<a name="l00905"></a>00905     <a class="code" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, 
<a name="l00906"></a>00906               &amp;p, &amp;gate.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, 0, 0);
<a name="l00907"></a>00907     }
<a name="l00908"></a>00908 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00909"></a>00909 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (dest.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00910"></a>00910     {
<a name="l00911"></a>00911       <span class="comment">/* One day we might have a debug section here like one in the</span>
<a name="l00912"></a>00912 <span class="comment">       * IPv4 case above. Just ignore own messages at the moment.</span>
<a name="l00913"></a>00913 <span class="comment">       */</span>
<a name="l00914"></a>00914       <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTM_GET &amp;&amp; rtm-&gt;rtm_pid == <a class="code" href="zebra_2main_8c.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>)
<a name="l00915"></a>00915         <span class="keywordflow">return</span>;
<a name="l00916"></a>00916       <span class="keyword">struct </span>prefix_ipv6 p;
<a name="l00917"></a>00917       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex = 0;
<a name="l00918"></a>00918 
<a name="l00919"></a>00919       p.family = AF_INET6;
<a name="l00920"></a>00920       p.prefix = dest.sin6.sin6_addr;
<a name="l00921"></a>00921       <span class="keywordflow">if</span> (flags &amp; RTF_HOST)
<a name="l00922"></a>00922     p.prefixlen = <a class="code" href="prefix_8h.html#af240d7cd80eb12fc2e7e73a36e506131">IPV6_MAX_PREFIXLEN</a>;
<a name="l00923"></a>00923       <span class="keywordflow">else</span>
<a name="l00924"></a>00924     p.prefixlen = ip6_masklen (mask.sin6.sin6_addr);
<a name="l00925"></a>00925 
<a name="l00926"></a>00926 <span class="preprocessor">#ifdef KAME</span>
<a name="l00927"></a>00927 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;gate.sin6.sin6_addr))
<a name="l00928"></a>00928     {
<a name="l00929"></a>00929       ifindex = <a class="code" href="sockunion_8h.html#a054cf6fda7e526f269ca64bb1002c067">IN6_LINKLOCAL_IFINDEX</a> (gate.sin6.sin6_addr);
<a name="l00930"></a>00930       <a class="code" href="sockunion_8h.html#ac5e492dc1d10f95eb64eaac05ec9bab0">SET_IN6_LINKLOCAL_IFINDEX</a> (gate.sin6.sin6_addr, 0);
<a name="l00931"></a>00931     }
<a name="l00932"></a>00932 <span class="preprocessor">#endif </span><span class="comment">/* KAME */</span>
<a name="l00933"></a>00933 
<a name="l00934"></a>00934       <span class="comment">/* CHANGE: delete the old prefix, we have no further information</span>
<a name="l00935"></a>00935 <span class="comment">       * to specify the route really</span>
<a name="l00936"></a>00936 <span class="comment">       */</span>
<a name="l00937"></a>00937       <span class="keywordflow">if</span> (rtm-&gt;rtm_type == RTM_CHANGE)
<a name="l00938"></a>00938         rib_delete_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, &amp;p,
<a name="l00939"></a>00939                          <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00940"></a>00940       
<a name="l00941"></a>00941       <span class="keywordflow">if</span> (rtm-&gt;rtm_type == RTM_GET 
<a name="l00942"></a>00942           || rtm-&gt;rtm_type == RTM_ADD
<a name="l00943"></a>00943           || rtm-&gt;rtm_type == RTM_CHANGE)
<a name="l00944"></a>00944     rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags,
<a name="l00945"></a>00945               &amp;p, &amp;gate.sin6.sin6_addr, ifindex, 0, 0, 0);
<a name="l00946"></a>00946       <span class="keywordflow">else</span>
<a name="l00947"></a>00947     rib_delete_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags,
<a name="l00948"></a>00948              &amp;p, &amp;gate.sin6.sin6_addr, ifindex, 0);
<a name="l00949"></a>00949     }
<a name="l00950"></a>00950 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00951"></a>00951 }
<a name="l00952"></a>00952 
<a name="l00953"></a>00953 <span class="comment">/* Interface function for the kernel routing table updates.  Support</span>
<a name="l00954"></a>00954 <span class="comment"> * for RTM_CHANGE will be needed.</span>
<a name="l00955"></a>00955 <span class="comment"> * Exported only for rt_socket.c</span>
<a name="l00956"></a>00956 <span class="comment"> */</span>
<a name="l00957"></a>00957 <span class="keywordtype">int</span>
<a name="l00958"></a><a class="code" href="rt__socket_8c.html#ae83413a0f6a15fa53dcf5befcebe9c2c">00958</a> <a class="code" href="kernel__socket_8c.html#ae83413a0f6a15fa53dcf5befcebe9c2c">rtm_write</a> (<span class="keywordtype">int</span> <a class="code" href="structmessage.html">message</a>,
<a name="l00959"></a>00959        <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *dest,
<a name="l00960"></a>00960        <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *mask,
<a name="l00961"></a>00961        <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *gate,
<a name="l00962"></a>00962        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index,
<a name="l00963"></a>00963        <span class="keywordtype">int</span> zebra_flags,
<a name="l00964"></a>00964        <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>)
<a name="l00965"></a>00965 {
<a name="l00966"></a>00966   <span class="keywordtype">int</span> ret;
<a name="l00967"></a>00967   caddr_t pnt;
<a name="l00968"></a>00968   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00969"></a>00969 
<a name="l00970"></a>00970   <span class="comment">/* Sequencial number of routing message. */</span>
<a name="l00971"></a>00971   <span class="keyword">static</span> <span class="keywordtype">int</span> msg_seq = 0;
<a name="l00972"></a>00972 
<a name="l00973"></a>00973   <span class="comment">/* Struct of rt_msghdr and buffer for storing socket&#39;s data. */</span>
<a name="l00974"></a>00974   <span class="keyword">struct </span>
<a name="l00975"></a>00975   {
<a name="l00976"></a>00976     <span class="keyword">struct </span>rt_msghdr rtm;
<a name="l00977"></a>00977     <span class="keywordtype">char</span> buf[512];
<a name="l00978"></a>00978   } <a class="code" href="structmsg.html">msg</a>;
<a name="l00979"></a>00979   
<a name="l00980"></a>00980   <span class="keywordflow">if</span> (<a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a> &lt; 0)
<a name="l00981"></a>00981     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a687118019065da5a34e06d98d56eb714">ZEBRA_ERR_EPERM</a>;
<a name="l00982"></a>00982 
<a name="l00983"></a>00983   <span class="comment">/* Clear and set rt_msghdr values */</span>
<a name="l00984"></a>00984   memset (&amp;<a class="code" href="structmsg.html">msg</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rt_msghdr));
<a name="l00985"></a>00985   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_version = RTM_VERSION;
<a name="l00986"></a>00986   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_type = message;
<a name="l00987"></a>00987   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_seq = msg_seq++;
<a name="l00988"></a>00988   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_addrs = RTA_DST;
<a name="l00989"></a>00989   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_addrs |= RTA_GATEWAY;
<a name="l00990"></a>00990   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags = RTF_UP;
<a name="l00991"></a>00991   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_index = index;
<a name="l00992"></a>00992 
<a name="l00993"></a>00993   <span class="keywordflow">if</span> (metric != 0)
<a name="l00994"></a>00994     {
<a name="l00995"></a>00995       <a class="code" href="structmsg.html">msg</a>.rtm.rtm_rmx.rmx_hopcount = metric;
<a name="l00996"></a>00996       <a class="code" href="structmsg.html">msg</a>.rtm.rtm_inits |= RTV_HOPCOUNT;
<a name="l00997"></a>00997     }
<a name="l00998"></a>00998 
<a name="l00999"></a>00999   ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (index);
<a name="l01000"></a>01000 
<a name="l01001"></a>01001   <span class="keywordflow">if</span> (gate &amp;&amp; message == RTM_ADD)
<a name="l01002"></a>01002     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= RTF_GATEWAY;
<a name="l01003"></a>01003 
<a name="l01004"></a>01004   <span class="comment">/* When RTF_CLONING is unavailable on BSD, should we set some</span>
<a name="l01005"></a>01005 <span class="comment">   * other flag instead?</span>
<a name="l01006"></a>01006 <span class="comment">   */</span>
<a name="l01007"></a>01007 <span class="preprocessor">#ifdef RTF_CLONING</span>
<a name="l01008"></a>01008 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (! gate &amp;&amp; message == RTM_ADD &amp;&amp; ifp &amp;&amp;
<a name="l01009"></a>01009       (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; IFF_POINTOPOINT) == 0)
<a name="l01010"></a>01010     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= RTF_CLONING;
<a name="l01011"></a>01011 <span class="preprocessor">#endif </span><span class="comment">/* RTF_CLONING */</span>
<a name="l01012"></a>01012 
<a name="l01013"></a>01013   <span class="comment">/* If no protocol specific gateway is specified, use link</span>
<a name="l01014"></a>01014 <span class="comment">     address for gateway. */</span>
<a name="l01015"></a>01015   <span class="keywordflow">if</span> (! gate)
<a name="l01016"></a>01016     {
<a name="l01017"></a>01017       <span class="keywordflow">if</span> (!ifp)
<a name="l01018"></a>01018         {
<a name="l01019"></a>01019           <span class="keywordtype">char</span> dest_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>] = <span class="stringliteral">&quot;NULL&quot;</span>, mask_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>] = <span class="stringliteral">&quot;255.255.255.255&quot;</span>;
<a name="l01020"></a>01020           <span class="keywordflow">if</span> (dest)
<a name="l01021"></a>01021             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;dest-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, dest_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
<a name="l01022"></a>01022           <span class="keywordflow">if</span> (mask)
<a name="l01023"></a>01023             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;mask-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, mask_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
<a name="l01024"></a>01024           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: %s/%s: gate == NULL and no gateway found for ifindex %d&quot;</span>,
<a name="l01025"></a>01025             __func__, dest_buf, mask_buf, index);
<a name="l01026"></a>01026           <span class="keywordflow">return</span> -1;
<a name="l01027"></a>01027         }
<a name="l01028"></a>01028       gate = (<span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *) &amp; ifp-&gt;sdl;
<a name="l01029"></a>01029     }
<a name="l01030"></a>01030 
<a name="l01031"></a>01031   <span class="keywordflow">if</span> (mask)
<a name="l01032"></a>01032     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_addrs |= RTA_NETMASK;
<a name="l01033"></a>01033   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (message == RTM_ADD) 
<a name="l01034"></a>01034     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= RTF_HOST;
<a name="l01035"></a>01035 
<a name="l01036"></a>01036   <span class="comment">/* Tagging route with flags */</span>
<a name="l01037"></a>01037   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= (RTF_PROTO1);
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   <span class="comment">/* Additional flags. */</span>
<a name="l01040"></a>01040   <span class="keywordflow">if</span> (zebra_flags &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>)
<a name="l01041"></a>01041     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= RTF_BLACKHOLE;
<a name="l01042"></a>01042   <span class="keywordflow">if</span> (zebra_flags &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>)
<a name="l01043"></a>01043     <a class="code" href="structmsg.html">msg</a>.rtm.rtm_flags |= RTF_REJECT;
<a name="l01044"></a>01044 
<a name="l01045"></a>01045 
<a name="l01046"></a>01046 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l01047"></a>01047 <span class="preprocessor"></span><span class="preprocessor">#define SOCKADDRSET(X,R) \</span>
<a name="l01048"></a>01048 <span class="preprocessor">  if (msg.rtm.rtm_addrs &amp; (R)) \</span>
<a name="l01049"></a>01049 <span class="preprocessor">    { \</span>
<a name="l01050"></a>01050 <span class="preprocessor">      int len = ROUNDUP ((X)-&gt;sa.sa_len); \</span>
<a name="l01051"></a>01051 <span class="preprocessor">      memcpy (pnt, (caddr_t)(X), len); \</span>
<a name="l01052"></a>01052 <span class="preprocessor">      pnt += len; \</span>
<a name="l01053"></a>01053 <span class="preprocessor">    }</span>
<a name="l01054"></a>01054 <span class="preprocessor"></span><span class="preprocessor">#else </span>
<a name="l01055"></a>01055 <span class="preprocessor"></span><span class="preprocessor">#define SOCKADDRSET(X,R) \</span>
<a name="l01056"></a>01056 <span class="preprocessor">  if (msg.rtm.rtm_addrs &amp; (R)) \</span>
<a name="l01057"></a>01057 <span class="preprocessor">    { \</span>
<a name="l01058"></a>01058 <span class="preprocessor">      int len = SAROUNDUP (X); \</span>
<a name="l01059"></a>01059 <span class="preprocessor">      memcpy (pnt, (caddr_t)(X), len); \</span>
<a name="l01060"></a>01060 <span class="preprocessor">      pnt += len; \</span>
<a name="l01061"></a>01061 <span class="preprocessor">    }</span>
<a name="l01062"></a>01062 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l01063"></a>01063 
<a name="l01064"></a>01064   pnt = (caddr_t) <a class="code" href="structmsg.html">msg</a>.buf;
<a name="l01065"></a>01065 
<a name="l01066"></a>01066   <span class="comment">/* Write each socket data into rtm message buffer */</span>
<a name="l01067"></a>01067   <a class="code" href="kernel__socket_8c.html#a8c3fbeae695134b671223ceca5e9a767">SOCKADDRSET</a> (dest, RTA_DST);
<a name="l01068"></a>01068   <a class="code" href="kernel__socket_8c.html#a8c3fbeae695134b671223ceca5e9a767">SOCKADDRSET</a> (gate, RTA_GATEWAY);
<a name="l01069"></a>01069   <a class="code" href="kernel__socket_8c.html#a8c3fbeae695134b671223ceca5e9a767">SOCKADDRSET</a> (mask, RTA_NETMASK);
<a name="l01070"></a>01070 
<a name="l01071"></a>01071   <a class="code" href="structmsg.html">msg</a>.rtm.rtm_msglen = pnt - (caddr_t) &amp;<a class="code" href="structmsg.html">msg</a>;
<a name="l01072"></a>01072 
<a name="l01073"></a>01073   ret = write (<a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a>, &amp;<a class="code" href="structmsg.html">msg</a>, <a class="code" href="structmsg.html">msg</a>.rtm.rtm_msglen);
<a name="l01074"></a>01074 
<a name="l01075"></a>01075   <span class="keywordflow">if</span> (ret != <a class="code" href="structmsg.html">msg</a>.rtm.rtm_msglen) 
<a name="l01076"></a>01076     {
<a name="l01077"></a>01077       <span class="keywordflow">if</span> (errno == EEXIST) 
<a name="l01078"></a>01078     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a0a0de38e97fdf5982db3089fbd2f5390">ZEBRA_ERR_RTEXIST</a>;
<a name="l01079"></a>01079       <span class="keywordflow">if</span> (errno == ENETUNREACH)
<a name="l01080"></a>01080     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#abc4674f17b06a1504d045b9024d786eb">ZEBRA_ERR_RTUNREACH</a>;
<a name="l01081"></a>01081       <span class="keywordflow">if</span> (errno == ESRCH)
<a name="l01082"></a>01082     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a58dc80805c425ed7b6b46364b2d84fac">ZEBRA_ERR_RTNOEXIST</a>;
<a name="l01083"></a>01083       
<a name="l01084"></a>01084       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: write : %s (%d)&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno), errno);
<a name="l01085"></a>01085       <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#af87ff252b3e60981091069ea93c51479">ZEBRA_ERR_KERNEL</a>;
<a name="l01086"></a>01086     }
<a name="l01087"></a>01087   <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a3dd4dbac0d42b8c4b7cc0e2947fb78cf">ZEBRA_ERR_NOERROR</a>;
<a name="l01088"></a>01088 }
<a name="l01089"></a>01089 
<a name="l01090"></a>01090 
<a name="l01091"></a>01091 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l01092"></a>01092 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l01093"></a>01093 
<a name="l01094"></a>01094 <span class="comment">/* For debug purpose. */</span>
<a name="l01095"></a>01095 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01096"></a><a class="code" href="kernel__socket_8c.html#a7c6fda98af96609e78608031343dd16e">01096</a> <a class="code" href="kernel__socket_8c.html#a7c6fda98af96609e78608031343dd16e">rtmsg_debug</a> (<span class="keyword">struct</span> rt_msghdr *rtm)
<a name="l01097"></a>01097 {
<a name="l01098"></a>01098   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Kernel: Len: %d Type: %s&quot;</span>, rtm-&gt;rtm_msglen, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtm_type_str, rtm-&gt;rtm_type));
<a name="l01099"></a>01099   <a class="code" href="kernel__socket_8c.html#a32712c46b7a679cefafa26ac8a62af2d">rtm_flag_dump</a> (rtm-&gt;rtm_flags);
<a name="l01100"></a>01100   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Kernel: message seq %d&quot;</span>, rtm-&gt;rtm_seq);
<a name="l01101"></a>01101   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Kernel: pid %d, rtm_addrs 0x%x&quot;</span>, rtm-&gt;rtm_pid, rtm-&gt;rtm_addrs);
<a name="l01102"></a>01102 }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="comment">/* This is pretty gross, better suggestions welcome -- mhandler */</span>
<a name="l01105"></a>01105 <span class="preprocessor">#ifndef RTAX_MAX</span>
<a name="l01106"></a>01106 <span class="preprocessor"></span><span class="preprocessor">#ifdef RTA_NUMBITS</span>
<a name="l01107"></a>01107 <span class="preprocessor"></span><span class="preprocessor">#define RTAX_MAX    RTA_NUMBITS</span>
<a name="l01108"></a>01108 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l01109"></a><a class="code" href="kernel__socket_8c.html#a11c0a29a5737ae85bcdb67a42b57b4a8">01109</a> <span class="preprocessor"></span><span class="preprocessor">#define RTAX_MAX    8</span>
<a name="l01110"></a>01110 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* RTA_NUMBITS */</span>
<a name="l01111"></a>01111 <span class="preprocessor">#endif </span><span class="comment">/* RTAX_MAX */</span>
<a name="l01112"></a>01112 
<a name="l01113"></a>01113 <span class="comment">/* Kernel routing table and interface updates via routing socket. */</span>
<a name="l01114"></a>01114 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01115"></a><a class="code" href="kernel__socket_8c.html#a1a57616537b4466f86de043316933986">01115</a> <a class="code" href="kernel__socket_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01116"></a>01116 {
<a name="l01117"></a>01117   <span class="keywordtype">int</span> sock;
<a name="l01118"></a>01118   <span class="keywordtype">int</span> nbytes;
<a name="l01119"></a>01119   <span class="keyword">struct </span>rt_msghdr *rtm;
<a name="l01120"></a>01120 
<a name="l01121"></a>01121   <span class="comment">/*</span>
<a name="l01122"></a>01122 <span class="comment">   * This must be big enough for any message the kernel might send.</span>
<a name="l01123"></a>01123 <span class="comment">   * Rather than determining how many sockaddrs of what size might be</span>
<a name="l01124"></a>01124 <span class="comment">   * in each particular message, just use RTAX_MAX of sockaddr_storage</span>
<a name="l01125"></a>01125 <span class="comment">   * for each.  Note that the sockaddrs must be after each message</span>
<a name="l01126"></a>01126 <span class="comment">   * definition, or rather after whichever happens to be the largest,</span>
<a name="l01127"></a>01127 <span class="comment">   * since the buffer needs to be big enough for a message and the</span>
<a name="l01128"></a>01128 <span class="comment">   * sockaddrs together.</span>
<a name="l01129"></a>01129 <span class="comment">   */</span>
<a name="l01130"></a>01130   <span class="keyword">union </span>
<a name="l01131"></a>01131   {
<a name="l01132"></a>01132     <span class="comment">/* Routing information. */</span>
<a name="l01133"></a>01133     <span class="keyword">struct </span>
<a name="l01134"></a>01134     {
<a name="l01135"></a>01135       <span class="keyword">struct </span>rt_msghdr rtm;
<a name="l01136"></a>01136       <span class="keyword">struct </span>sockaddr_storage addr[RTAX_MAX];
<a name="l01137"></a>01137     } r;
<a name="l01138"></a>01138 
<a name="l01139"></a>01139     <span class="comment">/* Interface information. */</span>
<a name="l01140"></a>01140     <span class="keyword">struct</span>
<a name="l01141"></a>01141     {
<a name="l01142"></a>01142       <span class="keyword">struct </span>if_msghdr ifm;
<a name="l01143"></a>01143       <span class="keyword">struct </span>sockaddr_storage addr[RTAX_MAX];
<a name="l01144"></a>01144     } <a class="code" href="spgrid_8c.html#a86be794d2215950416074538bf6e18c3">im</a>;
<a name="l01145"></a>01145 
<a name="l01146"></a>01146     <span class="comment">/* Interface address information. */</span>
<a name="l01147"></a>01147     <span class="keyword">struct</span>
<a name="l01148"></a>01148     {
<a name="l01149"></a>01149       <span class="keyword">struct </span>ifa_msghdr ifa;
<a name="l01150"></a>01150       <span class="keyword">struct </span>sockaddr_storage addr[RTAX_MAX];
<a name="l01151"></a>01151     } ia;
<a name="l01152"></a>01152 
<a name="l01153"></a>01153 <span class="preprocessor">#ifdef RTM_IFANNOUNCE</span>
<a name="l01154"></a>01154 <span class="preprocessor"></span>    <span class="comment">/* Interface arrival/departure */</span>
<a name="l01155"></a>01155     <span class="keyword">struct</span>
<a name="l01156"></a>01156     {
<a name="l01157"></a>01157       <span class="keyword">struct </span>if_announcemsghdr ifan;
<a name="l01158"></a>01158       <span class="keyword">struct </span>sockaddr_storage addr[RTAX_MAX];
<a name="l01159"></a>01159     } ian;
<a name="l01160"></a>01160 <span class="preprocessor">#endif </span><span class="comment">/* RTM_IFANNOUNCE */</span>
<a name="l01161"></a>01161 
<a name="l01162"></a>01162   } buf;
<a name="l01163"></a>01163 
<a name="l01164"></a>01164   <span class="comment">/* Fetch routing socket. */</span>
<a name="l01165"></a>01165   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l01166"></a>01166 
<a name="l01167"></a>01167   nbytes= read (sock, &amp;buf, <span class="keyword">sizeof</span> buf);
<a name="l01168"></a>01168 
<a name="l01169"></a>01169   <span class="keywordflow">if</span> (nbytes &lt;= 0)
<a name="l01170"></a>01170     {
<a name="l01171"></a>01171       <span class="keywordflow">if</span> (nbytes &lt; 0 &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EAGAIN)
<a name="l01172"></a>01172     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;routing socket error: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01173"></a>01173       <span class="keywordflow">return</span> 0;
<a name="l01174"></a>01174     }
<a name="l01175"></a>01175 
<a name="l01176"></a>01176   <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="kernel__socket_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock);
<a name="l01177"></a>01177 
<a name="l01178"></a>01178   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01179"></a>01179     <a class="code" href="kernel__socket_8c.html#a7c6fda98af96609e78608031343dd16e">rtmsg_debug</a> (&amp;buf.r.rtm);
<a name="l01180"></a>01180 
<a name="l01181"></a>01181   rtm = &amp;buf.r.rtm;
<a name="l01182"></a>01182 
<a name="l01183"></a>01183   <span class="comment">/*</span>
<a name="l01184"></a>01184 <span class="comment">   * Ensure that we didn&#39;t drop any data, so that processing routines</span>
<a name="l01185"></a>01185 <span class="comment">   * can assume they have the whole message.</span>
<a name="l01186"></a>01186 <span class="comment">   */</span>
<a name="l01187"></a>01187   <span class="keywordflow">if</span> (rtm-&gt;rtm_msglen != nbytes)
<a name="l01188"></a>01188     {
<a name="l01189"></a>01189       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;kernel_read: rtm-&gt;rtm_msglen %d, nbytes %d, type %d\n&quot;</span>,
<a name="l01190"></a>01190          rtm-&gt;rtm_msglen, nbytes, rtm-&gt;rtm_type);
<a name="l01191"></a>01191       <span class="keywordflow">return</span> -1;
<a name="l01192"></a>01192     }
<a name="l01193"></a>01193 
<a name="l01194"></a>01194   <span class="keywordflow">switch</span> (rtm-&gt;rtm_type)
<a name="l01195"></a>01195     {
<a name="l01196"></a>01196     <span class="keywordflow">case</span> RTM_ADD:
<a name="l01197"></a>01197     <span class="keywordflow">case</span> RTM_DELETE:
<a name="l01198"></a>01198     <span class="keywordflow">case</span> RTM_CHANGE:
<a name="l01199"></a>01199       <a class="code" href="kernel__socket_8c.html#a78dde4b354c422ab8da1f12313e2b242">rtm_read</a> (rtm);
<a name="l01200"></a>01200       <span class="keywordflow">break</span>;
<a name="l01201"></a>01201     <span class="keywordflow">case</span> RTM_IFINFO:
<a name="l01202"></a>01202       <a class="code" href="kernel__socket_8c.html#aa77e17c2a468e19c7bf0935bb78b6b48">ifm_read</a> (&amp;buf.im.ifm);
<a name="l01203"></a>01203       <span class="keywordflow">break</span>;
<a name="l01204"></a>01204     <span class="keywordflow">case</span> RTM_NEWADDR:
<a name="l01205"></a>01205     <span class="keywordflow">case</span> RTM_DELADDR:
<a name="l01206"></a>01206       <a class="code" href="kernel__socket_8c.html#a13d417744f4455ef28100a3907b3a7dd">ifam_read</a> (&amp;buf.ia.ifa);
<a name="l01207"></a>01207       <span class="keywordflow">break</span>;
<a name="l01208"></a>01208 <span class="preprocessor">#ifdef RTM_IFANNOUNCE</span>
<a name="l01209"></a>01209 <span class="preprocessor"></span>    <span class="keywordflow">case</span> RTM_IFANNOUNCE:
<a name="l01210"></a>01210       ifan_read (&amp;buf.ian.ifan);
<a name="l01211"></a>01211       <span class="keywordflow">break</span>;
<a name="l01212"></a>01212 <span class="preprocessor">#endif </span><span class="comment">/* RTM_IFANNOUNCE */</span>
<a name="l01213"></a>01213     <span class="keywordflow">default</span>:
<a name="l01214"></a>01214       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01215"></a>01215         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Unprocessed RTM_type: %d&quot;</span>, rtm-&gt;rtm_type);
<a name="l01216"></a>01216       <span class="keywordflow">break</span>;
<a name="l01217"></a>01217     }
<a name="l01218"></a>01218   <span class="keywordflow">return</span> 0;
<a name="l01219"></a>01219 }
<a name="l01220"></a>01220 
<a name="l01221"></a>01221 <span class="comment">/* Make routing socket. */</span>
<a name="l01222"></a>01222 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01223"></a><a class="code" href="kernel__socket_8c.html#ab2d4f6b183b7b848db3ca7fa37cb7eb1">01223</a> <a class="code" href="kernel__socket_8c.html#ab2d4f6b183b7b848db3ca7fa37cb7eb1">routing_socket</a> (<span class="keywordtype">void</span>)
<a name="l01224"></a>01224 {
<a name="l01225"></a>01225   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>) )
<a name="l01226"></a>01226     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;routing_socket: Can&#39;t raise privileges&quot;</span>);
<a name="l01227"></a>01227 
<a name="l01228"></a>01228   <a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a> = socket (AF_ROUTE, SOCK_RAW, 0);
<a name="l01229"></a>01229 
<a name="l01230"></a>01230   <span class="keywordflow">if</span> (<a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a> &lt; 0) 
<a name="l01231"></a>01231     {
<a name="l01232"></a>01232       <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>) )
<a name="l01233"></a>01233         <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;routing_socket: Can&#39;t lower privileges&quot;</span>);
<a name="l01234"></a>01234       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t init kernel routing socket&quot;</span>);
<a name="l01235"></a>01235       <span class="keywordflow">return</span>;
<a name="l01236"></a>01236     }
<a name="l01237"></a>01237 
<a name="l01238"></a>01238   <span class="comment">/* XXX: Socket should be NONBLOCK, however as we currently </span>
<a name="l01239"></a>01239 <span class="comment">   * discard failed writes, this will lead to inconsistencies.</span>
<a name="l01240"></a>01240 <span class="comment">   * For now, socket must be blocking.</span>
<a name="l01241"></a>01241 <span class="comment">   */</span>
<a name="l01242"></a>01242   <span class="comment">/*if (fcntl (routing_sock, F_SETFL, O_NONBLOCK) &lt; 0) </span>
<a name="l01243"></a>01243 <span class="comment">    zlog_warn (&quot;Can&#39;t set O_NONBLOCK to routing socket&quot;);*/</span>
<a name="l01244"></a>01244     
<a name="l01245"></a>01245   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>) )
<a name="l01246"></a>01246     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;routing_socket: Can&#39;t lower privileges&quot;</span>);
<a name="l01247"></a>01247 
<a name="l01248"></a>01248   <span class="comment">/* kernel_read needs rewrite. */</span>
<a name="l01249"></a>01249   <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="kernel__socket_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="kernel__socket_8c.html#a6af200af34539ad29493115c6bf892a5">routing_sock</a>);
<a name="l01250"></a>01250 }
<a name="l01251"></a>01251 
<a name="l01252"></a>01252 <span class="comment">/* Exported interface function.  This function simply calls</span>
<a name="l01253"></a>01253 <span class="comment">   routing_socket (). */</span>
<a name="l01254"></a>01254 <span class="keywordtype">void</span>
<a name="l01255"></a><a class="code" href="kernel__socket_8c.html#a0dbe43a64cbf994bf9189e7767f93342">01255</a> <a class="code" href="kernel__null_8c.html#a0dbe43a64cbf994bf9189e7767f93342">kernel_init</a> (<span class="keywordtype">void</span>)
<a name="l01256"></a>01256 {
<a name="l01257"></a>01257   <a class="code" href="kernel__socket_8c.html#ab2d4f6b183b7b848db3ca7fa37cb7eb1">routing_socket</a> ();
<a name="l01258"></a>01258 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="kernel__socket_8c.html">kernel_socket.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
