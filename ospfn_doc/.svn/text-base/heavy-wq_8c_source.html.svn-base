<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: tests/heavy-wq.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('heavy-wq_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">tests/heavy-wq.c</div>  </div>
</div>
<div class="contents">
<a href="heavy-wq_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * $Id$</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of Quagga.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * Quagga is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * Quagga is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with Quagga; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/* This programme shows the effects of &#39;heavy&#39; long-running functions</span>
<a name="l00023"></a>00023 <span class="comment"> * on the cooperative threading model.</span>
<a name="l00024"></a>00024 <span class="comment"> *</span>
<a name="l00025"></a>00025 <span class="comment"> * Run it with a config file containing &#39;password whatever&#39;, telnet to it</span>
<a name="l00026"></a>00026 <span class="comment"> * (it defaults to port 4000) and enter the &#39;clear foo string&#39; command.</span>
<a name="l00027"></a>00027 <span class="comment"> * then type whatever and observe that the vty interface is unresponsive</span>
<a name="l00028"></a>00028 <span class="comment"> * for quite a period of time, due to the clear_something command</span>
<a name="l00029"></a>00029 <span class="comment"> * taking a very long time to complete.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="workqueue_8h.html">workqueue.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00042"></a><a class="code" href="heavy-wq_8c.html#aa834c90d09de3ec8d93f47badd86332b">00042</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structwork__queue.html">work_queue</a> *<a class="code" href="heavy-wq_8c.html#aa834c90d09de3ec8d93f47badd86332b">heavy_wq</a>;
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="structheavy__wq__node.html">00044</a> <span class="keyword">struct </span><a class="code" href="structheavy__wq__node.html">heavy_wq_node</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a><a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">00046</a>   <span class="keywordtype">char</span> *<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>;
<a name="l00047"></a><a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">00047</a>   <span class="keywordtype">int</span> <a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a>;
<a name="l00048"></a>00048 };
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keyword">enum</span>
<a name="l00051"></a>00051 {
<a name="l00052"></a><a class="code" href="heavy-wq_8c.html#a79e9f285d34216706a748fd7ba8941b7aa34f41eb0c4b7d6b67fd7621b48545f7">00052</a>   <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051eaa34f41eb0c4b7d6b67fd7621b48545f7">ITERS_FIRST</a> = 0,
<a name="l00053"></a><a class="code" href="heavy-wq_8c.html#a79e9f285d34216706a748fd7ba8941b7a1221d03f9fce468c6725986c8bed767f">00053</a>   <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea1221d03f9fce468c6725986c8bed767f">ITERS_ERR</a> = 100,
<a name="l00054"></a><a class="code" href="heavy-wq_8c.html#a79e9f285d34216706a748fd7ba8941b7aaaba5983ee1a9010885c65a4a1c84b64">00054</a>   <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051eaaaba5983ee1a9010885c65a4a1c84b64">ITERS_LATER</a> = 400,
<a name="l00055"></a><a class="code" href="heavy-wq_8c.html#a79e9f285d34216706a748fd7ba8941b7a0ce162659852dcdefe6ec15d6722eaf4">00055</a>   <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea0ce162659852dcdefe6ec15d6722eaf4">ITERS_PRINT</a> = 10,
<a name="l00056"></a><a class="code" href="heavy-wq_8c.html#a79e9f285d34216706a748fd7ba8941b7a983167a2ed9d1c9c9bfb5029c4ea170e">00056</a>   <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea983167a2ed9d1c9c9bfb5029c4ea170e">ITERS_MAX</a> = 1000,
<a name="l00057"></a>00057 };
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00060"></a><a class="code" href="heavy-wq_8c.html#a61382a07d079dc1e686ebd93623865e6">00060</a> <a class="code" href="heavy-wq_8c.html#a61382a07d079dc1e686ebd93623865e6">heavy_wq_add</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>)
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062   <span class="keyword">struct </span><a class="code" href="structheavy__wq__node.html">heavy_wq_node</a> *hn;
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="keywordflow">if</span> ((hn = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8791e3689f7da2170d6f1d3d7be9be45">MTYPE_PREFIX_LIST</a>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structheavy__wq__node.html">heavy_wq_node</a>))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00065"></a>00065     {
<a name="l00066"></a>00066       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: unable to allocate hn&quot;</span>, __func__);
<a name="l00067"></a>00067       <span class="keywordflow">return</span>;
<a name="l00068"></a>00068     }
<a name="l00069"></a>00069   
<a name="l00070"></a>00070   hn-&gt;<a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a> = <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00071"></a>00071   <span class="keywordflow">if</span> (!(hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba770d10c594a76e3efd9885b3e047915e">MTYPE_PREFIX_LIST_STR</a>, str)))
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: unable to xstrdup&quot;</span>, __func__);
<a name="l00074"></a>00074       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8791e3689f7da2170d6f1d3d7be9be45">MTYPE_PREFIX_LIST</a>, hn);
<a name="l00075"></a>00075       <span class="keywordflow">return</span>;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077   
<a name="l00078"></a>00078   <a class="code" href="workqueue_8c.html#a193fb769a4d04f3c160c623fd07dfb21">work_queue_add</a> (heavy_wq, hn);
<a name="l00079"></a>00079   
<a name="l00080"></a>00080   <span class="keywordflow">return</span>;
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00084"></a><a class="code" href="heavy-wq_8c.html#a11c6d98a091e8751b51d1974e5f78adb">00084</a> <a class="code" href="heavy-wq_8c.html#a11c6d98a091e8751b51d1974e5f78adb">slow_func_err</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keyword">struct</span> <a class="code" href="structwork__queue__item.html">work_queue_item</a> *item)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   printf (<span class="stringliteral">&quot;%s: running error function\n&quot;</span>, __func__);
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00090"></a><a class="code" href="heavy-wq_8c.html#adb102317c1987e69bcde5eacb14c8c2b">00090</a> <a class="code" href="heavy-wq_8c.html#adb102317c1987e69bcde5eacb14c8c2b">slow_func_del</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092   <span class="keyword">struct </span><a class="code" href="structheavy__wq__node.html">heavy_wq_node</a> *hn = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l00093"></a>00093   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (hn &amp;&amp; hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>);
<a name="l00094"></a>00094   printf (<span class="stringliteral">&quot;%s: %s\n&quot;</span>, __func__, hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>);
<a name="l00095"></a>00095   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba770d10c594a76e3efd9885b3e047915e">MTYPE_PREFIX_LIST_STR</a>, hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>);
<a name="l00096"></a>00096   hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;  
<a name="l00097"></a>00097   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8791e3689f7da2170d6f1d3d7be9be45">MTYPE_PREFIX_LIST</a>, hn);
<a name="l00098"></a>00098 }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="keyword">static</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a>
<a name="l00101"></a><a class="code" href="heavy-wq_8c.html#aed5f1a23997d2d945a344bf6d8003de6">00101</a> <a class="code" href="heavy-wq_8c.html#aed5f1a23997d2d945a344bf6d8003de6">slow_func</a> (<span class="keyword">struct</span> <a class="code" href="structwork__queue.html">work_queue</a> *wq, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103   <span class="keyword">struct </span><a class="code" href="structheavy__wq__node.html">heavy_wq_node</a> *hn = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l00104"></a>00104   <span class="keywordtype">double</span> <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a> = 1;
<a name="l00105"></a>00105   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00106"></a>00106   
<a name="l00107"></a>00107   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (hn &amp;&amp; hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>);
<a name="l00108"></a>00108   
<a name="l00109"></a>00109   <span class="keywordflow">for</span> (j = 0; j &lt; 300; j++)
<a name="l00110"></a>00110     x += sin(x)*<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00111"></a>00111   
<a name="l00112"></a>00112   <span class="keywordflow">if</span> ((hn-&gt;<a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a> % <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051eaaaba5983ee1a9010885c65a4a1c84b64">ITERS_LATER</a>) == 0)
<a name="l00113"></a>00113     <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885af21f50d91fa63ac1fcc2038899d3306e">WQ_RETRY_LATER</a>;
<a name="l00114"></a>00114   
<a name="l00115"></a>00115   <span class="keywordflow">if</span> ((hn-&gt;<a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a> % <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea1221d03f9fce468c6725986c8bed767f">ITERS_ERR</a>) == 0)
<a name="l00116"></a>00116     <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ae4b9584851b2d121edce1a820c9f40ea">WQ_RETRY_NOW</a>;
<a name="l00117"></a>00117   
<a name="l00118"></a>00118   <span class="keywordflow">if</span> ((hn-&gt;<a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a> % <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea0ce162659852dcdefe6ec15d6722eaf4">ITERS_PRINT</a>) == 0)
<a name="l00119"></a>00119     printf (<span class="stringliteral">&quot;%s did %d, x = %g\n&quot;</span>, hn-&gt;<a class="code" href="structheavy__wq__node.html#af9449c87628551e5954846d63b76e0a9">str</a>, hn-&gt;<a class="code" href="structheavy__wq__node.html#aa57df36837b1791d66102701591a2018">i</a>, x);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   <span class="keywordflow">return</span> <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
<a name="l00122"></a>00122 }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00125"></a><a class="code" href="heavy-wq_8c.html#a8e4ed882262a0b70d8d6ac3dc4f72fb2">00125</a> <a class="code" href="heavy-wq_8c.html#a8e4ed882262a0b70d8d6ac3dc4f72fb2">clear_something</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00128"></a>00128   
<a name="l00129"></a>00129   <span class="comment">/* this could be like iterating through 150k of route_table </span>
<a name="l00130"></a>00130 <span class="comment">   * or worse, iterating through a list of peers, to bgp_stop them with</span>
<a name="l00131"></a>00131 <span class="comment">   * each having 150k route tables to process...</span>
<a name="l00132"></a>00132 <span class="comment">   */</span>
<a name="l00133"></a>00133   <span class="keywordflow">for</span> (i = <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051eaa34f41eb0c4b7d6b67fd7621b48545f7">ITERS_FIRST</a>; i &lt; <a class="code" href="heavy-thread_8c.html#a7859c0a3efa8b1c360f5c2376baf051ea983167a2ed9d1c9c9bfb5029c4ea170e">ITERS_MAX</a>; i++)
<a name="l00134"></a>00134     <a class="code" href="heavy-wq_8c.html#a61382a07d079dc1e686ebd93623865e6">heavy_wq_add</a> (vty, str, i);
<a name="l00135"></a>00135 }
<a name="l00136"></a>00136 
<a name="l00137"></a><a class="code" href="heavy-wq_8c.html#aac378b76a0aa3c93fd7a64ec62bc4f2d">00137</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_foo,
<a name="l00138"></a>00138        clear_foo_cmd,
<a name="l00139"></a>00139        <span class="stringliteral">&quot;clear foo .LINE&quot;</span>,
<a name="l00140"></a>00140        <span class="stringliteral">&quot;clear command\n&quot;</span>
<a name="l00141"></a>00141        <span class="stringliteral">&quot;arbitrary string\n&quot;</span>)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
<a name="l00144"></a>00144   <span class="keywordflow">if</span> (!argc)
<a name="l00145"></a>00145     {
<a name="l00146"></a>00146       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%% string argument required%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00147"></a>00147       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00148"></a>00148     }
<a name="l00149"></a>00149   
<a name="l00150"></a>00150   str = <a class="code" href="command_8c.html#a262c4f7766ffb060fe8b5012d58367a2">argv_concat</a> (argv, argc, 0);
<a name="l00151"></a>00151   
<a name="l00152"></a>00152   <a class="code" href="heavy-wq_8c.html#a8e4ed882262a0b70d8d6ac3dc4f72fb2">clear_something</a> (<a class="code" href="structvty.html">vty</a>, str);
<a name="l00153"></a>00153   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, str);
<a name="l00154"></a>00154   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00158"></a><a class="code" href="heavy-wq_8c.html#af669c0f224fb46422d09db86dd8b73df">00158</a> <a class="code" href="heavy-wq_8c.html#af669c0f224fb46422d09db86dd8b73df">heavy_wq_init</a> ()
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <span class="keywordflow">if</span> (! (heavy_wq = <a class="code" href="workqueue_8c.html#a8b50511bbc60426f371822c0c7aee5cc">work_queue_new</a> (master, <span class="stringliteral">&quot;heavy_work_queue&quot;</span>)))
<a name="l00161"></a>00161     {
<a name="l00162"></a>00162       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not get new work queue!&quot;</span>, __func__);
<a name="l00163"></a>00163       <span class="keywordflow">return</span> -1;
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165   
<a name="l00166"></a>00166   heavy_wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#aabcb370748f886f6a167ea3b13a6d372">workfunc</a> = &amp;<a class="code" href="heavy-wq_8c.html#aed5f1a23997d2d945a344bf6d8003de6">slow_func</a>;
<a name="l00167"></a>00167   heavy_wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a4defd4b1c7ea708f3d30881057c26f61">errorfunc</a> = &amp;<a class="code" href="heavy-wq_8c.html#a11c6d98a091e8751b51d1974e5f78adb">slow_func_err</a>;
<a name="l00168"></a>00168   heavy_wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#ae2fdda0df1d6e600e2b4e7849740e9d2">del_item_data</a> = &amp;<a class="code" href="heavy-wq_8c.html#adb102317c1987e69bcde5eacb14c8c2b">slow_func_del</a>;
<a name="l00169"></a>00169   heavy_wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a74334af11b2e664ed8cd47fa13a76881">max_retries</a> = 3;
<a name="l00170"></a>00170   heavy_wq-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a6f998e18d62286e5b77844faf7c3ded2">hold</a> = 1000;
<a name="l00171"></a>00171   
<a name="l00172"></a>00172   <span class="keywordflow">return</span> 0;
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 <span class="keywordtype">void</span>
<a name="l00176"></a><a class="code" href="heavy-wq_8c.html#a500f3e6675ddc2ae311f22f90e919653">00176</a> <a class="code" href="heavy-thread_8c.html#a500f3e6675ddc2ae311f22f90e919653">test_init</a>()
<a name="l00177"></a>00177 {
<a name="l00178"></a>00178   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;clear_foo_cmd);
<a name="l00179"></a>00179   <a class="code" href="heavy-wq_8c.html#af669c0f224fb46422d09db86dd8b73df">heavy_wq_init</a>();
<a name="l00180"></a>00180 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="heavy-wq_8c.html">heavy-wq.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:08 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
