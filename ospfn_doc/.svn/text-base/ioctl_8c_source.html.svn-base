<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/ioctl.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ioctl_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/ioctl.c</div>  </div>
</div>
<div class="contents">
<a href="ioctl_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Common ioctl functions.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="ioctl_8h.html">ioctl.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="rt_8h.html">zebra/rt.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net/if_media.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT*/</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">/* clear and set interface name string */</span>
<a name="l00043"></a>00043 <span class="keywordtype">void</span>
<a name="l00044"></a><a class="code" href="ioctl_8h.html#a9fa35b013679c425488a85b453512f2e">00044</a> <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (<span class="keyword">struct</span> ifreq *ifreq, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   strncpy (ifreq-&gt;ifr_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, IFNAMSIZ);
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">/* call ioctl system call */</span>
<a name="l00050"></a>00050 <span class="keywordtype">int</span>
<a name="l00051"></a><a class="code" href="ioctl_8h.html#af93d98b7cd87288b34161070deb70f77">00051</a> <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (u_long request, caddr_t <a class="code" href="structbuffer.html">buffer</a>)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053   <span class="keywordtype">int</span> sock;
<a name="l00054"></a>00054   <span class="keywordtype">int</span> ret;
<a name="l00055"></a>00055   <span class="keywordtype">int</span> err;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00058"></a>00058     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00059"></a>00059   sock = socket (AF_INET, SOCK_DGRAM, 0);
<a name="l00060"></a>00060   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062       <span class="keywordtype">int</span> save_errno = errno;
<a name="l00063"></a>00063       <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00064"></a>00064         <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00065"></a>00065       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create UDP socket: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00066"></a>00066       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068   <span class="keywordflow">if</span> ((ret = ioctl (sock, request, buffer)) &lt; 0)
<a name="l00069"></a>00069     err = errno;
<a name="l00070"></a>00070   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00071"></a>00071     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00072"></a>00072   close (sock);
<a name="l00073"></a>00073   
<a name="l00074"></a>00074   <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       errno = err;
<a name="l00077"></a>00077       <span class="keywordflow">return</span> ret;
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079   <span class="keywordflow">return</span> 0;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00084"></a>00084 <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (u_long request, caddr_t <a class="code" href="structbuffer.html">buffer</a>)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="keywordtype">int</span> sock;
<a name="l00087"></a>00087   <span class="keywordtype">int</span> ret;
<a name="l00088"></a>00088   <span class="keywordtype">int</span> err;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00091"></a>00091     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00092"></a>00092   sock = socket (AF_INET6, SOCK_DGRAM, 0);
<a name="l00093"></a>00093   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00094"></a>00094     {
<a name="l00095"></a>00095       <span class="keywordtype">int</span> save_errno = errno;
<a name="l00096"></a>00096       <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00097"></a>00097         <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00098"></a>00098       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create IPv6 datagram socket: %s&quot;</span>,
<a name="l00099"></a>00099            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00100"></a>00100       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="keywordflow">if</span> ((ret = ioctl (sock, request, buffer)) &lt; 0)
<a name="l00104"></a>00104     err = errno;
<a name="l00105"></a>00105   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00106"></a>00106     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00107"></a>00107   close (sock);
<a name="l00108"></a>00108   
<a name="l00109"></a>00109   <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111       errno = err;
<a name="l00112"></a>00112       <span class="keywordflow">return</span> ret;
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114   <span class="keywordflow">return</span> 0;
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">/*</span>
<a name="l00119"></a>00119 <span class="comment"> * get interface metric</span>
<a name="l00120"></a>00120 <span class="comment"> *   -- if value is not avaliable set -1</span>
<a name="l00121"></a>00121 <span class="comment"> */</span>
<a name="l00122"></a>00122 <span class="keywordtype">void</span>
<a name="l00123"></a><a class="code" href="ioctl_8h.html#a0d562515d254386606d34098693ba9a8">00123</a> <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00124"></a>00124 {
<a name="l00125"></a>00125 <span class="preprocessor">#ifdef SIOCGIFMETRIC</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>  <span class="keyword">struct </span>ifreq ifreq;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="keywordflow">if</span> (<a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFMETRIC, (caddr_t) &amp;ifreq) &lt; 0) 
<a name="l00131"></a>00131     <span class="keywordflow">return</span>;
<a name="l00132"></a>00132   ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = ifreq.ifr_metric;
<a name="l00133"></a>00133   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> == 0)
<a name="l00134"></a>00134     ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;
<a name="l00135"></a>00135 <span class="preprocessor">#else </span><span class="comment">/* SIOCGIFMETRIC */</span>
<a name="l00136"></a>00136   ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = -1;
<a name="l00137"></a>00137 <span class="preprocessor">#endif </span><span class="comment">/* SIOCGIFMETRIC */</span>
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">/* get interface MTU */</span>
<a name="l00141"></a>00141 <span class="keywordtype">void</span>
<a name="l00142"></a><a class="code" href="ioctl_8h.html#a068d06e5ff6c96cf093c3be8a0eee2e3">00142</a> <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="preprocessor">#if defined(SIOCGIFMTU)</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFMTU, (caddr_t) &amp; ifreq) &lt; 0) 
<a name="l00150"></a>00150     {
<a name="l00151"></a>00151       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Can&#39;t lookup mtu by ioctl(SIOCGIFMTU)&quot;</span>);
<a name="l00152"></a>00152       ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = -1;
<a name="l00153"></a>00153       <span class="keywordflow">return</span>;
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = ifreq.ifr_metric;
<a name="l00158"></a>00158 <span class="preprocessor">#else</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = ifreq.ifr_mtu;
<a name="l00160"></a>00160 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="comment">/* propogate */</span>
<a name="l00163"></a>00163   <a class="code" href="redistribute_8c.html#a47e3eef746ea4c7dd28652d126b29908">zebra_interface_up_update</a>(ifp);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="preprocessor">#else</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span>  <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO, <span class="stringliteral">&quot;Can&#39;t lookup mtu on this system&quot;</span>);
<a name="l00167"></a>00167   ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = -1;
<a name="l00168"></a>00168 <span class="preprocessor">#endif</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>}
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="preprocessor">#ifdef HAVE_NETLINK</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="comment">/* Interface address setting via netlink interface. */</span>
<a name="l00173"></a>00173 <span class="keywordtype">int</span>
<a name="l00174"></a>00174 <a class="code" href="ioctl_8c.html#a2f0adc914bae2da8bf160c18284ae06a">if_set_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00175"></a>00175 {
<a name="l00176"></a>00176   <span class="keywordflow">return</span> <a class="code" href="kernel__null_8c.html#adfe0f641680f62af235c49919cb3dcbb">kernel_address_add_ipv4</a> (ifp, ifc);
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="comment">/* Interface address is removed using netlink interface. */</span>
<a name="l00180"></a>00180 <span class="keywordtype">int</span>
<a name="l00181"></a>00181 <a class="code" href="ioctl_8c.html#a6394ee738ad4341863267bdde8e4158a">if_unset_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00182"></a>00182 {
<a name="l00183"></a>00183   <span class="keywordflow">return</span> <a class="code" href="kernel__null_8c.html#a84be221f9731486399f2f2ac969bcfb5">kernel_address_delete_ipv4</a> (ifp, ifc);
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 <span class="preprocessor">#else </span><span class="comment">/* ! HAVE_NETLINK */</span>
<a name="l00186"></a>00186 <span class="preprocessor">#ifdef HAVE_STRUCT_IFALIASREQ</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="comment">/* Set up interface&#39;s IP address, netmask (and broadcas? ).  *BSD may</span>
<a name="l00188"></a>00188 <span class="comment">   has ifaliasreq structure.  */</span>
<a name="l00189"></a>00189 <span class="keywordtype">int</span>
<a name="l00190"></a>00190 <a class="code" href="ioctl_8c.html#a2f0adc914bae2da8bf160c18284ae06a">if_set_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00191"></a>00191 {
<a name="l00192"></a>00192   <span class="keywordtype">int</span> ret;
<a name="l00193"></a>00193   <span class="keyword">struct </span>ifaliasreq addreq;
<a name="l00194"></a>00194   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00195"></a>00195   <span class="keyword">struct </span>sockaddr_in mask;
<a name="l00196"></a>00196   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00199"></a>00199   <a class="code" href="rib_8h.html#ac0c04ebf660391255470e731e17ed5e8">rib_lookup_and_pushup</a> (p);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   memset (&amp;addreq, 0, <span class="keyword">sizeof</span> addreq);
<a name="l00202"></a>00202   strncpy ((<span class="keywordtype">char</span> *)&amp;addreq.ifra_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <span class="keyword">sizeof</span> addreq.ifra_name);
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00205"></a>00205   addr.sin_addr = p-&gt;prefix;
<a name="l00206"></a>00206   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00207"></a>00207 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>  addr.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00209"></a>00209 <span class="preprocessor">#endif</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   memset (&amp;mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00213"></a>00213   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask.sin_addr);
<a name="l00214"></a>00214   mask.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00215"></a>00215 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span>  mask.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00217"></a>00217 <span class="preprocessor">#endif</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_mask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00219"></a>00219   
<a name="l00220"></a>00220   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCAIFADDR, (caddr_t) &amp;addreq);
<a name="l00221"></a>00221   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00222"></a>00222     <span class="keywordflow">return</span> ret;
<a name="l00223"></a>00223   <span class="keywordflow">return</span> 0;
<a name="l00224"></a>00224 }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="comment">/* Set up interface&#39;s IP address, netmask (and broadcas? ).  *BSD may</span>
<a name="l00227"></a>00227 <span class="comment">   has ifaliasreq structure.  */</span>
<a name="l00228"></a>00228 <span class="keywordtype">int</span>
<a name="l00229"></a>00229 <a class="code" href="ioctl_8c.html#a6394ee738ad4341863267bdde8e4158a">if_unset_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00230"></a>00230 {
<a name="l00231"></a>00231   <span class="keywordtype">int</span> ret;
<a name="l00232"></a>00232   <span class="keyword">struct </span>ifaliasreq addreq;
<a name="l00233"></a>00233   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00234"></a>00234   <span class="keyword">struct </span>sockaddr_in mask;
<a name="l00235"></a>00235   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   memset (&amp;addreq, 0, <span class="keyword">sizeof</span> addreq);
<a name="l00240"></a>00240   strncpy ((<span class="keywordtype">char</span> *)&amp;addreq.ifra_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <span class="keyword">sizeof</span> addreq.ifra_name);
<a name="l00241"></a>00241 
<a name="l00242"></a>00242   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00243"></a>00243   addr.sin_addr = p-&gt;prefix;
<a name="l00244"></a>00244   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00245"></a>00245 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00246"></a>00246 <span class="preprocessor"></span>  addr.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00247"></a>00247 <span class="preprocessor">#endif</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   memset (&amp;mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00251"></a>00251   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask.sin_addr);
<a name="l00252"></a>00252   mask.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00253"></a>00253 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>  mask.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00255"></a>00255 <span class="preprocessor">#endif</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_mask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00257"></a>00257   
<a name="l00258"></a>00258   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCDIFADDR, (caddr_t) &amp;addreq);
<a name="l00259"></a>00259   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00260"></a>00260     <span class="keywordflow">return</span> ret;
<a name="l00261"></a>00261   <span class="keywordflow">return</span> 0;
<a name="l00262"></a>00262 }
<a name="l00263"></a>00263 <span class="preprocessor">#else</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span><span class="comment">/* Set up interface&#39;s address, netmask (and broadcas? ).  Linux or</span>
<a name="l00265"></a>00265 <span class="comment">   Solaris uses ifname:number semantics to set IP address aliases. */</span>
<a name="l00266"></a>00266 <span class="keywordtype">int</span>
<a name="l00267"></a><a class="code" href="ioctl_8h.html#a0a54bf4fd7ef792cb894520544c3c4d9">00267</a> <a class="code" href="ioctl_8c.html#a2f0adc914bae2da8bf160c18284ae06a">if_set_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00268"></a>00268 {
<a name="l00269"></a>00269   <span class="keywordtype">int</span> ret;
<a name="l00270"></a>00270   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00271"></a>00271   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00272"></a>00272   <span class="keyword">struct </span>sockaddr_in broad;
<a name="l00273"></a>00273   <span class="keyword">struct </span>sockaddr_in mask;
<a name="l00274"></a>00274   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddr;
<a name="l00275"></a>00275   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   ifaddr = *p;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   addr.sin_addr = p-&gt;prefix;
<a name="l00284"></a>00284   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00285"></a>00285   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00286"></a>00286   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFADDR, (caddr_t) &amp;ifreq);
<a name="l00287"></a>00287   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00288"></a>00288     <span class="keywordflow">return</span> ret;
<a name="l00289"></a>00289   
<a name="l00290"></a>00290   <span class="comment">/* We need mask for make broadcast addr. */</span>
<a name="l00291"></a>00291   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask.sin_addr);
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (ifp))
<a name="l00294"></a>00294     {
<a name="l00295"></a>00295       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;ifaddr);
<a name="l00296"></a>00296       addr.sin_addr = ifaddr.prefix;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298       broad.sin_addr.s_addr = (addr.sin_addr.s_addr | ~mask.sin_addr.s_addr);
<a name="l00299"></a>00299       broad.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_broadaddr, &amp;broad, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00302"></a>00302       ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFBRDADDR, (caddr_t) &amp;ifreq);
<a name="l00303"></a>00303       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00304"></a>00304     <span class="keywordflow">return</span> ret;
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   mask.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00308"></a>00308 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mask, &amp;ifreq.ifr_addr, sizeof (mask));
<a name="l00310"></a>00310 <span class="preprocessor">#else</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_netmask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00312"></a>00312 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS5 */</span>
<a name="l00313"></a>00313   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFNETMASK, (caddr_t) &amp;ifreq);
<a name="l00314"></a>00314   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00315"></a>00315     <span class="keywordflow">return</span> ret;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317   <span class="keywordflow">return</span> 0;
<a name="l00318"></a>00318 }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 <span class="comment">/* Set up interface&#39;s address, netmask (and broadcas? ).  Linux or</span>
<a name="l00321"></a>00321 <span class="comment">   Solaris uses ifname:number semantics to set IP address aliases. */</span>
<a name="l00322"></a>00322 <span class="keywordtype">int</span>
<a name="l00323"></a><a class="code" href="ioctl_8h.html#a27512dddeda8e5a1a8ed98bab2c8c83d">00323</a> <a class="code" href="ioctl_8c.html#a6394ee738ad4341863267bdde8e4158a">if_unset_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00324"></a>00324 {
<a name="l00325"></a>00325   <span class="keywordtype">int</span> ret;
<a name="l00326"></a>00326   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00327"></a>00327   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00328"></a>00328   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00335"></a>00335   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00336"></a>00336   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00337"></a>00337   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFADDR, (caddr_t) &amp;ifreq);
<a name="l00338"></a>00338   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00339"></a>00339     <span class="keywordflow">return</span> ret;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341   <span class="keywordflow">return</span> 0;
<a name="l00342"></a>00342 }
<a name="l00343"></a>00343 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_IFALIASREQ */</span>
<a name="l00344"></a>00344 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_NETLINK */</span>
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="comment">/* get interface flags */</span>
<a name="l00347"></a>00347 <span class="keywordtype">void</span>
<a name="l00348"></a><a class="code" href="ioctl_8h.html#ae1c4e698e99993fa62b9f094dd211288">00348</a> <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00349"></a>00349 {
<a name="l00350"></a>00350   <span class="keywordtype">int</span> ret;
<a name="l00351"></a>00351   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00352"></a>00352 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT</span>
<a name="l00353"></a>00353 <span class="preprocessor"></span>  <span class="keyword">struct </span>ifmediareq ifmr;
<a name="l00354"></a>00354 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT */</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFFLAGS, (caddr_t) &amp;ifreq);
<a name="l00359"></a>00359   <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l00360"></a>00360     {
<a name="l00361"></a>00361       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;if_ioctl(SIOCGIFFLAGS) failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00362"></a>00362       <span class="keywordflow">return</span>;
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364 <span class="preprocessor">#ifdef HAVE_BSD_LINK_DETECT </span><span class="comment">/* Detect BSD link-state at start-up */</span>
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="comment">/* Per-default, IFF_RUNNING is held high, unless link-detect says</span>
<a name="l00367"></a>00367 <span class="comment">   * otherwise - we abuse IFF_RUNNING inside zebra as a link-state flag,</span>
<a name="l00368"></a>00368 <span class="comment">   * following practice on Linux and Solaris kernels</span>
<a name="l00369"></a>00369 <span class="comment">   */</span>
<a name="l00370"></a>00370   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(ifreq.ifr_flags, IFF_RUNNING);
<a name="l00371"></a>00371   
<a name="l00372"></a>00372   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#aa9e7c65b5cb18f24bd6f3e0e0d37181d">ZEBRA_INTERFACE_LINKDETECTION</a>))
<a name="l00373"></a>00373     {
<a name="l00374"></a>00374       (void) memset(&amp;ifmr, 0, <span class="keyword">sizeof</span>(ifmr));
<a name="l00375"></a>00375       strncpy (ifmr.ifm_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, IFNAMSIZ);
<a name="l00376"></a>00376       
<a name="l00377"></a>00377       <span class="comment">/* Seems not all interfaces implement this ioctl */</span>
<a name="l00378"></a>00378       <span class="keywordflow">if</span> (<a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a>(SIOCGIFMEDIA, (caddr_t) &amp;ifmr) &lt; 0)
<a name="l00379"></a>00379         <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;if_ioctl(SIOCGIFMEDIA) failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00380"></a>00380       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifmr.ifm_status &amp; IFM_AVALID) <span class="comment">/* Link state is valid */</span>
<a name="l00381"></a>00381         {
<a name="l00382"></a>00382           <span class="keywordflow">if</span> (ifmr.ifm_status &amp; IFM_ACTIVE)
<a name="l00383"></a>00383             <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(ifreq.ifr_flags, IFF_RUNNING);
<a name="l00384"></a>00384           <span class="keywordflow">else</span>
<a name="l00385"></a>00385             <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(ifreq.ifr_flags, IFF_RUNNING);
<a name="l00386"></a>00386         }
<a name="l00387"></a>00387   }
<a name="l00388"></a>00388 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_BSD_LINK_DETECT */</span>
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, (ifreq.ifr_flags &amp; 0x0000ffff));
<a name="l00391"></a>00391 }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="comment">/* Set interface flags */</span>
<a name="l00394"></a>00394 <span class="keywordtype">int</span>
<a name="l00395"></a><a class="code" href="ioctl_8h.html#a47d276058efe33b91432bd791d367d05">00395</a> <a class="code" href="ioctl_8c.html#a8d3286dd23c072fd28b523f0464b7b48">if_set_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, uint64_t <a class="code" href="structflags.html">flags</a>)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397   <span class="keywordtype">int</span> ret;
<a name="l00398"></a>00398   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00399"></a>00399 
<a name="l00400"></a>00400   memset (&amp;ifreq, 0, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ifreq));
<a name="l00401"></a>00401   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00402"></a>00402 
<a name="l00403"></a>00403   ifreq.ifr_flags = ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>;
<a name="l00404"></a>00404   ifreq.ifr_flags |= flags;
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFFLAGS, (caddr_t) &amp;ifreq);
<a name="l00407"></a>00407 
<a name="l00408"></a>00408   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00409"></a>00409     {
<a name="l00410"></a>00410       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;can&#39;t set interface flags&quot;</span>);
<a name="l00411"></a>00411       <span class="keywordflow">return</span> ret;
<a name="l00412"></a>00412     }
<a name="l00413"></a>00413   <span class="keywordflow">return</span> 0;
<a name="l00414"></a>00414 }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 <span class="comment">/* Unset interface&#39;s flag. */</span>
<a name="l00417"></a>00417 <span class="keywordtype">int</span>
<a name="l00418"></a><a class="code" href="ioctl_8h.html#a18d054286311e9693c5ca19f5595a51e">00418</a> <a class="code" href="ioctl_8c.html#a502ff981598ecd81fae67f29ef3cc1b8">if_unset_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, uint64_t <a class="code" href="structflags.html">flags</a>)
<a name="l00419"></a>00419 {
<a name="l00420"></a>00420   <span class="keywordtype">int</span> ret;
<a name="l00421"></a>00421   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   memset (&amp;ifreq, 0, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ifreq));
<a name="l00424"></a>00424   <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   ifreq.ifr_flags = ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>;
<a name="l00427"></a>00427   ifreq.ifr_flags &amp;= ~flags;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFFLAGS, (caddr_t) &amp;ifreq);
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00432"></a>00432     {
<a name="l00433"></a>00433       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;can&#39;t unset interface flags&quot;</span>);
<a name="l00434"></a>00434       <span class="keywordflow">return</span> ret;
<a name="l00435"></a>00435     }
<a name="l00436"></a>00436   <span class="keywordflow">return</span> 0;
<a name="l00437"></a>00437 }
<a name="l00438"></a>00438 
<a name="l00439"></a>00439 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00440"></a>00440 <span class="preprocessor"></span>
<a name="l00441"></a>00441 <span class="preprocessor">#ifdef LINUX_IPV6</span>
<a name="l00442"></a>00442 <span class="preprocessor"></span><span class="preprocessor">#ifndef _LINUX_IN6_H</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span><span class="comment">/* linux/include/net/ipv6.h */</span>
<a name="l00444"></a>00444 <span class="keyword">struct </span>in6_ifreq 
<a name="l00445"></a>00445 {
<a name="l00446"></a>00446   <span class="keyword">struct </span>in6_addr ifr6_addr;
<a name="l00447"></a>00447   u_int32_t ifr6_prefixlen;
<a name="l00448"></a>00448   <span class="keywordtype">int</span> ifr6_ifindex;
<a name="l00449"></a>00449 };
<a name="l00450"></a>00450 <span class="preprocessor">#endif </span><span class="comment">/* _LINUX_IN6_H */</span>
<a name="l00451"></a>00451 
<a name="l00452"></a>00452 <span class="comment">/* Interface&#39;s address add/delete functions. */</span>
<a name="l00453"></a>00453 <span class="keywordtype">int</span>
<a name="l00454"></a>00454 <a class="code" href="ioctl__null_8c.html#aed68ab78f914db76055d46853b0c58d5">if_prefix_add_ipv6</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00455"></a>00455 {
<a name="l00456"></a>00456   <span class="keywordtype">int</span> ret;
<a name="l00457"></a>00457   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00458"></a>00458   <span class="keyword">struct </span>in6_ifreq ifreq;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460   p = (<span class="keyword">struct </span>prefix_ipv6 *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   memset (&amp;ifreq, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in6_ifreq));
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr6_addr, &amp;p-&gt;prefix, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00465"></a>00465   ifreq.ifr6_ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00466"></a>00466   ifreq.ifr6_prefixlen = p-&gt;prefixlen;
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   ret = <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (SIOCSIFADDR, (caddr_t) &amp;ifreq);
<a name="l00469"></a>00469 
<a name="l00470"></a>00470   <span class="keywordflow">return</span> ret;
<a name="l00471"></a>00471 }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473 <span class="keywordtype">int</span>
<a name="l00474"></a>00474 if_prefix_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00475"></a>00475 {
<a name="l00476"></a>00476   <span class="keywordtype">int</span> ret;
<a name="l00477"></a>00477   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00478"></a>00478   <span class="keyword">struct </span>in6_ifreq ifreq;
<a name="l00479"></a>00479 
<a name="l00480"></a>00480   p = (<span class="keyword">struct </span>prefix_ipv6 *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00481"></a>00481 
<a name="l00482"></a>00482   memset (&amp;ifreq, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in6_ifreq));
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr6_addr, &amp;p-&gt;prefix, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00485"></a>00485   ifreq.ifr6_ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00486"></a>00486   ifreq.ifr6_prefixlen = p-&gt;prefixlen;
<a name="l00487"></a>00487 
<a name="l00488"></a>00488   ret = <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (SIOCDIFADDR, (caddr_t) &amp;ifreq);
<a name="l00489"></a>00489 
<a name="l00490"></a>00490   <span class="keywordflow">return</span> ret;
<a name="l00491"></a>00491 }
<a name="l00492"></a>00492 <span class="preprocessor">#else </span><span class="comment">/* LINUX_IPV6 */</span>
<a name="l00493"></a>00493 <span class="preprocessor">#ifdef HAVE_STRUCT_IN6_ALIASREQ</span>
<a name="l00494"></a>00494 <span class="preprocessor"></span><span class="preprocessor">#ifndef ND6_INFINITE_LIFETIME</span>
<a name="l00495"></a>00495 <span class="preprocessor"></span><span class="preprocessor">#define ND6_INFINITE_LIFETIME 0xffffffffL</span>
<a name="l00496"></a>00496 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* ND6_INFINITE_LIFETIME */</span>
<a name="l00497"></a>00497 <span class="keywordtype">int</span>
<a name="l00498"></a>00498 <a class="code" href="ioctl__null_8c.html#aed68ab78f914db76055d46853b0c58d5">if_prefix_add_ipv6</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00499"></a>00499 {
<a name="l00500"></a>00500   <span class="keywordtype">int</span> ret;
<a name="l00501"></a>00501   <span class="keyword">struct </span>in6_aliasreq addreq;
<a name="l00502"></a>00502   <span class="keyword">struct </span>sockaddr_in6 addr;
<a name="l00503"></a>00503   <span class="keyword">struct </span>sockaddr_in6 mask;
<a name="l00504"></a>00504   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00505"></a>00505 
<a name="l00506"></a>00506   p = (<span class="keyword">struct </span>prefix_ipv6 * ) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   memset (&amp;addreq, 0, <span class="keyword">sizeof</span> addreq);
<a name="l00509"></a>00509   strncpy ((<span class="keywordtype">char</span> *)&amp;addreq.ifra_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <span class="keyword">sizeof</span> addreq.ifra_name);
<a name="l00510"></a>00510 
<a name="l00511"></a>00511   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00512"></a>00512   addr.sin6_addr = p-&gt;prefix;
<a name="l00513"></a>00513   addr.sin6_family = p-&gt;family;
<a name="l00514"></a>00514 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span>  addr.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00516"></a>00516 <span class="preprocessor">#endif</span>
<a name="l00517"></a>00517 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   memset (&amp;mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00520"></a>00520   masklen2ip6 (p-&gt;prefixlen, &amp;mask.sin6_addr);
<a name="l00521"></a>00521   mask.sin6_family = p-&gt;family;
<a name="l00522"></a>00522 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00523"></a>00523 <span class="preprocessor"></span>  mask.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00524"></a>00524 <span class="preprocessor">#endif</span>
<a name="l00525"></a>00525 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_prefixmask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00526"></a>00526 
<a name="l00527"></a>00527   addreq.ifra_lifetime.ia6t_vltime = 0xffffffff;
<a name="l00528"></a>00528   addreq.ifra_lifetime.ia6t_pltime = 0xffffffff;
<a name="l00529"></a>00529   
<a name="l00530"></a>00530 <span class="preprocessor">#ifdef HAVE_STRUCT_IF6_ALIASREQ_IFRA_LIFETIME </span>
<a name="l00531"></a>00531 <span class="preprocessor"></span>  addreq.ifra_lifetime.ia6t_pltime = ND6_INFINITE_LIFETIME; 
<a name="l00532"></a>00532   addreq.ifra_lifetime.ia6t_vltime = ND6_INFINITE_LIFETIME; 
<a name="l00533"></a>00533 <span class="preprocessor">#endif</span>
<a name="l00534"></a>00534 <span class="preprocessor"></span>
<a name="l00535"></a>00535   ret = <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (SIOCAIFADDR_IN6, (caddr_t) &amp;addreq);
<a name="l00536"></a>00536   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00537"></a>00537     <span class="keywordflow">return</span> ret;
<a name="l00538"></a>00538   <span class="keywordflow">return</span> 0;
<a name="l00539"></a>00539 }
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 <span class="keywordtype">int</span>
<a name="l00542"></a>00542 if_prefix_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00543"></a>00543 {
<a name="l00544"></a>00544   <span class="keywordtype">int</span> ret;
<a name="l00545"></a>00545   <span class="keyword">struct </span>in6_aliasreq addreq;
<a name="l00546"></a>00546   <span class="keyword">struct </span>sockaddr_in6 addr;
<a name="l00547"></a>00547   <span class="keyword">struct </span>sockaddr_in6 mask;
<a name="l00548"></a>00548   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00549"></a>00549 
<a name="l00550"></a>00550   p = (<span class="keyword">struct </span>prefix_ipv6 *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00551"></a>00551 
<a name="l00552"></a>00552   memset (&amp;addreq, 0, <span class="keyword">sizeof</span> addreq);
<a name="l00553"></a>00553   strncpy ((<span class="keywordtype">char</span> *)&amp;addreq.ifra_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <span class="keyword">sizeof</span> addreq.ifra_name);
<a name="l00554"></a>00554 
<a name="l00555"></a>00555   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00556"></a>00556   addr.sin6_addr = p-&gt;prefix;
<a name="l00557"></a>00557   addr.sin6_family = p-&gt;family;
<a name="l00558"></a>00558 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00559"></a>00559 <span class="preprocessor"></span>  addr.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00560"></a>00560 <span class="preprocessor">#endif</span>
<a name="l00561"></a>00561 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00562"></a>00562 
<a name="l00563"></a>00563   memset (&amp;mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00564"></a>00564   masklen2ip6 (p-&gt;prefixlen, &amp;mask.sin6_addr);
<a name="l00565"></a>00565   mask.sin6_family = p-&gt;family;
<a name="l00566"></a>00566 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00567"></a>00567 <span class="preprocessor"></span>  mask.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00568"></a>00568 <span class="preprocessor">#endif</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addreq.ifra_prefixmask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 <span class="preprocessor">#ifdef HAVE_STRUCT_IF6_ALIASREQ_IFRA_LIFETIME</span>
<a name="l00572"></a>00572 <span class="preprocessor"></span>  addreq.ifra_lifetime.ia6t_pltime = ND6_INFINITE_LIFETIME; 
<a name="l00573"></a>00573   addreq.ifra_lifetime.ia6t_vltime = ND6_INFINITE_LIFETIME; 
<a name="l00574"></a>00574 <span class="preprocessor">#endif</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span>
<a name="l00576"></a>00576   ret = <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (SIOCDIFADDR_IN6, (caddr_t) &amp;addreq);
<a name="l00577"></a>00577   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00578"></a>00578     <span class="keywordflow">return</span> ret;
<a name="l00579"></a>00579   <span class="keywordflow">return</span> 0;
<a name="l00580"></a>00580 }
<a name="l00581"></a>00581 <span class="preprocessor">#else</span>
<a name="l00582"></a>00582 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l00583"></a>00583 <a class="code" href="ioctl__null_8c.html#aed68ab78f914db76055d46853b0c58d5">if_prefix_add_ipv6</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00584"></a>00584 {
<a name="l00585"></a>00585   <span class="keywordflow">return</span> 0;
<a name="l00586"></a>00586 }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588 <span class="keywordtype">int</span>
<a name="l00589"></a>00589 if_prefix_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00590"></a>00590 {
<a name="l00591"></a>00591   <span class="keywordflow">return</span> 0;
<a name="l00592"></a>00592 }
<a name="l00593"></a>00593 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_IN6_ALIASREQ */</span>
<a name="l00594"></a>00594 
<a name="l00595"></a>00595 <span class="preprocessor">#endif </span><span class="comment">/* LINUX_IPV6 */</span>
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ioctl_8c.html">ioctl.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
