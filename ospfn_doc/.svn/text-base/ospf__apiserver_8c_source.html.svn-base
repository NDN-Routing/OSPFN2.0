<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_apiserver.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__apiserver_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_apiserver.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__apiserver_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Server side of OSPF API.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2001, 2002 Ralph Keller</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> * </span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00009"></a>00009 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00010"></a>00010 <span class="comment"> * option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00019"></a>00019 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifdef SUPPORT_OSPF_API</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#ifndef HAVE_OPAQUE_LSA</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#error &quot;Core Opaque-LSA module must be configured.&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>      <span class="comment">/* for inet_aton() */</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="buffer_8h.html">buffer.h</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;sys/types.h&gt;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>        <span class="comment">/* for &quot;struct thread_master&quot; */</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="ospf__flood_8h.html">ospfd/ospf_flood.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="ospf__packet_8h.html">ospfd/ospf_packet.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="ospf__route_8h.html">ospfd/ospf_route.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ase_8h.html">ospfd/ospf_ase.h</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="ospf__zebra_8h.html">ospfd/ospf_zebra.h</a>&quot;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#include &quot;<a class="code" href="ospf__api_8h.html">ospfd/ospf_api.h</a>&quot;</span>
<a name="l00063"></a>00063 <span class="preprocessor">#include &quot;<a class="code" href="ospf__apiserver_8h.html">ospfd/ospf_apiserver.h</a>&quot;</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">/* This is an implementation of an API to the OSPF daemon that allows</span>
<a name="l00066"></a>00066 <span class="comment"> * external applications to access the OSPF daemon through socket</span>
<a name="l00067"></a>00067 <span class="comment"> * connections. The application can use this API to inject its own</span>
<a name="l00068"></a>00068 <span class="comment"> * opaque LSAs and flood them to other OSPF daemons. Other OSPF</span>
<a name="l00069"></a>00069 <span class="comment"> * daemons then receive these LSAs and inform applications through the</span>
<a name="l00070"></a>00070 <span class="comment"> * API by sending a corresponding message. The application can also</span>
<a name="l00071"></a>00071 <span class="comment"> * register to receive all LSA types (in addition to opaque types) and</span>
<a name="l00072"></a>00072 <span class="comment"> * use this information to reconstruct the OSPF&#39;s LSDB. The OSPF</span>
<a name="l00073"></a>00073 <span class="comment"> * daemon supports multiple applications concurrently.  */</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">/* List of all active connections. */</span>
<a name="l00076"></a>00076 <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *apiserver_list;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00079"></a>00079 <span class="comment"> * Functions to lookup interfaces</span>
<a name="l00080"></a>00080 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00081"></a>00081 <span class="comment"> */</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00084"></a>00084 <a class="code" href="ospf__apiserver_8h.html#a15dce6e83860f160da72835cc0490fa9">ospf_apiserver_if_lookup_by_addr</a> (<span class="keyword">struct</span> in_addr <a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00087"></a>00087   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00088"></a>00088   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="keywordflow">if</span> (!(ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ()))
<a name="l00091"></a>00091     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l00094"></a>00094     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00095"></a>00095       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;address, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l00096"></a>00096         <span class="keywordflow">return</span> oi;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00102"></a>00102 <a class="code" href="ospf__apiserver_8h.html#a1c5720823be03563030f54640b5d1388">ospf_apiserver_if_lookup_by_ifp</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00105"></a>00105   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00106"></a>00106   <span class="keyword">struct </span>ospf *ospf;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="keywordflow">if</span> (!(ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ()));
<a name="l00109"></a>00109     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l00112"></a>00112     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> == ifp)
<a name="l00113"></a>00113       <span class="keywordflow">return</span> oi;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00119"></a>00119 <span class="comment"> * Initialization</span>
<a name="l00120"></a>00120 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00121"></a>00121 <span class="comment"> */</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>
<a name="l00124"></a>00124 <a class="code" href="ospf__apiserver_8h.html#a08667587a254b76402c4ef701010f1ec">ospf_apiserver_getport</a> (<span class="keywordtype">void</span>)
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126   <span class="keyword">struct </span>servent *sp = getservbyname (<span class="stringliteral">&quot;ospfapi&quot;</span>, <span class="stringliteral">&quot;tcp&quot;</span>);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128   <span class="keywordflow">return</span> sp ? ntohs (sp-&gt;s_port) : <a class="code" href="ospf__api_8h.html#ac581116f77fe662e02083f9d9424c1c0">OSPF_API_SYNC_PORT</a>;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="comment">/* Initialize OSPF API module. Invoked from ospf_opaque_init() */</span>
<a name="l00132"></a>00132 <span class="keywordtype">int</span>
<a name="l00133"></a>00133 <a class="code" href="ospf__apiserver_8h.html#a82ce46071ee6e83d6634dce4acbf8bb9">ospf_apiserver_init</a> (<span class="keywordtype">void</span>)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keywordtype">int</span> fd;
<a name="l00136"></a>00136   <span class="keywordtype">int</span> rc = -1;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="comment">/* Create new socket for synchronous messages. */</span>
<a name="l00139"></a>00139   fd = <a class="code" href="ospf__apiserver_8h.html#a547cf626a1830f8572a20238691b53b6">ospf_apiserver_serv_sock_family</a> (<a class="code" href="ospf__apiserver_8h.html#a08667587a254b76402c4ef701010f1ec">ospf_apiserver_getport</a> (), AF_INET);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="keywordflow">if</span> (fd &lt; 0)
<a name="l00142"></a>00142     <span class="keywordflow">goto</span> out;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="comment">/* Schedule new thread that handles accepted connections. */</span>
<a name="l00145"></a>00145   <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf7d27b451246b7abd5c02d73f722e711">OSPF_APISERVER_ACCEPT</a>, fd, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">/* Initialize list that keeps track of all connections. */</span>
<a name="l00148"></a>00148   apiserver_list = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   <span class="comment">/* Register opaque-independent call back functions. These functions</span>
<a name="l00151"></a>00151 <span class="comment">     are invoked on ISM, NSM changes and LSA update and LSA deletes */</span>
<a name="l00152"></a>00152   rc =
<a name="l00153"></a>00153     <a class="code" href="ospf__opaque_8h.html#a625591adfc981177469407fa6132b3c3">ospf_register_opaque_functab</a> (0 <span class="comment">/* all LSAs */</span>, 
<a name="l00154"></a>00154                   0 <span class="comment">/* all opaque types */</span>,
<a name="l00155"></a>00155                   <a class="code" href="ospf__apiserver_8h.html#ada47c27e9d26a085cc5970c93571ad99">ospf_apiserver_new_if</a>,
<a name="l00156"></a>00156                   <a class="code" href="ospf__apiserver_8h.html#a95835bcc7b1995d0943910ba688e3c3d">ospf_apiserver_del_if</a>,
<a name="l00157"></a>00157                   <a class="code" href="ospf__apiserver_8h.html#afb73c44c10c2ddbf582085fd74c643a9">ospf_apiserver_ism_change</a>,
<a name="l00158"></a>00158                   <a class="code" href="ospf__apiserver_8h.html#a5dfd8142f3027ec099cc7bcbdd4ed1d7">ospf_apiserver_nsm_change</a>,
<a name="l00159"></a>00159                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00160"></a>00160                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00161"></a>00161                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00162"></a>00162                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_show_info */</span>
<a name="l00163"></a>00163                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* originator_func */</span>
<a name="l00164"></a>00164                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_lsa_refresher */</span>
<a name="l00165"></a>00165                   <a class="code" href="ospf__apiserver_8h.html#ae7440e36a2e70543824f4f8489d4582d">ospf_apiserver_lsa_update</a>,
<a name="l00166"></a>00166                   <a class="code" href="ospf__apiserver_8h.html#a999c77f52472640ab040705e6727c5c3">ospf_apiserver_lsa_delete</a>,
<a name="l00167"></a>00167                   <span class="comment">/* 08/23/2011 yic +1 */</span>
<a name="l00168"></a>00168                   <a class="code" href="ospf__apiserver_8h.html#ae1e4913eef3d43bdeb7b179c12a4684c">ospf_apiserver_notify_router_routing_table_change</a>);
<a name="l00169"></a>00169   <span class="keywordflow">if</span> (rc != 0)
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_init: Failed to register opaque type [0/0]&quot;</span>);
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   rc = 0;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 out:
<a name="l00177"></a>00177   <span class="keywordflow">return</span> rc;
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">/* Terminate OSPF API module. */</span>
<a name="l00181"></a>00181 <span class="keywordtype">void</span>
<a name="l00182"></a>00182 <a class="code" href="ospf__apiserver_8h.html#a7698984c9824fb7ab5f04a95f64c65e2">ospf_apiserver_term</a> (<span class="keywordtype">void</span>)
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">/* Unregister wildcard [0/0] type */</span>
<a name="l00187"></a>00187   <a class="code" href="ospf__opaque_8h.html#a41bea3a6d41383d3785814e97a32f4c6">ospf_delete_opaque_functab</a> (0 <span class="comment">/* all LSAs */</span>, 
<a name="l00188"></a>00188                   0 <span class="comment">/* all opaque types */</span>);
<a name="l00189"></a>00189 
<a name="l00190"></a>00190   <span class="comment">/*</span>
<a name="l00191"></a>00191 <span class="comment">   * Free all client instances.  ospf_apiserver_free removes the node</span>
<a name="l00192"></a>00192 <span class="comment">   * from the list, so we examine the head of the list anew each time.</span>
<a name="l00193"></a>00193 <span class="comment">   */</span>
<a name="l00194"></a>00194   <span class="keywordflow">while</span> ( apiserver_list &amp;&amp;
<a name="l00195"></a>00195          (apiserv = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (apiserver_list))) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00196"></a>00196     <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="comment">/* Free client list itself */</span>
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (apiserver_list)
<a name="l00200"></a>00200     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (apiserver_list);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   <span class="comment">/* Free wildcard list */</span>
<a name="l00203"></a>00203   <span class="comment">/* XXX  */</span>
<a name="l00204"></a>00204 }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *
<a name="l00207"></a>00207 lookup_apiserver (u_char lsa_type, u_char opaque_type)
<a name="l00208"></a>00208 {
<a name="l00209"></a>00209   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1, *n2;
<a name="l00210"></a>00210   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l00211"></a>00211   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv, *found = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">/* XXX: this approaches O(n**2) */</span>
<a name="l00214"></a>00214   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (apiserver_list, n1, apiserv))
<a name="l00215"></a>00215     {
<a name="l00216"></a>00216       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, n2, r))
<a name="l00217"></a>00217         <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == lsa_type &amp;&amp; r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a> == opaque_type)
<a name="l00218"></a>00218           {
<a name="l00219"></a>00219             found = apiserv;
<a name="l00220"></a>00220             <span class="keywordflow">goto</span> out;
<a name="l00221"></a>00221           }
<a name="l00222"></a>00222     }
<a name="l00223"></a>00223 out:
<a name="l00224"></a>00224   <span class="keywordflow">return</span> found;
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *
<a name="l00228"></a>00228 lookup_apiserver_by_lsa (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l00231"></a>00231   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *found = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>))
<a name="l00234"></a>00234     {
<a name="l00235"></a>00235       found = lookup_apiserver (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>,
<a name="l00236"></a>00236                                 <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238   <span class="keywordflow">return</span> found;
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00242"></a>00242 <span class="comment"> * Followings are functions to manage client connections.</span>
<a name="l00243"></a>00243 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00244"></a>00244 <span class="comment"> */</span>
<a name="l00245"></a>00245 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00246"></a>00246 ospf_apiserver_new_lsa_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00247"></a>00247 {
<a name="l00248"></a>00248   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00249"></a>00249     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: Put LSA(%p)[%s] into reserve, total=%ld&quot;</span>, lsa, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa), lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a82e59d86cb154198c2f77da26361f386">total</a>);
<a name="l00250"></a>00250   <span class="keywordflow">return</span> 0;
<a name="l00251"></a>00251 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00254"></a>00254 ospf_apiserver_del_lsa_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00255"></a>00255 {
<a name="l00256"></a>00256   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00257"></a>00257     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: Get LSA(%p)[%s] from reserve, total=%ld&quot;</span>, lsa, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa), lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a82e59d86cb154198c2f77da26361f386">total</a>);
<a name="l00258"></a>00258   <span class="keywordflow">return</span> 0;
<a name="l00259"></a>00259 }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 <span class="comment">/* Allocate new connection structure. */</span>
<a name="l00262"></a>00262 <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *
<a name="l00263"></a>00263 <a class="code" href="ospf__apiserver_8h.html#a0a5369b23497b036d28cb79021099c9b">ospf_apiserver_new</a> (<span class="keywordtype">int</span> <a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>, <span class="keywordtype">int</span> <a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>)
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *<span class="keyword">new</span> =
<a name="l00266"></a>00266     <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="ospf__apiserver_8h.html#a27a754b8112772c24a20ef80a89fef28">MTYPE_OSPF_APISERVER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a>));
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keyword">new</span>-&gt;filter =
<a name="l00269"></a>00269     <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="ospf__apiserver_8h.html#a6c8a5a60057849a35def4038394ce66d">MTYPE_OSPF_APISERVER_MSGFILTER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__filter__type.html">lsa_filter_type</a>));
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   <span class="keyword">new</span>-&gt;fd_sync = <a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>;
<a name="l00272"></a>00272   <span class="keyword">new</span>-&gt;fd_async = <a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   <span class="comment">/* list of registered opaque types that application uses */</span>
<a name="l00275"></a>00275   <span class="keyword">new</span>-&gt;opaque_types = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="comment">/* Initialize temporary strage for LSA instances to be refreshed. */</span>
<a name="l00278"></a>00278   memset (&amp;new-&gt;reserve, 0, sizeof (<span class="keyword">struct</span> <a class="code" href="structospf__lsdb.html">ospf_lsdb</a>));
<a name="l00279"></a>00279   <a class="code" href="ospf__flood_8h.html#afcbf84e6f5791298594bbd311a3079d0">ospf_lsdb_init</a> (&amp;new-&gt;reserve);
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="keyword">new</span>-&gt;reserve.new_lsa_hook = ospf_apiserver_new_lsa_hook; <span class="comment">/* debug */</span>
<a name="l00282"></a>00282   <span class="keyword">new</span>-&gt;reserve.del_lsa_hook = ospf_apiserver_del_lsa_hook; <span class="comment">/* debug */</span>
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   <span class="keyword">new</span>-&gt;out_sync_fifo = <a class="code" href="ospf__api_8h.html#a1b949415dd81706ea60ed526b986a62a">msg_fifo_new</a> ();
<a name="l00285"></a>00285   <span class="keyword">new</span>-&gt;out_async_fifo = <a class="code" href="ospf__api_8h.html#a1b949415dd81706ea60ed526b986a62a">msg_fifo_new</a> ();
<a name="l00286"></a>00286   <span class="keyword">new</span>-&gt;t_sync_read = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00287"></a>00287 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>  <span class="keyword">new</span>-&gt;t_async_read = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00289"></a>00289 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00290"></a>00290   <span class="keyword">new</span>-&gt;t_sync_write = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00291"></a>00291   <span class="keyword">new</span>-&gt;t_async_write = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="keyword">new</span>-&gt;filter-&gt;typemask = 0;    <span class="comment">/* filter all LSAs */</span>
<a name="l00294"></a>00294   <span class="keyword">new</span>-&gt;filter-&gt;origin = <a class="code" href="ospf__api_8h.html#a540bc4d38c44ca370a74bc4c97998534">ANY_ORIGIN</a>;
<a name="l00295"></a>00295   <span class="keyword">new</span>-&gt;filter-&gt;num_areas = 0;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00298"></a>00298 }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="keywordtype">void</span>
<a name="l00301"></a>00301 <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<span class="keyword">enum</span> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>, <span class="keywordtype">int</span> fd,
<a name="l00302"></a>00302               <span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv)
<a name="l00303"></a>00303 {
<a name="l00304"></a>00304   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *apiserver_serv_thread;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="keywordflow">switch</span> (event)
<a name="l00307"></a>00307     {
<a name="l00308"></a>00308     <span class="keywordflow">case</span> <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf7d27b451246b7abd5c02d73f722e711">OSPF_APISERVER_ACCEPT</a>:
<a name="l00309"></a>00309       apiserver_serv_thread =
<a name="l00310"></a>00310     <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__apiserver_8h.html#a04c17d10629f1e9c03d4d4766659a625">ospf_apiserver_accept</a>, apiserv, fd);
<a name="l00311"></a>00311       <span class="keywordflow">break</span>;
<a name="l00312"></a>00312     <span class="keywordflow">case</span> <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaafc629f281d14052686b777808801956">OSPF_APISERVER_SYNC_READ</a>:
<a name="l00313"></a>00313       apiserv-&gt;<a class="code" href="structospf__apiserver.html#aeec0e72ed223e0a150cfaca15e350c50">t_sync_read</a> =
<a name="l00314"></a>00314     <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__apiserver_8h.html#a6e322fafc88cc8e4a3eb741fc0bea705">ospf_apiserver_read</a>, apiserv, fd);
<a name="l00315"></a>00315       <span class="keywordflow">break</span>;
<a name="l00316"></a>00316 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span>    <span class="keywordflow">case</span> OSPF_APISERVER_ASYNC_READ:
<a name="l00318"></a>00318       apiserv-&gt;t_async_read =
<a name="l00319"></a>00319     <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__apiserver_8h.html#a6e322fafc88cc8e4a3eb741fc0bea705">ospf_apiserver_read</a>, apiserv, fd);
<a name="l00320"></a>00320       <span class="keywordflow">break</span>;
<a name="l00321"></a>00321 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00322"></a>00322     <span class="keywordflow">case</span> <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf185e2c50bffd89565783bbd9c063ea2">OSPF_APISERVER_SYNC_WRITE</a>:
<a name="l00323"></a>00323       <span class="keywordflow">if</span> (!apiserv-&gt;<a class="code" href="structospf__apiserver.html#a81c8c31c5718c3bbf61029ba2492482f">t_sync_write</a>)
<a name="l00324"></a>00324     {
<a name="l00325"></a>00325       apiserv-&gt;<a class="code" href="structospf__apiserver.html#a81c8c31c5718c3bbf61029ba2492482f">t_sync_write</a> =
<a name="l00326"></a>00326         <a class="code" href="thread_8h.html#a8a2f048ba94722b1e88f08254fbd4444">thread_add_write</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__apiserver_8h.html#a32dfd1cfc1f06edcd2af69a984dae796">ospf_apiserver_sync_write</a>, apiserv, fd);
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328       <span class="keywordflow">break</span>;
<a name="l00329"></a>00329     <span class="keywordflow">case</span> <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9ea9b30267095ac2c8eb8c87603dea68133">OSPF_APISERVER_ASYNC_WRITE</a>:
<a name="l00330"></a>00330       <span class="keywordflow">if</span> (!apiserv-&gt;<a class="code" href="structospf__apiserver.html#aa82954ace191488a17de8d1c4302f51b">t_async_write</a>)
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       apiserv-&gt;<a class="code" href="structospf__apiserver.html#aa82954ace191488a17de8d1c4302f51b">t_async_write</a> =
<a name="l00333"></a>00333         <a class="code" href="thread_8h.html#a8a2f048ba94722b1e88f08254fbd4444">thread_add_write</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__apiserver_8h.html#ade9b8ea2b963e74a68d25dfb6290961e">ospf_apiserver_async_write</a>, apiserv, fd);
<a name="l00334"></a>00334     }
<a name="l00335"></a>00335       <span class="keywordflow">break</span>;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="comment">/* Free instance. First unregister all opaque types used by</span>
<a name="l00340"></a>00340 <span class="comment">   application, flush opaque LSAs injected by application </span>
<a name="l00341"></a>00341 <span class="comment">   from network and close connection. */</span>
<a name="l00342"></a>00342 <span class="keywordtype">void</span>
<a name="l00343"></a>00343 <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv)
<a name="l00344"></a>00344 {
<a name="l00345"></a>00345   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="comment">/* Cancel read and write threads. */</span>
<a name="l00348"></a>00348   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#aeec0e72ed223e0a150cfaca15e350c50">t_sync_read</a>)
<a name="l00349"></a>00349     {
<a name="l00350"></a>00350       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#aeec0e72ed223e0a150cfaca15e350c50">t_sync_read</a>);
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00353"></a>00353 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (apiserv-&gt;t_async_read)
<a name="l00354"></a>00354     {
<a name="l00355"></a>00355       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (apiserv-&gt;t_async_read);
<a name="l00356"></a>00356     }
<a name="l00357"></a>00357 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00358"></a>00358   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a81c8c31c5718c3bbf61029ba2492482f">t_sync_write</a>)
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a81c8c31c5718c3bbf61029ba2492482f">t_sync_write</a>);
<a name="l00361"></a>00361     }
<a name="l00362"></a>00362 
<a name="l00363"></a>00363   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#aa82954ace191488a17de8d1c4302f51b">t_async_write</a>)
<a name="l00364"></a>00364     {
<a name="l00365"></a>00365       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#aa82954ace191488a17de8d1c4302f51b">t_async_write</a>);
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="comment">/* Unregister all opaque types that application registered </span>
<a name="l00369"></a>00369 <span class="comment">     and flush opaque LSAs if still in LSDB. */</span>
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="keywordflow">while</span> ((node = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00372"></a>00372     {
<a name="l00373"></a>00373       <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *regtype = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(node);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375       <a class="code" href="ospf__apiserver_8h.html#a08cc60a02d6f06baf52b12846593bd13">ospf_apiserver_unregister_opaque_type</a> (apiserv, regtype-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a>,
<a name="l00376"></a>00376                          regtype-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380   <span class="comment">/* Close connections to OSPFd. */</span>
<a name="l00381"></a>00381   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a> &gt; 0)
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       close (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>);
<a name="l00384"></a>00384     }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a> &gt; 0)
<a name="l00387"></a>00387     {
<a name="l00388"></a>00388       close (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>);
<a name="l00389"></a>00389     }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391   <span class="comment">/* Free fifos */</span>
<a name="l00392"></a>00392   <a class="code" href="ospf__api_8h.html#ab57b21ede92934ea7be7293ee4a235cf">msg_fifo_free</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a27fe3b4181d0b181cf64f0470026c779">out_sync_fifo</a>);
<a name="l00393"></a>00393   <a class="code" href="ospf__api_8h.html#ab57b21ede92934ea7be7293ee4a235cf">msg_fifo_free</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a85b9b248e6579e52e720a1c0815b54ee">out_async_fifo</a>);
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="comment">/* Clear temporary strage for LSA instances to be refreshed. */</span>
<a name="l00396"></a>00396   <a class="code" href="ospf__lsdb_8c.html#aac04ea2aea1f1895b940fe30fa531a5f">ospf_lsdb_delete_all</a> (&amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>);
<a name="l00397"></a>00397   <a class="code" href="ospf__lsdb_8c.html#a98d8e88a12546d5ad907691a3c8dd8d2">ospf_lsdb_cleanup</a> (&amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>);
<a name="l00398"></a>00398 
<a name="l00399"></a>00399   <span class="comment">/* Remove from the list of active clients. */</span>
<a name="l00400"></a>00400   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (apiserver_list, apiserv);
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00403"></a>00403     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: Delete apiserv(%p), total#(%d)&quot;</span>, apiserv, apiserver_list-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>);
<a name="l00404"></a>00404 
<a name="l00405"></a>00405   <span class="comment">/* And free instance. */</span>
<a name="l00406"></a>00406   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__apiserver_8h.html#a27a754b8112772c24a20ef80a89fef28">MTYPE_OSPF_APISERVER</a>, apiserv);
<a name="l00407"></a>00407 }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409 <span class="keywordtype">int</span>
<a name="l00410"></a>00410 <a class="code" href="ospf__apiserver_8h.html#a6e322fafc88cc8e4a3eb741fc0bea705">ospf_apiserver_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00411"></a>00411 {
<a name="l00412"></a>00412   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l00413"></a>00413   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00414"></a>00414   <span class="keywordtype">int</span> fd;
<a name="l00415"></a>00415   <span class="keywordtype">int</span> rc = -1;
<a name="l00416"></a>00416   <span class="keyword">enum</span> <span class="keyword">event</span> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   apiserv = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00419"></a>00419   fd = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00420"></a>00420 
<a name="l00421"></a>00421   <span class="keywordflow">if</span> (fd == apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>)
<a name="l00422"></a>00422     {
<a name="l00423"></a>00423       <span class="keyword">event</span> = <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaafc629f281d14052686b777808801956">OSPF_APISERVER_SYNC_READ</a>;
<a name="l00424"></a>00424       apiserv-&gt;<a class="code" href="structospf__apiserver.html#aeec0e72ed223e0a150cfaca15e350c50">t_sync_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00427"></a>00427         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: ospf_apiserver_read: Peer: %s/%u&quot;</span>,
<a name="l00428"></a>00428                     inet_ntoa (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ac932023e8b5151ce6fa645c49d169a99">peer_sync</a>.sin_addr),
<a name="l00429"></a>00429                     ntohs (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ac932023e8b5151ce6fa645c49d169a99">peer_sync</a>.sin_port));
<a name="l00430"></a>00430     }
<a name="l00431"></a>00431 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00432"></a>00432 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (fd == apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>)
<a name="l00433"></a>00433     {
<a name="l00434"></a>00434       <span class="keyword">event</span> = OSPF_APISERVER_ASYNC_READ;
<a name="l00435"></a>00435       apiserv-&gt;t_async_read = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00436"></a>00436 
<a name="l00437"></a>00437       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00438"></a>00438         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: ospf_apiserver_read: Peer: %s/%u&quot;</span>,
<a name="l00439"></a>00439                     inet_ntoa (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a69924c7b5004e0bc012c821532b5a720">peer_async</a>.sin_addr),
<a name="l00440"></a>00440                     ntohs (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a69924c7b5004e0bc012c821532b5a720">peer_async</a>.sin_port));
<a name="l00441"></a>00441     }
<a name="l00442"></a>00442 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00443"></a>00443   <span class="keywordflow">else</span>
<a name="l00444"></a>00444     {
<a name="l00445"></a>00445       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_read: Unknown fd(%d)&quot;</span>, fd);
<a name="l00446"></a>00446       <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00447"></a>00447       <span class="keywordflow">goto</span> out;
<a name="l00448"></a>00448     }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   <span class="comment">/* Read message from fd. */</span>
<a name="l00451"></a>00451   msg = <a class="code" href="ospf__api_8h.html#ac1363ce9f59f760478f42991585ec26a">msg_read</a> (fd);
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (msg == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00453"></a>00453     {
<a name="l00454"></a>00454       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l00455"></a>00455     (<span class="stringliteral">&quot;ospf_apiserver_read: read failed on fd=%d, closing connection&quot;</span>, fd);
<a name="l00456"></a>00456 
<a name="l00457"></a>00457       <span class="comment">/* Perform cleanup. */</span>
<a name="l00458"></a>00458       <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00459"></a>00459       <span class="keywordflow">goto</span> out;
<a name="l00460"></a>00460     }
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00463"></a>00463     <a class="code" href="ospf__api_8h.html#a0924319147ae6620db0a65150299f6b2">msg_print</a> (msg);
<a name="l00464"></a>00464 
<a name="l00465"></a>00465   <span class="comment">/* Dispatch to corresponding message handler. */</span>
<a name="l00466"></a>00466   rc = <a class="code" href="ospf__apiserver_8h.html#a4d2d8c9b58ee4e42dcd9ebbc1845cdf1">ospf_apiserver_handle_msg</a> (apiserv, msg);
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="comment">/* Prepare for next message, add read thread. */</span>
<a name="l00469"></a>00469   <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (event, fd, apiserv);
<a name="l00470"></a>00470 
<a name="l00471"></a>00471   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00472"></a>00472 
<a name="l00473"></a>00473 out:
<a name="l00474"></a>00474   <span class="keywordflow">return</span> rc;
<a name="l00475"></a>00475 }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477 <span class="keywordtype">int</span>
<a name="l00478"></a>00478 <a class="code" href="ospf__apiserver_8h.html#a32dfd1cfc1f06edcd2af69a984dae796">ospf_apiserver_sync_write</a> (<span class="keyword">struct</span> thread *thread)
<a name="l00479"></a>00479 {
<a name="l00480"></a>00480   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l00481"></a>00481   <span class="keyword">struct </span>msg *msg;
<a name="l00482"></a>00482   <span class="keywordtype">int</span> fd;
<a name="l00483"></a>00483   <span class="keywordtype">int</span> rc = -1;
<a name="l00484"></a>00484 
<a name="l00485"></a>00485   apiserv = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00486"></a>00486   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (apiserv);
<a name="l00487"></a>00487   fd = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00488"></a>00488 
<a name="l00489"></a>00489   apiserv-&gt;<a class="code" href="structospf__apiserver.html#a81c8c31c5718c3bbf61029ba2492482f">t_sync_write</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00490"></a>00490 
<a name="l00491"></a>00491   <span class="comment">/* Sanity check */</span>
<a name="l00492"></a>00492   <span class="keywordflow">if</span> (fd != apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>)
<a name="l00493"></a>00493     {
<a name="l00494"></a>00494       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_sync_write: Unknown fd=%d&quot;</span>, fd);
<a name="l00495"></a>00495       <span class="keywordflow">goto</span> out;
<a name="l00496"></a>00496     }
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00499"></a>00499     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: ospf_apiserver_sync_write: Peer: %s/%u&quot;</span>,
<a name="l00500"></a>00500                 inet_ntoa (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ac932023e8b5151ce6fa645c49d169a99">peer_sync</a>.sin_addr),
<a name="l00501"></a>00501                 ntohs (apiserv-&gt;<a class="code" href="structospf__apiserver.html#ac932023e8b5151ce6fa645c49d169a99">peer_sync</a>.sin_port));
<a name="l00502"></a>00502 
<a name="l00503"></a>00503   <span class="comment">/* Check whether there is really a message in the fifo. */</span>
<a name="l00504"></a>00504   msg = <a class="code" href="ospf__api_8h.html#a97dae62ffcd1031cec5dd14dfe990040">msg_fifo_pop</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a27fe3b4181d0b181cf64f0470026c779">out_sync_fifo</a>);
<a name="l00505"></a>00505   <span class="keywordflow">if</span> (!msg)
<a name="l00506"></a>00506     {
<a name="l00507"></a>00507       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;API: ospf_apiserver_sync_write: No message in Sync-FIFO?&quot;</span>);
<a name="l00508"></a>00508       <span class="keywordflow">return</span> 0;
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510 
<a name="l00511"></a>00511   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00512"></a>00512     <a class="code" href="ospf__api_8h.html#a0924319147ae6620db0a65150299f6b2">msg_print</a> (msg);
<a name="l00513"></a>00513 
<a name="l00514"></a>00514   rc = <a class="code" href="ospf__api_8h.html#af1b5579675baac54931e5fa78b98d02e">msg_write</a> (fd, msg);
<a name="l00515"></a>00515 
<a name="l00516"></a>00516   <span class="comment">/* Once a message is dequeued, it should be freed anyway. */</span>
<a name="l00517"></a>00517   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00520"></a>00520     {
<a name="l00521"></a>00521       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l00522"></a>00522         (<span class="stringliteral">&quot;ospf_apiserver_sync_write: write failed on fd=%d&quot;</span>, fd);
<a name="l00523"></a>00523       <span class="keywordflow">goto</span> out;
<a name="l00524"></a>00524     }
<a name="l00525"></a>00525 
<a name="l00526"></a>00526 
<a name="l00527"></a>00527   <span class="comment">/* If more messages are in sync message fifo, schedule write thread. */</span>
<a name="l00528"></a>00528   <span class="keywordflow">if</span> (<a class="code" href="ospf__api_8h.html#a35634b9e9775136e52985e5a29924b42">msg_fifo_head</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a27fe3b4181d0b181cf64f0470026c779">out_sync_fifo</a>))
<a name="l00529"></a>00529     {
<a name="l00530"></a>00530       <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf185e2c50bffd89565783bbd9c063ea2">OSPF_APISERVER_SYNC_WRITE</a>, apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>,
<a name="l00531"></a>00531                             apiserv);
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533   
<a name="l00534"></a>00534  out:
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00537"></a>00537   {
<a name="l00538"></a>00538       <span class="comment">/* Perform cleanup and disconnect with peer */</span>
<a name="l00539"></a>00539       <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00540"></a>00540     }
<a name="l00541"></a>00541 
<a name="l00542"></a>00542   <span class="keywordflow">return</span> rc;
<a name="l00543"></a>00543 }
<a name="l00544"></a>00544 
<a name="l00545"></a>00545 
<a name="l00546"></a>00546 <span class="keywordtype">int</span>
<a name="l00547"></a>00547 <a class="code" href="ospf__apiserver_8h.html#ade9b8ea2b963e74a68d25dfb6290961e">ospf_apiserver_async_write</a> (<span class="keyword">struct</span> thread *thread)
<a name="l00548"></a>00548 {
<a name="l00549"></a>00549   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l00550"></a>00550   <span class="keyword">struct </span>msg *msg;
<a name="l00551"></a>00551   <span class="keywordtype">int</span> fd;
<a name="l00552"></a>00552   <span class="keywordtype">int</span> rc = -1;
<a name="l00553"></a>00553 
<a name="l00554"></a>00554   apiserv = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00555"></a>00555   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (apiserv);
<a name="l00556"></a>00556   fd = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00557"></a>00557 
<a name="l00558"></a>00558   apiserv-&gt;<a class="code" href="structospf__apiserver.html#aa82954ace191488a17de8d1c4302f51b">t_async_write</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00559"></a>00559 
<a name="l00560"></a>00560   <span class="comment">/* Sanity check */</span>
<a name="l00561"></a>00561   <span class="keywordflow">if</span> (fd != apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>)
<a name="l00562"></a>00562     {
<a name="l00563"></a>00563       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_async_write: Unknown fd=%d&quot;</span>, fd);
<a name="l00564"></a>00564       <span class="keywordflow">goto</span> out;
<a name="l00565"></a>00565     }
<a name="l00566"></a>00566 
<a name="l00567"></a>00567   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00568"></a>00568     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: ospf_apiserver_async_write: Peer: %s/%u&quot;</span>,
<a name="l00569"></a>00569                 inet_ntoa (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a69924c7b5004e0bc012c821532b5a720">peer_async</a>.sin_addr),
<a name="l00570"></a>00570                 ntohs (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a69924c7b5004e0bc012c821532b5a720">peer_async</a>.sin_port));
<a name="l00571"></a>00571 
<a name="l00572"></a>00572   <span class="comment">/* Check whether there is really a message in the fifo. */</span>
<a name="l00573"></a>00573   msg = <a class="code" href="ospf__api_8h.html#a97dae62ffcd1031cec5dd14dfe990040">msg_fifo_pop</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a85b9b248e6579e52e720a1c0815b54ee">out_async_fifo</a>);
<a name="l00574"></a>00574   <span class="keywordflow">if</span> (!msg)
<a name="l00575"></a>00575     {
<a name="l00576"></a>00576       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;API: ospf_apiserver_async_write: No message in Async-FIFO?&quot;</span>);
<a name="l00577"></a>00577       <span class="keywordflow">return</span> 0;
<a name="l00578"></a>00578     }
<a name="l00579"></a>00579 
<a name="l00580"></a>00580   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00581"></a>00581     <a class="code" href="ospf__api_8h.html#a0924319147ae6620db0a65150299f6b2">msg_print</a> (msg);
<a name="l00582"></a>00582 
<a name="l00583"></a>00583   rc = <a class="code" href="ospf__api_8h.html#af1b5579675baac54931e5fa78b98d02e">msg_write</a> (fd, msg);
<a name="l00584"></a>00584 
<a name="l00585"></a>00585   <span class="comment">/* Once a message is dequeued, it should be freed anyway. */</span>
<a name="l00586"></a>00586   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00589"></a>00589     {
<a name="l00590"></a>00590       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l00591"></a>00591         (<span class="stringliteral">&quot;ospf_apiserver_async_write: write failed on fd=%d&quot;</span>, fd);
<a name="l00592"></a>00592       <span class="keywordflow">goto</span> out;
<a name="l00593"></a>00593     }
<a name="l00594"></a>00594 
<a name="l00595"></a>00595 
<a name="l00596"></a>00596   <span class="comment">/* If more messages are in async message fifo, schedule write thread. */</span>
<a name="l00597"></a>00597   <span class="keywordflow">if</span> (<a class="code" href="ospf__api_8h.html#a35634b9e9775136e52985e5a29924b42">msg_fifo_head</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a85b9b248e6579e52e720a1c0815b54ee">out_async_fifo</a>))
<a name="l00598"></a>00598     {
<a name="l00599"></a>00599       <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9ea9b30267095ac2c8eb8c87603dea68133">OSPF_APISERVER_ASYNC_WRITE</a>, apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>,
<a name="l00600"></a>00600                             apiserv);
<a name="l00601"></a>00601     }
<a name="l00602"></a>00602 
<a name="l00603"></a>00603  out:
<a name="l00604"></a>00604 
<a name="l00605"></a>00605   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00606"></a>00606     {
<a name="l00607"></a>00607       <span class="comment">/* Perform cleanup and disconnect with peer */</span>
<a name="l00608"></a>00608       <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00609"></a>00609     }
<a name="l00610"></a>00610 
<a name="l00611"></a>00611   <span class="keywordflow">return</span> rc;
<a name="l00612"></a>00612 }
<a name="l00613"></a>00613 
<a name="l00614"></a>00614 
<a name="l00615"></a>00615 <span class="keywordtype">int</span>
<a name="l00616"></a>00616 <a class="code" href="ospf__apiserver_8h.html#a547cf626a1830f8572a20238691b53b6">ospf_apiserver_serv_sock_family</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port, <span class="keywordtype">int</span> family)
<a name="l00617"></a>00617 {
<a name="l00618"></a>00618   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> su;
<a name="l00619"></a>00619   <span class="keywordtype">int</span> accept_sock;
<a name="l00620"></a>00620   <span class="keywordtype">int</span> rc;
<a name="l00621"></a>00621 
<a name="l00622"></a>00622   memset (&amp;su, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00623"></a>00623   su.sa.sa_family = family;
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   <span class="comment">/* Make new socket */</span>
<a name="l00626"></a>00626   accept_sock = <a class="code" href="sockunion_8c.html#aa87de7fb2e611ab14eabc9ee0242f53d">sockunion_stream_socket</a> (&amp;su);
<a name="l00627"></a>00627   <span class="keywordflow">if</span> (accept_sock &lt; 0)
<a name="l00628"></a>00628     <span class="keywordflow">return</span> accept_sock;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630   <span class="comment">/* This is a server, so reuse address and port */</span>
<a name="l00631"></a>00631   <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (accept_sock);
<a name="l00632"></a>00632   <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (accept_sock);
<a name="l00633"></a>00633 
<a name="l00634"></a>00634   <span class="comment">/* Bind socket to address and given port. */</span>
<a name="l00635"></a>00635   rc = <a class="code" href="sockunion_8c.html#a12e8d416910e79b142ec1d4fee573073">sockunion_bind</a> (accept_sock, &amp;su, port, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00636"></a>00636   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00637"></a>00637     {
<a name="l00638"></a>00638       close (accept_sock);  <span class="comment">/* Close socket */</span>
<a name="l00639"></a>00639       <span class="keywordflow">return</span> rc;
<a name="l00640"></a>00640     }
<a name="l00641"></a>00641 
<a name="l00642"></a>00642   <span class="comment">/* Listen socket under queue length 3. */</span>
<a name="l00643"></a>00643   rc = listen (accept_sock, 3);
<a name="l00644"></a>00644   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00645"></a>00645     {
<a name="l00646"></a>00646       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_serv_sock_family: listen: %s&quot;</span>,
<a name="l00647"></a>00647                  <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00648"></a>00648       close (accept_sock);  <span class="comment">/* Close socket */</span>
<a name="l00649"></a>00649       <span class="keywordflow">return</span> rc;
<a name="l00650"></a>00650     }
<a name="l00651"></a>00651   <span class="keywordflow">return</span> accept_sock;
<a name="l00652"></a>00652 }
<a name="l00653"></a>00653 
<a name="l00654"></a>00654 
<a name="l00655"></a>00655 <span class="comment">/* Accept connection request from external applications. For each</span>
<a name="l00656"></a>00656 <span class="comment">   accepted connection allocate own connection instance. */</span>
<a name="l00657"></a>00657 <span class="keywordtype">int</span>
<a name="l00658"></a>00658 <a class="code" href="ospf__apiserver_8h.html#a04c17d10629f1e9c03d4d4766659a625">ospf_apiserver_accept</a> (<span class="keyword">struct</span> thread *thread)
<a name="l00659"></a>00659 {
<a name="l00660"></a>00660   <span class="keywordtype">int</span> accept_sock;
<a name="l00661"></a>00661   <span class="keywordtype">int</span> new_sync_sock;
<a name="l00662"></a>00662   <span class="keywordtype">int</span> new_async_sock;
<a name="l00663"></a>00663   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> su;
<a name="l00664"></a>00664   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l00665"></a>00665   <span class="keyword">struct </span>sockaddr_in peer_async;
<a name="l00666"></a>00666   <span class="keyword">struct </span>sockaddr_in peer_sync;
<a name="l00667"></a>00667   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> peerlen;
<a name="l00668"></a>00668   <span class="keywordtype">int</span> ret;
<a name="l00669"></a>00669 
<a name="l00670"></a>00670   <span class="comment">/* THREAD_ARG (thread) is NULL */</span>
<a name="l00671"></a>00671   accept_sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00672"></a>00672 
<a name="l00673"></a>00673   <span class="comment">/* Keep hearing on socket for further connections. */</span>
<a name="l00674"></a>00674   <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf7d27b451246b7abd5c02d73f722e711">OSPF_APISERVER_ACCEPT</a>, accept_sock, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00675"></a>00675 
<a name="l00676"></a>00676   memset (&amp;su, 0, <span class="keyword">sizeof</span> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a>));
<a name="l00677"></a>00677   <span class="comment">/* Accept connection for synchronous messages */</span>
<a name="l00678"></a>00678   new_sync_sock = <a class="code" href="sockunion_8c.html#a71ffb8b7424679127f0ab7d3ad8c9fd4">sockunion_accept</a> (accept_sock, &amp;su);
<a name="l00679"></a>00679   <span class="keywordflow">if</span> (new_sync_sock &lt; 0)
<a name="l00680"></a>00680     {
<a name="l00681"></a>00681       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_accept: accept: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00682"></a>00682       <span class="keywordflow">return</span> -1;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684 
<a name="l00685"></a>00685   <span class="comment">/* Get port address and port number of peer to make reverse connection.</span>
<a name="l00686"></a>00686 <span class="comment">     The reverse channel uses the port number of the peer port+1. */</span>
<a name="l00687"></a>00687 
<a name="l00688"></a>00688   memset(&amp;peer_sync, 0, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in));
<a name="l00689"></a>00689   peerlen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00690"></a>00690 
<a name="l00691"></a>00691   ret = getpeername (new_sync_sock, (<span class="keyword">struct</span> sockaddr *)&amp;peer_sync, &amp;peerlen);
<a name="l00692"></a>00692   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00693"></a>00693     {
<a name="l00694"></a>00694       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_accept: getpeername: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00695"></a>00695       close (new_sync_sock);
<a name="l00696"></a>00696       <span class="keywordflow">return</span> -1;
<a name="l00697"></a>00697     }
<a name="l00698"></a>00698 
<a name="l00699"></a>00699   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00700"></a>00700     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: ospf_apiserver_accept: New peer: %s/%u&quot;</span>,
<a name="l00701"></a>00701                inet_ntoa (peer_sync.sin_addr), ntohs (peer_sync.sin_port));
<a name="l00702"></a>00702 
<a name="l00703"></a>00703   <span class="comment">/* Create new socket for asynchronous messages. */</span>
<a name="l00704"></a>00704   peer_async = peer_sync;
<a name="l00705"></a>00705   peer_async.sin_port = htons(ntohs(peer_sync.sin_port) + 1);
<a name="l00706"></a>00706 
<a name="l00707"></a>00707   <span class="comment">/* Check if remote port number to make reverse connection is valid one. */</span>
<a name="l00708"></a>00708   <span class="keywordflow">if</span> (ntohs (peer_async.sin_port) == <a class="code" href="ospf__apiserver_8h.html#a08667587a254b76402c4ef701010f1ec">ospf_apiserver_getport</a> ())
<a name="l00709"></a>00709     {
<a name="l00710"></a>00710       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;API: ospf_apiserver_accept: Peer(%s/%u): Invalid async port number?&quot;</span>,
<a name="l00711"></a>00711                inet_ntoa (peer_async.sin_addr), ntohs (peer_async.sin_port));
<a name="l00712"></a>00712       close (new_sync_sock);
<a name="l00713"></a>00713       <span class="keywordflow">return</span> -1;
<a name="l00714"></a>00714     }
<a name="l00715"></a>00715 
<a name="l00716"></a>00716   new_async_sock = socket (AF_INET, SOCK_STREAM, 0);
<a name="l00717"></a>00717   <span class="keywordflow">if</span> (new_async_sock &lt; 0)
<a name="l00718"></a>00718     {
<a name="l00719"></a>00719       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_accept: socket: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00720"></a>00720       close (new_sync_sock);
<a name="l00721"></a>00721       <span class="keywordflow">return</span> -1;
<a name="l00722"></a>00722     }
<a name="l00723"></a>00723 
<a name="l00724"></a>00724   ret = connect (new_async_sock, (<span class="keyword">struct</span> sockaddr *) &amp;peer_async,
<a name="l00725"></a>00725          <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00726"></a>00726 
<a name="l00727"></a>00727   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00728"></a>00728     {
<a name="l00729"></a>00729       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_accept: connect: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00730"></a>00730       close (new_sync_sock);
<a name="l00731"></a>00731       close (new_async_sock);
<a name="l00732"></a>00732       <span class="keywordflow">return</span> -1;
<a name="l00733"></a>00733     }
<a name="l00734"></a>00734 
<a name="l00735"></a>00735 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00736"></a>00736 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00737"></a>00737   <span class="comment">/* Make the asynchronous channel write-only. */</span>
<a name="l00738"></a>00738   ret = shutdown (new_async_sock, SHUT_RD);
<a name="l00739"></a>00739   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00740"></a>00740     {
<a name="l00741"></a>00741       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_accept: shutdown: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00742"></a>00742       close (new_sync_sock);
<a name="l00743"></a>00743       close (new_async_sock);
<a name="l00744"></a>00744       <span class="keywordflow">return</span> -1;
<a name="l00745"></a>00745     }
<a name="l00746"></a>00746 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00747"></a>00747 
<a name="l00748"></a>00748   <span class="comment">/* Allocate new server-side connection structure */</span>
<a name="l00749"></a>00749   apiserv = <a class="code" href="ospf__apiserver_8h.html#a0a5369b23497b036d28cb79021099c9b">ospf_apiserver_new</a> (new_sync_sock, new_async_sock);
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="comment">/* Add to active connection list */</span>
<a name="l00752"></a>00752   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (apiserver_list, apiserv);
<a name="l00753"></a>00753   apiserv-&gt;<a class="code" href="structospf__apiserver.html#ac932023e8b5151ce6fa645c49d169a99">peer_sync</a> = peer_sync;
<a name="l00754"></a>00754   apiserv-&gt;<a class="code" href="structospf__apiserver.html#a69924c7b5004e0bc012c821532b5a720">peer_async</a> = peer_async;
<a name="l00755"></a>00755 
<a name="l00756"></a>00756   <span class="comment">/* And add read threads for new connection */</span>
<a name="l00757"></a>00757   <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (<a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaafc629f281d14052686b777808801956">OSPF_APISERVER_SYNC_READ</a>, new_sync_sock, apiserv);
<a name="l00758"></a>00758 <span class="preprocessor">#ifdef USE_ASYNC_READ</span>
<a name="l00759"></a>00759 <span class="preprocessor"></span>  <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (OSPF_APISERVER_ASYNC_READ, new_async_sock, apiserv);
<a name="l00760"></a>00760 <span class="preprocessor">#endif </span><span class="comment">/* USE_ASYNC_READ */</span>
<a name="l00761"></a>00761 
<a name="l00762"></a>00762   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00763"></a>00763     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: New apiserv(%p), total#(%d)&quot;</span>, apiserv, apiserver_list-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>);
<a name="l00764"></a>00764 
<a name="l00765"></a>00765   <span class="keywordflow">return</span> 0;
<a name="l00766"></a>00766 }
<a name="l00767"></a>00767 
<a name="l00768"></a>00768 
<a name="l00769"></a>00769 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00770"></a>00770 <span class="comment"> * Send reply with return code to client application</span>
<a name="l00771"></a>00771 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00772"></a>00772 <span class="comment"> */</span>
<a name="l00773"></a>00773 
<a name="l00774"></a>00774 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00775"></a>00775 ospf_apiserver_send_msg (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv, <span class="keyword">struct</span> msg *msg)
<a name="l00776"></a>00776 {
<a name="l00777"></a>00777   <span class="keyword">struct </span><a class="code" href="structmsg__fifo.html">msg_fifo</a> *<a class="code" href="structfifo.html">fifo</a>;
<a name="l00778"></a>00778   <span class="keyword">struct </span>msg *msg2;
<a name="l00779"></a>00779   <span class="keyword">enum</span> <span class="keyword">event</span> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>;
<a name="l00780"></a>00780   <span class="keywordtype">int</span> fd;
<a name="l00781"></a>00781 
<a name="l00782"></a>00782   <span class="keywordflow">switch</span> (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>)
<a name="l00783"></a>00783     {
<a name="l00784"></a>00784     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a42316d489e809e8faf0bf766fe7a1039">MSG_REPLY</a>:
<a name="l00785"></a>00785       fifo = apiserv-&gt;<a class="code" href="structospf__apiserver.html#a27fe3b4181d0b181cf64f0470026c779">out_sync_fifo</a>;
<a name="l00786"></a>00786       fd = apiserv-&gt;<a class="code" href="structospf__apiserver.html#ae69d2d73460553f1d364bce12bdcfa13">fd_sync</a>;
<a name="l00787"></a>00787       <span class="keyword">event</span> = <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9eaf185e2c50bffd89565783bbd9c063ea2">OSPF_APISERVER_SYNC_WRITE</a>;
<a name="l00788"></a>00788       <span class="keywordflow">break</span>;
<a name="l00789"></a>00789     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#abe9771bd26557ef17744ac5073363c21">MSG_READY_NOTIFY</a>:
<a name="l00790"></a>00790     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a34895bb3424e37147e7383859e77bae2">MSG_LSA_UPDATE_NOTIFY</a>:
<a name="l00791"></a>00791     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a9081acc8815e23c6c0b6c53d811f82e0">MSG_LSA_DELETE_NOTIFY</a>:
<a name="l00792"></a>00792     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#af0d534b9546638d59f2e4c9c0edcbcdf">MSG_NEW_IF</a>:
<a name="l00793"></a>00793     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a9c8256a08f0095d27f738aefb4f8a5db">MSG_DEL_IF</a>:
<a name="l00794"></a>00794     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#abe2abd233ea2ab4e2fff482d4e377d96">MSG_ISM_CHANGE</a>:
<a name="l00795"></a>00795     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#aedb910a97bec22fdc4eb5858d558fa7b">MSG_NSM_CHANGE</a>:
<a name="l00796"></a>00796     <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00797"></a>00797     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#af61980ebf7c4e41d70378e90dca524f7">MSG_ROUTER_ROUTING_TABLE_CHANGE</a>:
<a name="l00798"></a>00798       fifo = apiserv-&gt;<a class="code" href="structospf__apiserver.html#a85b9b248e6579e52e720a1c0815b54ee">out_async_fifo</a>;
<a name="l00799"></a>00799       fd = apiserv-&gt;<a class="code" href="structospf__apiserver.html#a881262dd9c30c8e30b8174ab01e375d1">fd_async</a>;
<a name="l00800"></a>00800       <span class="keyword">event</span> = <a class="code" href="ospf__apiserver_8h.html#a3b65133bb9997cd1ccf311af0927fc9ea9b30267095ac2c8eb8c87603dea68133">OSPF_APISERVER_ASYNC_WRITE</a>;
<a name="l00801"></a>00801       <span class="keywordflow">break</span>;
<a name="l00802"></a>00802     <span class="keywordflow">default</span>:
<a name="l00803"></a>00803       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_send_msg: Unknown message type %d&quot;</span>,
<a name="l00804"></a>00804          msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>);
<a name="l00805"></a>00805       <span class="keywordflow">return</span> -1;
<a name="l00806"></a>00806     }
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="comment">/* Make a copy of the message and put in the fifo. Once the fifo</span>
<a name="l00809"></a>00809 <span class="comment">     gets drained by the write thread, the message will be freed. */</span>
<a name="l00810"></a>00810   <span class="comment">/* NB: Given &quot;msg&quot; is untouched in this function. */</span>
<a name="l00811"></a>00811   msg2 = <a class="code" href="ospf__api_8h.html#af5dd20a4036a803146f854aa2f7ecaf9">msg_dup</a> (msg);
<a name="l00812"></a>00812 
<a name="l00813"></a>00813   <span class="comment">/* Enqueue message into corresponding fifo queue */</span>
<a name="l00814"></a>00814   <a class="code" href="ospf__api_8h.html#a1e03daeae9e6467d6698198be38c492e">msg_fifo_push</a> (fifo, msg2);
<a name="l00815"></a>00815 
<a name="l00816"></a>00816   <span class="comment">/* Schedule write thread */</span>
<a name="l00817"></a>00817   <a class="code" href="ospf__apiserver_8h.html#aaa01ca900b62270120e30b21b46f4e59">ospf_apiserver_event</a> (event, fd, apiserv);
<a name="l00818"></a>00818   <span class="keywordflow">return</span> 0;
<a name="l00819"></a>00819 }
<a name="l00820"></a>00820 
<a name="l00821"></a>00821 <span class="keywordtype">int</span>
<a name="l00822"></a>00822 <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv, u_int32_t seqnr,
<a name="l00823"></a>00823                u_char rc)
<a name="l00824"></a>00824 {
<a name="l00825"></a>00825   <span class="keyword">struct </span>msg *msg = <a class="code" href="ospf__api_8h.html#ae3ab41503af92e8986d779a04254bd5f">new_msg_reply</a> (seqnr, rc);
<a name="l00826"></a>00826   <span class="keywordtype">int</span> ret;
<a name="l00827"></a>00827 
<a name="l00828"></a>00828   <span class="keywordflow">if</span> (!msg)
<a name="l00829"></a>00829     {
<a name="l00830"></a>00830       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_send_reply: msg_new failed&quot;</span>);
<a name="l00831"></a>00831 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l00832"></a>00832 <span class="preprocessor"></span>      <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l00833"></a>00833       <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l00834"></a>00834 <span class="preprocessor">#endif</span>
<a name="l00835"></a>00835 <span class="preprocessor"></span>      <span class="keywordflow">return</span> -1;
<a name="l00836"></a>00836     }
<a name="l00837"></a>00837 
<a name="l00838"></a>00838   ret = ospf_apiserver_send_msg (apiserv, msg);
<a name="l00839"></a>00839   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00840"></a>00840   <span class="keywordflow">return</span> ret;
<a name="l00841"></a>00841 }
<a name="l00842"></a>00842 
<a name="l00843"></a>00843 
<a name="l00844"></a>00844 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00845"></a>00845 <span class="comment"> * Generic message dispatching handler function</span>
<a name="l00846"></a>00846 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00847"></a>00847 <span class="comment"> */</span>
<a name="l00848"></a>00848 
<a name="l00849"></a>00849 <span class="keywordtype">int</span>
<a name="l00850"></a>00850 <a class="code" href="ospf__apiserver_8h.html#a4d2d8c9b58ee4e42dcd9ebbc1845cdf1">ospf_apiserver_handle_msg</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv, <span class="keyword">struct</span> msg *msg)
<a name="l00851"></a>00851 {
<a name="l00852"></a>00852   <span class="keywordtype">int</span> rc;
<a name="l00853"></a>00853 
<a name="l00854"></a>00854   <span class="comment">/* Call corresponding message handler function. */</span>
<a name="l00855"></a>00855   <span class="keywordflow">switch</span> (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>)
<a name="l00856"></a>00856     {
<a name="l00857"></a>00857     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#afd4d65279b73195de60c2fb8230d094b">MSG_REGISTER_OPAQUETYPE</a>:
<a name="l00858"></a>00858       rc = <a class="code" href="ospf__apiserver_8h.html#a1a1dbbb54f23ae9c31e43dd2aadd2d7a">ospf_apiserver_handle_register_opaque_type</a> (apiserv, msg);
<a name="l00859"></a>00859       <span class="keywordflow">break</span>;
<a name="l00860"></a>00860     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a0eb7b3bc33dfb03d89a42e652751a314">MSG_UNREGISTER_OPAQUETYPE</a>:
<a name="l00861"></a>00861       rc = <a class="code" href="ospf__apiserver_8h.html#aa28a15838413d4772edf332525f07868">ospf_apiserver_handle_unregister_opaque_type</a> (apiserv, msg);
<a name="l00862"></a>00862       <span class="keywordflow">break</span>;
<a name="l00863"></a>00863     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#aaa6a48a1b4677111398fc37d67d50834">MSG_REGISTER_EVENT</a>:
<a name="l00864"></a>00864       rc = <a class="code" href="ospf__apiserver_8h.html#a8a429b924c6b1a7377a7f65a0bd286bc">ospf_apiserver_handle_register_event</a> (apiserv, msg);
<a name="l00865"></a>00865       <span class="keywordflow">break</span>;
<a name="l00866"></a>00866     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a8301e8cea06bc27867c4039d20ad0815">MSG_SYNC_LSDB</a>:
<a name="l00867"></a>00867       rc = <a class="code" href="ospf__apiserver_8h.html#a7ca646eff451ef6c813dad3338feb3b7">ospf_apiserver_handle_sync_lsdb</a> (apiserv, msg);
<a name="l00868"></a>00868       <span class="keywordflow">break</span>;
<a name="l00869"></a>00869     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a5c05569b108e082bdb5812792e6f3074">MSG_ORIGINATE_REQUEST</a>:
<a name="l00870"></a>00870       rc = <a class="code" href="ospf__apiserver_8h.html#a2ae56fcd1f51a34007d4795cf7283e08">ospf_apiserver_handle_originate_request</a> (apiserv, msg);
<a name="l00871"></a>00871       <span class="keywordflow">break</span>;
<a name="l00872"></a>00872     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a554226c7de6f87396ad8fcb1c455e260">MSG_DELETE_REQUEST</a>:
<a name="l00873"></a>00873       rc = <a class="code" href="ospf__apiserver_8h.html#a344a368730fd77da8aece5f29dc33439">ospf_apiserver_handle_delete_request</a> (apiserv, msg);
<a name="l00874"></a>00874       <span class="keywordflow">break</span>;
<a name="l00875"></a>00875     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a1643b497beb967b812a6d7ceebff75e1">MSG_GET_ROUTER_NEXTHOPS_REQUEST</a>:
<a name="l00876"></a>00876       rc = <a class="code" href="ospf__apiserver_8h.html#a7db95285df7f8e5a4cd6e99859e81084">ospf_apiserver_handle_get_router_nexthops_request</a>(apiserv, msg);
<a name="l00877"></a>00877       <span class="keywordflow">break</span>;
<a name="l00878"></a>00878     <span class="keywordflow">default</span>:
<a name="l00879"></a>00879       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_handle_msg: Unknown message type: %d&quot;</span>,
<a name="l00880"></a>00880          msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>);
<a name="l00881"></a>00881       rc = -1;
<a name="l00882"></a>00882     }
<a name="l00883"></a>00883   <span class="keywordflow">return</span> rc;
<a name="l00884"></a>00884 }
<a name="l00885"></a>00885 
<a name="l00886"></a>00886 
<a name="l00887"></a>00887 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00888"></a>00888 <span class="comment"> * Following are functions for opaque type registration</span>
<a name="l00889"></a>00889 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00890"></a>00890 <span class="comment"> */</span>
<a name="l00891"></a>00891 
<a name="l00892"></a>00892 <span class="keywordtype">int</span>
<a name="l00893"></a>00893 <a class="code" href="ospf__apiserver_8h.html#ab73646e9a08cd16168a6cbb580c84d96">ospf_apiserver_register_opaque_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l00894"></a>00894                      u_char lsa_type, u_char opaque_type)
<a name="l00895"></a>00895 {
<a name="l00896"></a>00896   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *regtype;
<a name="l00897"></a>00897   int (*originator_func) (<span class="keywordtype">void</span> *arg);
<a name="l00898"></a>00898   <span class="keywordtype">int</span> rc;
<a name="l00899"></a>00899 
<a name="l00900"></a>00900   <span class="keywordflow">switch</span> (lsa_type)
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00903"></a>00903       originator_func = <a class="code" href="ospf__apiserver_8h.html#a5f1747abe88cf2a7bf6b4405759d58c1">ospf_apiserver_lsa9_originator</a>;
<a name="l00904"></a>00904       <span class="keywordflow">break</span>;
<a name="l00905"></a>00905     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00906"></a>00906       originator_func = <a class="code" href="ospf__apiserver_8h.html#a3f7498d96301cabe2976e967ab5e508e">ospf_apiserver_lsa10_originator</a>;
<a name="l00907"></a>00907       <span class="keywordflow">break</span>;
<a name="l00908"></a>00908     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00909"></a>00909       originator_func = <a class="code" href="ospf__apiserver_8h.html#a897887562e4d894cdfed555ea54a1aae">ospf_apiserver_lsa11_originator</a>;
<a name="l00910"></a>00910       <span class="keywordflow">break</span>;
<a name="l00911"></a>00911     <span class="keywordflow">default</span>:
<a name="l00912"></a>00912       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_register_opaque_type: lsa_type(%d)&quot;</span>,
<a name="l00913"></a>00913          lsa_type);
<a name="l00914"></a>00914       <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#a7c12e94786a0ed5da29c40d4c92a162b">OSPF_API_ILLEGALLSATYPE</a>;
<a name="l00915"></a>00915     }
<a name="l00916"></a>00916   
<a name="l00917"></a>00917 
<a name="l00918"></a>00918   <span class="comment">/* Register opaque function table */</span>
<a name="l00919"></a>00919   <span class="comment">/* NB: Duplicated registration will be detected inside the function. */</span>
<a name="l00920"></a>00920   rc =
<a name="l00921"></a>00921     <a class="code" href="ospf__opaque_8h.html#a625591adfc981177469407fa6132b3c3">ospf_register_opaque_functab</a> (lsa_type, opaque_type,
<a name="l00922"></a>00922                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_new_if */</span>
<a name="l00923"></a>00923                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_del_if */</span>
<a name="l00924"></a>00924                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_ism_change */</span>
<a name="l00925"></a>00925                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_nsm_change */</span>
<a name="l00926"></a>00926                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00927"></a>00927                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00928"></a>00928                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00929"></a>00929                   <a class="code" href="ospf__apiserver_8h.html#a3df6cc82d28def9cbfd5694de33b2ec4">ospf_apiserver_show_info</a>,
<a name="l00930"></a>00930                   originator_func,
<a name="l00931"></a>00931                   <a class="code" href="ospf__apiserver_8h.html#a72d0debd785dba0d8b6325ce613369d3">ospf_apiserver_lsa_refresher</a>,
<a name="l00932"></a>00932                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_lsa_update */</span>
<a name="l00933"></a>00933                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="comment">/* ospf_apiserver_lsa_delete */</span>
<a name="l00934"></a>00934                   <span class="comment">/* 08/23/2011 yic +1 */</span>
<a name="l00935"></a>00935                   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/* ospf_apiserver_router_routing_table_change */</span>);
<a name="l00936"></a>00936 
<a name="l00937"></a>00937   <span class="keywordflow">if</span> (rc != 0)
<a name="l00938"></a>00938     {
<a name="l00939"></a>00939       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Failed to register opaque type [%d/%d]&quot;</span>,
<a name="l00940"></a>00940          lsa_type, opaque_type);
<a name="l00941"></a>00941       <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#a7362bb3171c33eebb02b2e95ce2802a5">OSPF_API_OPAQUETYPEINUSE</a>;
<a name="l00942"></a>00942     }
<a name="l00943"></a>00943 
<a name="l00944"></a>00944   <span class="comment">/* Remember the opaque type that application registers so when</span>
<a name="l00945"></a>00945 <span class="comment">     connection shuts down, we can flush all LSAs of this opaque</span>
<a name="l00946"></a>00946 <span class="comment">     type. */</span>
<a name="l00947"></a>00947 
<a name="l00948"></a>00948   regtype =
<a name="l00949"></a>00949     <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="ospf__apiserver_8h.html#a27a754b8112772c24a20ef80a89fef28">MTYPE_OSPF_APISERVER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a>));
<a name="l00950"></a>00950   regtype-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> = <a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a>;
<a name="l00951"></a>00951   regtype-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a> = <a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>;
<a name="l00952"></a>00952 
<a name="l00953"></a>00953   <span class="comment">/* Add to list of registered opaque types */</span>
<a name="l00954"></a>00954   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, regtype);
<a name="l00955"></a>00955 
<a name="l00956"></a>00956   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00957"></a>00957     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: Add LSA-type(%d)/Opaque-type(%d) into&quot;</span>
<a name="l00958"></a>00958                <span class="stringliteral">&quot; apiserv(%p), total#(%d)&quot;</span>, 
<a name="l00959"></a>00959                lsa_type, opaque_type, apiserv, 
<a name="l00960"></a>00960                <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>));
<a name="l00961"></a>00961 
<a name="l00962"></a>00962   <span class="keywordflow">return</span> 0;
<a name="l00963"></a>00963 }
<a name="l00964"></a>00964 
<a name="l00965"></a>00965 <span class="keywordtype">int</span>
<a name="l00966"></a>00966 <a class="code" href="ospf__apiserver_8h.html#a08cc60a02d6f06baf52b12846593bd13">ospf_apiserver_unregister_opaque_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l00967"></a>00967                        u_char lsa_type, u_char opaque_type)
<a name="l00968"></a>00968 {
<a name="l00969"></a>00969   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00970"></a>00970   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *regtype;
<a name="l00971"></a>00971 
<a name="l00972"></a>00972   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node, nnode, regtype))
<a name="l00973"></a>00973     {
<a name="l00974"></a>00974       <span class="comment">/* Check if we really registered this opaque type */</span>
<a name="l00975"></a>00975       <span class="keywordflow">if</span> (regtype-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == lsa_type &amp;&amp;
<a name="l00976"></a>00976       regtype-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a> == opaque_type)
<a name="l00977"></a>00977     {
<a name="l00978"></a>00978 
<a name="l00979"></a>00979       <span class="comment">/* Yes, we registered this opaque type. Flush</span>
<a name="l00980"></a>00980 <span class="comment">         all existing opaque LSAs of this type */</span>
<a name="l00981"></a>00981 
<a name="l00982"></a>00982       <a class="code" href="ospf__apiserver_8h.html#a33350dc16b3fb76a09130b12fb9298c0">ospf_apiserver_flush_opaque_lsa</a> (apiserv, lsa_type, opaque_type);
<a name="l00983"></a>00983       <a class="code" href="ospf__opaque_8h.html#a41bea3a6d41383d3785814e97a32f4c6">ospf_delete_opaque_functab</a> (lsa_type, opaque_type);
<a name="l00984"></a>00984 
<a name="l00985"></a>00985       <span class="comment">/* Remove from list of registered opaque types */</span>
<a name="l00986"></a>00986       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, regtype);
<a name="l00987"></a>00987 
<a name="l00988"></a>00988           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00989"></a>00989             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;API: Del LSA-type(%d)/Opaque-type(%d)&quot;</span>
<a name="l00990"></a>00990                        <span class="stringliteral">&quot; from apiserv(%p), total#(%d)&quot;</span>, 
<a name="l00991"></a>00991                        lsa_type, opaque_type, apiserv, 
<a name="l00992"></a>00992                        <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>));
<a name="l00993"></a>00993 
<a name="l00994"></a>00994       <span class="keywordflow">return</span> 0;
<a name="l00995"></a>00995     }
<a name="l00996"></a>00996     }
<a name="l00997"></a>00997 
<a name="l00998"></a>00998   <span class="comment">/* Opaque type is not registered */</span>
<a name="l00999"></a>00999   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Failed to unregister opaque type [%d/%d]&quot;</span>,
<a name="l01000"></a>01000          lsa_type, opaque_type);
<a name="l01001"></a>01001   <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#ae4119af801c1e6feeb30376e0073596e">OSPF_API_OPAQUETYPENOTREGISTERED</a>;
<a name="l01002"></a>01002 }
<a name="l01003"></a>01003 
<a name="l01004"></a>01004 
<a name="l01005"></a>01005 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01006"></a>01006 apiserver_is_opaque_type_registered (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01007"></a>01007                      u_char lsa_type, u_char opaque_type)
<a name="l01008"></a>01008 {
<a name="l01009"></a>01009   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01010"></a>01010   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *regtype;
<a name="l01011"></a>01011 
<a name="l01012"></a>01012   <span class="comment">/* XXX: how many types are there? if few, why not just a bitmap? */</span>
<a name="l01013"></a>01013   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node, nnode, regtype))
<a name="l01014"></a>01014     {
<a name="l01015"></a>01015       <span class="comment">/* Check if we really registered this opaque type */</span>
<a name="l01016"></a>01016       <span class="keywordflow">if</span> (regtype-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == lsa_type &amp;&amp;
<a name="l01017"></a>01017       regtype-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a> == opaque_type)
<a name="l01018"></a>01018     {
<a name="l01019"></a>01019       <span class="comment">/* Yes registered */</span>
<a name="l01020"></a>01020       <span class="keywordflow">return</span> 1;
<a name="l01021"></a>01021     }
<a name="l01022"></a>01022     }
<a name="l01023"></a>01023   <span class="comment">/* Not registered */</span>
<a name="l01024"></a>01024   <span class="keywordflow">return</span> 0;
<a name="l01025"></a>01025 }
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 <span class="keywordtype">int</span>
<a name="l01028"></a>01028 <a class="code" href="ospf__apiserver_8h.html#a1a1dbbb54f23ae9c31e43dd2aadd2d7a">ospf_apiserver_handle_register_opaque_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01029"></a>01029                         <span class="keyword">struct</span> msg *msg)
<a name="l01030"></a>01030 {
<a name="l01031"></a>01031   <span class="keyword">struct </span><a class="code" href="structmsg__register__opaque__type.html">msg_register_opaque_type</a> *rmsg;
<a name="l01032"></a>01032   u_char lsa_type;
<a name="l01033"></a>01033   u_char opaque_type;
<a name="l01034"></a>01034   <span class="keywordtype">int</span> rc = 0;
<a name="l01035"></a>01035 
<a name="l01036"></a>01036   <span class="comment">/* Extract parameters from register opaque type message */</span>
<a name="l01037"></a>01037   rmsg = (<span class="keyword">struct </span><a class="code" href="structmsg__register__opaque__type.html">msg_register_opaque_type</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   lsa_type = rmsg-&gt;<a class="code" href="structmsg__register__opaque__type.html#a4912d73338b6f0e25792d1ebd71adae6">lsatype</a>;
<a name="l01040"></a>01040   opaque_type = rmsg-&gt;<a class="code" href="structmsg__register__opaque__type.html#a10cf8c1a2fa1b8258222042cfdc438bb">opaquetype</a>;
<a name="l01041"></a>01041 
<a name="l01042"></a>01042   rc = <a class="code" href="ospf__apiserver_8h.html#ab73646e9a08cd16168a6cbb580c84d96">ospf_apiserver_register_opaque_type</a> (apiserv, lsa_type, opaque_type);
<a name="l01043"></a>01043 
<a name="l01044"></a>01044   <span class="comment">/* Send a reply back to client including return code */</span>
<a name="l01045"></a>01045   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>), rc);
<a name="l01046"></a>01046   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l01047"></a>01047     <span class="keywordflow">goto</span> out;
<a name="l01048"></a>01048 
<a name="l01049"></a>01049   <span class="comment">/* Now inform application about opaque types that are ready */</span>
<a name="l01050"></a>01050   <span class="keywordflow">switch</span> (lsa_type)
<a name="l01051"></a>01051     {
<a name="l01052"></a>01052     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01053"></a>01053       <a class="code" href="ospf__apiserver_8h.html#adc20fa52e5ee05815d3a19a5227c1c88">ospf_apiserver_notify_ready_type9</a> (apiserv);
<a name="l01054"></a>01054       <span class="keywordflow">break</span>;
<a name="l01055"></a>01055     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01056"></a>01056       <a class="code" href="ospf__apiserver_8h.html#abdb2b4b4c17c0473013ebc8af487caf5">ospf_apiserver_notify_ready_type10</a> (apiserv);
<a name="l01057"></a>01057       <span class="keywordflow">break</span>;
<a name="l01058"></a>01058     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l01059"></a>01059       <a class="code" href="ospf__apiserver_8h.html#acc93d6c3a6dc2c67773b33e3268fd554">ospf_apiserver_notify_ready_type11</a> (apiserv);
<a name="l01060"></a>01060       <span class="keywordflow">break</span>;
<a name="l01061"></a>01061     }
<a name="l01062"></a>01062 out:
<a name="l01063"></a>01063   <span class="keywordflow">return</span> rc;
<a name="l01064"></a>01064 }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066 
<a name="l01067"></a>01067 <span class="comment">/* Notify specific client about all opaque types 9 that are ready. */</span>
<a name="l01068"></a>01068 <span class="keywordtype">void</span>
<a name="l01069"></a>01069 <a class="code" href="ospf__apiserver_8h.html#adc20fa52e5ee05815d3a19a5227c1c88">ospf_apiserver_notify_ready_type9</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv)
<a name="l01070"></a>01070 {
<a name="l01071"></a>01071   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01072"></a>01072   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l01073"></a>01073   <span class="keyword">struct </span>ospf *ospf;
<a name="l01074"></a>01074   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01075"></a>01075   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l01076"></a>01076 
<a name="l01077"></a>01077   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01078"></a>01078 
<a name="l01079"></a>01079   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l01080"></a>01080     {
<a name="l01081"></a>01081       <span class="comment">/* Check if this interface is indeed ready for type 9 */</span>
<a name="l01082"></a>01082       <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (oi))
<a name="l01083"></a>01083     <span class="keywordflow">continue</span>;
<a name="l01084"></a>01084 
<a name="l01085"></a>01085       <span class="comment">/* Check for registered opaque type 9 types */</span>
<a name="l01086"></a>01086       <span class="comment">/* XXX: loop-de-loop - optimise me */</span>
<a name="l01087"></a>01087       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node2, nnode2, r))
<a name="l01088"></a>01088     {
<a name="l01089"></a>01089       <span class="keyword">struct </span>msg *msg;
<a name="l01090"></a>01090 
<a name="l01091"></a>01091       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l01092"></a>01092         {
<a name="l01093"></a>01093 
<a name="l01094"></a>01094           <span class="comment">/* Yes, this opaque type is ready */</span>
<a name="l01095"></a>01095           msg = <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>,
<a name="l01096"></a>01096                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>,
<a name="l01097"></a>01097                       oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l01098"></a>01098           <span class="keywordflow">if</span> (!msg)
<a name="l01099"></a>01099         {
<a name="l01100"></a>01100           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_notify_ready_type9: msg_new failed&quot;</span>);
<a name="l01101"></a>01101 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01102"></a>01102 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l01103"></a>01103           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l01104"></a>01104 <span class="preprocessor">#endif</span>
<a name="l01105"></a>01105 <span class="preprocessor"></span>          <span class="keywordflow">goto</span> out;
<a name="l01106"></a>01106         }
<a name="l01107"></a>01107           ospf_apiserver_send_msg (apiserv, msg);
<a name="l01108"></a>01108           <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l01109"></a>01109         }
<a name="l01110"></a>01110     }
<a name="l01111"></a>01111     }
<a name="l01112"></a>01112 
<a name="l01113"></a>01113 out:
<a name="l01114"></a>01114   <span class="keywordflow">return</span>;
<a name="l01115"></a>01115 }
<a name="l01116"></a>01116 
<a name="l01117"></a>01117 
<a name="l01118"></a>01118 <span class="comment">/* Notify specific client about all opaque types 10 that are ready. */</span>
<a name="l01119"></a>01119 <span class="keywordtype">void</span>
<a name="l01120"></a>01120 <a class="code" href="ospf__apiserver_8h.html#abdb2b4b4c17c0473013ebc8af487caf5">ospf_apiserver_notify_ready_type10</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv)
<a name="l01121"></a>01121 {
<a name="l01122"></a>01122   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01123"></a>01123   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l01124"></a>01124   <span class="keyword">struct </span>ospf *ospf;
<a name="l01125"></a>01125   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01126"></a>01126   
<a name="l01127"></a>01127   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01128"></a>01128 
<a name="l01129"></a>01129   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
<a name="l01130"></a>01130     {
<a name="l01131"></a>01131       <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l01132"></a>01132       
<a name="l01133"></a>01133       <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a1f7d9d20eaced8415f6f911aac30a3a1">ospf_apiserver_is_ready_type10</a> (area))
<a name="l01134"></a>01134     {
<a name="l01135"></a>01135       <span class="keywordflow">continue</span>;
<a name="l01136"></a>01136     }
<a name="l01137"></a>01137 
<a name="l01138"></a>01138       <span class="comment">/* Check for registered opaque type 10 types */</span>
<a name="l01139"></a>01139       <span class="comment">/* XXX: loop in loop - optimise me */</span>
<a name="l01140"></a>01140       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node2, nnode2, r))
<a name="l01141"></a>01141     {
<a name="l01142"></a>01142       <span class="keyword">struct </span>msg *msg;
<a name="l01143"></a>01143       
<a name="l01144"></a>01144       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>)
<a name="l01145"></a>01145         {
<a name="l01146"></a>01146           <span class="comment">/* Yes, this opaque type is ready */</span>
<a name="l01147"></a>01147           msg =
<a name="l01148"></a>01148         <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>,
<a name="l01149"></a>01149                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>, area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l01150"></a>01150           <span class="keywordflow">if</span> (!msg)
<a name="l01151"></a>01151         {
<a name="l01152"></a>01152           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_notify_ready_type10: msg_new failed&quot;</span>);
<a name="l01153"></a>01153 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01154"></a>01154 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l01155"></a>01155           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l01156"></a>01156 <span class="preprocessor">#endif</span>
<a name="l01157"></a>01157 <span class="preprocessor"></span>          <span class="keywordflow">goto</span> out;
<a name="l01158"></a>01158         }
<a name="l01159"></a>01159           ospf_apiserver_send_msg (apiserv, msg);
<a name="l01160"></a>01160           <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l01161"></a>01161         }
<a name="l01162"></a>01162     }
<a name="l01163"></a>01163     }
<a name="l01164"></a>01164 
<a name="l01165"></a>01165 out:
<a name="l01166"></a>01166   <span class="keywordflow">return</span>;
<a name="l01167"></a>01167 }
<a name="l01168"></a>01168 
<a name="l01169"></a>01169 <span class="comment">/* Notify specific client about all opaque types 11 that are ready */</span>
<a name="l01170"></a>01170 <span class="keywordtype">void</span>
<a name="l01171"></a>01171 <a class="code" href="ospf__apiserver_8h.html#acc93d6c3a6dc2c67773b33e3268fd554">ospf_apiserver_notify_ready_type11</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv)
<a name="l01172"></a>01172 {
<a name="l01173"></a>01173   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01174"></a>01174   <span class="keyword">struct </span>ospf *ospf;
<a name="l01175"></a>01175   <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l01176"></a>01176 
<a name="l01177"></a>01177   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01178"></a>01178 
<a name="l01179"></a>01179   <span class="comment">/* Can type 11 be originated? */</span>
<a name="l01180"></a>01180   <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a37b592bdc796580f90c670c61738d89a">ospf_apiserver_is_ready_type11</a> (ospf))
<a name="l01181"></a>01181     <span class="keywordflow">goto</span> out;
<a name="l01182"></a>01182 
<a name="l01183"></a>01183   <span class="comment">/* Check for registered opaque type 11 types */</span>
<a name="l01184"></a>01184   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node, nnode, r))
<a name="l01185"></a>01185     {
<a name="l01186"></a>01186       <span class="keyword">struct </span>msg *msg;
<a name="l01187"></a>01187       <span class="keyword">struct </span>in_addr noarea_id = { .s_addr = 0L };
<a name="l01188"></a>01188       
<a name="l01189"></a>01189       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>)
<a name="l01190"></a>01190     {
<a name="l01191"></a>01191       <span class="comment">/* Yes, this opaque type is ready */</span>
<a name="l01192"></a>01192       msg = <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>,
<a name="l01193"></a>01193                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>, noarea_id);
<a name="l01194"></a>01194 
<a name="l01195"></a>01195       <span class="keywordflow">if</span> (!msg)
<a name="l01196"></a>01196         {
<a name="l01197"></a>01197           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_notify_ready_type11: msg_new failed&quot;</span>);
<a name="l01198"></a>01198 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01199"></a>01199 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l01200"></a>01200           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l01201"></a>01201 <span class="preprocessor">#endif</span>
<a name="l01202"></a>01202 <span class="preprocessor"></span>          <span class="keywordflow">goto</span> out;
<a name="l01203"></a>01203         }
<a name="l01204"></a>01204       ospf_apiserver_send_msg (apiserv, msg);
<a name="l01205"></a>01205       <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l01206"></a>01206     }
<a name="l01207"></a>01207     }
<a name="l01208"></a>01208 
<a name="l01209"></a>01209 out:
<a name="l01210"></a>01210   <span class="keywordflow">return</span>;
<a name="l01211"></a>01211 }
<a name="l01212"></a>01212 
<a name="l01213"></a>01213 <span class="keywordtype">int</span>
<a name="l01214"></a>01214 <a class="code" href="ospf__apiserver_8h.html#aa28a15838413d4772edf332525f07868">ospf_apiserver_handle_unregister_opaque_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01215"></a>01215                           <span class="keyword">struct</span> msg *msg)
<a name="l01216"></a>01216 {
<a name="l01217"></a>01217   <span class="keyword">struct </span><a class="code" href="structmsg__unregister__opaque__type.html">msg_unregister_opaque_type</a> *umsg;
<a name="l01218"></a>01218   u_char ltype;
<a name="l01219"></a>01219   u_char otype;
<a name="l01220"></a>01220   <span class="keywordtype">int</span> rc = 0;
<a name="l01221"></a>01221 
<a name="l01222"></a>01222   <span class="comment">/* Extract parameters from unregister opaque type message */</span>
<a name="l01223"></a>01223   umsg = (<span class="keyword">struct </span><a class="code" href="structmsg__unregister__opaque__type.html">msg_unregister_opaque_type</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01224"></a>01224 
<a name="l01225"></a>01225   ltype = umsg-&gt;<a class="code" href="structmsg__unregister__opaque__type.html#a2ae1a10b5ecfde45adf781cc790c61a3">lsatype</a>;
<a name="l01226"></a>01226   otype = umsg-&gt;<a class="code" href="structmsg__unregister__opaque__type.html#a22ffdf1ea7ea0ea01a5ff0e6c2624e5f">opaquetype</a>;
<a name="l01227"></a>01227 
<a name="l01228"></a>01228   rc = <a class="code" href="ospf__apiserver_8h.html#a08cc60a02d6f06baf52b12846593bd13">ospf_apiserver_unregister_opaque_type</a> (apiserv, ltype, otype);
<a name="l01229"></a>01229 
<a name="l01230"></a>01230   <span class="comment">/* Send a reply back to client including return code */</span>
<a name="l01231"></a>01231   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>), rc);
<a name="l01232"></a>01232 
<a name="l01233"></a>01233   <span class="keywordflow">return</span> rc;
<a name="l01234"></a>01234 }
<a name="l01235"></a>01235 
<a name="l01236"></a>01236 
<a name="l01237"></a>01237 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l01238"></a>01238 <span class="comment"> * Following are functions for event (filter) registration.</span>
<a name="l01239"></a>01239 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l01240"></a>01240 <span class="comment"> */</span>
<a name="l01241"></a>01241 <span class="keywordtype">int</span>
<a name="l01242"></a>01242 <a class="code" href="ospf__apiserver_8h.html#a8a429b924c6b1a7377a7f65a0bd286bc">ospf_apiserver_handle_register_event</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01243"></a>01243                       <span class="keyword">struct</span> msg *msg)
<a name="l01244"></a>01244 {
<a name="l01245"></a>01245   <span class="keyword">struct </span><a class="code" href="structmsg__register__event.html">msg_register_event</a> *rmsg;
<a name="l01246"></a>01246   <span class="keywordtype">int</span> rc;
<a name="l01247"></a>01247   u_int32_t seqnum;
<a name="l01248"></a>01248 
<a name="l01249"></a>01249   rmsg = (<span class="keyword">struct </span><a class="code" href="structmsg__register__event.html">msg_register_event</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01250"></a>01250 
<a name="l01251"></a>01251   <span class="comment">/* Get request sequence number */</span>
<a name="l01252"></a>01252   seqnum = <a class="code" href="ospf__api_8h.html#a2ff0457183106c8a6a5a0291a23d4d02">msg_get_seq</a> (msg);
<a name="l01253"></a>01253 
<a name="l01254"></a>01254   <span class="comment">/* Free existing filter in apiserv. */</span>
<a name="l01255"></a>01255   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__apiserver_8h.html#a6c8a5a60057849a35def4038394ce66d">MTYPE_OSPF_APISERVER_MSGFILTER</a>, apiserv-&gt;<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a>);
<a name="l01256"></a>01256   <span class="comment">/* Alloc new space for filter. */</span>
<a name="l01257"></a>01257 
<a name="l01258"></a>01258   apiserv-&gt;<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="ospf__apiserver_8h.html#a6c8a5a60057849a35def4038394ce66d">MTYPE_OSPF_APISERVER_MSGFILTER</a>,
<a name="l01259"></a>01259                  ntohs (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab996c656f7e483bef6eb17bd783856b6">msglen</a>));
<a name="l01260"></a>01260   <span class="keywordflow">if</span> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a>)
<a name="l01261"></a>01261     {
<a name="l01262"></a>01262       <span class="comment">/* copy it over. */</span>
<a name="l01263"></a>01263       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a>, &amp;rmsg-&gt;<a class="code" href="structmsg__register__event.html#a0b9e5295c6abadf43d443b42add1a0ba">filter</a>, ntohs (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab996c656f7e483bef6eb17bd783856b6">msglen</a>));
<a name="l01264"></a>01264       rc = <a class="code" href="ospf__api_8h.html#a9c5d529782dfc28b70a1220d66d6feff">OSPF_API_OK</a>;
<a name="l01265"></a>01265     }
<a name="l01266"></a>01266   <span class="keywordflow">else</span>
<a name="l01267"></a>01267     {
<a name="l01268"></a>01268       rc = <a class="code" href="ospf__api_8h.html#a49a52186a0e297706895dd5ccac9f585">OSPF_API_NOMEMORY</a>;
<a name="l01269"></a>01269     }
<a name="l01270"></a>01270   <span class="comment">/* Send a reply back to client with return code */</span>
<a name="l01271"></a>01271   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, seqnum, rc);
<a name="l01272"></a>01272   <span class="keywordflow">return</span> rc;
<a name="l01273"></a>01273 }
<a name="l01274"></a>01274 
<a name="l01275"></a>01275 <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l01276"></a>01276 <span class="keyword">static</span> <span class="keywordtype">int</span> apiserver_get_router_nexthops_callback(<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01277"></a>01277         <span class="keyword">struct</span> in_addr router_id, <span class="keywordtype">int</span> seqnum)
<a name="l01278"></a>01278 {
<a name="l01279"></a>01279     <span class="keyword">struct </span>msg *msg;
<a name="l01280"></a>01280     <span class="keyword">struct </span>ospf *ospf;
<a name="l01281"></a>01281     <span class="keywordtype">int</span> rc = -1;
<a name="l01282"></a>01282     <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01283"></a>01283 
<a name="l01284"></a>01284     ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01285"></a>01285     rn = <a class="code" href="table_8c.html#a9c0fd90aeeed01fb5b5301c98f642a95">route_node_match_ipv4</a>(ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>, &amp;router_id);
<a name="l01286"></a>01286 
<a name="l01287"></a>01287     msg = <a class="code" href="ospf__api_8h.html#af7ea77ff791554b2924e3782c1213e51">new_msg_router_routing_table_change</a>(seqnum, router_id, rn);
<a name="l01288"></a>01288 
<a name="l01289"></a>01289     <span class="keywordflow">if</span> (!msg)
<a name="l01290"></a>01290     {
<a name="l01291"></a>01291         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_get_router_nexthops_callback failed&quot;</span>);
<a name="l01292"></a>01292         <span class="keywordflow">goto</span> out;
<a name="l01293"></a>01293     }
<a name="l01294"></a>01294 
<a name="l01295"></a>01295     rc = ospf_apiserver_send_msg(apiserv, msg);
<a name="l01296"></a>01296     <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a>(msg);
<a name="l01297"></a>01297 
<a name="l01298"></a>01298 out:
<a name="l01299"></a>01299     <span class="keywordflow">return</span> rc;
<a name="l01300"></a>01300 }
<a name="l01301"></a>01301 
<a name="l01302"></a>01302 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l01303"></a>01303 <span class="comment"> * Followings are functions for LSDB synchronization.</span>
<a name="l01304"></a>01304 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l01305"></a>01305 <span class="comment"> */</span>
<a name="l01306"></a>01306 
<a name="l01307"></a>01307 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01308"></a>01308 apiserver_sync_callback (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa, <span class="keywordtype">void</span> *p_arg, <span class="keywordtype">int</span> int_arg)
<a name="l01309"></a>01309 {
<a name="l01310"></a>01310   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l01311"></a>01311   <span class="keywordtype">int</span> seqnum;
<a name="l01312"></a>01312   <span class="keyword">struct </span>msg *msg;
<a name="l01313"></a>01313   <span class="keyword">struct </span>param_t
<a name="l01314"></a>01314   {
<a name="l01315"></a>01315     <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l01316"></a>01316     <span class="keyword">struct </span><a class="code" href="structlsa__filter__type.html">lsa_filter_type</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l01317"></a>01317   }
<a name="l01318"></a>01318    *param;
<a name="l01319"></a>01319   <span class="keywordtype">int</span> rc = -1;
<a name="l01320"></a>01320 
<a name="l01321"></a>01321   <span class="comment">/* Sanity check */</span>
<a name="l01322"></a>01322   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l01323"></a>01323   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p_arg);
<a name="l01324"></a>01324 
<a name="l01325"></a>01325   param = (<span class="keyword">struct </span>param_t *) p_arg;
<a name="l01326"></a>01326   apiserv = param-&gt;apiserv;
<a name="l01327"></a>01327   seqnum = (u_int32_t) int_arg;
<a name="l01328"></a>01328 
<a name="l01329"></a>01329   <span class="comment">/* Check origin in filter. */</span>
<a name="l01330"></a>01330   <span class="keywordflow">if</span> ((param-&gt;filter-&gt;origin == <a class="code" href="ospf__api_8h.html#a540bc4d38c44ca370a74bc4c97998534">ANY_ORIGIN</a>) ||
<a name="l01331"></a>01331       (param-&gt;filter-&gt;origin == (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>)))
<a name="l01332"></a>01332     {
<a name="l01333"></a>01333 
<a name="l01334"></a>01334       <span class="comment">/* Default area for AS-External and Opaque11 LSAs */</span>
<a name="l01335"></a>01335       <span class="keyword">struct </span>in_addr area_id = { .s_addr = 0L };
<a name="l01336"></a>01336 
<a name="l01337"></a>01337       <span class="comment">/* Default interface for non Opaque9 LSAs */</span>
<a name="l01338"></a>01338       <span class="keyword">struct </span>in_addr ifaddr = { .s_addr = 0L };
<a name="l01339"></a>01339       
<a name="l01340"></a>01340       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>)
<a name="l01341"></a>01341     {
<a name="l01342"></a>01342       area_id = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l01343"></a>01343     }
<a name="l01344"></a>01344       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l01345"></a>01345     {
<a name="l01346"></a>01346       ifaddr = lsa-&gt;oi-&gt;address-&gt;u.prefix4;
<a name="l01347"></a>01347     }
<a name="l01348"></a>01348 
<a name="l01349"></a>01349       msg = <a class="code" href="ospf__api_8h.html#afb4b60754cabab3068ae629ef115f61b">new_msg_lsa_change_notify</a> (<a class="code" href="ospf__api_8h.html#a34895bb3424e37147e7383859e77bae2">MSG_LSA_UPDATE_NOTIFY</a>,
<a name="l01350"></a>01350                        seqnum,
<a name="l01351"></a>01351                        ifaddr, area_id,
<a name="l01352"></a>01352                        lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l01353"></a>01353       <span class="keywordflow">if</span> (!msg)
<a name="l01354"></a>01354     {
<a name="l01355"></a>01355       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_sync_callback: new_msg_update failed&quot;</span>);
<a name="l01356"></a>01356 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01357"></a>01357 <span class="preprocessor"></span>      <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l01358"></a>01358 <span class="comment">/*        ospf_apiserver_free (apiserv);*/</span><span class="comment">/* Do nothing here XXX */</span>
<a name="l01359"></a>01359 <span class="preprocessor">#endif</span>
<a name="l01360"></a>01360 <span class="preprocessor"></span>      <span class="keywordflow">goto</span> out;
<a name="l01361"></a>01361     }
<a name="l01362"></a>01362 
<a name="l01363"></a>01363       <span class="comment">/* Send LSA */</span>
<a name="l01364"></a>01364       ospf_apiserver_send_msg (apiserv, msg);
<a name="l01365"></a>01365       <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l01366"></a>01366     }
<a name="l01367"></a>01367   rc = 0;
<a name="l01368"></a>01368 
<a name="l01369"></a>01369 out:
<a name="l01370"></a>01370   <span class="keywordflow">return</span> rc;
<a name="l01371"></a>01371 }
<a name="l01372"></a>01372 
<a name="l01373"></a>01373 <span class="keywordtype">int</span>
<a name="l01374"></a>01374 <a class="code" href="ospf__apiserver_8h.html#a7ca646eff451ef6c813dad3338feb3b7">ospf_apiserver_handle_sync_lsdb</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01375"></a>01375                  <span class="keyword">struct</span> msg *msg)
<a name="l01376"></a>01376 {
<a name="l01377"></a>01377   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01378"></a>01378   u_int32_t seqnum;
<a name="l01379"></a>01379   <span class="keywordtype">int</span> rc = 0;
<a name="l01380"></a>01380   <span class="keyword">struct </span><a class="code" href="structmsg__sync__lsdb.html">msg_sync_lsdb</a> *smsg;
<a name="l01381"></a>01381   <span class="keyword">struct </span>ospf_apiserver_param_t
<a name="l01382"></a>01382   {
<a name="l01383"></a>01383     <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l01384"></a>01384     <span class="keyword">struct </span><a class="code" href="structlsa__filter__type.html">lsa_filter_type</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l01385"></a>01385   } param;
<a name="l01386"></a>01386   u_int16_t mask;
<a name="l01387"></a>01387   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01388"></a>01388   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l01389"></a>01389   <span class="keyword">struct </span>ospf *ospf;
<a name="l01390"></a>01390   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01391"></a>01391 
<a name="l01392"></a>01392   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01393"></a>01393 
<a name="l01394"></a>01394   <span class="comment">/* Get request sequence number */</span>
<a name="l01395"></a>01395   seqnum = <a class="code" href="ospf__api_8h.html#a2ff0457183106c8a6a5a0291a23d4d02">msg_get_seq</a> (msg);
<a name="l01396"></a>01396   <span class="comment">/* Set sync msg. */</span>
<a name="l01397"></a>01397   smsg = (<span class="keyword">struct </span><a class="code" href="structmsg__sync__lsdb.html">msg_sync_lsdb</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01398"></a>01398 
<a name="l01399"></a>01399   <span class="comment">/* Set parameter struct. */</span>
<a name="l01400"></a>01400   param.apiserv = apiserv;
<a name="l01401"></a>01401   param.<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a> = &amp;smsg-&gt;<a class="code" href="structmsg__sync__lsdb.html#a7861ca76e91851759107ebfc64c24691">filter</a>;
<a name="l01402"></a>01402 
<a name="l01403"></a>01403   <span class="comment">/* Remember mask. */</span>
<a name="l01404"></a>01404   mask = ntohs (smsg-&gt;<a class="code" href="structmsg__sync__lsdb.html#a7861ca76e91851759107ebfc64c24691">filter</a>.<a class="code" href="structlsa__filter__type.html#aa5fe7d15c2a49cf18a2bb996e4d07459">typemask</a>);
<a name="l01405"></a>01405 
<a name="l01406"></a>01406   <span class="comment">/* Iterate over all areas. */</span>
<a name="l01407"></a>01407   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
<a name="l01408"></a>01408     {
<a name="l01409"></a>01409       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01410"></a>01410       u_int32_t *area_id = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01411"></a>01411 
<a name="l01412"></a>01412       <span class="comment">/* Compare area_id with area_ids in sync request. */</span>
<a name="l01413"></a>01413       <span class="keywordflow">if</span> ((i = smsg-&gt;<a class="code" href="structmsg__sync__lsdb.html#a7861ca76e91851759107ebfc64c24691">filter</a>.<a class="code" href="structlsa__filter__type.html#a122e6de12b070f0a38d9d1a2b5199a9d">num_areas</a>) &gt; 0)
<a name="l01414"></a>01414     {
<a name="l01415"></a>01415       <span class="comment">/* Let area_id point to the list of area IDs,</span>
<a name="l01416"></a>01416 <span class="comment">       * which is at the end of smsg-&gt;filter. */</span>
<a name="l01417"></a>01417       area_id = (u_int32_t *) (&amp;smsg-&gt;<a class="code" href="structmsg__sync__lsdb.html#a7861ca76e91851759107ebfc64c24691">filter</a> + 1);
<a name="l01418"></a>01418       <span class="keywordflow">while</span> (i)
<a name="l01419"></a>01419         {
<a name="l01420"></a>01420           <span class="keywordflow">if</span> (*area_id == area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>.s_addr)
<a name="l01421"></a>01421         {
<a name="l01422"></a>01422           <span class="keywordflow">break</span>;
<a name="l01423"></a>01423         }
<a name="l01424"></a>01424           i--;
<a name="l01425"></a>01425           area_id++;
<a name="l01426"></a>01426         }
<a name="l01427"></a>01427     }
<a name="l01428"></a>01428       <span class="keywordflow">else</span>
<a name="l01429"></a>01429     {
<a name="l01430"></a>01430       i = 1;
<a name="l01431"></a>01431     }
<a name="l01432"></a>01432 
<a name="l01433"></a>01433       <span class="comment">/* If area was found, then i&gt;0 here. */</span>
<a name="l01434"></a>01434       <span class="keywordflow">if</span> (i)
<a name="l01435"></a>01435     {
<a name="l01436"></a>01436       <span class="comment">/* Check msg type. */</span>
<a name="l01437"></a>01437       <span class="keywordflow">if</span> (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>])
<a name="l01438"></a>01438         <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a9b953d2ac1c54862e897adada93cb8a4">ROUTER_LSDB</a> (area), rn, lsa)
<a name="l01439"></a>01439           apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01440"></a>01440       if (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>])
<a name="l01441"></a>01441             <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a73230fbde5946c52a9905d9d56f5eb0d">NETWORK_LSDB</a> (area), rn, lsa)
<a name="l01442"></a>01442               apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01443"></a>01443       if (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>])
<a name="l01444"></a>01444             <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a58ae6df59f7476d7784e19f7ca19db1f">SUMMARY_LSDB</a> (area), rn, lsa)
<a name="l01445"></a>01445               apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01446"></a>01446       if (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>])
<a name="l01447"></a>01447             <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a145a10afd0c8a801d2e84b26c0becbfd">ASBR_SUMMARY_LSDB</a> (area), rn, lsa)
<a name="l01448"></a>01448               apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01449"></a>01449       if (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>])
<a name="l01450"></a>01450             <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a7b6d75a56662bb4e124777b376bb84da">OPAQUE_LINK_LSDB</a> (area), rn, lsa)
<a name="l01451"></a>01451               apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01452"></a>01452       if (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>])
<a name="l01453"></a>01453             <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aec3918874489142043aedd1ac5855f57">OPAQUE_AREA_LSDB</a> (area), rn, lsa)
<a name="l01454"></a>01454               apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01455"></a>01455     }
<a name="l01456"></a>01456     }
<a name="l01457"></a>01457 
<a name="l01458"></a>01458   <span class="comment">/* For AS-external LSAs */</span>
<a name="l01459"></a>01459   if (ospf-&gt;lsdb)
<a name="l01460"></a>01460     {
<a name="l01461"></a>01461       <span class="keywordflow">if</span> (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>])
<a name="l01462"></a>01462     <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ae56a8a7b638bd22caf86ea3d810fdbd9">EXTERNAL_LSDB</a> (ospf), rn, lsa)
<a name="l01463"></a>01463       apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01464"></a>01464     }
<a name="l01465"></a>01465 
<a name="l01466"></a>01466   <span class="comment">/* For AS-external opaque LSAs */</span>
<a name="l01467"></a>01467   if (ospf-&gt;lsdb)
<a name="l01468"></a>01468     {
<a name="l01469"></a>01469       <span class="keywordflow">if</span> (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[<a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>])
<a name="l01470"></a>01470     <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ac7a1aa21490d2bd86999d2e494cde6d0">OPAQUE_AS_LSDB</a> (ospf), rn, lsa)
<a name="l01471"></a>01471       apiserver_sync_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, seqnum);
<a name="l01472"></a>01472     }
<a name="l01473"></a>01473 
<a name="l01474"></a>01474   <span class="comment">/* Send a reply back to client with return code */</span>
<a name="l01475"></a>01475   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, seqnum, rc);
<a name="l01476"></a>01476   return rc;
<a name="l01477"></a>01477 }
<a name="l01478"></a>01478 
<a name="l01479"></a>01479 <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l01480"></a>01480 <span class="keywordtype">int</span> <a class="code" href="ospf__apiserver_8h.html#a7db95285df7f8e5a4cd6e99859e81084">ospf_apiserver_handle_get_router_nexthops_request</a>(struct <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01481"></a>01481         struct msg *msg)
<a name="l01482"></a>01482 {
<a name="l01483"></a>01483     <span class="keywordtype">int</span> rc = 0;
<a name="l01484"></a>01484     u_int32_t seqnum;
<a name="l01485"></a>01485     <span class="keyword">struct </span><a class="code" href="structmsg__get__router__nexthops__request.html">msg_get_router_nexthops_request</a> *smsg;
<a name="l01486"></a>01486 
<a name="l01487"></a>01487     seqnum = <a class="code" href="ospf__api_8h.html#a2ff0457183106c8a6a5a0291a23d4d02">msg_get_seq</a> (msg);
<a name="l01488"></a>01488     smsg = (<span class="keyword">struct </span><a class="code" href="structmsg__get__router__nexthops__request.html">msg_get_router_nexthops_request</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a>(msg-&gt;s);
<a name="l01489"></a>01489 
<a name="l01490"></a>01490     rc = apiserver_get_router_nexthops_callback(apiserv,
<a name="l01491"></a>01491             smsg-&gt;<a class="code" href="structmsg__get__router__nexthops__request.html#a309918698a9acd11f793c5cc25ec4fb7">router_id</a>, seqnum);
<a name="l01492"></a>01492 
<a name="l01493"></a>01493     rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a>(apiserv, seqnum, rc);
<a name="l01494"></a>01494     <span class="keywordflow">return</span> rc;
<a name="l01495"></a>01495 }
<a name="l01496"></a>01496 
<a name="l01497"></a>01497 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l01498"></a>01498 <span class="comment"> * Followings are functions to originate or update LSA</span>
<a name="l01499"></a>01499 <span class="comment"> * from an application.</span>
<a name="l01500"></a>01500 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l01501"></a>01501 <span class="comment"> */</span>
<a name="l01502"></a>01502 
<a name="l01503"></a>01503 <span class="comment">/* Create a new internal opaque LSA by taking prototype and filling in</span>
<a name="l01504"></a>01504 <span class="comment">   missing fields such as age, sequence number, advertising router,</span>
<a name="l01505"></a>01505 <span class="comment">   checksum and so on. The interface parameter is used for type 9</span>
<a name="l01506"></a>01506 <span class="comment">   LSAs, area parameter for type 10. Type 11 LSAs do neither need area</span>
<a name="l01507"></a>01507 <span class="comment">   nor interface. */</span>
<a name="l01508"></a>01508 
<a name="l01509"></a>01509 <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l01510"></a>01510 <a class="code" href="ospf__apiserver_8h.html#af164a21a629e0e3cc4099d832f7f76fd">ospf_apiserver_opaque_lsa_new</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area,
<a name="l01511"></a>01511                    <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l01512"></a>01512                    <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *protolsa)
<a name="l01513"></a>01513 {
<a name="l01514"></a>01514   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01515"></a>01515   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *newlsa;
<a name="l01516"></a>01516   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01517"></a>01517   u_char options = 0x0;
<a name="l01518"></a>01518   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01519"></a>01519 
<a name="l01520"></a>01520   <span class="keyword">struct </span>ospf *ospf;
<a name="l01521"></a>01521 
<a name="l01522"></a>01522   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01523"></a>01523   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l01524"></a>01524 
<a name="l01525"></a>01525   <span class="comment">/* Create a stream for internal opaque LSA */</span>
<a name="l01526"></a>01526   <span class="keywordflow">if</span> ((s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01527"></a>01527     {
<a name="l01528"></a>01528       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_opaque_lsa_new: stream_new failed&quot;</span>);
<a name="l01529"></a>01529       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01530"></a>01530     }
<a name="l01531"></a>01531 
<a name="l01532"></a>01532   newlsa = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);
<a name="l01533"></a>01533 
<a name="l01534"></a>01534   <span class="comment">/* XXX If this is a link-local LSA or an AS-external LSA, how do we</span>
<a name="l01535"></a>01535 <span class="comment">     have to set options? */</span>
<a name="l01536"></a>01536 
<a name="l01537"></a>01537   <span class="keywordflow">if</span> (area)
<a name="l01538"></a>01538     {
<a name="l01539"></a>01539       options = <a class="code" href="ospfd_8h.html#a2ed6617f58a7d168ffb30a323a532597">LSA_OPTIONS_GET</a> (area);
<a name="l01540"></a>01540       options |= <a class="code" href="ospfd_8h.html#a733255e8400f4b76dc3ed952ef7c1c0a">LSA_OPTIONS_NSSA_GET</a> (area);
<a name="l01541"></a>01541     }
<a name="l01542"></a>01542 
<a name="l01543"></a>01543   options |= <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>; <span class="comment">/* Don&#39;t forget to set option bit */</span>
<a name="l01544"></a>01544 
<a name="l01545"></a>01545   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
<a name="l01546"></a>01546     {
<a name="l01547"></a>01547       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Creating an Opaque-LSA instance&quot;</span>,
<a name="l01548"></a>01548          protolsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (protolsa-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01549"></a>01549     }
<a name="l01550"></a>01550 
<a name="l01551"></a>01551   <span class="comment">/* Set opaque-LSA header fields. */</span>
<a name="l01552"></a>01552   <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, options, protolsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, protolsa-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, 
<a name="l01553"></a>01553                   ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);
<a name="l01554"></a>01554 
<a name="l01555"></a>01555   <span class="comment">/* Set opaque-LSA body fields. */</span>
<a name="l01556"></a>01556   <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, ((u_char *) protolsa) + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a>),
<a name="l01557"></a>01557           ntohs (protolsa-&gt;length) - sizeof (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a>));
<a name="l01558"></a>01558 
<a name="l01559"></a>01559   <span class="comment">/* Determine length of LSA. */</span>
<a name="l01560"></a>01560   length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l01561"></a>01561   newlsa-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);
<a name="l01562"></a>01562 
<a name="l01563"></a>01563   <span class="comment">/* Create OSPF LSA. */</span>
<a name="l01564"></a>01564   <span class="keywordflow">if</span> ((<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ()) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01565"></a>01565     {
<a name="l01566"></a>01566       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_opaque_lsa_new: ospf_lsa_new() ?&quot;</span>);
<a name="l01567"></a>01567       <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l01568"></a>01568       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01569"></a>01569     }
<a name="l01570"></a>01570 
<a name="l01571"></a>01571   <span class="keywordflow">if</span> ((new-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01572"></a>01572     {
<a name="l01573"></a>01573       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_opaque_lsa_new: ospf_lsa_data_new() ?&quot;</span>);
<a name="l01574"></a>01574       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;<span class="keyword">new</span>);
<a name="l01575"></a>01575       <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l01576"></a>01576       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01577"></a>01577     }
<a name="l01578"></a>01578 
<a name="l01579"></a>01579   <span class="keyword">new</span>-&gt;area = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01580"></a>01580   <span class="keyword">new</span>-&gt;oi = oi;
<a name="l01581"></a>01581 
<a name="l01582"></a>01582   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
<a name="l01583"></a>01583   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, newlsa, length);
<a name="l01584"></a>01584   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l01585"></a>01585 
<a name="l01586"></a>01586   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l01587"></a>01587 }
<a name="l01588"></a>01588 
<a name="l01589"></a>01589 
<a name="l01590"></a>01590 <span class="keywordtype">int</span>
<a name="l01591"></a>01591 <a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l01592"></a>01592 {
<a name="l01593"></a>01593   <span class="comment">/* Type 9 opaque LSA can be originated if there is at least one</span>
<a name="l01594"></a>01594 <span class="comment">     active opaque-capable neighbor attached to the outgoing</span>
<a name="l01595"></a>01595 <span class="comment">     interface. */</span>
<a name="l01596"></a>01596 
<a name="l01597"></a>01597   <span class="keywordflow">return</span> (ospf_nbr_count_opaque_capable (oi) &gt; 0);
<a name="l01598"></a>01598 }
<a name="l01599"></a>01599 
<a name="l01600"></a>01600 <span class="keywordtype">int</span>
<a name="l01601"></a>01601 <a class="code" href="ospf__apiserver_8h.html#a1f7d9d20eaced8415f6f911aac30a3a1">ospf_apiserver_is_ready_type10</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area)
<a name="l01602"></a>01602 {
<a name="l01603"></a>01603   <span class="comment">/* Type 10 opaque LSA can be originated if there is at least one</span>
<a name="l01604"></a>01604 <span class="comment">     interface belonging to the area that has an active opaque-capable</span>
<a name="l01605"></a>01605 <span class="comment">     neighbor. */</span>
<a name="l01606"></a>01606   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01607"></a>01607   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01608"></a>01608 
<a name="l01609"></a>01609   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, nnode, oi))
<a name="l01610"></a>01610     <span class="comment">/* Is there an active neighbor attached to this interface? */</span>
<a name="l01611"></a>01611     <span class="keywordflow">if</span> (<a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (oi))
<a name="l01612"></a>01612       <span class="keywordflow">return</span> 1;
<a name="l01613"></a>01613 
<a name="l01614"></a>01614   <span class="comment">/* No active neighbor in area */</span>
<a name="l01615"></a>01615   <span class="keywordflow">return</span> 0;
<a name="l01616"></a>01616 }
<a name="l01617"></a>01617 
<a name="l01618"></a>01618 <span class="keywordtype">int</span>
<a name="l01619"></a>01619 <a class="code" href="ospf__apiserver_8h.html#a37b592bdc796580f90c670c61738d89a">ospf_apiserver_is_ready_type11</a> (<span class="keyword">struct</span> ospf *ospf)
<a name="l01620"></a>01620 {
<a name="l01621"></a>01621   <span class="comment">/* Type 11 opaque LSA can be originated if there is at least one interface</span>
<a name="l01622"></a>01622 <span class="comment">     that has an active opaque-capable neighbor. */</span>
<a name="l01623"></a>01623   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01624"></a>01624   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01625"></a>01625 
<a name="l01626"></a>01626   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l01627"></a>01627     <span class="comment">/* Is there an active neighbor attached to this interface? */</span>
<a name="l01628"></a>01628     <span class="keywordflow">if</span> (<a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (oi))
<a name="l01629"></a>01629       <span class="keywordflow">return</span> 1;
<a name="l01630"></a>01630 
<a name="l01631"></a>01631   <span class="comment">/* No active neighbor at all */</span>
<a name="l01632"></a>01632   <span class="keywordflow">return</span> 0;
<a name="l01633"></a>01633 }
<a name="l01634"></a>01634 
<a name="l01635"></a>01635 
<a name="l01636"></a>01636 <span class="keywordtype">int</span>
<a name="l01637"></a>01637 <a class="code" href="ospf__apiserver_8h.html#a2ae56fcd1f51a34007d4795cf7283e08">ospf_apiserver_handle_originate_request</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01638"></a>01638                      <span class="keyword">struct</span> msg *msg)
<a name="l01639"></a>01639 {
<a name="l01640"></a>01640   <span class="keyword">struct </span><a class="code" href="structmsg__originate__request.html">msg_originate_request</a> *omsg;
<a name="l01641"></a>01641   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l01642"></a>01642   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
<a name="l01643"></a>01643   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old;
<a name="l01644"></a>01644   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *area = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01645"></a>01645   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01646"></a>01646   <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01647"></a>01647   <span class="keyword">struct </span>ospf *ospf;
<a name="l01648"></a>01648   <span class="keywordtype">int</span> lsa_type, opaque_type;
<a name="l01649"></a>01649   <span class="keywordtype">int</span> ready = 0;
<a name="l01650"></a>01650   <span class="keywordtype">int</span> rc = 0;
<a name="l01651"></a>01651   
<a name="l01652"></a>01652   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01653"></a>01653 
<a name="l01654"></a>01654   <span class="comment">/* Extract opaque LSA data from message */</span>
<a name="l01655"></a>01655   omsg = (<span class="keyword">struct </span><a class="code" href="structmsg__originate__request.html">msg_originate_request</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01656"></a>01656   data = &amp;omsg-&gt;<a class="code" href="structmsg__originate__request.html#a3caada955489b7cbcb4660625d8df725">data</a>;
<a name="l01657"></a>01657 
<a name="l01658"></a>01658   <span class="comment">/* Determine interface for type9 or area for type10 LSAs. */</span>
<a name="l01659"></a>01659   <span class="keywordflow">switch</span> (data-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01660"></a>01660     {
<a name="l01661"></a>01661     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01662"></a>01662       oi = <a class="code" href="ospf__apiserver_8h.html#a15dce6e83860f160da72835cc0490fa9">ospf_apiserver_if_lookup_by_addr</a> (omsg-&gt;<a class="code" href="structmsg__originate__request.html#a6866d890e0aad9b1848efb4652ba57c0">ifaddr</a>);
<a name="l01663"></a>01663       <span class="keywordflow">if</span> (!oi)
<a name="l01664"></a>01664     {
<a name="l01665"></a>01665       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_originate: unknown interface %s&quot;</span>,
<a name="l01666"></a>01666              inet_ntoa (omsg-&gt;<a class="code" href="structmsg__originate__request.html#a6866d890e0aad9b1848efb4652ba57c0">ifaddr</a>));
<a name="l01667"></a>01667       rc = <a class="code" href="ospf__api_8h.html#a767ae316dc58ea02681629f6d72f592d">OSPF_API_NOSUCHINTERFACE</a>;
<a name="l01668"></a>01668       <span class="keywordflow">goto</span> out;
<a name="l01669"></a>01669     }
<a name="l01670"></a>01670       area = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>;
<a name="l01671"></a>01671       lsdb = area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>;
<a name="l01672"></a>01672       <span class="keywordflow">break</span>;
<a name="l01673"></a>01673     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01674"></a>01674       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, omsg-&gt;<a class="code" href="structmsg__originate__request.html#a78e6cc044adcb012f5a44cc5d7794ff5">area_id</a>);
<a name="l01675"></a>01675       <span class="keywordflow">if</span> (!area)
<a name="l01676"></a>01676     {
<a name="l01677"></a>01677       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_originate: unknown area %s&quot;</span>,
<a name="l01678"></a>01678              inet_ntoa (omsg-&gt;<a class="code" href="structmsg__originate__request.html#a78e6cc044adcb012f5a44cc5d7794ff5">area_id</a>));
<a name="l01679"></a>01679       rc = <a class="code" href="ospf__api_8h.html#aec75de3c6e1fcbb822778e5401cbdb9c">OSPF_API_NOSUCHAREA</a>;
<a name="l01680"></a>01680       <span class="keywordflow">goto</span> out;
<a name="l01681"></a>01681     }
<a name="l01682"></a>01682       lsdb = area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>;
<a name="l01683"></a>01683       <span class="keywordflow">break</span>;
<a name="l01684"></a>01684     <span class="keywordflow">case</span> OSPF_OPAQUE_AS_LSA:
<a name="l01685"></a>01685       lsdb = ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>;
<a name="l01686"></a>01686       <span class="keywordflow">break</span>;
<a name="l01687"></a>01687     <span class="keywordflow">default</span>:
<a name="l01688"></a>01688       <span class="comment">/* We can only handle opaque types here */</span>
<a name="l01689"></a>01689       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_originate: Cannot originate non-opaque LSA type %d&quot;</span>,
<a name="l01690"></a>01690          data-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01691"></a>01691       rc = <a class="code" href="ospf__api_8h.html#a7c12e94786a0ed5da29c40d4c92a162b">OSPF_API_ILLEGALLSATYPE</a>;
<a name="l01692"></a>01692       <span class="keywordflow">goto</span> out;
<a name="l01693"></a>01693     }
<a name="l01694"></a>01694 
<a name="l01695"></a>01695   <span class="comment">/* Check if we registered this opaque type */</span>
<a name="l01696"></a>01696   lsa_type = data-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>;
<a name="l01697"></a>01697   opaque_type = <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (data-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr));
<a name="l01698"></a>01698 
<a name="l01699"></a>01699   <span class="keywordflow">if</span> (!apiserver_is_opaque_type_registered (apiserv, lsa_type, opaque_type))
<a name="l01700"></a>01700     {
<a name="l01701"></a>01701       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_originate: LSA-type(%d)/Opaque-type(%d): Not registered&quot;</span>, lsa_type, opaque_type);
<a name="l01702"></a>01702       rc = <a class="code" href="ospf__api_8h.html#ae4119af801c1e6feeb30376e0073596e">OSPF_API_OPAQUETYPENOTREGISTERED</a>;
<a name="l01703"></a>01703       <span class="keywordflow">goto</span> out;
<a name="l01704"></a>01704     }
<a name="l01705"></a>01705 
<a name="l01706"></a>01706   <span class="comment">/* Make sure that the neighbors are ready before we can originate */</span>
<a name="l01707"></a>01707   <span class="keywordflow">switch</span> (data-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01708"></a>01708     {
<a name="l01709"></a>01709     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01710"></a>01710       ready = <a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (oi);
<a name="l01711"></a>01711       <span class="keywordflow">break</span>;
<a name="l01712"></a>01712     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01713"></a>01713       ready = <a class="code" href="ospf__apiserver_8h.html#a1f7d9d20eaced8415f6f911aac30a3a1">ospf_apiserver_is_ready_type10</a> (area);
<a name="l01714"></a>01714       <span class="keywordflow">break</span>;
<a name="l01715"></a>01715     <span class="keywordflow">case</span> OSPF_OPAQUE_AS_LSA:
<a name="l01716"></a>01716       ready = <a class="code" href="ospf__apiserver_8h.html#a37b592bdc796580f90c670c61738d89a">ospf_apiserver_is_ready_type11</a> (ospf);
<a name="l01717"></a>01717       <span class="keywordflow">break</span>;
<a name="l01718"></a>01718     <span class="keywordflow">default</span>:
<a name="l01719"></a>01719       <span class="keywordflow">break</span>;
<a name="l01720"></a>01720     }
<a name="l01721"></a>01721 
<a name="l01722"></a>01722   <span class="keywordflow">if</span> (!ready)
<a name="l01723"></a>01723     {
<a name="l01724"></a>01724       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Neighbors not ready to originate type %d&quot;</span>, data-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01725"></a>01725       rc = <a class="code" href="ospf__api_8h.html#a46c79ee5f50db68c60e7be5b44481605">OSPF_API_NOTREADY</a>;
<a name="l01726"></a>01726       <span class="keywordflow">goto</span> out;
<a name="l01727"></a>01727     }
<a name="l01728"></a>01728 
<a name="l01729"></a>01729   <span class="comment">/* Create OSPF&#39;s internal opaque LSA representation */</span>
<a name="l01730"></a>01730   <span class="keyword">new</span> = <a class="code" href="ospf__apiserver_8h.html#af164a21a629e0e3cc4099d832f7f76fd">ospf_apiserver_opaque_lsa_new</a> (area, oi, data);
<a name="l01731"></a>01731   <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
<a name="l01732"></a>01732     {
<a name="l01733"></a>01733       rc = <a class="code" href="ospf__api_8h.html#a49a52186a0e297706895dd5ccac9f585">OSPF_API_NOMEMORY</a>;   <span class="comment">/* XXX */</span>
<a name="l01734"></a>01734       <span class="keywordflow">goto</span> out;
<a name="l01735"></a>01735     }
<a name="l01736"></a>01736 
<a name="l01737"></a>01737   <span class="comment">/* Determine if LSA is new or an update for an existing one. */</span>
<a name="l01738"></a>01738   old = <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (lsdb, <span class="keyword">new</span>);
<a name="l01739"></a>01739 
<a name="l01740"></a>01740   <span class="keywordflow">if</span> (!old)
<a name="l01741"></a>01741     {
<a name="l01742"></a>01742       <span class="comment">/* New LSA install in LSDB. */</span>
<a name="l01743"></a>01743       rc = <a class="code" href="ospf__apiserver_8h.html#ad81b52c97a14ab67f40cf2cc6dad7298">ospf_apiserver_originate1</a> (<span class="keyword">new</span>);
<a name="l01744"></a>01744     }
<a name="l01745"></a>01745   <span class="keywordflow">else</span>
<a name="l01746"></a>01746     {
<a name="l01747"></a>01747       <span class="comment">/*</span>
<a name="l01748"></a>01748 <span class="comment">       * Keep the new LSA instance in the &quot;waiting place&quot; until the next</span>
<a name="l01749"></a>01749 <span class="comment">       * refresh timing. If several LSA update requests for the same LSID</span>
<a name="l01750"></a>01750 <span class="comment">       * have issued by peer, the last one takes effect.</span>
<a name="l01751"></a>01751 <span class="comment">       */</span>
<a name="l01752"></a>01752       <span class="keyword">new</span>-&gt;lsdb = &amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>;
<a name="l01753"></a>01753       <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (&amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>, <span class="keyword">new</span>);
<a name="l01754"></a>01754 
<a name="l01755"></a>01755       <span class="comment">/* Kick the scheduler function. */</span>
<a name="l01756"></a>01756       <a class="code" href="ospf__opaque_8h.html#aa09894547334df306db297c657329cb9">ospf_opaque_lsa_refresh_schedule</a> (old);
<a name="l01757"></a>01757     }
<a name="l01758"></a>01758 
<a name="l01759"></a>01759 out:
<a name="l01760"></a>01760 
<a name="l01761"></a>01761   <span class="comment">/* Send a reply back to client with return code */</span>
<a name="l01762"></a>01762   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>), rc);
<a name="l01763"></a>01763   <span class="keywordflow">return</span> rc;
<a name="l01764"></a>01764 }
<a name="l01765"></a>01765 
<a name="l01766"></a>01766 
<a name="l01767"></a>01767 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l01768"></a>01768 <span class="comment"> * Flood an LSA within its flooding scope. </span>
<a name="l01769"></a>01769 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l01770"></a>01770 <span class="comment"> */</span>
<a name="l01771"></a>01771 
<a name="l01772"></a>01772 <span class="comment">/* XXX We can probably use ospf_flood_through instead of this function</span>
<a name="l01773"></a>01773 <span class="comment">   but then we need the neighbor parameter. If we set nbr to </span>
<a name="l01774"></a>01774 <span class="comment">   NULL then ospf_flood_through crashes due to dereferencing NULL. */</span>
<a name="l01775"></a>01775 
<a name="l01776"></a>01776 <span class="keywordtype">void</span>
<a name="l01777"></a>01777 <a class="code" href="ospf__apiserver_8h.html#adfa93160199f427151c4d3d0495ac815">ospf_apiserver_flood_opaque_lsa</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01778"></a>01778 {
<a name="l01779"></a>01779   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa);
<a name="l01780"></a>01780 
<a name="l01781"></a>01781   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01782"></a>01782     {
<a name="l01783"></a>01783     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01784"></a>01784       <span class="comment">/* Increment counters? XXX */</span>
<a name="l01785"></a>01785 
<a name="l01786"></a>01786       <span class="comment">/* Flood LSA through local network. */</span>
<a name="l01787"></a>01787       <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/*nbr */</span> , lsa);
<a name="l01788"></a>01788       <span class="keywordflow">break</span>;
<a name="l01789"></a>01789     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01790"></a>01790       <span class="comment">/* Update LSA origination count. */</span>
<a name="l01791"></a>01791       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>);
<a name="l01792"></a>01792       lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;
<a name="l01793"></a>01793 
<a name="l01794"></a>01794       <span class="comment">/* Flood LSA through area. */</span>
<a name="l01795"></a>01795       <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/*nbr */</span> , lsa);
<a name="l01796"></a>01796       <span class="keywordflow">break</span>;
<a name="l01797"></a>01797     <span class="keywordflow">case</span> OSPF_OPAQUE_AS_LSA:
<a name="l01798"></a>01798       {
<a name="l01799"></a>01799     <span class="keyword">struct </span>ospf *ospf;
<a name="l01800"></a>01800 
<a name="l01801"></a>01801     ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01802"></a>01802     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l01803"></a>01803 
<a name="l01804"></a>01804     <span class="comment">/* Increment counters? XXX */</span>
<a name="l01805"></a>01805 
<a name="l01806"></a>01806     <span class="comment">/* Flood LSA through AS. */</span>
<a name="l01807"></a>01807     <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/*nbr */</span> , lsa);
<a name="l01808"></a>01808     <span class="keywordflow">break</span>;
<a name="l01809"></a>01809       }
<a name="l01810"></a>01810     }
<a name="l01811"></a>01811 }
<a name="l01812"></a>01812 
<a name="l01813"></a>01813 <span class="keywordtype">int</span>
<a name="l01814"></a>01814 <a class="code" href="ospf__apiserver_8h.html#ad81b52c97a14ab67f40cf2cc6dad7298">ospf_apiserver_originate1</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01815"></a>01815 {
<a name="l01816"></a>01816   <span class="keyword">struct </span>ospf *ospf;
<a name="l01817"></a>01817 
<a name="l01818"></a>01818   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01819"></a>01819   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l01820"></a>01820 
<a name="l01821"></a>01821   <span class="comment">/* Install this LSA into LSDB. */</span>
<a name="l01822"></a>01822   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, lsa-&gt;oi, lsa) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01823"></a>01823     {
<a name="l01824"></a>01824       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_originate1: ospf_lsa_install failed&quot;</span>);
<a name="l01825"></a>01825       <span class="keywordflow">return</span> -1;
<a name="l01826"></a>01826     }
<a name="l01827"></a>01827 
<a name="l01828"></a>01828   <span class="comment">/* Flood LSA within scope */</span>
<a name="l01829"></a>01829 
<a name="l01830"></a>01830 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01831"></a>01831 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l01832"></a>01832 <span class="comment">   * NB: Modified version of &quot;ospf_flood_though ()&quot; accepts NULL &quot;inbr&quot;</span>
<a name="l01833"></a>01833 <span class="comment">   *     parameter, and thus it does not cause SIGSEGV error.</span>
<a name="l01834"></a>01834 <span class="comment">   */</span>
<a name="l01835"></a>01835   <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/*nbr */</span> , lsa);
<a name="l01836"></a>01836 <span class="preprocessor">#else </span><span class="comment">/* NOTYET */</span>
<a name="l01837"></a>01837 
<a name="l01838"></a>01838   <a class="code" href="ospf__apiserver_8h.html#adfa93160199f427151c4d3d0495ac815">ospf_apiserver_flood_opaque_lsa</a> (lsa);
<a name="l01839"></a>01839 <span class="preprocessor">#endif </span><span class="comment">/* NOTYET */</span>
<a name="l01840"></a>01840 
<a name="l01841"></a>01841   <span class="keywordflow">return</span> 0;
<a name="l01842"></a>01842 }
<a name="l01843"></a>01843 
<a name="l01844"></a>01844 
<a name="l01845"></a>01845 <span class="comment">/* Opaque LSAs of type 9 on a specific interface can now be</span>
<a name="l01846"></a>01846 <span class="comment">   originated. Tell clients that registered type 9. */</span>
<a name="l01847"></a>01847 <span class="keywordtype">int</span>
<a name="l01848"></a>01848 <a class="code" href="ospf__apiserver_8h.html#a5f1747abe88cf2a7bf6b4405759d58c1">ospf_apiserver_lsa9_originator</a> (<span class="keywordtype">void</span> *arg)
<a name="l01849"></a>01849 {
<a name="l01850"></a>01850   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01851"></a>01851 
<a name="l01852"></a>01852   oi = (<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *) arg;
<a name="l01853"></a>01853   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l01854"></a>01854     <a class="code" href="ospf__apiserver_8h.html#ae9401bd187ef1b9cdf76efc0237cca2d">ospf_apiserver_clients_notify_ready_type9</a> (oi);
<a name="l01855"></a>01855   }
<a name="l01856"></a>01856   <span class="keywordflow">return</span> 0;
<a name="l01857"></a>01857 }
<a name="l01858"></a>01858 
<a name="l01859"></a>01859 <span class="keywordtype">int</span>
<a name="l01860"></a>01860 <a class="code" href="ospf__apiserver_8h.html#a3f7498d96301cabe2976e967ab5e508e">ospf_apiserver_lsa10_originator</a> (<span class="keywordtype">void</span> *arg)
<a name="l01861"></a>01861 {
<a name="l01862"></a>01862   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01863"></a>01863 
<a name="l01864"></a>01864   area = (<span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *) arg;
<a name="l01865"></a>01865   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l01866"></a>01866     <a class="code" href="ospf__apiserver_8h.html#a2ec44eeb9ef670e583701537c6d5bdef">ospf_apiserver_clients_notify_ready_type10</a> (area);
<a name="l01867"></a>01867   }
<a name="l01868"></a>01868   <span class="keywordflow">return</span> 0;
<a name="l01869"></a>01869 }
<a name="l01870"></a>01870 
<a name="l01871"></a>01871 <span class="keywordtype">int</span>
<a name="l01872"></a>01872 <a class="code" href="ospf__apiserver_8h.html#a897887562e4d894cdfed555ea54a1aae">ospf_apiserver_lsa11_originator</a> (<span class="keywordtype">void</span> *arg)
<a name="l01873"></a>01873 {
<a name="l01874"></a>01874   <span class="keyword">struct </span>ospf *ospf;
<a name="l01875"></a>01875 
<a name="l01876"></a>01876   ospf = (<span class="keyword">struct </span>ospf *) arg;
<a name="l01877"></a>01877   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l01878"></a>01878     <a class="code" href="ospf__apiserver_8h.html#a1679223b213a7f118b1da636947bbf06">ospf_apiserver_clients_notify_ready_type11</a> (ospf);
<a name="l01879"></a>01879   }
<a name="l01880"></a>01880   <span class="keywordflow">return</span> 0;
<a name="l01881"></a>01881 }
<a name="l01882"></a>01882 
<a name="l01883"></a>01883 
<a name="l01884"></a>01884 <span class="comment">/* Periodically refresh opaque LSAs so that they do not expire in</span>
<a name="l01885"></a>01885 <span class="comment">   other routers. */</span>
<a name="l01886"></a>01886 <span class="keywordtype">void</span>
<a name="l01887"></a>01887 <a class="code" href="ospf__apiserver_8h.html#a72d0debd785dba0d8b6325ce613369d3">ospf_apiserver_lsa_refresher</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01888"></a>01888 {
<a name="l01889"></a>01889   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l01890"></a>01890   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01891"></a>01891   <span class="keyword">struct </span>ospf * ospf;
<a name="l01892"></a>01892 
<a name="l01893"></a>01893   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01894"></a>01894   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l01895"></a>01895 
<a name="l01896"></a>01896   apiserv = lookup_apiserver_by_lsa (lsa);
<a name="l01897"></a>01897   <span class="keywordflow">if</span> (!apiserv)
<a name="l01898"></a>01898     {
<a name="l01899"></a>01899       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_refresher: LSA[%s]: No apiserver?&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l01900"></a>01900       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>); <span class="comment">/* Flush it anyway. */</span>
<a name="l01901"></a>01901     }
<a name="l01902"></a>01902 
<a name="l01903"></a>01903   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
<a name="l01904"></a>01904     {
<a name="l01905"></a>01905       <a class="code" href="ospf__opaque_8h.html#adc5d31cc8c6d8fd4eff1d8069027c39b">ospf_opaque_lsa_flush_schedule</a> (lsa);
<a name="l01906"></a>01906       <span class="keywordflow">goto</span> out;
<a name="l01907"></a>01907     }
<a name="l01908"></a>01908 
<a name="l01909"></a>01909   <span class="comment">/* Check if updated version of LSA instance has already prepared. */</span>
<a name="l01910"></a>01910   <span class="keyword">new</span> = <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (&amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>, lsa);
<a name="l01911"></a>01911   <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
<a name="l01912"></a>01912     {
<a name="l01913"></a>01913       <span class="comment">/* This is a periodic refresh, driven by core OSPF mechanism. */</span>
<a name="l01914"></a>01914       <span class="keyword">new</span> = <a class="code" href="ospf__apiserver_8h.html#af164a21a629e0e3cc4099d832f7f76fd">ospf_apiserver_opaque_lsa_new</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, lsa-&gt;oi, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l01915"></a>01915       <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
<a name="l01916"></a>01916         {
<a name="l01917"></a>01917           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_refresher: Cannot create a new LSA?&quot;</span>);
<a name="l01918"></a>01918           <span class="keywordflow">goto</span> out;
<a name="l01919"></a>01919         }
<a name="l01920"></a>01920     }
<a name="l01921"></a>01921   <span class="keywordflow">else</span>
<a name="l01922"></a>01922     {
<a name="l01923"></a>01923       <span class="comment">/* This is a forcible refresh, requested by OSPF-API client. */</span>
<a name="l01924"></a>01924       <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;apiserv-&gt;<a class="code" href="structospf__apiserver.html#acc7f20d3adb2b27ed544be0d5d36a751">reserve</a>, <span class="keyword">new</span>);
<a name="l01925"></a>01925       <span class="keyword">new</span>-&gt;lsdb = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01926"></a>01926     }
<a name="l01927"></a>01927 
<a name="l01928"></a>01928   <span class="comment">/* Increment sequence number */</span>
<a name="l01929"></a>01929   <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);
<a name="l01930"></a>01930 
<a name="l01931"></a>01931   <span class="comment">/* New LSA is in same area. */</span>
<a name="l01932"></a>01932   <span class="keyword">new</span>-&gt;area = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>;
<a name="l01933"></a>01933   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
<a name="l01934"></a>01934 
<a name="l01935"></a>01935   <span class="comment">/* Install LSA into LSDB. */</span>
<a name="l01936"></a>01936   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, new-&gt;oi, <span class="keyword">new</span>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01937"></a>01937     {
<a name="l01938"></a>01938       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_refresher: ospf_lsa_install failed&quot;</span>);
<a name="l01939"></a>01939       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;<span class="keyword">new</span>);
<a name="l01940"></a>01940       <span class="keywordflow">goto</span> out;
<a name="l01941"></a>01941     }
<a name="l01942"></a>01942 
<a name="l01943"></a>01943   <span class="comment">/* Flood updated LSA through interface, area or AS */</span>
<a name="l01944"></a>01944 
<a name="l01945"></a>01945 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01946"></a>01946 <span class="preprocessor"></span>  <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/*nbr */</span> , <span class="keyword">new</span>);
<a name="l01947"></a>01947 <span class="preprocessor">#endif </span><span class="comment">/* NOTYET */</span>
<a name="l01948"></a>01948   <a class="code" href="ospf__apiserver_8h.html#adfa93160199f427151c4d3d0495ac815">ospf_apiserver_flood_opaque_lsa</a> (<span class="keyword">new</span>);
<a name="l01949"></a>01949 
<a name="l01950"></a>01950   <span class="comment">/* Debug logging. */</span>
<a name="l01951"></a>01951   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
<a name="l01952"></a>01952     {
<a name="l01953"></a>01953       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Refresh Opaque LSA&quot;</span>,
<a name="l01954"></a>01954          new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
<a name="l01955"></a>01955       <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
<a name="l01956"></a>01956     }
<a name="l01957"></a>01957 
<a name="l01958"></a>01958 out:
<a name="l01959"></a>01959   <span class="keywordflow">return</span>;
<a name="l01960"></a>01960 }
<a name="l01961"></a>01961 
<a name="l01962"></a>01962 
<a name="l01963"></a>01963 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l01964"></a>01964 <span class="comment"> * Followings are functions to delete LSAs</span>
<a name="l01965"></a>01965 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l01966"></a>01966 <span class="comment"> */</span>
<a name="l01967"></a>01967 
<a name="l01968"></a>01968 <span class="keywordtype">int</span>
<a name="l01969"></a>01969 <a class="code" href="ospf__apiserver_8h.html#a344a368730fd77da8aece5f29dc33439">ospf_apiserver_handle_delete_request</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l01970"></a>01970                       <span class="keyword">struct</span> msg *msg)
<a name="l01971"></a>01971 {
<a name="l01972"></a>01972   <span class="keyword">struct </span><a class="code" href="structmsg__delete__request.html">msg_delete_request</a> *dmsg;
<a name="l01973"></a>01973   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old;
<a name="l01974"></a>01974   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *area = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01975"></a>01975   <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
<a name="l01976"></a>01976   <span class="keywordtype">int</span> lsa_type, opaque_type;
<a name="l01977"></a>01977   <span class="keywordtype">int</span> rc = 0;
<a name="l01978"></a>01978   <span class="keyword">struct </span>ospf * ospf;
<a name="l01979"></a>01979 
<a name="l01980"></a>01980   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l01981"></a>01981   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l01982"></a>01982 
<a name="l01983"></a>01983   <span class="comment">/* Extract opaque LSA from message */</span>
<a name="l01984"></a>01984   dmsg = (<span class="keyword">struct </span><a class="code" href="structmsg__delete__request.html">msg_delete_request</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l01985"></a>01985 
<a name="l01986"></a>01986   <span class="comment">/* Lookup area for link-local and area-local opaque LSAs */</span>
<a name="l01987"></a>01987   <span class="keywordflow">switch</span> (dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a60db552c89429929b677b191bee7f8b8">lsa_type</a>)
<a name="l01988"></a>01988     {
<a name="l01989"></a>01989     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01990"></a>01990     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01991"></a>01991       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a809cf697318e7b2fccdc47a57b2b4292">area_id</a>);
<a name="l01992"></a>01992       <span class="keywordflow">if</span> (!area)
<a name="l01993"></a>01993     {
<a name="l01994"></a>01994       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_delete: unknown area %s&quot;</span>,
<a name="l01995"></a>01995              inet_ntoa (dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a809cf697318e7b2fccdc47a57b2b4292">area_id</a>));
<a name="l01996"></a>01996       rc = <a class="code" href="ospf__api_8h.html#aec75de3c6e1fcbb822778e5401cbdb9c">OSPF_API_NOSUCHAREA</a>;
<a name="l01997"></a>01997       <span class="keywordflow">goto</span> out;
<a name="l01998"></a>01998     }
<a name="l01999"></a>01999       <span class="keywordflow">break</span>;
<a name="l02000"></a>02000     <span class="keywordflow">case</span> OSPF_OPAQUE_AS_LSA:
<a name="l02001"></a>02001       <span class="comment">/* AS-external opaque LSAs have no designated area */</span>
<a name="l02002"></a>02002       area = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02003"></a>02003       <span class="keywordflow">break</span>;
<a name="l02004"></a>02004     <span class="keywordflow">default</span>:
<a name="l02005"></a>02005       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l02006"></a>02006     (<span class="stringliteral">&quot;ospf_apiserver_lsa_delete: Cannot delete non-opaque LSA type %d&quot;</span>,
<a name="l02007"></a>02007      dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a60db552c89429929b677b191bee7f8b8">lsa_type</a>);
<a name="l02008"></a>02008       rc = <a class="code" href="ospf__api_8h.html#a7c12e94786a0ed5da29c40d4c92a162b">OSPF_API_ILLEGALLSATYPE</a>;
<a name="l02009"></a>02009       <span class="keywordflow">goto</span> out;
<a name="l02010"></a>02010     }
<a name="l02011"></a>02011 
<a name="l02012"></a>02012   <span class="comment">/* Check if we registered this opaque type */</span>
<a name="l02013"></a>02013   lsa_type = dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a60db552c89429929b677b191bee7f8b8">lsa_type</a>;
<a name="l02014"></a>02014   opaque_type = dmsg-&gt;<a class="code" href="structmsg__delete__request.html#abb94165a2f6daf772dcc234c72ccaabb">opaque_type</a>;
<a name="l02015"></a>02015 
<a name="l02016"></a>02016   <span class="keywordflow">if</span> (!apiserver_is_opaque_type_registered (apiserv, lsa_type, opaque_type))
<a name="l02017"></a>02017     {
<a name="l02018"></a>02018       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_delete: LSA-type(%d)/Opaque-type(%d): Not registered&quot;</span>, lsa_type, opaque_type);
<a name="l02019"></a>02019       rc = <a class="code" href="ospf__api_8h.html#ae4119af801c1e6feeb30376e0073596e">OSPF_API_OPAQUETYPENOTREGISTERED</a>;
<a name="l02020"></a>02020       <span class="keywordflow">goto</span> out;
<a name="l02021"></a>02021     }
<a name="l02022"></a>02022 
<a name="l02023"></a>02023   <span class="comment">/* opaque_id is in network byte order */</span>
<a name="l02024"></a>02024   <span class="keywordtype">id</span>.s_addr = htonl (<a class="code" href="ospf__opaque_8h.html#a44507a22a8268862dc322c292455d7a6">SET_OPAQUE_LSID</a> (dmsg-&gt;<a class="code" href="structmsg__delete__request.html#abb94165a2f6daf772dcc234c72ccaabb">opaque_type</a>,
<a name="l02025"></a>02025                       ntohl (dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a8bf6a4b1c0efc5fb7c66d94b30a672be">opaque_id</a>)));
<a name="l02026"></a>02026 
<a name="l02027"></a>02027   <span class="comment">/*</span>
<a name="l02028"></a>02028 <span class="comment">   * Even if the target LSA has once scheduled to flush, it remains in</span>
<a name="l02029"></a>02029 <span class="comment">   * the LSDB until it is finally handled by the maxage remover thread.</span>
<a name="l02030"></a>02030 <span class="comment">   * Therefore, the lookup function below may return non-NULL result.</span>
<a name="l02031"></a>02031 <span class="comment">   */</span>
<a name="l02032"></a>02032   old = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (area, dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a60db552c89429929b677b191bee7f8b8">lsa_type</a>, <span class="keywordtype">id</span>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);
<a name="l02033"></a>02033   <span class="keywordflow">if</span> (!old)
<a name="l02034"></a>02034     {
<a name="l02035"></a>02035       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_lsa_delete: LSA[Type%d:%s] not in LSDB&quot;</span>,
<a name="l02036"></a>02036          dmsg-&gt;<a class="code" href="structmsg__delete__request.html#a60db552c89429929b677b191bee7f8b8">lsa_type</a>, inet_ntoa (<span class="keywordtype">id</span>));
<a name="l02037"></a>02037       rc = <a class="code" href="ospf__api_8h.html#ab40435dc59d4c91a15aa61108d9a7cfb">OSPF_API_NOSUCHLSA</a>;
<a name="l02038"></a>02038       <span class="keywordflow">goto</span> out;
<a name="l02039"></a>02039     }
<a name="l02040"></a>02040 
<a name="l02041"></a>02041   <span class="comment">/* Schedule flushing of LSA from LSDB */</span>
<a name="l02042"></a>02042   <span class="comment">/* NB: Multiple scheduling will produce a warning message, but harmless. */</span>
<a name="l02043"></a>02043   <a class="code" href="ospf__opaque_8h.html#adc5d31cc8c6d8fd4eff1d8069027c39b">ospf_opaque_lsa_flush_schedule</a> (old);
<a name="l02044"></a>02044 
<a name="l02045"></a>02045 out:
<a name="l02046"></a>02046 
<a name="l02047"></a>02047   <span class="comment">/* Send reply back to client including return code */</span>
<a name="l02048"></a>02048   rc = <a class="code" href="ospf__apiserver_8h.html#afd62d2b7d6a81e1df31f121d9d939783">ospf_apiserver_send_reply</a> (apiserv, ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>), rc);
<a name="l02049"></a>02049   <span class="keywordflow">return</span> rc;
<a name="l02050"></a>02050 }
<a name="l02051"></a>02051 
<a name="l02052"></a>02052 <span class="comment">/* Flush self-originated opaque LSA */</span>
<a name="l02053"></a>02053 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02054"></a>02054 apiserver_flush_opaque_type_callback (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa,
<a name="l02055"></a>02055                       <span class="keywordtype">void</span> *p_arg, <span class="keywordtype">int</span> int_arg)
<a name="l02056"></a>02056 {
<a name="l02057"></a>02057   <span class="keyword">struct </span>param_t
<a name="l02058"></a>02058   {
<a name="l02059"></a>02059     <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02060"></a>02060     u_char lsa_type;
<a name="l02061"></a>02061     u_char opaque_type;
<a name="l02062"></a>02062   }
<a name="l02063"></a>02063    *param;
<a name="l02064"></a>02064 
<a name="l02065"></a>02065   <span class="comment">/* Sanity check */</span>
<a name="l02066"></a>02066   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l02067"></a>02067   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p_arg);
<a name="l02068"></a>02068   param = (<span class="keyword">struct </span>param_t *) p_arg;
<a name="l02069"></a>02069 
<a name="l02070"></a>02070   <span class="comment">/* If LSA matches type and opaque type then delete it */</span>
<a name="l02071"></a>02071   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa) &amp;&amp; lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == param-&gt;lsa_type
<a name="l02072"></a>02072       &amp;&amp; <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)) == param-&gt;opaque_type)
<a name="l02073"></a>02073     {
<a name="l02074"></a>02074       <a class="code" href="ospf__opaque_8h.html#adc5d31cc8c6d8fd4eff1d8069027c39b">ospf_opaque_lsa_flush_schedule</a> (lsa);
<a name="l02075"></a>02075     }
<a name="l02076"></a>02076   <span class="keywordflow">return</span> 0;
<a name="l02077"></a>02077 }
<a name="l02078"></a>02078 
<a name="l02079"></a>02079 <span class="comment">/* Delete self-originated opaque LSAs of a given opaque type. This</span>
<a name="l02080"></a>02080 <span class="comment">   function is called when an application unregisters a given opaque</span>
<a name="l02081"></a>02081 <span class="comment">   type or a connection to an application closes and all those opaque</span>
<a name="l02082"></a>02082 <span class="comment">   LSAs need to be flushed the LSDB. */</span>
<a name="l02083"></a>02083 <span class="keywordtype">void</span>
<a name="l02084"></a>02084 <a class="code" href="ospf__apiserver_8h.html#a33350dc16b3fb76a09130b12fb9298c0">ospf_apiserver_flush_opaque_lsa</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv,
<a name="l02085"></a>02085                  u_char lsa_type, u_char opaque_type)
<a name="l02086"></a>02086 {
<a name="l02087"></a>02087   <span class="keyword">struct </span>param_t
<a name="l02088"></a>02088   {
<a name="l02089"></a>02089     <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02090"></a>02090     u_char lsa_type;
<a name="l02091"></a>02091     u_char opaque_type;
<a name="l02092"></a>02092   } param;
<a name="l02093"></a>02093   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02094"></a>02094   <span class="keyword">struct </span>ospf * ospf;
<a name="l02095"></a>02095   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l02096"></a>02096   
<a name="l02097"></a>02097   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
<a name="l02098"></a>02098   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);
<a name="l02099"></a>02099 
<a name="l02100"></a>02100   <span class="comment">/* Set parameter struct. */</span>
<a name="l02101"></a>02101   param.apiserv = apiserv;
<a name="l02102"></a>02102   param.lsa_type = lsa_type;
<a name="l02103"></a>02103   param.opaque_type = opaque_type;
<a name="l02104"></a>02104 
<a name="l02105"></a>02105   <span class="keywordflow">switch</span> (lsa_type)
<a name="l02106"></a>02106     {
<a name="l02107"></a>02107       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02108"></a>02108       <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02109"></a>02109 
<a name="l02110"></a>02110     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02111"></a>02111       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
<a name="l02112"></a>02112         <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a7b6d75a56662bb4e124777b376bb84da">OPAQUE_LINK_LSDB</a> (area), rn, lsa)
<a name="l02113"></a>02113           apiserver_flush_opaque_type_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, 0);
<a name="l02114"></a>02114       break;
<a name="l02115"></a>02115     case <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02116"></a>02116       for (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;areas, node, nnode, area))
<a name="l02117"></a>02117         <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aec3918874489142043aedd1ac5855f57">OPAQUE_AREA_LSDB</a> (area), rn, lsa)
<a name="l02118"></a>02118           apiserver_flush_opaque_type_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, 0);
<a name="l02119"></a>02119       break;
<a name="l02120"></a>02120     case OSPF_OPAQUE_AS_LSA:
<a name="l02121"></a>02121       <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a7b6d75a56662bb4e124777b376bb84da">OPAQUE_LINK_LSDB</a> (ospf), rn, lsa)
<a name="l02122"></a>02122     apiserver_flush_opaque_type_callback(lsa, (<span class="keywordtype">void</span> *) &amp;param, 0);
<a name="l02123"></a>02123       break;
<a name="l02124"></a>02124     default:
<a name="l02125"></a>02125       break;
<a name="l02126"></a>02126     }
<a name="l02127"></a>02127   return;
<a name="l02128"></a>02128 }
<a name="l02129"></a>02129 
<a name="l02130"></a>02130 
<a name="l02131"></a>02131 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l02132"></a>02132 <span class="comment"> * Followings are callback functions to handle opaque types </span>
<a name="l02133"></a>02133 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l02134"></a>02134 <span class="comment"> */</span>
<a name="l02135"></a>02135 
<a name="l02136"></a>02136 <span class="keywordtype">int</span>
<a name="l02137"></a>02137 <a class="code" href="ospf__apiserver_8h.html#ada47c27e9d26a085cc5970c93571ad99">ospf_apiserver_new_if</a> (struct <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l02138"></a>02138 {
<a name="l02139"></a>02139   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02140"></a>02140 
<a name="l02141"></a>02141   <span class="comment">/* For some strange reason it seems possible that we are invoked</span>
<a name="l02142"></a>02142 <span class="comment">     with an interface that has no name. This seems to happen during</span>
<a name="l02143"></a>02143 <span class="comment">     initialization. Return if this happens */</span>
<a name="l02144"></a>02144 
<a name="l02145"></a>02145   <span class="keywordflow">if</span> (ifp-&gt;name[0] == <span class="charliteral">&#39;\0&#39;</span>) {
<a name="l02146"></a>02146     <span class="comment">/* interface has empty name */</span>
<a name="l02147"></a>02147     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_new_if: interface has no name?&quot;</span>);
<a name="l02148"></a>02148     <span class="keywordflow">return</span> 0;
<a name="l02149"></a>02149   }
<a name="l02150"></a>02150 
<a name="l02151"></a>02151   <span class="comment">/* zlog_warn for debugging */</span>
<a name="l02152"></a>02152   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_new_if&quot;</span>);
<a name="l02153"></a>02153   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ifp name=%s status=%d index=%d&quot;</span>, ifp-&gt;name, ifp-&gt;status,
<a name="l02154"></a>02154          ifp-&gt;ifindex);
<a name="l02155"></a>02155 
<a name="l02156"></a>02156   <span class="keywordflow">if</span> (ifp-&gt;name[0] == <span class="charliteral">&#39;\0&#39;</span>) {
<a name="l02157"></a>02157     <span class="comment">/* interface has empty name */</span>
<a name="l02158"></a>02158     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_new_if: interface has no name?&quot;</span>);
<a name="l02159"></a>02159     <span class="keywordflow">return</span> 0;
<a name="l02160"></a>02160   }
<a name="l02161"></a>02161 
<a name="l02162"></a>02162   oi = <a class="code" href="ospf__apiserver_8h.html#a1c5720823be03563030f54640b5d1388">ospf_apiserver_if_lookup_by_ifp</a> (ifp);
<a name="l02163"></a>02163   
<a name="l02164"></a>02164   <span class="keywordflow">if</span> (!oi) {
<a name="l02165"></a>02165     <span class="comment">/* This interface is known to Zebra but not to OSPF daemon yet. */</span>
<a name="l02166"></a>02166     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_new_if: interface %s not known to OSPFd?&quot;</span>, 
<a name="l02167"></a>02167            ifp-&gt;name);
<a name="l02168"></a>02168     <span class="keywordflow">return</span> 0;
<a name="l02169"></a>02169   }
<a name="l02170"></a>02170 
<a name="l02171"></a>02171   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi);
<a name="l02172"></a>02172 
<a name="l02173"></a>02173   <span class="comment">/* New interface added to OSPF, tell clients about it */</span>
<a name="l02174"></a>02174   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l02175"></a>02175     <a class="code" href="ospf__apiserver_8h.html#a5ea714a088c6228de6a25554661687af">ospf_apiserver_clients_notify_new_if</a> (oi);
<a name="l02176"></a>02176   }
<a name="l02177"></a>02177   <span class="keywordflow">return</span> 0;
<a name="l02178"></a>02178 }
<a name="l02179"></a>02179 
<a name="l02180"></a>02180 <span class="keywordtype">int</span>
<a name="l02181"></a>02181 <a class="code" href="ospf__apiserver_8h.html#a95835bcc7b1995d0943910ba688e3c3d">ospf_apiserver_del_if</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l02182"></a>02182 {
<a name="l02183"></a>02183   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02184"></a>02184 
<a name="l02185"></a>02185   <span class="comment">/* zlog_warn for debugging */</span>
<a name="l02186"></a>02186   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_del_if&quot;</span>);
<a name="l02187"></a>02187   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ifp name=%s status=%d index=%d\n&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>,
<a name="l02188"></a>02188          ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l02189"></a>02189 
<a name="l02190"></a>02190   oi = <a class="code" href="ospf__apiserver_8h.html#a1c5720823be03563030f54640b5d1388">ospf_apiserver_if_lookup_by_ifp</a> (ifp);
<a name="l02191"></a>02191 
<a name="l02192"></a>02192   <span class="keywordflow">if</span> (!oi) {
<a name="l02193"></a>02193     <span class="comment">/* This interface is known to Zebra but not to OSPF daemon</span>
<a name="l02194"></a>02194 <span class="comment">       anymore. No need to tell clients about it */</span>
<a name="l02195"></a>02195     <span class="keywordflow">return</span> 0;
<a name="l02196"></a>02196   }
<a name="l02197"></a>02197 
<a name="l02198"></a>02198   <span class="comment">/* Interface deleted, tell clients about it */</span>
<a name="l02199"></a>02199   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l02200"></a>02200     <a class="code" href="ospf__apiserver_8h.html#a48dffd2d835b988c4f7169bbb780fd09">ospf_apiserver_clients_notify_del_if</a> (oi);
<a name="l02201"></a>02201   }
<a name="l02202"></a>02202   <span class="keywordflow">return</span> 0;
<a name="l02203"></a>02203 }
<a name="l02204"></a>02204 
<a name="l02205"></a>02205 <span class="keywordtype">void</span>
<a name="l02206"></a>02206 <a class="code" href="ospf__apiserver_8h.html#afb73c44c10c2ddbf582085fd74c643a9">ospf_apiserver_ism_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> old_state)
<a name="l02207"></a>02207 {
<a name="l02208"></a>02208   <span class="comment">/* Tell clients about interface change */</span>
<a name="l02209"></a>02209 
<a name="l02210"></a>02210   <span class="comment">/* zlog_warn for debugging */</span>
<a name="l02211"></a>02211   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_ism_change&quot;</span>);
<a name="l02212"></a>02212   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l02213"></a>02213     <a class="code" href="ospf__apiserver_8h.html#af664f03d334eb274fa9e6124635072b6">ospf_apiserver_clients_notify_ism_change</a> (oi);
<a name="l02214"></a>02214   }
<a name="l02215"></a>02215 
<a name="l02216"></a>02216   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;oi-&gt;ifp-&gt;name=%s&quot;</span>, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l02217"></a>02217   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;old_state=%d&quot;</span>, old_state);
<a name="l02218"></a>02218   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;oi-&gt;state=%d&quot;</span>, oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>);
<a name="l02219"></a>02219 }
<a name="l02220"></a>02220 
<a name="l02221"></a>02221 <span class="keywordtype">void</span>
<a name="l02222"></a>02222 <a class="code" href="ospf__apiserver_8h.html#a5dfd8142f3027ec099cc7bcbdd4ed1d7">ospf_apiserver_nsm_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> old_status)
<a name="l02223"></a>02223 {
<a name="l02224"></a>02224   <span class="comment">/* Neighbor status changed, tell clients about it */</span>
<a name="l02225"></a>02225   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_apiserver_nsm_change&quot;</span>);
<a name="l02226"></a>02226   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (apiserver_list) &gt; 0) {
<a name="l02227"></a>02227     <a class="code" href="ospf__apiserver_8h.html#a4fb5e55a39d1098c8bddf667fa6530f5">ospf_apiserver_clients_notify_nsm_change</a> (nbr);
<a name="l02228"></a>02228   }
<a name="l02229"></a>02229 }
<a name="l02230"></a>02230 
<a name="l02231"></a>02231 <span class="keywordtype">void</span>
<a name="l02232"></a>02232 <a class="code" href="ospf__apiserver_8h.html#a3df6cc82d28def9cbfd5694de33b2ec4">ospf_apiserver_show_info</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02233"></a>02233 {
<a name="l02234"></a>02234   <span class="keyword">struct </span>opaque_lsa
<a name="l02235"></a>02235   {
<a name="l02236"></a>02236     <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> header;
<a name="l02237"></a>02237     u_char data[1]; <span class="comment">/* opaque data have variable length. This is start</span>
<a name="l02238"></a>02238 <span class="comment">                       address */</span>
<a name="l02239"></a>02239   };
<a name="l02240"></a>02240   <span class="keyword">struct </span>opaque_lsa *olsa;
<a name="l02241"></a>02241   <span class="keywordtype">int</span> opaquelen;
<a name="l02242"></a>02242 
<a name="l02243"></a>02243   olsa = (<span class="keyword">struct </span>opaque_lsa *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l02244"></a>02244 
<a name="l02245"></a>02245   if (<a class="code" href="ospf__opaque_8h.html#adcab14cba9d8bf4a492ee197fb0b26a9">VALID_OPAQUE_INFO_LEN</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>))
<a name="l02246"></a>02246     opaquelen = ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>;
<a name="l02247"></a>02247   <span class="keywordflow">else</span>
<a name="l02248"></a>02248     opaquelen = 0;
<a name="l02249"></a>02249 
<a name="l02250"></a>02250   <span class="comment">/* Output information about opaque LSAs */</span>
<a name="l02251"></a>02251   <span class="keywordflow">if</span> (vty != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02252"></a>02252     {
<a name="l02253"></a>02253       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02254"></a>02254       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Added using OSPF API: %u octets of opaque data %s%s&quot;</span>,
<a name="l02255"></a>02255            opaquelen,
<a name="l02256"></a>02256            <a class="code" href="ospf__opaque_8h.html#adcab14cba9d8bf4a492ee197fb0b26a9">VALID_OPAQUE_INFO_LEN</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>) ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;(Invalid length?)&quot;</span>,
<a name="l02257"></a>02257            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02258"></a>02258       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Opaque data: &quot;</span>);
<a name="l02259"></a>02259 
<a name="l02260"></a>02260       <span class="keywordflow">for</span> (i = 0; i &lt; opaquelen; i++)
<a name="l02261"></a>02261     {
<a name="l02262"></a>02262       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;0x%x &quot;</span>, olsa-&gt;data[i]);
<a name="l02263"></a>02263     }
<a name="l02264"></a>02264       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02265"></a>02265     }
<a name="l02266"></a>02266   <span class="keywordflow">else</span>
<a name="l02267"></a>02267     {
<a name="l02268"></a>02268       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02269"></a>02269       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Added using OSPF API: %u octets of opaque data %s&quot;</span>,
<a name="l02270"></a>02270          opaquelen,
<a name="l02271"></a>02271          <a class="code" href="ospf__opaque_8h.html#adcab14cba9d8bf4a492ee197fb0b26a9">VALID_OPAQUE_INFO_LEN</a> (lsa-&gt;
<a name="l02272"></a>02272                     data) ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;(Invalid length?)&quot;</span>);
<a name="l02273"></a>02273       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Opaque data: &quot;</span>);
<a name="l02274"></a>02274 
<a name="l02275"></a>02275       <span class="keywordflow">for</span> (i = 0; i &lt; opaquelen; i++)
<a name="l02276"></a>02276     {
<a name="l02277"></a>02277       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;0x%x &quot;</span>, olsa-&gt;data[i]);
<a name="l02278"></a>02278     }
<a name="l02279"></a>02279       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02280"></a>02280     }
<a name="l02281"></a>02281   <span class="keywordflow">return</span>;
<a name="l02282"></a>02282 }
<a name="l02283"></a>02283 
<a name="l02284"></a>02284 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l02285"></a>02285 <span class="comment"> * Followings are functions to notify clients about events</span>
<a name="l02286"></a>02286 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l02287"></a>02287 <span class="comment"> */</span>
<a name="l02288"></a>02288 
<a name="l02289"></a>02289 <span class="comment">/* Send a message to all clients. This is useful for messages</span>
<a name="l02290"></a>02290 <span class="comment">   that need to be notified to all clients (such as interface</span>
<a name="l02291"></a>02291 <span class="comment">   changes) */</span>
<a name="l02292"></a>02292 
<a name="l02293"></a>02293 <span class="keywordtype">void</span>
<a name="l02294"></a>02294 <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a> (<span class="keyword">struct</span> msg *msg)
<a name="l02295"></a>02295 {
<a name="l02296"></a>02296   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02297"></a>02297   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02298"></a>02298 
<a name="l02299"></a>02299   <span class="comment">/* Send message to all clients */</span>
<a name="l02300"></a>02300   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserver_list, node, nnode, apiserv))
<a name="l02301"></a>02301     ospf_apiserver_send_msg (apiserv, msg);
<a name="l02302"></a>02302 }
<a name="l02303"></a>02303 
<a name="l02304"></a>02304 <span class="comment">/* An interface is now ready to accept opaque LSAs. Notify all</span>
<a name="l02305"></a>02305 <span class="comment">   clients that registered to use this opaque type */</span>
<a name="l02306"></a>02306 <span class="keywordtype">void</span>
<a name="l02307"></a>02307 <a class="code" href="ospf__apiserver_8h.html#ae9401bd187ef1b9cdf76efc0237cca2d">ospf_apiserver_clients_notify_ready_type9</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02308"></a>02308 {
<a name="l02309"></a>02309   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02310"></a>02310   <span class="keyword">struct </span>msg *msg;
<a name="l02311"></a>02311   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02312"></a>02312 
<a name="l02313"></a>02313   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi);
<a name="l02314"></a>02314   <span class="keywordflow">if</span> (!oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l02315"></a>02315     {
<a name="l02316"></a>02316       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Interface has no address?&quot;</span>);
<a name="l02317"></a>02317       <span class="keywordflow">return</span>;
<a name="l02318"></a>02318     }
<a name="l02319"></a>02319 
<a name="l02320"></a>02320   <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a47a3cb9bce40fc0bf192054475747d6a">ospf_apiserver_is_ready_type9</a> (oi))
<a name="l02321"></a>02321     {
<a name="l02322"></a>02322       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Interface not ready for type 9?&quot;</span>);
<a name="l02323"></a>02323       <span class="keywordflow">return</span>;
<a name="l02324"></a>02324     }
<a name="l02325"></a>02325 
<a name="l02326"></a>02326   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserver_list, node, nnode, apiserv))
<a name="l02327"></a>02327     {
<a name="l02328"></a>02328       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l02329"></a>02329       <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l02330"></a>02330 
<a name="l02331"></a>02331       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node2, nnode2, r))
<a name="l02332"></a>02332     {
<a name="l02333"></a>02333       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l02334"></a>02334         {
<a name="l02335"></a>02335           msg = <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>,
<a name="l02336"></a>02336                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>,
<a name="l02337"></a>02337                       oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l02338"></a>02338           <span class="keywordflow">if</span> (!msg)
<a name="l02339"></a>02339         {
<a name="l02340"></a>02340           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l02341"></a>02341             (<span class="stringliteral">&quot;ospf_apiserver_clients_notify_ready_type9: new_msg_ready_notify failed&quot;</span>);
<a name="l02342"></a>02342 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l02343"></a>02343 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l02344"></a>02344           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l02345"></a>02345 <span class="preprocessor">#endif</span>
<a name="l02346"></a>02346 <span class="preprocessor"></span>          <span class="keywordflow">goto</span> out;
<a name="l02347"></a>02347         }
<a name="l02348"></a>02348 
<a name="l02349"></a>02349           ospf_apiserver_send_msg (apiserv, msg);
<a name="l02350"></a>02350           <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02351"></a>02351         }
<a name="l02352"></a>02352     }
<a name="l02353"></a>02353     }
<a name="l02354"></a>02354 
<a name="l02355"></a>02355 out:
<a name="l02356"></a>02356   <span class="keywordflow">return</span>;
<a name="l02357"></a>02357 }
<a name="l02358"></a>02358 
<a name="l02359"></a>02359 <span class="keywordtype">void</span>
<a name="l02360"></a>02360 <a class="code" href="ospf__apiserver_8h.html#a2ec44eeb9ef670e583701537c6d5bdef">ospf_apiserver_clients_notify_ready_type10</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area)
<a name="l02361"></a>02361 {
<a name="l02362"></a>02362   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02363"></a>02363   <span class="keyword">struct </span>msg *msg;
<a name="l02364"></a>02364   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02365"></a>02365 
<a name="l02366"></a>02366   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (area);
<a name="l02367"></a>02367 
<a name="l02368"></a>02368   <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a1f7d9d20eaced8415f6f911aac30a3a1">ospf_apiserver_is_ready_type10</a> (area))
<a name="l02369"></a>02369     {
<a name="l02370"></a>02370       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Area not ready for type 10?&quot;</span>);
<a name="l02371"></a>02371       <span class="keywordflow">return</span>;
<a name="l02372"></a>02372     }
<a name="l02373"></a>02373 
<a name="l02374"></a>02374   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserver_list, node, nnode, apiserv))
<a name="l02375"></a>02375     {
<a name="l02376"></a>02376       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l02377"></a>02377       <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l02378"></a>02378 
<a name="l02379"></a>02379       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node2, nnode2, r))
<a name="l02380"></a>02380     {
<a name="l02381"></a>02381       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>)
<a name="l02382"></a>02382         {
<a name="l02383"></a>02383           msg = <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>,
<a name="l02384"></a>02384                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>, area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l02385"></a>02385           <span class="keywordflow">if</span> (!msg)
<a name="l02386"></a>02386         {
<a name="l02387"></a>02387           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l02388"></a>02388             (<span class="stringliteral">&quot;ospf_apiserver_clients_notify_ready_type10: new_msg_ready_nofity failed&quot;</span>);
<a name="l02389"></a>02389 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l02390"></a>02390 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l02391"></a>02391           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l02392"></a>02392 <span class="preprocessor">#endif</span>
<a name="l02393"></a>02393 <span class="preprocessor"></span>                  <span class="keywordflow">goto</span> out;
<a name="l02394"></a>02394         }
<a name="l02395"></a>02395 
<a name="l02396"></a>02396           ospf_apiserver_send_msg (apiserv, msg);
<a name="l02397"></a>02397           <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02398"></a>02398         }
<a name="l02399"></a>02399     }
<a name="l02400"></a>02400     }
<a name="l02401"></a>02401 
<a name="l02402"></a>02402 out:
<a name="l02403"></a>02403   <span class="keywordflow">return</span>;
<a name="l02404"></a>02404 }
<a name="l02405"></a>02405 
<a name="l02406"></a>02406 
<a name="l02407"></a>02407 <span class="keywordtype">void</span>
<a name="l02408"></a>02408 <a class="code" href="ospf__apiserver_8h.html#a1679223b213a7f118b1da636947bbf06">ospf_apiserver_clients_notify_ready_type11</a> (<span class="keyword">struct</span> ospf *top)
<a name="l02409"></a>02409 {
<a name="l02410"></a>02410   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02411"></a>02411   <span class="keyword">struct </span>msg *msg;
<a name="l02412"></a>02412   <span class="keyword">struct </span>in_addr id_null = { .s_addr = 0L };
<a name="l02413"></a>02413   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02414"></a>02414   
<a name="l02415"></a>02415   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (top);
<a name="l02416"></a>02416   
<a name="l02417"></a>02417   <span class="keywordflow">if</span> (!<a class="code" href="ospf__apiserver_8h.html#a37b592bdc796580f90c670c61738d89a">ospf_apiserver_is_ready_type11</a> (top))
<a name="l02418"></a>02418     {
<a name="l02419"></a>02419       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;AS not ready for type 11?&quot;</span>);
<a name="l02420"></a>02420       <span class="keywordflow">return</span>;
<a name="l02421"></a>02421     }
<a name="l02422"></a>02422 
<a name="l02423"></a>02423   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserver_list, node, nnode, apiserv))
<a name="l02424"></a>02424     {
<a name="l02425"></a>02425       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l02426"></a>02426       <span class="keyword">struct </span><a class="code" href="structregistered__opaque__type.html">registered_opaque_type</a> *r;
<a name="l02427"></a>02427 
<a name="l02428"></a>02428       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserv-&gt;<a class="code" href="structospf__apiserver.html#a1ab2cb4c831e35b4e0e9fbbd8c17eadc">opaque_types</a>, node2, nnode2, r))
<a name="l02429"></a>02429     {
<a name="l02430"></a>02430       <span class="keywordflow">if</span> (r-&gt;<a class="code" href="structregistered__opaque__type.html#a96c20bb3daf4617bc0974790f2a17898">lsa_type</a> == OSPF_OPAQUE_AS_LSA)
<a name="l02431"></a>02431         {
<a name="l02432"></a>02432           msg = <a class="code" href="ospf__api_8h.html#a9b1826ea0a95c24e33a435557f1c8384">new_msg_ready_notify</a> (0, OSPF_OPAQUE_AS_LSA,
<a name="l02433"></a>02433                       r-&gt;<a class="code" href="structregistered__opaque__type.html#aaa50e8d50e13ebfaaba2e8361b041086">opaque_type</a>, id_null);
<a name="l02434"></a>02434           <span class="keywordflow">if</span> (!msg)
<a name="l02435"></a>02435         {
<a name="l02436"></a>02436           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>
<a name="l02437"></a>02437             (<span class="stringliteral">&quot;ospf_apiserver_clients_notify_ready_type11: new_msg_ready_notify failed&quot;</span>);
<a name="l02438"></a>02438 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l02439"></a>02439 <span class="preprocessor"></span>          <span class="comment">/* Cannot allocate new message. What should we do? */</span>
<a name="l02440"></a>02440           <a class="code" href="ospf__apiserver_8h.html#a90875411c78f0b8917df5dcd69dcf801">ospf_apiserver_free</a> (apiserv);
<a name="l02441"></a>02441 <span class="preprocessor">#endif</span>
<a name="l02442"></a>02442 <span class="preprocessor"></span>          <span class="keywordflow">goto</span> out;
<a name="l02443"></a>02443         }
<a name="l02444"></a>02444 
<a name="l02445"></a>02445           ospf_apiserver_send_msg (apiserv, msg);
<a name="l02446"></a>02446           <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02447"></a>02447         }
<a name="l02448"></a>02448     }
<a name="l02449"></a>02449     }
<a name="l02450"></a>02450 
<a name="l02451"></a>02451 out:
<a name="l02452"></a>02452   <span class="keywordflow">return</span>;
<a name="l02453"></a>02453 }
<a name="l02454"></a>02454 
<a name="l02455"></a>02455 <span class="keywordtype">void</span>
<a name="l02456"></a>02456 <a class="code" href="ospf__apiserver_8h.html#a5ea714a088c6228de6a25554661687af">ospf_apiserver_clients_notify_new_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02457"></a>02457 {
<a name="l02458"></a>02458   <span class="keyword">struct </span>msg *msg;
<a name="l02459"></a>02459 
<a name="l02460"></a>02460   msg = <a class="code" href="ospf__api_8h.html#ad6377589d902e778937fe17c44c6ad19">new_msg_new_if</a> (0, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l02461"></a>02461   <span class="keywordflow">if</span> (msg != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02462"></a>02462     {
<a name="l02463"></a>02463       <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a> (msg);
<a name="l02464"></a>02464       <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02465"></a>02465     }
<a name="l02466"></a>02466 }
<a name="l02467"></a>02467 
<a name="l02468"></a>02468 <span class="keywordtype">void</span>
<a name="l02469"></a>02469 <a class="code" href="ospf__apiserver_8h.html#a48dffd2d835b988c4f7169bbb780fd09">ospf_apiserver_clients_notify_del_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02470"></a>02470 {
<a name="l02471"></a>02471   <span class="keyword">struct </span>msg *msg;
<a name="l02472"></a>02472 
<a name="l02473"></a>02473   msg = <a class="code" href="ospf__api_8h.html#a75d62dede811ddca3198205fd9246f6c">new_msg_del_if</a> (0, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l02474"></a>02474   <span class="keywordflow">if</span> (msg != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02475"></a>02475     {
<a name="l02476"></a>02476       <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a> (msg);
<a name="l02477"></a>02477       <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02478"></a>02478     }
<a name="l02479"></a>02479 }
<a name="l02480"></a>02480 
<a name="l02481"></a>02481 <span class="keywordtype">void</span>
<a name="l02482"></a>02482 <a class="code" href="ospf__apiserver_8h.html#af664f03d334eb274fa9e6124635072b6">ospf_apiserver_clients_notify_ism_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02483"></a>02483 {
<a name="l02484"></a>02484   <span class="keyword">struct </span>msg *msg;
<a name="l02485"></a>02485   <span class="keyword">struct </span>in_addr ifaddr = { .s_addr = 0L };
<a name="l02486"></a>02486   <span class="keyword">struct </span>in_addr area_id = { .s_addr = 0L };
<a name="l02487"></a>02487   
<a name="l02488"></a>02488   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi);
<a name="l02489"></a>02489   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>);
<a name="l02490"></a>02490   
<a name="l02491"></a>02491   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l02492"></a>02492     {
<a name="l02493"></a>02493       ifaddr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l02494"></a>02494     }
<a name="l02495"></a>02495   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)
<a name="l02496"></a>02496     {
<a name="l02497"></a>02497       area_id = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l02498"></a>02498     }
<a name="l02499"></a>02499 
<a name="l02500"></a>02500   msg = <a class="code" href="ospf__api_8h.html#a4ca66249c497e61d5feecc741b46fd88">new_msg_ism_change</a> (0, ifaddr, area_id, oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>);
<a name="l02501"></a>02501   <span class="keywordflow">if</span> (!msg)
<a name="l02502"></a>02502     {
<a name="l02503"></a>02503       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_clients_notify_ism_change: msg_new failed&quot;</span>);
<a name="l02504"></a>02504       <span class="keywordflow">return</span>;
<a name="l02505"></a>02505     }
<a name="l02506"></a>02506 
<a name="l02507"></a>02507   <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a> (msg);
<a name="l02508"></a>02508   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02509"></a>02509 }
<a name="l02510"></a>02510 
<a name="l02511"></a>02511 <span class="keywordtype">void</span>
<a name="l02512"></a>02512 <a class="code" href="ospf__apiserver_8h.html#a4fb5e55a39d1098c8bddf667fa6530f5">ospf_apiserver_clients_notify_nsm_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l02513"></a>02513 {
<a name="l02514"></a>02514   <span class="keyword">struct </span>msg *msg;
<a name="l02515"></a>02515   <span class="keyword">struct </span>in_addr ifaddr = { .s_addr = 0L };
<a name="l02516"></a>02516   <span class="keyword">struct </span>in_addr nbraddr = { .s_addr = 0L };
<a name="l02517"></a>02517 
<a name="l02518"></a>02518   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (nbr);
<a name="l02519"></a>02519 
<a name="l02520"></a>02520   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)
<a name="l02521"></a>02521     {
<a name="l02522"></a>02522       ifaddr = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l02523"></a>02523     }
<a name="l02524"></a>02524 
<a name="l02525"></a>02525   nbraddr = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l02526"></a>02526 
<a name="l02527"></a>02527   msg = <a class="code" href="ospf__api_8h.html#a4e76eb48e52763e5f327aa25ce91556c">new_msg_nsm_change</a> (0, ifaddr, nbraddr, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>);
<a name="l02528"></a>02528   <span class="keywordflow">if</span> (!msg)
<a name="l02529"></a>02529     {
<a name="l02530"></a>02530       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_clients_notify_nsm_change: msg_new failed&quot;</span>);
<a name="l02531"></a>02531       <span class="keywordflow">return</span>;
<a name="l02532"></a>02532     }
<a name="l02533"></a>02533 
<a name="l02534"></a>02534   <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a> (msg);
<a name="l02535"></a>02535   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02536"></a>02536 }
<a name="l02537"></a>02537 
<a name="l02538"></a>02538 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02539"></a>02539 apiserver_clients_lsa_change_notify (u_char msgtype, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02540"></a>02540 {
<a name="l02541"></a>02541   <span class="keyword">struct </span>msg *msg;
<a name="l02542"></a>02542   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02543"></a>02543   <span class="keyword">struct </span><a class="code" href="structospf__apiserver.html">ospf_apiserver</a> *apiserv;
<a name="l02544"></a>02544 
<a name="l02545"></a>02545   <span class="comment">/* Default area for AS-External and Opaque11 LSAs */</span>
<a name="l02546"></a>02546   <span class="keyword">struct </span>in_addr area_id = { .s_addr = 0L };
<a name="l02547"></a>02547 
<a name="l02548"></a>02548   <span class="comment">/* Default interface for non Opaque9 LSAs */</span>
<a name="l02549"></a>02549   <span class="keyword">struct </span>in_addr ifaddr = { .s_addr = 0L };
<a name="l02550"></a>02550 
<a name="l02551"></a>02551   <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>)
<a name="l02552"></a>02552     {
<a name="l02553"></a>02553       area_id = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l02554"></a>02554     }
<a name="l02555"></a>02555   <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l02556"></a>02556     {
<a name="l02557"></a>02557       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;oi);
<a name="l02558"></a>02558       ifaddr = lsa-&gt;oi-&gt;address-&gt;u.prefix4;
<a name="l02559"></a>02559     }
<a name="l02560"></a>02560 
<a name="l02561"></a>02561   <span class="comment">/* Prepare message that can be sent to clients that have a matching</span>
<a name="l02562"></a>02562 <span class="comment">     filter */</span>
<a name="l02563"></a>02563   msg = <a class="code" href="ospf__api_8h.html#afb4b60754cabab3068ae629ef115f61b">new_msg_lsa_change_notify</a> (msgtype, 0L, <span class="comment">/* no sequence number */</span>
<a name="l02564"></a>02564                    ifaddr, area_id,
<a name="l02565"></a>02565                    lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l02566"></a>02566   <span class="keywordflow">if</span> (!msg)
<a name="l02567"></a>02567     {
<a name="l02568"></a>02568       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;apiserver_clients_lsa_change_notify: msg_new failed&quot;</span>);
<a name="l02569"></a>02569       <span class="keywordflow">return</span>;
<a name="l02570"></a>02570     }
<a name="l02571"></a>02571 
<a name="l02572"></a>02572   <span class="comment">/* Now send message to all clients with a matching filter */</span>
<a name="l02573"></a>02573   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (apiserver_list, node, nnode, apiserv))
<a name="l02574"></a>02574     {
<a name="l02575"></a>02575       <span class="keyword">struct </span><a class="code" href="structlsa__filter__type.html">lsa_filter_type</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l02576"></a>02576       u_int16_t mask;
<a name="l02577"></a>02577       u_int32_t *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l02578"></a>02578       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02579"></a>02579 
<a name="l02580"></a>02580       <span class="comment">/* Check filter for this client. */</span>
<a name="l02581"></a>02581       filter = apiserv-&gt;<a class="code" href="structospf__apiserver.html#abd6c54a28d441533515add65461616d3">filter</a>;
<a name="l02582"></a>02582 
<a name="l02583"></a>02583       <span class="comment">/* Check area IDs in case of non AS-E LSAs.</span>
<a name="l02584"></a>02584 <span class="comment">       * If filter has areas (num_areas &gt; 0),</span>
<a name="l02585"></a>02585 <span class="comment">       * then one of the areas must match the area ID of this LSA. */</span>
<a name="l02586"></a>02586 
<a name="l02587"></a>02587       i = filter-&gt;<a class="code" href="structlsa__filter__type.html#a122e6de12b070f0a38d9d1a2b5199a9d">num_areas</a>;
<a name="l02588"></a>02588       <span class="keywordflow">if</span> ((lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == OSPF_AS_EXTERNAL_LSA) ||
<a name="l02589"></a>02589       (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == OSPF_OPAQUE_AS_LSA))
<a name="l02590"></a>02590     {
<a name="l02591"></a>02591       i = 0;
<a name="l02592"></a>02592     }
<a name="l02593"></a>02593 
<a name="l02594"></a>02594       <span class="keywordflow">if</span> (i &gt; 0)
<a name="l02595"></a>02595     {
<a name="l02596"></a>02596       area = (u_int32_t *) (filter + 1);
<a name="l02597"></a>02597       <span class="keywordflow">while</span> (i)
<a name="l02598"></a>02598         {
<a name="l02599"></a>02599           <span class="keywordflow">if</span> (*area == area_id.s_addr)
<a name="l02600"></a>02600         {
<a name="l02601"></a>02601           <span class="keywordflow">break</span>;
<a name="l02602"></a>02602         }
<a name="l02603"></a>02603           i--;
<a name="l02604"></a>02604           area++;
<a name="l02605"></a>02605         }
<a name="l02606"></a>02606     }
<a name="l02607"></a>02607       <span class="keywordflow">else</span>
<a name="l02608"></a>02608     {
<a name="l02609"></a>02609       i = 1;
<a name="l02610"></a>02610     }
<a name="l02611"></a>02611 
<a name="l02612"></a>02612       <span class="keywordflow">if</span> (i &gt; 0)
<a name="l02613"></a>02613     {
<a name="l02614"></a>02614       <span class="comment">/* Area match. Check LSA type. */</span>
<a name="l02615"></a>02615       mask = ntohs (filter-&gt;<a class="code" href="structlsa__filter__type.html#aa5fe7d15c2a49cf18a2bb996e4d07459">typemask</a>);
<a name="l02616"></a>02616 
<a name="l02617"></a>02617       <span class="keywordflow">if</span> (mask &amp; <a class="code" href="ospf__api_8h.html#a1b05bc573b704a1805a747ca972ed7fb">Power2</a>[lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>])
<a name="l02618"></a>02618         {
<a name="l02619"></a>02619           <span class="comment">/* Type also matches. Check origin. */</span>
<a name="l02620"></a>02620           <span class="keywordflow">if</span> ((filter-&gt;<a class="code" href="structlsa__filter__type.html#abfc879daf7d68e4e3e7e9f6ef6d425c1">origin</a> == <a class="code" href="ospf__api_8h.html#a540bc4d38c44ca370a74bc4c97998534">ANY_ORIGIN</a>) ||
<a name="l02621"></a>02621           (filter-&gt;<a class="code" href="structlsa__filter__type.html#abfc879daf7d68e4e3e7e9f6ef6d425c1">origin</a> == <a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa)))
<a name="l02622"></a>02622         {
<a name="l02623"></a>02623           ospf_apiserver_send_msg (apiserv, msg);
<a name="l02624"></a>02624         }
<a name="l02625"></a>02625         }
<a name="l02626"></a>02626     }
<a name="l02627"></a>02627     }
<a name="l02628"></a>02628   <span class="comment">/* Free message since it is not used anymore */</span>
<a name="l02629"></a>02629   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02630"></a>02630 }
<a name="l02631"></a>02631 
<a name="l02632"></a>02632 
<a name="l02633"></a>02633 <span class="comment">/* -------------------------------------------------------------</span>
<a name="l02634"></a>02634 <span class="comment"> * Followings are hooks invoked when LSAs are updated or deleted</span>
<a name="l02635"></a>02635 <span class="comment"> * -------------------------------------------------------------</span>
<a name="l02636"></a>02636 <span class="comment"> */</span>
<a name="l02637"></a>02637 
<a name="l02638"></a>02638 
<a name="l02639"></a>02639 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02640"></a>02640 apiserver_notify_clients_lsa (u_char msgtype, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02641"></a>02641 {
<a name="l02642"></a>02642   <span class="keyword">struct </span>msg *msg;
<a name="l02643"></a>02643   <span class="comment">/* default area for AS-External and Opaque11 LSAs */</span>
<a name="l02644"></a>02644   <span class="keyword">struct </span>in_addr area_id = { .s_addr = 0L };
<a name="l02645"></a>02645 
<a name="l02646"></a>02646   <span class="comment">/* default interface for non Opaque9 LSAs */</span>
<a name="l02647"></a>02647   <span class="keyword">struct </span>in_addr ifaddr = { .s_addr = 0L };
<a name="l02648"></a>02648 
<a name="l02649"></a>02649   <span class="comment">/* Only notify this update if the LSA&#39;s age is smaller than</span>
<a name="l02650"></a>02650 <span class="comment">     MAXAGE. Otherwise clients would see LSA updates with max age just</span>
<a name="l02651"></a>02651 <span class="comment">     before they are deleted from the LSDB. LSA delete messages have</span>
<a name="l02652"></a>02652 <span class="comment">     MAXAGE too but should not be filtered. */</span>
<a name="l02653"></a>02653   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a>(lsa) &amp;&amp; (msgtype == <a class="code" href="ospf__api_8h.html#a34895bb3424e37147e7383859e77bae2">MSG_LSA_UPDATE_NOTIFY</a>)) {
<a name="l02654"></a>02654     <span class="keywordflow">return</span> 0;
<a name="l02655"></a>02655   }
<a name="l02656"></a>02656 
<a name="l02657"></a>02657   <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>)
<a name="l02658"></a>02658     {
<a name="l02659"></a>02659       area_id = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l02660"></a>02660     }
<a name="l02661"></a>02661   <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l02662"></a>02662     {
<a name="l02663"></a>02663       ifaddr = lsa-&gt;oi-&gt;address-&gt;u.prefix4;
<a name="l02664"></a>02664     }
<a name="l02665"></a>02665   msg = <a class="code" href="ospf__api_8h.html#afb4b60754cabab3068ae629ef115f61b">new_msg_lsa_change_notify</a> (msgtype, 0L, <span class="comment">/* no sequence number */</span>
<a name="l02666"></a>02666                    ifaddr, area_id,
<a name="l02667"></a>02667                    lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l02668"></a>02668   <span class="keywordflow">if</span> (!msg)
<a name="l02669"></a>02669     {
<a name="l02670"></a>02670       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;notify_clients_lsa: msg_new failed&quot;</span>);
<a name="l02671"></a>02671       <span class="keywordflow">return</span> -1;
<a name="l02672"></a>02672     }
<a name="l02673"></a>02673   <span class="comment">/* Notify all clients that new LSA is added/updated */</span>
<a name="l02674"></a>02674   apiserver_clients_lsa_change_notify (msgtype, lsa);
<a name="l02675"></a>02675 
<a name="l02676"></a>02676   <span class="comment">/* Clients made their own copies of msg so we can free msg here */</span>
<a name="l02677"></a>02677   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l02678"></a>02678 
<a name="l02679"></a>02679   <span class="keywordflow">return</span> 0;
<a name="l02680"></a>02680 }
<a name="l02681"></a>02681 
<a name="l02682"></a>02682 <span class="keywordtype">int</span>
<a name="l02683"></a>02683 <a class="code" href="ospf__apiserver_8h.html#ae7440e36a2e70543824f4f8489d4582d">ospf_apiserver_lsa_update</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02684"></a>02684 {
<a name="l02685"></a>02685   <span class="keywordflow">return</span> apiserver_notify_clients_lsa (<a class="code" href="ospf__api_8h.html#a34895bb3424e37147e7383859e77bae2">MSG_LSA_UPDATE_NOTIFY</a>, lsa);
<a name="l02686"></a>02686 }
<a name="l02687"></a>02687 
<a name="l02688"></a>02688 <span class="keywordtype">int</span>
<a name="l02689"></a>02689 <a class="code" href="ospf__apiserver_8h.html#a999c77f52472640ab040705e6727c5c3">ospf_apiserver_lsa_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02690"></a>02690 {
<a name="l02691"></a>02691   <span class="keywordflow">return</span> apiserver_notify_clients_lsa (<a class="code" href="ospf__api_8h.html#a9081acc8815e23c6c0b6c53d811f82e0">MSG_LSA_DELETE_NOTIFY</a>, lsa);
<a name="l02692"></a>02692 }
<a name="l02693"></a>02693 
<a name="l02694"></a>02694 <span class="comment">/* 08/23/2011 yic +n */</span>
<a name="l02695"></a>02695 <span class="keywordtype">void</span> <a class="code" href="ospf__apiserver_8h.html#ae1e4913eef3d43bdeb7b179c12a4684c">ospf_apiserver_notify_router_routing_table_change</a>(<span class="keyword">struct</span> in_addr router_id, <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *rn)
<a name="l02696"></a>02696 {
<a name="l02697"></a>02697     <span class="keyword">struct </span>msg *msg;
<a name="l02698"></a>02698 
<a name="l02699"></a>02699     msg = <a class="code" href="ospf__api_8h.html#af7ea77ff791554b2924e3782c1213e51">new_msg_router_routing_table_change</a>(0, router_id, rn);
<a name="l02700"></a>02700     <span class="keywordflow">if</span> (msg != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02701"></a>02701     {
<a name="l02702"></a>02702         <a class="code" href="ospf__apiserver_8h.html#a4bd890c8d8789b032bd0f7da859deb2c">ospf_apiserver_clients_notify_all</a>(msg);
<a name="l02703"></a>02703         <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a>(msg);
<a name="l02704"></a>02704     }
<a name="l02705"></a>02705 }
<a name="l02706"></a>02706 
<a name="l02707"></a>02707 <span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_OSPF_API */</span>
<a name="l02708"></a>02708 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__apiserver_8c.html">ospf_apiserver.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
