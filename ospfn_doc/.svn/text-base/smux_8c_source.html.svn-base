<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/smux.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('smux_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/smux.c</div>  </div>
</div>
<div class="contents">
<a href="smux_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* SNMP support</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#ifdef HAVE_NETSNMP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net-snmp/net-snmp-config.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;net-snmp/net-snmp-includes.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#else</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;asn1.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;snmp.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;snmp_impl.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="version_8h.html">lib/version.h</a>&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="smux_8h.html">smux.h</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#define min(A,B) ((A) &lt; (B) ? (A) : (B))</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="keyword">enum</span> smux_event {SMUX_SCHEDULE, SMUX_CONNECT, SMUX_READ};
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="keywordtype">void</span> smux_event (<span class="keyword">enum</span> smux_event, <span class="keywordtype">int</span>);
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">/* SMUX socket. */</span>
<a name="l00051"></a>00051 <span class="keywordtype">int</span> smux_sock = -1;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* SMUX subtree list. */</span>
<a name="l00054"></a>00054 <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *treelist;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* SMUX oid. */</span>
<a name="l00057"></a>00057 oid *smux_oid = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00058"></a>00058 <span class="keywordtype">size_t</span> smux_oid_len;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/* SMUX password. */</span>
<a name="l00061"></a>00061 <span class="keywordtype">char</span> *smux_passwd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">/* SMUX read threads. */</span>
<a name="l00064"></a>00064 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *smux_read_thread;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">/* SMUX connect thrads. */</span>
<a name="l00067"></a>00067 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *smux_connect_thread;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">/* SMUX debug flag. */</span>
<a name="l00070"></a>00070 <span class="keywordtype">int</span> debug_smux = 0;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">/* SMUX failure count. */</span>
<a name="l00073"></a>00073 <span class="keywordtype">int</span> fail = 0;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">/* SMUX node. */</span>
<a name="l00076"></a>00076 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcmd__node.html">cmd_node</a> smux_node =
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078   <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a84dbeff0c5c8869abe00607334f2653d">SMUX_NODE</a>,
<a name="l00079"></a>00079   <span class="stringliteral">&quot;&quot;</span>                            <span class="comment">/* SMUX has no interface. */</span>
<a name="l00080"></a>00080 };
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">/* thread master */</span>
<a name="l00083"></a>00083 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="keywordtype">void</span> *
<a name="l00086"></a>00086 <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (<span class="keywordtype">void</span> *dest, <span class="keyword">const</span> <span class="keywordtype">void</span> *src, <span class="keywordtype">size_t</span> size)
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088   <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dest, src, size * <span class="keyword">sizeof</span> (oid));
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="keywordtype">void</span>
<a name="l00092"></a>00092 <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (oid oid[], <span class="keywordtype">int</span> len, <span class="keyword">struct</span> in_addr *addr)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00095"></a>00095   u_char *pnt;
<a name="l00096"></a>00096   
<a name="l00097"></a>00097   <span class="keywordflow">if</span> (len == 0)
<a name="l00098"></a>00098     <span class="keywordflow">return</span>;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   pnt = (u_char *) addr;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="keywordflow">for</span> (i = 0; i &lt; len; i++)
<a name="l00103"></a>00103     *pnt++ = oid[i];
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="keywordtype">void</span>
<a name="l00107"></a>00107 <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (oid oid[], <span class="keyword">struct</span> in_addr *addr, <span class="keywordtype">int</span> len)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00110"></a>00110   u_char *pnt;
<a name="l00111"></a>00111   
<a name="l00112"></a>00112   <span class="keywordflow">if</span> (len == 0)
<a name="l00113"></a>00113     <span class="keywordflow">return</span>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   pnt = (u_char *) addr;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">for</span> (i = 0; i &lt; len; i++)
<a name="l00118"></a>00118     oid[i] = *pnt++;
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="keywordtype">int</span>
<a name="l00122"></a>00122 <a class="code" href="smux_8h.html#a4800c2461a103b3b5b777f4fa5317154">oid_compare</a> (oid *o1, <span class="keywordtype">int</span> o1_len, oid *o2, <span class="keywordtype">int</span> o2_len)
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="bgp__aspath_8c.html#a2d017cd3beb218080a7988e2deed2a11">min</a> (o1_len, o2_len); i++)
<a name="l00127"></a>00127     {
<a name="l00128"></a>00128       <span class="keywordflow">if</span> (o1[i] &lt; o2[i])
<a name="l00129"></a>00129     <span class="keywordflow">return</span> -1;
<a name="l00130"></a>00130       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (o1[i] &gt; o2[i])
<a name="l00131"></a>00131     <span class="keywordflow">return</span> 1;
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133   <span class="keywordflow">if</span> (o1_len &lt; o2_len)
<a name="l00134"></a>00134     <span class="keywordflow">return</span> -1;
<a name="l00135"></a>00135   <span class="keywordflow">if</span> (o1_len &gt; o2_len)
<a name="l00136"></a>00136     <span class="keywordflow">return</span> 1;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="keywordflow">return</span> 0;
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00142"></a>00142 oid_compare_part (oid *o1, <span class="keywordtype">int</span> o1_len, oid *o2, <span class="keywordtype">int</span> o2_len)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="bgp__aspath_8c.html#a2d017cd3beb218080a7988e2deed2a11">min</a> (o1_len, o2_len); i++)
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148       <span class="keywordflow">if</span> (o1[i] &lt; o2[i])
<a name="l00149"></a>00149     <span class="keywordflow">return</span> -1;
<a name="l00150"></a>00150       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (o1[i] &gt; o2[i])
<a name="l00151"></a>00151     <span class="keywordflow">return</span> 1;
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (o1_len &lt; o2_len)
<a name="l00154"></a>00154     <span class="keywordflow">return</span> -1;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="keywordflow">return</span> 0;
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00160"></a>00160 smux_oid_dump (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">const</span> oid *oid, <span class="keywordtype">size_t</span> oid_len)
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00163"></a>00163   <span class="keywordtype">int</span> first = 1;
<a name="l00164"></a>00164   <span class="keywordtype">char</span> buf[MAX_OID_LEN * 3];
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   buf[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="keywordflow">for</span> (i = 0; i &lt; oid_len; i++)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       sprintf (buf + strlen (buf), <span class="stringliteral">&quot;%s%d&quot;</span>, first ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;.&quot;</span>, (<span class="keywordtype">int</span>) oid[i]);
<a name="l00171"></a>00171       first = 0;
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s&quot;</span>, prefix, buf);
<a name="l00174"></a>00174 }
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00177"></a>00177 smux_socket (<span class="keywordtype">void</span>)
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179   <span class="keywordtype">int</span> ret;
<a name="l00180"></a>00180 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span>  <span class="keyword">struct </span>addrinfo hints, *res0, *res;
<a name="l00182"></a>00182   <span class="keywordtype">int</span> gai;
<a name="l00183"></a>00183 <span class="preprocessor">#else</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>  <span class="keyword">struct </span>sockaddr_in serv;
<a name="l00185"></a>00185   <span class="keyword">struct </span>servent *sp;
<a name="l00186"></a>00186 <span class="preprocessor">#endif</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span>  <span class="keywordtype">int</span> sock = 0;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>  memset(&amp;hints, 0, <span class="keyword">sizeof</span>(hints));
<a name="l00191"></a>00191   hints.ai_family = PF_UNSPEC;
<a name="l00192"></a>00192   hints.ai_socktype = SOCK_STREAM;
<a name="l00193"></a>00193   gai = getaddrinfo(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="stringliteral">&quot;smux&quot;</span>, &amp;hints, &amp;res0);
<a name="l00194"></a>00194   <span class="keywordflow">if</span> (gai == EAI_SERVICE)
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196       <span class="keywordtype">char</span> servbuf[NI_MAXSERV];
<a name="l00197"></a>00197       sprintf(servbuf,<span class="stringliteral">&quot;%d&quot;</span>,<a class="code" href="smux_8h.html#aec5d1e05d6436a42862090e96b9a3b6c">SMUX_PORT_DEFAULT</a>);
<a name="l00198"></a>00198       servbuf[<span class="keyword">sizeof</span> (servbuf) - 1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00199"></a>00199       gai = getaddrinfo(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, servbuf, &amp;hints, &amp;res0);
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201   <span class="keywordflow">if</span> (gai)
<a name="l00202"></a>00202     {
<a name="l00203"></a>00203       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;Cannot locate loopback service smux&quot;</span>);
<a name="l00204"></a>00204       <span class="keywordflow">return</span> -1;
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206   <span class="keywordflow">for</span>(res=res0; res; res=res-&gt;ai_next)
<a name="l00207"></a>00207     {
<a name="l00208"></a>00208       <span class="keywordflow">if</span> (res-&gt;ai_family != AF_INET 
<a name="l00209"></a>00209 #ifdef HAVE_IPV6
<a name="l00210"></a>00210       &amp;&amp; res-&gt;ai_family != AF_INET6
<a name="l00211"></a>00211 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l00212"></a>00212       )
<a name="l00213"></a>00213     <span class="keywordflow">continue</span>;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215       sock = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);
<a name="l00216"></a>00216       <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00217"></a>00217     <span class="keywordflow">continue</span>;
<a name="l00218"></a>00218       <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (sock);
<a name="l00219"></a>00219       <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (sock);
<a name="l00220"></a>00220       ret = connect (sock, res-&gt;ai_addr, res-&gt;ai_addrlen);
<a name="l00221"></a>00221       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00222"></a>00222     {
<a name="l00223"></a>00223       close(sock);
<a name="l00224"></a>00224       sock = -1;
<a name="l00225"></a>00225       <span class="keywordflow">continue</span>;
<a name="l00226"></a>00226     }
<a name="l00227"></a>00227       <span class="keywordflow">break</span>;
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229   freeaddrinfo(res0);
<a name="l00230"></a>00230   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00231"></a>00231     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t connect to SNMP agent with SMUX&quot;</span>);
<a name="l00232"></a>00232 <span class="preprocessor">#else</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>  sock = socket (AF_INET, SOCK_STREAM, 0);
<a name="l00234"></a>00234   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00235"></a>00235     {
<a name="l00236"></a>00236       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t make socket for SNMP&quot;</span>);
<a name="l00237"></a>00237       <span class="keywordflow">return</span> -1;
<a name="l00238"></a>00238     }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   memset (&amp;serv, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00241"></a>00241   serv.sin_family = AF_INET;
<a name="l00242"></a>00242 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00243"></a>00243 <span class="preprocessor"></span>  serv.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00244"></a>00244 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   sp = getservbyname (<span class="stringliteral">&quot;smux&quot;</span>, <span class="stringliteral">&quot;tcp&quot;</span>);
<a name="l00247"></a>00247   <span class="keywordflow">if</span> (sp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00248"></a>00248     serv.sin_port = sp-&gt;s_port;
<a name="l00249"></a>00249   <span class="keywordflow">else</span>
<a name="l00250"></a>00250     serv.sin_port = htons (<a class="code" href="smux_8h.html#aec5d1e05d6436a42862090e96b9a3b6c">SMUX_PORT_DEFAULT</a>);
<a name="l00251"></a>00251 
<a name="l00252"></a>00252   serv.sin_addr.s_addr = htonl (<a class="code" href="zebra_8h.html#ae1ac25d7797666cff6d01d6c795c2378">INADDR_LOOPBACK</a>);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254   <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (sock);
<a name="l00255"></a>00255   <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (sock);
<a name="l00256"></a>00256 
<a name="l00257"></a>00257   ret = connect (sock, (<span class="keyword">struct</span> sockaddr *) &amp;serv, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00258"></a>00258   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00259"></a>00259     {
<a name="l00260"></a>00260       close (sock);
<a name="l00261"></a>00261       smux_sock = -1;
<a name="l00262"></a>00262       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t connect to SNMP agent with SMUX&quot;</span>);
<a name="l00263"></a>00263       <span class="keywordflow">return</span> -1;
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265 <span class="preprocessor">#endif</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>  <span class="keywordflow">return</span> sock;
<a name="l00267"></a>00267 }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00270"></a>00270 smux_getresp_send (oid objid[], <span class="keywordtype">size_t</span> objid_len, <span class="keywordtype">long</span> reqid, <span class="keywordtype">long</span> errstat,
<a name="l00271"></a>00271            <span class="keywordtype">long</span> errindex, u_char val_type, <span class="keywordtype">void</span> *arg, <span class="keywordtype">size_t</span> arg_len)
<a name="l00272"></a>00272 {
<a name="l00273"></a>00273   <span class="keywordtype">int</span> ret;
<a name="l00274"></a>00274   u_char buf[BUFSIZ];
<a name="l00275"></a>00275   u_char *ptr, *h1, *h1e, *h2, *h2e;
<a name="l00276"></a>00276   <span class="keywordtype">size_t</span> len, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   ptr = buf;
<a name="l00279"></a>00279   len = BUFSIZ;
<a name="l00280"></a>00280   length = len;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282   <span class="keywordflow">if</span> (debug_smux)
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GETRSP send&quot;</span>);
<a name="l00285"></a>00285       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GETRSP reqid: %ld&quot;</span>, reqid);
<a name="l00286"></a>00286     }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   h1 = ptr;
<a name="l00289"></a>00289   <span class="comment">/* Place holder h1 for complete sequence */</span>
<a name="l00290"></a>00290   ptr = asn_build_sequence (ptr, &amp;len, (u_char) <a class="code" href="smux_8h.html#ac76127c2e19d5a74acc1cca651099770">SMUX_GETRSP</a>, 0);
<a name="l00291"></a>00291   h1e = ptr;
<a name="l00292"></a>00292  
<a name="l00293"></a>00293   ptr = asn_build_int (ptr, &amp;len,
<a name="l00294"></a>00294                (u_char) (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l00295"></a>00295                &amp;reqid, <span class="keyword">sizeof</span> (reqid));
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   <span class="keywordflow">if</span> (debug_smux)
<a name="l00298"></a>00298     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GETRSP errstat: %ld&quot;</span>, errstat);
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   ptr = asn_build_int (ptr, &amp;len,
<a name="l00301"></a>00301                (u_char) (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l00302"></a>00302                &amp;errstat, <span class="keyword">sizeof</span> (errstat));
<a name="l00303"></a>00303   <span class="keywordflow">if</span> (debug_smux)
<a name="l00304"></a>00304     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GETRSP errindex: %ld&quot;</span>, errindex);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   ptr = asn_build_int (ptr, &amp;len,
<a name="l00307"></a>00307                (u_char) (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l00308"></a>00308                &amp;errindex, <span class="keyword">sizeof</span> (errindex));
<a name="l00309"></a>00309 
<a name="l00310"></a>00310   h2 = ptr;
<a name="l00311"></a>00311   <span class="comment">/* Place holder h2 for one variable */</span>
<a name="l00312"></a>00312   ptr = asn_build_sequence (ptr, &amp;len, 
<a name="l00313"></a>00313                (u_char)(ASN_SEQUENCE | ASN_CONSTRUCTOR),
<a name="l00314"></a>00314                0);
<a name="l00315"></a>00315   h2e = ptr;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317   ptr = snmp_build_var_op (ptr, objid, &amp;objid_len, 
<a name="l00318"></a>00318                val_type, arg_len, arg, &amp;len);
<a name="l00319"></a>00319 
<a name="l00320"></a>00320   <span class="comment">/* Now variable size is known, fill in size */</span>
<a name="l00321"></a>00321   asn_build_sequence(h2,&amp;length,(u_char)(ASN_SEQUENCE|ASN_CONSTRUCTOR),ptr-h2e);
<a name="l00322"></a>00322 
<a name="l00323"></a>00323   <span class="comment">/* Fill in size of whole sequence */</span>
<a name="l00324"></a>00324   asn_build_sequence(h1,&amp;length,(u_char)<a class="code" href="smux_8h.html#ac76127c2e19d5a74acc1cca651099770">SMUX_GETRSP</a>,ptr-h1e);
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   <span class="keywordflow">if</span> (debug_smux)
<a name="l00327"></a>00327     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX getresp send: %td&quot;</span>, (ptr - buf));
<a name="l00328"></a>00328   
<a name="l00329"></a>00329   ret = send (smux_sock, buf, (ptr - buf), 0);
<a name="l00330"></a>00330 }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 <span class="keyword">static</span> u_char *
<a name="l00333"></a>00333 smux_var (u_char *ptr, <span class="keywordtype">size_t</span> len, oid objid[], <span class="keywordtype">size_t</span> *objid_len,
<a name="l00334"></a>00334           <span class="keywordtype">size_t</span> *var_val_len,
<a name="l00335"></a>00335           u_char *var_val_type,
<a name="l00336"></a>00336           <span class="keywordtype">void</span> **var_value)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00339"></a>00339   u_char val_type;
<a name="l00340"></a>00340   <span class="keywordtype">size_t</span> val_len;
<a name="l00341"></a>00341   u_char *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="keywordflow">if</span> (debug_smux)
<a name="l00344"></a>00344     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX var parse: len %zd&quot;</span>, len);
<a name="l00345"></a>00345 
<a name="l00346"></a>00346   <span class="comment">/* Parse header. */</span>
<a name="l00347"></a>00347   ptr = asn_parse_header (ptr, &amp;len, &amp;type);
<a name="l00348"></a>00348   
<a name="l00349"></a>00349   <span class="keywordflow">if</span> (debug_smux)
<a name="l00350"></a>00350     {
<a name="l00351"></a>00351       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX var parse: type %d len %zd&quot;</span>, type, len);
<a name="l00352"></a>00352       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX var parse: type must be %d&quot;</span>, 
<a name="l00353"></a>00353          (ASN_SEQUENCE | ASN_CONSTRUCTOR));
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <span class="comment">/* Parse var option. */</span>
<a name="l00357"></a>00357   *objid_len = MAX_OID_LEN;
<a name="l00358"></a>00358   ptr = snmp_parse_var_op(ptr, objid, objid_len, &amp;val_type, 
<a name="l00359"></a>00359               &amp;val_len, &amp;val, &amp;len);
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   <span class="keywordflow">if</span> (var_val_len)
<a name="l00362"></a>00362     *var_val_len = val_len;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364   <span class="keywordflow">if</span> (var_value)
<a name="l00365"></a>00365     *var_value = (<span class="keywordtype">void</span>*) val;
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   <span class="keywordflow">if</span> (var_val_type)
<a name="l00368"></a>00368     *var_val_type = val_type;
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="comment">/* Requested object id length is objid_len. */</span>
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (debug_smux)
<a name="l00372"></a>00372     smux_oid_dump (<span class="stringliteral">&quot;Request OID&quot;</span>, objid, *objid_len);
<a name="l00373"></a>00373 
<a name="l00374"></a>00374   <span class="keywordflow">if</span> (debug_smux)
<a name="l00375"></a>00375     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX val_type: %d&quot;</span>, val_type);
<a name="l00376"></a>00376 
<a name="l00377"></a>00377   <span class="comment">/* Check request value type. */</span>
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (debug_smux)
<a name="l00379"></a>00379   <span class="keywordflow">switch</span> (val_type)
<a name="l00380"></a>00380     {
<a name="l00381"></a>00381     <span class="keywordflow">case</span> ASN_NULL:
<a name="l00382"></a>00382       <span class="comment">/* In case of SMUX_GET or SMUX_GET_NEXT val_type is set to</span>
<a name="l00383"></a>00383 <span class="comment">         ASN_NULL. */</span>
<a name="l00384"></a>00384       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_NULL&quot;</span>);
<a name="l00385"></a>00385       <span class="keywordflow">break</span>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     <span class="keywordflow">case</span> ASN_INTEGER:
<a name="l00388"></a>00388       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_INTEGER&quot;</span>);
<a name="l00389"></a>00389       <span class="keywordflow">break</span>;
<a name="l00390"></a>00390     <span class="keywordflow">case</span> ASN_COUNTER:
<a name="l00391"></a>00391     <span class="keywordflow">case</span> ASN_GAUGE:
<a name="l00392"></a>00392     <span class="keywordflow">case</span> ASN_TIMETICKS:
<a name="l00393"></a>00393     <span class="keywordflow">case</span> ASN_UINTEGER:
<a name="l00394"></a>00394       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_COUNTER&quot;</span>);
<a name="l00395"></a>00395       <span class="keywordflow">break</span>;
<a name="l00396"></a>00396     <span class="keywordflow">case</span> ASN_COUNTER64:
<a name="l00397"></a>00397       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_COUNTER64&quot;</span>);
<a name="l00398"></a>00398       <span class="keywordflow">break</span>;
<a name="l00399"></a>00399     <span class="keywordflow">case</span> ASN_IPADDRESS:
<a name="l00400"></a>00400       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_IPADDRESS&quot;</span>);
<a name="l00401"></a>00401       <span class="keywordflow">break</span>;
<a name="l00402"></a>00402     <span class="keywordflow">case</span> ASN_OCTET_STR:
<a name="l00403"></a>00403       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_OCTET_STR&quot;</span>);
<a name="l00404"></a>00404       <span class="keywordflow">break</span>;
<a name="l00405"></a>00405     <span class="keywordflow">case</span> ASN_OPAQUE:
<a name="l00406"></a>00406     <span class="keywordflow">case</span> ASN_NSAP:
<a name="l00407"></a>00407     <span class="keywordflow">case</span> ASN_OBJECT_ID:
<a name="l00408"></a>00408       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_OPAQUE&quot;</span>);
<a name="l00409"></a>00409       <span class="keywordflow">break</span>;
<a name="l00410"></a>00410     <span class="keywordflow">case</span> SNMP_NOSUCHOBJECT:
<a name="l00411"></a>00411       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SNMP_NOSUCHOBJECT&quot;</span>);
<a name="l00412"></a>00412       <span class="keywordflow">break</span>;
<a name="l00413"></a>00413     <span class="keywordflow">case</span> SNMP_NOSUCHINSTANCE:
<a name="l00414"></a>00414       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SNMP_NOSUCHINSTANCE&quot;</span>);
<a name="l00415"></a>00415       <span class="keywordflow">break</span>;
<a name="l00416"></a>00416     <span class="keywordflow">case</span> SNMP_ENDOFMIBVIEW:
<a name="l00417"></a>00417       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SNMP_ENDOFMIBVIEW&quot;</span>);
<a name="l00418"></a>00418       <span class="keywordflow">break</span>;
<a name="l00419"></a>00419     <span class="keywordflow">case</span> ASN_BIT_STR:
<a name="l00420"></a>00420       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ASN_BIT_STR&quot;</span>);
<a name="l00421"></a>00421       <span class="keywordflow">break</span>;
<a name="l00422"></a>00422     <span class="keywordflow">default</span>:
<a name="l00423"></a>00423       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Unknown type&quot;</span>);
<a name="l00424"></a>00424       <span class="keywordflow">break</span>;
<a name="l00425"></a>00425     }
<a name="l00426"></a>00426   <span class="keywordflow">return</span> ptr;
<a name="l00427"></a>00427 }
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 <span class="comment">/* NOTE: all 3 functions (smux_set, smux_get &amp; smux_getnext) are based on</span>
<a name="l00430"></a>00430 <span class="comment">   ucd-snmp smux and as such suppose, that the peer receives in the message</span>
<a name="l00431"></a>00431 <span class="comment">   only one variable. Fortunately, IBM seems to do the same in AIX. */</span>
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00434"></a>00434 smux_set (oid *reqid, <span class="keywordtype">size_t</span> *reqid_len,
<a name="l00435"></a>00435           u_char val_type, <span class="keywordtype">void</span> *val, <span class="keywordtype">size_t</span> val_len, <span class="keywordtype">int</span> action)
<a name="l00436"></a>00436 {
<a name="l00437"></a>00437   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00438"></a>00438   <span class="keyword">struct </span><a class="code" href="structsubtree.html">subtree</a> *<a class="code" href="structsubtree.html">subtree</a>;
<a name="l00439"></a>00439   <span class="keyword">struct </span><a class="code" href="structvariable.html">variable</a> *v;
<a name="l00440"></a>00440   <span class="keywordtype">int</span> subresult;
<a name="l00441"></a>00441   oid *suffix;
<a name="l00442"></a>00442   <span class="keywordtype">size_t</span> suffix_len;
<a name="l00443"></a>00443   <span class="keywordtype">int</span> result;
<a name="l00444"></a>00444   u_char *statP = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00445"></a>00445   <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> *write_method = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00446"></a>00446   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   <span class="comment">/* Check */</span>
<a name="l00449"></a>00449   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (treelist, node, nnode, subtree))
<a name="l00450"></a>00450     {
<a name="l00451"></a>00451       subresult = oid_compare_part (reqid, *reqid_len,
<a name="l00452"></a>00452                                     subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l00453"></a>00453 
<a name="l00454"></a>00454       <span class="comment">/* Subtree matched. */</span>
<a name="l00455"></a>00455       <span class="keywordflow">if</span> (subresult == 0)
<a name="l00456"></a>00456         {
<a name="l00457"></a>00457           <span class="comment">/* Prepare suffix. */</span>
<a name="l00458"></a>00458           suffix = reqid + subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00459"></a>00459           suffix_len = *reqid_len - subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00460"></a>00460           result = subresult;
<a name="l00461"></a>00461 
<a name="l00462"></a>00462           <span class="comment">/* Check variables. */</span>
<a name="l00463"></a>00463           <span class="keywordflow">for</span> (j = 0; j &lt; subtree-&gt;<a class="code" href="structsubtree.html#a6e0325f8040b61d79985546cf3e06d8d">variables_num</a>; j++)
<a name="l00464"></a>00464             {
<a name="l00465"></a>00465               v = &amp;subtree-&gt;<a class="code" href="structsubtree.html#a1e898c550cd66724d73232cc711a1acd">variables</a>[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>];
<a name="l00466"></a>00466 
<a name="l00467"></a>00467               <span class="comment">/* Always check suffix */</span>
<a name="l00468"></a>00468               result = oid_compare_part (suffix, suffix_len,
<a name="l00469"></a>00469                                          v-&gt;<a class="code" href="structvariable.html#a70620f86886694dc8b76914cc7356b0c">name</a>, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>);
<a name="l00470"></a>00470 
<a name="l00471"></a>00471               <span class="comment">/* This is exact match so result must be zero. */</span>
<a name="l00472"></a>00472               <span class="keywordflow">if</span> (result == 0)
<a name="l00473"></a>00473                 {
<a name="l00474"></a>00474                   <span class="keywordflow">if</span> (debug_smux)
<a name="l00475"></a>00475                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX function call index is %d&quot;</span>, v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>);
<a name="l00476"></a>00476           
<a name="l00477"></a>00477                   statP = (*v-&gt;<a class="code" href="structvariable.html#a07015108b94dcb492041abddf5ad1a96">findVar</a>) (v, suffix, &amp;suffix_len, 1,
<a name="l00478"></a>00478                      &amp;val_len, &amp;write_method);
<a name="l00479"></a>00479 
<a name="l00480"></a>00480                   <span class="keywordflow">if</span> (write_method)
<a name="l00481"></a>00481                     {
<a name="l00482"></a>00482                       <span class="keywordflow">return</span> (*write_method)(action, <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>, val_type, val_len,
<a name="l00483"></a>00483                          statP, suffix, suffix_len, v);
<a name="l00484"></a>00484                     }
<a name="l00485"></a>00485                   <span class="keywordflow">else</span>
<a name="l00486"></a>00486                     {
<a name="l00487"></a>00487                       <span class="keywordflow">return</span> SNMP_ERR_READONLY;
<a name="l00488"></a>00488                     }
<a name="l00489"></a>00489                 }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491               <span class="comment">/* If above execution is failed or oid is small (so</span>
<a name="l00492"></a>00492 <span class="comment">                 there is no further match). */</span>
<a name="l00493"></a>00493               <span class="keywordflow">if</span> (result &lt; 0)
<a name="l00494"></a>00494                 <span class="keywordflow">return</span> SNMP_ERR_NOSUCHNAME;
<a name="l00495"></a>00495             }
<a name="l00496"></a>00496         }
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498   <span class="keywordflow">return</span> SNMP_ERR_NOSUCHNAME;
<a name="l00499"></a>00499 }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00502"></a>00502 smux_get (oid *reqid, <span class="keywordtype">size_t</span> *reqid_len, <span class="keywordtype">int</span> exact, 
<a name="l00503"></a>00503       u_char *val_type,<span class="keywordtype">void</span> **val, <span class="keywordtype">size_t</span> *val_len)
<a name="l00504"></a>00504 {
<a name="l00505"></a>00505   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00506"></a>00506   <span class="keyword">struct </span>subtree *subtree;
<a name="l00507"></a>00507   <span class="keyword">struct </span><a class="code" href="structvariable.html">variable</a> *v;
<a name="l00508"></a>00508   <span class="keywordtype">int</span> subresult;
<a name="l00509"></a>00509   oid *suffix;
<a name="l00510"></a>00510   <span class="keywordtype">size_t</span> suffix_len;
<a name="l00511"></a>00511   <span class="keywordtype">int</span> result;
<a name="l00512"></a>00512   <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> *write_method=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00513"></a>00513   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00514"></a>00514 
<a name="l00515"></a>00515   <span class="comment">/* Check */</span>
<a name="l00516"></a>00516   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (treelist, node, nnode,subtree))
<a name="l00517"></a>00517     {
<a name="l00518"></a>00518       subresult = oid_compare_part (reqid, *reqid_len, 
<a name="l00519"></a>00519                     subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l00520"></a>00520 
<a name="l00521"></a>00521       <span class="comment">/* Subtree matched. */</span>
<a name="l00522"></a>00522       <span class="keywordflow">if</span> (subresult == 0)
<a name="l00523"></a>00523     {
<a name="l00524"></a>00524       <span class="comment">/* Prepare suffix. */</span>
<a name="l00525"></a>00525       suffix = reqid + subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00526"></a>00526       suffix_len = *reqid_len - subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00527"></a>00527       result = subresult;
<a name="l00528"></a>00528 
<a name="l00529"></a>00529       <span class="comment">/* Check variables. */</span>
<a name="l00530"></a>00530       <span class="keywordflow">for</span> (j = 0; j &lt; subtree-&gt;<a class="code" href="structsubtree.html#a6e0325f8040b61d79985546cf3e06d8d">variables_num</a>; j++)
<a name="l00531"></a>00531         {
<a name="l00532"></a>00532           v = &amp;subtree-&gt;<a class="code" href="structsubtree.html#a1e898c550cd66724d73232cc711a1acd">variables</a>[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>];
<a name="l00533"></a>00533 
<a name="l00534"></a>00534           <span class="comment">/* Always check suffix */</span>
<a name="l00535"></a>00535           result = oid_compare_part (suffix, suffix_len,
<a name="l00536"></a>00536                      v-&gt;<a class="code" href="structvariable.html#a70620f86886694dc8b76914cc7356b0c">name</a>, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>);
<a name="l00537"></a>00537 
<a name="l00538"></a>00538           <span class="comment">/* This is exact match so result must be zero. */</span>
<a name="l00539"></a>00539           <span class="keywordflow">if</span> (result == 0)
<a name="l00540"></a>00540         {
<a name="l00541"></a>00541           <span class="keywordflow">if</span> (debug_smux)
<a name="l00542"></a>00542             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX function call index is %d&quot;</span>, v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>);
<a name="l00543"></a>00543 
<a name="l00544"></a>00544           *val = (*v-&gt;<a class="code" href="structvariable.html#a07015108b94dcb492041abddf5ad1a96">findVar</a>) (v, suffix, &amp;suffix_len, exact,
<a name="l00545"></a>00545                     val_len, &amp;write_method);
<a name="l00546"></a>00546 
<a name="l00547"></a>00547           <span class="comment">/* There is no instance. */</span>
<a name="l00548"></a>00548           <span class="keywordflow">if</span> (*val == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00549"></a>00549             <span class="keywordflow">return</span> SNMP_NOSUCHINSTANCE;
<a name="l00550"></a>00550 
<a name="l00551"></a>00551           <span class="comment">/* Call is suceed. */</span>
<a name="l00552"></a>00552           *val_type = v-&gt;<a class="code" href="structvariable.html#a15c7fb1149c6f79a658d147b59c7e0f1">type</a>;
<a name="l00553"></a>00553 
<a name="l00554"></a>00554           <span class="keywordflow">return</span> 0;
<a name="l00555"></a>00555         }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557           <span class="comment">/* If above execution is failed or oid is small (so</span>
<a name="l00558"></a>00558 <span class="comment">                 there is no further match). */</span>
<a name="l00559"></a>00559           <span class="keywordflow">if</span> (result &lt; 0)
<a name="l00560"></a>00560         <span class="keywordflow">return</span> SNMP_ERR_NOSUCHNAME;
<a name="l00561"></a>00561         }
<a name="l00562"></a>00562     }
<a name="l00563"></a>00563     }
<a name="l00564"></a>00564   <span class="keywordflow">return</span> SNMP_ERR_NOSUCHNAME;
<a name="l00565"></a>00565 }
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00568"></a>00568 smux_getnext (oid *reqid, <span class="keywordtype">size_t</span> *reqid_len, <span class="keywordtype">int</span> exact, 
<a name="l00569"></a>00569           u_char *val_type,<span class="keywordtype">void</span> **val, <span class="keywordtype">size_t</span> *val_len)
<a name="l00570"></a>00570 {
<a name="l00571"></a>00571   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00572"></a>00572   oid save[MAX_OID_LEN];
<a name="l00573"></a>00573   <span class="keywordtype">int</span> savelen = 0;
<a name="l00574"></a>00574   <span class="keyword">struct </span>subtree *subtree;
<a name="l00575"></a>00575   <span class="keyword">struct </span><a class="code" href="structvariable.html">variable</a> *v;
<a name="l00576"></a>00576   <span class="keywordtype">int</span> subresult;
<a name="l00577"></a>00577   oid *suffix;
<a name="l00578"></a>00578   <span class="keywordtype">size_t</span> suffix_len;
<a name="l00579"></a>00579   <span class="keywordtype">int</span> result;
<a name="l00580"></a>00580   <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> *write_method=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00581"></a>00581   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 
<a name="l00584"></a>00584   <span class="comment">/* Save incoming request. */</span>
<a name="l00585"></a>00585   <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (save, reqid, *reqid_len);
<a name="l00586"></a>00586   savelen = *reqid_len;
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="comment">/* Check */</span>
<a name="l00589"></a>00589   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (treelist, node, nnode, subtree))
<a name="l00590"></a>00590     {
<a name="l00591"></a>00591       subresult = oid_compare_part (reqid, *reqid_len, 
<a name="l00592"></a>00592                     subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l00593"></a>00593 
<a name="l00594"></a>00594       <span class="comment">/* If request is in the tree. The agent has to make sure we</span>
<a name="l00595"></a>00595 <span class="comment">         only receive requests we have registered for. */</span>
<a name="l00596"></a>00596       <span class="comment">/* Unfortunately, that&#39;s not true. In fact, a SMUX subagent has to</span>
<a name="l00597"></a>00597 <span class="comment">         behave as if it manages the whole SNMP MIB tree itself. It&#39;s the</span>
<a name="l00598"></a>00598 <span class="comment">         duty of the master agent to collect the best answer and return it</span>
<a name="l00599"></a>00599 <span class="comment">         to the manager. See RFC 1227 chapter 3.1.6 for the glory details</span>
<a name="l00600"></a>00600 <span class="comment">         :-). ucd-snmp really behaves bad here as it actually might ask</span>
<a name="l00601"></a>00601 <span class="comment">         multiple times for the same GETNEXT request as it throws away the</span>
<a name="l00602"></a>00602 <span class="comment">         answer when it expects it in a different subtree and might come</span>
<a name="l00603"></a>00603 <span class="comment">         back later with the very same request. --jochen */</span>
<a name="l00604"></a>00604 
<a name="l00605"></a>00605       <span class="keywordflow">if</span> (subresult &lt;= 0)
<a name="l00606"></a>00606     {
<a name="l00607"></a>00607       <span class="comment">/* Prepare suffix. */</span>
<a name="l00608"></a>00608       suffix = reqid + subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00609"></a>00609       suffix_len = *reqid_len - subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00610"></a>00610       <span class="keywordflow">if</span> (subresult &lt; 0)
<a name="l00611"></a>00611         {
<a name="l00612"></a>00612           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a>(reqid, subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l00613"></a>00613           *reqid_len = subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00614"></a>00614         }
<a name="l00615"></a>00615       <span class="keywordflow">for</span> (j = 0; j &lt; subtree-&gt;<a class="code" href="structsubtree.html#a6e0325f8040b61d79985546cf3e06d8d">variables_num</a>; j++)
<a name="l00616"></a>00616         {
<a name="l00617"></a>00617           result = subresult;
<a name="l00618"></a>00618           v = &amp;subtree-&gt;<a class="code" href="structsubtree.html#a1e898c550cd66724d73232cc711a1acd">variables</a>[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>];
<a name="l00619"></a>00619 
<a name="l00620"></a>00620           <span class="comment">/* Next then check result &gt;= 0. */</span>
<a name="l00621"></a>00621           <span class="keywordflow">if</span> (result == 0)
<a name="l00622"></a>00622         result = oid_compare_part (suffix, suffix_len,
<a name="l00623"></a>00623                        v-&gt;<a class="code" href="structvariable.html#a70620f86886694dc8b76914cc7356b0c">name</a>, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>);
<a name="l00624"></a>00624 
<a name="l00625"></a>00625           <span class="keywordflow">if</span> (result &lt;= 0)
<a name="l00626"></a>00626         {
<a name="l00627"></a>00627           <span class="keywordflow">if</span> (debug_smux)
<a name="l00628"></a>00628             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX function call index is %d&quot;</span>, v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>);
<a name="l00629"></a>00629           <span class="keywordflow">if</span>(result&lt;0)
<a name="l00630"></a>00630             {
<a name="l00631"></a>00631               <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a>(suffix, v-&gt;<a class="code" href="structvariable.html#a70620f86886694dc8b76914cc7356b0c">name</a>, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>);
<a name="l00632"></a>00632               suffix_len = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00633"></a>00633             }
<a name="l00634"></a>00634           *val = (*v-&gt;<a class="code" href="structvariable.html#a07015108b94dcb492041abddf5ad1a96">findVar</a>) (v, suffix, &amp;suffix_len, exact,
<a name="l00635"></a>00635                     val_len, &amp;write_method);
<a name="l00636"></a>00636           *reqid_len = suffix_len + subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>;
<a name="l00637"></a>00637           <span class="keywordflow">if</span> (*val)
<a name="l00638"></a>00638             {
<a name="l00639"></a>00639               *val_type = v-&gt;<a class="code" href="structvariable.html#a15c7fb1149c6f79a658d147b59c7e0f1">type</a>;
<a name="l00640"></a>00640               <span class="keywordflow">return</span> 0;
<a name="l00641"></a>00641             }
<a name="l00642"></a>00642         }
<a name="l00643"></a>00643         }
<a name="l00644"></a>00644     }
<a name="l00645"></a>00645     }
<a name="l00646"></a>00646   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (reqid, save, savelen * <span class="keyword">sizeof</span>(oid));
<a name="l00647"></a>00647   *reqid_len = savelen;
<a name="l00648"></a>00648 
<a name="l00649"></a>00649   <span class="keywordflow">return</span> SNMP_ERR_NOSUCHNAME;
<a name="l00650"></a>00650 }
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 <span class="comment">/* GET message header. */</span>
<a name="l00653"></a>00653 <span class="keyword">static</span> u_char *
<a name="l00654"></a>00654 smux_parse_get_header (u_char *ptr, <span class="keywordtype">size_t</span> *len, <span class="keywordtype">long</span> *reqid)
<a name="l00655"></a>00655 {
<a name="l00656"></a>00656   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00657"></a>00657   <span class="keywordtype">long</span> errstat;
<a name="l00658"></a>00658   <span class="keywordtype">long</span> errindex;
<a name="l00659"></a>00659 
<a name="l00660"></a>00660   <span class="comment">/* Request ID. */</span>
<a name="l00661"></a>00661   ptr = asn_parse_int (ptr, len, &amp;type, reqid, <span class="keyword">sizeof</span> (*reqid));
<a name="l00662"></a>00662 
<a name="l00663"></a>00663   <span class="keywordflow">if</span> (debug_smux)
<a name="l00664"></a>00664     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GET reqid: %d len: %d&quot;</span>, (<span class="keywordtype">int</span>) *reqid, (<span class="keywordtype">int</span>) *len);
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   <span class="comment">/* Error status. */</span>
<a name="l00667"></a>00667   ptr = asn_parse_int (ptr, len, &amp;type, &amp;errstat, <span class="keyword">sizeof</span> (errstat));
<a name="l00668"></a>00668 
<a name="l00669"></a>00669   <span class="keywordflow">if</span> (debug_smux)
<a name="l00670"></a>00670     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GET errstat %ld len: %zd&quot;</span>, errstat, *len);
<a name="l00671"></a>00671 
<a name="l00672"></a>00672   <span class="comment">/* Error index. */</span>
<a name="l00673"></a>00673   ptr = asn_parse_int (ptr, len, &amp;type, &amp;errindex, <span class="keyword">sizeof</span> (errindex));
<a name="l00674"></a>00674 
<a name="l00675"></a>00675   <span class="keywordflow">if</span> (debug_smux)
<a name="l00676"></a>00676     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GET errindex %ld len: %zd&quot;</span>, errindex, *len);
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   <span class="keywordflow">return</span> ptr;
<a name="l00679"></a>00679 }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00682"></a>00682 smux_parse_set (u_char *ptr, <span class="keywordtype">size_t</span> len, <span class="keywordtype">int</span> action)
<a name="l00683"></a>00683 {
<a name="l00684"></a>00684   <span class="keywordtype">long</span> reqid;
<a name="l00685"></a>00685   oid oid[MAX_OID_LEN];
<a name="l00686"></a>00686   <span class="keywordtype">size_t</span> oid_len;
<a name="l00687"></a>00687   u_char val_type;
<a name="l00688"></a>00688   <span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00689"></a>00689   <span class="keywordtype">size_t</span> val_len;
<a name="l00690"></a>00690   <span class="keywordtype">int</span> ret;
<a name="l00691"></a>00691 
<a name="l00692"></a>00692   <span class="keywordflow">if</span> (debug_smux)
<a name="l00693"></a>00693     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX SET(%s) message parse: len %zd&quot;</span>,
<a name="l00694"></a>00694                (RESERVE1 == action) ? <span class="stringliteral">&quot;RESERVE1&quot;</span> : ((FREE == action) ? <span class="stringliteral">&quot;FREE&quot;</span> : <span class="stringliteral">&quot;COMMIT&quot;</span>),
<a name="l00695"></a>00695                len);
<a name="l00696"></a>00696 
<a name="l00697"></a>00697   <span class="comment">/* Parse SET message header. */</span>
<a name="l00698"></a>00698   ptr = smux_parse_get_header (ptr, &amp;len, &amp;reqid);
<a name="l00699"></a>00699 
<a name="l00700"></a>00700   <span class="comment">/* Parse SET message object ID. */</span>
<a name="l00701"></a>00701   ptr = smux_var (ptr, len, oid, &amp;oid_len, &amp;val_len, &amp;val_type, &amp;val);
<a name="l00702"></a>00702 
<a name="l00703"></a>00703   ret = smux_set (oid, &amp;oid_len, val_type, val, val_len, action);
<a name="l00704"></a>00704   <span class="keywordflow">if</span> (debug_smux)
<a name="l00705"></a>00705     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX SET ret %d&quot;</span>, ret);
<a name="l00706"></a>00706 
<a name="l00707"></a>00707   <span class="comment">/* Return result. */</span>
<a name="l00708"></a>00708   <span class="keywordflow">if</span> (RESERVE1 == action)
<a name="l00709"></a>00709     smux_getresp_send (oid, oid_len, reqid, ret, 3, ASN_NULL, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l00710"></a>00710 }
<a name="l00711"></a>00711 
<a name="l00712"></a>00712 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00713"></a>00713 smux_parse_get (u_char *ptr, <span class="keywordtype">size_t</span> len, <span class="keywordtype">int</span> exact)
<a name="l00714"></a>00714 {
<a name="l00715"></a>00715   <span class="keywordtype">long</span> reqid;
<a name="l00716"></a>00716   oid oid[MAX_OID_LEN];
<a name="l00717"></a>00717   <span class="keywordtype">size_t</span> oid_len;
<a name="l00718"></a>00718   u_char val_type;
<a name="l00719"></a>00719   <span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00720"></a>00720   <span class="keywordtype">size_t</span> val_len;
<a name="l00721"></a>00721   <span class="keywordtype">int</span> ret;
<a name="l00722"></a>00722 
<a name="l00723"></a>00723   <span class="keywordflow">if</span> (debug_smux)
<a name="l00724"></a>00724     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX GET message parse: len %zd&quot;</span>, len);
<a name="l00725"></a>00725   
<a name="l00726"></a>00726   <span class="comment">/* Parse GET message header. */</span>
<a name="l00727"></a>00727   ptr = smux_parse_get_header (ptr, &amp;len, &amp;reqid);
<a name="l00728"></a>00728   
<a name="l00729"></a>00729   <span class="comment">/* Parse GET message object ID. We needn&#39;t the value come */</span>
<a name="l00730"></a>00730   ptr = smux_var (ptr, len, oid, &amp;oid_len, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00731"></a>00731 
<a name="l00732"></a>00732   <span class="comment">/* Traditional getstatptr. */</span>
<a name="l00733"></a>00733   <span class="keywordflow">if</span> (exact)
<a name="l00734"></a>00734     ret = smux_get (oid, &amp;oid_len, exact, &amp;val_type, &amp;val, &amp;val_len);
<a name="l00735"></a>00735   <span class="keywordflow">else</span>
<a name="l00736"></a>00736     ret = smux_getnext (oid, &amp;oid_len, exact, &amp;val_type, &amp;val, &amp;val_len);
<a name="l00737"></a>00737 
<a name="l00738"></a>00738   <span class="comment">/* Return result. */</span>
<a name="l00739"></a>00739   <span class="keywordflow">if</span> (ret == 0)
<a name="l00740"></a>00740     smux_getresp_send (oid, oid_len, reqid, 0, 0, val_type, val, val_len);
<a name="l00741"></a>00741   <span class="keywordflow">else</span>
<a name="l00742"></a>00742     smux_getresp_send (oid, oid_len, reqid, ret, 3, ASN_NULL, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l00743"></a>00743 }
<a name="l00744"></a>00744 
<a name="l00745"></a>00745 <span class="comment">/* Parse SMUX_CLOSE message. */</span>
<a name="l00746"></a>00746 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00747"></a>00747 smux_parse_close (u_char *ptr, <span class="keywordtype">int</span> len)
<a name="l00748"></a>00748 {
<a name="l00749"></a>00749   <span class="keywordtype">long</span> reason = 0;
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="keywordflow">while</span> (len--)
<a name="l00752"></a>00752     {
<a name="l00753"></a>00753       reason = (reason &lt;&lt; 8) | (<span class="keywordtype">long</span>) *ptr;
<a name="l00754"></a>00754       ptr++;
<a name="l00755"></a>00755     }
<a name="l00756"></a>00756   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;SMUX_CLOSE with reason: %ld&quot;</span>, reason);
<a name="l00757"></a>00757 }
<a name="l00758"></a>00758 
<a name="l00759"></a>00759 <span class="comment">/* SMUX_RRSP message. */</span>
<a name="l00760"></a>00760 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00761"></a>00761 smux_parse_rrsp (u_char *ptr, <span class="keywordtype">size_t</span> len)
<a name="l00762"></a>00762 {
<a name="l00763"></a>00763   u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00764"></a>00764   <span class="keywordtype">long</span> errstat;
<a name="l00765"></a>00765   
<a name="l00766"></a>00766   ptr = asn_parse_int (ptr, &amp;len, &amp;val, &amp;errstat, <span class="keyword">sizeof</span> (errstat));
<a name="l00767"></a>00767 
<a name="l00768"></a>00768   <span class="keywordflow">if</span> (debug_smux)
<a name="l00769"></a>00769     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_RRSP value: %d errstat: %ld&quot;</span>, val, errstat);
<a name="l00770"></a>00770 }
<a name="l00771"></a>00771 
<a name="l00772"></a>00772 <span class="comment">/* Parse SMUX message. */</span>
<a name="l00773"></a>00773 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00774"></a>00774 smux_parse (u_char *ptr, <span class="keywordtype">size_t</span> len)
<a name="l00775"></a>00775 {
<a name="l00776"></a>00776   <span class="comment">/* This buffer we&#39;ll use for SOUT message. We could allocate it with</span>
<a name="l00777"></a>00777 <span class="comment">     malloc and save only static pointer/lenght, but IMHO static</span>
<a name="l00778"></a>00778 <span class="comment">     buffer is a faster solusion. */</span>
<a name="l00779"></a>00779   <span class="keyword">static</span> u_char sout_save_buff[<a class="code" href="smux_8h.html#a707d09e8fed039733a47dffa3d12005e">SMUXMAXPKTSIZE</a>];
<a name="l00780"></a>00780   <span class="keyword">static</span> <span class="keywordtype">int</span> sout_save_len = 0;
<a name="l00781"></a>00781 
<a name="l00782"></a>00782   <span class="keywordtype">int</span> len_income = len; <span class="comment">/* see note below: YYY */</span>
<a name="l00783"></a>00783   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00784"></a>00784   u_char rollback;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   rollback = ptr[2]; <span class="comment">/* important only for SMUX_SOUT */</span>
<a name="l00787"></a>00787 
<a name="l00788"></a>00788 process_rest: <span class="comment">/* see note below: YYY */</span>
<a name="l00789"></a>00789 
<a name="l00790"></a>00790   <span class="comment">/* Parse SMUX message type and subsequent length. */</span>
<a name="l00791"></a>00791   ptr = asn_parse_header (ptr, &amp;len, &amp;type);
<a name="l00792"></a>00792 
<a name="l00793"></a>00793   <span class="keywordflow">if</span> (debug_smux)
<a name="l00794"></a>00794     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX message received type: %d rest len: %zd&quot;</span>, type, len);
<a name="l00795"></a>00795 
<a name="l00796"></a>00796   <span class="keywordflow">switch</span> (type)
<a name="l00797"></a>00797     {
<a name="l00798"></a>00798     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#a607b65e9a3f2f48e94805032feeb38a3">SMUX_OPEN</a>:
<a name="l00799"></a>00799       <span class="comment">/* Open must be not send from SNMP agent. */</span>
<a name="l00800"></a>00800       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX_OPEN received: resetting connection.&quot;</span>);
<a name="l00801"></a>00801       <span class="keywordflow">return</span> -1;
<a name="l00802"></a>00802       <span class="keywordflow">break</span>;
<a name="l00803"></a>00803     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#a83f33d4f3f6efa0cbf00b047e4c47118">SMUX_RREQ</a>:
<a name="l00804"></a>00804       <span class="comment">/* SMUX_RREQ message is invalid for us. */</span>
<a name="l00805"></a>00805       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX_RREQ received: resetting connection.&quot;</span>);
<a name="l00806"></a>00806       <span class="keywordflow">return</span> -1;
<a name="l00807"></a>00807       <span class="keywordflow">break</span>;
<a name="l00808"></a>00808     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#ae665fc243be21089a912722f508db11e">SMUX_SOUT</a>:
<a name="l00809"></a>00809       <span class="comment">/* SMUX_SOUT message is now valied for us. */</span>
<a name="l00810"></a>00810       <span class="keywordflow">if</span> (debug_smux)
<a name="l00811"></a>00811         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_SOUT(%s)&quot;</span>, rollback ? <span class="stringliteral">&quot;rollback&quot;</span> : <span class="stringliteral">&quot;commit&quot;</span>);
<a name="l00812"></a>00812 
<a name="l00813"></a>00813       <span class="keywordflow">if</span> (sout_save_len &gt; 0)
<a name="l00814"></a>00814         {
<a name="l00815"></a>00815           smux_parse_set (sout_save_buff, sout_save_len, rollback ? FREE : COMMIT);
<a name="l00816"></a>00816           sout_save_len = 0;
<a name="l00817"></a>00817         }
<a name="l00818"></a>00818       <span class="keywordflow">else</span>
<a name="l00819"></a>00819         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX_SOUT sout_save_len=%d - invalid&quot;</span>, (<span class="keywordtype">int</span>) sout_save_len);
<a name="l00820"></a>00820 
<a name="l00821"></a>00821       <span class="keywordflow">if</span> (len_income &gt; 3) 
<a name="l00822"></a>00822         {
<a name="l00823"></a>00823           <span class="comment">/* YYY: this strange code has to solve the &quot;slow peer&quot;</span>
<a name="l00824"></a>00824 <span class="comment">             problem: When agent sends SMUX_SOUT message it doesn&#39;t</span>
<a name="l00825"></a>00825 <span class="comment">             wait any responce and may send some next message to</span>
<a name="l00826"></a>00826 <span class="comment">             subagent. Then the peer in &#39;smux_read()&#39; will recieve</span>
<a name="l00827"></a>00827 <span class="comment">             from socket the &#39;concatenated&#39; buffer, contaning both</span>
<a name="l00828"></a>00828 <span class="comment">             SMUX_SOUT message and the next one</span>
<a name="l00829"></a>00829 <span class="comment">             (SMUX_GET/SMUX_GETNEXT/SMUX_GET). So we should check: if</span>
<a name="l00830"></a>00830 <span class="comment">             the buffer is longer than 3 ( length of SMUX_SOUT ), we</span>
<a name="l00831"></a>00831 <span class="comment">             must process the rest of it.  This effect may be observed</span>
<a name="l00832"></a>00832 <span class="comment">             if &#39;debug_smux&#39; is set to &#39;1&#39; */</span>
<a name="l00833"></a>00833           ptr++;
<a name="l00834"></a>00834           len = len_income - 3;
<a name="l00835"></a>00835           <span class="keywordflow">goto</span> process_rest;
<a name="l00836"></a>00836         }
<a name="l00837"></a>00837       <span class="keywordflow">break</span>;
<a name="l00838"></a>00838     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#ac76127c2e19d5a74acc1cca651099770">SMUX_GETRSP</a>:
<a name="l00839"></a>00839       <span class="comment">/* SMUX_GETRSP message is invalid for us. */</span>
<a name="l00840"></a>00840       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX_GETRSP received: resetting connection.&quot;</span>);
<a name="l00841"></a>00841       <span class="keywordflow">return</span> -1;
<a name="l00842"></a>00842       <span class="keywordflow">break</span>;
<a name="l00843"></a>00843     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#a1fbaaf6943410d741ff83c15b53189fe">SMUX_CLOSE</a>:
<a name="l00844"></a>00844       <span class="comment">/* Close SMUX connection. */</span>
<a name="l00845"></a>00845       <span class="keywordflow">if</span> (debug_smux)
<a name="l00846"></a>00846     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_CLOSE&quot;</span>);
<a name="l00847"></a>00847       smux_parse_close (ptr, len);
<a name="l00848"></a>00848       <span class="keywordflow">return</span> -1;
<a name="l00849"></a>00849       <span class="keywordflow">break</span>;
<a name="l00850"></a>00850     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#aa5ba2fe760022fc01e9b9c599d68deb0">SMUX_RRSP</a>:
<a name="l00851"></a>00851       <span class="comment">/* This is response for register message. */</span>
<a name="l00852"></a>00852       <span class="keywordflow">if</span> (debug_smux)
<a name="l00853"></a>00853     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_RRSP&quot;</span>);
<a name="l00854"></a>00854       smux_parse_rrsp (ptr, len);
<a name="l00855"></a>00855       <span class="keywordflow">break</span>;
<a name="l00856"></a>00856     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#aead4fcbcd3905fb4154bf433c81f28d0">SMUX_GET</a>:
<a name="l00857"></a>00857       <span class="comment">/* Exact request for object id. */</span>
<a name="l00858"></a>00858       <span class="keywordflow">if</span> (debug_smux)
<a name="l00859"></a>00859     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_GET&quot;</span>);
<a name="l00860"></a>00860       smux_parse_get (ptr, len, 1);
<a name="l00861"></a>00861       <span class="keywordflow">break</span>;
<a name="l00862"></a>00862     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#ac7eaee22c71c1b8d79d6c51d77b110cb">SMUX_GETNEXT</a>:
<a name="l00863"></a>00863       <span class="comment">/* Next request for object id. */</span>
<a name="l00864"></a>00864       <span class="keywordflow">if</span> (debug_smux)
<a name="l00865"></a>00865     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_GETNEXT&quot;</span>);
<a name="l00866"></a>00866       smux_parse_get (ptr, len, 0);
<a name="l00867"></a>00867       <span class="keywordflow">break</span>;
<a name="l00868"></a>00868     <span class="keywordflow">case</span> <a class="code" href="smux_8h.html#a925664a956d0fb6b2341714814613d7c">SMUX_SET</a>:
<a name="l00869"></a>00869       <span class="comment">/* SMUX_SET is supported with some limitations. */</span>
<a name="l00870"></a>00870       <span class="keywordflow">if</span> (debug_smux)
<a name="l00871"></a>00871     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX_SET&quot;</span>);
<a name="l00872"></a>00872 
<a name="l00873"></a>00873       <span class="comment">/* save the data for future SMUX_SOUT */</span>
<a name="l00874"></a>00874       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (sout_save_buff, ptr, len);
<a name="l00875"></a>00875       sout_save_len = len;
<a name="l00876"></a>00876       smux_parse_set (ptr, len, RESERVE1);
<a name="l00877"></a>00877       <span class="keywordflow">break</span>;
<a name="l00878"></a>00878     <span class="keywordflow">default</span>:
<a name="l00879"></a>00879       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Unknown type: %d&quot;</span>, type);
<a name="l00880"></a>00880       <span class="keywordflow">break</span>;
<a name="l00881"></a>00881     }
<a name="l00882"></a>00882   <span class="keywordflow">return</span> 0;
<a name="l00883"></a>00883 }
<a name="l00884"></a>00884 
<a name="l00885"></a>00885 <span class="comment">/* SMUX message read function. */</span>
<a name="l00886"></a>00886 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00887"></a>00887 smux_read (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00888"></a>00888 {
<a name="l00889"></a>00889   <span class="keywordtype">int</span> sock;
<a name="l00890"></a>00890   <span class="keywordtype">int</span> len;
<a name="l00891"></a>00891   u_char buf[<a class="code" href="smux_8h.html#a707d09e8fed039733a47dffa3d12005e">SMUXMAXPKTSIZE</a>];
<a name="l00892"></a>00892   <span class="keywordtype">int</span> ret;
<a name="l00893"></a>00893 
<a name="l00894"></a>00894   <span class="comment">/* Clear thread. */</span>
<a name="l00895"></a>00895   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (t);
<a name="l00896"></a>00896   smux_read_thread = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00897"></a>00897 
<a name="l00898"></a>00898   <span class="keywordflow">if</span> (debug_smux)
<a name="l00899"></a>00899     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX read start&quot;</span>);
<a name="l00900"></a>00900 
<a name="l00901"></a>00901   <span class="comment">/* Read message from SMUX socket. */</span>
<a name="l00902"></a>00902   len = recv (sock, buf, <a class="code" href="smux_8h.html#a707d09e8fed039733a47dffa3d12005e">SMUXMAXPKTSIZE</a>, 0);
<a name="l00903"></a>00903 
<a name="l00904"></a>00904   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00905"></a>00905     {
<a name="l00906"></a>00906       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t read all SMUX packet: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00907"></a>00907       close (sock);
<a name="l00908"></a>00908       smux_sock = -1;
<a name="l00909"></a>00909       smux_event (SMUX_CONNECT, 0);
<a name="l00910"></a>00910       <span class="keywordflow">return</span> -1;
<a name="l00911"></a>00911     }
<a name="l00912"></a>00912 
<a name="l00913"></a>00913   <span class="keywordflow">if</span> (len == 0)
<a name="l00914"></a>00914     {
<a name="l00915"></a>00915       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX connection closed: %d&quot;</span>, sock);
<a name="l00916"></a>00916       close (sock);
<a name="l00917"></a>00917       smux_sock = -1;
<a name="l00918"></a>00918       smux_event (SMUX_CONNECT, 0);
<a name="l00919"></a>00919       <span class="keywordflow">return</span> -1;
<a name="l00920"></a>00920     }
<a name="l00921"></a>00921 
<a name="l00922"></a>00922   <span class="keywordflow">if</span> (debug_smux)
<a name="l00923"></a>00923     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX read len: %d&quot;</span>, len);
<a name="l00924"></a>00924 
<a name="l00925"></a>00925   <span class="comment">/* Parse the message. */</span>
<a name="l00926"></a>00926   ret = smux_parse (buf, len);
<a name="l00927"></a>00927 
<a name="l00928"></a>00928   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00929"></a>00929     {
<a name="l00930"></a>00930       close (sock);
<a name="l00931"></a>00931       smux_sock = -1;
<a name="l00932"></a>00932       smux_event (SMUX_CONNECT, 0);
<a name="l00933"></a>00933       <span class="keywordflow">return</span> -1;
<a name="l00934"></a>00934     }
<a name="l00935"></a>00935 
<a name="l00936"></a>00936   <span class="comment">/* Regiser read thread. */</span>
<a name="l00937"></a>00937   smux_event (SMUX_READ, sock);
<a name="l00938"></a>00938 
<a name="l00939"></a>00939   <span class="keywordflow">return</span> 0;
<a name="l00940"></a>00940 }
<a name="l00941"></a>00941 
<a name="l00942"></a>00942 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00943"></a>00943 smux_open (<span class="keywordtype">int</span> sock)
<a name="l00944"></a>00944 {
<a name="l00945"></a>00945   u_char buf[BUFSIZ];
<a name="l00946"></a>00946   u_char *ptr;
<a name="l00947"></a>00947   <span class="keywordtype">size_t</span> len;
<a name="l00948"></a>00948   <span class="keywordtype">long</span> <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l00949"></a>00949   u_char <a class="code" href="isis__main_8c.html#ab9e1449fd00c98428516f0b41eddcb10">progname</a>[] = <a class="code" href="version_8h.html#a6f9312d2c715ab5144dd1631b2615717">QUAGGA_PROGNAME</a> <span class="stringliteral">&quot;-&quot;</span> <a class="code" href="version_8h.html#a47310a38938bb82f0c5b9ad133443852">QUAGGA_VERSION</a>;
<a name="l00950"></a>00950 
<a name="l00951"></a>00951   <span class="keywordflow">if</span> (debug_smux)
<a name="l00952"></a>00952     {
<a name="l00953"></a>00953       smux_oid_dump (<span class="stringliteral">&quot;SMUX open oid&quot;</span>, smux_oid, smux_oid_len);
<a name="l00954"></a>00954       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX open progname: %s&quot;</span>, progname);
<a name="l00955"></a>00955       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX open password: %s&quot;</span>, smux_passwd);
<a name="l00956"></a>00956     }
<a name="l00957"></a>00957 
<a name="l00958"></a>00958   ptr = buf;
<a name="l00959"></a>00959   len = BUFSIZ;
<a name="l00960"></a>00960 
<a name="l00961"></a>00961   <span class="comment">/* SMUX Header.  As placeholder. */</span>
<a name="l00962"></a>00962   ptr = asn_build_header (ptr, &amp;len, (u_char) <a class="code" href="smux_8h.html#a607b65e9a3f2f48e94805032feeb38a3">SMUX_OPEN</a>, 0);
<a name="l00963"></a>00963 
<a name="l00964"></a>00964   <span class="comment">/* SMUX Open. */</span>
<a name="l00965"></a>00965   version = 0;
<a name="l00966"></a>00966   ptr = asn_build_int (ptr, &amp;len, 
<a name="l00967"></a>00967                (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l00968"></a>00968                &amp;version, <span class="keyword">sizeof</span> (version));
<a name="l00969"></a>00969 
<a name="l00970"></a>00970   <span class="comment">/* SMUX connection oid. */</span>
<a name="l00971"></a>00971   ptr = asn_build_objid (ptr, &amp;len,
<a name="l00972"></a>00972              (u_char) 
<a name="l00973"></a>00973              (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_OBJECT_ID),
<a name="l00974"></a>00974              smux_oid, smux_oid_len);
<a name="l00975"></a>00975 
<a name="l00976"></a>00976   <span class="comment">/* SMUX connection description. */</span>
<a name="l00977"></a>00977   ptr = asn_build_string (ptr, &amp;len, 
<a name="l00978"></a>00978               (u_char)
<a name="l00979"></a>00979               (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_OCTET_STR),
<a name="l00980"></a>00980               progname, strlen (progname));
<a name="l00981"></a>00981 
<a name="l00982"></a>00982   <span class="comment">/* SMUX connection password. */</span>
<a name="l00983"></a>00983   ptr = asn_build_string (ptr, &amp;len, 
<a name="l00984"></a>00984               (u_char)
<a name="l00985"></a>00985               (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_OCTET_STR),
<a name="l00986"></a>00986               (u_char *)smux_passwd, strlen (smux_passwd));
<a name="l00987"></a>00987 
<a name="l00988"></a>00988   <span class="comment">/* Fill in real SMUX header.  We exclude ASN header size (2). */</span>
<a name="l00989"></a>00989   len = BUFSIZ;
<a name="l00990"></a>00990   asn_build_header (buf, &amp;len, (u_char) <a class="code" href="smux_8h.html#a607b65e9a3f2f48e94805032feeb38a3">SMUX_OPEN</a>, (ptr - buf) - 2);
<a name="l00991"></a>00991 
<a name="l00992"></a>00992   <span class="keywordflow">return</span> send (sock, buf, (ptr - buf), 0);
<a name="l00993"></a>00993 }
<a name="l00994"></a>00994 
<a name="l00995"></a>00995 <span class="keywordtype">int</span>
<a name="l00996"></a>00996 <a class="code" href="smux_8h.html#aaf0b9cc33d65afe3c172191a78c87985">smux_trap</a> (<span class="keyword">const</span> oid *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, <span class="keywordtype">size_t</span> namelen,
<a name="l00997"></a>00997        <span class="keyword">const</span> oid *iname, <span class="keywordtype">size_t</span> inamelen,
<a name="l00998"></a>00998        <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structtrap__object.html">trap_object</a> *trapobj, <span class="keywordtype">size_t</span> trapobjlen,
<a name="l00999"></a>00999        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tick, u_char sptrap)
<a name="l01000"></a>01000 {
<a name="l01001"></a>01001   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01002"></a>01002   u_char buf[BUFSIZ];
<a name="l01003"></a>01003   u_char *ptr;
<a name="l01004"></a>01004   <span class="keywordtype">size_t</span> len, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01005"></a>01005   <span class="keyword">struct </span>in_addr addr;
<a name="l01006"></a>01006   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01007"></a>01007   u_char *h1, *h1e;
<a name="l01008"></a>01008 
<a name="l01009"></a>01009   ptr = buf;
<a name="l01010"></a>01010   len = BUFSIZ;
<a name="l01011"></a>01011   length = len;
<a name="l01012"></a>01012 
<a name="l01013"></a>01013   <span class="comment">/* When SMUX connection is not established. */</span>
<a name="l01014"></a>01014   <span class="keywordflow">if</span> (smux_sock &lt; 0)
<a name="l01015"></a>01015     <span class="keywordflow">return</span> 0;
<a name="l01016"></a>01016 
<a name="l01017"></a>01017   <span class="comment">/* SMUX header. */</span>
<a name="l01018"></a>01018   ptr = asn_build_header (ptr, &amp;len, (u_char) <a class="code" href="smux_8h.html#a2eb8f285c189490e31cb5a4a0cebe14a">SMUX_TRAP</a>, 0);
<a name="l01019"></a>01019 
<a name="l01020"></a>01020   <span class="comment">/* Sub agent enterprise oid. */</span>
<a name="l01021"></a>01021   ptr = asn_build_objid (ptr, &amp;len,
<a name="l01022"></a>01022              (u_char) 
<a name="l01023"></a>01023              (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_OBJECT_ID),
<a name="l01024"></a>01024              smux_oid, smux_oid_len);
<a name="l01025"></a>01025 
<a name="l01026"></a>01026   <span class="comment">/* IP address. */</span>
<a name="l01027"></a>01027   addr.s_addr = 0;
<a name="l01028"></a>01028   ptr = asn_build_string (ptr, &amp;len, 
<a name="l01029"></a>01029               (u_char)
<a name="l01030"></a>01030               (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_IPADDRESS),
<a name="l01031"></a>01031               (u_char *)&amp;addr, <span class="keyword">sizeof</span> (addr));
<a name="l01032"></a>01032 
<a name="l01033"></a>01033   <span class="comment">/* Generic trap integer. */</span>
<a name="l01034"></a>01034   val = SNMP_TRAP_ENTERPRISESPECIFIC;
<a name="l01035"></a>01035   ptr = asn_build_int (ptr, &amp;len, 
<a name="l01036"></a>01036                (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l01037"></a>01037                (<span class="keywordtype">long</span> *)&amp;val, <span class="keyword">sizeof</span> (val));
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   <span class="comment">/* Specific trap integer. */</span>
<a name="l01040"></a>01040   val = sptrap;
<a name="l01041"></a>01041   ptr = asn_build_int (ptr, &amp;len, 
<a name="l01042"></a>01042                (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l01043"></a>01043                (<span class="keywordtype">long</span> *)&amp;val, <span class="keyword">sizeof</span> (val));
<a name="l01044"></a>01044 
<a name="l01045"></a>01045   <span class="comment">/* Timeticks timestamp. */</span>
<a name="l01046"></a>01046   val = 0;
<a name="l01047"></a>01047   ptr = asn_build_unsigned_int (ptr, &amp;len, 
<a name="l01048"></a>01048                 (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_TIMETICKS),
<a name="l01049"></a>01049                 &amp;val, <span class="keyword">sizeof</span> (val));
<a name="l01050"></a>01050   
<a name="l01051"></a>01051   <span class="comment">/* Variables. */</span>
<a name="l01052"></a>01052   h1 = ptr;
<a name="l01053"></a>01053   ptr = asn_build_sequence (ptr, &amp;len, 
<a name="l01054"></a>01054                 (u_char) (ASN_SEQUENCE | ASN_CONSTRUCTOR),
<a name="l01055"></a>01055                 0);
<a name="l01056"></a>01056 
<a name="l01057"></a>01057 
<a name="l01058"></a>01058   <span class="comment">/* Iteration for each objects. */</span>
<a name="l01059"></a>01059   h1e = ptr;
<a name="l01060"></a>01060   <span class="keywordflow">for</span> (i = 0; i &lt; trapobjlen; i++)
<a name="l01061"></a>01061     {
<a name="l01062"></a>01062       <span class="keywordtype">int</span> ret;
<a name="l01063"></a>01063       oid oid[MAX_OID_LEN];
<a name="l01064"></a>01064       <span class="keywordtype">size_t</span> oid_len;
<a name="l01065"></a>01065       <span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01066"></a>01066       <span class="keywordtype">size_t</span> val_len;
<a name="l01067"></a>01067       u_char val_type;
<a name="l01068"></a>01068 
<a name="l01069"></a>01069       <span class="comment">/* Make OID. */</span>
<a name="l01070"></a>01070       <span class="keywordflow">if</span> (trapobj[i].namelen &gt; 0) 
<a name="l01071"></a>01071         {
<a name="l01072"></a>01072           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (oid, name, namelen);
<a name="l01073"></a>01073           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (oid + namelen, trapobj[i].name, trapobj[i].namelen);
<a name="l01074"></a>01074           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (oid + namelen + trapobj[i].namelen, iname, inamelen);
<a name="l01075"></a>01075           oid_len = namelen + trapobj[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structtrap__object.html#a2df68fbafa5b7cd921204104a2cb4fd1">namelen</a> + inamelen;
<a name="l01076"></a>01076         }
<a name="l01077"></a>01077       <span class="keywordflow">else</span> 
<a name="l01078"></a>01078         {
<a name="l01079"></a>01079           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (oid, name, namelen);
<a name="l01080"></a>01080           <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (oid + namelen, trapobj[i].name, trapobj[i].namelen * (-1));
<a name="l01081"></a>01081           oid_len = namelen + trapobj[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structtrap__object.html#a2df68fbafa5b7cd921204104a2cb4fd1">namelen</a> * (-1) ;
<a name="l01082"></a>01082         }
<a name="l01083"></a>01083 
<a name="l01084"></a>01084       <span class="keywordflow">if</span> (debug_smux) 
<a name="l01085"></a>01085         {
<a name="l01086"></a>01086           smux_oid_dump (<span class="stringliteral">&quot;Trap&quot;</span>, name, namelen);
<a name="l01087"></a>01087           <span class="keywordflow">if</span> (trapobj[i].namelen &lt; 0)
<a name="l01088"></a>01088             smux_oid_dump (<span class="stringliteral">&quot;Trap&quot;</span>, 
<a name="l01089"></a>01089                            trapobj[i].name, (- 1) * (trapobj[i].namelen));
<a name="l01090"></a>01090           <span class="keywordflow">else</span> 
<a name="l01091"></a>01091             {
<a name="l01092"></a>01092               smux_oid_dump (<span class="stringliteral">&quot;Trap&quot;</span>, trapobj[i].name, (trapobj[i].namelen));
<a name="l01093"></a>01093               smux_oid_dump (<span class="stringliteral">&quot;Trap&quot;</span>, iname, inamelen);
<a name="l01094"></a>01094             }
<a name="l01095"></a>01095           smux_oid_dump (<span class="stringliteral">&quot;Trap&quot;</span>, oid, oid_len);
<a name="l01096"></a>01096           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;BUFSIZ: %d // oid_len: %lu&quot;</span>, BUFSIZ, (u_long)oid_len);
<a name="l01097"></a>01097       }
<a name="l01098"></a>01098 
<a name="l01099"></a>01099       ret = smux_get (oid, &amp;oid_len, 1, &amp;val_type, &amp;val, &amp;val_len);
<a name="l01100"></a>01100 
<a name="l01101"></a>01101       <span class="keywordflow">if</span> (debug_smux)
<a name="l01102"></a>01102     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;smux_get result %d&quot;</span>, ret);
<a name="l01103"></a>01103 
<a name="l01104"></a>01104       <span class="keywordflow">if</span> (ret == 0)
<a name="l01105"></a>01105     ptr = snmp_build_var_op (ptr, oid, &amp;oid_len,
<a name="l01106"></a>01106                  val_type, val_len, val, &amp;len);
<a name="l01107"></a>01107     }
<a name="l01108"></a>01108 
<a name="l01109"></a>01109   <span class="comment">/* Now variable size is known, fill in size */</span>
<a name="l01110"></a>01110   asn_build_sequence(h1, &amp;length,
<a name="l01111"></a>01111              (u_char) (ASN_SEQUENCE | ASN_CONSTRUCTOR),
<a name="l01112"></a>01112              ptr - h1e);
<a name="l01113"></a>01113 
<a name="l01114"></a>01114   <span class="comment">/* Fill in size of whole sequence */</span>
<a name="l01115"></a>01115   len = BUFSIZ;
<a name="l01116"></a>01116   asn_build_header (buf, &amp;len, (u_char) <a class="code" href="smux_8h.html#a2eb8f285c189490e31cb5a4a0cebe14a">SMUX_TRAP</a>, (ptr - buf) - 2);
<a name="l01117"></a>01117 
<a name="l01118"></a>01118   <span class="keywordflow">return</span> send (smux_sock, buf, (ptr - buf), 0);
<a name="l01119"></a>01119 }
<a name="l01120"></a>01120 
<a name="l01121"></a>01121 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01122"></a>01122 smux_register (<span class="keywordtype">int</span> sock)
<a name="l01123"></a>01123 {
<a name="l01124"></a>01124   u_char buf[BUFSIZ];
<a name="l01125"></a>01125   u_char *ptr;
<a name="l01126"></a>01126   <span class="keywordtype">int</span> ret;
<a name="l01127"></a>01127   <span class="keywordtype">size_t</span> len;
<a name="l01128"></a>01128   <span class="keywordtype">long</span> priority;
<a name="l01129"></a>01129   <span class="keywordtype">long</span> operation;
<a name="l01130"></a>01130   <span class="keyword">struct </span>subtree *subtree;
<a name="l01131"></a>01131   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01132"></a>01132 
<a name="l01133"></a>01133   ret = 0;
<a name="l01134"></a>01134 
<a name="l01135"></a>01135   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (treelist, node, nnode, subtree))
<a name="l01136"></a>01136     {
<a name="l01137"></a>01137       ptr = buf;
<a name="l01138"></a>01138       len = BUFSIZ;
<a name="l01139"></a>01139 
<a name="l01140"></a>01140       <span class="comment">/* SMUX RReq Header. */</span>
<a name="l01141"></a>01141       ptr = asn_build_header (ptr, &amp;len, (u_char) <a class="code" href="smux_8h.html#a83f33d4f3f6efa0cbf00b047e4c47118">SMUX_RREQ</a>, 0);
<a name="l01142"></a>01142 
<a name="l01143"></a>01143       <span class="comment">/* Register MIB tree. */</span>
<a name="l01144"></a>01144       ptr = asn_build_objid (ptr, &amp;len,
<a name="l01145"></a>01145                 (u_char)
<a name="l01146"></a>01146                 (ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_OBJECT_ID),
<a name="l01147"></a>01147                 subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l01148"></a>01148 
<a name="l01149"></a>01149       <span class="comment">/* Priority. */</span>
<a name="l01150"></a>01150       priority = -1;
<a name="l01151"></a>01151       ptr = asn_build_int (ptr, &amp;len, 
<a name="l01152"></a>01152                   (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l01153"></a>01153                   &amp;priority, <span class="keyword">sizeof</span> (priority));
<a name="l01154"></a>01154 
<a name="l01155"></a>01155       <span class="comment">/* Operation. */</span>
<a name="l01156"></a>01156       operation = 2; <span class="comment">/* Register R/W */</span>
<a name="l01157"></a>01157       ptr = asn_build_int (ptr, &amp;len, 
<a name="l01158"></a>01158                   (u_char)(ASN_UNIVERSAL | ASN_PRIMITIVE | ASN_INTEGER),
<a name="l01159"></a>01159                   &amp;operation, <span class="keyword">sizeof</span> (operation));
<a name="l01160"></a>01160 
<a name="l01161"></a>01161       <span class="keywordflow">if</span> (debug_smux)
<a name="l01162"></a>01162         {
<a name="l01163"></a>01163           smux_oid_dump (<span class="stringliteral">&quot;SMUX register oid&quot;</span>, subtree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, subtree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l01164"></a>01164           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX register priority: %ld&quot;</span>, priority);
<a name="l01165"></a>01165           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX register operation: %ld&quot;</span>, operation);
<a name="l01166"></a>01166         }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168       len = BUFSIZ;
<a name="l01169"></a>01169       asn_build_header (buf, &amp;len, (u_char) <a class="code" href="smux_8h.html#a83f33d4f3f6efa0cbf00b047e4c47118">SMUX_RREQ</a>, (ptr - buf) - 2);
<a name="l01170"></a>01170       ret = send (sock, buf, (ptr - buf), 0);
<a name="l01171"></a>01171       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01172"></a>01172         <span class="keywordflow">return</span> ret;
<a name="l01173"></a>01173     }
<a name="l01174"></a>01174   <span class="keywordflow">return</span> ret;
<a name="l01175"></a>01175 }
<a name="l01176"></a>01176 
<a name="l01177"></a>01177 <span class="comment">/* Try to connect to SNMP agent. */</span>
<a name="l01178"></a>01178 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01179"></a>01179 smux_connect (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01180"></a>01180 {
<a name="l01181"></a>01181   <span class="keywordtype">int</span> ret;
<a name="l01182"></a>01182 
<a name="l01183"></a>01183   <span class="keywordflow">if</span> (debug_smux)
<a name="l01184"></a>01184     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SMUX connect try %d&quot;</span>, fail + 1);
<a name="l01185"></a>01185 
<a name="l01186"></a>01186   <span class="comment">/* Clear thread poner of myself. */</span>
<a name="l01187"></a>01187   smux_connect_thread = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01188"></a>01188 
<a name="l01189"></a>01189   <span class="comment">/* Make socket.  Try to connect. */</span>
<a name="l01190"></a>01190   smux_sock = smux_socket ();
<a name="l01191"></a>01191   <span class="keywordflow">if</span> (smux_sock &lt; 0)
<a name="l01192"></a>01192     {
<a name="l01193"></a>01193       <span class="keywordflow">if</span> (++fail &lt; <a class="code" href="smux_8h.html#a4b43fe23d77aa4e3550bf2c2864a41d6">SMUX_MAX_FAILURE</a>)
<a name="l01194"></a>01194     smux_event (SMUX_CONNECT, 0);
<a name="l01195"></a>01195       <span class="keywordflow">return</span> 0;
<a name="l01196"></a>01196     }
<a name="l01197"></a>01197 
<a name="l01198"></a>01198   <span class="comment">/* Send OPEN PDU. */</span>
<a name="l01199"></a>01199   ret = smux_open (smux_sock);
<a name="l01200"></a>01200   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01201"></a>01201     {
<a name="l01202"></a>01202       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX open message send failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01203"></a>01203       close (smux_sock);
<a name="l01204"></a>01204       smux_sock = -1;
<a name="l01205"></a>01205       <span class="keywordflow">if</span> (++fail &lt; <a class="code" href="smux_8h.html#a4b43fe23d77aa4e3550bf2c2864a41d6">SMUX_MAX_FAILURE</a>)
<a name="l01206"></a>01206     smux_event (SMUX_CONNECT, 0);
<a name="l01207"></a>01207       <span class="keywordflow">return</span> -1;
<a name="l01208"></a>01208     }
<a name="l01209"></a>01209 
<a name="l01210"></a>01210   <span class="comment">/* Send any outstanding register PDUs. */</span>
<a name="l01211"></a>01211   ret = smux_register (smux_sock);
<a name="l01212"></a>01212   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01213"></a>01213     {
<a name="l01214"></a>01214       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SMUX register message send failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01215"></a>01215       close (smux_sock);
<a name="l01216"></a>01216       smux_sock = -1;
<a name="l01217"></a>01217       <span class="keywordflow">if</span> (++fail &lt; <a class="code" href="smux_8h.html#a4b43fe23d77aa4e3550bf2c2864a41d6">SMUX_MAX_FAILURE</a>)
<a name="l01218"></a>01218     smux_event (SMUX_CONNECT, 0);
<a name="l01219"></a>01219       <span class="keywordflow">return</span> -1;
<a name="l01220"></a>01220     }
<a name="l01221"></a>01221 
<a name="l01222"></a>01222   <span class="comment">/* Everything goes fine. */</span>
<a name="l01223"></a>01223   smux_event (SMUX_READ, smux_sock);
<a name="l01224"></a>01224 
<a name="l01225"></a>01225   <span class="keywordflow">return</span> 0;
<a name="l01226"></a>01226 }
<a name="l01227"></a>01227 
<a name="l01228"></a>01228 <span class="comment">/* Clear all SMUX related resources. */</span>
<a name="l01229"></a>01229 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01230"></a>01230 smux_stop (<span class="keywordtype">void</span>)
<a name="l01231"></a>01231 {
<a name="l01232"></a>01232   <span class="keywordflow">if</span> (smux_read_thread)
<a name="l01233"></a>01233     {
<a name="l01234"></a>01234       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (smux_read_thread);
<a name="l01235"></a>01235       smux_read_thread = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01236"></a>01236     }
<a name="l01237"></a>01237 
<a name="l01238"></a>01238   <span class="keywordflow">if</span> (smux_connect_thread)
<a name="l01239"></a>01239     {
<a name="l01240"></a>01240       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (smux_connect_thread);
<a name="l01241"></a>01241       smux_connect_thread = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01242"></a>01242     }
<a name="l01243"></a>01243 
<a name="l01244"></a>01244   <span class="keywordflow">if</span> (smux_sock &gt;= 0)
<a name="l01245"></a>01245     {
<a name="l01246"></a>01246       close (smux_sock);
<a name="l01247"></a>01247       smux_sock = -1;
<a name="l01248"></a>01248     }
<a name="l01249"></a>01249 }
<a name="l01250"></a>01250 
<a name="l01251"></a>01251 
<a name="l01252"></a>01252 
<a name="l01253"></a>01253 <span class="keywordtype">void</span>
<a name="l01254"></a>01254 smux_event (<span class="keyword">enum</span> smux_event <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>, <span class="keywordtype">int</span> sock)
<a name="l01255"></a>01255 {
<a name="l01256"></a>01256   <span class="keywordflow">switch</span> (event)
<a name="l01257"></a>01257     {
<a name="l01258"></a>01258     <span class="keywordflow">case</span> SMUX_SCHEDULE:
<a name="l01259"></a>01259       smux_connect_thread = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (master, smux_connect, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l01260"></a>01260       <span class="keywordflow">break</span>;
<a name="l01261"></a>01261     <span class="keywordflow">case</span> SMUX_CONNECT:
<a name="l01262"></a>01262       smux_connect_thread = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (master, smux_connect, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 10);
<a name="l01263"></a>01263       <span class="keywordflow">break</span>;
<a name="l01264"></a>01264     <span class="keywordflow">case</span> SMUX_READ:
<a name="l01265"></a>01265       smux_read_thread = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (master, smux_read, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock);
<a name="l01266"></a>01266       <span class="keywordflow">break</span>;
<a name="l01267"></a>01267     <span class="keywordflow">default</span>:
<a name="l01268"></a>01268       <span class="keywordflow">break</span>;
<a name="l01269"></a>01269     }
<a name="l01270"></a>01270 }
<a name="l01271"></a>01271 
<a name="l01272"></a>01272 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01273"></a>01273 smux_str2oid (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, oid *oid, <span class="keywordtype">size_t</span> *oid_len)
<a name="l01274"></a>01274 {
<a name="l01275"></a>01275   <span class="keywordtype">int</span> len;
<a name="l01276"></a>01276   <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01277"></a>01277 
<a name="l01278"></a>01278   len = 0;
<a name="l01279"></a>01279   val = 0;
<a name="l01280"></a>01280   *oid_len = 0;
<a name="l01281"></a>01281 
<a name="l01282"></a>01282   <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;.&#39;</span>)
<a name="l01283"></a>01283     str++;
<a name="l01284"></a>01284   <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l01285"></a>01285     <span class="keywordflow">return</span> 0;
<a name="l01286"></a>01286 
<a name="l01287"></a>01287   <span class="keywordflow">while</span> (1)
<a name="l01288"></a>01288     {
<a name="l01289"></a>01289       <span class="keywordflow">if</span> (! isdigit (*str))
<a name="l01290"></a>01290     <span class="keywordflow">return</span> -1;
<a name="l01291"></a>01291 
<a name="l01292"></a>01292       <span class="keywordflow">while</span> (isdigit (*str))
<a name="l01293"></a>01293     {
<a name="l01294"></a>01294       val *= 10;
<a name="l01295"></a>01295       val += (*str - <span class="charliteral">&#39;0&#39;</span>);
<a name="l01296"></a>01296       str++;
<a name="l01297"></a>01297     }
<a name="l01298"></a>01298 
<a name="l01299"></a>01299       <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;\0&#39;</span>)
<a name="l01300"></a>01300     <span class="keywordflow">break</span>;
<a name="l01301"></a>01301       <span class="keywordflow">if</span> (*str != <span class="charliteral">&#39;.&#39;</span>)
<a name="l01302"></a>01302     <span class="keywordflow">return</span> -1;
<a name="l01303"></a>01303 
<a name="l01304"></a>01304       oid[len++] = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01305"></a>01305       val = 0;
<a name="l01306"></a>01306       str++;
<a name="l01307"></a>01307     }
<a name="l01308"></a>01308 
<a name="l01309"></a>01309   oid[len++] = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01310"></a>01310   *oid_len = len;
<a name="l01311"></a>01311 
<a name="l01312"></a>01312   <span class="keywordflow">return</span> 0;
<a name="l01313"></a>01313 }
<a name="l01314"></a>01314 
<a name="l01315"></a>01315 <span class="keyword">static</span> oid *
<a name="l01316"></a>01316 smux_oid_dup (oid *objid, <span class="keywordtype">size_t</span> objid_len)
<a name="l01317"></a>01317 {
<a name="l01318"></a>01318   oid *<span class="keyword">new</span>;
<a name="l01319"></a>01319 
<a name="l01320"></a>01320   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <span class="keyword">sizeof</span> (oid) * objid_len);
<a name="l01321"></a>01321   <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (<span class="keyword">new</span>, objid, objid_len);
<a name="l01322"></a>01322 
<a name="l01323"></a>01323   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l01324"></a>01324 }
<a name="l01325"></a>01325 
<a name="l01326"></a>01326 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01327"></a>01327 smux_peer_oid (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *oid_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *passwd_str)
<a name="l01328"></a>01328 {
<a name="l01329"></a>01329   <span class="keywordtype">int</span> ret;
<a name="l01330"></a>01330   oid oid[MAX_OID_LEN];
<a name="l01331"></a>01331   <span class="keywordtype">size_t</span> oid_len;
<a name="l01332"></a>01332 
<a name="l01333"></a>01333   ret = smux_str2oid (oid_str, oid, &amp;oid_len);
<a name="l01334"></a>01334   <span class="keywordflow">if</span> (ret != 0)
<a name="l01335"></a>01335     {
<a name="l01336"></a>01336       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;object ID malformed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01337"></a>01337       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01338"></a>01338     }
<a name="l01339"></a>01339 
<a name="l01340"></a>01340   <span class="keywordflow">if</span> (smux_oid)
<a name="l01341"></a>01341     {
<a name="l01342"></a>01342       free (smux_oid);
<a name="l01343"></a>01343       smux_oid = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01344"></a>01344     }
<a name="l01345"></a>01345 
<a name="l01346"></a>01346   <span class="comment">/* careful, smux_passwd might point to string constant */</span>
<a name="l01347"></a>01347   <span class="keywordflow">if</span> (smux_passwd)
<a name="l01348"></a>01348     {
<a name="l01349"></a>01349       free (smux_passwd);
<a name="l01350"></a>01350       smux_passwd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01351"></a>01351     }
<a name="l01352"></a>01352 
<a name="l01353"></a>01353   smux_oid = smux_oid_dup (oid, oid_len);
<a name="l01354"></a>01354   smux_oid_len = oid_len;
<a name="l01355"></a>01355 
<a name="l01356"></a>01356   <span class="keywordflow">if</span> (passwd_str)
<a name="l01357"></a>01357     smux_passwd = strdup (passwd_str);
<a name="l01358"></a>01358   <span class="keywordflow">else</span>
<a name="l01359"></a>01359     smux_passwd = strdup (<span class="stringliteral">&quot;&quot;</span>);
<a name="l01360"></a>01360 
<a name="l01361"></a>01361   <span class="keywordflow">return</span> 0;
<a name="l01362"></a>01362 }
<a name="l01363"></a>01363 
<a name="l01364"></a>01364 <span class="keywordtype">int</span>
<a name="l01365"></a>01365 <a class="code" href="smux_8h.html#a15cc4f7bbc1b70b7fc5179e939073238">smux_header_generic</a> (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01366"></a>01366              <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01367"></a>01367 {
<a name="l01368"></a>01368   oid fulloid[MAX_OID_LEN];
<a name="l01369"></a>01369   <span class="keywordtype">int</span> ret;
<a name="l01370"></a>01370 
<a name="l01371"></a>01371   <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (fulloid, v-&gt;<a class="code" href="structvariable.html#a70620f86886694dc8b76914cc7356b0c">name</a>, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>);
<a name="l01372"></a>01372   fulloid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>] = 0;
<a name="l01373"></a>01373   <span class="comment">/* Check against full instance. */</span>
<a name="l01374"></a>01374   ret = <a class="code" href="smux_8h.html#a4800c2461a103b3b5b777f4fa5317154">oid_compare</a> (name, *length, fulloid, v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 1);
<a name="l01375"></a>01375 
<a name="l01376"></a>01376   <span class="comment">/* Check single instance. */</span>
<a name="l01377"></a>01377   <span class="keywordflow">if</span> ((exact &amp;&amp; (ret != 0)) || (!exact &amp;&amp; (ret &gt;= 0)))
<a name="l01378"></a>01378     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#ac8ad57fb87ae8e10684a7b910e92bba6">MATCH_FAILED</a>;
<a name="l01379"></a>01379 
<a name="l01380"></a>01380   <span class="comment">/* In case of getnext, fill in full instance. */</span>
<a name="l01381"></a>01381   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (name, fulloid, (v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 1) * sizeof (oid));
<a name="l01382"></a>01382   *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 1;
<a name="l01383"></a>01383 
<a name="l01384"></a>01384   *write_method = 0;
<a name="l01385"></a>01385   *var_len = <span class="keyword">sizeof</span>(long);    <span class="comment">/* default to &#39;long&#39; results */</span>
<a name="l01386"></a>01386 
<a name="l01387"></a>01387   <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a17594c2d9c7cd3a685dd94b190d00cf5">MATCH_SUCCEEDED</a>;
<a name="l01388"></a>01388 }
<a name="l01389"></a>01389 
<a name="l01390"></a>01390 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01391"></a>01391 smux_peer_default (<span class="keywordtype">void</span>)
<a name="l01392"></a>01392 {
<a name="l01393"></a>01393   <span class="keywordflow">if</span> (smux_oid)
<a name="l01394"></a>01394     {
<a name="l01395"></a>01395       free (smux_oid);
<a name="l01396"></a>01396       smux_oid = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01397"></a>01397     }
<a name="l01398"></a>01398   
<a name="l01399"></a>01399   <span class="comment">/* careful, smux_passwd might be pointing at string constant */</span>
<a name="l01400"></a>01400   <span class="keywordflow">if</span> (smux_passwd)
<a name="l01401"></a>01401     {
<a name="l01402"></a>01402       free (smux_passwd);
<a name="l01403"></a>01403       smux_passwd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01404"></a>01404     }
<a name="l01405"></a>01405 
<a name="l01406"></a>01406   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01407"></a>01407 }
<a name="l01408"></a>01408 
<a name="l01409"></a>01409 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (smux_peer,
<a name="l01410"></a>01410        smux_peer_cmd,
<a name="l01411"></a>01411        <span class="stringliteral">&quot;smux peer OID&quot;</span>,
<a name="l01412"></a>01412        <span class="stringliteral">&quot;SNMP MUX protocol settings\n&quot;</span>
<a name="l01413"></a>01413        <span class="stringliteral">&quot;SNMP MUX peer settings\n&quot;</span>
<a name="l01414"></a>01414        <span class="stringliteral">&quot;Object ID used in SMUX peering\n&quot;</span>)
<a name="l01415"></a>01415 {
<a name="l01416"></a>01416   <span class="keywordflow">if</span> (smux_peer_oid (vty, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) == 0)
<a name="l01417"></a>01417     {
<a name="l01418"></a>01418       <a class="code" href="smux_8h.html#a747d2884a651e04c5fee368bf3ae8d5d">smux_start</a>();
<a name="l01419"></a>01419       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01420"></a>01420     }
<a name="l01421"></a>01421   <span class="keywordflow">else</span>
<a name="l01422"></a>01422     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01423"></a>01423 }
<a name="l01424"></a>01424 
<a name="l01425"></a>01425 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (smux_peer_password,
<a name="l01426"></a>01426        smux_peer_password_cmd,
<a name="l01427"></a>01427        <span class="stringliteral">&quot;smux peer OID PASSWORD&quot;</span>,
<a name="l01428"></a>01428        <span class="stringliteral">&quot;SNMP MUX protocol settings\n&quot;</span>
<a name="l01429"></a>01429        <span class="stringliteral">&quot;SNMP MUX peer settings\n&quot;</span>
<a name="l01430"></a>01430        <span class="stringliteral">&quot;SMUX peering object ID\n&quot;</span>
<a name="l01431"></a>01431        <span class="stringliteral">&quot;SMUX peering password\n&quot;</span>)
<a name="l01432"></a>01432 {
<a name="l01433"></a>01433   <span class="keywordflow">if</span> (smux_peer_oid (vty, argv[0], argv[1]) == 0)
<a name="l01434"></a>01434     {
<a name="l01435"></a>01435       <a class="code" href="smux_8h.html#a747d2884a651e04c5fee368bf3ae8d5d">smux_start</a>();
<a name="l01436"></a>01436       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01437"></a>01437     }
<a name="l01438"></a>01438   <span class="keywordflow">else</span>
<a name="l01439"></a>01439     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01440"></a>01440 }
<a name="l01441"></a>01441 
<a name="l01442"></a>01442 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_smux_peer,
<a name="l01443"></a>01443        no_smux_peer_cmd,
<a name="l01444"></a>01444        <span class="stringliteral">&quot;no smux peer&quot;</span>,
<a name="l01445"></a>01445        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01446"></a>01446        <span class="stringliteral">&quot;SNMP MUX protocol settings\n&quot;</span>
<a name="l01447"></a>01447        <span class="stringliteral">&quot;SNMP MUX peer settings\n&quot;</span>)
<a name="l01448"></a>01448 {
<a name="l01449"></a>01449   smux_stop();
<a name="l01450"></a>01450   <span class="keywordflow">return</span> smux_peer_default ();
<a name="l01451"></a>01451 }
<a name="l01452"></a>01452 
<a name="l01453"></a>01453 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_smux_peer,
<a name="l01454"></a>01454        no_smux_peer_oid_cmd,
<a name="l01455"></a>01455        <span class="stringliteral">&quot;no smux peer OID&quot;</span>,
<a name="l01456"></a>01456        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01457"></a>01457        <span class="stringliteral">&quot;SNMP MUX protocol settings\n&quot;</span>
<a name="l01458"></a>01458        <span class="stringliteral">&quot;SNMP MUX peer settings\n&quot;</span>
<a name="l01459"></a>01459        <span class="stringliteral">&quot;SMUX peering object ID\n&quot;</span>)
<a name="l01460"></a>01460 
<a name="l01461"></a>01461 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_smux_peer,
<a name="l01462"></a>01462        no_smux_peer_oid_password_cmd,
<a name="l01463"></a>01463        &quot;no smux <a class="code" href="structpeer.html">peer</a> OID PASSWORD&quot;,
<a name="l01464"></a>01464        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01465"></a>01465        &quot;SNMP MUX protocol settings\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01466"></a>01466        &quot;SNMP MUX <a class="code" href="structpeer.html">peer</a> settings\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01467"></a>01467        &quot;SMUX peering <span class="keywordtype">object</span> ID\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01468"></a>01468        &quot;SMUX peering <a class="code" href="structpassword.html">password</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01469"></a>01469 
<a name="l01470"></a>01470 static <span class="keywordtype">int</span>
<a name="l01471"></a>01471 config_write_smux (struct vty *vty)
<a name="l01472"></a>01472 {
<a name="l01473"></a>01473   <span class="keywordtype">int</span> first = 1;
<a name="l01474"></a>01474   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01475"></a>01475 
<a name="l01476"></a>01476   <span class="keywordflow">if</span> (smux_oid)
<a name="l01477"></a>01477     {
<a name="l01478"></a>01478       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;smux peer &quot;</span>);
<a name="l01479"></a>01479       <span class="keywordflow">for</span> (i = 0; i &lt; smux_oid_len; i++)
<a name="l01480"></a>01480     {
<a name="l01481"></a>01481       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s%d&quot;</span>, first ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;.&quot;</span>, (<span class="keywordtype">int</span>) smux_oid[i]);
<a name="l01482"></a>01482       first = 0;
<a name="l01483"></a>01483     }
<a name="l01484"></a>01484       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %s%s&quot;</span>, smux_passwd, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01485"></a>01485     }
<a name="l01486"></a>01486   <span class="keywordflow">return</span> 0;
<a name="l01487"></a>01487 }
<a name="l01488"></a>01488 
<a name="l01489"></a>01489 <span class="comment">/* Register subtree to smux master tree. */</span>
<a name="l01490"></a>01490 <span class="keywordtype">void</span>
<a name="l01491"></a>01491 <a class="code" href="smux_8h.html#a4c4ff4a87abad2d7969e852c7d055d3a">smux_register_mib</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *descr, <span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *var, 
<a name="l01492"></a>01492                    <span class="keywordtype">size_t</span> width, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>, 
<a name="l01493"></a>01493            oid name[], <span class="keywordtype">size_t</span> namelen)
<a name="l01494"></a>01494 {
<a name="l01495"></a>01495   <span class="keyword">struct </span>subtree *tree;
<a name="l01496"></a>01496 
<a name="l01497"></a>01497   tree = (<span class="keyword">struct </span>subtree *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> subtree));
<a name="l01498"></a>01498   <a class="code" href="smux_8h.html#a1c6d0e7fe12d52b93120d282a92e0288">oid_copy</a> (tree-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, name, namelen);
<a name="l01499"></a>01499   tree-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a> = namelen;
<a name="l01500"></a>01500   tree-&gt;<a class="code" href="structsubtree.html#a1e898c550cd66724d73232cc711a1acd">variables</a> = var;
<a name="l01501"></a>01501   tree-&gt;<a class="code" href="structsubtree.html#a6e0325f8040b61d79985546cf3e06d8d">variables_num</a> = <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
<a name="l01502"></a>01502   tree-&gt;<a class="code" href="structsubtree.html#a12d12b5af32f940926949adf74bf7826">variables_width</a> = width;
<a name="l01503"></a>01503   tree-&gt;<a class="code" href="structsubtree.html#a1078b0833dae6c9e911a4d5dd9cff7a1">registered</a> = 0;
<a name="l01504"></a>01504   <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a>(treelist, tree);
<a name="l01505"></a>01505 }
<a name="l01506"></a>01506 
<a name="l01507"></a>01507 <span class="comment">/* Compare function to keep treelist sorted */</span>
<a name="l01508"></a>01508 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01509"></a>01509 smux_tree_cmp(<span class="keyword">struct</span> subtree *tree1, <span class="keyword">struct</span> subtree *tree2)
<a name="l01510"></a>01510 {
<a name="l01511"></a>01511   <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a4800c2461a103b3b5b777f4fa5317154">oid_compare</a>(tree1-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, tree1-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>, 
<a name="l01512"></a>01512              tree2-&gt;<a class="code" href="structsubtree.html#a2b3a4f956f8590ac0a6ecfc5464dc5a4">name</a>, tree2-&gt;<a class="code" href="structsubtree.html#a8ad47ea4490834918f0eafc70d155f98">name_len</a>);
<a name="l01513"></a>01513 }
<a name="l01514"></a>01514 
<a name="l01515"></a>01515 <span class="comment">/* Initialize some values then schedule first SMUX connection. */</span>
<a name="l01516"></a>01516 <span class="keywordtype">void</span>
<a name="l01517"></a>01517 <a class="code" href="smux_8h.html#a430d09d1e58132210a142a580cb8e6a8">smux_init</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *tm)
<a name="l01518"></a>01518 {
<a name="l01519"></a>01519   <span class="comment">/* copy callers thread master */</span>
<a name="l01520"></a>01520   master = tm;
<a name="l01521"></a>01521   
<a name="l01522"></a>01522   <span class="comment">/* Make MIB tree. */</span>
<a name="l01523"></a>01523   treelist = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a>();
<a name="l01524"></a>01524   treelist-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *))smux_tree_cmp;
<a name="l01525"></a>01525 
<a name="l01526"></a>01526   <span class="comment">/* Install commands. */</span>
<a name="l01527"></a>01527   <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;smux_node, config_write_smux);
<a name="l01528"></a>01528 
<a name="l01529"></a>01529   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;smux_peer_cmd);
<a name="l01530"></a>01530   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;smux_peer_password_cmd);
<a name="l01531"></a>01531   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_smux_peer_cmd);
<a name="l01532"></a>01532   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_smux_peer_oid_cmd);
<a name="l01533"></a>01533   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_smux_peer_oid_password_cmd);
<a name="l01534"></a>01534 }
<a name="l01535"></a>01535 
<a name="l01536"></a>01536 <span class="keywordtype">void</span>
<a name="l01537"></a>01537 <a class="code" href="smux_8h.html#a747d2884a651e04c5fee368bf3ae8d5d">smux_start</a>(<span class="keywordtype">void</span>)
<a name="l01538"></a>01538 {
<a name="l01539"></a>01539   <span class="comment">/* Close any existing connections. */</span>
<a name="l01540"></a>01540   smux_stop();
<a name="l01541"></a>01541 
<a name="l01542"></a>01542   <span class="comment">/* Schedule first connection. */</span>
<a name="l01543"></a>01543   smux_event (SMUX_SCHEDULE, 0);
<a name="l01544"></a>01544 }
<a name="l01545"></a>01545 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="smux_8c.html">smux.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
