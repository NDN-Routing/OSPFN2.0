<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_advertise.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__advertise_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_advertise.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__advertise_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__advertise_8hdep" alt=""/></div>
<map name="bgpd_2bgp__advertise_8hdep" id="bgpd_2bgp__advertise_8hdep">
<area shape="rect" id="node3" href="bgp__advertise_8c.html" title="bgpd/bgp_advertise.c" alt="" coords="5,80,160,107"/><area shape="rect" id="node5" href="bgp__damp_8c.html" title="bgpd/bgp_damp.c" alt="" coords="185,80,319,107"/><area shape="rect" id="node7" href="bgp__packet_8c.html" title="bgpd/bgp_packet.c" alt="" coords="343,80,483,107"/><area shape="rect" id="node9" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="508,80,639,107"/><area shape="rect" id="node11" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="663,80,781,107"/><area shape="rect" id="node13" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="806,80,905,107"/></map>
</div>
</div>
<p><a href="bgp__advertise_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__advertise__fifo.html">bgp_advertise_fifo</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__advertise.html">bgp_advertise</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__adj__out.html">bgp_adj_out</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__adj__in.html">bgp_adj_in</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__synchronize.html">bgp_synchronize</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a6c9b3e6109c71a9db9ee88d2e58fb418">BGP_INFO_ADD</a>(N, A, TYPE)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a069022d11d28d09f8b29090ba5f89f6e">BGP_INFO_DEL</a>(N, A, TYPE)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a1ce2af1fd81e9240bc4d6d784338cf75">BGP_ADJ_IN_ADD</a>(N, A)&#160;&#160;&#160;BGP_INFO_ADD(N,A,adj_in)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#aef9983ec96ae91af692b72e0624be49a">BGP_ADJ_IN_DEL</a>(N, A)&#160;&#160;&#160;BGP_INFO_DEL(N,A,adj_in)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#aadafe41cc6e05191cb98c1beb10cc81a">BGP_ADJ_OUT_ADD</a>(N, A)&#160;&#160;&#160;BGP_INFO_ADD(N,A,adj_out)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">BGP_ADJ_OUT_DEL</a>(N, A)&#160;&#160;&#160;BGP_INFO_DEL(N,A,adj_out)</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a8723759e238564e96e1cf04d4d05bd5a">bgp_adj_out_set</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structprefix.html">prefix</a> *, struct <a class="el" href="structattr.html">attr</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, struct <a class="el" href="structbgp__info.html">bgp_info</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a84c95a6eb4ad5f3a2ab0e01606934559">bgp_adj_out_unset</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structprefix.html">prefix</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a3c2aa7ad4309d70f43e0a668d1663eb3">bgp_adj_out_remove</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *, struct <a class="el" href="structpeer.html">peer</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#ade93c74e25bcd8d11a1fe1e3bd873f59">bgp_adj_out_lookup</a> (struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structprefix.html">prefix</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, struct <a class="el" href="structbgp__node.html">bgp_node</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a20e4e3104095dc5b6d3121e023270492">bgp_adj_in_set</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a2a3b01b50197dc93f8a7cbde50bbff1c">bgp_adj_in_unset</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a830a84a05c2fddbaf9538ef27249acb1">bgp_adj_in_remove</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structbgp__adj__in.html">bgp_adj_in</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a30635bbd9314f9f68794b0885d2a2ede">bgp_advertise_clean</a> (struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#a5781dd9eaccebb80451d637134fe1d8f">bgp_sync_init</a> (struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8h.html#ae42a3c52034502c1c4f7076aaf75d416">bgp_sync_delete</a> (struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a1ce2af1fd81e9240bc4d6d784338cf75"></a><!-- doxytag: member="bgp_advertise.h::BGP_ADJ_IN_ADD" ref="a1ce2af1fd81e9240bc4d6d784338cf75" args="(N, A)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ADJ_IN_ADD</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;BGP_INFO_ADD(N,A,adj_in)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00125">125</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<a class="anchor" id="aef9983ec96ae91af692b72e0624be49a"></a><!-- doxytag: member="bgp_advertise.h::BGP_ADJ_IN_DEL" ref="aef9983ec96ae91af692b72e0624be49a" args="(N, A)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ADJ_IN_DEL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;BGP_INFO_DEL(N,A,adj_in)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00126">126</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<a class="anchor" id="aadafe41cc6e05191cb98c1beb10cc81a"></a><!-- doxytag: member="bgp_advertise.h::BGP_ADJ_OUT_ADD" ref="aadafe41cc6e05191cb98c1beb10cc81a" args="(N, A)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ADJ_OUT_ADD</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;BGP_INFO_ADD(N,A,adj_out)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00127">127</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae50f02c9dbfa3568f37d0c3eb4a93640"></a><!-- doxytag: member="bgp_advertise.h::BGP_ADJ_OUT_DEL" ref="ae50f02c9dbfa3568f37d0c3eb4a93640" args="(N, A)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ADJ_OUT_DEL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;BGP_INFO_DEL(N,A,adj_out)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00128">128</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6c9b3e6109c71a9db9ee88d2e58fb418"></a><!-- doxytag: member="bgp_advertise.h::BGP_INFO_ADD" ref="a6c9b3e6109c71a9db9ee88d2e58fb418" args="(N, A, TYPE)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_INFO_ADD</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">TYPE&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                                                \
    (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;                                 \
    (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;next = (N)-&gt;TYPE;                            \
    if ((N)-&gt;TYPE)                                    \
      (N)-&gt;TYPE-&gt;prev = (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>);                          \
    (N)-&gt;TYPE = (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>);                                  \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00106">106</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<a class="anchor" id="a069022d11d28d09f8b29090ba5f89f6e"></a><!-- doxytag: member="bgp_advertise.h::BGP_INFO_DEL" ref="a069022d11d28d09f8b29090ba5f89f6e" args="(N, A, TYPE)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_INFO_DEL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">N, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">A, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">TYPE&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                                                \
    if ((<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;next)                                    \
      (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;next-&gt;prev = (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;prev;                    \
    if ((<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;prev)                                    \
      (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;prev-&gt;next = (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;next;                    \
    else                                              \
      (N)-&gt;TYPE = (<a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>)-&gt;next;                          \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__advertise_8h_source.html#l00115">115</a> of file <a class="el" href="bgp__advertise_8h_source.html">bgp_advertise.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a830a84a05c2fddbaf9538ef27249acb1"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_in_remove" ref="a830a84a05c2fddbaf9538ef27249acb1" args="(struct bgp_node *, struct bgp_adj_in *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_remove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__in.html">bgp_adj_in</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00356">356</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (bai-&gt;attr);
  <a class="code" href="bgp__advertise_8h.html#aef9983ec96ae91af692b72e0624be49a">BGP_ADJ_IN_DEL</a> (rn, bai);
  <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (bai-&gt;peer); <span class="comment">/* adj_in peer reference */</span>
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9fc13e93770678a7f72d3b87899ad9bc">MTYPE_BGP_ADJ_IN</a>, bai);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a20e4e3104095dc5b6d3121e023270492"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_in_set" ref="a20e4e3104095dc5b6d3121e023270492" args="(struct bgp_node *, struct peer *, struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00332">332</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;adj_in; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
    {
      <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == <a class="code" href="structpeer.html">peer</a>)
    {
      <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> != <a class="code" href="structattr.html">attr</a>)
        {
          <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>);
          adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (<a class="code" href="structattr.html">attr</a>);
        }
      <span class="keywordflow">return</span>;
    }
    }
  adj = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9fc13e93770678a7f72d3b87899ad9bc">MTYPE_BGP_ADJ_IN</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__adj__in.html">bgp_adj_in</a>));
  adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (<a class="code" href="structpeer.html">peer</a>); <span class="comment">/* adj_in peer reference */</span>
  adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (<a class="code" href="structattr.html">attr</a>);
  <a class="code" href="bgp__advertise_8h.html#a1ce2af1fd81e9240bc4d6d784338cf75">BGP_ADJ_IN_ADD</a> (rn, adj);
  <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2a3b01b50197dc93f8a7cbde50bbff1c"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_in_unset" ref="a2a3b01b50197dc93f8a7cbde50bbff1c" args="(struct bgp_node *, struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00365">365</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;adj_in; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == <a class="code" href="structpeer.html">peer</a>)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span>;

  <a class="code" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (rn, adj);
  <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ade93c74e25bcd8d11a1fe1e3bd873f59"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_out_lookup" ref="ade93c74e25bcd8d11a1fe1e3bd873f59" args="(struct peer *, struct prefix *, afi_t, safi_t, struct bgp_node *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_adj_out_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00164">164</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;adj_out; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == <a class="code" href="structpeer.html">peer</a>)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">return</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> 
      ? (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> ? 1 : 0)
      : (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a> ? 1 : 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c2aa7ad4309d70f43e0a668d1663eb3"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_out_remove" ref="a3c2aa7ad4309d70f43e0a668d1663eb3" args="(struct bgp_node *, struct bgp_adj_out *, struct peer *, afi_t, safi_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_remove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00318">318</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (adj-&gt;attr)
    <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;attr);

  <span class="keywordflow">if</span> (adj-&gt;adv)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (<a class="code" href="structpeer.html">peer</a>, adj, afi, safi);

  <a class="code" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">BGP_ADJ_OUT_DEL</a> (rn, adj);
  <a class="code" href="bgp__advertise_8c.html#a612a1cbbfc083422b77b1ee6c5b556fa">bgp_adj_out_free</a> (adj);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8723759e238564e96e1cf04d4d05bd5a"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_out_set" ref="a8723759e238564e96e1cf04d4d05bd5a" args="(struct bgp_node *, struct peer *, struct prefix *, struct attr *, afi_t, safi_t, struct bgp_info *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00216">216</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Look for adjacency information. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>)
    {
      <span class="keywordflow">for</span> (adj = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == <a class="code" href="structpeer.html">peer</a>)
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! adj)
    {
      adj = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba40ea9ea629be7de14918430e19191584">MTYPE_BGP_ADJ_OUT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__adj__out.html">bgp_adj_out</a>));
      adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (<a class="code" href="structpeer.html">peer</a>); <span class="comment">/* adj_out peer reference */</span>
      
      <span class="keywordflow">if</span> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>)
        {
          <a class="code" href="bgp__advertise_8h.html#aadafe41cc6e05191cb98c1beb10cc81a">BGP_ADJ_OUT_ADD</a> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>, adj);
          <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
        }
    }

  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (<a class="code" href="structpeer.html">peer</a>, adj, afi, safi);
  
  adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="bgp__advertise_8c.html#a58ab65479e5f4991399f3e11e0aeb1ad">bgp_advertise_new</a> ();

  adv = adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
  adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a> = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> = <a class="code" href="bgp__route_8c.html#a58d087602593301ee3256a1ffd1321b8">bgp_info_lock</a> (<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>); <span class="comment">/* bgp_info adj_out reference */</span>
  
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>)
    adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> = <a class="code" href="bgp__advertise_8c.html#a098f21cf257aa81d21cdae2be64b5f31">bgp_advertise_intern</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi], <a class="code" href="structattr.html">attr</a>);
  <span class="keywordflow">else</span>
    adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> = <a class="code" href="bgp__advertise_8c.html#a7c19bf000480e3678ffbb11e69da0248">baa_new</a> ();
  adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a> = <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;

  <span class="comment">/* Add new advertisement to advertisement attribute list. */</span>
  <a class="code" href="bgp__advertise_8c.html#a6a9a2312c3fb09db5ec53fa34fb65639">bgp_advertise_add</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>, adv);

  <a class="code" href="zebra_8h.html#acb0a99d14f01877ba438989e05d4970e">FIFO_ADD</a> (&amp;<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>, &amp;adv-&gt;<a class="code" href="structbgp__advertise.html#aac8acd56d21ff32539a0a3e8658003e7">fifo</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a84c95a6eb4ad5f3a2ab0e01606934559"></a><!-- doxytag: member="bgp_advertise.h::bgp_adj_out_unset" ref="a84c95a6eb4ad5f3a2ab0e01606934559" args="(struct bgp_node *, struct peer *, struct prefix *, afi_t, safi_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00270">270</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Lookup existing adjacency, if it is not there return immediately.  */</span>
  <span class="keywordflow">for</span> (adj = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == <a class="code" href="structpeer.html">peer</a>)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Clearn up previous advertisement.  */</span>
  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (<a class="code" href="structpeer.html">peer</a>, adj, afi, safi);

  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
    {
      <span class="comment">/* We need advertisement structure.  */</span>
      adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="bgp__advertise_8c.html#a58ab65479e5f4991399f3e11e0aeb1ad">bgp_advertise_new</a> ();
      adv = adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
      adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a> = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
      adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a> = <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;

      <span class="comment">/* Add to synchronization entry for withdraw announcement.  */</span>
      <a class="code" href="zebra_8h.html#acb0a99d14f01877ba438989e05d4970e">FIFO_ADD</a> (&amp;<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>, &amp;adv-&gt;<a class="code" href="structbgp__advertise.html#aac8acd56d21ff32539a0a3e8658003e7">fifo</a>);

      <span class="comment">/* Schedule packet write. */</span>
      <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Remove myself from adjacency. */</span>
      <a class="code" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">BGP_ADJ_OUT_DEL</a> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>, adj);
      
      <span class="comment">/* Free allocated information.  */</span>
      <a class="code" href="bgp__advertise_8c.html#a612a1cbbfc083422b77b1ee6c5b556fa">bgp_adj_out_free</a> (adj);

      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a30635bbd9314f9f68794b0885d2a2ede"></a><!-- doxytag: member="bgp_advertise.h::bgp_advertise_clean" ref="a30635bbd9314f9f68794b0885d2a2ede" args="(struct peer *, struct bgp_adj_out *, afi_t, safi_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a>* bgp_advertise_clean </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00182">182</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;

  adv = <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
  baa = adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>;
  next = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (baa)
    {
      <span class="comment">/* Unlink myself from advertise attribute FIFO.  */</span>
      <a class="code" href="bgp__advertise_8c.html#aea49110d4a655058312d2ba26b61438b">bgp_advertise_delete</a> (baa, adv);

      <span class="comment">/* Fetch next advertise candidate. */</span>
      next = baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>;

      <span class="comment">/* Unintern BGP advertise attribute.  */</span>
      <a class="code" href="bgp__advertise_8c.html#af463f49af56e580001e83d7c420cd1af">bgp_advertise_unintern</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi], baa);
    }

  <span class="comment">/* Unlink myself from advertisement FIFO.  */</span>
  <a class="code" href="zebra_8h.html#a255d1f51241b85eb6a898952de88c4a5">FIFO_DEL</a> (adv);

  <span class="comment">/* Free memory.  */</span>
  <a class="code" href="bgp__advertise_8c.html#ad6043ca16a0ed903dbf1ab85282ec91d">bgp_advertise_free</a> (<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>);
  <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> <a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae42a3c52034502c1c4f7076aaf75d416"></a><!-- doxytag: member="bgp_advertise.h::bgp_sync_delete" ref="ae42a3c52034502c1c4f7076aaf75d416" args="(struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_sync_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00401">401</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi])
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf1405019a71b50bd9e2247d5b45c7fd1">MTYPE_BGP_SYNCHRONISE</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]);
    <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    
    <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi])
      <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi]);
    <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5781dd9eaccebb80451d637134fe1d8f"></a><!-- doxytag: member="bgp_advertise.h::bgp_sync_init" ref="a5781dd9eaccebb80451d637134fe1d8f" args="(struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_sync_init </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00381">381</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structbgp__synchronize.html">bgp_synchronize</a> *sync;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    sync = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf1405019a71b50bd9e2247d5b45c7fd1">MTYPE_BGP_SYNCHRONISE</a>, 
                    <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__synchronize.html">bgp_synchronize</a>));
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>);
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#a0d2b66173a0ee4567807124e92dc5c35">withdraw_low</a>);
    <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi] = sync;
    <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi] = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__advertise_8c.html#a024c3ed3c20c0c1e209cbfbd8ef5c4e3">baa_hash_key</a>, <a class="code" href="bgp__advertise_8c.html#aa0647daa6f29a221e51c4637ff74a096">baa_hash_cmp</a>);
      }
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__advertise_8h.html">bgp_advertise.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
