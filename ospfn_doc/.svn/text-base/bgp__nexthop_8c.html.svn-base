<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_nexthop.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__nexthop_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_nexthop.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zclient_8h_source.html">zclient.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="network_8h_source.html">network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__table_8h_source.html">bgpd/bgp_table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__nexthop_8h_source.html">bgpd/bgp_nexthop.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__damp_8h_source.html">bgpd/bgp_damp.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rib_8h_source.html">zebra/rib.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zserv_8h_source.html">zebra/zserv.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_nexthop.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__nexthop_8c__incl.png" border="0" usemap="#bgpd_2bgp__nexthop_8c" alt=""/></div>
<map name="bgpd_2bgp__nexthop_8c" id="bgpd_2bgp__nexthop_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1540,80,1607,107"/><area shape="rect" id="node61" href="command_8h.html" title="command.h" alt="" coords="2998,80,3089,107"/><area shape="rect" id="node67" href="thread_8h.html" title="thread.h" alt="" coords="3005,229,3077,256"/><area shape="rect" id="node69" href="log_8h.html" title="log.h" alt="" coords="2786,229,2837,256"/><area shape="rect" id="node75" href="prefix_8h.html" title="prefix.h" alt="" coords="3377,229,3444,256"/><area shape="rect" id="node77" href="zclient_8h.html" title="zclient.h" alt="" coords="3547,80,3619,107"/><area shape="rect" id="node79" href="stream_8h.html" title="stream.h" alt="" coords="3448,80,3523,107"/><area shape="rect" id="node82" href="network_8h.html" title="network.h" alt="" coords="3643,80,3725,107"/><area shape="rect" id="node85" href="memory_8h.html" title="memory.h" alt="" coords="3749,80,3832,107"/><area shape="rect" id="node87" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3857,80,3956,107"/><area shape="rect" id="node89" href="bgp__table_8h.html" title="bgpd/bgp_table.h" alt="" coords="3995,155,4125,181"/><area shape="rect" id="node91" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="4032,80,4163,107"/><area shape="rect" id="node94" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="4179,155,4299,181"/><area shape="rect" id="node96" href="bgp__nexthop_8h.html" title="bgpd/bgp_nexthop.h" alt="" coords="4401,80,4551,107"/><area shape="rect" id="node98" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="4237,80,4376,107"/><area shape="rect" id="node101" href="bgp__damp_8h.html" title="bgpd/bgp_damp.h" alt="" coords="4576,80,4709,107"/><area shape="rect" id="node103" href="rib_8h.html" title="zebra/rib.h" alt="" coords="3281,155,3364,181"/><area shape="rect" id="node106" href="zserv_8h.html" title="zebra/zserv.h" alt="" coords="3272,80,3373,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1739,155,1816,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="1841,155,1889,181"/><area shape="rect" id="node63" href="vector_8h.html" title="vector.h" alt="" coords="3075,155,3147,181"/><area shape="rect" id="node65" href="vty_8h.html" title="vty.h" alt="" coords="2850,155,2901,181"/><area shape="rect" id="node72" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="2926,155,3049,181"/></map>
</div>
</div>
<p><a href="bgp__nexthop_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__connected__ref.html">bgp_connected_ref</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">zlookup_query</a> (struct in_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">bnc_nexthop_add</a> (struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc, struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a397ba73019439e8097b55be5273eb52d">bnc_nexthop_free</a> (struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a42c42dbd2aec4d87486bab6bd18f6392">bnc_free</a> (struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a07fc0d82b45d58bd0d74e01e49e66d11">bgp_nexthop_same</a> (struct <a class="el" href="structnexthop.html">nexthop</a> *next1, struct <a class="el" href="structnexthop.html">nexthop</a> *next2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">bgp_nexthop_cache_changed</a> (struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc1, struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a30cf2195d772dfb889c717a86cd19629">bgp_nexthop_check_ebgp</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structbgp__info.html">bgp_info</a> *ri, int *changed, int *metricchanged)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (struct <a class="el" href="structbgp__table.html">bgp_table</a> *table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a460fcfcab9de444aa794ad7fe7524c6d">bgp_connected_add</a> (struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a3379269447e15a3519cc24cc3ae0de14">bgp_connected_delete</a> (struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#af096de71945dda80bbb7dbb1df574c90">bgp_nexthop_self</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a9a04a71252f2a9600023e71ffa8652d3">zlookup_read</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ade1fd78c93fe2d088aaace62cd5015f4">bgp_import_check</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t *igpmetric, struct in_addr *igpnexthop)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#abaca2350e2be77bb6c40fcb05381511f">zlookup_connect</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a40288c74e1b34a270e8b017b5ee1cc02">bgp_multiaccess_check_v4</a> (struct in_addr <a class="el" href="structnexthop.html">nexthop</a>, char *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ab10c459a9b6c4026808c3b94ae595905">DEFUN</a> (bgp_scan_time, bgp_scan_time_cmd,&quot;bgp scan-time &lt;5-60&gt;&quot;,&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Scanner interval (seconds)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a57a879bc86dd7cd4877ccf0aed297fb3">DEFUN</a> (no_bgp_scan_time, no_bgp_scan_time_cmd,&quot;no <a class="el" href="structbgp.html">bgp</a> scan-time&quot;, NO_STR&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ad3990760b1496b5768a38591fa424269">ALIAS</a> (no_bgp_scan_time, no_bgp_scan_time_val_cmd,&quot;no <a class="el" href="structbgp.html">bgp</a> scan-time &lt;5-60&gt;&quot;, NO_STR&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Scanner interval (seconds)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#abe56d4b0257e33694939ac6dd6ea41c9">bgp_config_write_scan_time</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ada667668bb4d77f673ace223f4303a2c">bgp_scan_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a6d4fc316fc1a9524f2550776f6aa2405">bgp_scan_finish</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">bgp_import_thread</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a> [AFI_MAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a> [AFI_MAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a> [AFI_MAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a> [AFI_MAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a> = NULL</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ad3990760b1496b5768a38591fa424269"></a><!-- doxytag: member="bgp_nexthop.c::ALIAS" ref="ad3990760b1496b5768a38591fa424269" args="(no_bgp_scan_time, no_bgp_scan_time_val_cmd,&quot;no bgp scan&#45;time &lt;5&#45;60&gt;&quot;, NO_STR&quot;BGP specific commands\n&quot;&quot;Configure background scanner interval\n&quot;&quot;Scanner interval (seconds)\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_bgp_scan_time&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_bgp_scan_time_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="structbgp.html">bgp</a> scan-time &lt;5-60&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Scanner interval (seconds)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01188">1188</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan is running%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan is not running%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan interval is %d%s&quot;</span>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Current BGP nexthop cache:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
    <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s valid [IGP metric %d]%s&quot;</span>,
           inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    <span class="keywordflow">else</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s invalid%s&quot;</span>,
           inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  {
    <span class="keywordtype">char</span> buf[BUFSIZ];
    <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]); 
         rn; 
         rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
      <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s valid [IGP metric %d]%s&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
             bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s invalid%s&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
  }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP connected route:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[AFI_IP]); 
       rn; 
       rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
    <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s/%d%s&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  {
    <span class="keywordtype">char</span> buf[BUFSIZ];

    <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[AFI_IP6]); 
         rn; 
         rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s/%d%s&quot;</span>,
         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
         rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abe56d4b0257e33694939ac6dd6ea41c9"></a><!-- doxytag: member="bgp_nexthop.c::bgp_config_write_scan_time" ref="abe56d4b0257e33694939ac6dd6ea41c9" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_config_write_scan_time </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01272">1272</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> != <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp scan-time %d%s&quot;</span>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a460fcfcab9de444aa794ad7fe7524c6d"></a><!-- doxytag: member="bgp_nexthop.c::bgp_connected_add" ref="a460fcfcab9de444aa794ad7fe7524c6d" args="(struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_connected_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00540">540</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *addr;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a> *bc;

  ifp = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;

  <span class="keywordflow">if</span> (! ifp)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
    <span class="keywordflow">return</span>;

  addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

  <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
    {
      <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
      <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    <span class="keywordflow">return</span>;

      rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
    {
      bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>++;
    }
      <span class="keywordflow">else</span>
    {
      bc = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a>));
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> = 1;
      rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bc;
    }
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
    {
      PREFIX_COPY_IPV6(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
      apply_mask_ipv6 ((<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);

      <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;p.u.prefix6))
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
    <span class="keywordflow">return</span>;

      rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
    {
      bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>++;
    }
      <span class="keywordflow">else</span>
    {
      bc = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a>));
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> = 1;
      rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bc;
    }
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3379269447e15a3519cc24cc3ae0de14"></a><!-- doxytag: member="bgp_nexthop.c::bgp_connected_delete" ref="a3379269447e15a3519cc24cc3ae0de14" args="(struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_connected_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00608">608</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *addr;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a> *bc;

  ifp = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
    <span class="keywordflow">return</span>;

  addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

  <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
    {
      <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
      <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    <span class="keywordflow">return</span>;

      rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p);
      <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span>;

      bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>--;
      <span class="keywordflow">if</span> (bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> == 0)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, bc);
      rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
    {
      PREFIX_COPY_IPV6(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
      apply_mask_ipv6 ((<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);

      <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;p.u.prefix6))
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
    <span class="keywordflow">return</span>;

      rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
      <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span>;

      bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
      bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>--;
      <span class="keywordflow">if</span> (bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> == 0)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, bc);
      rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad912ef0b18906df145ca0d90099add5e"></a><!-- doxytag: member="bgp_nexthop.c::bgp_import" ref="ad912ef0b18906df145ca0d90099add5e" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_import </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01022">1022</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keywordtype">int</span> valid;
  u_int32_t <a class="code" href="structmetric.html">metric</a>;
  <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <a class="code" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">bgp_import_thread</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a>);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Import timer expired.&quot;</span>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>; safi++)
      <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); rn;
           rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
        <span class="keywordflow">if</span> ((bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
          {
        <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
          <span class="keywordflow">continue</span>;

        valid = bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>;
        metric = bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>;
        <a class="code" href="structnexthop.html">nexthop</a> = bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>;

        <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a6bc6dc724e29fd024f008b87f02e4b54">BGP_FLAG_IMPORT_CHECK</a>)
            &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
          bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = <a class="code" href="bgp__nexthop_8c.html#ade1fd78c93fe2d088aaace62cd5015f4">bgp_import_check</a> (&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, &amp;bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>,
                                &amp;bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>);
        <span class="keywordflow">else</span>
          {
            bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 1;
            bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a> = 0;
            bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>.s_addr = 0;
          }

        <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> != valid)
          {
            <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>)
              <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bgp_static, afi, safi);
            <span class="keywordflow">else</span>
              <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi);
          }
        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>)
          {
            <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a> != metric
            || bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>.s_addr != <a class="code" href="structnexthop.html">nexthop</a>.s_addr
            || bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
              <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bgp_static, afi, safi);
          }
          }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ade1fd78c93fe2d088aaace62cd5015f4"></a><!-- doxytag: member="bgp_nexthop.c::bgp_import_check" ref="ade1fd78c93fe2d088aaace62cd5015f4" args="(struct prefix *p, u_int32_t *igpmetric, struct in_addr *igpnexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_import_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t *&#160;</td>
          <td class="paramname"><em>igpmetric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>igpnexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00920">920</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordtype">int</span> ret;
  u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, command;
  u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, marker;
  <span class="keywordtype">int</span> nbytes;
  <span class="keyword">struct </span>in_addr addr;
  <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
  u_int32_t <a class="code" href="structmetric.html">metric</a> = 0;
  u_char nexthop_num;
  u_char nexthop_type;

  <span class="comment">/* If lookup connection is not available return valid. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    {
      <span class="keywordflow">if</span> (igpmetric)
    *igpmetric = 0;
      <span class="keywordflow">return</span> 1;
    }

  <span class="comment">/* Send query to the lookup connection */</span>
  s = <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
  <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#ae2f9ecf7e0fa5362e68e4853506695bf">ZEBRA_IPV4_IMPORT_LOOKUP</a>);
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
  <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
  
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
  
  <span class="comment">/* Write the packet. */</span>
  ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));

  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;can&#39;t write to zlookup-&gt;sock&quot;</span>);
      close (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
      <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
      <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;zlookup-&gt;sock connection closed&quot;</span>);
      close (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
      <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
      <span class="keywordflow">return</span> 1;
    }

  <span class="comment">/* Get result. */</span>
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);

  <span class="comment">/* Fetch length. */</span>
  nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, 2);
  length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);

  <span class="comment">/* Fetch whole data. */</span>
  nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, length - 2);
  marker = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="keywordflow">if</span> (version != <a class="code" href="zclient_8h.html#a353879f7a2fe9365a57041c8870e8dec">ZSERV_VERSION</a> || marker != <a class="code" href="zebra_8h.html#a95ca8e88db92c66ea0c8bbb62cea622d">ZEBRA_HEADER_MARKER</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: socket %d version mismatch, marker %d, version %d&quot;</span>,
               __func__, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, marker, version);
      <span class="keywordflow">return</span> 0;
    }
    
  command = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  
  addr.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
  metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
  nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="comment">/* Set IGP metric value. */</span>
  <span class="keywordflow">if</span> (igpmetric)
    *igpmetric = metric;

  <span class="comment">/* If there is nexthop then this is active route. */</span>
  <span class="keywordflow">if</span> (nexthop_num)
    {
      <a class="code" href="structnexthop.html">nexthop</a>.s_addr = 0;
      nexthop_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      <span class="keywordflow">if</span> (nexthop_type == <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>)
    {
      <a class="code" href="structnexthop.html">nexthop</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
      <span class="keywordflow">if</span> (igpnexthop)
        *igpnexthop = <a class="code" href="structnexthop.html">nexthop</a>;
    }
      <span class="keywordflow">else</span>
    *igpnexthop = <a class="code" href="structnexthop.html">nexthop</a>;

      <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a40288c74e1b34a270e8b017b5ee1cc02"></a><!-- doxytag: member="bgp_nexthop.c::bgp_multiaccess_check_v4" ref="a40288c74e1b34a270e8b017b5ee1cc02" args="(struct in_addr nexthop, char *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_multiaccess_check_v4 </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01110">1110</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn1;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn2;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p1;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p2;
  <span class="keyword">struct </span>in_addr addr;
  <span class="keywordtype">int</span> ret;

  ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<a class="code" href="structpeer.html">peer</a>, &amp;addr);
  <span class="keywordflow">if</span> (! ret)
    <span class="keywordflow">return</span> 0;

  memset (&amp;p1, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
  p1.family = AF_INET;
  p1.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
  p1.u.prefix4 = <a class="code" href="structnexthop.html">nexthop</a>;
  memset (&amp;p2, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
  p2.family = AF_INET;
  p2.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
  p2.u.prefix4 = addr;

  <span class="comment">/* If bgp scan is not enabled, return invalid. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> 0;

  rn1 = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p1);
  <span class="keywordflow">if</span> (! rn1)
    <span class="keywordflow">return</span> 0;
  
  rn2 = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p2);
  <span class="keywordflow">if</span> (! rn2)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (rn1 == rn2)
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a59e226e6a257f87d506e096946e9dcdf"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_cache_changed" ref="a59e226e6a257f87d506e096946e9dcdf" args="(struct bgp_nexthop_cache *bnc1, struct bgp_nexthop_cache *bnc2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_nexthop_cache_changed </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td>
          <td class="paramname"><em>bnc1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td>
          <td class="paramname"><em>bnc2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00149">149</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *next1, *next2;

  <span class="keywordflow">if</span> (bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a> != bnc2-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>)
    <span class="keywordflow">return</span> 1;

  next1 = bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>;
  next2 = bnc2-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>;

  <span class="keywordflow">for</span> (i = 0; i &lt; bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>; i++)
    {
      <span class="keywordflow">if</span> (! <a class="code" href="bgp__nexthop_8c.html#a07fc0d82b45d58bd0d74e01e49e66d11">bgp_nexthop_same</a> (next1, next2))
    <span class="keywordflow">return</span> 1;

      next1 = next1-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
      next2 = next2-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="accb79777a8fe406464c11e435c913500"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_cache_reset" ref="accb79777a8fe406464c11e435c913500" args="(struct bgp_table *table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_nexthop_cache_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00395">395</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;

  <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
    <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <a class="code" href="bgp__nexthop_8c.html#a42c42dbd2aec4d87486bab6bd18f6392">bnc_free</a> (bnc);
    rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a30cf2195d772dfb889c717a86cd19629"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_check_ebgp" ref="a30cf2195d772dfb889c717a86cd19629" args="(afi_t afi, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_nexthop_check_ebgp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00174">174</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;

  <span class="comment">/* If zebra is not enabled return */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> 1;

  <span class="comment">/* Lookup the address is onlink or not. */</span>
  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    {
      rn = <a class="code" href="bgp__table_8c.html#afb88ad2431e100f2a29c6af43a1d168e">bgp_node_match_ipv4</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>);
      <span class="keywordflow">if</span> (rn)
    {
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
      <span class="keywordflow">return</span> 1;
    }
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
    <span class="keywordflow">return</span> 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
    {
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
        <span class="keywordflow">return</span> 1;

      rn = bgp_node_match_ipv6 (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>],
                      &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global);
      <span class="keywordflow">if</span> (rn)
        {
          <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
          <span class="keywordflow">return</span> 1;
        }
    }
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="add9ef5c38fe9bb5e1a0fd5d2975a1d36"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_lookup" ref="add9ef5c38fe9bb5e1a0fd5d2975a1d36" args="(afi_t afi, struct peer *peer, struct bgp_info *ri, int *changed, int *metricchanged)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_nexthop_lookup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname"><em>ri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>changed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>metricchanged</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00307">307</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
  <span class="keyword">struct </span>in_addr addr;

  <span class="comment">/* If lookup is not enabled, return valid. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    {
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
        ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;
      <span class="keywordflow">return</span> 1;
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
    <span class="keywordflow">return</span> bgp_nexthop_lookup_ipv6 (peer, ri, changed, metricchanged);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  addr = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.u.prefix4 = addr;

  <span class="comment">/* IBGP or ebgp-multihop */</span>
  rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
    {
      bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
    }
  <span class="keywordflow">else</span>
    {
      bnc = <a class="code" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">zlookup_query</a> (addr);
      <span class="keywordflow">if</span> (bnc)
    {
      <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *old;
      <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *oldrn;
      <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *oldbnc;

      <span class="keywordflow">if</span> (<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] == <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>])
        old = <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];
          <span class="keywordflow">else</span>
        old = <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];

          oldrn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (old, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
          <span class="keywordflow">if</span> (oldrn)
        {
          oldbnc = oldrn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;

          bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a> = <a class="code" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">bgp_nexthop_cache_changed</a> (bnc, oldbnc);

          <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> != oldbnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
            bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a> = 1;
        }
        }
    }
      <span class="keywordflow">else</span>
    {
      bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
      bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 0;
    }
      rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bnc;
    }

  <span class="keywordflow">if</span> (<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a>)
    *<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a> = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a>)
    *<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a> = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a>;

  <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> &amp;&amp; bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
    (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a>(ri))-&gt;igpmetric = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
  <span class="keywordflow">else</span> if (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
    ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;

  <span class="keywordflow">return</span> bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a07fc0d82b45d58bd0d74e01e49e66d11"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_same" ref="a07fc0d82b45d58bd0d74e01e49e66d11" args="(struct nexthop *next1, struct nexthop *next2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_nexthop_same </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>next1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>next2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00112">112</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> != next2-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">switch</span> (next1-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>:
      <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>))
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>:
    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aa38b852f0e7c729f7db77cb0c99030a5">ZEBRA_NEXTHOP_IFNAME</a>:
      <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> != next2-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aaeb29f4f9e313b846883f1d7462a43a7">ZEBRA_NEXTHOP_IPV6</a>:
      <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6))
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a7e61d5eb03f7ca37e73025b64e63966b">ZEBRA_NEXTHOP_IPV6_IFINDEX</a>:
    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a11d0a5703feb53099a70ca066bdd22f5">ZEBRA_NEXTHOP_IPV6_IFNAME</a>:
      <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6))
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> != next2-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    <span class="keywordflow">default</span>:
      <span class="comment">/* do nothing */</span>
      <span class="keywordflow">break</span>;
    }
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af096de71945dda80bbb7dbb1df574c90"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_self" ref="af096de71945dda80bbb7dbb1df574c90" args="(afi_t afi, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_nexthop_self </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00675">675</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node2, ifc))
    {
      p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      <span class="keywordflow">if</span> (p &amp;&amp; p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET 
          &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>))
        <span class="keywordflow">return</span> 1;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a372361ddaba88df1087f72b2108b401f"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan" ref="a372361ddaba88df1087f72b2108b401f" args="(afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_scan </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00410">410</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *bi;
  <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keywordtype">int</span> valid;
  <span class="keywordtype">int</span> current;
  <span class="keywordtype">int</span> changed;
  <span class="keywordtype">int</span> metricchanged;

  <span class="comment">/* Change cache. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[afi] == <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[afi])
    <a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[afi] = <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[afi];
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[afi] = <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[afi];

  <span class="comment">/* Get default bgp. */</span>
  bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
  <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Maximum prefix check */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
    <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_UNICAST, 1);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_MULTICAST, 1);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
    <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_MPLS_VPN, 1);
    }

  <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][SAFI_UNICAST]); rn;
       rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
    {
      <span class="keywordflow">for</span> (bi = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; bi; bi = next)
    {
      next = bi-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;

      <span class="keywordflow">if</span> (bi-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
        {
          changed = 0;
          metricchanged = 0;

          <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> == 1)
        valid = <a class="code" href="bgp__nexthop_8c.html#a30cf2195d772dfb889c717a86cd19629">bgp_nexthop_check_ebgp</a> (afi, bi-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
          <span class="keywordflow">else</span>
        valid = <a class="code" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (afi, bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>, bi,
                        &amp;changed, &amp;metricchanged);

          current = <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>) ? 1 : 0;

          <span class="keywordflow">if</span> (changed)
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a364ac84609844c369deadc56ea2ab24f">BGP_INFO_IGP_CHANGED</a>);
          <span class="keywordflow">else</span>
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a364ac84609844c369deadc56ea2ab24f">BGP_INFO_IGP_CHANGED</a>);

          <span class="keywordflow">if</span> (valid != current)
        {
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>))
            {
              <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
                           afi, SAFI_UNICAST);
              <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, bi, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
            }
          <span class="keywordflow">else</span>
            {
              <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, bi, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
              <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
                           afi, SAFI_UNICAST);
            }
        }

              <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][SAFI_UNICAST],
          <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
                  &amp;&amp;  bi-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a> )
                <span class="keywordflow">if</span> (<a class="code" href="bgp__damp_8c.html#a1cdac465054860376051b602d242b392">bgp_damp_scan</a> (bi, afi, SAFI_UNICAST))
          <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
                       afi, SAFI_UNICAST);
        }
    }
      <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, SAFI_UNICAST);
    }

  <span class="comment">/* Flash old cache. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[afi] == <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[afi])
    <a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (<a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[afi]);
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (<a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[afi]);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    {
      <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;scanning IPv4 Unicast routing tables&quot;</span>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;scanning IPv6 Unicast routing tables&quot;</span>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6d4fc316fc1a9524f2550776f6aa2405"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan_finish" ref="a6d4fc316fc1a9524f2550776f6aa2405" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_scan_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01317">1317</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]);
  <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]);
  <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]);
  <a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]);
  <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]);
  <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]);
  <a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="ada667668bb4d77f673ace223f4303a2c"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan_init" ref="ada667668bb4d77f673ace223f4303a2c" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_scan_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01280">1280</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a> = <a class="code" href="zclient_8c.html#aa521f2a71596b1dc50f76fcb57dff30b">zclient_new</a> ();
  <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
  <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#acf3591fb899408dc58cfe71cb2035571">t_connect</a> = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#abaca2350e2be77bb6c40fcb05381511f">zlookup_connect</a>, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>, 0);

  <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>;
  <a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a945d7320968bd182871ceb02991c4be5">BGP_IMPORT_INTERVAL_DEFAULT</a>;

  <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
  <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
  <a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];

  <a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
  <a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
  <a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>];
  <a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Make BGP scan thread. */</span>
  <a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, 
                                      <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
  <span class="comment">/* Make BGP import there. */</span>
  <a class="code" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">bgp_import_thread</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_scan_time_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_scan_time_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_scan_time_val_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_scan_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_scan_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_scan_cmd);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa5d17c798eec3207571cfd644288360b"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan_timer" ref="aa5d17c798eec3207571cfd644288360b" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_scan_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00517">517</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> =
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Performing BGP general scanning&quot;</span>);

  <a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42c42dbd2aec4d87486bab6bd18f6392"></a><!-- doxytag: member="bgp_nexthop.c::bnc_free" ref="a42c42dbd2aec4d87486bab6bd18f6392" args="(struct bgp_nexthop_cache *bnc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bnc_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td>
          <td class="paramname"><em>bnc</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00105">105</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__nexthop_8c.html#a397ba73019439e8097b55be5273eb52d">bnc_nexthop_free</a> (bnc);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7bf2d1c64c43b52c3863cd505145194e">MTYPE_BGP_NEXTHOP_CACHE</a>, bnc);
}
</pre></div>
</div>
</div>
<a class="anchor" id="acddb6967ad84d4d77ec26746a7655dfa"></a><!-- doxytag: member="bgp_nexthop.c::bnc_new" ref="acddb6967ad84d4d77ec26746a7655dfa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a>* bnc_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00099">99</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7bf2d1c64c43b52c3863cd505145194e">MTYPE_BGP_NEXTHOP_CACHE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8b2b42ce1359f2d6f4f855cb9af7f74"></a><!-- doxytag: member="bgp_nexthop.c::bnc_nexthop_add" ref="ac8b2b42ce1359f2d6f4f855cb9af7f74" args="(struct bgp_nexthop_cache *bnc, struct nexthop *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bnc_nexthop_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td>
          <td class="paramname"><em>bnc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00072">72</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>nexthop *last;

  <span class="keywordflow">for</span> (last = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>; last &amp;&amp; last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>; last = last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    ;
  <span class="keywordflow">if</span> (last)
    last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = nexthop;
  <span class="keywordflow">else</span>
    bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a> = nexthop;
  nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a> = last;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a397ba73019439e8097b55be5273eb52d"></a><!-- doxytag: member="bgp_nexthop.c::bnc_nexthop_free" ref="a397ba73019439e8097b55be5273eb52d" args="(struct bgp_nexthop_cache *bnc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bnc_nexthop_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *&#160;</td>
          <td class="paramname"><em>bnc</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00086">86</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span>nexthop *<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (nexthop = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>; nexthop; nexthop = next)
    {
      next = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, nexthop);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab10c459a9b6c4026808c3b94ae595905"></a><!-- doxytag: member="bgp_nexthop.c::DEFUN" ref="ab10c459a9b6c4026808c3b94ae595905" args="(bgp_scan_time, bgp_scan_time_cmd,&quot;bgp scan&#45;time &lt;5&#45;60&gt;&quot;,&quot;BGP specific commands\n&quot;&quot;Configure background scanner interval\n&quot;&quot;Scanner interval (seconds)\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">bgp_scan_time&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bgp_scan_time_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;bgp scan-time &lt;5-60&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Scanner interval (seconds)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01150">1150</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = atoi (argv[0]);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a>);
      <a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
    }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a57a879bc86dd7cd4877ccf0aed297fb3"></a><!-- doxytag: member="bgp_nexthop.c::DEFUN" ref="a57a879bc86dd7cd4877ccf0aed297fb3" args="(no_bgp_scan_time, no_bgp_scan_time_cmd,&quot;no bgp scan&#45;time&quot;, NO_STR&quot;BGP specific commands\n&quot;&quot;Configure background scanner interval\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_bgp_scan_time&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_bgp_scan_time_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="structbgp.html">bgp</a> scan-time&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;BGP specific commands\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Configure background scanner interval\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01169">1169</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a>);
      <a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
    }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abaca2350e2be77bb6c40fcb05381511f"></a><!-- doxytag: member="bgp_nexthop.c::zlookup_connect" ref="abaca2350e2be77bb6c40fcb05381511f" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int zlookup_connect </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l01087">1087</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structzclient.html">zclient</a> *<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>;

  zlookup = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  zlookup-&gt;<a class="code" href="structzclient.html#acf3591fb899408dc58cfe71cb2035571">t_connect</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> != -1)
    <span class="keywordflow">return</span> 0;

<span class="preprocessor">#ifdef HAVE_TCP_ZEBRA</span>
<span class="preprocessor"></span>  zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = <a class="code" href="zclient_8c.html#ac937966a23dbff10b311175341da2d57">zclient_socket</a> ();
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = <a class="code" href="zclient_8c.html#a1a87f3eaa2f08161b64feebfda6bf3fd">zclient_socket_un</a> (ZEBRA_SERV_PATH);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_TCP_ZEBRA */</span>
  <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1ee1637836dee8282d73ba50a5cf603"></a><!-- doxytag: member="bgp_nexthop.c::zlookup_query" ref="ab1ee1637836dee8282d73ba50a5cf603" args="(struct in_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> * zlookup_query </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00770">770</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;

  <span class="comment">/* Check socket. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  s = <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
  <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#a7ed7741500eb4f178369418725aef502">ZEBRA_IPV4_NEXTHOP_LOOKUP</a>);
  <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;addr);
  
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
  
  ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;can&#39;t write to zlookup-&gt;sock&quot;</span>);
      close (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
      <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;zlookup-&gt;sock connection closed&quot;</span>);
      close (<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
      <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">return</span> <a class="code" href="bgp__nexthop_8c.html#a9a04a71252f2a9600023e71ffa8652d3">zlookup_read</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9a04a71252f2a9600023e71ffa8652d3"></a><!-- doxytag: member="bgp_nexthop.c::zlookup_read" ref="a9a04a71252f2a9600023e71ffa8652d3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a>* zlookup_read </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00698">698</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  uint16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  u_char marker;
  u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
  uint16_t command;
  <span class="keywordtype">int</span> nbytes;
  <span class="keyword">struct </span>in_addr raddr;
  uint32_t <a class="code" href="structmetric.html">metric</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  u_char nexthop_num;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;

  s = <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);

  nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, 2);
  length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);

  nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, length - 2);
  marker = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  
  <span class="keywordflow">if</span> (version != <a class="code" href="zclient_8h.html#a353879f7a2fe9365a57041c8870e8dec">ZSERV_VERSION</a> || marker != <a class="code" href="zebra_8h.html#a95ca8e88db92c66ea0c8bbb62cea622d">ZEBRA_HEADER_MARKER</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: socket %d version mismatch, marker %d, version %d&quot;</span>,
               __func__, <a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, marker, version);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    
  command = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  
  raddr.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
  metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
  nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="keywordflow">if</span> (nexthop_num)
    {
      bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
      bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 1;
      bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> = <a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
      bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a> = <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>;

      <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>; i++)
    {
      nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
      nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      <span class="keywordflow">switch</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
        {
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>:
          nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>:
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aa38b852f0e7c729f7db77cb0c99030a5">ZEBRA_NEXTHOP_IFNAME</a>:
          nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
          <span class="keywordflow">break</span>;
            <span class="keywordflow">default</span>:
              <span class="comment">/* do nothing */</span>
              <span class="keywordflow">break</span>;
        }
      <a class="code" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">bnc_nexthop_add</a> (bnc, nexthop);
    }
    }
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> bnc;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a547cb094783f35603d0fca6edce60316"></a><!-- doxytag: member="bgp_nexthop.c::bgp_connected_table" ref="a547cb094783f35603d0fca6edce60316" args="[AFI_MAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__table.html">bgp_table</a>* <a class="el" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[AFI_MAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00065">65</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="a7b58397e9876cf8c9b7428864aa69806"></a><!-- doxytag: member="bgp_nexthop.c::bgp_import_interval" ref="a7b58397e9876cf8c9b7428864aa69806" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00057">57</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="ab16648923ec4f40f271fbf780e43fe89"></a><!-- doxytag: member="bgp_nexthop.c::bgp_import_thread" ref="ab16648923ec4f40f271fbf780e43fe89" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* <a class="el" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">bgp_import_thread</a> = NULL<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00051">51</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="a1fb5002cf21081a398eb6cb4fda46d6e"></a><!-- doxytag: member="bgp_nexthop.c::bgp_nexthop_cache_table" ref="a1fb5002cf21081a398eb6cb4fda46d6e" args="[AFI_MAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__table.html">bgp_table</a>* <a class="el" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[AFI_MAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00060">60</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="a323a8785a2a7c1df4e2cfd5841bc5758"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan_interval" ref="a323a8785a2a7c1df4e2cfd5841bc5758" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00054">54</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="ae1d26e6bb49112945dc9582df4b6b0fa"></a><!-- doxytag: member="bgp_nexthop.c::bgp_scan_thread" ref="ae1d26e6bb49112945dc9582df4b6b0fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* <a class="el" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = NULL<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00048">48</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="acf30d144fb6ca45eb8ff9b581c29f560"></a><!-- doxytag: member="bgp_nexthop.c::cache1_table" ref="acf30d144fb6ca45eb8ff9b581c29f560" args="[AFI_MAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__table.html">bgp_table</a>* <a class="el" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[AFI_MAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00061">61</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5b9d57ec69a5e4a98da6e0bbb9755ac1"></a><!-- doxytag: member="bgp_nexthop.c::cache2_table" ref="a5b9d57ec69a5e4a98da6e0bbb9755ac1" args="[AFI_MAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__table.html">bgp_table</a>* <a class="el" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[AFI_MAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00062">62</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
<a class="anchor" id="aa54c664e987a917b6cb9fa2510cf8f15"></a><!-- doxytag: member="bgp_nexthop.c::zlookup" ref="aa54c664e987a917b6cb9fa2510cf8f15" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzclient.html">zclient</a>* <a class="el" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a> = NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__nexthop_8c_source.html#l00068">68</a> of file <a class="el" href="bgp__nexthop_8c_source.html">bgp_nexthop.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__nexthop_8c.html">bgp_nexthop.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:12 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
