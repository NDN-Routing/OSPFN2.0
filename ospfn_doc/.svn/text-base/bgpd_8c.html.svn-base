<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgpd.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgpd_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgpd.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="buffer_8h_source.html">buffer.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="network_8h_source.html">network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="filter_8h_source.html">filter.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="str_8h_source.html">str.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="plist_8h_source.html">plist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="workqueue_8h_source.html">workqueue.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__table_8h_source.html">bgpd/bgp_table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__aspath_8h_source.html">bgpd/bgp_aspath.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__dump_8h_source.html">bgpd/bgp_dump.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__community_8h_source.html">bgpd/bgp_community.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__regex_8h_source.html">bgpd/bgp_regex.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__clist_8h_source.html">bgpd/bgp_clist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__fsm_8h_source.html">bgpd/bgp_fsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__packet_8h_source.html">bgpd/bgp_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__zebra_8h_source.html">bgpd/bgp_zebra.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__open_8h_source.html">bgpd/bgp_open.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__filter_8h_source.html">bgpd/bgp_filter.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__nexthop_8h_source.html">bgpd/bgp_nexthop.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__damp_8h_source.html">bgpd/bgp_damp.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__mplsvpn_8h_source.html">bgpd/bgp_mplsvpn.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__advertise_8h_source.html">bgpd/bgp_advertise.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__network_8h_source.html">bgpd/bgp_network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__vty_8h_source.html">bgpd/bgp_vty.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgpd.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgpd_8c__incl.png" border="0" usemap="#bgpd_2bgpd_8c" alt=""/></div>
<map name="bgpd_2bgpd_8c" id="bgpd_2bgpd_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1457,155,1524,181"/><area shape="rect" id="node29" href="str_8h.html" title="str.h" alt="" coords="693,229,741,256"/><area shape="rect" id="node31" href="prefix_8h.html" title="prefix.h" alt="" coords="6,155,73,181"/><area shape="rect" id="node33" href="sockunion_8h.html" title="sockunion.h" alt="" coords="101,229,195,256"/><area shape="rect" id="node35" href="thread_8h.html" title="thread.h" alt="" coords="273,80,345,107"/><area shape="rect" id="node37" href="buffer_8h.html" title="buffer.h" alt="" coords="370,80,437,107"/><area shape="rect" id="node39" href="stream_8h.html" title="stream.h" alt="" coords="5,80,80,107"/><area shape="rect" id="node42" href="command_8h.html" title="command.h" alt="" coords="514,80,605,107"/><area shape="rect" id="node45" href="network_8h.html" title="network.h" alt="" coords="631,80,713,107"/><area shape="rect" id="node47" href="memory_8h.html" title="memory.h" alt="" coords="737,80,820,107"/><area shape="rect" id="node49" href="filter_8h.html" title="filter.h" alt="" coords="845,80,904,107"/><area shape="rect" id="node51" href="routemap_8h.html" title="routemap.h" alt="" coords="929,80,1020,107"/><area shape="rect" id="node54" href="log_8h.html" title="log.h" alt="" coords="1045,80,1096,107"/><area shape="rect" id="node56" href="plist_8h.html" title="plist.h" alt="" coords="1121,80,1180,107"/><area shape="rect" id="node58" href="linklist_8h.html" title="linklist.h" alt="" coords="1205,80,1275,107"/><area shape="rect" id="node60" href="workqueue_8h.html" title="workqueue.h" alt="" coords="1299,80,1399,107"/><area shape="rect" id="node62" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="98,155,197,181"/><area shape="rect" id="node65" href="bgp__table_8h.html" title="bgpd/bgp_table.h" alt="" coords="1928,155,2059,181"/><area shape="rect" id="node67" href="bgp__aspath_8h.html" title="bgpd/bgp_aspath.h" alt="" coords="1634,80,1773,107"/><area shape="rect" id="node69" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="1799,80,1929,107"/><area shape="rect" id="node72" href="bgp__dump_8h.html" title="bgpd/bgp_dump.h" alt="" coords="1953,80,2087,107"/><area shape="rect" id="node74" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="2401,80,2540,107"/><area shape="rect" id="node76" href="bgp__attr_8h.html" title="bgp_attr.h" alt="" coords="2280,155,2365,181"/><area shape="rect" id="node78" href="bgp__community_8h.html" title="bgpd/bgp_community.h" alt="" coords="2212,80,2377,107"/><area shape="rect" id="node81" href="bgp__regex_8h.html" title="bgpd/bgp_regex.h" alt="" coords="1423,80,1557,107"/><area shape="rect" id="node84" href="bgp__clist_8h.html" title="bgpd/bgp_clist.h" alt="" coords="2565,80,2688,107"/><area shape="rect" id="node86" href="bgp__fsm_8h.html" title="bgpd/bgp_fsm.h" alt="" coords="2713,80,2833,107"/><area shape="rect" id="node88" href="bgp__packet_8h.html" title="bgpd/bgp_packet.h" alt="" coords="2858,80,2997,107"/><area shape="rect" id="node90" href="bgp__zebra_8h.html" title="bgpd/bgp_zebra.h" alt="" coords="3022,80,3153,107"/><area shape="rect" id="node92" href="bgp__open_8h.html" title="bgpd/bgp_open.h" alt="" coords="3179,80,3309,107"/><area shape="rect" id="node94" href="bgp__filter_8h.html" title="bgpd/bgp_filter.h" alt="" coords="3334,80,3460,107"/><area shape="rect" id="node96" href="bgp__nexthop_8h.html" title="bgpd/bgp_nexthop.h" alt="" coords="3485,80,3635,107"/><area shape="rect" id="node98" href="bgp__damp_8h.html" title="bgpd/bgp_damp.h" alt="" coords="3660,80,3793,107"/><area shape="rect" id="node100" href="bgp__mplsvpn_8h.html" title="bgpd/bgp_mplsvpn.h" alt="" coords="3818,80,3968,107"/><area shape="rect" id="node102" href="bgp__advertise_8h.html" title="bgpd/bgp_advertise.h" alt="" coords="3993,80,4148,107"/><area shape="rect" id="node104" href="bgp__network_8h.html" title="bgpd/bgp_network.h" alt="" coords="4173,80,4320,107"/><area shape="rect" id="node106" href="bgp__vty_8h.html" title="bgpd/bgp_vty.h" alt="" coords="4345,80,4463,107"/></map>
</div>
</div>
<p><a href="bgpd_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpeer__flag__action.html">peer_flag_action</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a8950077f458e540a8b4292539e0120cf">ONE_DAY_SECOND</a>&#160;&#160;&#160;60*60*24</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a762bcaaf64d0f21361ca5c0262b49f33">ONE_WEEK_SECOND</a>&#160;&#160;&#160;60*60*24*7</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a> { <a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a>, 
<a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>, 
<a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>, 
<a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab392af01542bb12c0dc9afa6b0950b7c">bgp_option_set</a> (int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a3249e23250280c76087965fed358b866">bgp_option_unset</a> (int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab7a06ec3b706252810fd639d03b31fe1">bgp_flag_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a12be440f9d0b2a52fbe48c83088a837d">bgp_flag_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int <a class="el" href="structconfig.html">config</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int <a class="el" href="structconfig.html">config</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, int <a class="el" href="structconfig.html">config</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a95a081ca99d2713d2405c00786db1193">bgp_router_id_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct in_addr *<a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a341222b5ea5b3772a952a52e79bba6cd">bgp_cluster_id_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct in_addr *cluster_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a58cc6036dac01f3e5892d199f756ce72">bgp_cluster_id_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">time_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae87980b465ace17b18089991d4579648">bgp_timers_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, u_int32_t keepalive, u_int32_t <a class="el" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a0931c3901f337a3c963647efcdf0cb8b">bgp_timers_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a8634ba5308614e954f34100dc334c182">bgp_confederation_id_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a71ec39b6ecf9756a16ea2eefc6b47991">bgp_confederation_id_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae1e4e9e26cc2fd322cdb8b405b617275">bgp_confederation_peers_add</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ad445ede26e20d26248fb3d107f1491c0">bgp_confederation_peers_remove</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa1602d8bb59616ec52a449dd588304e1">bgp_default_local_preference_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, u_int32_t local_pref)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#acaec882d19a370590305157ce569a748">bgp_default_local_preference_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a> (struct <a class="el" href="structpeer.html">peer</a> *p1, struct <a class="el" href="structpeer.html">peer</a> *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a170112becd0b52c5fe1c41af90881d8e">peer_global_config_reset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a6dcc47c3bfcd4236ed9ce1a32804159b">peer_free</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (union <a class="el" href="unionsockunion.html">sockunion</a> *su, struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#afdbdc29e7fde5d280e9ab2b27a781cd2">peer_create_accept</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a6cf9268104f8fa74c5b92ecd54a757d8">peer_remote_as</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, union <a class="el" href="unionsockunion.html">sockunion</a> *su, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a238a578363f00dd89e73738ee5f518c4">peer_activate</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a4b69528ca90f901bf13e8bb712aaff67">peer_deactivate</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a693e769f899359a43259c2940f31546b">peer_group_cmp</a> (struct <a class="el" href="structpeer__group.html">peer_group</a> *g1, struct <a class="el" href="structpeer__group.html">peer_group</a> *g2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a3992a10a8ebe6e68a3477157c4b2500a">peer_group_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af5931e17119614624eb34e56765bed1d">peer_group_free</a> (struct <a class="el" href="structpeer__group.html">peer_group</a> *group)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a6711e16446081f50f78d0d119c4f766c">peer_group_get</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (struct <a class="el" href="structpeer__group.html">peer_group</a> *group, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a65259d64d50c78f602e4455cec44292a">peer_group_remote_as</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, const char *group_name, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a11534c9662beb30137fc8df33822044c">peer_group_delete</a> (struct <a class="el" href="structpeer__group.html">peer_group</a> *group)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab00980e8d334e36d3f6f498860cef27a">peer_group_remote_as_delete</a> (struct <a class="el" href="structpeer__group.html">peer_group</a> *group)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a97e6521400a139b83ca7f1503f853f9a">peer_group_bind</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, union <a class="el" href="unionsockunion.html">sockunion</a> *su, struct <a class="el" href="structpeer__group.html">peer_group</a> *group, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a24e54015a4ae245729350609b57b21fb">peer_group_unbind</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structpeer__group.html">peer_group</a> *group, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a9df198f45ee2bcdf5601560fc35fd713">bgp_create</a> (<a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aff4b30a264b94877ac5cf295aa0b51f9">bgp_lookup</a> (<a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a6922211c65b05f362d1d2ba029965b66">bgp_get</a> (struct <a class="el" href="structbgp.html">bgp</a> **bgp_val, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a1f973ab34674a55e17934bca3e2c8b4d">bgp_delete</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">bgp_free</a> (struct <a class="el" href="structbgp.html">bgp</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, union <a class="el" href="unionsockunion.html">sockunion</a> *su)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a38fe2d829b66f299b42e47bd2d3d5a6c">peer_lookup_with_open</a> (union <a class="el" href="unionsockunion.html">sockunion</a> *su, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as, struct in_addr *remote_id, int *as)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, enum <a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a> <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (const struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> *action_list, int size, struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> *action, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t flag, int set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae0cc6e89358c892926f731aedc11f406">peer_flag_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a1d2f669d9871f7287dcd16c75c92ba5a">peer_flag_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t flag, int set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a56de1c971af44a0e4c8ed48c3dbae891">peer_af_flag_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a4df342066c91373d533a672726c8a128">peer_ebgp_multihop_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, int ttl)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#adac0c658fbf7d2802f329e017128d545">peer_ebgp_multihop_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a9e0bc271af1dfa4277d36ea632a70178">peer_description_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, char *<a class="el" href="structdesc.html">desc</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab492e26614fa5960ea9b23c18ea03b81">peer_description_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a96352fe742a75db61595d893031cd72c">peer_update_source_if_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, const char *ifname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#adbb712cdc80345160019521cbe858fbf">peer_update_source_addr_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, union <a class="el" href="unionsockunion.html">sockunion</a> *su)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a9faec1e151a495bae9ff8ef9b591912b">peer_update_source_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aee9a8e4b3ede4e3e3570158471cd243d">peer_default_originate_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, const char *<a class="el" href="structrmap.html">rmap</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5d77cf393fc2332d85b2b9d6b3d26033">peer_default_originate_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aefbfb67ac02cc3eb6152e9daff8a55c0">peer_port_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int16_t port)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a2c7f87a9450bb96edfe282e805a1913f">peer_port_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a6b15be4d41092baac69c01b64569077e">peer_weight_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int16_t weight)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a373d6c87af10908723300c63055044dc">peer_weight_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af5ccb9a71915cc9b34eadfb26ef05697">peer_timers_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t keepalive, u_int32_t <a class="el" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#adff2f4a5a13adecb3b2bf70681cc8a24">peer_timers_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#abe0752af9abfb675ac6d613fea5a66a6">peer_timers_connect_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t connect)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a72e155cccc4fbe340c37a10801e5802e">peer_timers_connect_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a668d8118bebaccc3de412436f8d0892e">peer_advertise_interval_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_int32_t routeadv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a29b0cb85c4548d2ac1b9ba65101067d3">peer_advertise_interval_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a86f61a67f39c2ff8381a5e396631d653">peer_interface_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, const char *<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa201b234d81b580955116df1a401a387">peer_interface_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab1a0b306bfb4091b7855ca490b18eaec">peer_allowas_in_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int allow_num)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a424c0f74cabfc988bb05dbd0371a9886">peer_allowas_in_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ac5ad8324adf311770d3b86530e576077">peer_local_as_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as, int no_prepend)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ab7cb8ea066eeb90ee754ca517a914429">peer_local_as_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a389e4630f10a9eac07f62095781d11d2">peer_password_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, const char *<a class="el" href="structpassword.html">password</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a87df2abeb771cd2d84103ff6a6ecd99e">peer_password_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#afc8c396e38cea0faaa1c08f915acb0c0">peer_distribute_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa0e0aaa9973c6e8766af52084c844f39">peer_distribute_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a> (struct <a class="el" href="structaccess__list.html">access_list</a> *access)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a38fdd742a49d061566ad1e117d10facb">peer_prefix_list_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a78c9d2a477af78eeff1ac55aebba0890">peer_prefix_list_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a> (struct <a class="el" href="structprefix__list.html">prefix_list</a> *plist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a747ff9ae059e9102dff1eb9d6926dded">peer_aslist_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#acbc965dbac634f666f7b3d4b910f68e7">peer_aslist_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a4c18f265e0444e0ed87dc66ca8ad8af9">peer_route_map_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ad5cedbe92571829f5979cd571934cb80">peer_route_map_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int direct)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af11bfd2d13e4fddd3c70995d04549dac">peer_unsuppress_map_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a8c1efb3867b8216c5e153dd8f004bbd3">peer_unsuppress_map_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a8dd962e630b1eee089dce4a78a1b719e">peer_maximum_prefix_set</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t max, u_char threshold, int warning, u_int16_t restart)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a1b96b3d77022efc99b238f4fced414f0">peer_maximum_prefix_unset</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aeaa590e7313d03ba1c7418ca2016bf90">peer_clear</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a81cd47b32828ea9f93c32970a08f52fa">peer_clear_soft</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, enum <a class="el" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656">bgp_clear_type</a> stype)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#acf827381bb67155dd3f9ec490bc453ff">peer_uptime</a> (time_t uptime2, char *buf, size_t len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a4bd09c948e7a109516a5a1988b9b3ac5">bgp_config_write_filter</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int *write)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ac8c52692873e7d55916cc4c7f62d9292">bgp_config_write</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#ae18826e3ba6a2d16c64726decaa1ab54">bgp_master_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#aa084e07f4225e6b0938cce4ad4877404">bgp_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a64275e98cbe004326cffb34d93bbdb32">bgp_terminate</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__master.html">bgp_master</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a65ecd7a9ec0c8f969263cd6aa0452d69">bgp_master</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__master.html">bgp_master</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcommunity__list__handler.html">community_list_handler</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">bgp_clist</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">peer_flag_action_list</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">peer_af_flag_action_list</a> []</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a8950077f458e540a8b4292539e0120cf"></a><!-- doxytag: member="bgpd.c::ONE_DAY_SECOND" ref="a8950077f458e540a8b4292539e0120cf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ONE_DAY_SECOND&#160;&#160;&#160;60*60*24</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a762bcaaf64d0f21361ca5c0262b49f33"></a><!-- doxytag: member="bgpd.c::ONE_WEEK_SECOND" ref="a762bcaaf64d0f21361ca5c0262b49f33" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ONE_WEEK_SECOND&#160;&#160;&#160;60*60*24*7</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a2cc220f775286a01b597cc3095131854"></a><!-- doxytag: member="bgpd.c::peer_change_type" ref="a2cc220f775286a01b597cc3095131854" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953"></a><!-- doxytag: member="peer_change_none" ref="a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953" args="" -->peer_change_none</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391"></a><!-- doxytag: member="peer_change_reset" ref="a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391" args="" -->peer_change_reset</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913"></a><!-- doxytag: member="peer_change_reset_in" ref="a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913" args="" -->peer_change_reset_in</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c"></a><!-- doxytag: member="peer_change_reset_out" ref="a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c" args="" -->peer_change_reset_out</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02245">2245</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a>,
  <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>,
  <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>,
  <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>,
};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a57400e51b671bd48e19b86df877be1e9"></a><!-- doxytag: member="bgpd.c::bgp_clock" ref="a57400e51b671bd48e19b86df877be1e9" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">time_t bgp_clock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00247">247</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval tv;

  <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a>(<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;tv);
  <span class="keywordflow">return</span> tv.tv_sec;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a341222b5ea5b3772a952a52e79bba6cd"></a><!-- doxytag: member="bgpd.c::bgp_cluster_id_set" ref="a341222b5ea5b3772a952a52e79bba6cd" args="(struct bgp *bgp, struct in_addr *cluster_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_cluster_id_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>cluster_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00188">188</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
      &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>, cluster_id))
    <span class="keywordflow">return</span> 0;

  <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>, cluster_id);
  <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>);

  <span class="comment">/* Clear all IBGP peer. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ae187eb186064d2d9ff73c02556a511ee">PEER_DOWN_CLID_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a58cc6036dac01f3e5892d199f756ce72"></a><!-- doxytag: member="bgpd.c::bgp_cluster_id_unset" ref="a58cc6036dac01f3e5892d199f756ce72" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_cluster_id_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00217">217</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>))
    <span class="keywordflow">return</span> 0;

  bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>.s_addr = 0;
  <a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>);

  <span class="comment">/* Clear all IBGP peer. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ae187eb186064d2d9ff73c02556a511ee">PEER_DOWN_CLID_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8634ba5308614e954f34100dc334c182"></a><!-- doxytag: member="bgpd.c::bgp_confederation_id_set" ref="a8634ba5308614e954f34100dc334c182" args="(struct bgp *bgp, as_t as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_confederation_id_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00277">277</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keywordtype">int</span> already_confed;

  <span class="keywordflow">if</span> (as == 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ab19c32ba33df13784a430af4238676b4">BGP_ERR_INVALID_AS</a>;

  <span class="comment">/* Remember - were we doing confederation before? */</span>
  already_confed = <a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);
  bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a> = as;
  <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);

  <span class="comment">/* If we were doing confederation already, this is just an external</span>
<span class="comment">     AS change.  Just Reset EBGP sessions, not CONFED sessions.  If we</span>
<span class="comment">     were not doing confederation before, reset all EBGP sessions.  */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="comment">/* We&#39;re looking for peers who&#39;s AS is not local or part of our</span>
<span class="comment">     confederation.  */</span>
      <span class="keywordflow">if</span> (already_confed)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
        {
          peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = as;
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }

          <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
        }
    }
      <span class="keywordflow">else</span>
    {
      <span class="comment">/* Not doign confederation before, so reset every non-local</span>
<span class="comment">         session */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
        {
          <span class="comment">/* Reset the local_as to be our EBGP one */</span>
          <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
        peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = as;
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }
          <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71ec39b6ecf9756a16ea2eefc6b47991"></a><!-- doxytag: member="bgpd.c::bgp_confederation_id_unset" ref="a71ec39b6ecf9756a16ea2eefc6b47991" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_confederation_id_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00338">338</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a> = 0;
  <a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);
      
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="comment">/* We&#39;re looking for peers who&#39;s AS is not local */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
           {
             peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
             <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
           }

      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1e4e9e26cc2fd322cdb8b405b617275"></a><!-- doxytag: member="bgpd.c::bgp_confederation_peers_add" ref="ae1e4e9e26cc2fd322cdb8b405b617275" args="(struct bgp *bgp, as_t as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_confederation_peers_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00384">384</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1d00d5178ab602009cb2918fac9edf1b">BGP_ERR_INVALID_BGP</a>;

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ab19c32ba33df13784a430af4238676b4">BGP_ERR_INVALID_AS</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, as))
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>)
    bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, 
                  bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>,
                  (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> + 1) * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));
  <span class="keywordflow">else</span>
    bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, 
                 (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> + 1) * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));

  bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>] = as;
  bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>++;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == as)
        {
          peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d45f38dac363e4f656eff0364acbe0c">PEER_DOWN_CONFED_PEER_CHANGE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                                  <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }
          <span class="keywordflow">else</span>
            <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f0461d82606ff0bf6133063515bf15c"></a><!-- doxytag: member="bgpd.c::bgp_confederation_peers_check" ref="a4f0461d82606ff0bf6133063515bf15c" args="(struct bgp *bgp, as_t as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_confederation_peers_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00368">368</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i] == as)
      <span class="keywordflow">return</span> 1;
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad445ede26e20d26248fb3d107f1491c0"></a><!-- doxytag: member="bgpd.c::bgp_confederation_peers_remove" ref="ad445ede26e20d26248fb3d107f1491c0" args="(struct bgp *bgp, as_t as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_confederation_peers_remove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00432">432</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, as))
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i] == as)
      <span class="keywordflow">for</span>(j = i + 1; j &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; j++)
    bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[j - 1] = bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[j];

  bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>--;

  if (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> == 0)
    {
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>);
      bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>,
                  bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>,
                  bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));

  <span class="comment">/* Now reset any peer who&#39;s remote AS has just been removed from the</span>
<span class="comment">     CONFED */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == as)
        {
          peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d45f38dac363e4f656eff0364acbe0c">PEER_DOWN_CONFED_PEER_CHANGE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                                  <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }
          <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
        }
    }
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afcb82a0c98d194a00bb08d68743958f7"></a><!-- doxytag: member="bgpd.c::bgp_config_check" ref="afcb82a0c98d194a00bb08d68743958f7" args="(struct bgp *bgp, int config)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_config_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>config</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00152">152</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="structconfig.html">config</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="acdd45b819adee33f52a76647be770a38"></a><!-- doxytag: member="bgpd.c::bgp_config_set" ref="acdd45b819adee33f52a76647be770a38" args="(struct bgp *bgp, int config)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_config_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>config</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00140">140</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="structconfig.html">config</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac4f4bde12db9716128e3dfe02d6c20c4"></a><!-- doxytag: member="bgpd.c::bgp_config_unset" ref="ac4f4bde12db9716128e3dfe02d6c20c4" args="(struct bgp *bgp, int config)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_config_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>config</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00146">146</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="structconfig.html">config</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8c52692873e7d55916cc4c7f62d9292"></a><!-- doxytag: member="bgpd.c::bgp_config_write" ref="ac8c52692873e7d55916cc4c7f62d9292" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_config_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04956">4956</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> write = 0;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;

  <span class="comment">/* BGP Multiple instance. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
    {    
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;bgp multiple-instance%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      write++;
    }

  <span class="comment">/* BGP Config type. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
    {    
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;bgp config-type cisco%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      write++;
    }

  <span class="comment">/* BGP configuration. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
    {
      <span class="keywordflow">if</span> (write)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;!%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Router bgp ASN */</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;router bgp %u&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>);

      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
    {
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; view %s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
    }
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* No Synchronization */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no synchronization%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP fast-external-failover. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, <a class="code" href="bgpd_8h.html#a28ae0f957b1abc1140e12fda08edc322">BGP_FLAG_NO_FAST_EXT_FAILOVER</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp fast-external-failover%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>); 

      <span class="comment">/* BGP router ID. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp router-id %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>), 
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP log-neighbor-changes. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4871d191e1b11258fc7d58365a8de88b">BGP_FLAG_LOG_NEIGHBOR_CHANGES</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp log-neighbor-changes%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP configuration. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a89cb4c8d9453fb88c6360ea5f8dd7075">BGP_FLAG_ALWAYS_COMPARE_MED</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp always-compare-med%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP default ipv4-unicast. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp default ipv4-unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP default local-preference. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> != <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp default local-preference %d%s&quot;</span>,
         bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP client-to-client reflection. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ac0d32e044da2ef04e2cb924c60c9186c">BGP_FLAG_NO_CLIENT_TO_CLIENT</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp client-to-client reflection%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      
      <span class="comment">/* BGP cluster ID. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp cluster-id %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>),
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Confederation identifier*/</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp confederation identifier %i%s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>,
                <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Confederation peer */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> &gt; 0)
    {
      <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp confederation peers&quot;</span>);

         <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; %u&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i]);

          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

      <span class="comment">/* BGP enforce-first-as. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abbc81a8ba88ca76497f8d2838ea81401">BGP_FLAG_ENFORCE_FIRST_AS</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp enforce-first-as%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP deterministic-med. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a872ba22b64e9118e8cda60c6d3c6d5c9">BGP_FLAG_DETERMINISTIC_MED</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp deterministic-med%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP graceful-restart. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a> != <a class="code" href="bgpd_8h.html#ac5c5ca169ac036d72c23ce18db6a327b">BGP_DEFAULT_STALEPATH_TIME</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp graceful-restart stalepath-time %d%s&quot;</span>,
         bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a339c9ce07a9d3611d2c5f1c4279b58f8">BGP_FLAG_GRACEFUL_RESTART</a>))
       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp graceful-restart%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP bestpath method. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a1c9218156b20a2a0641bdd096fed76c0">BGP_FLAG_ASPATH_IGNORE</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath as-path ignore%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a2daf5bdb7e1c87887b425c4f138d49f6">BGP_FLAG_ASPATH_CONFED</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath as-path confed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab508173624f08e35b426cb4f97af55f7">BGP_FLAG_COMPARE_ROUTER_ID</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath compare-routerid%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abdc54bbffd7bff820138d5e671e70efa">BGP_FLAG_MED_CONFED</a>)
      || <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#af7ddec77890c22a31bb91af392832b15">BGP_FLAG_MED_MISSING_AS_WORST</a>))
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath med&quot;</span>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abdc54bbffd7bff820138d5e671e70efa">BGP_FLAG_MED_CONFED</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; confed&quot;</span>);
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#af7ddec77890c22a31bb91af392832b15">BGP_FLAG_MED_MISSING_AS_WORST</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; missing-as-worst&quot;</span>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

      <span class="comment">/* BGP network import check. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a6bc6dc724e29fd024f008b87f02e4b54">BGP_FLAG_IMPORT_CHECK</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp network import-check%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP scan interval. */</span>
      <a class="code" href="bgp__nexthop_8c.html#abe56d4b0257e33694939ac6dd6ea41c9">bgp_config_write_scan_time</a> (vty);

      <span class="comment">/* BGP flag dampening. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>],
      <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>))
    <a class="code" href="bgp__damp_8c.html#a2d5528f427dd64bddefa520e998f085e">bgp_config_write_damp</a> (vty);

      <span class="comment">/* BGP static route configuration. */</span>
      <a class="code" href="bgp__route_8h.html#aa38f753615df9694fa3f47fa11b3ebf2">bgp_config_write_network</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, &amp;write);

      <span class="comment">/* BGP redistribute configuration. */</span>
      <a class="code" href="bgp__zebra_8h.html#a96ac2f697ca6b677ded8f8ff40d7a047">bgp_config_write_redistribute</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, &amp;write);

      <span class="comment">/* BGP timers configuration. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> != <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>
      &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> != <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timers bgp %d %d%s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a>, 
         bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* peer-group */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
    }

      <span class="comment">/* Normal neighbor configuration. */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
        <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
    }

      <span class="comment">/* Distance configuration. */</span>
      <a class="code" href="bgp__route_8h.html#ac7a2375c41537180015d8dd33798155e">bgp_config_write_distance</a> (vty, bgp);
      
      <span class="comment">/* No auto-summary */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no auto-summary%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* IPv4 multicast configuration.  */</span>
      write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);

      <span class="comment">/* IPv4 VPN configuration.  */</span>
      write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>);

      <span class="comment">/* IPv6 unicast configuration.  */</span>
      write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);

      <span class="comment">/* IPv6 multicast configuration.  */</span>
      write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);

      write++;
    }
  <span class="keywordflow">return</span> write;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a29c35569e369504bd070a4f212705e24"></a><!-- doxytag: member="bgpd.c::bgp_config_write_family" ref="a29c35569e369504bd070a4f212705e24" args="(struct vty *vty, struct bgp *bgp, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_config_write_family </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04918">4918</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> write = 0;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <a class="code" href="bgp__route_8h.html#aa38f753615df9694fa3f47fa11b3ebf2">bgp_config_write_network</a> (vty, bgp, afi, safi, &amp;write);

  <a class="code" href="bgp__zebra_8h.html#a96ac2f697ca6b677ded8f8ff40d7a047">bgp_config_write_redistribute</a> (vty, bgp, afi, safi, &amp;write);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    {
      <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, &amp;write);
      <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, afi, safi);
    }
    }
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    {
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
        {
          <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, &amp;write);
          <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, peer, afi, safi);
        }
    }
    }
  <span class="keywordflow">if</span> (write)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; exit-address-family%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="keywordflow">return</span> write;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a098378a81a4b5f6332b23c06f6235c1e"></a><!-- doxytag: member="bgpd.c::bgp_config_write_family_header" ref="a098378a81a4b5f6332b23c06f6235c1e" args="(struct vty *vty, afi_t afi, safi_t safi, int *write)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_config_write_family_header </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>write</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04885">4885</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (*write)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    <span class="keywordflow">return</span>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;!%s address-family &quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    {
      <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ipv4 multicast&quot;</span>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;vpnv4 unicast&quot;</span>);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ipv6&quot;</span>);
      
      <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; multicast&quot;</span>);
    }

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  *write = 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4bd09c948e7a109516a5a1988b9b3ac5"></a><!-- doxytag: member="bgpd.c::bgp_config_write_filter" ref="a4bd09c948e7a109516a5a1988b9b3ac5" args="(struct vty *vty, struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_config_write_filter </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04485">4485</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">char</span> *addr;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>;
  <span class="keywordtype">int</span> out = <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>;

  addr = peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>;
  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* distribute-list. */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>
    || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>) != 0)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s distribute-list %s in%s&quot;</span>, addr, 
         filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s distribute-list %s out%s&quot;</span>, addr, 
         filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* prefix-list. */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>
    || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>) != 0)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s prefix-list %s in%s&quot;</span>, addr, 
         filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s prefix-list %s out%s&quot;</span>, addr, 
         filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* route-map. */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>
       || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>) != 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s in%s&quot;</span>, addr, 
              filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s out%s&quot;</span>, addr, 
            filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s import%s&quot;</span>, addr,
        filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>
    || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>,
                    gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>) != 0)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s export%s&quot;</span>, addr,
        filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* unsuppress-map */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s unsuppress-map %s%s&quot;</span>, addr,
         filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* filter-list. */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>
    || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>) != 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s filter-list %s in%s&quot;</span>, addr, 
           filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> &amp;&amp; ! gfilter)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s filter-list %s out%s&quot;</span>, addr, 
         filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a73fa98f3d449ef7778969242d71a15da"></a><!-- doxytag: member="bgpd.c::bgp_config_write_peer" ref="a73fa98f3d449ef7778969242d71a15da" args="(struct vty *vty, struct bgp *bgp, struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_config_write_peer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04556">4556</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span>peer *g_peer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
  <span class="keywordtype">char</span> *addr;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
  addr = peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>;
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    g_peer = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>;

  <span class="comment">/************************************</span>
<span class="comment">   ****** Global to the neighbor ******</span>
<span class="comment">   ************************************/</span>
  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    {
      <span class="comment">/* remote-as. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group%s&quot;</span>, addr,
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remote-as %u%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>,
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (! g_peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remote-as %u%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>,
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group %s%s&quot;</span>, addr,
             peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

      <span class="comment">/* local-as. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s local-as %u%s%s&quot;</span>, addr,
           peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>,
           <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) ?
           <span class="stringliteral">&quot; no-prepend&quot;</span> : <span class="stringliteral">&quot;&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Description. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s description %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Shutdown. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s shutdown%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Password. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    <span class="keywordflow">if</span> (!<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
        || ! g_peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
        || strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, g_peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>) != 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s password %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* BGP port. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> != <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s port %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Local interface name. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s interface %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  
      <span class="comment">/* Passive. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s passive%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* EBGP multihop.  */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        g_peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s ebgp-multihop %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* disable-connected-check.  */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s disable-connected-check%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Update-source. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) || ! g_peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>
        || strcmp (g_peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>) != 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s update-source %s%s&quot;</span>, addr,
           peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) || ! g_peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>
        || <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (g_peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>,
                  peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>) != 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s update-source %s%s&quot;</span>, addr,
           <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* advertisement-interval */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s advertisement-interval %d%s&quot;</span>,
         addr, peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>); 

      <span class="comment">/* timers. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>)
      &amp;&amp; ! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s timers %d %d%s&quot;</span>, addr, 
      peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>, peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s timers connect %d%s&quot;</span>, addr, 
      peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Default weight. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        g_peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> != peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s weight %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Dynamic capability.  */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s capability dynamic%s&quot;</span>, addr,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* dont capability negotiation. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s dont-capability-negotiate%s&quot;</span>, addr,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* override capability negotiation. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s override-capability%s&quot;</span>, addr,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* strict capability negotiation. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
        <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
        ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s strict-capability-match%s&quot;</span>, addr,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
        {
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
        }
          <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
        }
    }
    }


  <span class="comment">/************************************</span>
<span class="comment">   ****** Per AF to the neighbor ******</span>
<span class="comment">   ************************************/</span>

  <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group %s%s&quot;</span>, addr,
         peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

  <span class="comment">/* ORF capability.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s capability orf prefix-list&quot;</span>, addr);

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; both&quot;</span>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; send&quot;</span>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; receive&quot;</span>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

  <span class="comment">/* Route reflector client. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-reflector-client%s&quot;</span>, addr, 
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Nexthop self. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a81ac724618a5428b3af519e296c0263e">PEER_FLAG_NEXTHOP_SELF</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s next-hop-self%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Remove private AS. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remove-private-AS%s&quot;</span>,
         addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* send-community print. */</span>
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>)
          &amp;&amp; <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community both%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))  
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community extended%s&quot;</span>,
             addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>)
          &amp;&amp; ! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community both%s&quot;</span>,
             addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community extended%s&quot;</span>,
             addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>))
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community%s&quot;</span>,
             addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
    }

  <span class="comment">/* Default information */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s default-originate&quot;</span>, addr);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route-map %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

  <span class="comment">/* Soft reconfiguration inbound. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
    <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] ||
    ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s soft-reconfiguration inbound%s&quot;</span>, addr,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* maximum-prefix. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>))
    <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi]
    || g_peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] != peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]
        || g_peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] != peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi]
    || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>)
       != <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
      {
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s maximum-prefix %ld&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]);
    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] != <a class="code" href="bgpd_8h.html#a32738fb2ebfaa1fd4c60766da947b643">MAXIMUM_PREFIX_THRESHOLD_DEFAULT</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi]);
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; warning-only&quot;</span>);
    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi])
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; restart %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi]);
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }

  <span class="comment">/* Route server client. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-server-client%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Allow AS in.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
    || ! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (g_peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>)
    || peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != g_peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi])
      {
    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] == 3)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s allowas-in%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    <span class="keywordflow">else</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s allowas-in %d%s&quot;</span>, addr,
           peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }

  <span class="comment">/* Filter. */</span>
  <a class="code" href="bgpd_8c.html#a4bd09c948e7a109516a5a1988b9b3ac5">bgp_config_write_filter</a> (vty, peer, afi, safi);

  <span class="comment">/* atribute-unchanged. */</span>
  <span class="keywordflow">if</span> ((<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>))
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
          &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)
          &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>))
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s attribute-unchanged%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s attribute-unchanged%s%s%s%s&quot;</span>, addr, 
         (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)) ?
         <span class="stringliteral">&quot; as-path&quot;</span> : <span class="stringliteral">&quot;&quot;</span>,
         (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)) ?
         <span class="stringliteral">&quot; next-hop&quot;</span> : <span class="stringliteral">&quot;&quot;</span>,
         (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>)) ?
         <span class="stringliteral">&quot; med&quot;</span> : <span class="stringliteral">&quot;&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9df198f45ee2bcdf5601560fc35fd713"></a><!-- doxytag: member="bgpd.c::bgp_create" ref="a9df198f45ee2bcdf5601560fc35fd713" args="(as_t *as, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp.html">bgp</a>* bgp_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01918">1918</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <span class="keywordflow">if</span> ( (bgp = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badfedc4011d67f9abf9223ebffbcd8259">MTYPE_BGP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> bgp))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (bgp);
  bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
  bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, <span class="stringliteral">&quot;Static announcement&quot;</span>);

  bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *)) <a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a>;

  bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *)) <a class="code" href="bgpd_8c.html#a693e769f899359a43259c2940f31546b">peer_group_cmp</a>;

  bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span>*, <span class="keywordtype">void</span>*)) <a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a>;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
    bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
    bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
      }

  bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>;
  bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>;
  bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>;
  bgp-&gt;<a class="code" href="structbgp.html#aaa8a4745e644e823c03cdc6606645272">restart_time</a> = <a class="code" href="bgpd_8h.html#a77f0e5dde6788dc595ae68fb60334c0a">BGP_DEFAULT_RESTART_TIME</a>;
  bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a> = <a class="code" href="bgpd_8h.html#ac5c5ca169ac036d72c23ce18db6a327b">BGP_DEFAULT_STALEPATH_TIME</a>;

  bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;

  <span class="keywordflow">if</span> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
    bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa1602d8bb59616ec52a449dd588304e1"></a><!-- doxytag: member="bgpd.c::bgp_default_local_preference_set" ref="aa1602d8bb59616ec52a449dd588304e1" args="(struct bgp *bgp, u_int32_t local_pref)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_default_local_preference_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>local_pref</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00489">489</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> -1;

  bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = local_pref;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acaec882d19a370590305157ce569a748"></a><!-- doxytag: member="bgpd.c::bgp_default_local_preference_unset" ref="acaec882d19a370590305157ce569a748" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_default_local_preference_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00500">500</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> -1;

  bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1f973ab34674a55e17934bca3e2c8b4d"></a><!-- doxytag: member="bgpd.c::bgp_delete" ref="a1f973ab34674a55e17934bca3e2c8b4d" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02064">2064</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="comment">/* Delete static route. */</span>
  <a class="code" href="bgp__route_8c.html#a4902f0940ffe01568daa3d9df842c874">bgp_static_delete</a> (bgp);

  <span class="comment">/* Unset redistribution. */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++) 
      <span class="keywordflow">if</span> (i != <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    <a class="code" href="bgp__zebra_8c.html#aa90152d0184e4d44b31492232ebad27e">bgp_redistribute_unset</a> (bgp, afi, i);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, next, peer))
    <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, next, group))
    <a class="code" href="bgpd_8c.html#a11534c9662beb30137fc8df33822044c">peer_group_delete</a> (group);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>) == 0);

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>) {
    <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a>(bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>);
    bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  }
  
  <span class="comment">/* Remove visibility via the master list - there may however still be</span>
<span class="comment">   * routes to be processed still referencing the struct bgp.</span>
<span class="comment">   */</span>
  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgp);
  <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>))
    <a class="code" href="bgp__network_8c.html#a9d9d59ff98a77c9b4b2c3d3c2b467ec5">bgp_close</a> ();

  <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a>(bgp);  <span class="comment">/* initial reference */</span>
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b3388d8ac73af2d4f4f22e46746da1e"></a><!-- doxytag: member="bgpd.c::bgp_flag_check" ref="a0b3388d8ac73af2d4f4f22e46746da1e" args="(struct bgp *bgp, int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_flag_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00133">133</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab7a06ec3b706252810fd639d03b31fe1"></a><!-- doxytag: member="bgpd.c::bgp_flag_set" ref="ab7a06ec3b706252810fd639d03b31fe1" args="(struct bgp *bgp, int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_flag_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00119">119</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a12be440f9d0b2a52fbe48c83088a837d"></a><!-- doxytag: member="bgpd.c::bgp_flag_unset" ref="a12be440f9d0b2a52fbe48c83088a837d" args="(struct bgp *bgp, int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_flag_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00126">126</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af8f51196a2f73df3235ce42349fbd68c"></a><!-- doxytag: member="bgpd.c::bgp_free" ref="af8f51196a2f73df3235ce42349fbd68c" args="(struct bgp *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02124">2124</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>);
  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>);
  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>);

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    free (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi])
          <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]);
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi])
          <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi]) ;
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi])
          <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]);
      }
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badfedc4011d67f9abf9223ebffbcd8259">MTYPE_BGP</a>, bgp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6922211c65b05f362d1d2ba029965b66"></a><!-- doxytag: member="bgpd.c::bgp_get" ref="a6922211c65b05f362d1d2ba029965b66" args="(struct bgp **bgp_val, as_t *as, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> **&#160;</td>
          <td class="paramname"><em>bgp_val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02002">2002</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  <span class="comment">/* Multiple instance check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
    bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      <span class="keywordflow">else</span>
    bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();

      <span class="comment">/* Already exists. */</span>
      <span class="keywordflow">if</span> (bgp)
    {
          <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>)
        {
          *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
          <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1ae3b0d22a4463de041355a69e4049bc">BGP_ERR_INSTANCE_MISMATCH</a>;
        }
      *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
      <span class="keywordflow">return</span> 0;
    }
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* BGP instance name can not be specified for single instance.  */</span>
      <span class="keywordflow">if</span> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#acc03e4e07de03f2d390a1214f4726ddf">BGP_ERR_MULTIPLE_INSTANCE_NOT_SET</a>;

      <span class="comment">/* Get default BGP structure if exists. */</span>
      bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();

      <span class="keywordflow">if</span> (bgp)
    {
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>)
        {
          *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
          <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a512274cef0e6a3421f5ffdbc4393ec84">BGP_ERR_AS_MISMATCH</a>;
        }
      *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="comment">/* Create BGP server socket, if first instance.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__network_8c.html#a5d2360bd37d4a6c42d40de186eeebf59">bgp_socket</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ad78fc56207b16cd34df39279ec2934b0">port</a>, <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#aa9dd824324ee5f754162af0e29c2624a">address</a>) &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
    }

  bgp = <a class="code" href="bgpd_8c.html#a9df198f45ee2bcdf5601560fc35fd713">bgp_create</a> (<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgp);
  <a class="code" href="bgpd_8c.html#a95a081ca99d2713d2405c00786db1193">bgp_router_id_set</a>(bgp, &amp;<a class="code" href="bgp__vty_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a>);
  *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae19787bc29126d524ac261d00bacc13d"></a><!-- doxytag: member="bgpd.c::bgp_get_default" ref="ae19787bc29126d524ac261d00bacc13d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp.html">bgp</a>* bgp_get_default </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01964">1964</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>-&gt;<a class="code" href="structlist.html#a8306954be149c09248a51079826dd5f8">head</a>)
    <span class="keywordflow">return</span> (<a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>)));
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa084e07f4225e6b0938cce4ad4877404"></a><!-- doxytag: member="bgpd.c::bgp_init" ref="aa084e07f4225e6b0938cce4ad4877404" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l05161">5161</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* BGP VTY commands installation.  */</span>
  <a class="code" href="bgp__vty_8c.html#a5c533727d78c550c2262ae3fec4eabbb">bgp_vty_init</a> ();

  <span class="comment">/* Init zebra. */</span>
  <a class="code" href="bgp__zebra_8c.html#a9462cb6e82b6f043681e5c9048b97596">bgp_zebra_init</a> ();

  <span class="comment">/* BGP inits. */</span>
  <a class="code" href="bgp__attr_8c.html#a9c65ea9c30a455a48fcc49820025780d">bgp_attr_init</a> ();
  <a class="code" href="bgp__debug_8c.html#ae12ee2ca823782d8b3ecd119184fe4e2">bgp_debug_init</a> ();
  <a class="code" href="bgp__dump_8c.html#afa613c770fb199232be285cb5061f765">bgp_dump_init</a> ();
  <a class="code" href="bgp__route_8h.html#a1d94be4492850d1be9670012f7706620">bgp_route_init</a> ();
  <a class="code" href="bgpd_8h.html#aa3569ed6d1d4fe9c81f9f241cc165868">bgp_route_map_init</a> ();
  <a class="code" href="bgp__nexthop_8c.html#ada667668bb4d77f673ace223f4303a2c">bgp_scan_init</a> ();
  <a class="code" href="bgp__mplsvpn_8c.html#a558459716ff86cc36a5b7fd546c2b906">bgp_mplsvpn_init</a> ();

  <span class="comment">/* Access list initialize. */</span>
  <a class="code" href="filter_8c.html#a7794dbb70ed7bbd7a248853d572fa38c">access_list_init</a> ();
  <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a>);
  <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a>);

  <span class="comment">/* Filter list initialize. */</span>
  <a class="code" href="bgp__filter_8c.html#aa381cd8105b8829db14067a8dd76a3c1">bgp_filter_init</a> ();
  <a class="code" href="bgp__filter_8c.html#a58448428b2e82eb1e2a5b18f55459b52">as_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a>);
  <a class="code" href="bgp__filter_8c.html#a09761ee784474110497978e29628c93e">as_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a>);

  <span class="comment">/* Prefix list initialize.*/</span>
  <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ();
  <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a>);
  <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a>);

  <span class="comment">/* Community list initialize. */</span>
  <a class="code" href="bgp__clist_8h.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">bgp_clist</a> = <a class="code" href="bgp__clist_8c.html#a3074741d6eaa97bdbc1d29e6ec9d18be">community_list_init</a> ();

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="bgp__snmp_8h.html#a2b0aa61b10ec69afde81e859ae5db196">bgp_snmp_init</a> ();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a94fe8d4b7a275b31df04f8a46ab1ac37"></a><!-- doxytag: member="bgpd.c::bgp_lock" ref="a94fe8d4b7a275b31df04f8a46ab1ac37" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_lock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02110">2110</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  ++bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aff4b30a264b94877ac5cf295aa0b51f9"></a><!-- doxytag: member="bgpd.c::bgp_lookup" ref="aff4b30a264b94877ac5cf295aa0b51f9" args="(as_t as, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp.html">bgp</a>* bgp_lookup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01973">1973</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
    <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as
    &amp;&amp; ((bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
        || (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> &amp;&amp; <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a> &amp;&amp; strcmp (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>) == 0)))
      <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abaea415d663b34eb4aef1d84737178f7"></a><!-- doxytag: member="bgpd.c::bgp_lookup_by_name" ref="abaea415d663b34eb4aef1d84737178f7" args="(const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp.html">bgp</a>* bgp_lookup_by_name </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01988">1988</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
    <span class="keywordflow">if</span> ((bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    || (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> &amp;&amp; <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a> &amp;&amp; strcmp (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>) == 0))
      <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae18826e3ba6a2d16c64726decaa1ab54"></a><!-- doxytag: member="bgpd.c::bgp_master_init" ref="ae18826e3ba6a2d16c64726decaa1ab54" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_master_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l05147">5147</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  memset (&amp;<a class="code" href="structbgp__master.html">bgp_master</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__master.html">bgp_master</a>));

  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a> = &amp;<a class="code" href="bgpd_8c.html#a65ecd7a9ec0c8f969263cd6aa0452d69">bgp_master</a>;
  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a60e757cc6f7fa531e9d15f919ebfded7">listen_sockets</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ad78fc56207b16cd34df39279ec2934b0">port</a> = <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>;
  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a> = <a class="code" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ();
  <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a035d6d47723fa53d2d2587dc2495c8ad">start_time</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5d65834a27b3de6bc2af63094ebf76f1"></a><!-- doxytag: member="bgpd.c::bgp_option_check" ref="a5d65834a27b3de6bc2af63094ebf76f1" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_option_check </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00112">112</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab392af01542bb12c0dc9afa6b0950b7c"></a><!-- doxytag: member="bgpd.c::bgp_option_set" ref="ab392af01542bb12c0dc9afa6b0950b7c" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_option_set </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00077">77</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">switch</span> (flag)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afc24478ef33bb7a27704472d7fd043c4">BGP_OPT_NO_FIB</a>:
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>:
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>:
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3249e23250280c76087965fed358b866"></a><!-- doxytag: member="bgpd.c::bgp_option_unset" ref="a3249e23250280c76087965fed358b866" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_option_unset </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00093">93</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">switch</span> (flag)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>:
      <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>) &gt; 1)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac414dfc71d79e975bbfa218c4ab8605a">BGP_ERR_MULTIPLE_INSTANCE_USED</a>;
      <span class="comment">/* Fall through.  */</span>
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afc24478ef33bb7a27704472d7fd043c4">BGP_OPT_NO_FIB</a>:
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>:
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a95a081ca99d2713d2405c00786db1193"></a><!-- doxytag: member="bgpd.c::bgp_router_id_set" ref="a95a081ca99d2713d2405c00786db1193" args="(struct bgp *bgp, struct in_addr *id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_router_id_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00159">159</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>)
      &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, <span class="keywordtype">id</span>))
    <span class="keywordflow">return</span> 0;

  <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, <span class="keywordtype">id</span>);
  <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>);

  <span class="comment">/* Set all peer&#39;s local identifier with this value. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>, <span class="keywordtype">id</span>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6dc98804d3512fd8ee2afd54fe76d759">PEER_DOWN_RID_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a64275e98cbe004326cffb34d93bbdb32"></a><!-- doxytag: member="bgpd.c::bgp_terminate" ref="a64275e98cbe004326cffb34d93bbdb32" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_terminate </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l05202">5202</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                           <a class="code" href="bgpd_8h.html#a267560bcf2267908e5d51d22d6bac5b3">BGP_NOTIFY_CEASE_PEER_UNCONFIG</a>);
  
  <a class="code" href="bgp__route_8c.html#adf17dd6a8dfaa2ab4f271b491de030d0">bgp_cleanup_routes</a> ();
  
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>)
    {
      <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>);
      <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>)
    {
      <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>);
      <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae87980b465ace17b18089991d4579648"></a><!-- doxytag: member="bgpd.c::bgp_timers_set" ref="ae87980b465ace17b18089991d4579648" args="(struct bgp *bgp, u_int32_t keepalive, u_int32_t holdtime)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_timers_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>keepalive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>holdtime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00257">257</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = (keepalive &lt; <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> / 3 
                ? keepalive : <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> / 3);
  bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0931c3901f337a3c963647efcdf0cb8b"></a><!-- doxytag: member="bgpd.c::bgp_timers_unset" ref="a0931c3901f337a3c963647efcdf0cb8b" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_timers_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00267">267</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>;
  bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3752e9686437ac06be7b19ec985f1596"></a><!-- doxytag: member="bgpd.c::bgp_unlock" ref="a3752e9686437ac06be7b19ec985f1596" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_unlock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02116">2116</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a> &gt; 0);
  <span class="keywordflow">if</span> (--bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a> == 0)
    <a class="code" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">bgp_free</a> (bgp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a238a578363f00dd89e73738ee5f518c4"></a><!-- doxytag: member="bgpd.c::peer_activate" ref="a238a578363f00dd89e73738ee5f518c4" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_activate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01029">1029</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> active;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Activate the address family configuration. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
  <span class="keywordflow">else</span>
    {
      active = <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer);

      peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;

      <span class="keywordflow">if</span> (! active &amp;&amp; <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer))
    <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>))
        {
          peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[afi][safi] = 1;
          <a class="code" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (peer, afi, safi,
                       <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,
                       <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>);
          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi])
            {
              peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 1;
              <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
            }
        }
          <span class="keywordflow">else</span>
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#abd8d1d6d2ea53eb24c3b1d0bc4bf5ea7">PEER_DOWN_AF_ACTIVATE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                                  <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae512a15120d606173592586a761742aa"></a><!-- doxytag: member="bgpd.c::peer_active" ref="ae512a15120d606173592586a761742aa" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_active </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02220">2220</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a21e9fbe5ad7e478f84d9e61379bbe9b2"></a><!-- doxytag: member="bgpd.c::peer_active_nego" ref="a21e9fbe5ad7e478f84d9e61379bbe9b2" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_active_nego </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02233">2233</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a668d8118bebaccc3de412436f8d0892e"></a><!-- doxytag: member="bgpd.c::peer_advertise_interval_set" ref="a668d8118bebaccc3de412436f8d0892e" args="(struct peer *peer, u_int32_t routeadv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_advertise_interval_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>routeadv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03246">3246</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (routeadv &gt; 600)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>);
  peer-&gt;<a class="code" href="structpeer.html#a44e62fb078b1689f6525c08fd9b622a3">routeadv</a> = routeadv;
  peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = routeadv;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a29b0cb85c4548d2ac1b9ba65101067d3"></a><!-- doxytag: member="bgpd.c::peer_advertise_interval_unset" ref="a29b0cb85c4548d2ac1b9ba65101067d3" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_advertise_interval_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03262">3262</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>);
  peer-&gt;<a class="code" href="structpeer.html#a44e62fb078b1689f6525c08fd9b622a3">routeadv</a> = 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae5d6ff43d5cd2e0033f2e72e68017b56"></a><!-- doxytag: member="bgpd.c::peer_af_flag_check" ref="ae5d6ff43d5cd2e0033f2e72e68017b56" args="(struct peer *peer, afi_t afi, safi_t safi, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_af_flag_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00535">535</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a154a3e6e7649d742bee95e2f7bd9bd98"></a><!-- doxytag: member="bgpd.c::peer_af_flag_modify" ref="a154a3e6e7649d742bee95e2f7bd9bd98" args="(struct peer *peer, afi_t afi, safi_t safi, u_int32_t flag, int set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_af_flag_modify </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02526">2526</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> found;
  <span class="keywordtype">int</span> size;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> action;

  memset (&amp;action, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a>));
  size = <span class="keyword">sizeof</span> <a class="code" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">peer_af_flag_action_list</a> / <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a>);
  
  found = <a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (<a class="code" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">peer_af_flag_action_list</a>, size, &amp;action, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
  
  <span class="comment">/* No flag action is found.  */</span>
  <span class="keywordflow">if</span> (! found)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;    

  <span class="comment">/* Adress family must be activated.  */</span>
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="comment">/* Not for peer-group member.  */</span>
  <span class="keywordflow">if</span> (action.not_for_member &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

 <span class="comment">/* Spcecial check for reflector client.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> &amp; <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a42c843c35f8688330963bea10da653a5">BGP_ERR_NOT_INTERNAL_PEER</a>;

  <span class="comment">/* Spcecial check for remove-private-AS.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> &amp; <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#accf1bbc9cbc75c43e0f812f36ffc2b7c">BGP_ERR_REMOVE_PRIVATE_AS</a>;

  <span class="comment">/* When unset the peer-group member&#39;s flag we have to check</span>
<span class="comment">     peer-group configuration.  */</span>
  <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;

  <span class="comment">/* When current flag configuration is same as requested one.  */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>) == <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
    <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">if</span> (<span class="keyword">set</span>)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);

  <span class="comment">/* Execute action when peer is established.  */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
      &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
    <a class="code" href="bgp__route_8c.html#a4abd5523ec63ec028d8ca35259161533">bgp_clear_adj_in</a> (peer, afi, safi);
      <span class="keywordflow">else</span>
       {
         <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7322b473987705053922182e4d751697">PEER_DOWN_RR_CLIENT_CHANGE</a>;
         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d46cd046efbcaba9dda0c9e721d61b6">PEER_DOWN_RS_CLIENT_CHANGE</a>;
         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>)
           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;

         <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, action.type);
       }

    }

  <span class="comment">/* Peer group member updates.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
      
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>) == <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<span class="keyword">set</span>)
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        {
          <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
        <a class="code" href="bgp__route_8c.html#a4abd5523ec63ec028d8ca35259161533">bgp_clear_adj_in</a> (peer, afi, safi);
          <span class="keywordflow">else</span>
               {
                 <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
                   peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7322b473987705053922182e4d751697">PEER_DOWN_RR_CLIENT_CHANGE</a>;
                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
                   peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d46cd046efbcaba9dda0c9e721d61b6">PEER_DOWN_RS_CLIENT_CHANGE</a>;
                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
                   peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>)
                   peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;

                 <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, action.type);
               }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a44d5128304b168da12bc07ce68f899dd"></a><!-- doxytag: member="bgpd.c::peer_af_flag_reset" ref="a44d5128304b168da12bc07ce68f899dd" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_af_flag_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00542">542</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keywordtype">char</span> orf_name[BUFSIZ];

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* Clear neighbor filter and route-map */</span>
  <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; i &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; i++)
    {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    {
      free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    {
      free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; 
    }
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    {
      free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
   }
 <span class="keywordflow">for</span> (i = <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>; i &lt; <a class="code" href="bgpd_8h.html#a0211cf02136115bf6674f56fedfc1ea1">RMAP_MAX</a>; i++)
       {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    }

  <span class="comment">/* Clear unsuppress map.  */</span>
  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Clear neighbor&#39;s all address family flags.  */</span>
  peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi] = 0;

  <span class="comment">/* Clear neighbor&#39;s all address family sflags. */</span>
  peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi] = 0;

  <span class="comment">/* Clear neighbor&#39;s all address family capabilities. */</span>
  peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi] = 0;

  <span class="comment">/* Clear ORF info */</span>
  peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  sprintf (orf_name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
  <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (orf_name);

  <span class="comment">/* Set default neighbor send-community.  */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>);
    }

  <span class="comment">/* Clear neighbor default_originate_rmap */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
  peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Clear neighbor maximum-prefix */</span>
  peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
  peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = <a class="code" href="bgpd_8h.html#a32738fb2ebfaa1fd4c60766da947b643">MAXIMUM_PREFIX_THRESHOLD_DEFAULT</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a56de1c971af44a0e4c8ed48c3dbae891"></a><!-- doxytag: member="bgpd.c::peer_af_flag_set" ref="a56de1c971af44a0e4c8ed48c3dbae891" args="(struct peer *peer, afi_t afi, safi_t safi, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_af_flag_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02649">2649</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (peer, afi, safi, flag, 1);
}
</pre></div>
</div>
</div>
<a class="anchor" id="adb44cd6ce7214c8f5289f3540df9118c"></a><!-- doxytag: member="bgpd.c::peer_af_flag_unset" ref="adb44cd6ce7214c8f5289f3540df9118c" args="(struct peer *peer, afi_t afi, safi_t safi, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_af_flag_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02655">2655</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (peer, afi, safi, flag, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1a0b306bfb4091b7855ca490b18eaec"></a><!-- doxytag: member="bgpd.c::peer_allowas_in_set" ref="ab1a0b306bfb4091b7855ca490b18eaec" args="(struct peer *peer, afi_t afi, safi_t safi, int allow_num)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_allowas_in_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>allow_num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03301">3301</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (allow_num &lt; 1 || allow_num &gt; 10)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != allow_num)
    {
      peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = allow_num;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
      <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>);
    }

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != allow_num)
    {
      peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = allow_num;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
      <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>);
    }
      
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a424c0f74cabfc988bb05dbd0371a9886"></a><!-- doxytag: member="bgpd.c::peer_allowas_in_unset" ref="a424c0f74cabfc988bb05dbd0371a9886" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_allowas_in_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03334">3334</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
    {
      peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = 0;
      <a class="code" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
    }

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
    {
      peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = 0;
      <a class="code" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8061754d4271f9d42be60f7314d4d1d"></a><!-- doxytag: member="bgpd.c::peer_as_change" ref="ab8061754d4271f9d42be60f7314d4d1d" args="(struct peer *peer, as_t as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_as_change </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00897">897</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;

  <span class="comment">/* Stop peer. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ac784c469ea6aa5b6e49aaa1a82534f71">PEER_DOWN_REMOTE_AS_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  type = <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer);
  peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = as;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>)
      &amp;&amp; ! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, as)
      &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != as)
    peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;

  <span class="comment">/* Advertisement-interval reset */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;

  <span class="comment">/* TTL reset */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 255;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;

  <span class="comment">/* reflector-client reset */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>],
          <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>],
          <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>],
          <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>],
          <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>],
          <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
    }

  <span class="comment">/* local-as reset */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a747ff9ae059e9102dff1eb9d6926dded"></a><!-- doxytag: member="bgpd.c::peer_aslist_set" ref="a747ff9ae059e9102dff1eb9d6926dded" args="(struct peer *peer, afi_t afi, safi_t safi, int direct, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_aslist_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03896">3896</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acbc965dbac634f666f7b3d4b910f68e7"></a><!-- doxytag: member="bgpd.c::peer_aslist_unset" ref="acbc965dbac634f666f7b3d4b910f68e7" args="(struct peer *peer, afi_t afi, safi_t safi, int direct)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_aslist_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03939">3939</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* apply peer-group filter */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
        free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist;
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a68aea4e32e3959bd0e402595b0b902f8"></a><!-- doxytag: member="bgpd.c::peer_aslist_update" ref="a68aea4e32e3959bd0e402595b0b902f8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_aslist_update </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03998">3998</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keywordtype">int</span> direct;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = 
            <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = 
            <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7495f875829b9dc9bfe0ecd19b94934"></a><!-- doxytag: member="bgpd.c::peer_change_action" ref="aa7495f875829b9dc9bfe0ecd19b94934" args="(struct peer *peer, afi_t afi, safi_t safi, enum peer_change_type type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_change_action </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02254">2254</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
    <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
             <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
    <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
             <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>)
    <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeaa590e7313d03ba1c7418ca2016bf90"></a><!-- doxytag: member="bgpd.c::peer_clear" ref="aeaa590e7313d03ba1c7418ca2016bf90" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_clear </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04335">4335</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>))
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>)
        {
          <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>);
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer canceled&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
        }
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab2d603cda7f63a92bb3792da2512259e">BGP_Start</a>);
      <span class="keywordflow">return</span> 0;
    }

      peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
             <a class="code" href="bgpd_8h.html#ae1672a288d642f221bb61ab2cb63e354">BGP_NOTIFY_CEASE_ADMIN_RESET</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a81cd47b32828ea9f93c32970a08f52fa"></a><!-- doxytag: member="bgpd.c::peer_clear_soft" ref="a81cd47b32828ea9f93c32970a08f52fa" args="(struct peer *peer, afi_t afi, safi_t safi, enum bgp_clear_type stype)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_clear_soft </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656">bgp_clear_type</a>&#160;</td>
          <td class="paramname"><em>stype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04364">4364</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a294345caf9f6a1ac8f38fe7b26d6d743">BGP_ERR_AF_UNCONFIGURED</a>;

  <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656ac61c555624c9350d89f97f04a394c0af">BGP_CLEAR_SOFT_RSCLIENT</a>)
    {
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
        <span class="keywordflow">return</span> 0;
      <a class="code" href="bgp__route_8c.html#a2fdb62c8a10046002627ce0298e0d404">bgp_check_local_routes_rsclient</a> (peer, afi, safi);
      <a class="code" href="bgp__route_8c.html#a5c1eb3bbdaa82d1e5b7b3307de25b12d">bgp_soft_reconfig_rsclient</a> (peer, afi, safi);
    }

  <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a18c12c4f655b8e5508f96ccde24c9d42">BGP_CLEAR_SOFT_OUT</a> || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a4473d7e5b1d58fa4738da92478e9d384">BGP_CLEAR_SOFT_BOTH</a>)
    <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);

  <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656afe0aaa784467adcb874558588454225d">BGP_CLEAR_SOFT_IN_ORF_PREFIX</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>)
      &amp;&amp; (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>)
          || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ab3ce0a5a8efd2d2b846abdad6ec4a9d6">PEER_CAP_ORF_PREFIX_RM_OLD_RCV</a>)))
    {
      <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a> = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
      u_char prefix_type;

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>))
        prefix_type = <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>;
      <span class="keywordflow">else</span>
        prefix_type = <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>))
        <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi,
                    prefix_type, <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a>, 1);
          <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, prefix_type,
                      <a class="code" href="bgp__packet_8h.html#aea8b89e482c433839e04fcb2c59f022c">REFRESH_IMMEDIATE</a>, 0);
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>))
        <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi,
                    prefix_type, <a class="code" href="bgp__packet_8h.html#aea8b89e482c433839e04fcb2c59f022c">REFRESH_IMMEDIATE</a>, 1);
          <span class="keywordflow">else</span>
        <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
        }
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656ab83cf46b37a6b4ee4981cfad44019dfb">BGP_CLEAR_SOFT_IN</a> || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a4473d7e5b1d58fa4738da92478e9d384">BGP_CLEAR_SOFT_BOTH</a>
      || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656afe0aaa784467adcb874558588454225d">BGP_CLEAR_SOFT_IN_ORF_PREFIX</a>)
    {
      <span class="comment">/* If neighbor has soft reconfiguration inbound flag.</span>
<span class="comment">     Use Adj-RIB-In database. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
    <a class="code" href="bgp__route_8c.html#a74f36e1ccbb82b25e96dbdda5ba35f66">bgp_soft_reconfig_in</a> (peer, afi, safi);
      <span class="keywordflow">else</span>
    {
      <span class="comment">/* If neighbor has route refresh capability, send route refresh</span>
<span class="comment">         message to the peer. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>)
          || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
        <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
      <span class="keywordflow">else</span>
        <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa89d856298585939cc3e79fe51606950">BGP_ERR_SOFT_RECONFIG_UNCONFIGURED</a>;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a94ada33347bf94ed5190385ff0fd86a9"></a><!-- doxytag: member="bgpd.c::peer_cmp" ref="a94ada33347bf94ed5190385ff0fd86a9" args="(struct peer *p1, struct peer *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_cmp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00529">529</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (&amp;p1-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, &amp;p2-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92cfb586b0bfefb0f491e846df943b9e"></a><!-- doxytag: member="bgpd.c::peer_create" ref="a92cfb586b0bfefb0f491e846df943b9e" args="(union sockunion *su, struct bgp *bgp, as_t local_as, as_t remote_as, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structpeer.html">peer</a>* peer_create </td>
          <td>(</td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>local_as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>remote_as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00837">837</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> active;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];

  peer = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
  peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a> = *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>;
  peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = <a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
  peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = remote_as;
  peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a> = bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;
  peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;
  peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a>;
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
    
  peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
  <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer);

  active = <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer);

  <span class="keywordflow">if</span> (afi &amp;&amp; safi)
    peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;

  <span class="comment">/* Last read and reset time set */</span>
  peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = peer-&gt;<a class="code" href="structpeer.html#a6b54a3917c026e52541f861b1a7b9cf8">resettime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();

  <span class="comment">/* Default TTL set. */</span>
  peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ? 255 : 1);

  <span class="comment">/* Make peer&#39;s address string. */</span>
  <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (su, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>);
  peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, buf);

  <span class="comment">/* Set up peer&#39;s events and timers. */</span>
  <span class="keywordflow">if</span> (! active &amp;&amp; <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer))
    <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);

  <span class="keywordflow">return</span> peer;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afdbdc29e7fde5d280e9ab2b27a781cd2"></a><!-- doxytag: member="bgpd.c::peer_create_accept" ref="afdbdc29e7fde5d280e9ab2b27a781cd2" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer.html">peer</a>* peer_create_accept </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00883">883</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  peer = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
  
  peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
  <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer);

  <span class="keywordflow">return</span> peer;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4b69528ca90f901bf13e8bb712aaff67"></a><!-- doxytag: member="bgpd.c::peer_deactivate" ref="a4b69528ca90f901bf13e8bb712aaff67" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_deactivate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01076">1076</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span>peer *peer1;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer1))
    {
      <span class="keywordflow">if</span> (peer1-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
        <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a431f8a7f79965eb50b8dd4c41df70615">BGP_ERR_PEER_GROUP_MEMBER_EXISTS</a>;
    }
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1fb3f0972fb6a3b5d48ad1399905cb94">BGP_ERR_PEER_BELONGS_TO_GROUP</a>;
    }

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* De-activate the address family configuration. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 0;
  <a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (peer, afi, safi);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {  
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>))
        {
          peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[afi][safi] = 0;
          peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 0;

          <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (peer))
        {
          <a class="code" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (peer, afi, safi,
                       <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,
                       <a class="code" href="bgp__open_8h.html#af5dd57265f518ffafc0fdb1957a7b706">CAPABILITY_ACTION_UNSET</a>);
          <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>);
          peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi] = 0;
        }
          <span class="keywordflow">else</span>
               {
                 peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
                 <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                                  <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
               }
        }
      <span class="keywordflow">else</span>
           {
             peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
             <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
           }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aee9a8e4b3ede4e3e3570158471cd243d"></a><!-- doxytag: member="bgpd.c::peer_default_originate_set" ref="aee9a8e4b3ede4e3e3570158471cd243d" args="(struct peer *peer, afi_t afi, safi_t safi, const char *rmap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_default_originate_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rmap</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02974">2974</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="comment">/* Adress family must be activated.  */</span>
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="comment">/* Default originate can&#39;t be used for peer group memeber.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>)
      || (<a class="code" href="structrmap.html">rmap</a> &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
      || (<a class="code" href="structrmap.html">rmap</a> &amp;&amp; strcmp (<a class="code" href="structrmap.html">rmap</a>, peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>) != 0))
    { 
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);

      <span class="keywordflow">if</span> (<a class="code" href="structrmap.html">rmap</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
        free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (<a class="code" href="structrmap.html">rmap</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="structrmap.html">rmap</a>);
    }
    }

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
    <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 0);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);

      <span class="keywordflow">if</span> (<a class="code" href="structrmap.html">rmap</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
        free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (<a class="code" href="structrmap.html">rmap</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="structrmap.html">rmap</a>);
    }

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
    <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 0);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5d77cf393fc2332d85b2b9d6b3d26033"></a><!-- doxytag: member="bgpd.c::peer_default_originate_unset" ref="a5d77cf393fc2332d85b2b9d6b3d26033" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_default_originate_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03031">3031</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="comment">/* Adress family must be activated.  */</span>
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="comment">/* Default originate can&#39;t be used for peer group memeber.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>))
    { 
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
    <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 1);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
    <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 1);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3cf7aaaf69048554d000a576ecb0cc9c"></a><!-- doxytag: member="bgpd.c::peer_delete" ref="a3cf7aaaf69048554d000a576ecb0cc9c" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01180">1180</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#a3363f400142fb233235d62ccdea22e38">pn</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);
  
  bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
    <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);

  <span class="comment">/* If this peer belongs to peer group, clear up the</span>
<span class="comment">     relationship.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
    {
      <span class="keywordflow">if</span> ((pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer)))
        {
          peer = <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
          <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, pn);
        }
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="comment">/* Withdraw all information from routing table.  We can not use</span>
<span class="comment">   * BGP_EVENT_ADD (peer, BGP_Stop) at here.  Because the event is</span>
<span class="comment">   * executed after peer structure is deleted.</span>
<span class="comment">   */</span>
  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
  <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (peer);
  <a class="code" href="bgp__fsm_8c.html#ae5bbbc9f4290574b72885050744741fd">bgp_fsm_change_status</a> (peer, <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);

  <span class="comment">/* Password configuration */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
      peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
    }
  
  <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer); <span class="comment">/* stops all timers for Deleted */</span>
  
  <span class="comment">/* Delete from all peer list. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
      &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer)))
    {
      <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
      <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, pn);
    }
      
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (peer)
      &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, peer)))
    {
      <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* rsclient list reference */</span>
      <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, pn);

      <span class="comment">/* Clear our own rsclient ribs. */</span>
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
                         <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
            <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>);
    }

  <span class="comment">/* Free RIB for any family in which peer is RSERVER_CLIENT, and is not</span>
<span class="comment">      member of a peer_group. */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
        <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi]);

  <span class="comment">/* Buffers.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
    <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>)
    <a class="code" href="stream_8c.html#a83c91b4a974d809a25cda9e7f7e28718">stream_fifo_free</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>)
    <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>);
  peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a> = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Local and remote addresses. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>)
    <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>)
    <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>);
  peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a> = peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="comment">/* Free filter related memory.  */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

    <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; i &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; i++)
      {
        <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
          free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
        <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
          free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
        <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
          free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
            
            filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
            filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
            filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
        <span class="keywordflow">for</span> (i = <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>; i &lt; <a class="code" href="bgpd_8h.html#a0211cf02136115bf6674f56fedfc1ea1">RMAP_MAX</a>; i++)
          {
        <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
          free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
            filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }

    <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
      free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);

    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
      free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
        
        filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }
  
  <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* initial reference */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9e0bc271af1dfa4277d36ea632a70178"></a><!-- doxytag: member="bgpd.c::peer_description_set" ref="a9e0bc271af1dfa4277d36ea632a70178" args="(struct peer *peer, char *desc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_description_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>desc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02732">2732</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);

  peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, <a class="code" href="structdesc.html">desc</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab492e26614fa5960ea9b23c18ea03b81"></a><!-- doxytag: member="bgpd.c::peer_description_unset" ref="ab492e26614fa5960ea9b23c18ea03b81" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_description_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02743">2743</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);

  peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afc8c396e38cea0faaa1c08f915acb0c0"></a><!-- doxytag: member="bgpd.c::peer_distribute_set" ref="afc8c396e38cea0faaa1c08f915acb0c0" args="(struct peer *peer, afi_t afi, safi_t safi, int direct, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_distribute_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03578">3578</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#adeddcf92f035de98d9438aacc24eec77">BGP_ERR_PEER_FILTER_CONFLICT</a>;

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa0e0aaa9973c6e8766af52084c844f39"></a><!-- doxytag: member="bgpd.c::peer_distribute_unset" ref="aa0e0aaa9973c6e8766af52084c844f39" args="(struct peer *peer, afi_t afi, safi_t safi, int direct)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_distribute_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03625">3625</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* apply peer-group filter */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
        free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

    group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
      {
    filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

    <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
      <span class="keywordflow">continue</span>;

    <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
      free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
    filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5fd491f008f4e29fcc45ff0a7efe9cc3"></a><!-- doxytag: member="bgpd.c::peer_distribute_update" ref="a5fd491f008f4e29fcc45ff0a7efe9cc3" args="(struct access_list *access)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_distribute_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structaccess__list.html">access_list</a> *&#160;</td>
          <td class="paramname"><em>access</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03685">3685</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keywordtype">int</span> direct;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = 
            <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = 
            <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4df342066c91373d533a672726c8a128"></a><!-- doxytag: member="bgpd.c::peer_ebgp_multihop_set" ref="a4df342066c91373d533a672726c8a128" args="(struct peer *peer, int ttl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_ebgp_multihop_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ttl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02662">2662</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">return</span> 0;

  peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = ttl;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0 &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
    }
  <span class="keywordflow">else</span>
    {
      group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
        <span class="keywordflow">continue</span>;

      peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
        <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adac0c658fbf7d2802f329e017128d545"></a><!-- doxytag: member="bgpd.c::peer_ebgp_multihop_unset" ref="adac0c658fbf7d2802f329e017128d545" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_ebgp_multihop_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02695">2695</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0 &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
    }
  <span class="keywordflow">else</span>
    {
      group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
        <span class="keywordflow">continue</span>;

      peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
      
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
        <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a739fe9eea0a9d59d4be0f18047ed6e43"></a><!-- doxytag: member="bgpd.c::peer_flag_action_set" ref="a739fe9eea0a9d59d4be0f18047ed6e43" args="(const struct peer_flag_action *action_list, int size, struct peer_flag_action *action, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_flag_action_set </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> *&#160;</td>
          <td class="paramname"><em>action_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> *&#160;</td>
          <td class="paramname"><em>action</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02324">2324</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keywordtype">int</span> found = 0;
  <span class="keywordtype">int</span> reset_in = 0;
  <span class="keywordtype">int</span> reset_out = 0;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> *match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Check peer&#39;s frag action.  */</span>
  <span class="keywordflow">for</span> (i = 0; i &lt; size; i++)
    {
      match = &amp;action_list[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];

      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == 0)
    <span class="keywordflow">break</span>;

      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> &amp; <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
    {
      found = 1;

      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>)
        reset_in = 1;
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>)
        reset_out = 1;
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
        {
          reset_in = 1;
          reset_out = 1;
        }
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a>)
        action-&gt;<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a> = 1;
    }
    }

  <span class="comment">/* Set peer clear type.  */</span>
  <span class="keywordflow">if</span> (reset_in &amp;&amp; reset_out)
    action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reset_in)
    action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reset_out)
    action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>;
  <span class="keywordflow">else</span>
    action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a>;

  <span class="keywordflow">return</span> found;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af42ae190f546995ceb3ab6c43fbf9261"></a><!-- doxytag: member="bgpd.c::peer_flag_modify" ref="af42ae190f546995ceb3ab6c43fbf9261" args="(struct peer *peer, u_int32_t flag, int set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_flag_modify </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02424">2424</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> found;
  <span class="keywordtype">int</span> size;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> action;

  memset (&amp;action, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a>));
  size = <span class="keyword">sizeof</span> <a class="code" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">peer_flag_action_list</a> / <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a>);

  found = <a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (<a class="code" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">peer_flag_action_list</a>, size, &amp;action, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);

  <span class="comment">/* No flag action is found.  */</span>
  <span class="keywordflow">if</span> (! found)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;    

  <span class="comment">/* Not for peer-group member.  */</span>
  <span class="keywordflow">if</span> (action.not_for_member &amp;&amp; <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="comment">/* When unset the peer-group member&#39;s flag we have to check</span>
<span class="comment">     peer-group configuration.  */</span>
  <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
      {
    <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>)
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a80bfb96785d65c8235fb7aa55347b80a">BGP_ERR_PEER_GROUP_SHUTDOWN</a>;
    <span class="keywordflow">else</span>
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;
      }

  <span class="comment">/* Flag conflict check.  */</span>
  <span class="keywordflow">if</span> (<span class="keyword">set</span>
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> | <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>)
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> | <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a53db56bcbdd78385b5b74cb3f8cedef7">BGP_ERR_PEER_FLAG_CONFLICT</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>) == <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
    <span class="keywordflow">return</span> 0;
      <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
    <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">if</span> (<span class="keyword">set</span>)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
 
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (action.type == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
    <a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (peer, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);

      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>) == <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<span class="keyword">set</span>)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);

      <span class="keywordflow">if</span> (action.type == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
    <a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (peer, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a80952b7756503753c0fb09ad686293a3"></a><!-- doxytag: member="bgpd.c::peer_flag_modify_action" ref="a80952b7756503753c0fb09ad686293a3" args="(struct peer *peer, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_flag_modify_action </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02373">2373</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
        <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);

      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>)
        {
          <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>);
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer canceled&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
        }

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
    <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                 <a class="code" href="bgpd_8h.html#af9421e5cbfffb8ca7839d448d1b816b0">BGP_NOTIFY_CEASE_ADMIN_SHUTDOWN</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
      <span class="keywordflow">else</span>
    {
      peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>)
    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>)
    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6aa56ac440e8cf5f5418ad886ccb2b7a">PEER_DOWN_PASSIVE_CHANGE</a>;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>)
    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a784543e9aee1d60843df5b927cf03ef5">PEER_DOWN_MULTIHOP_CHANGE</a>;

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
               <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae0cc6e89358c892926f731aedc11f406"></a><!-- doxytag: member="bgpd.c::peer_flag_set" ref="ae0cc6e89358c892926f731aedc11f406" args="(struct peer *peer, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_flag_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02506">2506</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (peer, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>, 1);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1d2f669d9871f7287dcd16c75c92ba5a"></a><!-- doxytag: member="bgpd.c::peer_flag_unset" ref="a1d2f669d9871f7287dcd16c75c92ba5a" args="(struct peer *peer, u_int32_t flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_flag_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02512">2512</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (peer, <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6dcc47c3bfcd4236ed9ce1a32804159b"></a><!-- doxytag: member="bgpd.c::peer_free" ref="a6dcc47c3bfcd4236ed9ce1a32804159b" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00699">699</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);

  <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a>(peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>);

  <span class="comment">/* this /ought/ to have been done already through bgp_stop earlier,</span>
<span class="comment">   * but just to be sure.. </span>
<span class="comment">   */</span>
  <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
  <a class="code" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>);
  <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);
  <a class="code" href="bgp__fsm_8h.html#af4f1a52b106aa7dbf3494d0debf644d3">BGP_EVENT_FLUSH</a> (peer);
  
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);
  
  <span class="comment">/* Free allocated host character. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
  
  <span class="comment">/* Update source configuration.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
  
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
    
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>)
    <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>);
  
  <a class="code" href="bgp__advertise_8c.html#a1a133356214b32e6d51aec071be79f1d">bgp_sync_delete</a> (peer);
  memset (peer, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> peer));
  
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba713352d9f756ebf889b35e06e1fd31dc">MTYPE_BGP_PEER</a>, peer);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a170112becd0b52c5fe1c41af90881d8e"></a><!-- doxytag: member="bgpd.c::peer_global_config_reset" ref="a170112becd0b52c5fe1c41af90881d8e" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_global_config_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00618">618</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ? 255 : 1);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;

  peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5e92ed5850b701bbfe021c06579fa083"></a><!-- doxytag: member="bgpd.c::peer_group2peer_config_copy" ref="a5e92ed5850b701bbfe021c06579fa083" args="(struct peer_group *group, struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_group2peer_config_copy </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01395">1395</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>;
  <span class="keywordtype">int</span> out = <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>;
  <span class="keyword">struct </span>peer *conf;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *pfilter;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;

  conf = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>;
  pfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
  gfilter = &amp;conf-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* remote-as */</span>
  <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = conf-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;

  <span class="comment">/* remote-as */</span>
  <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
    peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = conf-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>;

  <span class="comment">/* TTL */</span>
  peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = conf-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;

  <span class="comment">/* Weight */</span>
  peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = conf-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;

  <span class="comment">/* peer flags apply */</span>
  peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> = conf-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>;
  <span class="comment">/* peer af_flags apply */</span>
  peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi];
  <span class="comment">/* peer config apply */</span>
  peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a> = conf-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>;

  <span class="comment">/* peer timers apply */</span>
  peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = conf-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
  peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = conf-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>;
  peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = conf-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (conf-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>))
    peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = conf-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;

  <span class="comment">/* advertisement-interval reset */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;

  <span class="comment">/* password apply */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);

  <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> =  <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, conf-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);

  <span class="comment">/* maximum-prefix */</span>
  peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi];
  peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi];
  peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi];

  <span class="comment">/* allowas-in */</span>
  peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi];

  <span class="comment">/* route-server-client */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(conf-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
    {
      <span class="comment">/* Make peer&#39;s RIB point to group&#39;s RIB. */</span>
      peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi];

      <span class="comment">/* Import policy. */</span>
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        {
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map;
        }
      <span class="keywordflow">else</span>
        {
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }

      <span class="comment">/* Export policy. */</span>
      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        {
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
          pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map;
        }
    }

  <span class="comment">/* default-originate route-map */</span>
  <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
      peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a>;
    }

  <span class="comment">/* update-source apply */</span>
  <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (conf-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, conf-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
    }

  <span class="comment">/* inbound filter apply */</span>
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].plist;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].aslist;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].map;
    }

  <span class="comment">/* outbound filter apply */</span>
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

 <span class="comment">/* RS-client&#39;s import/export route-maps. */</span>
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map;
    }

  <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
} 
</pre></div>
</div>
</div>
<a class="anchor" id="a664405c638f4405f8a3612226c84e440"></a><!-- doxytag: member="bgpd.c::peer_group_active" ref="a664405c638f4405f8a3612226c84e440" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_group_active </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01323">1323</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a97e6521400a139b83ca7f1503f853f9a"></a><!-- doxytag: member="bgpd.c::peer_group_bind" ref="a97e6521400a139b83ca7f1503f853f9a" args="(struct bgp *bgp, union sockunion *su, struct peer_group *group, afi_t afi, safi_t safi, as_t *as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_group_bind </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01732">1732</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keywordtype">int</span> first_member = 0;

  <span class="comment">/* Check peer group&#39;s address family.  */</span>
  <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a2cde295fdba79d53ae41b92df3de4e9b">BGP_ERR_PEER_GROUP_AF_UNCONFIGURED</a>;

  <span class="comment">/* Lookup the peer.  */</span>
  peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, su);

  <span class="comment">/* Create a new peer. */</span>
  <span class="keywordflow">if</span> (! peer)
    {
      <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a29f733011c01d73c129dc0406c86e1bf">BGP_ERR_PEER_GROUP_NO_REMOTE_AS</a>;

      peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>, afi, safi);
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
      peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 1;

      peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
      <a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (group, peer, afi, safi);

      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* When the peer already belongs to peer group, check the consistency.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <span class="keywordflow">if</span> (strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>) != 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a01e63518f6e7a1a6fb5c05a9363eac81">BGP_ERR_PEER_GROUP_CANT_CHANGE</a>;

      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Check current peer group configuration.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
      &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>) != 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a13e745dc6836e711e8654d2657af711c">BGP_ERR_PEER_GROUP_MISMATCH</a>;

  <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer))
    {
      <span class="keywordflow">if</span> (<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>)
    first_member = 1;
    }

  peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 1;
  peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
      
      peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (group &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> == group);

  <span class="keywordflow">if</span> (first_member)
    {
      <span class="comment">/* Advertisement-interval reset */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
      <span class="keywordflow">else</span>
    group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;

      <span class="comment">/* ebgp-multihop reset */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 255;

      <span class="comment">/* local-as reset */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
    {
      group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
    }
    }

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#a3363f400142fb233235d62ccdea22e38">pn</a>;
      
      <span class="comment">/* If it&#39;s not configured as RSERVER_CLIENT in any other address</span>
<span class="comment">          family, without being member of a peer_group, remove it from</span>
<span class="comment">          list bgp-&gt;rsclient.*/</span>
      <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (peer)
          &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, peer)))
        {
          <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* peer rsclient reference */</span>
          <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, pn);

          <span class="comment">/* Clear our own rsclient rib for this afi/safi. */</span>
          <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>);
        }

      <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi]);

      <span class="comment">/* Import policy. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        {
          free (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[RMAP_IMPORT].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
          peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }

      <span class="comment">/* Export policy. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
              &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        {
          free (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[RMAP_EXPORT].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
          peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }
    }

  <a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (group, peer, afi, safi);

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab019c4d00bd1e4db656139e0f60a1a52">PEER_DOWN_RMAP_BIND</a>;
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                      <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a693e769f899359a43259c2940f31546b"></a><!-- doxytag: member="bgpd.c::peer_group_cmp" ref="a693e769f899359a43259c2940f31546b" args="(struct peer_group *g1, struct peer_group *g2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_group_cmp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>g1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>g2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01316">1316</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> strcmp (g1-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, g2-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a11534c9662beb30137fc8df33822044c"></a><!-- doxytag: member="bgpd.c::peer_group_delete" ref="a11534c9662beb30137fc8df33822044c" args="(struct peer_group *group)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_group_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01680">1680</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  bgp = group-&gt;<a class="code" href="structpeer__group.html#a38fc9c198c0c75ca9785c47a5f5a77db">bgp</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
    }
  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);

  free (group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>);
  group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>);

  <span class="comment">/* Delete from all peer_group list. */</span>
  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, group);

  <a class="code" href="bgpd_8c.html#af5931e17119614624eb34e56765bed1d">peer_group_free</a> (group);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af5931e17119614624eb34e56765bed1d"></a><!-- doxytag: member="bgpd.c::peer_group_free" ref="af5931e17119614624eb34e56765bed1d" args="(struct peer_group *group)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_group_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01343">1343</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba04f19c123ab33958029f8251c6f96bc4">MTYPE_PEER_GROUP</a>, group);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6711e16446081f50f78d0d119c4f766c"></a><!-- doxytag: member="bgpd.c::peer_group_get" ref="a6711e16446081f50f78d0d119c4f766c" args="(struct bgp *bgp, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer__group.html">peer_group</a>* peer_group_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01363">1363</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;

  group = <a class="code" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (bgp, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  <span class="keywordflow">if</span> (group)
    <span class="keywordflow">return</span> group;

  group = <a class="code" href="bgpd_8c.html#a3992a10a8ebe6e68a3477157c4b2500a">peer_group_new</a> ();
  group-&gt;<a class="code" href="structpeer__group.html#a38fc9c198c0c75ca9785c47a5f5a77db">bgp</a> = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a> = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
    group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = group;
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = 0; 
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>);
  <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, group);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7db37de58ef9235f32a4ebecb9c4775"></a><!-- doxytag: member="bgpd.c::peer_group_lookup" ref="aa7db37de58ef9235f32a4ebecb9c4775" args="(struct bgp *bgp, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer__group.html">peer_group</a>* peer_group_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01349">1349</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <span class="keywordflow">if</span> (strcmp (group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>) == 0)
    <span class="keywordflow">return</span> group;
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3992a10a8ebe6e68a3477157c4b2500a"></a><!-- doxytag: member="bgpd.c::peer_group_new" ref="a3992a10a8ebe6e68a3477157c4b2500a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structpeer__group.html">peer_group</a>* peer_group_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01336">1336</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *) <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba04f19c123ab33958029f8251c6f96bc4">MTYPE_PEER_GROUP</a>,
                    <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a65259d64d50c78f602e4455cec44292a"></a><!-- doxytag: member="bgpd.c::peer_group_remote_as" ref="a65259d64d50c78f602e4455cec44292a" args="(struct bgp *bgp, const char *group_name, as_t *as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_group_remote_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01653">1653</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  group = <a class="code" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (bgp, group_name);
  <span class="keywordflow">if</span> (! group)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == *as)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* When we setup peer-group AS number all peer group member&#39;s AS</span>
<span class="comment">     number must be updated to same number.  */</span>
  <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, *as);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> != *as)
    <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (peer, *as);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab00980e8d334e36d3f6f498860cef27a"></a><!-- doxytag: member="bgpd.c::peer_group_remote_as_delete" ref="ab00980e8d334e36d3f6f498860cef27a" args="(struct peer_group *group)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_group_remote_as_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01710">1710</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
    }
  <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);

  group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = 0;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a24e54015a4ae245729350609b57b21fb"></a><!-- doxytag: member="bgpd.c::peer_group_unbind" ref="a24e54015a4ae245729350609b57b21fb" args="(struct bgp *bgp, struct peer *peer, struct peer_group *group, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_group_unbind </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer__group.html">peer_group</a> *&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01874">1874</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
      <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (group != peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a13e745dc6836e711e8654d2657af711c">BGP_ERR_PEER_GROUP_MISMATCH</a>;

  peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 0;
  peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 0;
  <a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (peer, afi, safi);

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi])
    peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer));
      <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* peer group list reference */</span>
      <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
      peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    {
      <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
      <span class="keywordflow">return</span> 0;
    }
      <a class="code" href="bgpd_8c.html#a170112becd0b52c5fe1c41af90881d8e">peer_global_config_reset</a> (peer);
    }

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af7429443bd1cc46883089a886250e2e8">PEER_DOWN_RMAP_UNBIND</a>;
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                      <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a86f61a67f39c2ff8381a5e396631d653"></a><!-- doxytag: member="bgpd.c::peer_interface_set" ref="a86f61a67f39c2ff8381a5e396631d653" args="(struct peer *peer, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_interface_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03280">3280</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);
  peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a> = strdup (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa201b234d81b580955116df1a401a387"></a><!-- doxytag: member="bgpd.c::peer_interface_unset" ref="aa201b234d81b580955116df1a401a387" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_interface_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03290">3290</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
    free (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);
  peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a0cdc337201562face7cdc18363e367"></a><!-- doxytag: member="bgpd.c::peer_is_group_member" ref="a1a0cdc337201562face7cdc18363e367" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int peer_is_group_member </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02518">2518</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5ad8324adf311770d3b86530e576077"></a><!-- doxytag: member="bgpd.c::peer_local_as_set" ref="ac5ad8324adf311770d3b86530e576077" args="(struct peer *peer, as_t as, int no_prepend)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_local_as_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>no_prepend</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03361">3361</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a26bc40f5bfcd100d81ca6fc6830bf550">BGP_ERR_LOCAL_AS_ALLOWED_ONLY_FOR_EBGP</a>;

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac5789f66ab509b346d51d8bbd79361ce">BGP_ERR_CANNOT_HAVE_LOCAL_AS_SAME_AS</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> == as &amp;&amp;
      ((<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) &amp;&amp; no_prepend)
       || (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) &amp;&amp; ! no_prepend)))
    <span class="keywordflow">return</span> 0;

  peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = as;
  <span class="keywordflow">if</span> (no_prepend)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

      <span class="keywordflow">return</span> 0;
    }

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = as;
      <span class="keywordflow">if</span> (no_prepend)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab7cb8ea066eeb90ee754ca517a914429"></a><!-- doxytag: member="bgpd.c::peer_local_as_unset" ref="ab7cb8ea066eeb90ee754ca517a914429" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_local_as_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03425">3425</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
    <span class="keywordflow">return</span> 0;

  peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

      <span class="keywordflow">return</span> 0;
    }

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a05008955933f8ba5f831e03862ca5b94"></a><!-- doxytag: member="bgpd.c::peer_lock" ref="a05008955933f8ba5f831e03862ca5b94" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer.html">peer</a>* peer_lock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00738">738</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> &gt;= 0));
    
  peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a>++;
  
  <span class="keywordflow">return</span> peer;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a65909a6f0ec7c8ab26101fad9ff1b6f7"></a><!-- doxytag: member="bgpd.c::peer_lookup" ref="a65909a6f0ec7c8ab26101fad9ff1b6f7" args="(struct bgp *bgp, union sockunion *su)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer.html">peer</a>* peer_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02150">2150</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (bgp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
        <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
            &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
          <span class="keywordflow">return</span> peer;
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *bgpnode, *nbgpnode;
  
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgpnode, nbgpnode, bgp))
        <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
          <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
              &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
            <span class="keywordflow">return</span> peer;
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38fe2d829b66f299b42e47bd2d3d5a6c"></a><!-- doxytag: member="bgpd.c::peer_lookup_with_open" ref="a38fe2d829b66f299b42e47bd2d3d5a6c" args="(union sockunion *su, as_t remote_as, struct in_addr *remote_id, int *as)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer.html">peer</a>* peer_lookup_with_open </td>
          <td>(</td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>remote_as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>remote_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>as</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02176">2176</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *bgpnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgpnode, bgp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, peer))
        {
          <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
              &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
            {
              <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as
                  &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>.s_addr == remote_id-&gt;s_addr)
                <span class="keywordflow">return</span> <a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>;
              <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as)
                *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = 1;
            }
        }

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, peer))
        {
          <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
              &amp;&amp;  ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
            {
              <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as
                  &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>.s_addr == 0)
                <span class="keywordflow">return</span> <a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>;
              <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as)
                *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = 1;
            }
        }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8dd962e630b1eee089dce4a78a1b719e"></a><!-- doxytag: member="bgpd.c::peer_maximum_prefix_set" ref="a8dd962e630b1eee089dce4a78a1b719e" args="(struct peer *peer, afi_t afi, safi_t safi, u_int32_t max, u_char threshold, int warning, u_int16_t restart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_maximum_prefix_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>threshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>warning</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname"><em>restart</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04240">4240</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
  peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = max;
  peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = threshold;
  peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = restart;
  <span class="keywordflow">if</span> (warning)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = max;
      peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = threshold;
      peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = restart;
      <span class="keywordflow">if</span> (warning)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1b96b3d77022efc99b238f4fced414f0"></a><!-- doxytag: member="bgpd.c::peer_maximum_prefix_unset" ref="a1b96b3d77022efc99b238f4fced414f0" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_maximum_prefix_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04281">4281</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="comment">/* apply peer-group config */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
      <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
      <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);

      peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi];
      peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi];
      peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi];
      <span class="keywordflow">return</span> 0;
    }

  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
  peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
  peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = 0;
  peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = 0;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
      peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = 0;
      peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = 0;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a86964de26d60ec9110c78a601b48ae1d"></a><!-- doxytag: member="bgpd.c::peer_new" ref="a86964de26d60ec9110c78a601b48ae1d" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structpeer.html">peer</a>* peer_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00780">780</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span>servent *sp;
  
  <span class="comment">/* bgp argument is absolutely required */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bgp);
  <span class="keywordflow">if</span> (!bgp)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="comment">/* Allocate new peer. */</span>
  peer = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba713352d9f756ebf889b35e06e1fd31dc">MTYPE_BGP_PEER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> peer));

  <span class="comment">/* Set default value. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = -1;
  peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
  peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
  peer-&gt;<a class="code" href="structpeer.html#a3231acf11a68285301f4e4ef3c24df3e">v_asorig</a> = <a class="code" href="bgpd_8h.html#ae2cdf99bec56ec673fb08237e0c3e29e">BGP_DEFAULT_ASORIGINATE</a>;
  peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = <a class="code" href="bgpd_8h.html#aa87491374c5f1e04e123e51e1dfd043f">Idle</a>;
  peer-&gt;<a class="code" href="structpeer.html#a6f5e76deea384483efc1f5bb27e51fbf">ostatus</a> = <a class="code" href="bgpd_8h.html#aa87491374c5f1e04e123e51e1dfd043f">Idle</a>;
  peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a> = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* initial reference */</span>
  <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (bgp);

  <span class="comment">/* Set default flags.  */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
      {
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>);
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>);
      }
    peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);

  <span class="comment">/* Create buffers.  */</span>
  peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
  peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a> = <a class="code" href="stream_8c.html#acebca866d54cab1ea0a10f3c30de69aa">stream_fifo_new</a> ();
  peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <a class="code" href="bgp__advertise_8c.html#acc82ab213ba4b510000b2da360e1d347">bgp_sync_init</a> (peer);

  <span class="comment">/* Get service port number.  */</span>
  sp = getservbyname (<span class="stringliteral">&quot;bgp&quot;</span>, <span class="stringliteral">&quot;tcp&quot;</span>);
  peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = (sp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ? <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a> : ntohs (sp-&gt;s_port);

  <span class="keywordflow">return</span> peer;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a61468e4b83c534c3eefb2158b1a4ebe3"></a><!-- doxytag: member="bgpd.c::peer_nsf_stop" ref="a61468e4b83c534c3eefb2158b1a4ebe3" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_nsf_stop </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l01141">1141</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>);

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> ; safi &lt; <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a> ; safi++)
      peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[afi][safi] = 0;

  if (peer-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>)
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart timer stopped&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>)
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart stalepath timer stopped&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
  <a class="code" href="bgp__route_8c.html#ac73f860ac71768cc3169bf96512d1b1c">bgp_clear_route_all</a> (peer);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a389e4630f10a9eac07f62095781d11d2"></a><!-- doxytag: member="bgpd.c::peer_password_set" ref="a389e4630f10a9eac07f62095781d11d2" args="(struct peer *peer, const char *password)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_password_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>password</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03473">3473</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn, *nnode;
  <span class="keywordtype">int</span> len = <a class="code" href="structpassword.html">password</a> ? strlen(<a class="code" href="structpassword.html">password</a>) : 0;
  <span class="keywordtype">int</span> ret = <a class="code" href="bgpd_8h.html#a19c4b12e2a1b7ef4ee85e0324fd5fe4d">BGP_SUCCESS</a>;

  <span class="keywordflow">if</span> ((len &lt; <a class="code" href="bgpd_8h.html#aec0f6522f37627afff295baef8c69aa5">PEER_PASSWORD_MINLEN</a>) || (len &gt; <a class="code" href="bgpd_8h.html#a7a57567c8f56c0002f8bb1ed00464dec">PEER_PASSWORD_MAXLEN</a>))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, <a class="code" href="structpassword.html">password</a>) == 0
      &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
  
  peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, <a class="code" href="structpassword.html">password</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
        
      <span class="keywordflow">return</span> (<a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer) &gt;= 0) ? <a class="code" href="bgpd_8h.html#a19c4b12e2a1b7ef4ee85e0324fd5fe4d">BGP_SUCCESS</a> : <a class="code" href="bgpd_8h.html#a91bd42e0cf38ee3909055bae143faa6f">BGP_ERR_TCPSIG_FAILED</a>;
    }

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, nn, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, <a class="code" href="structpassword.html">password</a>) == 0)
    <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
        <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
      
      peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, <a class="code" href="structpassword.html">password</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      
      <span class="keywordflow">if</span> (<a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer) &lt; 0)
        ret = <a class="code" href="bgpd_8h.html#a91bd42e0cf38ee3909055bae143faa6f">BGP_ERR_TCPSIG_FAILED</a>;
    }

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a87df2abeb771cd2d84103ff6a6ecd99e"></a><!-- doxytag: member="bgpd.c::peer_password_unset" ref="a87df2abeb771cd2d84103ff6a6ecd99e" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_password_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03524">3524</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn, *nnode;

  <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
      &amp;&amp; !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
      &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
      &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>) == 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
        <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
      
      peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);

      <span class="keywordflow">return</span> 0;
    }

  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
  peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, nn, nnode, peer))
    {
      <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
      peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aefbfb67ac02cc3eb6152e9daff8a55c0"></a><!-- doxytag: member="bgpd.c::peer_port_set" ref="aefbfb67ac02cc3eb6152e9daff8a55c0" args="(struct peer *peer, u_int16_t port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_port_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname"><em>port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03079">3079</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = port;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2c7f87a9450bb96edfe282e805a1913f"></a><!-- doxytag: member="bgpd.c::peer_port_unset" ref="a2c7f87a9450bb96edfe282e805a1913f" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_port_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03086">3086</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38fdd742a49d061566ad1e117d10facb"></a><!-- doxytag: member="bgpd.c::peer_prefix_list_set" ref="a38fdd742a49d061566ad1e117d10facb" args="(struct peer *peer, afi_t afi, safi_t safi, int direct, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_prefix_list_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03738">3738</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#adeddcf92f035de98d9438aacc24eec77">BGP_ERR_PEER_FILTER_CONFLICT</a>;

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a78c9d2a477af78eeff1ac55aebba0890"></a><!-- doxytag: member="bgpd.c::peer_prefix_list_unset" ref="a78c9d2a477af78eeff1ac55aebba0890" args="(struct peer *peer, afi_t afi, safi_t safi, int direct)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_prefix_list_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03784">3784</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* apply peer-group filter */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
        free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist;
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5ec286fdfa4fe804b0a87bce12923896"></a><!-- doxytag: member="bgpd.c::peer_prefix_list_update" ref="a5ec286fdfa4fe804b0a87bce12923896" args="(struct prefix_list *plist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void peer_prefix_list_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__list.html">prefix_list</a> *&#160;</td>
          <td class="paramname"><em>plist</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03844">3844</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keywordtype">int</span> direct;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = 
            <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
    {
      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
          {
        filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

        <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
          {
            <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
              filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = 
            <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
            <span class="keywordflow">else</span>
              filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          }
          }
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6cf9268104f8fa74c5b92ecd54a757d8"></a><!-- doxytag: member="bgpd.c::peer_remote_as" ref="a6cf9268104f8fa74c5b92ecd54a757d8" args="(struct bgp *bgp, union sockunion *su, as_t *as, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_remote_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00961">961</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> <a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;

  peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, su);

  <span class="keywordflow">if</span> (peer)
    {
      <span class="comment">/* When this peer is a member of peer-group.  */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        {
          <span class="comment">/* Return peer group&#39;s AS number.  */</span>
          *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
          <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac8dfcce2217bf45dba73a16f6e617450">BGP_ERR_PEER_GROUP_MEMBER</a>;
        }
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
        {
          <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        {
          *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
          <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
        }
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
        {
          *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
          <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
        }
        }
    }

      <span class="comment">/* Existing peer&#39;s AS number change. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> != *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (peer, *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
    }
  <span class="keywordflow">else</span>
    {

      <span class="comment">/* If the peer is not part of our confederation, and its not an</span>
<span class="comment">     iBGP peer then spoof the source AS */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>)
      &amp;&amp; ! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>) 
      &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    local_as = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
      <span class="keywordflow">else</span>
    local_as = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
      
      <span class="comment">/* If this is IPv4 unicast configuration and &quot;no bgp default</span>
<span class="comment">         ipv4-unicast&quot; is specified. */</span>

      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>)
      &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, local_as, *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>, 0, 0); 
      <span class="keywordflow">else</span>
    peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, local_as, *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>, afi, safi); 
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4c18f265e0444e0ed87dc66ca8ad8af9"></a><!-- doxytag: member="bgpd.c::peer_route_map_set" ref="a4c18f265e0444e0ed87dc66ca8ad8af9" args="(struct peer *peer, afi_t afi, safi_t safi, int direct, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_route_map_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04051">4051</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> &amp;&amp;
      direct != <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> ( (direct == <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> || direct == <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>)
      &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
  
  filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad5cedbe92571829f5979cd571934cb80"></a><!-- doxytag: member="bgpd.c::peer_route_map_unset" ref="ad5cedbe92571829f5979cd571934cb80" args="(struct peer *peer, afi_t afi, safi_t safi, int direct)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_route_map_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>direct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04098">4098</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (direct != <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> &amp;&amp;
      direct != <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="keywordflow">if</span> ( (direct == <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> || direct == <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>)
      &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* apply peer-group filter */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    {
      gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    {
      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
        free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map;
      <span class="keywordflow">return</span> 0;
    }
    }

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad8fe8bf899349888a64c0dd382db305d"></a><!-- doxytag: member="bgpd.c::peer_rsclient_active" ref="ad8fe8bf899349888a64c0dd382db305d" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_rsclient_active </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00514">514</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;

  <span class="keywordflow">for</span> (i=<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; i &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; i++)
    <span class="keywordflow">for</span> (j=<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; j &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; j++)
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[i][j], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
            &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[i][j])
        <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af16a840274ca5f244f25c1ce3aa70aa2"></a><!-- doxytag: member="bgpd.c::peer_sort" ref="af16a840274ca5f244f25c1ce3aa70aa2" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_sort </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00649">649</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;

  <span class="comment">/* Peer-group */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    <span class="keywordflow">return</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>);
      <span class="keywordflow">else</span>
    {
      <span class="keyword">struct </span>peer *peer1;
      peer1 = <a class="code" href="linklist_8c.html#a3260e282746edff39ac90288002c509f">listnode_head</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);
      <span class="keywordflow">if</span> (peer1)
        <span class="keywordflow">return</span> (peer1-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer1-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> 
            ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : BGP_PEER_EBGP);
    } 
      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>;
    }

  <span class="comment">/* Normal peer */</span>
  <span class="keywordflow">if</span> (bgp &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>)
        <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>;
      <span class="keywordflow">else</span>
        <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>;

      <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">return</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == 0
          ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a> : peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>
          ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : BGP_PEER_EBGP);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="abe0752af9abfb675ac6d613fea5a66a6"></a><!-- doxytag: member="bgpd.c::peer_timers_connect_set" ref="abe0752af9abfb675ac6d613fea5a66a6" args="(struct peer *peer, u_int32_t connect)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_timers_connect_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>connect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03211">3211</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> &gt; 65535)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="comment">/* Set value to the configuration. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
  peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = <a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;

  <span class="comment">/* Set value to timer setting. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a72e155cccc4fbe340c37a10801e5802e"></a><!-- doxytag: member="bgpd.c::peer_timers_connect_unset" ref="a72e155cccc4fbe340c37a10801e5802e" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_timers_connect_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03230">3230</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="comment">/* Clear configuration. */</span>
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
  peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;

  <span class="comment">/* Set timer setting to default value. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af5ccb9a71915cc9b34eadfb26ef05697"></a><!-- doxytag: member="bgpd.c::peer_timers_set" ref="af5ccb9a71915cc9b34eadfb26ef05697" args="(struct peer *peer, u_int32_t keepalive, u_int32_t holdtime)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_timers_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>keepalive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>holdtime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03141">3141</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="comment">/* Not for peer group memeber.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="comment">/* keepalive value check.  */</span>
  <span class="keywordflow">if</span> (keepalive &gt; 65535)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="comment">/* Holdtime value check.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> &gt; 65535)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="comment">/* Holdtime value must be either 0 or greater than 3.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> &lt; 3 &amp;&amp; <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> != 0)
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;

  <span class="comment">/* Set value to the configuration. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
  peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
  peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = (keepalive &lt; <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> / 3 ? keepalive : <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a> / 3);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
      peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
      peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adff2f4a5a13adecb3b2bf70681cc8a24"></a><!-- doxytag: member="bgpd.c::peer_timers_unset" ref="adff2f4a5a13adecb3b2bf70681cc8a24" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_timers_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03182">3182</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  <span class="comment">/* Clear configuration. */</span>
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
  peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
  peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
      peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
      peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c9a78413925372479b9c538daac6d1d"></a><!-- doxytag: member="bgpd.c::peer_unlock" ref="a7c9a78413925372479b9c538daac6d1d" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer.html">peer</a>* peer_unlock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00751">751</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> &gt; 0));
  
  peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a>--;
  
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> == 0)
    {
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unlocked and freeing&quot;</span>);
      <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>      <a class="code" href="bgpd_8c.html#a6dcc47c3bfcd4236ed9ce1a32804159b">peer_free</a> (peer);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> == 1)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unlocked to 1&quot;</span>);
      <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
    }
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">return</span> peer;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af11bfd2d13e4fddd3c70995d04549dac"></a><!-- doxytag: member="bgpd.c::peer_unsuppress_map_set" ref="af11bfd2d13e4fddd3c70995d04549dac" args="(struct peer *peer, afi_t afi, safi_t safi, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_unsuppress_map_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04159">4159</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
      
  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
  
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8c1efb3867b8216c5e153dd8f004bbd3"></a><!-- doxytag: member="bgpd.c::peer_unsuppress_map_unset" ref="a8c1efb3867b8216c5e153dd8f004bbd3" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_unsuppress_map_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04201">4201</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
    <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
    free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
      filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adbb712cdc80345160019521cbe858fbf"></a><!-- doxytag: member="bgpd.c::peer_update_source_addr_set" ref="adbb712cdc80345160019521cbe858fbf" args="(struct peer *peer, union sockunion *su)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_update_source_addr_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>su</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02825">2825</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
      &amp;&amp; <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, su) == 0)
    <span class="keywordflow">return</span> 0;
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (su);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, su) == 0)
        <span class="keywordflow">continue</span>;
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (su);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a96352fe742a75db61595d893031cd72c"></a><!-- doxytag: member="bgpd.c::peer_update_source_if_set" ref="a96352fe742a75db61595d893031cd72c" args="(struct peer *peer, const char *ifname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_update_source_if_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ifname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02755">2755</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
      &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, ifname) == 0)
    <span class="keywordflow">return</span> 0;

      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, ifname);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <span class="keywordflow">if</span> (strcmp (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, ifname) == 0)
        <span class="keywordflow">continue</span>;

      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, ifname);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9faec1e151a495bae9ff8ef9b591912b"></a><!-- doxytag: member="bgpd.c::peer_update_source_unset" ref="a9faec1e151a495bae9ff8ef9b591912b" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_update_source_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02893">2893</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    {
      group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;

      <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      su = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = su;
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = 
      <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
    }

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
    {
      <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
      peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
      peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
       {
         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
                          <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
       }
      <span class="keywordflow">else</span>
    <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acf827381bb67155dd3f9ec490bc453ff"></a><!-- doxytag: member="bgpd.c::peer_uptime" ref="acf827381bb67155dd3f9ec490bc453ff" args="(time_t uptime2, char *buf, size_t len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* peer_uptime </td>
          <td>(</td>
          <td class="paramtype">time_t&#160;</td>
          <td class="paramname"><em>uptime2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l04442">4442</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  time_t uptime1;
  <span class="keyword">struct </span>tm *tm;

  <span class="comment">/* Check buffer length. */</span>
  <span class="keywordflow">if</span> (len &lt; <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;peer_uptime (): buffer shortage %lu&quot;</span>, (u_long)len);
      <span class="comment">/* XXX: should return status instead of buf... */</span>
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;&lt;error&gt; &quot;</span>); 
      <span class="keywordflow">return</span> buf;
    }

  <span class="comment">/* If there is no connection has been done before print `never&#39;. */</span>
  <span class="keywordflow">if</span> (uptime2 == 0)
    {
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;never   &quot;</span>);
      <span class="keywordflow">return</span> buf;
    }

  <span class="comment">/* Get current time. */</span>
  uptime1 = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
  uptime1 -= uptime2;
  tm = gmtime (&amp;uptime1);

  <span class="comment">/* Making formatted timer strings. */</span>
<span class="preprocessor">#define ONE_DAY_SECOND 60*60*24</span>
<span class="preprocessor"></span><span class="preprocessor">#define ONE_WEEK_SECOND 60*60*24*7</span>
<span class="preprocessor"></span>
  <span class="keywordflow">if</span> (uptime1 &lt; ONE_DAY_SECOND)
    <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02d:%02d:%02d&quot;</span>, 
          tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uptime1 &lt; ONE_WEEK_SECOND)
    <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%dd%02dh%02dm&quot;</span>, 
          tm-&gt;tm_yday, tm-&gt;tm_hour, tm-&gt;tm_min);
  <span class="keywordflow">else</span>
    <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02dw%dd%02dh&quot;</span>, 
          tm-&gt;tm_yday/7, tm-&gt;tm_yday - ((tm-&gt;tm_yday/7) * 7), tm-&gt;tm_hour);
  <span class="keywordflow">return</span> buf;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6b15be4d41092baac69c01b64569077e"></a><!-- doxytag: member="bgpd.c::peer_weight_set" ref="a6b15be4d41092baac69c01b64569077e" args="(struct peer *peer, u_int16_t weight)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_weight_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname"><em>weight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03094">3094</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>);
  peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = weight;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a373d6c87af10908723300c63055044dc"></a><!-- doxytag: member="bgpd.c::peer_weight_unset" ref="a373d6c87af10908723300c63055044dc" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int peer_weight_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l03115">3115</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="comment">/* Set default weight. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
    peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;

  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* peer-group member updates. */</span>
  group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
    {
      peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a8ce0bedf381f9a751d2544b7b3bdcd4a"></a><!-- doxytag: member="bgpd.c::bgp_clist" ref="a8ce0bedf381f9a751d2544b7b3bdcd4a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcommunity__list__handler.html">community_list_handler</a>* <a class="el" href="bgpd_8c.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">bgp_clist</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00073">73</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a65ecd7a9ec0c8f969263cd6aa0452d69"></a><!-- doxytag: member="bgpd.c::bgp_master" ref="a65ecd7a9ec0c8f969263cd6aa0452d69" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__master.html">bgp_master</a> <a class="el" href="structbgp__master.html">bgp_master</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00065">65</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>

</div>
</div>
<a class="anchor" id="adeab9451f33cb80e3dad19688138d378"></a><!-- doxytag: member="bgpd.c::bm" ref="adeab9451f33cb80e3dad19688138d378" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__master.html">bgp_master</a>* <a class="el" href="bgpd_8h.html#adeab9451f33cb80e3dad19688138d378">bm</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgpd_8c_source.html#l00070">70</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>

</div>
</div>
<a class="anchor" id="af3122e10da4b070a7dcb03d60c663d96"></a><!-- doxytag: member="bgpd.c::peer_af_flag_action_list" ref="af3122e10da4b070a7dcb03d60c663d96" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> <a class="el" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">peer_af_flag_action_list</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
  {
    { <a class="code" href="bgpd_8h.html#a81ac724618a5428b3af519e296c0263e">PEER_FLAG_NEXTHOP_SELF</a>,             1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>,           1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>,       1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>,            0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a> },
    { <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>,         1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>,           1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>,               0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a> },
    { <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#abba8d6c84283161714fa65e519a3e3ac">PEER_FLAG_NEXTHOP_LOCAL_UNCHANGED</a>,  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
    { 0, 0, 0 }
  }
</pre></div>
<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02303">2303</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0285035dd7ce003bb3265c8b1a23f343"></a><!-- doxytag: member="bgpd.c::peer_flag_action_list" ref="a0285035dd7ce003bb3265c8b1a23f343" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structpeer__flag__action.html">peer_flag_action</a> <a class="el" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">peer_flag_action_list</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
  {
    { <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>,                  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>,                 0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>,          0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
    { <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>,      0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
    { <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>,         0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
    { <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>,       0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>,  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
    { 0, 0, 0 }
  }
</pre></div>
<p>Definition at line <a class="el" href="bgpd_8c_source.html#l02291">2291</a> of file <a class="el" href="bgpd_8c_source.html">bgpd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5ff73fe88ce576fe7fc3877984367add"></a><!-- doxytag: member="bgpd.c::router_id_zebra" ref="a5ff73fe88ce576fe7fc3877984367add" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr <a class="el" href="ospfd_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00043">43</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgpd_8c.html">bgpd.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:18 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
