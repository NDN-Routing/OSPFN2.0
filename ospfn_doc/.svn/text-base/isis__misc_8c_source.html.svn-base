<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: isisd/isis_misc.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('isis__misc_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">isisd/isis_misc.c</div>  </div>
</div>
<div class="contents">
<a href="isis__misc_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * IS-IS Rout(e)ing protocol - isis_misc.h</span>
<a name="l00003"></a>00003 <span class="comment"> *                             Miscellanous routines</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Copyright (C) 2001,2002   Sampo Saaristo</span>
<a name="l00006"></a>00006 <span class="comment"> *                           Tampere University of Technology      </span>
<a name="l00007"></a>00007 <span class="comment"> *                           Institute of Communications Engineering</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * This program is free software; you can redistribute it and/or modify it </span>
<a name="l00010"></a>00010 <span class="comment"> * under the terms of the GNU General Public Licenseas published by the Free </span>
<a name="l00011"></a>00011 <span class="comment"> * Software Foundation; either version 2 of the License, or (at your option) </span>
<a name="l00012"></a>00012 <span class="comment"> * any later version.</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> * This program is distributed in the hope that it will be useful,but WITHOUT </span>
<a name="l00015"></a>00015 <span class="comment"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or </span>
<a name="l00016"></a>00016 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for </span>
<a name="l00017"></a>00017 <span class="comment"> * more details.</span>
<a name="l00018"></a>00018 <span class="comment"></span>
<a name="l00019"></a>00019 <span class="comment"> * You should have received a copy of the GNU General Public License along </span>
<a name="l00020"></a>00020 <span class="comment"> * with this program; if not, write to the Free Software Foundation, Inc., </span>
<a name="l00021"></a>00021 <span class="comment"> * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.</span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="dict_8h.html">isisd/dict.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="isis__constants_8h.html">isisd/isis_constants.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="isis__common_8h.html">isisd/isis_common.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="isis__circuit_8h.html">isisd/isis_circuit.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="isisd_8h.html">isisd/isisd.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="isis__misc_8h.html">isisd/isis_misc.h</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="isis__tlv_8h.html">isisd/isis_tlv.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="isis__lsp_8h.html">isisd/isis_lsp.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="isis__constants_8h.html">isisd/isis_constants.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="isis__adjacency_8h.html">isisd/isis_adjacency.h</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* staticly assigned vars for printing purposes */</span>
<a name="l00045"></a><a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">00045</a> <span class="keyword">struct </span>in_addr <a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">new_prefix</a>;
<a name="l00046"></a>00046 <span class="comment">/* len of xxxx.xxxx.xxxx + place for #0 termination */</span>
<a name="l00047"></a><a class="code" href="isis__misc_8c.html#aba11fdf75896b0a0b94c02619b945c97">00047</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#aba11fdf75896b0a0b94c02619b945c97">sysid</a>[15];
<a name="l00048"></a>00048 <span class="comment">/* len of xxxx.xxxx.xxxx + place for #0 termination */</span>
<a name="l00049"></a><a class="code" href="isis__misc_8c.html#aa1751dc9ca6ba209edc0f7f8e51e1d11">00049</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#aa1751dc9ca6ba209edc0f7f8e51e1d11">snpa</a>[15];
<a name="l00050"></a>00050 <span class="comment">/* len of xx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xx */</span>
<a name="l00051"></a><a class="code" href="isis__misc_8c.html#a3abd829eb25fcb895161e33760809d31">00051</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#a3abd829eb25fcb895161e33760809d31">isonet</a>[51];
<a name="l00052"></a>00052 <span class="comment">/* + place for #0 termination */</span>
<a name="l00053"></a>00053 <span class="comment">/* len of xxxx.xxxx.xxxx.xx.xx + place for #0 termination */</span>
<a name="l00054"></a><a class="code" href="isis__misc_8c.html#ac0016d3200b8885e05d151ca16ef4315">00054</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#ac0016d3200b8885e05d151ca16ef4315">lspid</a>[21];
<a name="l00055"></a>00055 <span class="comment">/* len of xxYxxMxWxdxxhxxmxxs + place for #0 termination */</span>
<a name="l00056"></a><a class="code" href="isis__misc_8c.html#a3bba8e43b0b19a65a65afe53e9abe65a">00056</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#a3bba8e43b0b19a65a65afe53e9abe65a">datestring</a>[20];
<a name="l00057"></a><a class="code" href="isis__misc_8c.html#ab9687c731ec52b291707b90bab29f56d">00057</a> <span class="keywordtype">char</span> <a class="code" href="isis__misc_8c.html#ab9687c731ec52b291707b90bab29f56d">nlpidstring</a>[30];
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">/*</span>
<a name="l00060"></a>00060 <span class="comment"> * This converts the isonet to its printable format</span>
<a name="l00061"></a>00061 <span class="comment"> */</span>
<a name="l00062"></a>00062 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00063"></a><a class="code" href="isis__misc_8h.html#ac9d0bc22c17a931c8575205a45088a57">00063</a> <a class="code" href="isis__misc_8c.html#a5032aed64ad562c17d81f07afad28209">isonet_print</a> (u_char * from, <span class="keywordtype">int</span> len)
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00066"></a>00066   <span class="keywordtype">char</span> *pos = <a class="code" href="isis__misc_8c.html#a3abd829eb25fcb895161e33760809d31">isonet</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="keywordflow">if</span> (!from)
<a name="l00069"></a>00069     <span class="keywordflow">return</span> <span class="stringliteral">&quot;unknown&quot;</span>;
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="keywordflow">while</span> (i &lt; len)
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073       <span class="keywordflow">if</span> (i &amp; 1)
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075       sprintf (pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + i));
<a name="l00076"></a>00076       pos += 2;
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078       <span class="keywordflow">else</span>
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080       <span class="keywordflow">if</span> (i == (len - 1))
<a name="l00081"></a>00081         {           <span class="comment">/* No dot at the end of address */</span>
<a name="l00082"></a>00082           sprintf (pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + i));
<a name="l00083"></a>00083           pos += 2;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085       <span class="keywordflow">else</span>
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087           sprintf (pos, <span class="stringliteral">&quot;%02x.&quot;</span>, *(from + i));
<a name="l00088"></a>00088           pos += 3;
<a name="l00089"></a>00089         }
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091       i++;
<a name="l00092"></a>00092     }
<a name="l00093"></a>00093   *(pos) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00094"></a>00094   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#a3abd829eb25fcb895161e33760809d31">isonet</a>;
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/*</span>
<a name="l00098"></a>00098 <span class="comment"> * Returns 0 on error, length of buff on ok</span>
<a name="l00099"></a>00099 <span class="comment"> * extract dot from the dotted str, and insert all the number in a buff </span>
<a name="l00100"></a>00100 <span class="comment"> */</span>
<a name="l00101"></a>00101 <span class="keywordtype">int</span>
<a name="l00102"></a><a class="code" href="isis__misc_8h.html#a9c135e3de821a3b0c55d04d25952ce7e">00102</a> <a class="code" href="isis__misc_8c.html#af78b76a891271f9863820f38bcfa79e3">dotformat2buff</a> (u_char * buff, <span class="keyword">const</span> u_char * dotted)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104   <span class="keywordtype">int</span> dotlen, len = 0;
<a name="l00105"></a>00105   <span class="keyword">const</span> u_char *pos = dotted;
<a name="l00106"></a>00106   u_char number[3];
<a name="l00107"></a>00107   <span class="keywordtype">int</span> nextdotpos = 2;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   number[2] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00110"></a>00110   dotlen = strlen(dotted);
<a name="l00111"></a>00111   <span class="keywordflow">if</span> (dotlen &gt; 50)
<a name="l00112"></a>00112     {
<a name="l00113"></a>00113       <span class="comment">/* this can&#39;t be an iso net, its too long */</span>
<a name="l00114"></a>00114       <span class="keywordflow">return</span> 0;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">while</span> ((pos - dotted) &lt; dotlen &amp;&amp; len &lt; 20)
<a name="l00118"></a>00118     {
<a name="l00119"></a>00119       <span class="keywordflow">if</span> (*pos == <span class="charliteral">&#39;.&#39;</span>)
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121       <span class="comment">/* we expect the . at 2, and than every 5 */</span>
<a name="l00122"></a>00122       <span class="keywordflow">if</span> ((pos - dotted) != nextdotpos)
<a name="l00123"></a>00123         {
<a name="l00124"></a>00124           len = 0;
<a name="l00125"></a>00125           <span class="keywordflow">break</span>;
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127       nextdotpos += 5;
<a name="l00128"></a>00128       pos++;
<a name="l00129"></a>00129       <span class="keywordflow">continue</span>;
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131       <span class="comment">/* we must have at least two chars left here */</span>
<a name="l00132"></a>00132       <span class="keywordflow">if</span> (dotlen - (pos - dotted) &lt; 2)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134       len = 0;
<a name="l00135"></a>00135       <span class="keywordflow">break</span>;
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138       <span class="keywordflow">if</span> ((isxdigit ((<span class="keywordtype">int</span>) *pos)) &amp;&amp; (isxdigit ((<span class="keywordtype">int</span>) *(pos + 1))))
<a name="l00139"></a>00139     {
<a name="l00140"></a>00140       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (number, pos, 2);
<a name="l00141"></a>00141       pos += 2;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143       <span class="keywordflow">else</span>
<a name="l00144"></a>00144     {
<a name="l00145"></a>00145       len = 0;
<a name="l00146"></a>00146       <span class="keywordflow">break</span>;
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149       *(buff + len) = (<span class="keywordtype">char</span>) strtol ((<span class="keywordtype">char</span> *)number, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 16);
<a name="l00150"></a>00150       len++;
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153   <span class="keywordflow">return</span> len;
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">/*</span>
<a name="l00157"></a>00157 <span class="comment"> * conversion of XXXX.XXXX.XXXX to memory</span>
<a name="l00158"></a>00158 <span class="comment"> */</span>
<a name="l00159"></a>00159 <span class="keywordtype">int</span>
<a name="l00160"></a><a class="code" href="isis__misc_8h.html#a1a4249382258d9bd451a6fc81fe26985">00160</a> <a class="code" href="isis__misc_8c.html#a8346ca36d827a0baf1be68b49af6eab8">sysid2buff</a> (u_char * buff, <span class="keyword">const</span> u_char * dotted)
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162   <span class="keywordtype">int</span> len = 0;
<a name="l00163"></a>00163   <span class="keyword">const</span> u_char *pos = dotted;
<a name="l00164"></a>00164   u_char number[3];
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   number[2] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00167"></a>00167   <span class="comment">// surely not a sysid_string if not 14 length</span>
<a name="l00168"></a>00168   <span class="keywordflow">if</span> (strlen (dotted) != 14)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       <span class="keywordflow">return</span> 0;
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="keywordflow">while</span> (len &lt; <a class="code" href="isis__constants_8h.html#aeda8abfdcc24dfb0ab327ea79ce453fc">ISIS_SYS_ID_LEN</a>)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       <span class="keywordflow">if</span> (*pos == <span class="charliteral">&#39;.&#39;</span>)
<a name="l00176"></a>00176     {
<a name="l00177"></a>00177       <span class="comment">/* the . is not positioned correctly */</span>
<a name="l00178"></a>00178       <span class="keywordflow">if</span> (((pos - dotted) != 4) &amp;&amp; ((pos - dotted) != 9))
<a name="l00179"></a>00179         {
<a name="l00180"></a>00180           len = 0;
<a name="l00181"></a>00181           <span class="keywordflow">break</span>;
<a name="l00182"></a>00182         }
<a name="l00183"></a>00183       pos++;
<a name="l00184"></a>00184       <span class="keywordflow">continue</span>;
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186       <span class="keywordflow">if</span> ((isxdigit ((<span class="keywordtype">int</span>) *pos)) &amp;&amp; (isxdigit ((<span class="keywordtype">int</span>) *(pos + 1))))
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (number, pos, 2);
<a name="l00189"></a>00189       pos += 2;
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191       <span class="keywordflow">else</span>
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193       len = 0;
<a name="l00194"></a>00194       <span class="keywordflow">break</span>;
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197       *(buff + len) = (<span class="keywordtype">char</span>) strtol ((<span class="keywordtype">char</span> *)number, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 16);
<a name="l00198"></a>00198       len++;
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <span class="keywordflow">return</span> len;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="comment">/*</span>
<a name="l00206"></a>00206 <span class="comment"> * converts the nlpids struct (filled by TLV #129)</span>
<a name="l00207"></a>00207 <span class="comment"> * into a string</span>
<a name="l00208"></a>00208 <span class="comment"> */</span>
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keywordtype">char</span> *
<a name="l00211"></a><a class="code" href="isis__misc_8h.html#a2a090b6fb488f74d31f534d125a6710d">00211</a> <a class="code" href="isis__misc_8c.html#a184a29bb871c5cb8615a5b96d4f19935">nlpid2string</a> (<span class="keyword">struct</span> <a class="code" href="structnlpids.html">nlpids</a> *<a class="code" href="structnlpids.html">nlpids</a>)
<a name="l00212"></a>00212 {
<a name="l00213"></a>00213   <span class="keywordtype">char</span> *pos = <a class="code" href="isis__misc_8c.html#ab9687c731ec52b291707b90bab29f56d">nlpidstring</a>;
<a name="l00214"></a>00214   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   <span class="keywordflow">for</span> (i = 0; i &lt; nlpids-&gt;<a class="code" href="structnlpids.html#a73f0f5f1e7aa64694d5802b91af6533b">count</a>; i++)
<a name="l00217"></a>00217     {
<a name="l00218"></a>00218       <span class="keywordflow">switch</span> (nlpids-&gt;<a class="code" href="structnlpids.html#a6dbd263750da21187880986a50fd5857">nlpids</a>[i])
<a name="l00219"></a>00219     {
<a name="l00220"></a>00220     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a9c1ffc4a81108d901cd8914d20cd4caf">NLPID_IP</a>:
<a name="l00221"></a>00221       pos += sprintf (pos, <span class="stringliteral">&quot;IPv4&quot;</span>);
<a name="l00222"></a>00222       <span class="keywordflow">break</span>;
<a name="l00223"></a>00223     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#af33b1ac580353b4a2ec3b766d5f90464">NLPID_IPV6</a>:
<a name="l00224"></a>00224       pos += sprintf (pos, <span class="stringliteral">&quot;IPv6&quot;</span>);
<a name="l00225"></a>00225       <span class="keywordflow">break</span>;
<a name="l00226"></a>00226     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#aa253a0e203801099e64cce9fdc94ed8c">NLPID_SNAP</a>:
<a name="l00227"></a>00227       pos += sprintf (pos, <span class="stringliteral">&quot;SNAP&quot;</span>);
<a name="l00228"></a>00228       <span class="keywordflow">break</span>;
<a name="l00229"></a>00229     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a5e299355ebc145c326b433237001cd1b">NLPID_CLNP</a>:
<a name="l00230"></a>00230       pos += sprintf (pos, <span class="stringliteral">&quot;CLNP&quot;</span>);
<a name="l00231"></a>00231       <span class="keywordflow">break</span>;
<a name="l00232"></a>00232     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a37028f03325d11e1debc3664c367a5f7">NLPID_ESIS</a>:
<a name="l00233"></a>00233       pos += sprintf (pos, <span class="stringliteral">&quot;ES-IS&quot;</span>);
<a name="l00234"></a>00234       <span class="keywordflow">break</span>;
<a name="l00235"></a>00235     <span class="keywordflow">default</span>:
<a name="l00236"></a>00236       pos += sprintf (pos, <span class="stringliteral">&quot;unknown&quot;</span>);
<a name="l00237"></a>00237       <span class="keywordflow">break</span>;
<a name="l00238"></a>00238     }
<a name="l00239"></a>00239       <span class="keywordflow">if</span> (nlpids-&gt;<a class="code" href="structnlpids.html#a73f0f5f1e7aa64694d5802b91af6533b">count</a> - i &gt; 1)
<a name="l00240"></a>00240     pos += sprintf (pos, <span class="stringliteral">&quot;, &quot;</span>);
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   *(pos) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#ab9687c731ec52b291707b90bab29f56d">nlpidstring</a>;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="comment">/*</span>
<a name="l00250"></a>00250 <span class="comment"> *  supports the given af ?</span>
<a name="l00251"></a>00251 <span class="comment"> */</span>
<a name="l00252"></a>00252 <span class="keywordtype">int</span>
<a name="l00253"></a><a class="code" href="isis__misc_8h.html#a8ede5433e1d31781300c8d5d123844f2">00253</a> <a class="code" href="isis__misc_8c.html#a8ede5433e1d31781300c8d5d123844f2">speaks</a> (<span class="keyword">struct</span> <a class="code" href="structnlpids.html">nlpids</a> *<a class="code" href="structnlpids.html">nlpids</a>, <span class="keywordtype">int</span> family)
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="isis__misc_8c.html#a8ede5433e1d31781300c8d5d123844f2">speaks</a> = 0;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257   <span class="keywordflow">if</span> (nlpids == (<span class="keyword">struct</span> nlpids *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00258"></a>00258     <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#a8ede5433e1d31781300c8d5d123844f2">speaks</a>;
<a name="l00259"></a>00259   <span class="keywordflow">for</span> (i = 0; i &lt; nlpids-&gt;<a class="code" href="structnlpids.html#a73f0f5f1e7aa64694d5802b91af6533b">count</a>; i++)
<a name="l00260"></a>00260     {
<a name="l00261"></a>00261       <span class="keywordflow">if</span> (family == AF_INET &amp;&amp; nlpids-&gt;<a class="code" href="structnlpids.html#a6dbd263750da21187880986a50fd5857">nlpids</a>[i] == <a class="code" href="isis__constants_8h.html#a9c1ffc4a81108d901cd8914d20cd4caf">NLPID_IP</a>)
<a name="l00262"></a>00262     speaks = 1;
<a name="l00263"></a>00263       <span class="keywordflow">if</span> (family == AF_INET6 &amp;&amp; nlpids-&gt;<a class="code" href="structnlpids.html#a6dbd263750da21187880986a50fd5857">nlpids</a>[i] == <a class="code" href="isis__constants_8h.html#af33b1ac580353b4a2ec3b766d5f90464">NLPID_IPV6</a>)
<a name="l00264"></a>00264     speaks = 1;
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#a8ede5433e1d31781300c8d5d123844f2">speaks</a>;
<a name="l00268"></a>00268 }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 <span class="comment">/*</span>
<a name="l00271"></a>00271 <span class="comment"> * Returns 0 on error, IS-IS Circuit Type on ok</span>
<a name="l00272"></a>00272 <span class="comment"> */</span>
<a name="l00273"></a>00273 <span class="keywordtype">int</span>
<a name="l00274"></a><a class="code" href="isis__misc_8h.html#a53aed5294cc41900107e4e660ebe7dc5">00274</a> <a class="code" href="isis__misc_8c.html#a97e42328beb4a58038f0c2cbd0c4c238">string2circuit_t</a> (<span class="keyword">const</span> u_char * <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00275"></a>00275 {
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="keywordflow">if</span> (!str)
<a name="l00278"></a>00278     <span class="keywordflow">return</span> 0;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280   <span class="keywordflow">if</span> (!strcmp (str, <span class="stringliteral">&quot;level-1&quot;</span>))
<a name="l00281"></a>00281     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a4806dbcd4c094ef55cecd6aca29520d7">IS_LEVEL_1</a>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="keywordflow">if</span> (!strcmp (str, <span class="stringliteral">&quot;level-2-only&quot;</span>) || !strcmp (str, <span class="stringliteral">&quot;level-2&quot;</span>))
<a name="l00284"></a>00284     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a9daa7fbf09b604c718f3bbe189aedd1a">IS_LEVEL_2</a>;
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="keywordflow">if</span> (!strcmp (str, <span class="stringliteral">&quot;level-1-2&quot;</span>))
<a name="l00287"></a>00287     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a9906fe43cc332e34827b3c233d509da6">IS_LEVEL_1_AND_2</a>;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   <span class="keywordflow">return</span> 0;
<a name="l00290"></a>00290 }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00293"></a><a class="code" href="isis__misc_8h.html#a8eed42d3a71109a9fb98e42468a9925b">00293</a> <a class="code" href="isis__misc_8c.html#a35b15c65a44088982fa8daca9fc7b022">circuit_t2string</a> (<span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a4237fb9b680bb5a92208b7e02eccb6a1">circuit_t</a>)
<a name="l00294"></a>00294 {
<a name="l00295"></a>00295   <span class="keywordflow">switch</span> (circuit_t)
<a name="l00296"></a>00296     {
<a name="l00297"></a>00297     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a4806dbcd4c094ef55cecd6aca29520d7">IS_LEVEL_1</a>:
<a name="l00298"></a>00298       <span class="keywordflow">return</span> <span class="stringliteral">&quot;L1&quot;</span>;
<a name="l00299"></a>00299     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a9daa7fbf09b604c718f3bbe189aedd1a">IS_LEVEL_2</a>:
<a name="l00300"></a>00300       <span class="keywordflow">return</span> <span class="stringliteral">&quot;L2&quot;</span>;
<a name="l00301"></a>00301     <span class="keywordflow">case</span> <a class="code" href="isis__constants_8h.html#a9906fe43cc332e34827b3c233d509da6">IS_LEVEL_1_AND_2</a>:
<a name="l00302"></a>00302       <span class="keywordflow">return</span> <span class="stringliteral">&quot;L1L2&quot;</span>;
<a name="l00303"></a>00303     <span class="keywordflow">default</span>:
<a name="l00304"></a>00304       <span class="keywordflow">return</span> <span class="stringliteral">&quot;??&quot;</span>;
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;          <span class="comment">/* not reached */</span>
<a name="l00308"></a>00308 }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00311"></a><a class="code" href="isis__misc_8h.html#a1b7a6264816a839e7ef875d91f1e1e4f">00311</a> <a class="code" href="isis__misc_8c.html#a5f588784d3119ad2a6ecc2509daaa2f0">syst2string</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00312"></a>00312 {
<a name="l00313"></a>00313   <span class="keywordflow">switch</span> (type)
<a name="l00314"></a>00314     {
<a name="l00315"></a>00315     <span class="keywordflow">case</span> <a class="code" href="isis__adjacency_8h.html#ad310c3cfba255c6c6dda415939268b4da0b5dc35b6ff6333177392a069af08ce1">ISIS_SYSTYPE_ES</a>:
<a name="l00316"></a>00316       <span class="keywordflow">return</span> <span class="stringliteral">&quot;ES&quot;</span>;
<a name="l00317"></a>00317     <span class="keywordflow">case</span> <a class="code" href="isis__adjacency_8h.html#ad310c3cfba255c6c6dda415939268b4da200778581ea795c59c48b27748eae10e">ISIS_SYSTYPE_IS</a>:
<a name="l00318"></a>00318       <span class="keywordflow">return</span> <span class="stringliteral">&quot;IS&quot;</span>;
<a name="l00319"></a>00319     <span class="keywordflow">case</span> <a class="code" href="isis__adjacency_8h.html#ad310c3cfba255c6c6dda415939268b4daddebdf6ea1f78c8503dd520854310078">ISIS_SYSTYPE_L1_IS</a>:
<a name="l00320"></a>00320       <span class="keywordflow">return</span> <span class="stringliteral">&quot;1&quot;</span>;
<a name="l00321"></a>00321     <span class="keywordflow">case</span> <a class="code" href="isis__adjacency_8h.html#ad310c3cfba255c6c6dda415939268b4da615d7aa9f3d08cd8360e1b04a0b8806b">ISIS_SYSTYPE_L2_IS</a>:
<a name="l00322"></a>00322       <span class="keywordflow">return</span> <span class="stringliteral">&quot;2&quot;</span>;
<a name="l00323"></a>00323     <span class="keywordflow">default</span>:
<a name="l00324"></a>00324       <span class="keywordflow">return</span> <span class="stringliteral">&quot;??&quot;</span>;
<a name="l00325"></a>00325     }
<a name="l00326"></a>00326 
<a name="l00327"></a>00327   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;          <span class="comment">/* not reached */</span>
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="comment">/*</span>
<a name="l00331"></a>00331 <span class="comment"> * Print functions - we print to static vars</span>
<a name="l00332"></a>00332 <span class="comment"> */</span>
<a name="l00333"></a>00333 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00334"></a><a class="code" href="isis__misc_8h.html#ad9460f55b1f9cc46f18da446a69cd47e">00334</a> <a class="code" href="isis__misc_8c.html#a9ff6d4a3900eef27814548c4c5357090">snpa_print</a> (u_char * from)
<a name="l00335"></a>00335 {
<a name="l00336"></a>00336   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00337"></a>00337   u_char *pos = (u_char *)<a class="code" href="isis__misc_8c.html#aa1751dc9ca6ba209edc0f7f8e51e1d11">snpa</a>;
<a name="l00338"></a>00338 
<a name="l00339"></a>00339   <span class="keywordflow">if</span> (!from)
<a name="l00340"></a>00340     <span class="keywordflow">return</span> <span class="stringliteral">&quot;unknown&quot;</span>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342   <span class="keywordflow">while</span> (i &lt; <a class="code" href="isis__constants_8h.html#a9822d89774e0d6ddaa06503950130423">ETH_ALEN</a> - 1)
<a name="l00343"></a>00343     {
<a name="l00344"></a>00344       <span class="keywordflow">if</span> (i &amp; 1)
<a name="l00345"></a>00345     {
<a name="l00346"></a>00346       sprintf ((<span class="keywordtype">char</span> *)pos, <span class="stringliteral">&quot;%02x.&quot;</span>, *(from + i));
<a name="l00347"></a>00347       pos += 3;
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349       <span class="keywordflow">else</span>
<a name="l00350"></a>00350     {
<a name="l00351"></a>00351       sprintf ((<span class="keywordtype">char</span> *)pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + i));
<a name="l00352"></a>00352       pos += 2;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355       i++;
<a name="l00356"></a>00356     }
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   sprintf ((<span class="keywordtype">char</span> *)pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + (<a class="code" href="isis__constants_8h.html#aeda8abfdcc24dfb0ab327ea79ce453fc">ISIS_SYS_ID_LEN</a> - 1)));
<a name="l00359"></a>00359   pos += 2;
<a name="l00360"></a>00360   *(pos) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00361"></a>00361 
<a name="l00362"></a>00362   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#aa1751dc9ca6ba209edc0f7f8e51e1d11">snpa</a>;
<a name="l00363"></a>00363 }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00366"></a><a class="code" href="isis__misc_8h.html#aaab68be55f90f8cf2337042bbc402af3">00366</a> <a class="code" href="isis__misc_8c.html#aabccf63144f92eecd0eb77f24ee98529">sysid_print</a> (u_char * from)
<a name="l00367"></a>00367 {
<a name="l00368"></a>00368   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00369"></a>00369   <span class="keywordtype">char</span> *pos = <a class="code" href="isis__misc_8c.html#aba11fdf75896b0a0b94c02619b945c97">sysid</a>;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (!from)
<a name="l00372"></a>00372     <span class="keywordflow">return</span> <span class="stringliteral">&quot;unknown&quot;</span>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374   <span class="keywordflow">while</span> (i &lt; <a class="code" href="isis__constants_8h.html#aeda8abfdcc24dfb0ab327ea79ce453fc">ISIS_SYS_ID_LEN</a> - 1)
<a name="l00375"></a>00375     {
<a name="l00376"></a>00376       <span class="keywordflow">if</span> (i &amp; 1)
<a name="l00377"></a>00377     {
<a name="l00378"></a>00378       sprintf (pos, <span class="stringliteral">&quot;%02x.&quot;</span>, *(from + i));
<a name="l00379"></a>00379       pos += 3;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381       <span class="keywordflow">else</span>
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       sprintf (pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + i));
<a name="l00384"></a>00384       pos += 2;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387       i++;
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   sprintf (pos, <span class="stringliteral">&quot;%02x&quot;</span>, *(from + (<a class="code" href="isis__constants_8h.html#aeda8abfdcc24dfb0ab327ea79ce453fc">ISIS_SYS_ID_LEN</a> - 1)));
<a name="l00391"></a>00391   pos += 2;
<a name="l00392"></a>00392   *(pos) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00393"></a>00393 
<a name="l00394"></a>00394   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#aba11fdf75896b0a0b94c02619b945c97">sysid</a>;
<a name="l00395"></a>00395 }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00398"></a><a class="code" href="isis__misc_8h.html#a084a9ae632046a52e881a7f54f283593">00398</a> <a class="code" href="isis__misc_8c.html#a3a0e7f92008e3167e2c09b8761d06766">rawlspid_print</a> (u_char * from)
<a name="l00399"></a>00399 {
<a name="l00400"></a>00400   <span class="keywordtype">char</span> *pos = <a class="code" href="isis__misc_8c.html#ac0016d3200b8885e05d151ca16ef4315">lspid</a>;
<a name="l00401"></a>00401   <span class="keywordflow">if</span> (!from)
<a name="l00402"></a>00402     <span class="keywordflow">return</span> <span class="stringliteral">&quot;unknown&quot;</span>;
<a name="l00403"></a>00403   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (pos, <a class="code" href="isis__misc_8c.html#aabccf63144f92eecd0eb77f24ee98529">sysid_print</a> (from), 15);
<a name="l00404"></a>00404   pos += 14;
<a name="l00405"></a>00405   sprintf (pos, <span class="stringliteral">&quot;.%02x&quot;</span>, <a class="code" href="isis__lsp_8h.html#a15ad7ce72dee875930a28bec035f7b71">LSP_PSEUDO_ID</a> (from));
<a name="l00406"></a>00406   pos += 3;
<a name="l00407"></a>00407   sprintf (pos, <span class="stringliteral">&quot;-%02x&quot;</span>, <a class="code" href="isis__lsp_8h.html#a3d17e3f51a6b45aa8a777ec4b9ec3100">LSP_FRAGMENT</a> (from));
<a name="l00408"></a>00408   pos += 3;
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   *(pos) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#ac0016d3200b8885e05d151ca16ef4315">lspid</a>;
<a name="l00413"></a>00413 }
<a name="l00414"></a>00414 
<a name="l00415"></a>00415 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00416"></a><a class="code" href="isis__misc_8h.html#a1a566bbaaf973bc6447a5860dc7822d0">00416</a> <a class="code" href="isis__misc_8c.html#a047be8e0e80cc74d57f64ab42e0f6510">time2string</a> (u_int32_t time)
<a name="l00417"></a>00417 {
<a name="l00418"></a>00418   <span class="keywordtype">char</span> *pos = <a class="code" href="isis__misc_8c.html#a3bba8e43b0b19a65a65afe53e9abe65a">datestring</a>;
<a name="l00419"></a>00419   u_int32_t rest;
<a name="l00420"></a>00420 
<a name="l00421"></a>00421   <span class="keywordflow">if</span> (time == 0)
<a name="l00422"></a>00422     <span class="keywordflow">return</span> <span class="stringliteral">&quot;-&quot;</span>;
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   <span class="keywordflow">if</span> (time / <a class="code" href="isis__misc_8h.html#ae8eebe70a02e029d2834cf0a228fa547">SECS_PER_YEAR</a>)
<a name="l00425"></a>00425     pos += sprintf (pos, <span class="stringliteral">&quot;%uY&quot;</span>, time / <a class="code" href="isis__misc_8h.html#ae8eebe70a02e029d2834cf0a228fa547">SECS_PER_YEAR</a>);
<a name="l00426"></a>00426   rest = time % <a class="code" href="isis__misc_8h.html#ae8eebe70a02e029d2834cf0a228fa547">SECS_PER_YEAR</a>;
<a name="l00427"></a>00427   <span class="keywordflow">if</span> (rest / <a class="code" href="isis__misc_8h.html#a8c8fff08c951b5f8702ad6f92c53d788">SECS_PER_MONTH</a>)
<a name="l00428"></a>00428     pos += sprintf (pos, <span class="stringliteral">&quot;%uM&quot;</span>, rest / <a class="code" href="isis__misc_8h.html#a8c8fff08c951b5f8702ad6f92c53d788">SECS_PER_MONTH</a>);
<a name="l00429"></a>00429   rest = rest % <a class="code" href="isis__misc_8h.html#a8c8fff08c951b5f8702ad6f92c53d788">SECS_PER_MONTH</a>;
<a name="l00430"></a>00430   <span class="keywordflow">if</span> (rest / <a class="code" href="isis__misc_8h.html#a1e3f1ac0a4b60f9a7a14641ff701bc33">SECS_PER_WEEK</a>)
<a name="l00431"></a>00431     pos += sprintf (pos, <span class="stringliteral">&quot;%uw&quot;</span>, rest / <a class="code" href="isis__misc_8h.html#a1e3f1ac0a4b60f9a7a14641ff701bc33">SECS_PER_WEEK</a>);
<a name="l00432"></a>00432   rest = rest % <a class="code" href="isis__misc_8h.html#a1e3f1ac0a4b60f9a7a14641ff701bc33">SECS_PER_WEEK</a>;
<a name="l00433"></a>00433   <span class="keywordflow">if</span> (rest / <a class="code" href="isis__misc_8h.html#ae6bc10904b2b09a717f1fb81cce017de">SECS_PER_DAY</a>)
<a name="l00434"></a>00434     pos += sprintf (pos, <span class="stringliteral">&quot;%ud&quot;</span>, rest / <a class="code" href="isis__misc_8h.html#ae6bc10904b2b09a717f1fb81cce017de">SECS_PER_DAY</a>);
<a name="l00435"></a>00435   rest = rest % <a class="code" href="isis__misc_8h.html#ae6bc10904b2b09a717f1fb81cce017de">SECS_PER_DAY</a>;
<a name="l00436"></a>00436   <span class="keywordflow">if</span> (rest / <a class="code" href="isis__misc_8h.html#a11528d10d5838afd2d0ec2f5841167cf">SECS_PER_HOUR</a>)
<a name="l00437"></a>00437     pos += sprintf (pos, <span class="stringliteral">&quot;%uh&quot;</span>, rest / <a class="code" href="isis__misc_8h.html#a11528d10d5838afd2d0ec2f5841167cf">SECS_PER_HOUR</a>);
<a name="l00438"></a>00438   rest = rest % <a class="code" href="isis__misc_8h.html#a11528d10d5838afd2d0ec2f5841167cf">SECS_PER_HOUR</a>;
<a name="l00439"></a>00439   <span class="keywordflow">if</span> (rest / <a class="code" href="isis__misc_8h.html#a8011aad3edacabe7850c23b5725a8f51">SECS_PER_MINUTE</a>)
<a name="l00440"></a>00440     pos += sprintf (pos, <span class="stringliteral">&quot;%um&quot;</span>, rest / <a class="code" href="isis__misc_8h.html#a8011aad3edacabe7850c23b5725a8f51">SECS_PER_MINUTE</a>);
<a name="l00441"></a>00441   rest = rest % <a class="code" href="isis__misc_8h.html#a8011aad3edacabe7850c23b5725a8f51">SECS_PER_MINUTE</a>;
<a name="l00442"></a>00442   <span class="keywordflow">if</span> (rest)
<a name="l00443"></a>00443     pos += sprintf (pos, <span class="stringliteral">&quot;%us&quot;</span>, rest);
<a name="l00444"></a>00444 
<a name="l00445"></a>00445   *(pos) = 0;
<a name="l00446"></a>00446 
<a name="l00447"></a>00447   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#a3bba8e43b0b19a65a65afe53e9abe65a">datestring</a>;
<a name="l00448"></a>00448 }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450 <span class="comment">/*</span>
<a name="l00451"></a>00451 <span class="comment"> * routine to decrement a timer by a random</span>
<a name="l00452"></a>00452 <span class="comment"> * number</span>
<a name="l00453"></a>00453 <span class="comment"> *</span>
<a name="l00454"></a>00454 <span class="comment"> * first argument is the timer and the second is</span>
<a name="l00455"></a>00455 <span class="comment"> * the jitter</span>
<a name="l00456"></a>00456 <span class="comment"> */</span>
<a name="l00457"></a>00457 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00458"></a><a class="code" href="isis__misc_8h.html#a177a75676b1916fefb4eb7275911fb6e">00458</a> <a class="code" href="isis__misc_8c.html#a177a75676b1916fefb4eb7275911fb6e">isis_jitter</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> jitter)
<a name="l00459"></a>00459 {
<a name="l00460"></a>00460   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>, <a class="code" href="spgrid_8c.html#a166d56cfd4c4c4d27db0bd3cd0fe81d9">k</a>;
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="keywordflow">if</span> (jitter &gt;= 100)
<a name="l00463"></a>00463     <span class="keywordflow">return</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00464"></a>00464 
<a name="l00465"></a>00465   <span class="keywordflow">if</span> (timer == 1)
<a name="l00466"></a>00466     <span class="keywordflow">return</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00467"></a>00467   <span class="comment">/* </span>
<a name="l00468"></a>00468 <span class="comment">   * randomizing just the percent value provides</span>
<a name="l00469"></a>00469 <span class="comment">   * no good random numbers - hence the spread</span>
<a name="l00470"></a>00470 <span class="comment">   * to RANDOM_SPREAD (100000), which is ok as</span>
<a name="l00471"></a>00471 <span class="comment">   * most IS-IS timers are no longer than 16 bit</span>
<a name="l00472"></a>00472 <span class="comment">   */</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474   j = 1 + (int) ((<a class="code" href="isis__constants_8h.html#af51c0f778fef1393ff674bd664400b68">RANDOM_SPREAD</a> * rand ()) / (RAND_MAX + 1.0));
<a name="l00475"></a>00475 
<a name="l00476"></a>00476   k = timer - (timer * (100 - jitter)) / 100;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   timer = timer - (k * j / <a class="code" href="isis__constants_8h.html#af51c0f778fef1393ff674bd664400b68">RANDOM_SPREAD</a>);
<a name="l00479"></a>00479 
<a name="l00480"></a>00480   <span class="keywordflow">return</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00481"></a>00481 }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="keyword">struct </span>in_addr
<a name="l00484"></a><a class="code" href="isis__misc_8h.html#af795aa21c24ab7f8e6e942be669bfc34">00484</a> <a class="code" href="isis__misc_8c.html#af795aa21c24ab7f8e6e942be669bfc34">newprefix2inaddr</a> (u_char * prefix_start, u_char prefix_masklen)
<a name="l00485"></a>00485 {
<a name="l00486"></a>00486   memset (&amp;<a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">new_prefix</a>, 0, <span class="keyword">sizeof</span> (<a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">new_prefix</a>));
<a name="l00487"></a>00487   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">new_prefix</a>, prefix_start, (prefix_masklen &amp; 0x3F) ?
<a name="l00488"></a>00488       ((((prefix_masklen &amp; 0x3F) - 1) &gt;&gt; 3) + 1) : 0);
<a name="l00489"></a>00489   <span class="keywordflow">return</span> <a class="code" href="isis__misc_8c.html#a99c2abe39d2c14920740dc65e00b0c54">new_prefix</a>;
<a name="l00490"></a>00490 }
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="comment">/*</span>
<a name="l00493"></a>00493 <span class="comment"> * Returns host.name if any, otherwise</span>
<a name="l00494"></a>00494 <span class="comment"> * it returns the system hostname.</span>
<a name="l00495"></a>00495 <span class="comment"> */</span>
<a name="l00496"></a>00496 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00497"></a><a class="code" href="isis__misc_8h.html#a5fc76e0c3f105d5a4ff9a9396e0fdbd7">00497</a> <a class="code" href="isis__misc_8c.html#a5fc76e0c3f105d5a4ff9a9396e0fdbd7">unix_hostname</a> (<span class="keywordtype">void</span>)
<a name="l00498"></a>00498 {
<a name="l00499"></a>00499   <span class="keyword">static</span> <span class="keyword">struct </span>utsname names;
<a name="l00500"></a>00500   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structhostname.html">hostname</a>;
<a name="l00501"></a>00501   <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structhost.html">host</a> host;
<a name="l00502"></a>00502 
<a name="l00503"></a>00503   hostname = host.<a class="code" href="structhost.html#ae29a96977a9350ec0d4323ccd38ebc9b">name</a>;
<a name="l00504"></a>00504   <span class="keywordflow">if</span> (!hostname)
<a name="l00505"></a>00505     {
<a name="l00506"></a>00506       uname (&amp;names);
<a name="l00507"></a>00507       hostname = names.nodename;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510   <span class="keywordflow">return</span> hostname;
<a name="l00511"></a>00511 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="isis__misc_8c.html">isis_misc.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:04 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
