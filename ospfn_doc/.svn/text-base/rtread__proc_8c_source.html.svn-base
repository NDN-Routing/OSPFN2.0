<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rtread_proc.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rtread__proc_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/rtread_proc.c</div>  </div>
</div>
<div class="contents">
<a href="rtread__proc_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Kernel routing readup by /proc filesystem</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">rib.h</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="rt_8h.html">zebra/rt.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/* Proc file system to read IPv4 routing table. */</span>
<a name="l00034"></a>00034 <span class="preprocessor">#ifndef _PATH_PROCNET_ROUTE</span>
<a name="l00035"></a><a class="code" href="rtread__proc_8c.html#a00ffd430c3d2f1c877703189bb681168">00035</a> <span class="preprocessor"></span><span class="preprocessor">#define _PATH_PROCNET_ROUTE      &quot;/proc/net/route&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* _PATH_PROCNET_ROUTE */</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">/* Proc file system to read IPv6 routing table. */</span>
<a name="l00039"></a>00039 <span class="preprocessor">#ifndef _PATH_PROCNET_ROUTE6</span>
<a name="l00040"></a><a class="code" href="rtread__proc_8c.html#ae5b8d529e98a6c474f36245fe224e4af">00040</a> <span class="preprocessor"></span><span class="preprocessor">#define _PATH_PROCNET_ROUTE6     &quot;/proc/net/ipv6_route&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* _PATH_PROCNET_ROUTE6 */</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">/* To read interface&#39;s name */</span>
<a name="l00044"></a><a class="code" href="rtread__proc_8c.html#ab819b6f1f4d393be3e866af97297b9cb">00044</a> <span class="preprocessor">#define INTERFACE_NAMSIZ 20  </span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="comment">/* Reading buffer for one routing entry. */</span>
<a name="l00047"></a><a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">00047</a> <span class="preprocessor">#define RT_BUFSIZ 1024</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">/* Kernel routing table read up by /proc filesystem. */</span>
<a name="l00050"></a>00050 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00051"></a><a class="code" href="rtread__proc_8c.html#a5c7e32f619971d8431e65de405caa66b">00051</a> <a class="code" href="rtread__proc_8c.html#a5c7e32f619971d8431e65de405caa66b">proc_route_read</a> (<span class="keywordtype">void</span>)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053   FILE *fp;
<a name="l00054"></a>00054   <span class="keywordtype">char</span> buf[<a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">RT_BUFSIZ</a>];
<a name="l00055"></a>00055   <span class="keywordtype">char</span> iface[<a class="code" href="rtread__proc_8c.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>], dest[9], gate[9], mask[9];
<a name="l00056"></a>00056   <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, refcnt, use, <a class="code" href="structmetric.html">metric</a>, mtu, window, rtt;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   <span class="comment">/* Open /proc filesystem */</span>
<a name="l00059"></a>00059   fp = fopen (<a class="code" href="rtread__proc_8c.html#a00ffd430c3d2f1c877703189bb681168">_PATH_PROCNET_ROUTE</a>, <span class="stringliteral">&quot;r&quot;</span>);
<a name="l00060"></a>00060   <span class="keywordflow">if</span> (fp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t open %s : %s\n&quot;</span>, <a class="code" href="rtread__proc_8c.html#a00ffd430c3d2f1c877703189bb681168">_PATH_PROCNET_ROUTE</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00063"></a>00063       <span class="keywordflow">return</span> -1;
<a name="l00064"></a>00064     }
<a name="l00065"></a>00065   
<a name="l00066"></a>00066   <span class="comment">/* Drop first label line. */</span>
<a name="l00067"></a>00067   fgets (buf, <a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">RT_BUFSIZ</a>, fp);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="keywordflow">while</span> (fgets (buf, <a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">RT_BUFSIZ</a>, fp) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00070"></a>00070     {
<a name="l00071"></a>00071       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
<a name="l00072"></a>00072       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00073"></a>00073       <span class="keyword">struct </span>in_addr tmpmask;
<a name="l00074"></a>00074       <span class="keyword">struct </span>in_addr gateway;
<a name="l00075"></a>00075       u_char zebra_flags = 0;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077       n = sscanf (buf, <span class="stringliteral">&quot;%s %s %s %x %d %d %d %s %d %d %d&quot;</span>,
<a name="l00078"></a>00078           iface, dest, gate, &amp;flags, &amp;refcnt, &amp;use, &amp;metric, 
<a name="l00079"></a>00079           mask, &amp;mtu, &amp;window, &amp;rtt);
<a name="l00080"></a>00080       <span class="keywordflow">if</span> (n != 11)
<a name="l00081"></a>00081     {   
<a name="l00082"></a>00082       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t read all of routing information\n&quot;</span>);
<a name="l00083"></a>00083       <span class="keywordflow">continue</span>;
<a name="l00084"></a>00084     }
<a name="l00085"></a>00085       <span class="keywordflow">if</span> (! (flags &amp; RTF_UP))
<a name="l00086"></a>00086     <span class="keywordflow">continue</span>;
<a name="l00087"></a>00087       <span class="keywordflow">if</span> (! (flags &amp; RTF_GATEWAY))
<a name="l00088"></a>00088     <span class="keywordflow">continue</span>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090       <span class="keywordflow">if</span> (flags &amp; RTF_DYNAMIC)
<a name="l00091"></a>00091     zebra_flags |= <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093       p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00094"></a>00094       sscanf (dest, <span class="stringliteral">&quot;%lX&quot;</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *)&amp;p.prefix);
<a name="l00095"></a>00095       sscanf (mask, <span class="stringliteral">&quot;%lX&quot;</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *)&amp;tmpmask);
<a name="l00096"></a>00096       p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (tmpmask);
<a name="l00097"></a>00097       sscanf (gate, <span class="stringliteral">&quot;%lX&quot;</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *)&amp;gateway);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099       <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, &amp;p, &amp;gateway, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0, 0, 0);
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   fclose (fp);
<a name="l00103"></a>00103   <span class="keywordflow">return</span> 0;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00108"></a>00108 proc_ipv6_route_read ()
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110   FILE *fp;
<a name="l00111"></a>00111   <span class="keywordtype">char</span> buf [<a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">RT_BUFSIZ</a>];
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="comment">/* Open /proc filesystem */</span>
<a name="l00114"></a>00114   fp = fopen (<a class="code" href="rtread__proc_8c.html#ae5b8d529e98a6c474f36245fe224e4af">_PATH_PROCNET_ROUTE6</a>, <span class="stringliteral">&quot;r&quot;</span>);
<a name="l00115"></a>00115   <span class="keywordflow">if</span> (fp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00116"></a>00116     {
<a name="l00117"></a>00117       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t open %s : %s&quot;</span>, <a class="code" href="rtread__proc_8c.html#ae5b8d529e98a6c474f36245fe224e4af">_PATH_PROCNET_ROUTE6</a>, 
<a name="l00118"></a>00118         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00119"></a>00119       <span class="keywordflow">return</span> -1;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121   
<a name="l00122"></a>00122   <span class="comment">/* There is no title line, so we don&#39;t drop first line.  */</span>
<a name="l00123"></a>00123   <span class="keywordflow">while</span> (fgets (buf, <a class="code" href="rtread__proc_8c.html#afd8d213d4c14058a46d3386f8eea2d75">RT_BUFSIZ</a>, fp) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
<a name="l00126"></a>00126       <span class="keywordtype">char</span> dest[33], src[33], gate[33];
<a name="l00127"></a>00127       <span class="keywordtype">char</span> iface[<a class="code" href="rtread__proc_8c.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>];
<a name="l00128"></a>00128       <span class="keywordtype">int</span> dest_plen, src_plen;
<a name="l00129"></a>00129       <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>, use, refcnt, <a class="code" href="structflags.html">flags</a>;
<a name="l00130"></a>00130       <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00131"></a>00131       <span class="keyword">struct </span>in6_addr gateway;
<a name="l00132"></a>00132       u_char zebra_flags = 0;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134       <span class="comment">/* Linux 2.1.x write this information at net/ipv6/route.c</span>
<a name="l00135"></a>00135 <span class="comment">         rt6_info_node () */</span>
<a name="l00136"></a>00136       n = sscanf (buf, <span class="stringliteral">&quot;%32s %02x %32s %02x %32s %08x %08x %08x %08x %s&quot;</span>,
<a name="l00137"></a>00137           dest, &amp;dest_plen, src, &amp;src_plen, gate,
<a name="l00138"></a>00138           &amp;metric, &amp;use, &amp;refcnt, &amp;flags, iface);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140       <span class="keywordflow">if</span> (n != 10)
<a name="l00141"></a>00141     {   
<a name="l00142"></a>00142       <span class="comment">/* zlog_warn (&quot;can&#39;t read all of routing information %d\n%s\n&quot;, n, buf); */</span>
<a name="l00143"></a>00143       <span class="keywordflow">continue</span>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146       <span class="keywordflow">if</span> (! (flags &amp; RTF_UP))
<a name="l00147"></a>00147     <span class="keywordflow">continue</span>;
<a name="l00148"></a>00148       <span class="keywordflow">if</span> (! (flags &amp; RTF_GATEWAY))
<a name="l00149"></a>00149     <span class="keywordflow">continue</span>;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151       <span class="keywordflow">if</span> (flags &amp; RTF_DYNAMIC)
<a name="l00152"></a>00152     zebra_flags |= <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154       <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;
<a name="l00155"></a>00155       str2in6_addr (dest, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix);
<a name="l00156"></a>00156       str2in6_addr (gate, &amp;gateway);
<a name="l00157"></a>00157       <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = dest_plen;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159       rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, zebra_flags, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;gateway, 0, 0,
<a name="l00160"></a>00160             metric, 0);
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   fclose (fp);
<a name="l00164"></a>00164   <span class="keywordflow">return</span> 0;
<a name="l00165"></a>00165 }
<a name="l00166"></a>00166 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="keywordtype">void</span>
<a name="l00169"></a><a class="code" href="rtread__proc_8c.html#a7aaf8ffe18dfb22ce045f52cd845efa2">00169</a> <a class="code" href="rtread__getmsg_8c.html#a7aaf8ffe18dfb22ce045f52cd845efa2">route_read</a> (<span class="keywordtype">void</span>)
<a name="l00170"></a>00170 {
<a name="l00171"></a>00171   <a class="code" href="rtread__proc_8c.html#a5c7e32f619971d8431e65de405caa66b">proc_route_read</a> ();
<a name="l00172"></a>00172 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>  proc_ipv6_route_read ();
<a name="l00174"></a>00174 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00175"></a>00175 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rtread__proc_8c.html">rtread_proc.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
