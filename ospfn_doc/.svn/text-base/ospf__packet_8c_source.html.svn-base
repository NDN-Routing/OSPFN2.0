<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_packet.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__packet_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_packet.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__packet_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * OSPF Sending and Receiving OSPF Packets.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1999, 2000 Toshiaki Takada</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="sockopt_8h.html">sockopt.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="checksum_8h.html">checksum.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="md5_8h.html">md5.h</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="ospf__network_8h.html">ospfd/ospf_network.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__packet_8h.html">ospfd/ospf_packet.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__flood_8h.html">ospfd/ospf_flood.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/* Packet Type String. */</span>
<a name="l00053"></a><a class="code" href="ospf__packet_8c.html#a6dfce52e3c137fbfe9187f7055c5f455">00053</a> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[] =
<a name="l00054"></a>00054 {
<a name="l00055"></a>00055   <span class="stringliteral">&quot;unknown&quot;</span>,
<a name="l00056"></a>00056   <span class="stringliteral">&quot;Hello&quot;</span>,
<a name="l00057"></a>00057   <span class="stringliteral">&quot;Database Description&quot;</span>,
<a name="l00058"></a>00058   <span class="stringliteral">&quot;Link State Request&quot;</span>,
<a name="l00059"></a>00059   <span class="stringliteral">&quot;Link State Update&quot;</span>,
<a name="l00060"></a>00060   <span class="stringliteral">&quot;Link State Acknowledgment&quot;</span>,
<a name="l00061"></a>00061 };
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">/* OSPF authentication checking function */</span>
<a name="l00064"></a>00064 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00065"></a><a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">00065</a> <a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00066"></a>00066 {
<a name="l00067"></a>00067   <span class="keywordtype">int</span> auth_type;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_type) == <a class="code" href="ospfd_8h.html#a24fc895f9bfaee75505b77666b656931">OSPF_AUTH_NOTSET</a>)
<a name="l00070"></a>00070     auth_type = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af738a86bf7f84034a1e4d1b288a70b22">auth_type</a>;
<a name="l00071"></a>00071   <span class="keywordflow">else</span>
<a name="l00072"></a>00072     auth_type = <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_type);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="comment">/* Handle case where MD5 key list is not configured aka Cisco */</span>
<a name="l00075"></a>00075   <span class="keywordflow">if</span> (auth_type == <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a> &amp;&amp;
<a name="l00076"></a>00076       <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt)))
<a name="l00077"></a>00077     <span class="keywordflow">return</span> <a class="code" href="ospfd_8h.html#a7fed6737ae4236d1f4ac7c977844b128">OSPF_AUTH_NULL</a>;
<a name="l00078"></a>00078   
<a name="l00079"></a>00079   <span class="keywordflow">return</span> auth_type;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *
<a name="l00084"></a><a class="code" href="ospf__packet_8h.html#a3b4d356cc16f9c8e196c87aa0fea9678">00084</a> <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (<span class="keywordtype">size_t</span> size)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *<span class="keyword">new</span>;
<a name="l00087"></a>00087 
<a name="l00088"></a>00088   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7f031d26c73e93b89739ca73e4adf6fc">MTYPE_OSPF_PACKET</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a>));
<a name="l00089"></a>00089   <span class="keyword">new</span>-&gt;s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (size);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="keywordtype">void</span>
<a name="l00095"></a><a class="code" href="ospf__packet_8h.html#adc1e7a8e7ced436f0406748974f177f5">00095</a> <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>)
<a name="l00098"></a>00098     <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7f031d26c73e93b89739ca73e4adf6fc">MTYPE_OSPF_PACKET</a>, op);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   op = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="keyword">struct </span><a class="code" href="structospf__fifo.html">ospf_fifo</a> *
<a name="l00106"></a><a class="code" href="ospf__packet_8h.html#a098bdd57c739bf8ba5346f5270a49835">00106</a> <a class="code" href="ospf__packet_8c.html#aa36c04f312ec3caaafd634a17bec0d27">ospf_fifo_new</a> ()
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108   <span class="keyword">struct </span><a class="code" href="structospf__fifo.html">ospf_fifo</a> *<span class="keyword">new</span>;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba96166b26bd99309f1ed9d89e45a1b0f2">MTYPE_OSPF_FIFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a>));
<a name="l00111"></a>00111   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">/* Add new packet to fifo. */</span>
<a name="l00115"></a>00115 <span class="keywordtype">void</span>
<a name="l00116"></a><a class="code" href="ospf__packet_8h.html#a70055b43ac41fddb8a8d8c332a605611">00116</a> <a class="code" href="ospf__packet_8c.html#adaf7d3e4a58a34bfb30e25c1a8aef630">ospf_fifo_push</a> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a> *<a class="code" href="structfifo.html">fifo</a>, <span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118   <span class="keywordflow">if</span> (fifo-&gt;<a class="code" href="structospf__fifo.html#aac6b57839b3b965867281f98674bed4c">tail</a>)
<a name="l00119"></a>00119     fifo-&gt;<a class="code" href="structospf__fifo.html#aac6b57839b3b965867281f98674bed4c">tail</a>-&gt;<a class="code" href="structospf__packet.html#a9c4325412060269faf41010429f07203">next</a> = op;
<a name="l00120"></a>00120   <span class="keywordflow">else</span>
<a name="l00121"></a>00121     fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a> = op;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   fifo-&gt;<a class="code" href="structospf__fifo.html#aac6b57839b3b965867281f98674bed4c">tail</a> = op;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   fifo-&gt;<a class="code" href="structospf__fifo.html#a2fcbe08118964f77061d5d368cb3b0a9">count</a>++;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">/* Delete first packet from fifo. */</span>
<a name="l00129"></a>00129 <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *
<a name="l00130"></a><a class="code" href="ospf__packet_8h.html#a42831224d0da841757178a1332c374b9">00130</a> <a class="code" href="ospf__packet_8c.html#a2ca85facdb171109c0be3d1e4948f193">ospf_fifo_pop</a> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a> *<a class="code" href="structfifo.html">fifo</a>)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   op = fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a>;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="keywordflow">if</span> (op)
<a name="l00137"></a>00137     {
<a name="l00138"></a>00138       fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a> = op-&gt;<a class="code" href="structospf__packet.html#a9c4325412060269faf41010429f07203">next</a>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140       <span class="keywordflow">if</span> (fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00141"></a>00141     fifo-&gt;<a class="code" href="structospf__fifo.html#aac6b57839b3b965867281f98674bed4c">tail</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143       fifo-&gt;<a class="code" href="structospf__fifo.html#a2fcbe08118964f77061d5d368cb3b0a9">count</a>--;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <span class="keywordflow">return</span> op;
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">/* Return first fifo entry. */</span>
<a name="l00150"></a>00150 <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *
<a name="l00151"></a><a class="code" href="ospf__packet_8h.html#aab01327dbd651506937a8e31e8e3c6a1">00151</a> <a class="code" href="ospf__packet_8c.html#ae15020648c1abbb82e9d5d0ff7289687">ospf_fifo_head</a> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a> *<a class="code" href="structfifo.html">fifo</a>)
<a name="l00152"></a>00152 {
<a name="l00153"></a>00153   <span class="keywordflow">return</span> fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a>;
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">/* Flush ospf packet fifo. */</span>
<a name="l00157"></a>00157 <span class="keywordtype">void</span>
<a name="l00158"></a><a class="code" href="ospf__packet_8h.html#a9a35170d8273ed14a2442cfabdda2dfc">00158</a> <a class="code" href="ospf__packet_8c.html#af8e862ad9b0b53400b803da7c203191d">ospf_fifo_flush</a> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a> *<a class="code" href="structfifo.html">fifo</a>)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l00161"></a>00161   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *<a class="code" href="structospf__packet.html#a9c4325412060269faf41010429f07203">next</a>;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   <span class="keywordflow">for</span> (op = fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a>; op; op = next)
<a name="l00164"></a>00164     {
<a name="l00165"></a>00165       next = op-&gt;<a class="code" href="structospf__packet.html#a9c4325412060269faf41010429f07203">next</a>;
<a name="l00166"></a>00166       <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (op);
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168   fifo-&gt;<a class="code" href="structospf__fifo.html#ac0aaa6397ca2e848c3282e8b816cb66f">head</a> = fifo-&gt;<a class="code" href="structospf__fifo.html#aac6b57839b3b965867281f98674bed4c">tail</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00169"></a>00169   fifo-&gt;<a class="code" href="structospf__fifo.html#a2fcbe08118964f77061d5d368cb3b0a9">count</a> = 0;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">/* Free ospf packet fifo. */</span>
<a name="l00173"></a>00173 <span class="keywordtype">void</span>
<a name="l00174"></a><a class="code" href="ospf__packet_8h.html#a7e088b006a263ec5f67e42ae3d83b168">00174</a> <a class="code" href="ospf__packet_8c.html#aa6e5e26fc14155201203e96b8303de75">ospf_fifo_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__fifo.html">ospf_fifo</a> *<a class="code" href="structfifo.html">fifo</a>)
<a name="l00175"></a>00175 {
<a name="l00176"></a>00176   <a class="code" href="ospf__packet_8c.html#af8e862ad9b0b53400b803da7c203191d">ospf_fifo_flush</a> (fifo);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba96166b26bd99309f1ed9d89e45a1b0f2">MTYPE_OSPF_FIFO</a>, fifo);
<a name="l00179"></a>00179 }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="keywordtype">void</span>
<a name="l00182"></a><a class="code" href="ospf__packet_8h.html#a28983be848524bf2b196d0de680d4586">00182</a> <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op)
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184   <span class="keywordflow">if</span> (!oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>)
<a name="l00185"></a>00185     {
<a name="l00186"></a>00186       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;ospf_packet_add(interface %s in state %d [%s], packet type %s, &quot;</span>
<a name="l00187"></a>00187            <span class="stringliteral">&quot;destination %s) called with NULL obuf, ignoring &quot;</span>
<a name="l00188"></a>00188            <span class="stringliteral">&quot;(please report this bug)!\n&quot;</span>,
<a name="l00189"></a>00189            <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(oi), oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#ae4c65baac757ab6ffaaf05421dd53b3a">ospf_ism_state_msg</a>, oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>),
<a name="l00190"></a>00190            <a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[<a class="code" href="stream_8c.html#af7a4ed58eb43625677649eb111f52feb">stream_getc_from</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, 1)],
<a name="l00191"></a>00191            inet_ntoa (op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>));
<a name="l00192"></a>00192       <span class="keywordflow">return</span>;
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   <span class="comment">/* Add packet to end of queue. */</span>
<a name="l00196"></a>00196   <a class="code" href="ospf__packet_8c.html#adaf7d3e4a58a34bfb30e25c1a8aef630">ospf_fifo_push</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>, op);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="comment">/* Debug of packet fifo*/</span>
<a name="l00199"></a>00199   <span class="comment">/* ospf_fifo_debug (oi-&gt;obuf); */</span>
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="keywordtype">void</span>
<a name="l00203"></a><a class="code" href="ospf__packet_8h.html#a2ed90742bf57be56a168cd0876f3efd7">00203</a> <a class="code" href="ospf__packet_8c.html#ad9a0e100d386f0dcc083d3a3bf139614">ospf_packet_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l00206"></a>00206   
<a name="l00207"></a>00207   op = <a class="code" href="ospf__packet_8c.html#a2ca85facdb171109c0be3d1e4948f193">ospf_fifo_pop</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>);
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   <span class="keywordflow">if</span> (op)
<a name="l00210"></a>00210     <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (op);
<a name="l00211"></a>00211 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *
<a name="l00214"></a><a class="code" href="ospf__packet_8h.html#a69220479be88620cdc940960e0c3373c">00214</a> <a class="code" href="ospf__packet_8c.html#a47248d16b5708ee3b44409020a6bb125">ospf_packet_dup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op)
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *<span class="keyword">new</span>;
<a name="l00217"></a>00217 
<a name="l00218"></a>00218   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) != op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>)
<a name="l00219"></a>00219     <span class="comment">/* XXX size_t */</span>
<a name="l00220"></a>00220     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_packet_dup stream %lu ospf_packet %u size mismatch&quot;</span>,
<a name="l00221"></a>00221            (u_long)<a class="code" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>), op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>);
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   <span class="comment">/* Reserve space for MD5 authentication that may be added later. */</span>
<a name="l00224"></a>00224   <span class="keyword">new</span> = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) + <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>);
<a name="l00225"></a>00225   <a class="code" href="stream_8c.html#a53dd7429b44228c374706fdc5e35c6ae">stream_copy</a> (new-&gt;s, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <span class="keyword">new</span>-&gt;dst = op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>;
<a name="l00228"></a>00228   <span class="keyword">new</span>-&gt;length = op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">/* XXX inline */</span>
<a name="l00234"></a>00234 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00235"></a><a class="code" href="ospf__packet_8c.html#a3a8934ac4566c50e11c393b55c884316">00235</a> <a class="code" href="ospf__packet_8c.html#a3a8934ac4566c50e11c393b55c884316">ospf_packet_authspace</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237   <span class="keywordtype">int</span> auth = 0;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   <span class="keywordflow">if</span> ( <a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (oi) == <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>)
<a name="l00240"></a>00240     auth = <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>;
<a name="l00241"></a>00241 
<a name="l00242"></a>00242   <span class="keywordflow">return</span> auth;
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00246"></a><a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">00246</a> <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00247"></a>00247 {
<a name="l00248"></a>00248   <span class="keywordtype">int</span> max;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   max = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> - <a class="code" href="ospf__packet_8c.html#a3a8934ac4566c50e11c393b55c884316">ospf_packet_authspace</a>(oi);
<a name="l00251"></a>00251 
<a name="l00252"></a>00252   max -= (<a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a> + <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>));
<a name="l00253"></a>00253 
<a name="l00254"></a>00254   <span class="keywordflow">return</span> max;
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00259"></a><a class="code" href="ospf__packet_8c.html#a60937d0517eb80d5e585ab9843214c12">00259</a> <a class="code" href="ospf__packet_8c.html#a60937d0517eb80d5e585ab9843214c12">ospf_check_md5_digest</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>,
<a name="l00260"></a>00260                        u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l00261"></a>00261 {
<a name="l00262"></a>00262   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *ibuf;
<a name="l00263"></a>00263   <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
<a name="l00264"></a>00264   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> digest[<a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>];
<a name="l00265"></a>00265   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pdigest;
<a name="l00266"></a>00266   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l00267"></a>00267   <span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *ospfh;
<a name="l00268"></a>00268   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00269"></a>00269   
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   ibuf = <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l00272"></a>00272   ospfh = (<span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *) ibuf;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   <span class="comment">/* Get pointer to the end of the packet. */</span>
<a name="l00275"></a>00275   pdigest = ibuf + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="comment">/* Get secret key. */</span>
<a name="l00278"></a>00278   ck = <a class="code" href="ospf__interface_8c.html#a5abbe51d3d37c21a4ff6ede7a4253beb">ospf_crypt_key_lookup</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt),
<a name="l00279"></a>00279                   ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.key_id);
<a name="l00280"></a>00280   <span class="keywordflow">if</span> (ck == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00281"></a>00281     {
<a name="l00282"></a>00282       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_check_md5 no key %d&quot;</span>,
<a name="l00283"></a>00283          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.key_id);
<a name="l00284"></a>00284       <span class="keywordflow">return</span> 0;
<a name="l00285"></a>00285     }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287   <span class="comment">/* check crypto seqnum. */</span>
<a name="l00288"></a>00288   nbr = <a class="code" href="ospf__neighbor_8c.html#a69530f1315a5a3c0c58662ef6ad4efa9">ospf_nbr_lookup_by_routerid</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, &amp;ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>);
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (nbr &amp;&amp; ntohl(nbr-&gt;<a class="code" href="structospf__neighbor.html#a20275ce82383ee306fddb23a4d6684ab">crypt_seqnum</a>) &gt; ntohl(ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.crypt_seqnum))
<a name="l00291"></a>00291     {
<a name="l00292"></a>00292       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_check_md5 bad sequence %d (expect %d)&quot;</span>,
<a name="l00293"></a>00293          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi),
<a name="l00294"></a>00294          ntohl(ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.crypt_seqnum),
<a name="l00295"></a>00295          ntohl(nbr-&gt;<a class="code" href="structospf__neighbor.html#a20275ce82383ee306fddb23a4d6684ab">crypt_seqnum</a>));
<a name="l00296"></a>00296       <span class="keywordflow">return</span> 0;
<a name="l00297"></a>00297     }
<a name="l00298"></a>00298       
<a name="l00299"></a>00299   <span class="comment">/* Generate a digest for the ospf packet - their digest + our digest. */</span>
<a name="l00300"></a>00300   memset(&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
<a name="l00301"></a>00301   <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
<a name="l00302"></a>00302   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, ibuf, length);
<a name="l00303"></a>00303   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, ck-&gt;<a class="code" href="structcrypt__key.html#a59877fcacf0b9f9cee790f40d924d8f0">auth_key</a>, <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>);
<a name="l00304"></a>00304   <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="comment">/* compare the two */</span>
<a name="l00307"></a>00307   <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (pdigest, digest, <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>))
<a name="l00308"></a>00308     {
<a name="l00309"></a>00309       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_check_md5 checksum mismatch&quot;</span>,
<a name="l00310"></a>00310          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00311"></a>00311       <span class="keywordflow">return</span> 0;
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313 
<a name="l00314"></a>00314   <span class="comment">/* save neighbor&#39;s crypt_seqnum */</span>
<a name="l00315"></a>00315   <span class="keywordflow">if</span> (nbr)
<a name="l00316"></a>00316     nbr-&gt;<a class="code" href="structospf__neighbor.html#a20275ce82383ee306fddb23a4d6684ab">crypt_seqnum</a> = ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.crypt_seqnum;
<a name="l00317"></a>00317   <span class="keywordflow">return</span> 1;
<a name="l00318"></a>00318 }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 <span class="comment">/* This function is called from ospf_write(), it will detect the</span>
<a name="l00321"></a>00321 <span class="comment">   authentication scheme and if it is MD5, it will change the sequence</span>
<a name="l00322"></a>00322 <span class="comment">   and update the MD5 digest. */</span>
<a name="l00323"></a>00323 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00324"></a><a class="code" href="ospf__packet_8c.html#afe63e2f0ce4bad9d6d31d8a384b84a46">00324</a> <a class="code" href="ospf__packet_8c.html#afe63e2f0ce4bad9d6d31d8a384b84a46">ospf_make_md5_digest</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op)
<a name="l00325"></a>00325 {
<a name="l00326"></a>00326   <span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *ospfh;
<a name="l00327"></a>00327   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> digest[<a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>];
<a name="l00328"></a>00328   <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
<a name="l00329"></a>00329   <span class="keywordtype">void</span> *ibuf;
<a name="l00330"></a>00330   u_int32_t <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00331"></a>00331   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l00332"></a>00332   <span class="keyword">const</span> u_int8_t *<a class="code" href="structcrypt__key.html#a59877fcacf0b9f9cee790f40d924d8f0">auth_key</a>;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   ibuf = <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00335"></a>00335   ospfh = (<span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *) ibuf;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="keywordflow">if</span> (ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>) != <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>)
<a name="l00338"></a>00338     <span class="keywordflow">return</span> 0;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340   <span class="comment">/* We do this here so when we dup a packet, we don&#39;t have to</span>
<a name="l00341"></a>00341 <span class="comment">     waste CPU rewriting other headers.</span>
<a name="l00342"></a>00342 <span class="comment">     </span>
<a name="l00343"></a>00343 <span class="comment">     Note that quagga_time /deliberately/ is not used here */</span>
<a name="l00344"></a>00344   t = (time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp; 0xFFFFFFFF);
<a name="l00345"></a>00345   <span class="keywordflow">if</span> (t &gt; oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a>)
<a name="l00346"></a>00346     oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00347"></a>00347   <span class="keywordflow">else</span>
<a name="l00348"></a>00348     oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a>++;
<a name="l00349"></a>00349   
<a name="l00350"></a>00350   ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.crypt_seqnum = htonl (oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a>); 
<a name="l00351"></a>00351 
<a name="l00352"></a>00352   <span class="comment">/* Get MD5 Authentication key from auth_key list. */</span>
<a name="l00353"></a>00353   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt)))
<a name="l00354"></a>00354     auth_key = (<span class="keyword">const</span> u_int8_t *) <span class="stringliteral">&quot;&quot;</span>;
<a name="l00355"></a>00355   <span class="keywordflow">else</span>
<a name="l00356"></a>00356     {
<a name="l00357"></a>00357       ck = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a50e32cbff5b5b7f2494387516fd818fc">listtail</a>(<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt)));
<a name="l00358"></a>00358       auth_key = ck-&gt;<a class="code" href="structcrypt__key.html#a59877fcacf0b9f9cee790f40d924d8f0">auth_key</a>;
<a name="l00359"></a>00359     }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   <span class="comment">/* Generate a digest for the entire packet + our secret key. */</span>
<a name="l00362"></a>00362   memset(&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
<a name="l00363"></a>00363   <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
<a name="l00364"></a>00364   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, ibuf, ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>));
<a name="l00365"></a>00365   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, auth_key, <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>);
<a name="l00366"></a>00366   <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="comment">/* Append md5 digest to the end of the stream. */</span>
<a name="l00369"></a>00369   <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, digest, <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>);
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="comment">/* We do *NOT* increment the OSPF header length. */</span>
<a name="l00372"></a>00372   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>) + <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) != op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>)
<a name="l00375"></a>00375     <span class="comment">/* XXX size_t */</span>
<a name="l00376"></a>00376     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;ospf_make_md5_digest: length mismatch stream %lu ospf_packet %u&quot;</span>,
<a name="l00377"></a>00377           (u_long)<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>), op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>);
<a name="l00378"></a>00378 
<a name="l00379"></a>00379   <span class="keywordflow">return</span> <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>;
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 
<a name="l00383"></a>00383 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00384"></a><a class="code" href="ospf__packet_8c.html#ad3a6a5d5edd50ea50ea23dbc17d4fb0b">00384</a> <a class="code" href="ospf__packet_8c.html#ad3a6a5d5edd50ea50ea23dbc17d4fb0b">ospf_ls_req_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00385"></a>00385 {
<a name="l00386"></a>00386   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   nbr = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00389"></a>00389   nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00390"></a>00390 
<a name="l00391"></a>00391   <span class="comment">/* Send Link State Request. */</span>
<a name="l00392"></a>00392   <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (nbr))
<a name="l00393"></a>00393     <a class="code" href="ospf__packet_8c.html#a6ebacc4d964f773f52e1f4f184d5b622">ospf_ls_req_send</a> (nbr);
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="comment">/* Set Link State Request retransmission timer. */</span>
<a name="l00396"></a>00396   <a class="code" href="ospf__nsm_8h.html#a13172a390c4ab15fea61d66d2c9262d9">OSPF_NSM_TIMER_ON</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a>, <a class="code" href="ospf__packet_8c.html#ad3a6a5d5edd50ea50ea23dbc17d4fb0b">ospf_ls_req_timer</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a7f247fc2d724d69acef918ad766be6f6">v_ls_req</a>);
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   <span class="keywordflow">return</span> 0;
<a name="l00399"></a>00399 }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 <span class="keywordtype">void</span>
<a name="l00402"></a><a class="code" href="ospf__packet_8h.html#a65372218adb97f2a656a773d2ab66c44">00402</a> <a class="code" href="ospf__packet_8c.html#aa2fb26aa3ec8d705d7b62dfa9fc244e9">ospf_ls_req_event</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00403"></a>00403 {
<a name="l00404"></a>00404   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a>)
<a name="l00405"></a>00405     {
<a name="l00406"></a>00406       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a>);
<a name="l00407"></a>00407       nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00408"></a>00408     }
<a name="l00409"></a>00409   nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a> = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#ad3a6a5d5edd50ea50ea23dbc17d4fb0b">ospf_ls_req_timer</a>, nbr, 0);
<a name="l00410"></a>00410 }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 <span class="comment">/* Cyclic timer function.  Fist registered in ospf_nbr_new () in</span>
<a name="l00413"></a>00413 <span class="comment">   ospf_neighbor.c  */</span>
<a name="l00414"></a>00414 <span class="keywordtype">int</span>
<a name="l00415"></a><a class="code" href="ospf__packet_8h.html#a4555a9430dac3f5bc627b2e3dff05b90">00415</a> <a class="code" href="ospf__packet_8c.html#a6ddfa710e48ff5c20abef26d78456ceb">ospf_ls_upd_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00416"></a>00416 {
<a name="l00417"></a>00417   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00418"></a>00418 
<a name="l00419"></a>00419   nbr = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00420"></a>00420   nbr-&gt;<a class="code" href="structospf__neighbor.html#a4529c944b245441aa81008b12d5331d1">t_ls_upd</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00421"></a>00421 
<a name="l00422"></a>00422   <span class="comment">/* Send Link State Update. */</span>
<a name="l00423"></a>00423   <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr) &gt; 0)
<a name="l00424"></a>00424     {
<a name="l00425"></a>00425       <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *update;
<a name="l00426"></a>00426       <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb;
<a name="l00427"></a>00427       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00428"></a>00428       <span class="keywordtype">int</span> retransmit_interval;
<a name="l00429"></a>00429 
<a name="l00430"></a>00430       retransmit_interval = <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>, retransmit_interval);
<a name="l00431"></a>00431 
<a name="l00432"></a>00432       lsdb = &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>;
<a name="l00433"></a>00433       update = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00434"></a>00434 
<a name="l00435"></a>00435       <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
<a name="l00436"></a>00436     {
<a name="l00437"></a>00437       <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table = lsdb-&gt;<a class="code" href="structospf__lsdb.html#a0af6d8740509eb2ed0ad1aa9c6599d56">type</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structospf__lsdb.html#ac02ad39566534869219d3e9d942bf565">db</a>;
<a name="l00438"></a>00438       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00439"></a>00439       
<a name="l00440"></a>00440       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00441"></a>00441         {
<a name="l00442"></a>00442           <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00443"></a>00443           
<a name="l00444"></a>00444           <span class="keywordflow">if</span> ((lsa = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00445"></a>00445         <span class="comment">/* Don&#39;t retransmit an LSA if we received it within</span>
<a name="l00446"></a>00446 <span class="comment">          the last RxmtInterval seconds - this is to allow the</span>
<a name="l00447"></a>00447 <span class="comment">          neighbour a chance to acknowledge the LSA as it may</span>
<a name="l00448"></a>00448 <span class="comment">          have ben just received before the retransmit timer</span>
<a name="l00449"></a>00449 <span class="comment">          fired.  This is a small tweak to what is in the RFC,</span>
<a name="l00450"></a>00450 <span class="comment">          but it will cut out out a lot of retransmit traffic</span>
<a name="l00451"></a>00451 <span class="comment">          - MAG */</span>
<a name="l00452"></a>00452         <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), lsa-&gt;<a class="code" href="structospf__lsa.html#a2bd331d17d54cdfcec251473668346da">tv_recv</a>), 
<a name="l00453"></a>00453                 <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (retransmit_interval)) &gt;= 0)
<a name="l00454"></a>00454           <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (update, rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00455"></a>00455         }
<a name="l00456"></a>00456     }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (update) &gt; 0)
<a name="l00459"></a>00459     <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, update, <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>);
<a name="l00460"></a>00460       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (update);
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 
<a name="l00463"></a>00463   <span class="comment">/* Set LS Update retransmission timer. */</span>
<a name="l00464"></a>00464   <a class="code" href="ospf__nsm_8h.html#a13172a390c4ab15fea61d66d2c9262d9">OSPF_NSM_TIMER_ON</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a4529c944b245441aa81008b12d5331d1">t_ls_upd</a>, <a class="code" href="ospf__packet_8c.html#a6ddfa710e48ff5c20abef26d78456ceb">ospf_ls_upd_timer</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#aae25ef8d8903b3aecf90a95b4c5c7bc3">v_ls_upd</a>);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <span class="keywordflow">return</span> 0;
<a name="l00467"></a>00467 }
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="keywordtype">int</span>
<a name="l00470"></a><a class="code" href="ospf__packet_8h.html#ae9c7a60c34e0e56e3dbd7e9d028e3bdc">00470</a> <a class="code" href="ospf__packet_8c.html#afbe22efd3efbb5e37fccfa54d9f9f05a">ospf_ls_ack_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00471"></a>00471 {
<a name="l00472"></a>00472   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00473"></a>00473 
<a name="l00474"></a>00474   oi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00475"></a>00475   oi-&gt;<a class="code" href="structospf__interface.html#aa1f8a2d1d1212c2cfdd530c7ca9f7534">t_ls_ack</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00476"></a>00476 
<a name="l00477"></a>00477   <span class="comment">/* Send Link State Acknowledgment. */</span>
<a name="l00478"></a>00478   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>) &gt; 0)
<a name="l00479"></a>00479     <a class="code" href="ospf__packet_8c.html#a579d018454c1f072266f76db636173c6">ospf_ls_ack_send_delayed</a> (oi);
<a name="l00480"></a>00480 
<a name="l00481"></a>00481   <span class="comment">/* Set LS Ack timer. */</span>
<a name="l00482"></a>00482   <a class="code" href="ospf__ism_8h.html#a9aca7fd1780267f224441174f992bfc9">OSPF_ISM_TIMER_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#aa1f8a2d1d1212c2cfdd530c7ca9f7534">t_ls_ack</a>, <a class="code" href="ospf__packet_8c.html#afbe22efd3efbb5e37fccfa54d9f9f05a">ospf_ls_ack_timer</a>, oi-&gt;<a class="code" href="structospf__interface.html#ab715712eda2750aa107ca2457f234a9c">v_ls_ack</a>);
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keywordflow">return</span> 0;
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487 <span class="preprocessor">#ifdef WANT_OSPF_WRITE_FRAGMENT</span>
<a name="l00488"></a>00488 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00489"></a>00489 ospf_write_frags (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> <a class="code" href="structospf__packet.html">ospf_packet</a> *op, <span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, 
<a name="l00490"></a>00490                   <span class="keyword">struct</span> msghdr *<a class="code" href="structmsg.html">msg</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxdatasize, 
<a name="l00491"></a>00491                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mtu, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00492"></a>00492 {
<a name="l00493"></a>00493 <span class="preprocessor">#define OSPF_WRITE_FRAG_SHIFT 3</span>
<a name="l00494"></a>00494 <span class="preprocessor"></span>  u_int16_t offset;
<a name="l00495"></a>00495   <span class="keyword">struct </span>iovec *iovp;
<a name="l00496"></a>00496   <span class="keywordtype">int</span> ret;
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ( op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> == <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) );
<a name="l00499"></a>00499   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (msg-&gt;msg_iovlen == 2);
<a name="l00500"></a>00500 
<a name="l00501"></a>00501   <span class="comment">/* we can but try.</span>
<a name="l00502"></a>00502 <span class="comment">   *</span>
<a name="l00503"></a>00503 <span class="comment">   * SunOS, BSD and BSD derived kernels likely will clear ip_id, as</span>
<a name="l00504"></a>00504 <span class="comment">   * well as the IP_MF flag, making this all quite pointless.</span>
<a name="l00505"></a>00505 <span class="comment">   *</span>
<a name="l00506"></a>00506 <span class="comment">   * However, for a system on which IP_MF is left alone, and ip_id left</span>
<a name="l00507"></a>00507 <span class="comment">   * alone or else which sets same ip_id for each fragment this might</span>
<a name="l00508"></a>00508 <span class="comment">   * work, eg linux.</span>
<a name="l00509"></a>00509 <span class="comment">   *</span>
<a name="l00510"></a>00510 <span class="comment">   * XXX-TODO: It would be much nicer to have the kernel&#39;s use their</span>
<a name="l00511"></a>00511 <span class="comment">   * existing fragmentation support to do this for us. Bugs/RFEs need to</span>
<a name="l00512"></a>00512 <span class="comment">   * be raised against the various kernels.</span>
<a name="l00513"></a>00513 <span class="comment">   */</span>
<a name="l00514"></a>00514   
<a name="l00515"></a>00515   <span class="comment">/* set More Frag */</span>
<a name="l00516"></a>00516   iph-&gt;ip_off |= IP_MF;
<a name="l00517"></a>00517   
<a name="l00518"></a>00518   <span class="comment">/* ip frag offset is expressed in units of 8byte words */</span>
<a name="l00519"></a>00519   offset = maxdatasize &gt;&gt; OSPF_WRITE_FRAG_SHIFT;
<a name="l00520"></a>00520   
<a name="l00521"></a>00521   iovp = &amp;msg-&gt;msg_iov[1];
<a name="l00522"></a>00522   
<a name="l00523"></a>00523   <span class="keywordflow">while</span> ( (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) - <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>)) 
<a name="l00524"></a>00524          &gt; maxdatasize )
<a name="l00525"></a>00525     {
<a name="l00526"></a>00526       <span class="comment">/* data length of this frag is to next offset value */</span>
<a name="l00527"></a>00527       iovp-&gt;iov_len = offset &lt;&lt; OSPF_WRITE_FRAG_SHIFT;
<a name="l00528"></a>00528       iph-&gt;ip_len = iovp-&gt;iov_len + <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>);
<a name="l00529"></a>00529       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (iph-&gt;ip_len &lt;= mtu);
<a name="l00530"></a>00530 
<a name="l00531"></a>00531       <a class="code" href="sockopt_8c.html#a31566785c09a80dd77599ca722974574">sockopt_iphdrincl_swab_htosys</a> (iph);
<a name="l00532"></a>00532 
<a name="l00533"></a>00533       ret = sendmsg (fd, msg, flags);
<a name="l00534"></a>00534       
<a name="l00535"></a>00535       <a class="code" href="sockopt_8c.html#a8c237ab61f5040984e3ea04f9d9809b5">sockopt_iphdrincl_swab_systoh</a> (iph);
<a name="l00536"></a>00536       
<a name="l00537"></a>00537       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00538"></a>00538         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;*** ospf_write_frags: sendmsg failed to %s,&quot;</span>
<a name="l00539"></a>00539            <span class="stringliteral">&quot; id %d, off %d, len %d, mtu %u failed with %s&quot;</span>,
<a name="l00540"></a>00540            inet_ntoa (iph-&gt;ip_dst),
<a name="l00541"></a>00541            iph-&gt;ip_id,
<a name="l00542"></a>00542            iph-&gt;ip_off,
<a name="l00543"></a>00543            iph-&gt;ip_len,
<a name="l00544"></a>00544            mtu,
<a name="l00545"></a>00545            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00546"></a>00546       
<a name="l00547"></a>00547       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (type - 1, <a class="code" href="bgp__debug_8h.html#abc9603445bf79a3793831ee1d0ea8890">SEND</a>))
<a name="l00548"></a>00548         {
<a name="l00549"></a>00549           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_write_frags: sent id %d, off %d, len %d to %s\n&quot;</span>,
<a name="l00550"></a>00550                      iph-&gt;ip_id, iph-&gt;ip_off, iph-&gt;ip_len,
<a name="l00551"></a>00551                      inet_ntoa (iph-&gt;ip_dst));
<a name="l00552"></a>00552           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (type - 1, <a class="code" href="bgp__debug_8h.html#a7c5b2b199cc1d0b7645bc3c7c234fd3a">DETAIL</a>))
<a name="l00553"></a>00553             {
<a name="l00554"></a>00554               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------IP Header Dump----------------------&quot;</span>);
<a name="l00555"></a>00555               <a class="code" href="ospf__dump_8c.html#adedd77798f087b36b611a6a13aa6e9a8">ospf_ip_header_dump</a> (iph);
<a name="l00556"></a>00556               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------------------------------------------&quot;</span>);
<a name="l00557"></a>00557             }
<a name="l00558"></a>00558         }
<a name="l00559"></a>00559       
<a name="l00560"></a>00560       iph-&gt;ip_off += offset;
<a name="l00561"></a>00561       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, iovp-&gt;iov_len);
<a name="l00562"></a>00562       iovp-&gt;iov_base = <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>); 
<a name="l00563"></a>00563     }
<a name="l00564"></a>00564     
<a name="l00565"></a>00565   <span class="comment">/* setup for final fragment */</span>
<a name="l00566"></a>00566   iovp-&gt;iov_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>) - <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00567"></a>00567   iph-&gt;ip_len = iovp-&gt;iov_len + <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>);
<a name="l00568"></a>00568   iph-&gt;ip_off &amp;= (~IP_MF);
<a name="l00569"></a>00569 }
<a name="l00570"></a>00570 <span class="preprocessor">#endif </span><span class="comment">/* WANT_OSPF_WRITE_FRAGMENT */</span>
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00573"></a><a class="code" href="ospf__packet_8c.html#a072a1ad82f3bdbc8fe5f0dd5abc3cffd">00573</a> <a class="code" href="ospf__packet_8c.html#a072a1ad82f3bdbc8fe5f0dd5abc3cffd">ospf_write</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00574"></a>00574 {
<a name="l00575"></a>00575   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00576"></a>00576   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00577"></a>00577   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l00578"></a>00578   <span class="keyword">struct </span>sockaddr_in sa_dst;
<a name="l00579"></a>00579   <span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> iph;
<a name="l00580"></a>00580   <span class="keyword">struct </span>msghdr msg;
<a name="l00581"></a>00581   <span class="keyword">struct </span>iovec iov[2];
<a name="l00582"></a>00582   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00583"></a>00583   <span class="keywordtype">int</span> ret;
<a name="l00584"></a>00584   <span class="keywordtype">int</span> flags = 0;
<a name="l00585"></a>00585   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00586"></a>00586 <span class="preprocessor">#ifdef WANT_OSPF_WRITE_FRAGMENT</span>
<a name="l00587"></a>00587 <span class="preprocessor"></span>  <span class="keyword">static</span> u_int16_t ipid = 0;
<a name="l00588"></a>00588 <span class="preprocessor">#endif </span><span class="comment">/* WANT_OSPF_WRITE_FRAGMENT */</span>
<a name="l00589"></a>00589   u_int16_t maxdatasize;
<a name="l00590"></a>00590 <span class="preprocessor">#define OSPF_WRITE_IPHL_SHIFT 2</span>
<a name="l00591"></a>00591 <span class="preprocessor"></span>  
<a name="l00592"></a>00592   ospf-&gt;<a class="code" href="structospf.html#a58c6957a24a39205e5a9f7aeab10e42b">t_write</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00593"></a>00593 
<a name="l00594"></a>00594   node = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>);
<a name="l00595"></a>00595   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (node);
<a name="l00596"></a>00596   oi = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (node);
<a name="l00597"></a>00597   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi);
<a name="l00598"></a>00598 
<a name="l00599"></a>00599 <span class="preprocessor">#ifdef WANT_OSPF_WRITE_FRAGMENT</span>
<a name="l00600"></a>00600 <span class="preprocessor"></span>  <span class="comment">/* seed ipid static with low order bits of time */</span>
<a name="l00601"></a>00601   <span class="keywordflow">if</span> (ipid == 0)
<a name="l00602"></a>00602     ipid = (time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp; 0xffff);
<a name="l00603"></a>00603 <span class="preprocessor">#endif </span><span class="comment">/* WANT_OSPF_WRITE_FRAGMENT */</span>
<a name="l00604"></a>00604 
<a name="l00605"></a>00605   <span class="comment">/* convenience - max OSPF data per packet,</span>
<a name="l00606"></a>00606 <span class="comment">   * and reliability - not more data, than our</span>
<a name="l00607"></a>00607 <span class="comment">   * socket can accept</span>
<a name="l00608"></a>00608 <span class="comment">   */</span>
<a name="l00609"></a>00609   maxdatasize = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>, ospf-&gt;<a class="code" href="structospf.html#ac5b68e65968e1eceabeb934dc23342dc">maxsndbuflen</a>) -
<a name="l00610"></a>00610     <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>);
<a name="l00611"></a>00611   
<a name="l00612"></a>00612   <span class="comment">/* Get one packet from queue. */</span>
<a name="l00613"></a>00613   op = <a class="code" href="ospf__packet_8c.html#ae15020648c1abbb82e9d5d0ff7289687">ospf_fifo_head</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>);
<a name="l00614"></a>00614   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (op);
<a name="l00615"></a>00615   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> &gt;= <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>);
<a name="l00616"></a>00616 
<a name="l00617"></a>00617   <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr == htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>)
<a name="l00618"></a>00618       || op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr == htonl (<a class="code" href="ospfd_8h.html#a8ba5ca00e358c35a32b660dc87e4b7cd">OSPF_ALLDROUTERS</a>))
<a name="l00619"></a>00619       <a class="code" href="ospf__network_8c.html#aeaf2e7731d918c0544ed0901317cd1be">ospf_if_ipmulticast</a> (ospf, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l00620"></a>00620     
<a name="l00621"></a>00621   <span class="comment">/* Rewrite the md5 signature &amp; update the seq */</span>
<a name="l00622"></a>00622   <a class="code" href="ospf__packet_8c.html#afe63e2f0ce4bad9d6d31d8a384b84a46">ospf_make_md5_digest</a> (oi, op);
<a name="l00623"></a>00623 
<a name="l00624"></a>00624   <span class="comment">/* Retrieve OSPF packet type. */</span>
<a name="l00625"></a>00625   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, 1);
<a name="l00626"></a>00626   type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00627"></a>00627   
<a name="l00628"></a>00628   <span class="comment">/* reset get pointer */</span>
<a name="l00629"></a>00629   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, 0);
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   memset (&amp;iph, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>));
<a name="l00632"></a>00632   memset (&amp;sa_dst, 0, <span class="keyword">sizeof</span> (sa_dst));
<a name="l00633"></a>00633   
<a name="l00634"></a>00634   sa_dst.sin_family = AF_INET;
<a name="l00635"></a>00635 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00636"></a>00636 <span class="preprocessor"></span>  sa_dst.sin_len = <span class="keyword">sizeof</span>(sa_dst);
<a name="l00637"></a>00637 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00638"></a>00638   sa_dst.sin_addr = op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>;
<a name="l00639"></a>00639   sa_dst.sin_port = htons (0);
<a name="l00640"></a>00640 
<a name="l00641"></a>00641   <span class="comment">/* Set DONTROUTE flag if dst is unicast. */</span>
<a name="l00642"></a>00642   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00643"></a>00643     <span class="keywordflow">if</span> (!IN_MULTICAST (htonl (op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr)))
<a name="l00644"></a>00644       flags = MSG_DONTROUTE;
<a name="l00645"></a>00645 
<a name="l00646"></a>00646   iph.ip_hl = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>) &gt;&gt; OSPF_WRITE_IPHL_SHIFT;
<a name="l00647"></a>00647   <span class="comment">/* it&#39;d be very strange for header to not be 4byte-word aligned but.. */</span>
<a name="l00648"></a>00648   <span class="keywordflow">if</span> ( <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>) 
<a name="l00649"></a>00649         &gt; (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)(iph.ip_hl &lt;&lt; OSPF_WRITE_IPHL_SHIFT) )
<a name="l00650"></a>00650     iph.ip_hl++; <span class="comment">/* we presume sizeof struct ip cant overflow ip_hl.. */</span>
<a name="l00651"></a>00651   
<a name="l00652"></a>00652   iph.ip_v = IPVERSION;
<a name="l00653"></a>00653   iph.ip_tos = <a class="code" href="ospfd_8h.html#aad2536be3b05d82e79158c07c0d26142">IPTOS_PREC_INTERNETCONTROL</a>;
<a name="l00654"></a>00654   iph.ip_len = (iph.ip_hl &lt;&lt; OSPF_WRITE_IPHL_SHIFT) + op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>;
<a name="l00655"></a>00655 
<a name="l00656"></a>00656 #ifdef WANT_OSPF_WRITE_FRAGMENT
<a name="l00657"></a>00657   <span class="comment">/* XXX-MT: not thread-safe at all..</span>
<a name="l00658"></a>00658 <span class="comment">   * XXX: this presumes this is only programme sending OSPF packets </span>
<a name="l00659"></a>00659 <span class="comment">   * otherwise, no guarantee ipid will be unique</span>
<a name="l00660"></a>00660 <span class="comment">   */</span>
<a name="l00661"></a>00661   iph.ip_id = ++ipid;
<a name="l00662"></a>00662 #endif <span class="comment">/* WANT_OSPF_WRITE_FRAGMENT */</span>
<a name="l00663"></a>00663 
<a name="l00664"></a>00664   iph.ip_off = 0;
<a name="l00665"></a>00665   if (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00666"></a>00666     iph.ip_ttl = <a class="code" href="ospfd_8h.html#aa76b7a9b7518bd952c996d91441f0de2">OSPF_VL_IP_TTL</a>;
<a name="l00667"></a>00667   <span class="keywordflow">else</span>
<a name="l00668"></a>00668     iph.ip_ttl = <a class="code" href="ospfd_8h.html#a6f2bc64286e11ded668182fd05bc37d2">OSPF_IP_TTL</a>;
<a name="l00669"></a>00669   iph.ip_p = <a class="code" href="ospf6__proto_8h.html#ade45b7018bfdffd626877565c14318e2">IPPROTO_OSPFIGP</a>;
<a name="l00670"></a>00670   iph.ip_sum = 0;
<a name="l00671"></a>00671   iph.ip_src.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr;
<a name="l00672"></a>00672   iph.ip_dst.s_addr = op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr;
<a name="l00673"></a>00673 
<a name="l00674"></a>00674   memset (&amp;msg, 0, <span class="keyword">sizeof</span> (msg));
<a name="l00675"></a>00675   msg.msg_name = (caddr_t) &amp;sa_dst;
<a name="l00676"></a>00676   msg.msg_namelen = <span class="keyword">sizeof</span> (sa_dst); 
<a name="l00677"></a>00677   msg.msg_iov = iov;
<a name="l00678"></a>00678   msg.msg_iovlen = 2;
<a name="l00679"></a>00679   iov[0].iov_base = (<span class="keywordtype">char</span>*)&amp;iph;
<a name="l00680"></a>00680   iov[0].iov_len = iph.ip_hl &lt;&lt; OSPF_WRITE_IPHL_SHIFT;
<a name="l00681"></a>00681   iov[1].iov_base = <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00682"></a>00682   iov[1].iov_len = op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a>;
<a name="l00683"></a>00683   
<a name="l00684"></a>00684   <span class="comment">/* Sadly we can not rely on kernels to fragment packets because of either</span>
<a name="l00685"></a>00685 <span class="comment">   * IP_HDRINCL and/or multicast destination being set.</span>
<a name="l00686"></a>00686 <span class="comment">   */</span>
<a name="l00687"></a>00687 <span class="preprocessor">#ifdef WANT_OSPF_WRITE_FRAGMENT</span>
<a name="l00688"></a>00688 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ( op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> &gt; maxdatasize )
<a name="l00689"></a>00689     ospf_write_frags (ospf-&gt;<a class="code" href="structospf.html#a13100b27c547a3ba3572908aa24259c5">fd</a>, op, &amp;iph, &amp;msg, maxdatasize, 
<a name="l00690"></a>00690                       oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>, flags, type);
<a name="l00691"></a>00691 <span class="preprocessor">#endif </span><span class="comment">/* WANT_OSPF_WRITE_FRAGMENT */</span>
<a name="l00692"></a>00692 
<a name="l00693"></a>00693   <span class="comment">/* send final fragment (could be first) */</span>
<a name="l00694"></a>00694   <a class="code" href="sockopt_8c.html#a31566785c09a80dd77599ca722974574">sockopt_iphdrincl_swab_htosys</a> (&amp;iph);
<a name="l00695"></a>00695   ret = sendmsg (ospf-&gt;<a class="code" href="structospf.html#a13100b27c547a3ba3572908aa24259c5">fd</a>, &amp;msg, flags);
<a name="l00696"></a>00696   <a class="code" href="sockopt_8c.html#a8c237ab61f5040984e3ea04f9d9809b5">sockopt_iphdrincl_swab_systoh</a> (&amp;iph);
<a name="l00697"></a>00697   
<a name="l00698"></a>00698   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00699"></a>00699     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;*** sendmsg in ospf_write failed to %s, &quot;</span>
<a name="l00700"></a>00700            <span class="stringliteral">&quot;id %d, off %d, len %d, interface %s, mtu %u: %s&quot;</span>,
<a name="l00701"></a>00701            inet_ntoa (iph.ip_dst), iph.ip_id, iph.ip_off, iph.ip_len,
<a name="l00702"></a>00702            oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00703"></a>00703 
<a name="l00704"></a>00704   <span class="comment">/* Show debug sending packet. */</span>
<a name="l00705"></a>00705   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (type - 1, <a class="code" href="bgp__debug_8h.html#abc9603445bf79a3793831ee1d0ea8890">SEND</a>))
<a name="l00706"></a>00706     {
<a name="l00707"></a>00707       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (type - 1, <a class="code" href="bgp__debug_8h.html#a7c5b2b199cc1d0b7645bc3c7c234fd3a">DETAIL</a>))
<a name="l00708"></a>00708     {
<a name="l00709"></a>00709       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------------------------------------------&quot;</span>);
<a name="l00710"></a>00710       <a class="code" href="ospf__dump_8c.html#adedd77798f087b36b611a6a13aa6e9a8">ospf_ip_header_dump</a> (&amp;iph);
<a name="l00711"></a>00711       <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, 0);
<a name="l00712"></a>00712       <a class="code" href="ospf__dump_8c.html#a461bc2850902bd555113ddfc8fea4611">ospf_packet_dump</a> (op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l00713"></a>00713     }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sent to [%s] via [%s].&quot;</span>,
<a name="l00716"></a>00716          <a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[type], inet_ntoa (op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>),
<a name="l00717"></a>00717          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00718"></a>00718 
<a name="l00719"></a>00719       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (type - 1, <a class="code" href="bgp__debug_8h.html#a7c5b2b199cc1d0b7645bc3c7c234fd3a">DETAIL</a>))
<a name="l00720"></a>00720     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------------------------------------------&quot;</span>);
<a name="l00721"></a>00721     }
<a name="l00722"></a>00722 
<a name="l00723"></a>00723   <span class="comment">/* Now delete packet from queue. */</span>
<a name="l00724"></a>00724   <a class="code" href="ospf__packet_8c.html#ad9a0e100d386f0dcc083d3a3bf139614">ospf_packet_delete</a> (oi);
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#ae15020648c1abbb82e9d5d0ff7289687">ospf_fifo_head</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00727"></a>00727     {
<a name="l00728"></a>00728       oi-&gt;<a class="code" href="structospf__interface.html#a2384f784dd444460f419edcf4e5bfee2">on_write_q</a> = 0;
<a name="l00729"></a>00729       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>, node);
<a name="l00730"></a>00730     }
<a name="l00731"></a>00731   
<a name="l00732"></a>00732   <span class="comment">/* If packets still remain in queue, call write thread. */</span>
<a name="l00733"></a>00733   <span class="keywordflow">if</span> (!<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>))
<a name="l00734"></a>00734     ospf-&gt;<a class="code" href="structospf.html#a58c6957a24a39205e5a9f7aeab10e42b">t_write</a> =                                              
<a name="l00735"></a>00735       <a class="code" href="thread_8h.html#a8a2f048ba94722b1e88f08254fbd4444">thread_add_write</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#a072a1ad82f3bdbc8fe5f0dd5abc3cffd">ospf_write</a>, ospf, ospf-&gt;<a class="code" href="structospf.html#a13100b27c547a3ba3572908aa24259c5">fd</a>);
<a name="l00736"></a>00736 
<a name="l00737"></a>00737   <span class="keywordflow">return</span> 0;
<a name="l00738"></a>00738 }
<a name="l00739"></a>00739 
<a name="l00740"></a>00740 <span class="comment">/* OSPF Hello message read -- RFC2328 Section 10.5. */</span>
<a name="l00741"></a>00741 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00742"></a><a class="code" href="ospf__packet_8c.html#afdba0c6658c739d82677daa810522d7f">00742</a> <a class="code" href="ospf__packet_8c.html#afdba0c6658c739d82677daa810522d7f">ospf_hello</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh,
<a name="l00743"></a>00743         <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> * <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> size)
<a name="l00744"></a>00744 {
<a name="l00745"></a>00745   <span class="keyword">struct </span><a class="code" href="structospf__hello.html">ospf_hello</a> *hello;
<a name="l00746"></a>00746   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00747"></a>00747   <span class="keywordtype">int</span> old_state;
<a name="l00748"></a>00748   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <span class="comment">/* increment statistics. */</span>
<a name="l00751"></a>00751   oi-&gt;<a class="code" href="structospf__interface.html#ab63c5f4eb043805db06658492ddbaf62">hello_in</a>++;
<a name="l00752"></a>00752 
<a name="l00753"></a>00753   hello = (<span class="keyword">struct </span><a class="code" href="structospf__hello.html">ospf_hello</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l00754"></a>00754 
<a name="l00755"></a>00755   <span class="comment">/* If Hello is myself, silently discard. */</span>
<a name="l00756"></a>00756   <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
<a name="l00757"></a>00757     {
<a name="l00758"></a>00758       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> - 1, <a class="code" href="bgp__debug_8h.html#a5c3976553336476b6fea4108b844ecf2">RECV</a>))
<a name="l00759"></a>00759         {
<a name="l00760"></a>00760           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_header[%s/%s]: selforiginated, &quot;</span>
<a name="l00761"></a>00761                      <span class="stringliteral">&quot;dropping.&quot;</span>,
<a name="l00762"></a>00762                      <a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a>],
<a name="l00763"></a>00763                      inet_ntoa (iph-&gt;ip_src));
<a name="l00764"></a>00764         }
<a name="l00765"></a>00765       <span class="keywordflow">return</span>;
<a name="l00766"></a>00766     }
<a name="l00767"></a>00767 
<a name="l00768"></a>00768   <span class="comment">/* get neighbor prefix. */</span>
<a name="l00769"></a>00769   p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = AF_INET;
<a name="l00770"></a>00770   p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (hello-&gt;<a class="code" href="structospf__hello.html#afda874149010cc679342006fd9e623de">network_mask</a>);
<a name="l00771"></a>00771   p.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = iph-&gt;ip_src;
<a name="l00772"></a>00772 
<a name="l00773"></a>00773   <span class="comment">/* Compare network mask. */</span>
<a name="l00774"></a>00774   <span class="comment">/* Checking is ignored for Point-to-Point and Virtual link. */</span>
<a name="l00775"></a>00775   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a> 
<a name="l00776"></a>00776       &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00777"></a>00777     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00778"></a>00778       {
<a name="l00779"></a>00779     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: NetworkMask mismatch on %s (configured prefix length is %d, but hello packet indicates %d).&quot;</span>,
<a name="l00780"></a>00780            inet_ntoa(ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>), <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(oi),
<a name="l00781"></a>00781            (<span class="keywordtype">int</span>)oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, (<span class="keywordtype">int</span>)p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00782"></a>00782     <span class="keywordflow">return</span>;
<a name="l00783"></a>00783       }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785   <span class="comment">/* Compare Router Dead Interval. */</span>
<a name="l00786"></a>00786   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_wait) != ntohl (hello-&gt;<a class="code" href="structospf__hello.html#a75c14f54ebf775b2b5c81c592666047a">dead_interval</a>))
<a name="l00787"></a>00787     {
<a name="l00788"></a>00788       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: RouterDeadInterval mismatch &quot;</span>
<a name="l00789"></a>00789              <span class="stringliteral">&quot;(expected %u, but received %u).&quot;</span>,
<a name="l00790"></a>00790          inet_ntoa(ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l00791"></a>00791          <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a>(oi, v_wait), ntohl(hello-&gt;<a class="code" href="structospf__hello.html#a75c14f54ebf775b2b5c81c592666047a">dead_interval</a>));
<a name="l00792"></a>00792       <span class="keywordflow">return</span>;
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="comment">/* Compare Hello Interval - ignored if fast-hellos are set. */</span>
<a name="l00796"></a>00796   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, fast_hello) == 0)
<a name="l00797"></a>00797     {
<a name="l00798"></a>00798       <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_hello) != ntohs (hello-&gt;<a class="code" href="structospf__hello.html#ad73303544b455d3744e3b69207e01558">hello_interval</a>))
<a name="l00799"></a>00799         {
<a name="l00800"></a>00800           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: HelloInterval mismatch &quot;</span>
<a name="l00801"></a>00801              <span class="stringliteral">&quot;(expected %u, but received %u).&quot;</span>,
<a name="l00802"></a>00802              inet_ntoa(ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l00803"></a>00803              <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a>(oi, v_hello), ntohs(hello-&gt;<a class="code" href="structospf__hello.html#ad73303544b455d3744e3b69207e01558">hello_interval</a>));
<a name="l00804"></a>00804           <span class="keywordflow">return</span>;
<a name="l00805"></a>00805         }
<a name="l00806"></a>00806     }
<a name="l00807"></a>00807   
<a name="l00808"></a>00808   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00809"></a>00809     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: Options %s&quot;</span>,
<a name="l00810"></a>00810            inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l00811"></a>00811            <a class="code" href="ospf__dump_8c.html#ab7b0f1fba6ff4a165a11a7ef3f31fdab">ospf_options_dump</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>));
<a name="l00812"></a>00812 
<a name="l00813"></a>00813   <span class="comment">/* Compare options. */</span>
<a name="l00814"></a>00814 <span class="preprocessor">#define REJECT_IF_TBIT_ON   1 </span><span class="comment">/* XXX */</span>
<a name="l00815"></a>00815 <span class="preprocessor">#ifdef REJECT_IF_TBIT_ON</span>
<a name="l00816"></a>00816 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#a432dfa99c1f8653cff877698f8268134">OSPF_OPTION_T</a>))
<a name="l00817"></a>00817     {
<a name="l00818"></a>00818       <span class="comment">/*</span>
<a name="l00819"></a>00819 <span class="comment">       * This router does not support non-zero TOS.</span>
<a name="l00820"></a>00820 <span class="comment">       * Drop this Hello packet not to establish neighbor relationship.</span>
<a name="l00821"></a>00821 <span class="comment">       */</span>
<a name="l00822"></a>00822       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: T-bit on, drop it.&quot;</span>,
<a name="l00823"></a>00823          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l00824"></a>00824       <span class="keywordflow">return</span>;
<a name="l00825"></a>00825     }
<a name="l00826"></a>00826 <span class="preprocessor">#endif </span><span class="comment">/* REJECT_IF_TBIT_ON */</span>
<a name="l00827"></a>00827 
<a name="l00828"></a>00828 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00829"></a>00829 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>)
<a name="l00830"></a>00830       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l00831"></a>00831     {
<a name="l00832"></a>00832       <span class="comment">/*</span>
<a name="l00833"></a>00833 <span class="comment">       * This router does know the correct usage of O-bit</span>
<a name="l00834"></a>00834 <span class="comment">       * the bit should be set in DD packet only.</span>
<a name="l00835"></a>00835 <span class="comment">       */</span>
<a name="l00836"></a>00836       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: O-bit abuse?&quot;</span>,
<a name="l00837"></a>00837          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l00838"></a>00838 <span class="preprocessor">#ifdef STRICT_OBIT_USAGE_CHECK</span>
<a name="l00839"></a>00839 <span class="preprocessor"></span>      <span class="keywordflow">return</span>;                                     <span class="comment">/* Reject this packet. */</span>
<a name="l00840"></a>00840 <span class="preprocessor">#else </span><span class="comment">/* STRICT_OBIT_USAGE_CHECK */</span>
<a name="l00841"></a>00841       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>); <span class="comment">/* Ignore O-bit. */</span>
<a name="l00842"></a>00842 <span class="preprocessor">#endif </span><span class="comment">/* STRICT_OBIT_USAGE_CHECK */</span>
<a name="l00843"></a>00843     }
<a name="l00844"></a>00844 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00845"></a>00845 
<a name="l00846"></a>00846   <span class="comment">/* new for NSSA is to ensure that NP is on and E is off */</span>
<a name="l00847"></a>00847 
<a name="l00848"></a>00848   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>) 
<a name="l00849"></a>00849     {
<a name="l00850"></a>00850       <span class="keywordflow">if</span> (! (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi), <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>)
<a name="l00851"></a>00851          &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>)
<a name="l00852"></a>00852          &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi), <a class="code" href="ospfd_8h.html#a0cb690faccaae5c2692a2f2c1b273720">OSPF_OPTION_E</a>)
<a name="l00853"></a>00853          &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#a0cb690faccaae5c2692a2f2c1b273720">OSPF_OPTION_E</a>)))
<a name="l00854"></a>00854     {
<a name="l00855"></a>00855       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;NSSA-Packet-%s[Hello:RECV]: my options: %x, his options %x&quot;</span>, inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>), <a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi), hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>);
<a name="l00856"></a>00856       <span class="keywordflow">return</span>;
<a name="l00857"></a>00857     }
<a name="l00858"></a>00858       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00859"></a>00859         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;NSSA-Hello:RECV:Packet from %s:&quot;</span>, inet_ntoa(ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l00860"></a>00860     }
<a name="l00861"></a>00861   <span class="keywordflow">else</span>    
<a name="l00862"></a>00862     <span class="comment">/* The setting of the E-bit found in the Hello Packet&#39;s Options</span>
<a name="l00863"></a>00863 <span class="comment">       field must match this area&#39;s ExternalRoutingCapability A</span>
<a name="l00864"></a>00864 <span class="comment">       mismatch causes processing to stop and the packet to be</span>
<a name="l00865"></a>00865 <span class="comment">       dropped. The setting of the rest of the bits in the Hello</span>
<a name="l00866"></a>00866 <span class="comment">       Packet&#39;s Options field should be ignored. */</span>
<a name="l00867"></a>00867     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi), <a class="code" href="ospfd_8h.html#a0cb690faccaae5c2692a2f2c1b273720">OSPF_OPTION_E</a>) !=
<a name="l00868"></a>00868     <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>, <a class="code" href="ospfd_8h.html#a0cb690faccaae5c2692a2f2c1b273720">OSPF_OPTION_E</a>))
<a name="l00869"></a>00869       {
<a name="l00870"></a>00870     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet %s [Hello:RECV]: my options: %x, his options %x&quot;</span>,
<a name="l00871"></a>00871            inet_ntoa(ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>), <a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi), hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>);
<a name="l00872"></a>00872     <span class="keywordflow">return</span>;
<a name="l00873"></a>00873       }
<a name="l00874"></a>00874   
<a name="l00875"></a>00875   <span class="comment">/* get neighbour struct */</span>
<a name="l00876"></a>00876   nbr = <a class="code" href="ospf__neighbor_8c.html#aec99b1ea173b506a3ef64c78e6dfcec8">ospf_nbr_get</a> (oi, ospfh, iph, &amp;p);
<a name="l00877"></a>00877 
<a name="l00878"></a>00878   <span class="comment">/* neighbour must be valid, ospf_nbr_get creates if none existed */</span>
<a name="l00879"></a>00879   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (nbr);
<a name="l00880"></a>00880 
<a name="l00881"></a>00881   old_state = nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>;
<a name="l00882"></a>00882 
<a name="l00883"></a>00883   <span class="comment">/* Add event to thread. */</span>
<a name="l00884"></a>00884   <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#af89905507f8bd04d76523b83bea89da8">NSM_HelloReceived</a>);
<a name="l00885"></a>00885 
<a name="l00886"></a>00886   <span class="comment">/*  RFC2328  Section 9.5.1</span>
<a name="l00887"></a>00887 <span class="comment">      If the router is not eligible to become Designated Router,</span>
<a name="l00888"></a>00888 <span class="comment">      (snip)   It   must also send an Hello Packet in reply to an</span>
<a name="l00889"></a>00889 <span class="comment">      Hello Packet received from any eligible neighbor (other than</span>
<a name="l00890"></a>00890 <span class="comment">      the   current Designated Router and Backup Designated Router).  */</span>
<a name="l00891"></a>00891   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l00892"></a>00892     <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#accb5457e43688e067b0b9844b08ae520">PRIORITY</a>(oi) == 0 &amp;&amp; hello-&gt;<a class="code" href="structospf__hello.html#ae2d85385de1e2f116674d62009a05ba1">priority</a> &gt; 0
<a name="l00893"></a>00893     &amp;&amp; <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a>(&amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a>(oi),  &amp;iph-&gt;ip_src)
<a name="l00894"></a>00894     &amp;&amp; <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a>(&amp;<a class="code" href="ospf__interface_8h.html#ab9a182dc79cc0d10a77a27c60f2351cd">BDR</a>(oi), &amp;iph-&gt;ip_src))
<a name="l00895"></a>00895       <a class="code" href="ospf__nsm_8h.html#a13172a390c4ab15fea61d66d2c9262d9">OSPF_NSM_TIMER_ON</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a9bb86528f191dbbe6c6272501ccc7ad6">t_hello_reply</a>, <a class="code" href="ospf__packet_8c.html#adff0d56481224bab2f663b2c72ffb979">ospf_hello_reply_timer</a>,
<a name="l00896"></a>00896              <a class="code" href="ospf__packet_8h.html#a76abb348c56b6da3442d887572f29cb2">OSPF_HELLO_REPLY_DELAY</a>);
<a name="l00897"></a>00897 
<a name="l00898"></a>00898   <span class="comment">/* on NBMA network type, it happens to receive bidirectional Hello packet</span>
<a name="l00899"></a>00899 <span class="comment">     without advance 1-Way Received event.</span>
<a name="l00900"></a>00900 <span class="comment">     To avoid incorrect DR-seletion, raise 1-Way Received event.*/</span>
<a name="l00901"></a>00901   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a> &amp;&amp;
<a name="l00902"></a>00902       (old_state == <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a> || old_state == <a class="code" href="ospf__nsm_8h.html#a8151a9925f00bd1d3b3362a7557bab67">NSM_Attempt</a>))
<a name="l00903"></a>00903     {
<a name="l00904"></a>00904       <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a2b0d321c2a2d6e7b0a176db279b11387">NSM_OneWayReceived</a>);
<a name="l00905"></a>00905       nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> = hello-&gt;<a class="code" href="structospf__hello.html#ae2d85385de1e2f116674d62009a05ba1">priority</a>;
<a name="l00906"></a>00906       nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>;
<a name="l00907"></a>00907       nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>;
<a name="l00908"></a>00908       <span class="keywordflow">return</span>;
<a name="l00909"></a>00909     }
<a name="l00910"></a>00910 
<a name="l00911"></a>00911   <span class="keywordflow">if</span> (<a class="code" href="ospf__neighbor_8c.html#a50d3aa49922b856d63a19ff7b860d024">ospf_nbr_bidirectional</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>, hello-&gt;<a class="code" href="structospf__hello.html#a87afb2f343a52581209b533d243e8f73">neighbors</a>,
<a name="l00912"></a>00912                   size - <a class="code" href="ospf__packet_8h.html#a66e89ac395b84382b108574f1f46fd1b">OSPF_HELLO_MIN_SIZE</a>))
<a name="l00913"></a>00913     {
<a name="l00914"></a>00914       <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a103d7a3e177bf1b0d80e0120cbdc900c">NSM_TwoWayReceived</a>);
<a name="l00915"></a>00915       nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a> |= hello-&gt;<a class="code" href="structospf__hello.html#a1625d621d48b2eecbe8990e643e97095">options</a>;
<a name="l00916"></a>00916     }
<a name="l00917"></a>00917   <span class="keywordflow">else</span>
<a name="l00918"></a>00918     {
<a name="l00919"></a>00919       <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a2b0d321c2a2d6e7b0a176db279b11387">NSM_OneWayReceived</a>);
<a name="l00920"></a>00920       <span class="comment">/* Set neighbor information. */</span>
<a name="l00921"></a>00921       nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> = hello-&gt;<a class="code" href="structospf__hello.html#ae2d85385de1e2f116674d62009a05ba1">priority</a>;
<a name="l00922"></a>00922       nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>;
<a name="l00923"></a>00923       nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>;
<a name="l00924"></a>00924       <span class="keywordflow">return</span>;
<a name="l00925"></a>00925     }
<a name="l00926"></a>00926 
<a name="l00927"></a>00927   <span class="comment">/* If neighbor itself declares DR and no BDR exists,</span>
<a name="l00928"></a>00928 <span class="comment">     cause event BackupSeen */</span>
<a name="l00929"></a>00929   <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>))
<a name="l00930"></a>00930     <span class="keywordflow">if</span> (hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>.s_addr == 0 &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad2f0936e61c22de1c5ffbb51f0f640a0">ISM_Waiting</a>)
<a name="l00931"></a>00931       <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a9cf840171f8ab1524819f58d5edd895e">ISM_BackupSeen</a>);
<a name="l00932"></a>00932 
<a name="l00933"></a>00933   <span class="comment">/* neighbor itself declares BDR. */</span>
<a name="l00934"></a>00934   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad2f0936e61c22de1c5ffbb51f0f640a0">ISM_Waiting</a> &amp;&amp;
<a name="l00935"></a>00935       <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>))
<a name="l00936"></a>00936     <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a9cf840171f8ab1524819f58d5edd895e">ISM_BackupSeen</a>);
<a name="l00937"></a>00937 
<a name="l00938"></a>00938   <span class="comment">/* had not previously. */</span>
<a name="l00939"></a>00939   <span class="keywordflow">if</span> ((<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>) &amp;&amp;
<a name="l00940"></a>00940        <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a>)) ||
<a name="l00941"></a>00941       (<a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>) &amp;&amp;
<a name="l00942"></a>00942        <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a>)))
<a name="l00943"></a>00943     <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a2b12c9aa9a4cabd2064157cfe3d1fed4">ISM_NeighborChange</a>);
<a name="l00944"></a>00944 
<a name="l00945"></a>00945   <span class="comment">/* had not previously. */</span>
<a name="l00946"></a>00946   <span class="keywordflow">if</span> ((<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>) &amp;&amp;
<a name="l00947"></a>00947        <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a>)) ||
<a name="l00948"></a>00948       (<a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>) &amp;&amp;
<a name="l00949"></a>00949        <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a>)))
<a name="l00950"></a>00950     <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a2b12c9aa9a4cabd2064157cfe3d1fed4">ISM_NeighborChange</a>);
<a name="l00951"></a>00951 
<a name="l00952"></a>00952   <span class="comment">/* Neighbor priority check. */</span>
<a name="l00953"></a>00953   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> &gt;= 0 &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> != hello-&gt;<a class="code" href="structospf__hello.html#ae2d85385de1e2f116674d62009a05ba1">priority</a>)
<a name="l00954"></a>00954     <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a2b12c9aa9a4cabd2064157cfe3d1fed4">ISM_NeighborChange</a>);
<a name="l00955"></a>00955 
<a name="l00956"></a>00956   <span class="comment">/* Set neighbor information. */</span>
<a name="l00957"></a>00957   nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> = hello-&gt;<a class="code" href="structospf__hello.html#ae2d85385de1e2f116674d62009a05ba1">priority</a>;
<a name="l00958"></a>00958   nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a24748adb148027887d94f9ee5d2cabfb">d_router</a>;
<a name="l00959"></a>00959   nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a> = hello-&gt;<a class="code" href="structospf__hello.html#a6a3c3d9a007291b2a159b1fa07eb66a6">bd_router</a>;
<a name="l00960"></a>00960 }
<a name="l00961"></a>00961 
<a name="l00962"></a>00962 <span class="comment">/* Save DD flags/options/Seqnum received. */</span>
<a name="l00963"></a>00963 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00964"></a><a class="code" href="ospf__packet_8c.html#abbaa117f4bd61885d582080cf86a8e3e">00964</a> <a class="code" href="ospf__packet_8c.html#abbaa117f4bd61885d582080cf86a8e3e">ospf_db_desc_save_current</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr,
<a name="l00965"></a>00965                <span class="keyword">struct</span> <a class="code" href="structospf__db__desc.html">ospf_db_desc</a> *dd)
<a name="l00966"></a>00966 {
<a name="l00967"></a>00967   nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#a2799fe1cc98df169815fda45421cea69">flags</a> = dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>;
<a name="l00968"></a>00968   nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a> = dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>;
<a name="l00969"></a>00969   nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a> = ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>);
<a name="l00970"></a>00970 }
<a name="l00971"></a>00971 
<a name="l00972"></a>00972 <span class="comment">/* Process rest of DD packet. */</span>
<a name="l00973"></a>00973 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00974"></a><a class="code" href="ospf__packet_8c.html#a67b4181f8ad97f9ac585b27016e23234">00974</a> <a class="code" href="ospf__packet_8c.html#a67b4181f8ad97f9ac585b27016e23234">ospf_db_desc_proc</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l00975"></a>00975            <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__db__desc.html">ospf_db_desc</a> *dd,
<a name="l00976"></a>00976            u_int16_t size)
<a name="l00977"></a>00977 {
<a name="l00978"></a>00978   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>, *find;
<a name="l00979"></a>00979   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l00980"></a>00980 
<a name="l00981"></a>00981   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, <a class="code" href="ospf__packet_8h.html#a872e1fdf510665b31c5090348d51b8ab">OSPF_DB_DESC_MIN_SIZE</a>);
<a name="l00982"></a>00982   <span class="keywordflow">for</span> (size -= <a class="code" href="ospf__packet_8h.html#a872e1fdf510665b31c5090348d51b8ab">OSPF_DB_DESC_MIN_SIZE</a>;
<a name="l00983"></a>00983        size &gt;= <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>; size -= <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>) 
<a name="l00984"></a>00984     {
<a name="l00985"></a>00985       lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l00986"></a>00986       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l00987"></a>00987 
<a name="l00988"></a>00988       <span class="comment">/* Unknown LS type. */</span>
<a name="l00989"></a>00989       <span class="keywordflow">if</span> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &lt; <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a> || lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &gt;= <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>)
<a name="l00990"></a>00990     {
<a name="l00991"></a>00991       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet [DD:RECV]: Unknown LS type %d.&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l00992"></a>00992       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l00993"></a>00993       <span class="keywordflow">return</span>;
<a name="l00994"></a>00994     }
<a name="l00995"></a>00995 
<a name="l00996"></a>00996 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00997"></a>00997 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l00998"></a>00998       &amp;&amp;  ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l00999"></a>00999         {
<a name="l01000"></a>01000           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Opaque capability mismatch?&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01001"></a>01001           <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01002"></a>01002           <span class="keywordflow">return</span>;
<a name="l01003"></a>01003         }
<a name="l01004"></a>01004 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01005"></a>01005 
<a name="l01006"></a>01006       <span class="keywordflow">switch</span> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01007"></a>01007         {
<a name="l01008"></a>01008         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<a name="l01009"></a>01009 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01010"></a>01010 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l01011"></a>01011 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01012"></a>01012           <span class="comment">/* Check for stub area.  Reject if AS-External from stub but</span>
<a name="l01013"></a>01013 <span class="comment">             allow if from NSSA. */</span>
<a name="l01014"></a>01014           <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>)
<a name="l01015"></a>01015             {
<a name="l01016"></a>01016               <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet [DD:RECV]: LSA[Type%d:%s] from %s area.&quot;</span>,
<a name="l01017"></a>01017                          lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
<a name="l01018"></a>01018                          (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>) ?\
<a name="l01019"></a>01019                          <span class="stringliteral">&quot;STUB&quot;</span> : <span class="stringliteral">&quot;NSSA&quot;</span>);
<a name="l01020"></a>01020               <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01021"></a>01021               <span class="keywordflow">return</span>;
<a name="l01022"></a>01022             }
<a name="l01023"></a>01023           <span class="keywordflow">break</span>;
<a name="l01024"></a>01024     <span class="keywordflow">default</span>:
<a name="l01025"></a>01025       <span class="keywordflow">break</span>;
<a name="l01026"></a>01026         }
<a name="l01027"></a>01027 
<a name="l01028"></a>01028       <span class="comment">/* Create LS-request object. */</span>
<a name="l01029"></a>01029       <span class="keyword">new</span> = <a class="code" href="ospf__flood_8c.html#aedb5408ac5f2016547b85154747a8398">ospf_ls_request_new</a> (lsah);
<a name="l01030"></a>01030 
<a name="l01031"></a>01031       <span class="comment">/* Lookup received LSA, then add LS request list. */</span>
<a name="l01032"></a>01032       find = <a class="code" href="ospf__lsa_8c.html#a02a444e61c60412cd2d17bd130ae06af">ospf_lsa_lookup_by_header</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, lsah);
<a name="l01033"></a>01033       
<a name="l01034"></a>01034       <span class="comment">/* ospf_lsa_more_recent is fine with NULL pointers */</span>
<a name="l01035"></a>01035       <span class="keywordflow">switch</span> (<a class="code" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (find, <span class="keyword">new</span>))
<a name="l01036"></a>01036         {
<a name="l01037"></a>01037           <span class="keywordflow">case</span> -1:
<a name="l01038"></a>01038             <span class="comment">/* Neighbour has a more recent LSA, we must request it */</span>
<a name="l01039"></a>01039             <a class="code" href="ospf__flood_8c.html#ae6da3c20ff8542f795b735b5b177e7bd">ospf_ls_request_add</a> (nbr, <span class="keyword">new</span>);
<a name="l01040"></a>01040           <span class="keywordflow">case</span> 0:
<a name="l01041"></a>01041             <span class="comment">/* If we have a copy of this LSA, it&#39;s either less recent</span>
<a name="l01042"></a>01042 <span class="comment">             * and we&#39;re requesting it from neighbour (the case above), or</span>
<a name="l01043"></a>01043 <span class="comment">             * it&#39;s as recent and we both have same copy (this case).</span>
<a name="l01044"></a>01044 <span class="comment">             *</span>
<a name="l01045"></a>01045 <span class="comment">             * In neither of these two cases is there any point in</span>
<a name="l01046"></a>01046 <span class="comment">             * describing our copy of the LSA to the neighbour in a</span>
<a name="l01047"></a>01047 <span class="comment">             * DB-Summary packet, if we&#39;re still intending to do so.</span>
<a name="l01048"></a>01048 <span class="comment">             *</span>
<a name="l01049"></a>01049 <span class="comment">             * See: draft-ogier-ospf-dbex-opt-00.txt, describing the</span>
<a name="l01050"></a>01050 <span class="comment">             * backward compatible optimisation to OSPF DB Exchange /</span>
<a name="l01051"></a>01051 <span class="comment">             * DB Description process implemented here.</span>
<a name="l01052"></a>01052 <span class="comment">             */</span>
<a name="l01053"></a>01053             <span class="keywordflow">if</span> (find)
<a name="l01054"></a>01054               <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aa9dff1f5ba19ec799c3dc9254b849049">db_sum</a>, find);
<a name="l01055"></a>01055             <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (<span class="keyword">new</span>);
<a name="l01056"></a>01056             <span class="keywordflow">break</span>;
<a name="l01057"></a>01057           <span class="keywordflow">default</span>:
<a name="l01058"></a>01058             <span class="comment">/* We have the more recent copy, nothing specific to do:</span>
<a name="l01059"></a>01059 <span class="comment">             * - no need to request neighbours stale copy</span>
<a name="l01060"></a>01060 <span class="comment">             * - must leave DB summary list copy alone</span>
<a name="l01061"></a>01061 <span class="comment">             */</span>
<a name="l01062"></a>01062             <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01063"></a>01063               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Packet [DD:RECV]: LSA received Type %d, &quot;</span>
<a name="l01064"></a>01064                          <span class="stringliteral">&quot;ID %s is not recent.&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01065"></a>01065             <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (<span class="keyword">new</span>);
<a name="l01066"></a>01066         }
<a name="l01067"></a>01067     }
<a name="l01068"></a>01068 
<a name="l01069"></a>01069   <span class="comment">/* Master */</span>
<a name="l01070"></a>01070   <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>))
<a name="l01071"></a>01071     {
<a name="l01072"></a>01072       nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a>++;
<a name="l01073"></a>01073 
<a name="l01074"></a>01074       <span class="comment">/* Both sides have no More, then we&#39;re done with Exchange */</span>
<a name="l01075"></a>01075       <span class="keywordflow">if</span> (!<a class="code" href="ospf__packet_8h.html#a05e41ae2cb53cca5409902b486e732ec">IS_SET_DD_M</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) &amp;&amp; !<a class="code" href="ospf__packet_8h.html#a05e41ae2cb53cca5409902b486e732ec">IS_SET_DD_M</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>))
<a name="l01076"></a>01076     <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a2229da31b50e2e78c418ad54103879e8">NSM_ExchangeDone</a>);
<a name="l01077"></a>01077       <span class="keywordflow">else</span>
<a name="l01078"></a>01078     <a class="code" href="ospf__packet_8c.html#adaf5568141a0f47dc301981cfb92fbfb">ospf_db_desc_send</a> (nbr);
<a name="l01079"></a>01079     }
<a name="l01080"></a>01080   <span class="comment">/* Slave */</span>
<a name="l01081"></a>01081   <span class="keywordflow">else</span>
<a name="l01082"></a>01082     {
<a name="l01083"></a>01083       nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a> = ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>);
<a name="l01084"></a>01084 
<a name="l01085"></a>01085       <span class="comment">/* Send DD packet in reply. </span>
<a name="l01086"></a>01086 <span class="comment">       * </span>
<a name="l01087"></a>01087 <span class="comment">       * Must be done to acknowledge the Master&#39;s DD, regardless of</span>
<a name="l01088"></a>01088 <span class="comment">       * whether we have more LSAs ourselves to describe.</span>
<a name="l01089"></a>01089 <span class="comment">       *</span>
<a name="l01090"></a>01090 <span class="comment">       * This function will clear the &#39;More&#39; bit, if after this DD</span>
<a name="l01091"></a>01091 <span class="comment">       * we have no more LSAs to describe to the master..</span>
<a name="l01092"></a>01092 <span class="comment">       */</span>
<a name="l01093"></a>01093       <a class="code" href="ospf__packet_8c.html#adaf5568141a0f47dc301981cfb92fbfb">ospf_db_desc_send</a> (nbr);
<a name="l01094"></a>01094       
<a name="l01095"></a>01095       <span class="comment">/* Slave can raise ExchangeDone now, if master is also done */</span>
<a name="l01096"></a>01096       <span class="keywordflow">if</span> (!<a class="code" href="ospf__packet_8h.html#a05e41ae2cb53cca5409902b486e732ec">IS_SET_DD_M</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) &amp;&amp; !<a class="code" href="ospf__packet_8h.html#a05e41ae2cb53cca5409902b486e732ec">IS_SET_DD_M</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>))
<a name="l01097"></a>01097     <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a2229da31b50e2e78c418ad54103879e8">NSM_ExchangeDone</a>);
<a name="l01098"></a>01098     }
<a name="l01099"></a>01099   
<a name="l01100"></a>01100   <span class="comment">/* Save received neighbor values from DD. */</span>
<a name="l01101"></a>01101   <a class="code" href="ospf__packet_8c.html#abbaa117f4bd61885d582080cf86a8e3e">ospf_db_desc_save_current</a> (nbr, dd);
<a name="l01102"></a>01102 }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01105"></a><a class="code" href="ospf__packet_8c.html#a57a136b92674002e80b88e934f1b3684">01105</a> <a class="code" href="ospf__packet_8c.html#a57a136b92674002e80b88e934f1b3684">ospf_db_desc_is_dup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__db__desc.html">ospf_db_desc</a> *dd, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l01106"></a>01106 {
<a name="l01107"></a>01107   <span class="comment">/* Is DD duplicated? */</span>
<a name="l01108"></a>01108   <span class="keywordflow">if</span> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a> == nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a> &amp;&amp;
<a name="l01109"></a>01109       dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a> == nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#a2799fe1cc98df169815fda45421cea69">flags</a> &amp;&amp;
<a name="l01110"></a>01110       dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a> == htonl (nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a>))
<a name="l01111"></a>01111     <span class="keywordflow">return</span> 1;
<a name="l01112"></a>01112 
<a name="l01113"></a>01113   <span class="keywordflow">return</span> 0;
<a name="l01114"></a>01114 }
<a name="l01115"></a>01115 
<a name="l01116"></a>01116 <span class="comment">/* OSPF Database Description message read -- RFC2328 Section 10.6. */</span>
<a name="l01117"></a>01117 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01118"></a><a class="code" href="ospf__packet_8c.html#a89b5a1f830849455a41ea97d8278216e">01118</a> <a class="code" href="ospf__packet_8c.html#a89b5a1f830849455a41ea97d8278216e">ospf_db_desc</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh,
<a name="l01119"></a>01119           <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, u_int16_t size)
<a name="l01120"></a>01120 {
<a name="l01121"></a>01121   <span class="keyword">struct </span><a class="code" href="structospf__db__desc.html">ospf_db_desc</a> *dd;
<a name="l01122"></a>01122   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l01123"></a>01123 
<a name="l01124"></a>01124   <span class="comment">/* Increment statistics. */</span>
<a name="l01125"></a>01125   oi-&gt;<a class="code" href="structospf__interface.html#a083ca9b2cb6d920cfd07353846b90232">db_desc_in</a>++;
<a name="l01126"></a>01126 
<a name="l01127"></a>01127   dd = (<span class="keyword">struct </span><a class="code" href="structospf__db__desc.html">ospf_db_desc</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l01128"></a>01128 
<a name="l01129"></a>01129   nbr = <a class="code" href="ospf__neighbor_8c.html#aaae24ad2ba48314e7007f27c61ef98e0">ospf_nbr_lookup</a> (oi, iph, ospfh);
<a name="l01130"></a>01130   <span class="keywordflow">if</span> (nbr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01131"></a>01131     {
<a name="l01132"></a>01132       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Unknown Neighbor %s&quot;</span>,
<a name="l01133"></a>01133          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l01134"></a>01134       <span class="keywordflow">return</span>;
<a name="l01135"></a>01135     }
<a name="l01136"></a>01136 
<a name="l01137"></a>01137   <span class="comment">/* Check MTU. */</span>
<a name="l01138"></a>01138   <span class="keywordflow">if</span> ((<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, mtu_ignore) == 0) &amp;&amp; 
<a name="l01139"></a>01139       (ntohs (dd-&gt;<a class="code" href="structospf__db__desc.html#a55ebeb8a415d09cbe249277d3f27fc1c">mtu</a>) &gt; oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>))
<a name="l01140"></a>01140     {
<a name="l01141"></a>01141       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s MTU %u is larger than [%s]&#39;s MTU %u&quot;</span>,
<a name="l01142"></a>01142          inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), ntohs (dd-&gt;<a class="code" href="structospf__db__desc.html#a55ebeb8a415d09cbe249277d3f27fc1c">mtu</a>),
<a name="l01143"></a>01143          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l01144"></a>01144       <span class="keywordflow">return</span>;
<a name="l01145"></a>01145     }
<a name="l01146"></a>01146 
<a name="l01147"></a>01147   <span class="comment">/* </span>
<a name="l01148"></a>01148 <span class="comment">   * XXX HACK by Hasso Tepper. Setting N/P bit in NSSA area DD packets is not</span>
<a name="l01149"></a>01149 <span class="comment">   * required. In fact at least JunOS sends DD packets with P bit clear. </span>
<a name="l01150"></a>01150 <span class="comment">   * Until proper solution is developped, this hack should help.</span>
<a name="l01151"></a>01151 <span class="comment">   *</span>
<a name="l01152"></a>01152 <span class="comment">   * Update: According to the RFCs, N bit is specified /only/ for Hello</span>
<a name="l01153"></a>01153 <span class="comment">   * options, unfortunately its use in DD options is not specified. Hence some</span>
<a name="l01154"></a>01154 <span class="comment">   * implementations follow E-bit semantics and set it in DD options, and some</span>
<a name="l01155"></a>01155 <span class="comment">   * treat it as unspecified and hence follow the directive &quot;default for </span>
<a name="l01156"></a>01156 <span class="comment">   * options is clear&quot;, ie unset.</span>
<a name="l01157"></a>01157 <span class="comment">   *</span>
<a name="l01158"></a>01158 <span class="comment">   * Reset the flag, as ospfd follows E-bit semantics.</span>
<a name="l01159"></a>01159 <span class="comment">   */</span>
<a name="l01160"></a>01160   <span class="keywordflow">if</span> ( (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
<a name="l01161"></a>01161        &amp;&amp; (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>))
<a name="l01162"></a>01162        &amp;&amp; (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>, <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>)) )
<a name="l01163"></a>01163     {
<a name="l01164"></a>01164       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>) 
<a name="l01165"></a>01165         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbour %s: Has NSSA capability, sends with N bit clear in DD options&quot;</span>,
<a name="l01166"></a>01166                     inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>) );
<a name="l01167"></a>01167       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>, <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>);
<a name="l01168"></a>01168     }
<a name="l01169"></a>01169 
<a name="l01170"></a>01170 <span class="preprocessor">#ifdef REJECT_IF_TBIT_ON</span>
<a name="l01171"></a>01171 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>, <a class="code" href="ospfd_8h.html#a432dfa99c1f8653cff877698f8268134">OSPF_OPTION_T</a>))
<a name="l01172"></a>01172     {
<a name="l01173"></a>01173       <span class="comment">/*</span>
<a name="l01174"></a>01174 <span class="comment">       * In Hello protocol, optional capability must have checked</span>
<a name="l01175"></a>01175 <span class="comment">       * to prevent this T-bit enabled router be my neighbor.</span>
<a name="l01176"></a>01176 <span class="comment">       */</span>
<a name="l01177"></a>01177       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s: T-bit on?&quot;</span>, inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01178"></a>01178       <span class="keywordflow">return</span>;
<a name="l01179"></a>01179     }
<a name="l01180"></a>01180 <span class="preprocessor">#endif </span><span class="comment">/* REJECT_IF_TBIT_ON */</span>
<a name="l01181"></a>01181 
<a name="l01182"></a>01182 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01183"></a>01183 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>)
<a name="l01184"></a>01184       &amp;&amp; !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l01185"></a>01185     {
<a name="l01186"></a>01186       <span class="comment">/*</span>
<a name="l01187"></a>01187 <span class="comment">       * This node is not configured to handle O-bit, for now.</span>
<a name="l01188"></a>01188 <span class="comment">       * Clear it to ignore unsupported capability proposed by neighbor.</span>
<a name="l01189"></a>01189 <span class="comment">       */</span>
<a name="l01190"></a>01190       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>);
<a name="l01191"></a>01191     }
<a name="l01192"></a>01192 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01193"></a>01193 
<a name="l01194"></a>01194   <span class="comment">/* Process DD packet by neighbor status. */</span>
<a name="l01195"></a>01195   <span class="keywordflow">switch</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>)
<a name="l01196"></a>01196     {
<a name="l01197"></a>01197     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a>:
<a name="l01198"></a>01198     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a8151a9925f00bd1d3b3362a7557bab67">NSM_Attempt</a>:
<a name="l01199"></a>01199     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a8a9d14bfc7d840e04eff13df3337fa24">NSM_TwoWay</a>:
<a name="l01200"></a>01200       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s state is %s, packet discarded.&quot;</span>,
<a name="l01201"></a>01201          inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>),
<a name="l01202"></a>01202          <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l01203"></a>01203       <span class="keywordflow">break</span>;
<a name="l01204"></a>01204     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a42c71b8079e65eca44823c00cf93e477">NSM_Init</a>:
<a name="l01205"></a>01205       <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a103d7a3e177bf1b0d80e0120cbdc900c">NSM_TwoWayReceived</a>);
<a name="l01206"></a>01206       <span class="comment">/* If the new state is ExStart, the processing of the current</span>
<a name="l01207"></a>01207 <span class="comment">     packet should then continue in this new state by falling</span>
<a name="l01208"></a>01208 <span class="comment">     through to case ExStart below.  */</span>
<a name="l01209"></a>01209       <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#aa02b0a534709b4557e46db7b31bbedd7">NSM_ExStart</a>)
<a name="l01210"></a>01210     <span class="keywordflow">break</span>;
<a name="l01211"></a>01211     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#aa02b0a534709b4557e46db7b31bbedd7">NSM_ExStart</a>:
<a name="l01212"></a>01212       <span class="comment">/* Initial DBD */</span>
<a name="l01213"></a>01213       <span class="keywordflow">if</span> ((<a class="code" href="ospf__packet_8h.html#a23b86af94d483f75ac067cccfa70b844">IS_SET_DD_ALL</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) == <a class="code" href="ospfd_8h.html#a0502f602c939ff4aa5d3b00c34d7bf7f">OSPF_DD_FLAG_ALL</a>) &amp;&amp;
<a name="l01214"></a>01214       (size == <a class="code" href="ospf__packet_8h.html#a872e1fdf510665b31c5090348d51b8ab">OSPF_DB_DESC_MIN_SIZE</a>))
<a name="l01215"></a>01215     {
<a name="l01216"></a>01216       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>) &gt; 0)
<a name="l01217"></a>01217         {
<a name="l01218"></a>01218           <span class="comment">/* We&#39;re Slave---obey */</span>
<a name="l01219"></a>01219           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s Negotiation done (Slave).&quot;</span>,
<a name="l01220"></a>01220                  inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01221"></a>01221           nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a> = ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>);
<a name="l01222"></a>01222           
<a name="l01223"></a>01223           <span class="comment">/* Reset I/MS */</span>
<a name="l01224"></a>01224           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>, (<a class="code" href="ospfd_8h.html#ab3fc3af333a4f7ffe2a5d89dd794c124">OSPF_DD_FLAG_MS</a>|<a class="code" href="ospfd_8h.html#afbd1b8930e1f40abaeaf47d3d978d21d">OSPF_DD_FLAG_I</a>));
<a name="l01225"></a>01225         }
<a name="l01226"></a>01226       <span class="keywordflow">else</span>
<a name="l01227"></a>01227         {
<a name="l01228"></a>01228           <span class="comment">/* We&#39;re Master, ignore the initial DBD from Slave */</span>
<a name="l01229"></a>01229           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s: Initial DBD from Slave, &quot;</span>
<a name="l01230"></a>01230                  <span class="stringliteral">&quot;ignoring.&quot;</span>, inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01231"></a>01231           <span class="keywordflow">break</span>;
<a name="l01232"></a>01232         }
<a name="l01233"></a>01233     }
<a name="l01234"></a>01234       <span class="comment">/* Ack from the Slave */</span>
<a name="l01235"></a>01235       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) &amp;&amp; !<a class="code" href="ospf__packet_8h.html#aa9ac12af4b4bd7b1a1c5bed8bd39b937">IS_SET_DD_I</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) &amp;&amp;
<a name="l01236"></a>01236            ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>) == nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a> &amp;&amp;
<a name="l01237"></a>01237            <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>) &lt; 0)
<a name="l01238"></a>01238     {
<a name="l01239"></a>01239       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s Negotiation done (Master).&quot;</span>,
<a name="l01240"></a>01240              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01241"></a>01241           <span class="comment">/* Reset I, leaving MS */</span>
<a name="l01242"></a>01242           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>, <a class="code" href="ospfd_8h.html#afbd1b8930e1f40abaeaf47d3d978d21d">OSPF_DD_FLAG_I</a>);
<a name="l01243"></a>01243     }
<a name="l01244"></a>01244       <span class="keywordflow">else</span>
<a name="l01245"></a>01245     {
<a name="l01246"></a>01246       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s Negotiation fails.&quot;</span>,
<a name="l01247"></a>01247              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01248"></a>01248       <span class="keywordflow">break</span>;
<a name="l01249"></a>01249     }
<a name="l01250"></a>01250       
<a name="l01251"></a>01251       <span class="comment">/* This is where the real Options are saved */</span>
<a name="l01252"></a>01252       nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a> = dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>;
<a name="l01253"></a>01253 
<a name="l01254"></a>01254 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01255"></a>01255 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l01256"></a>01256         {
<a name="l01257"></a>01257           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01258"></a>01258             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Neighbor[%s] is %sOpaque-capable.&quot;</span>,
<a name="l01259"></a>01259                inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>),
<a name="l01260"></a>01260                <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>) ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;NOT &quot;</span>);
<a name="l01261"></a>01261 
<a name="l01262"></a>01262           <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>)
<a name="l01263"></a>01263           &amp;&amp;  <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi), &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l01264"></a>01264             {
<a name="l01265"></a>01265               <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;DR-neighbor[%s] is NOT opaque-capable; &quot;</span>
<a name="l01266"></a>01266                          <span class="stringliteral">&quot;Opaque-LSAs cannot be reliably advertised &quot;</span>
<a name="l01267"></a>01267                          <span class="stringliteral">&quot;in this network.&quot;</span>,
<a name="l01268"></a>01268                          inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01269"></a>01269               <span class="comment">/* This situation is undesirable, but not a real error. */</span>
<a name="l01270"></a>01270             }
<a name="l01271"></a>01271         }
<a name="l01272"></a>01272 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01273"></a>01273 
<a name="l01274"></a>01274       <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a4a5d9bfc806faa7309cf47752d368229">NSM_NegotiationDone</a>);
<a name="l01275"></a>01275 
<a name="l01276"></a>01276       <span class="comment">/* continue processing rest of packet. */</span>
<a name="l01277"></a>01277       <a class="code" href="ospf__packet_8c.html#a67b4181f8ad97f9ac585b27016e23234">ospf_db_desc_proc</a> (s, oi, nbr, dd, size);
<a name="l01278"></a>01278       <span class="keywordflow">break</span>;
<a name="l01279"></a>01279     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>:
<a name="l01280"></a>01280       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#a57a136b92674002e80b88e934f1b3684">ospf_db_desc_is_dup</a> (dd, nbr))
<a name="l01281"></a>01281     {
<a name="l01282"></a>01282       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>))
<a name="l01283"></a>01283         <span class="comment">/* Master: discard duplicated DD packet. */</span>
<a name="l01284"></a>01284         <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD] (Master): Neighbor %s packet duplicated.&quot;</span>,
<a name="l01285"></a>01285                inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01286"></a>01286       <span class="keywordflow">else</span>
<a name="l01287"></a>01287         <span class="comment">/* Slave: cause to retransmit the last Database Description. */</span>
<a name="l01288"></a>01288         {
<a name="l01289"></a>01289           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD] [Slave]: Neighbor %s packet duplicated.&quot;</span>,
<a name="l01290"></a>01290              inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01291"></a>01291           <a class="code" href="ospf__packet_8c.html#a822058f9ec5fa23f5f9cb5a57ba4d8c1">ospf_db_desc_resend</a> (nbr);
<a name="l01292"></a>01292         }
<a name="l01293"></a>01293       <span class="keywordflow">break</span>;
<a name="l01294"></a>01294     }
<a name="l01295"></a>01295 
<a name="l01296"></a>01296       <span class="comment">/* Otherwise DD packet should be checked. */</span>
<a name="l01297"></a>01297       <span class="comment">/* Check Master/Slave bit mismatch */</span>
<a name="l01298"></a>01298       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>) != <a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a371c7bf45abcc3f9e0edc3f8f5aeaa04">last_recv</a>.<a class="code" href="structospf__neighbor.html#a2799fe1cc98df169815fda45421cea69">flags</a>))
<a name="l01299"></a>01299     {
<a name="l01300"></a>01300       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s MS-bit mismatch.&quot;</span>,
<a name="l01301"></a>01301              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01302"></a>01302       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01303"></a>01303       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01304"></a>01304         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Packet[DD]: dd-&gt;flags=%d, nbr-&gt;dd_flags=%d&quot;</span>,
<a name="l01305"></a>01305                 dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>);
<a name="l01306"></a>01306       <span class="keywordflow">break</span>;
<a name="l01307"></a>01307     }
<a name="l01308"></a>01308 
<a name="l01309"></a>01309       <span class="comment">/* Check initialize bit is set. */</span>
<a name="l01310"></a>01310       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#aa9ac12af4b4bd7b1a1c5bed8bd39b937">IS_SET_DD_I</a> (dd-&gt;<a class="code" href="structospf__db__desc.html#a599c2426c5b22460b779bb4110a2e2cc">flags</a>))
<a name="l01311"></a>01311     {
<a name="l01312"></a>01312       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s I-bit set.&quot;</span>,
<a name="l01313"></a>01313              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01314"></a>01314       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01315"></a>01315       <span class="keywordflow">break</span>;
<a name="l01316"></a>01316     }
<a name="l01317"></a>01317 
<a name="l01318"></a>01318       <span class="comment">/* Check DD Options. */</span>
<a name="l01319"></a>01319       <span class="keywordflow">if</span> (dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a> != nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>)
<a name="l01320"></a>01320     {
<a name="l01321"></a>01321 <span class="preprocessor">#ifdef ORIGINAL_CODING</span>
<a name="l01322"></a>01322 <span class="preprocessor"></span>      <span class="comment">/* Save the new options for debugging */</span>
<a name="l01323"></a>01323       nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a> = dd-&gt;<a class="code" href="structospf__db__desc.html#a8ca5015946ab159ff3f4d811ccb28187">options</a>;
<a name="l01324"></a>01324 <span class="preprocessor">#endif </span><span class="comment">/* ORIGINAL_CODING */</span>
<a name="l01325"></a>01325       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s options mismatch.&quot;</span>,
<a name="l01326"></a>01326              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01327"></a>01327       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01328"></a>01328       <span class="keywordflow">break</span>;
<a name="l01329"></a>01329     }
<a name="l01330"></a>01330 
<a name="l01331"></a>01331       <span class="comment">/* Check DD sequence number. */</span>
<a name="l01332"></a>01332       <span class="keywordflow">if</span> ((<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>) &amp;&amp;
<a name="l01333"></a>01333        ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>) != nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a>) ||
<a name="l01334"></a>01334       (!<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>) &amp;&amp;
<a name="l01335"></a>01335        ntohl (dd-&gt;<a class="code" href="structospf__db__desc.html#acb08116622ffb52349f677b7817f79d2">dd_seqnum</a>) != nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a> + 1))
<a name="l01336"></a>01336     {
<a name="l01337"></a>01337       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s sequence number mismatch.&quot;</span>,
<a name="l01338"></a>01338              inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01339"></a>01339       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01340"></a>01340       <span class="keywordflow">break</span>;
<a name="l01341"></a>01341     }
<a name="l01342"></a>01342 
<a name="l01343"></a>01343       <span class="comment">/* Continue processing rest of packet. */</span>
<a name="l01344"></a>01344       <a class="code" href="ospf__packet_8c.html#a67b4181f8ad97f9ac585b27016e23234">ospf_db_desc_proc</a> (s, oi, nbr, dd, size);
<a name="l01345"></a>01345       <span class="keywordflow">break</span>;
<a name="l01346"></a>01346     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#ab83ae0b2039dc911b4752c05da97bc8b">NSM_Loading</a>:
<a name="l01347"></a>01347     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>:
<a name="l01348"></a>01348       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#a57a136b92674002e80b88e934f1b3684">ospf_db_desc_is_dup</a> (dd, nbr))
<a name="l01349"></a>01349     {
<a name="l01350"></a>01350       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#a63eec6702c492926fcdfd84f33eaa836">IS_SET_DD_MS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>))
<a name="l01351"></a>01351         {
<a name="l01352"></a>01352           <span class="comment">/* Master should discard duplicate DD packet. */</span>
<a name="l01353"></a>01353           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s duplicated, &quot;</span>
<a name="l01354"></a>01354                      <span class="stringliteral">&quot;packet discarded.&quot;</span>,
<a name="l01355"></a>01355             inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l01356"></a>01356           <span class="keywordflow">break</span>;
<a name="l01357"></a>01357         }
<a name="l01358"></a>01358       <span class="keywordflow">else</span>
<a name="l01359"></a>01359         {
<a name="l01360"></a>01360           <span class="keyword">struct </span>timeval t, now;
<a name="l01361"></a>01361           <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;now);
<a name="l01362"></a>01362           t = <a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (now, nbr-&gt;<a class="code" href="structospf__neighbor.html#ae7ca27d679d64ea0244355b1ebff4e1b">last_send_ts</a>);
<a name="l01363"></a>01363           <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (t, <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a4e51d35a798becc9ffa76cda3462caaf">v_inactivity</a>)) &lt; 0)
<a name="l01364"></a>01364         {
<a name="l01365"></a>01365           <span class="comment">/* In states Loading and Full the slave must resend</span>
<a name="l01366"></a>01366 <span class="comment">             its last Database Description packet in response to</span>
<a name="l01367"></a>01367 <span class="comment">             duplicate Database Description packets received</span>
<a name="l01368"></a>01368 <span class="comment">             from the master.  For this reason the slave must</span>
<a name="l01369"></a>01369 <span class="comment">             wait RouterDeadInterval seconds before freeing the</span>
<a name="l01370"></a>01370 <span class="comment">             last Database Description packet.  Reception of a</span>
<a name="l01371"></a>01371 <span class="comment">             Database Description packet from the master after</span>
<a name="l01372"></a>01372 <span class="comment">             this interval will generate a SeqNumberMismatch</span>
<a name="l01373"></a>01373 <span class="comment">             neighbor event. RFC2328 Section 10.8 */</span>
<a name="l01374"></a>01374           <a class="code" href="ospf__packet_8c.html#a822058f9ec5fa23f5f9cb5a57ba4d8c1">ospf_db_desc_resend</a> (nbr);
<a name="l01375"></a>01375           <span class="keywordflow">break</span>;
<a name="l01376"></a>01376         }
<a name="l01377"></a>01377         }
<a name="l01378"></a>01378     }
<a name="l01379"></a>01379 
<a name="l01380"></a>01380       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aab00c9e1d8f7f1c47e4e2d857a4753e3">NSM_SeqNumberMismatch</a>);
<a name="l01381"></a>01381       <span class="keywordflow">break</span>;
<a name="l01382"></a>01382     <span class="keywordflow">default</span>:
<a name="l01383"></a>01383       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet[DD]: Neighbor %s NSM illegal status %u.&quot;</span>,
<a name="l01384"></a>01384          inet_ntoa(nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>);
<a name="l01385"></a>01385       <span class="keywordflow">break</span>;
<a name="l01386"></a>01386     }
<a name="l01387"></a>01387 }
<a name="l01388"></a>01388 
<a name="l01389"></a><a class="code" href="ospf__packet_8c.html#a8b6f0b7e63bbefb8185834a6bd8845f4">01389</a> <span class="preprocessor">#define OSPF_LSA_KEY_SIZE       12 </span><span class="comment">/* type(4) + id(4) + ar(4) */</span>
<a name="l01390"></a>01390 
<a name="l01391"></a>01391 <span class="comment">/* OSPF Link State Request Read -- RFC2328 Section 10.7. */</span>
<a name="l01392"></a>01392 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01393"></a><a class="code" href="ospf__packet_8c.html#a67c5af7ccab57522caf7c41782ddf507">01393</a> <a class="code" href="ospf__packet_8c.html#a67c5af7ccab57522caf7c41782ddf507">ospf_ls_req</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh,
<a name="l01394"></a>01394          <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, u_int16_t size)
<a name="l01395"></a>01395 {
<a name="l01396"></a>01396   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l01397"></a>01397   u_int32_t ls_type;
<a name="l01398"></a>01398   <span class="keyword">struct </span>in_addr ls_id;
<a name="l01399"></a>01399   <span class="keyword">struct </span>in_addr adv_router;
<a name="l01400"></a>01400   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *find;
<a name="l01401"></a>01401   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ls_upd;
<a name="l01402"></a>01402   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01403"></a>01403 
<a name="l01404"></a>01404   <span class="comment">/* Increment statistics. */</span>
<a name="l01405"></a>01405   oi-&gt;<a class="code" href="structospf__interface.html#a1bae2fef6f6ff3ecfc92a552c86382ed">ls_req_in</a>++;
<a name="l01406"></a>01406 
<a name="l01407"></a>01407   nbr = <a class="code" href="ospf__neighbor_8c.html#aaae24ad2ba48314e7007f27c61ef98e0">ospf_nbr_lookup</a> (oi, iph, ospfh);
<a name="l01408"></a>01408   <span class="keywordflow">if</span> (nbr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01409"></a>01409     {
<a name="l01410"></a>01410       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Request: Unknown Neighbor %s.&quot;</span>,
<a name="l01411"></a>01411          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l01412"></a>01412       <span class="keywordflow">return</span>;
<a name="l01413"></a>01413     }
<a name="l01414"></a>01414 
<a name="l01415"></a>01415   <span class="comment">/* Neighbor State should be Exchange or later. */</span>
<a name="l01416"></a>01416   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a> &amp;&amp;
<a name="l01417"></a>01417       nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#ab83ae0b2039dc911b4752c05da97bc8b">NSM_Loading</a> &amp;&amp;
<a name="l01418"></a>01418       nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
<a name="l01419"></a>01419     {
<a name="l01420"></a>01420       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Request received from %s: &quot;</span>
<a name="l01421"></a>01421              <span class="stringliteral">&quot;Neighbor state is %s, packet discarded.&quot;</span>,
<a name="l01422"></a>01422          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l01423"></a>01423          <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l01424"></a>01424       <span class="keywordflow">return</span>;
<a name="l01425"></a>01425     }
<a name="l01426"></a>01426 
<a name="l01427"></a>01427   <span class="comment">/* Send Link State Update for ALL requested LSAs. */</span>
<a name="l01428"></a>01428   ls_upd = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01429"></a>01429   length = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a> + <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>;
<a name="l01430"></a>01430 
<a name="l01431"></a>01431   <span class="keywordflow">while</span> (size &gt;= <a class="code" href="ospf__packet_8c.html#a8b6f0b7e63bbefb8185834a6bd8845f4">OSPF_LSA_KEY_SIZE</a>)
<a name="l01432"></a>01432     {
<a name="l01433"></a>01433       <span class="comment">/* Get one slice of Link State Request. */</span>
<a name="l01434"></a>01434       ls_type = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l01435"></a>01435       ls_id.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l01436"></a>01436       adv_router.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l01437"></a>01437 
<a name="l01438"></a>01438       <span class="comment">/* Verify LSA type. */</span>
<a name="l01439"></a>01439       <span class="keywordflow">if</span> (ls_type &lt; OSPF_MIN_LSA || ls_type &gt;= <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>)
<a name="l01440"></a>01440     {
<a name="l01441"></a>01441       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aa4b337ea9416643e95d0f85b97c3367b">NSM_BadLSReq</a>);
<a name="l01442"></a>01442       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (ls_upd);
<a name="l01443"></a>01443       <span class="keywordflow">return</span>;
<a name="l01444"></a>01444     }
<a name="l01445"></a>01445 
<a name="l01446"></a>01446       <span class="comment">/* Search proper LSA in LSDB. */</span>
<a name="l01447"></a>01447       find = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, ls_type, ls_id, adv_router);
<a name="l01448"></a>01448       <span class="keywordflow">if</span> (find == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01449"></a>01449     {
<a name="l01450"></a>01450       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aa4b337ea9416643e95d0f85b97c3367b">NSM_BadLSReq</a>);
<a name="l01451"></a>01451       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (ls_upd);
<a name="l01452"></a>01452       <span class="keywordflow">return</span>;
<a name="l01453"></a>01453     }
<a name="l01454"></a>01454 
<a name="l01455"></a>01455       <span class="comment">/* Packet overflows MTU size, send immediately. */</span>
<a name="l01456"></a>01456       <span class="keywordflow">if</span> (length + ntohs (find-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) &gt; <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (oi))
<a name="l01457"></a>01457     {
<a name="l01458"></a>01458       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l01459"></a>01459         <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, ls_upd, <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>);
<a name="l01460"></a>01460       <span class="keywordflow">else</span>
<a name="l01461"></a>01461         <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, ls_upd, <a class="code" href="ospf__packet_8h.html#a76f6e5970f4cddaa077a801063a4c0ef">OSPF_SEND_PACKET_INDIRECT</a>);
<a name="l01462"></a>01462 
<a name="l01463"></a>01463       <span class="comment">/* Only remove list contents.  Keep ls_upd. */</span>
<a name="l01464"></a>01464       <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (ls_upd);
<a name="l01465"></a>01465 
<a name="l01466"></a>01466       length = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a> + <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>;
<a name="l01467"></a>01467     }
<a name="l01468"></a>01468 
<a name="l01469"></a>01469       <span class="comment">/* Append LSA to update list. */</span>
<a name="l01470"></a>01470       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ls_upd, find);
<a name="l01471"></a>01471       length += ntohs (find-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l01472"></a>01472 
<a name="l01473"></a>01473       size -= <a class="code" href="ospf__packet_8c.html#a8b6f0b7e63bbefb8185834a6bd8845f4">OSPF_LSA_KEY_SIZE</a>;
<a name="l01474"></a>01474     }
<a name="l01475"></a>01475 
<a name="l01476"></a>01476   <span class="comment">/* Send rest of Link State Update. */</span>
<a name="l01477"></a>01477   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (ls_upd) &gt; 0)
<a name="l01478"></a>01478     {
<a name="l01479"></a>01479       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l01480"></a>01480     <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, ls_upd, <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>);
<a name="l01481"></a>01481       <span class="keywordflow">else</span>
<a name="l01482"></a>01482     <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, ls_upd, <a class="code" href="ospf__packet_8h.html#a76f6e5970f4cddaa077a801063a4c0ef">OSPF_SEND_PACKET_INDIRECT</a>);
<a name="l01483"></a>01483 
<a name="l01484"></a>01484       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (ls_upd);
<a name="l01485"></a>01485     }
<a name="l01486"></a>01486   <span class="keywordflow">else</span>
<a name="l01487"></a>01487     <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (ls_upd);
<a name="l01488"></a>01488 }
<a name="l01489"></a>01489 
<a name="l01490"></a>01490 <span class="comment">/* Get the list of LSAs from Link State Update packet.</span>
<a name="l01491"></a>01491 <span class="comment">   And process some validation -- RFC2328 Section 13. (1)-(2). */</span>
<a name="l01492"></a>01492 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *
<a name="l01493"></a><a class="code" href="ospf__packet_8c.html#a773d3b65ff0a27f425c94037bbb6cbb6">01493</a> <a class="code" href="ospf__packet_8c.html#a773d3b65ff0a27f425c94037bbb6cbb6">ospf_ls_upd_list_lsa</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>,
<a name="l01494"></a>01494                       <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">size_t</span> size)
<a name="l01495"></a>01495 {
<a name="l01496"></a>01496   u_int16_t <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>, sum;
<a name="l01497"></a>01497   u_int32_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01498"></a>01498   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l01499"></a>01499   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l01500"></a>01500   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lsas;
<a name="l01501"></a>01501 
<a name="l01502"></a>01502   lsas = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01503"></a>01503 
<a name="l01504"></a>01504   count = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l01505"></a>01505   size -= <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>; <span class="comment">/* # LSAs */</span>
<a name="l01506"></a>01506 
<a name="l01507"></a>01507   <span class="keywordflow">for</span> (; size &gt;= <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> &amp;&amp; count &gt; 0;
<a name="l01508"></a>01508        size -= <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, length), count--)
<a name="l01509"></a>01509     {
<a name="l01510"></a>01510       lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l01511"></a>01511       length = ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l01512"></a>01512 
<a name="l01513"></a>01513       <span class="keywordflow">if</span> (length &gt; size)
<a name="l01514"></a>01514     {
<a name="l01515"></a>01515       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Update: LSA length exceeds packet size.&quot;</span>);
<a name="l01516"></a>01516       <span class="keywordflow">break</span>;
<a name="l01517"></a>01517     }
<a name="l01518"></a>01518 
<a name="l01519"></a>01519       <span class="comment">/* Validate the LSA&#39;s LS checksum. */</span>
<a name="l01520"></a>01520       sum = lsah-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>;
<a name="l01521"></a>01521       <span class="keywordflow">if</span> (sum != <a class="code" href="ospf__lsa_8c.html#a51f65ba10ce016111b959f7ce2790eaa">ospf_lsa_checksum</a> (lsah))
<a name="l01522"></a>01522     {
<a name="l01523"></a>01523       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Update: LSA checksum error %x, %x.&quot;</span>,
<a name="l01524"></a>01524              sum, lsah-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>);
<a name="l01525"></a>01525       <span class="keywordflow">continue</span>;
<a name="l01526"></a>01526     }
<a name="l01527"></a>01527 
<a name="l01528"></a>01528       <span class="comment">/* Examine the LSA&#39;s LS type. */</span>
<a name="l01529"></a>01529       <span class="keywordflow">if</span> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &lt; <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a> || lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &gt;= <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>)
<a name="l01530"></a>01530     {
<a name="l01531"></a>01531       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Update: Unknown LS type %d&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01532"></a>01532       <span class="keywordflow">continue</span>;
<a name="l01533"></a>01533     }
<a name="l01534"></a>01534 
<a name="l01535"></a>01535       <span class="comment">/*</span>
<a name="l01536"></a>01536 <span class="comment">       * What if the received LSA&#39;s age is greater than MaxAge?</span>
<a name="l01537"></a>01537 <span class="comment">       * Treat it as a MaxAge case -- endo.</span>
<a name="l01538"></a>01538 <span class="comment">       */</span>
<a name="l01539"></a>01539       <span class="keywordflow">if</span> (ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>) &gt; <a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>)
<a name="l01540"></a>01540         lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l01541"></a>01541 
<a name="l01542"></a>01542 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01543"></a>01543 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l01544"></a>01544         {
<a name="l01545"></a>01545 <span class="preprocessor">#ifdef STRICT_OBIT_USAGE_CHECK</span>
<a name="l01546"></a>01546 <span class="preprocessor"></span>      <span class="keywordflow">if</span> ((<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a>(lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>) &amp;&amp;
<a name="l01547"></a>01547                ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsah-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l01548"></a>01548       ||  (! <a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a>(lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>) &amp;&amp;
<a name="l01549"></a>01549                <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsah-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>)))
<a name="l01550"></a>01550             {
<a name="l01551"></a>01551               <span class="comment">/*</span>
<a name="l01552"></a>01552 <span class="comment">               * This neighbor must know the exact usage of O-bit;</span>
<a name="l01553"></a>01553 <span class="comment">               * the bit will be set in Type-9,10,11 LSAs only.</span>
<a name="l01554"></a>01554 <span class="comment">               */</span>
<a name="l01555"></a>01555               <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: O-bit abuse?&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01556"></a>01556               <span class="keywordflow">continue</span>;
<a name="l01557"></a>01557             }
<a name="l01558"></a>01558 <span class="preprocessor">#endif </span><span class="comment">/* STRICT_OBIT_USAGE_CHECK */</span>
<a name="l01559"></a>01559 
<a name="l01560"></a>01560           <span class="comment">/* Do not take in AS External Opaque-LSAs if we are a stub. */</span>
<a name="l01561"></a>01561           <span class="keywordflow">if</span> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>
<a name="l01562"></a>01562           &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> != <a class="code" href="ospfd_8h.html#a43f84c8e8584ccc8b82990d251abec4d">OSPF_AREA_DEFAULT</a>) 
<a name="l01563"></a>01563             {
<a name="l01564"></a>01564               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01565"></a>01565                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: We are a stub, don&#39;t take this LSA.&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01566"></a>01566               <span class="keywordflow">continue</span>;
<a name="l01567"></a>01567             }
<a name="l01568"></a>01568         }
<a name="l01569"></a>01569       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a>(lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>))
<a name="l01570"></a>01570         {
<a name="l01571"></a>01571           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Opaque capability mismatch?&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01572"></a>01572           <span class="keywordflow">continue</span>;
<a name="l01573"></a>01573         }
<a name="l01574"></a>01574 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01575"></a>01575 
<a name="l01576"></a>01576       <span class="comment">/* Create OSPF LSA instance. */</span>
<a name="l01577"></a>01577       lsa = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
<a name="l01578"></a>01578 
<a name="l01579"></a>01579       <span class="comment">/* We may wish to put some error checking if type NSSA comes in</span>
<a name="l01580"></a>01580 <span class="comment">         and area not in NSSA mode */</span>
<a name="l01581"></a>01581       <span class="keywordflow">switch</span> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01582"></a>01582         {
<a name="l01583"></a>01583         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<a name="l01584"></a>01584 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01585"></a>01585 <span class="preprocessor"></span>        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l01586"></a>01586           lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01587"></a>01587           <span class="keywordflow">break</span>;
<a name="l01588"></a>01588         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01589"></a>01589           lsa-&gt;oi = oi; <span class="comment">/* Remember incoming interface for flooding control. */</span>
<a name="l01590"></a>01590           <span class="comment">/* Fallthrough */</span>
<a name="l01591"></a>01591 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01592"></a>01592         <span class="keywordflow">default</span>:
<a name="l01593"></a>01593           lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a> = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>;
<a name="l01594"></a>01594           <span class="keywordflow">break</span>;
<a name="l01595"></a>01595         }
<a name="l01596"></a>01596 
<a name="l01597"></a>01597       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
<a name="l01598"></a>01598       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, lsah, length);
<a name="l01599"></a>01599 
<a name="l01600"></a>01600       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01601"></a>01601     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;LSA[Type%d:%s]: %p new LSA created with Link State Update&quot;</span>,
<a name="l01602"></a>01602           lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), lsa);
<a name="l01603"></a>01603       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (lsas, lsa);
<a name="l01604"></a>01604     }
<a name="l01605"></a>01605 
<a name="l01606"></a>01606   <span class="keywordflow">return</span> lsas;
<a name="l01607"></a>01607 }
<a name="l01608"></a>01608 
<a name="l01609"></a>01609 <span class="comment">/* Cleanup Update list. */</span>
<a name="l01610"></a>01610 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01611"></a><a class="code" href="ospf__packet_8c.html#af2d9c22ba37505b8c83de0ca81136dd0">01611</a> <a class="code" href="ospf__packet_8c.html#af2d9c22ba37505b8c83de0ca81136dd0">ospf_upd_list_clean</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *lsas)
<a name="l01612"></a>01612 {
<a name="l01613"></a>01613   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01614"></a>01614   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l01615"></a>01615 
<a name="l01616"></a>01616   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (lsas, node, nnode, lsa))
<a name="l01617"></a>01617     <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l01618"></a>01618 
<a name="l01619"></a>01619   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (lsas);
<a name="l01620"></a>01620 }
<a name="l01621"></a>01621 
<a name="l01622"></a>01622 <span class="comment">/* OSPF Link State Update message read -- RFC2328 Section 13. */</span>
<a name="l01623"></a>01623 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01624"></a><a class="code" href="ospf__packet_8c.html#ae6d6c24939d4be655119e40f91955c4a">01624</a> <a class="code" href="ospf__packet_8c.html#ae6d6c24939d4be655119e40f91955c4a">ospf_ls_upd</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh,
<a name="l01625"></a>01625          <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, u_int16_t size)
<a name="l01626"></a>01626 {
<a name="l01627"></a>01627   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l01628"></a>01628   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lsas;
<a name="l01629"></a>01629   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01630"></a>01630   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01631"></a>01631   <span class="comment">/* unsigned long ls_req_found = 0; */</span>
<a name="l01632"></a>01632 
<a name="l01633"></a>01633   <span class="comment">/* Dis-assemble the stream, update each entry, re-encapsulate for flooding */</span>
<a name="l01634"></a>01634 
<a name="l01635"></a>01635   <span class="comment">/* Increment statistics. */</span>
<a name="l01636"></a>01636   oi-&gt;<a class="code" href="structospf__interface.html#ad27213c39580ac77a54502b5e49c11f1">ls_upd_in</a>++;
<a name="l01637"></a>01637 
<a name="l01638"></a>01638   <span class="comment">/* Check neighbor. */</span>
<a name="l01639"></a>01639   nbr = <a class="code" href="ospf__neighbor_8c.html#aaae24ad2ba48314e7007f27c61ef98e0">ospf_nbr_lookup</a> (oi, iph, ospfh);
<a name="l01640"></a>01640   <span class="keywordflow">if</span> (nbr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01641"></a>01641     {
<a name="l01642"></a>01642       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Update: Unknown Neighbor %s on int: %s&quot;</span>,
<a name="l01643"></a>01643          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>), <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l01644"></a>01644       <span class="keywordflow">return</span>;
<a name="l01645"></a>01645     }
<a name="l01646"></a>01646 
<a name="l01647"></a>01647   <span class="comment">/* Check neighbor state. */</span>
<a name="l01648"></a>01648   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &lt; <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l01649"></a>01649     {
<a name="l01650"></a>01650       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Update: &quot;</span>
<a name="l01651"></a>01651              <span class="stringliteral">&quot;Neighbor[%s] state %s is less than Exchange&quot;</span>,
<a name="l01652"></a>01652          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l01653"></a>01653          <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a>(<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l01654"></a>01654       <span class="keywordflow">return</span>;
<a name="l01655"></a>01655     }
<a name="l01656"></a>01656 
<a name="l01657"></a>01657   <span class="comment">/* Get list of LSAs from Link State Update packet. - Also perorms Stages </span>
<a name="l01658"></a>01658 <span class="comment">   * 1 (validate LSA checksum) and 2 (check for LSA consistent type) </span>
<a name="l01659"></a>01659 <span class="comment">   * of section 13. </span>
<a name="l01660"></a>01660 <span class="comment">   */</span>
<a name="l01661"></a>01661   lsas = <a class="code" href="ospf__packet_8c.html#a773d3b65ff0a27f425c94037bbb6cbb6">ospf_ls_upd_list_lsa</a> (nbr, s, oi, size);
<a name="l01662"></a>01662 
<a name="l01663"></a>01663 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01664"></a>01664 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l01665"></a>01665 <span class="comment">   * If self-originated Opaque-LSAs that have flooded before restart</span>
<a name="l01666"></a>01666 <span class="comment">   * are contained in the received LSUpd message, corresponding LSReq</span>
<a name="l01667"></a>01667 <span class="comment">   * messages to be sent may have to be modified.</span>
<a name="l01668"></a>01668 <span class="comment">   * To eliminate possible race conditions such that flushing and normal</span>
<a name="l01669"></a>01669 <span class="comment">   * updating for the same LSA would take place alternately, this trick</span>
<a name="l01670"></a>01670 <span class="comment">   * must be done before entering to the loop below.</span>
<a name="l01671"></a>01671 <span class="comment">   */</span>
<a name="l01672"></a>01672    <span class="comment">/* XXX: Why is this Opaque specific? Either our core code is deficient</span>
<a name="l01673"></a>01673 <span class="comment">    * and this should be fixed generally, or Opaque is inventing strawman</span>
<a name="l01674"></a>01674 <span class="comment">    * problems */</span>
<a name="l01675"></a>01675    <a class="code" href="ospf__opaque_8h.html#a1305cd45c4dda8bd2a53326fef2c774d">ospf_opaque_adjust_lsreq</a> (nbr, lsas);
<a name="l01676"></a>01676 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01677"></a>01677 
<a name="l01678"></a>01678 <span class="preprocessor">#define DISCARD_LSA(L,N) {\</span>
<a name="l01679"></a>01679 <span class="preprocessor">        if (IS_DEBUG_OSPF_EVENT) \</span>
<a name="l01680"></a>01680 <span class="preprocessor">          zlog_debug (&quot;ospf_lsa_discard() in ospf_ls_upd() point %d: lsa %p Type-%d&quot;, N, lsa, (int) lsa-&gt;data-&gt;type); \</span>
<a name="l01681"></a>01681 <span class="preprocessor">        ospf_lsa_discard (L); \</span>
<a name="l01682"></a>01682 <span class="preprocessor">    continue; }</span>
<a name="l01683"></a>01683 <span class="preprocessor"></span>
<a name="l01684"></a>01684   <span class="comment">/* Process each LSA received in the one packet. */</span>
<a name="l01685"></a>01685   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (lsas, node, nnode, lsa))
<a name="l01686"></a>01686     {
<a name="l01687"></a>01687       <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *ls_ret, *current;
<a name="l01688"></a>01688       <span class="keywordtype">int</span> ret = 1;
<a name="l01689"></a>01689 
<a name="l01690"></a>01690       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l01691"></a>01691     {
<a name="l01692"></a>01692       <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l01693"></a>01693       <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l01694"></a>01694       <span class="keywordtype">char</span> buf3[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l01695"></a>01695 
<a name="l01696"></a>01696       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;LSA Type-%d from %s, ID: %s, ADV: %s&quot;</span>,
<a name="l01697"></a>01697           lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>,
<a name="l01698"></a>01698           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>,
<a name="l01699"></a>01699                  buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
<a name="l01700"></a>01700           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>,
<a name="l01701"></a>01701                  buf2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
<a name="l01702"></a>01702           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>,
<a name="l01703"></a>01703                  buf3, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>));
<a name="l01704"></a>01704     }
<a name="l01705"></a>01705 
<a name="l01706"></a>01706       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (lsas, lsa); <span class="comment">/* We don&#39;t need it in list anymore */</span>
<a name="l01707"></a>01707 
<a name="l01708"></a>01708       <span class="comment">/* Validate Checksum - Done above by ospf_ls_upd_list_lsa() */</span>
<a name="l01709"></a>01709 
<a name="l01710"></a>01710       <span class="comment">/* LSA Type  - Done above by ospf_ls_upd_list_lsa() */</span>
<a name="l01711"></a>01711    
<a name="l01712"></a>01712       <span class="comment">/* Do not take in AS External LSAs if we are a stub or NSSA. */</span>
<a name="l01713"></a>01713 
<a name="l01714"></a>01714       <span class="comment">/* Do not take in AS NSSA if this neighbor and we are not NSSA */</span>
<a name="l01715"></a>01715 
<a name="l01716"></a>01716       <span class="comment">/* Do take in Type-7&#39;s if we are an NSSA  */</span> 
<a name="l01717"></a>01717  
<a name="l01718"></a>01718       <span class="comment">/* If we are also an ABR, later translate them to a Type-5 packet */</span>
<a name="l01719"></a>01719  
<a name="l01720"></a>01720       <span class="comment">/* Later, an NSSA Re-fresh can Re-fresh Type-7&#39;s and an ABR will</span>
<a name="l01721"></a>01721 <span class="comment">     translate them to a separate Type-5 packet.  */</span>
<a name="l01722"></a>01722 
<a name="l01723"></a>01723       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>)
<a name="l01724"></a>01724         <span class="comment">/* Reject from STUB or NSSA */</span>
<a name="l01725"></a>01725         <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> != <a class="code" href="ospfd_8h.html#a43f84c8e8584ccc8b82990d251abec4d">OSPF_AREA_DEFAULT</a>) 
<a name="l01726"></a>01726       {
<a name="l01727"></a>01727         <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l01728"></a>01728           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Incoming External LSA Discarded: We are NSSA/STUB Area&quot;</span>);
<a name="l01729"></a>01729         <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 1);
<a name="l01730"></a>01730       }
<a name="l01731"></a>01731 
<a name="l01732"></a>01732       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>)
<a name="l01733"></a>01733     <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> != <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
<a name="l01734"></a>01734       {
<a name="l01735"></a>01735         <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l01736"></a>01736           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Incoming NSSA LSA Discarded:  Not NSSA Area&quot;</span>);
<a name="l01737"></a>01737         <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa,2);
<a name="l01738"></a>01738       }
<a name="l01739"></a>01739 
<a name="l01740"></a>01740       <span class="comment">/* Find the LSA in the current database. */</span>
<a name="l01741"></a>01741 
<a name="l01742"></a>01742       current = <a class="code" href="ospf__lsa_8c.html#a02a444e61c60412cd2d17bd130ae06af">ospf_lsa_lookup_by_header</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l01743"></a>01743 
<a name="l01744"></a>01744       <span class="comment">/* If the LSA&#39;s LS age is equal to MaxAge, and there is currently</span>
<a name="l01745"></a>01745 <span class="comment">     no instance of the LSA in the router&#39;s link state database,</span>
<a name="l01746"></a>01746 <span class="comment">     and none of router&#39;s neighbors are in states Exchange or Loading,</span>
<a name="l01747"></a>01747 <span class="comment">     then take the following actions. */</span>
<a name="l01748"></a>01748 
<a name="l01749"></a>01749       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa) &amp;&amp; !current &amp;&amp;
<a name="l01750"></a>01750       (<a class="code" href="ospf__neighbor_8c.html#a0988186d79c97a6ef8211bdf208e0113">ospf_nbr_count</a> (oi, <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>) +
<a name="l01751"></a>01751        <a class="code" href="ospf__neighbor_8c.html#a0988186d79c97a6ef8211bdf208e0113">ospf_nbr_count</a> (oi, <a class="code" href="ospf__nsm_8h.html#ab83ae0b2039dc911b4752c05da97bc8b">NSM_Loading</a>)) == 0)
<a name="l01752"></a>01752     {
<a name="l01753"></a>01753       <span class="comment">/* Response Link State Acknowledgment. */</span>
<a name="l01754"></a>01754       <a class="code" href="ospf__packet_8c.html#a0526da5e78520753054e11e7520f5c99">ospf_ls_ack_send</a> (nbr, lsa);
<a name="l01755"></a>01755 
<a name="l01756"></a>01756       <span class="comment">/* Discard LSA. */</span>      
<a name="l01757"></a>01757       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Link State Update[%s]: LS age is equal to MaxAge.&quot;</span>,
<a name="l01758"></a>01758              <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a>(lsa));
<a name="l01759"></a>01759           <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 3);
<a name="l01760"></a>01760     }
<a name="l01761"></a>01761 
<a name="l01762"></a>01762 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01763"></a>01763 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01764"></a>01764       &amp;&amp;  <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
<a name="l01765"></a>01765         {
<a name="l01766"></a>01766           <span class="comment">/*</span>
<a name="l01767"></a>01767 <span class="comment">           * Even if initial flushing seems to be completed, there might</span>
<a name="l01768"></a>01768 <span class="comment">           * be a case that self-originated LSA with MaxAge still remain</span>
<a name="l01769"></a>01769 <span class="comment">           * in the routing domain.</span>
<a name="l01770"></a>01770 <span class="comment">           * Just send an LSAck message to cease retransmission.</span>
<a name="l01771"></a>01771 <span class="comment">           */</span>
<a name="l01772"></a>01772           <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
<a name="l01773"></a>01773             {
<a name="l01774"></a>01774               <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA[%s]: Boomerang effect?&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l01775"></a>01775               <a class="code" href="ospf__packet_8c.html#a0526da5e78520753054e11e7520f5c99">ospf_ls_ack_send</a> (nbr, lsa);
<a name="l01776"></a>01776               <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l01777"></a>01777 
<a name="l01778"></a>01778               <span class="keywordflow">if</span> (current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; ! <a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (current))
<a name="l01779"></a>01779                 <a class="code" href="ospf__opaque_8h.html#aa09894547334df306db297c657329cb9">ospf_opaque_lsa_refresh_schedule</a> (current);
<a name="l01780"></a>01780               <span class="keywordflow">continue</span>;
<a name="l01781"></a>01781             }
<a name="l01782"></a>01782 
<a name="l01783"></a>01783           <span class="comment">/*</span>
<a name="l01784"></a>01784 <span class="comment">           * If an instance of self-originated Opaque-LSA is not found</span>
<a name="l01785"></a>01785 <span class="comment">           * in the LSDB, there are some possible cases here.</span>
<a name="l01786"></a>01786 <span class="comment">           *</span>
<a name="l01787"></a>01787 <span class="comment">           * 1) This node lost opaque-capability after restart.</span>
<a name="l01788"></a>01788 <span class="comment">           * 2) Else, a part of opaque-type is no more supported.</span>
<a name="l01789"></a>01789 <span class="comment">           * 3) Else, a part of opaque-id is no more supported.</span>
<a name="l01790"></a>01790 <span class="comment">           *</span>
<a name="l01791"></a>01791 <span class="comment">           * Anyway, it is still this node&#39;s responsibility to flush it.</span>
<a name="l01792"></a>01792 <span class="comment">           * Otherwise, the LSA instance remains in the routing domain</span>
<a name="l01793"></a>01793 <span class="comment">           * until its age reaches to MaxAge.</span>
<a name="l01794"></a>01794 <span class="comment">           */</span>
<a name="l01795"></a>01795           <span class="comment">/* XXX: We should deal with this for *ALL* LSAs, not just opaque */</span>
<a name="l01796"></a>01796           <span class="keywordflow">if</span> (current == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01797"></a>01797             {
<a name="l01798"></a>01798               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01799"></a>01799                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[%s]: Previously originated Opaque-LSA,&quot;</span>
<a name="l01800"></a>01800                             <span class="stringliteral">&quot;not found in the LSDB.&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l01801"></a>01801 
<a name="l01802"></a>01802               <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
<a name="l01803"></a>01803               
<a name="l01804"></a>01804               <a class="code" href="ospf__opaque_8h.html#ac8060bfd88d1dd4e8b89f46952154739">ospf_opaque_self_originated_lsa_received</a> (nbr, lsa);
<a name="l01805"></a>01805               <a class="code" href="ospf__packet_8c.html#a0526da5e78520753054e11e7520f5c99">ospf_ls_ack_send</a> (nbr, lsa);
<a name="l01806"></a>01806               
<a name="l01807"></a>01807               <span class="keywordflow">continue</span>;
<a name="l01808"></a>01808             }
<a name="l01809"></a>01809         }
<a name="l01810"></a>01810 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01811"></a>01811 
<a name="l01812"></a>01812       <span class="comment">/* It might be happen that received LSA is self-originated network LSA, but</span>
<a name="l01813"></a>01813 <span class="comment">       * router ID is cahnged. So, we should check if LSA is a network-LSA whose</span>
<a name="l01814"></a>01814 <span class="comment">       * Link State ID is one of the router&#39;s own IP interface addresses but whose</span>
<a name="l01815"></a>01815 <span class="comment">       * Advertising Router is not equal to the router&#39;s own Router ID</span>
<a name="l01816"></a>01816 <span class="comment">       * According to RFC 2328 12.4.2 and 13.4 this LSA should be flushed.</span>
<a name="l01817"></a>01817 <span class="comment">       */</span>
<a name="l01818"></a>01818 
<a name="l01819"></a>01819       <span class="keywordflow">if</span>(lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
<a name="l01820"></a>01820       {
<a name="l01821"></a>01821         <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *oinode, *oinnode;
<a name="l01822"></a>01822         <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *out_if;
<a name="l01823"></a>01823         <span class="keywordtype">int</span> Flag = 0;
<a name="l01824"></a>01824 
<a name="l01825"></a>01825         <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, oinode, oinnode, out_if))
<a name="l01826"></a>01826         {
<a name="l01827"></a>01827           <span class="keywordflow">if</span>(out_if == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01828"></a>01828             <span class="keywordflow">break</span>;
<a name="l01829"></a>01829 
<a name="l01830"></a>01830           <span class="keywordflow">if</span>((<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;out_if-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>)) &amp;&amp;
<a name="l01831"></a>01831               (!(<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>))))
<a name="l01832"></a>01832           {
<a name="l01833"></a>01833             <span class="keywordflow">if</span>(out_if-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>)
<a name="l01834"></a>01834             {
<a name="l01835"></a>01835               <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a>(lsa,out_if-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
<a name="l01836"></a>01836               <span class="keywordflow">if</span>(<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01837"></a>01837                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_discard() in ospf_ls_upd() point 9: lsa %p Type-%d&quot;</span>,
<a name="l01838"></a>01838                             lsa, (<span class="keywordtype">int</span>) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01839"></a>01839               <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l01840"></a>01840               Flag = 1;
<a name="l01841"></a>01841             }
<a name="l01842"></a>01842             <span class="keywordflow">break</span>;
<a name="l01843"></a>01843           }
<a name="l01844"></a>01844         }
<a name="l01845"></a>01845         <span class="keywordflow">if</span>(Flag)
<a name="l01846"></a>01846           <span class="keywordflow">continue</span>;
<a name="l01847"></a>01847       }
<a name="l01848"></a>01848 
<a name="l01849"></a>01849       <span class="comment">/* (5) Find the instance of this LSA that is currently contained</span>
<a name="l01850"></a>01850 <span class="comment">     in the router&#39;s link state database.  If there is no</span>
<a name="l01851"></a>01851 <span class="comment">     database copy, or the received LSA is more recent than</span>
<a name="l01852"></a>01852 <span class="comment">     the database copy the following steps must be performed. */</span>
<a name="l01853"></a>01853 
<a name="l01854"></a>01854       <span class="keywordflow">if</span> (current == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ||
<a name="l01855"></a>01855       (ret = <a class="code" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (current, lsa)) &lt; 0)
<a name="l01856"></a>01856     {
<a name="l01857"></a>01857       <span class="comment">/* Actual flooding procedure. */</span>
<a name="l01858"></a>01858       <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a3163fd032113f23c9df7f9c3ec40c560">ospf_flood</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, nbr, current, lsa) &lt; 0)  <span class="comment">/* Trap NSSA later. */</span>
<a name="l01859"></a>01859         <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 4);
<a name="l01860"></a>01860       <span class="keywordflow">continue</span>;
<a name="l01861"></a>01861     }
<a name="l01862"></a>01862 
<a name="l01863"></a>01863       <span class="comment">/* (6) Else, If there is an instance of the LSA on the sending</span>
<a name="l01864"></a>01864 <span class="comment">     neighbor&#39;s Link state request list, an error has occurred in</span>
<a name="l01865"></a>01865 <span class="comment">     the Database Exchange process.  In this case, restart the</span>
<a name="l01866"></a>01866 <span class="comment">     Database Exchange process by generating the neighbor event</span>
<a name="l01867"></a>01867 <span class="comment">     BadLSReq for the sending neighbor and stop processing the</span>
<a name="l01868"></a>01868 <span class="comment">     Link State Update packet. */</span>
<a name="l01869"></a>01869 
<a name="l01870"></a>01870       <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a27c6e0c56e71024a8f2906b22ff31558">ospf_ls_request_lookup</a> (nbr, lsa))
<a name="l01871"></a>01871     {
<a name="l01872"></a>01872       <a class="code" href="ospf__nsm_8h.html#a1cb080254e9d0314d6ef4bc2c05e36b4">OSPF_NSM_EVENT_SCHEDULE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#aa4b337ea9416643e95d0f85b97c3367b">NSM_BadLSReq</a>);
<a name="l01873"></a>01873       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;LSA[%s] instance exists on Link state request list&quot;</span>,
<a name="l01874"></a>01874             <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a>(lsa));
<a name="l01875"></a>01875 
<a name="l01876"></a>01876       <span class="comment">/* Clean list of LSAs. */</span>
<a name="l01877"></a>01877           <a class="code" href="ospf__packet_8c.html#af2d9c22ba37505b8c83de0ca81136dd0">ospf_upd_list_clean</a> (lsas);
<a name="l01878"></a>01878       <span class="comment">/* this lsa is not on lsas list already. */</span>
<a name="l01879"></a>01879       <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l01880"></a>01880       <span class="keywordflow">return</span>;
<a name="l01881"></a>01881     }
<a name="l01882"></a>01882 
<a name="l01883"></a>01883       <span class="comment">/* If the received LSA is the same instance as the database copy</span>
<a name="l01884"></a>01884 <span class="comment">     (i.e., neither one is more recent) the following two steps</span>
<a name="l01885"></a>01885 <span class="comment">     should be performed: */</span>
<a name="l01886"></a>01886 
<a name="l01887"></a>01887       <span class="keywordflow">if</span> (ret == 0)
<a name="l01888"></a>01888     {
<a name="l01889"></a>01889       <span class="comment">/* If the LSA is listed in the Link state retransmission list</span>
<a name="l01890"></a>01890 <span class="comment">         for the receiving adjacency, the router itself is expecting</span>
<a name="l01891"></a>01891 <span class="comment">         an acknowledgment for this LSA.  The router should treat the</span>
<a name="l01892"></a>01892 <span class="comment">         received LSA as an acknowledgment by removing the LSA from</span>
<a name="l01893"></a>01893 <span class="comment">         the Link state retransmission list.  This is termed an</span>
<a name="l01894"></a>01894 <span class="comment">         &quot;implied acknowledgment&quot;. */</span>
<a name="l01895"></a>01895 
<a name="l01896"></a>01896       ls_ret = <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa);
<a name="l01897"></a>01897 
<a name="l01898"></a>01898       <span class="keywordflow">if</span> (ls_ret != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01899"></a>01899         {
<a name="l01900"></a>01900           <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (nbr, ls_ret);
<a name="l01901"></a>01901 
<a name="l01902"></a>01902           <span class="comment">/* Delayed acknowledgment sent if advertisement received</span>
<a name="l01903"></a>01903 <span class="comment">         from Designated Router, otherwise do nothing. */</span>
<a name="l01904"></a>01904           <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)
<a name="l01905"></a>01905         <span class="keywordflow">if</span> (<a class="code" href="ospf__neighbor_8h.html#ad422e372f51656c4649d96641b24f6e0">NBR_IS_DR</a> (nbr))
<a name="l01906"></a>01906           <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa));
<a name="l01907"></a>01907 
<a name="l01908"></a>01908               <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 5);
<a name="l01909"></a>01909         }
<a name="l01910"></a>01910       <span class="keywordflow">else</span>
<a name="l01911"></a>01911         <span class="comment">/* Acknowledge the receipt of the LSA by sending a</span>
<a name="l01912"></a>01912 <span class="comment">           Link State Acknowledgment packet back out the receiving</span>
<a name="l01913"></a>01913 <span class="comment">           interface. */</span>
<a name="l01914"></a>01914         {
<a name="l01915"></a>01915           <a class="code" href="ospf__packet_8c.html#a0526da5e78520753054e11e7520f5c99">ospf_ls_ack_send</a> (nbr, lsa);
<a name="l01916"></a>01916           <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 6);
<a name="l01917"></a>01917         }
<a name="l01918"></a>01918     }
<a name="l01919"></a>01919 
<a name="l01920"></a>01920       <span class="comment">/* The database copy is more recent.  If the database copy</span>
<a name="l01921"></a>01921 <span class="comment">     has LS age equal to MaxAge and LS sequence number equal to</span>
<a name="l01922"></a>01922 <span class="comment">     MaxSequenceNumber, simply discard the received LSA without</span>
<a name="l01923"></a>01923 <span class="comment">     acknowledging it. (In this case, the LSA&#39;s LS sequence number is</span>
<a name="l01924"></a>01924 <span class="comment">     wrapping, and the MaxSequenceNumber LSA must be completely</span>
<a name="l01925"></a>01925 <span class="comment">     flushed before any new LSA instance can be introduced). */</span>
<a name="l01926"></a>01926 
<a name="l01927"></a>01927       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret &gt; 0)  <span class="comment">/* Database copy is more recent */</span>
<a name="l01928"></a>01928     { 
<a name="l01929"></a>01929       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (current) &amp;&amp;
<a name="l01930"></a>01930           current-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> == htonl (<a class="code" href="ospfd_8h.html#aac7261415d362e8c1ee96d13ddfe25de">OSPF_MAX_SEQUENCE_NUMBER</a>))
<a name="l01931"></a>01931         {
<a name="l01932"></a>01932           <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 7);
<a name="l01933"></a>01933         }
<a name="l01934"></a>01934       <span class="comment">/* Otherwise, as long as the database copy has not been sent in a</span>
<a name="l01935"></a>01935 <span class="comment">         Link State Update within the last MinLSArrival seconds, send the</span>
<a name="l01936"></a>01936 <span class="comment">         database copy back to the sending neighbor, encapsulated within</span>
<a name="l01937"></a>01937 <span class="comment">         a Link State Update Packet. The Link State Update Packet should</span>
<a name="l01938"></a>01938 <span class="comment">         be sent directly to the neighbor. In so doing, do not put the</span>
<a name="l01939"></a>01939 <span class="comment">         database copy of the LSA on the neighbor&#39;s link state</span>
<a name="l01940"></a>01940 <span class="comment">         retransmission list, and do not acknowledge the received (less</span>
<a name="l01941"></a>01941 <span class="comment">         recent) LSA instance. */</span>
<a name="l01942"></a>01942       <span class="keywordflow">else</span>
<a name="l01943"></a>01943         {
<a name="l01944"></a>01944           <span class="keyword">struct </span>timeval now;
<a name="l01945"></a>01945           
<a name="l01946"></a>01946           <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;now);
<a name="l01947"></a>01947           
<a name="l01948"></a>01948           <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (now, current-&gt;<a class="code" href="structospf__lsa.html#a19040aaf3ab0f6fdfa3924374afea9b9">tv_orig</a>), 
<a name="l01949"></a>01949               <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (<a class="code" href="ospfd_8h.html#ae567e64e4e08a38164953b22f9603bfc">OSPF_MIN_LS_ARRIVAL</a>)) &gt; 0)
<a name="l01950"></a>01950         <span class="comment">/* Trap NSSA type later.*/</span>
<a name="l01951"></a>01951         <a class="code" href="ospf__packet_8c.html#a725d9c1aa0cf357d4411f9bcbad7d441">ospf_ls_upd_send_lsa</a> (nbr, current, <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>);
<a name="l01952"></a>01952           <a class="code" href="ospf__packet_8c.html#a5e3f11e18844fd057bd3fab5f00ad336">DISCARD_LSA</a> (lsa, 8);
<a name="l01953"></a>01953         }
<a name="l01954"></a>01954     }
<a name="l01955"></a>01955     }
<a name="l01956"></a>01956 <span class="preprocessor">#undef DISCARD_LSA</span>
<a name="l01957"></a>01957 <span class="preprocessor"></span>
<a name="l01958"></a>01958   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (lsas) == 0);
<a name="l01959"></a>01959   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (lsas);
<a name="l01960"></a>01960 }
<a name="l01961"></a>01961 
<a name="l01962"></a>01962 <span class="comment">/* OSPF Link State Acknowledgment message read -- RFC2328 Section 13.7. */</span>
<a name="l01963"></a>01963 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01964"></a><a class="code" href="ospf__packet_8c.html#a09c6622500acd269049149c060ffda75">01964</a> <a class="code" href="ospf__packet_8c.html#a09c6622500acd269049149c060ffda75">ospf_ls_ack</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh,
<a name="l01965"></a>01965          <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, u_int16_t size)
<a name="l01966"></a>01966 {
<a name="l01967"></a>01967   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l01968"></a>01968   
<a name="l01969"></a>01969   <span class="comment">/* increment statistics. */</span>
<a name="l01970"></a>01970   oi-&gt;<a class="code" href="structospf__interface.html#a8db5b6e05ec13d201f72cb9018c187f7">ls_ack_in</a>++;
<a name="l01971"></a>01971 
<a name="l01972"></a>01972   nbr = <a class="code" href="ospf__neighbor_8c.html#aaae24ad2ba48314e7007f27c61ef98e0">ospf_nbr_lookup</a> (oi, iph, ospfh);
<a name="l01973"></a>01973   <span class="keywordflow">if</span> (nbr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01974"></a>01974     {
<a name="l01975"></a>01975       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Acknowledgment: Unknown Neighbor %s.&quot;</span>,
<a name="l01976"></a>01976          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l01977"></a>01977       <span class="keywordflow">return</span>;
<a name="l01978"></a>01978     }
<a name="l01979"></a>01979 
<a name="l01980"></a>01980   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &lt; <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l01981"></a>01981     {
<a name="l01982"></a>01982       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Link State Acknowledgment: &quot;</span>
<a name="l01983"></a>01983              <span class="stringliteral">&quot;Neighbor[%s] state %s is less than Exchange&quot;</span>,
<a name="l01984"></a>01984          inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>),
<a name="l01985"></a>01985          <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a>(<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l01986"></a>01986       <span class="keywordflow">return</span>;
<a name="l01987"></a>01987     }
<a name="l01988"></a>01988   
<a name="l01989"></a>01989   <span class="keywordflow">while</span> (size &gt;= <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>)
<a name="l01990"></a>01990     {
<a name="l01991"></a>01991       <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa, *lsr;
<a name="l01992"></a>01992 
<a name="l01993"></a>01993       lsa = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
<a name="l01994"></a>01994       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l01995"></a>01995 
<a name="l01996"></a>01996       <span class="comment">/* lsah = (struct lsa_header *) STREAM_PNT (s); */</span>
<a name="l01997"></a>01997       size -= <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>;
<a name="l01998"></a>01998       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l01999"></a>01999 
<a name="l02000"></a>02000       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &lt; <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a> || lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> &gt;= <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>)
<a name="l02001"></a>02001     {
<a name="l02002"></a>02002       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02003"></a>02003       <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l02004"></a>02004       <span class="keywordflow">continue</span>;
<a name="l02005"></a>02005     }
<a name="l02006"></a>02006 
<a name="l02007"></a>02007       lsr = <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa);
<a name="l02008"></a>02008 
<a name="l02009"></a>02009       <span class="keywordflow">if</span> (lsr != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; lsr-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> == lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>)
<a name="l02010"></a>02010         {
<a name="l02011"></a>02011 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l02012"></a>02012 <span class="preprocessor"></span>          <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsr-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>))
<a name="l02013"></a>02013             <a class="code" href="ospf__opaque_8h.html#a2df97bff3c2de212258a4767dd778152">ospf_opaque_ls_ack_received</a> (nbr, lsr);
<a name="l02014"></a>02014 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l02015"></a>02015 
<a name="l02016"></a>02016           <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (nbr, lsr);
<a name="l02017"></a>02017         }
<a name="l02018"></a>02018 
<a name="l02019"></a>02019       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02020"></a>02020       <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa);
<a name="l02021"></a>02021     }
<a name="l02022"></a>02022 
<a name="l02023"></a>02023   <span class="keywordflow">return</span>;
<a name="l02024"></a>02024 }
<a name="l02025"></a>02025 
<a name="l02026"></a>02026 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l02027"></a><a class="code" href="ospf__packet_8c.html#a08b17df5a285620f9ceb7bebbec51067">02027</a> <a class="code" href="ospf__packet_8c.html#a08b17df5a285620f9ceb7bebbec51067">ospf_recv_packet</a> (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> **ifp, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *ibuf)
<a name="l02028"></a>02028 {
<a name="l02029"></a>02029   <span class="keywordtype">int</span> ret;
<a name="l02030"></a>02030   <span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph;
<a name="l02031"></a>02031   u_int16_t ip_len;
<a name="l02032"></a>02032   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex = 0;
<a name="l02033"></a>02033   <span class="keyword">struct </span>iovec iov;
<a name="l02034"></a>02034   <span class="comment">/* Header and data both require alignment. */</span>
<a name="l02035"></a>02035   <span class="keywordtype">char</span> buff [<a class="code" href="zebra_8h.html#a0769bfc51cb1ffd3fe7f79fe3bf527f3">CMSG_SPACE</a>(<a class="code" href="sockopt_8h.html#a5fe60238cff328a2bce5bc5a627536f0">SOPT_SIZE_CMSG_IFINDEX_IPV4</a>())];
<a name="l02036"></a>02036   <span class="keyword">struct </span>msghdr msgh;
<a name="l02037"></a>02037 
<a name="l02038"></a>02038   memset (&amp;msgh, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> msghdr));
<a name="l02039"></a>02039   msgh.msg_iov = &amp;iov;
<a name="l02040"></a>02040   msgh.msg_iovlen = 1;
<a name="l02041"></a>02041   msgh.msg_control = (caddr_t) buff;
<a name="l02042"></a>02042   msgh.msg_controllen = <span class="keyword">sizeof</span> (buff);
<a name="l02043"></a>02043   
<a name="l02044"></a>02044   ret = <a class="code" href="stream_8c.html#a616ee826811cf60e011408b60e3a72a8">stream_recvmsg</a> (ibuf, fd, &amp;msgh, 0, <a class="code" href="ospf__packet_8h.html#a931e4cc5c8888b6cf1d91636fd4340a6">OSPF_MAX_PACKET_SIZE</a>+1);
<a name="l02045"></a>02045   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02046"></a>02046     {
<a name="l02047"></a>02047       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;stream_recvmsg failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l02048"></a>02048       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02049"></a>02049     }
<a name="l02050"></a>02050   <span class="keywordflow">if</span> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)ret &lt; <span class="keyword">sizeof</span>(iph)) <span class="comment">/* ret must be &gt; 0 now */</span>
<a name="l02051"></a>02051     {
<a name="l02052"></a>02052       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;ospf_recv_packet: discarding runt packet of length %d &quot;</span>
<a name="l02053"></a>02053         <span class="stringliteral">&quot;(ip header size is %u)&quot;</span>,
<a name="l02054"></a>02054         ret, (u_int)<span class="keyword">sizeof</span>(iph));
<a name="l02055"></a>02055       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02056"></a>02056     }
<a name="l02057"></a>02057   
<a name="l02058"></a>02058   <span class="comment">/* Note that there should not be alignment problems with this assignment</span>
<a name="l02059"></a>02059 <span class="comment">     because this is at the beginning of the stream data buffer. */</span>
<a name="l02060"></a>02060   iph = (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a>(ibuf);
<a name="l02061"></a>02061   <a class="code" href="sockopt_8c.html#a8c237ab61f5040984e3ea04f9d9809b5">sockopt_iphdrincl_swab_systoh</a> (iph);
<a name="l02062"></a>02062   
<a name="l02063"></a>02063   ip_len = iph-&gt;ip_len;
<a name="l02064"></a>02064   
<a name="l02065"></a>02065 <span class="preprocessor">#if !defined(GNU_LINUX) &amp;&amp; (OpenBSD &lt; 200311)</span>
<a name="l02066"></a>02066 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l02067"></a>02067 <span class="comment">   * Kernel network code touches incoming IP header parameters,</span>
<a name="l02068"></a>02068 <span class="comment">   * before protocol specific processing.</span>
<a name="l02069"></a>02069 <span class="comment">   *</span>
<a name="l02070"></a>02070 <span class="comment">   *   1) Convert byteorder to host representation.</span>
<a name="l02071"></a>02071 <span class="comment">   *      --&gt; ip_len, ip_id, ip_off</span>
<a name="l02072"></a>02072 <span class="comment">   *</span>
<a name="l02073"></a>02073 <span class="comment">   *   2) Adjust ip_len to strip IP header size!</span>
<a name="l02074"></a>02074 <span class="comment">   *      --&gt; If user process receives entire IP packet via RAW</span>
<a name="l02075"></a>02075 <span class="comment">   *          socket, it must consider adding IP header size to</span>
<a name="l02076"></a>02076 <span class="comment">   *          the &quot;ip_len&quot; field of &quot;ip&quot; structure.</span>
<a name="l02077"></a>02077 <span class="comment">   *</span>
<a name="l02078"></a>02078 <span class="comment">   * For more details, see &lt;netinet/ip_input.c&gt;.</span>
<a name="l02079"></a>02079 <span class="comment">   */</span>
<a name="l02080"></a>02080   ip_len = ip_len + (iph-&gt;ip_hl &lt;&lt; 2);
<a name="l02081"></a>02081 <span class="preprocessor">#endif</span>
<a name="l02082"></a>02082 <span class="preprocessor"></span>  
<a name="l02083"></a>02083   ifindex = <a class="code" href="sockopt_8c.html#aeb37d822f7c9d56e9bcffc7b33b0ced0">getsockopt_ifindex</a> (AF_INET, &amp;msgh);
<a name="l02084"></a>02084   
<a name="l02085"></a>02085   *ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifindex);
<a name="l02086"></a>02086 
<a name="l02087"></a>02087   <span class="keywordflow">if</span> (ret != ip_len)
<a name="l02088"></a>02088     {
<a name="l02089"></a>02089       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_recv_packet read length mismatch: ip_len is %d, &quot;</span>
<a name="l02090"></a>02090              <span class="stringliteral">&quot;but recvmsg returned %d&quot;</span>, ip_len, ret);
<a name="l02091"></a>02091       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02092"></a>02092     }
<a name="l02093"></a>02093   
<a name="l02094"></a>02094   <span class="keywordflow">return</span> ibuf;
<a name="l02095"></a>02095 }
<a name="l02096"></a>02096 
<a name="l02097"></a>02097 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l02098"></a><a class="code" href="ospf__packet_8c.html#a4249d88bd6e928079bc596afedc8b4bb">02098</a> <a class="code" href="ospf__packet_8c.html#a4249d88bd6e928079bc596afedc8b4bb">ospf_associate_packet_vl</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, 
<a name="l02099"></a>02099               <span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02100"></a>02100 {
<a name="l02101"></a>02101   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *rcv_oi;
<a name="l02102"></a>02102   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l02103"></a>02103   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *vl_area;
<a name="l02104"></a>02104   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02105"></a>02105 
<a name="l02106"></a>02106   <span class="keywordflow">if</span> (IN_MULTICAST (ntohl (iph-&gt;ip_dst.s_addr)) ||
<a name="l02107"></a>02107       !<a class="code" href="ospfd_8h.html#a62518cec4ea9ee2a4db410d3c42b23f7">OSPF_IS_AREA_BACKBONE</a> (ospfh))
<a name="l02108"></a>02108     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02109"></a>02109 
<a name="l02110"></a>02110   <span class="comment">/* look for local OSPF interface matching the destination</span>
<a name="l02111"></a>02111 <span class="comment">   * to determine Area ID. We presume therefore the destination address</span>
<a name="l02112"></a>02112 <span class="comment">   * is unique, or at least (for &quot;unnumbered&quot; links), not used in other </span>
<a name="l02113"></a>02113 <span class="comment">   * areas</span>
<a name="l02114"></a>02114 <span class="comment">   */</span>
<a name="l02115"></a>02115   <span class="keywordflow">if</span> ((rcv_oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
<a name="l02116"></a>02116                                               iph-&gt;ip_dst)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02117"></a>02117     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02118"></a>02118 
<a name="l02119"></a>02119   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
<a name="l02120"></a>02120     {
<a name="l02121"></a>02121       vl_area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>);
<a name="l02122"></a>02122       <span class="keywordflow">if</span> (!vl_area)
<a name="l02123"></a>02123     <span class="keywordflow">continue</span>;
<a name="l02124"></a>02124       
<a name="l02125"></a>02125       <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a440c436525fb2c5fb08d1e6d2b4b0875">OSPF_AREA_SAME</a> (&amp;vl_area, &amp;rcv_oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>) &amp;&amp;
<a name="l02126"></a>02126       <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>, &amp;ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>))
<a name="l02127"></a>02127     {
<a name="l02128"></a>02128       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02129"></a>02129         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;associating packet with %s&quot;</span>,
<a name="l02130"></a>02130                <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>));
<a name="l02131"></a>02131       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP))
<a name="l02132"></a>02132         {
<a name="l02133"></a>02133           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02134"></a>02134         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;This VL is not up yet, sorry&quot;</span>);
<a name="l02135"></a>02135           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02136"></a>02136         }
<a name="l02137"></a>02137       
<a name="l02138"></a>02138       <span class="keywordflow">return</span> vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;
<a name="l02139"></a>02139     }
<a name="l02140"></a>02140     }
<a name="l02141"></a>02141 
<a name="l02142"></a>02142   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02143"></a>02143     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;couldn&#39;t find any VL to associate the packet with&quot;</span>);
<a name="l02144"></a>02144   
<a name="l02145"></a>02145   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02146"></a>02146 }
<a name="l02147"></a>02147 
<a name="l02148"></a>02148 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span>
<a name="l02149"></a><a class="code" href="ospf__packet_8c.html#a83df01a727144ce55f827f23da90de4e">02149</a> <a class="code" href="ospf__packet_8c.html#a83df01a727144ce55f827f23da90de4e">ospf_check_area_id</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02150"></a>02150 {
<a name="l02151"></a>02151   <span class="comment">/* Check match the Area ID of the receiving interface. */</span>
<a name="l02152"></a>02152   <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a440c436525fb2c5fb08d1e6d2b4b0875">OSPF_AREA_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, &amp;ospfh))
<a name="l02153"></a>02153     <span class="keywordflow">return</span> 1;
<a name="l02154"></a>02154 
<a name="l02155"></a>02155   <span class="keywordflow">return</span> 0;
<a name="l02156"></a>02156 }
<a name="l02157"></a>02157 
<a name="l02158"></a>02158 <span class="comment">/* Unbound socket will accept any Raw IP packets if proto is matched.</span>
<a name="l02159"></a>02159 <span class="comment">   To prevent it, compare src IP address and i/f address with masking</span>
<a name="l02160"></a>02160 <span class="comment">   i/f network mask. */</span>
<a name="l02161"></a>02161 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02162"></a><a class="code" href="ospf__packet_8c.html#ac919488a6ad9feed7bf19db217482fa0">02162</a> <a class="code" href="ospf__packet_8c.html#ac919488a6ad9feed7bf19db217482fa0">ospf_check_network_mask</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> in_addr ip_src)
<a name="l02163"></a>02163 {
<a name="l02164"></a>02164   <span class="keyword">struct </span>in_addr mask, me, him;
<a name="l02165"></a>02165 
<a name="l02166"></a>02166   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a> ||
<a name="l02167"></a>02167       oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l02168"></a>02168     <span class="keywordflow">return</span> 1;
<a name="l02169"></a>02169 
<a name="l02170"></a>02170   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
<a name="l02171"></a>02171 
<a name="l02172"></a>02172   me.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr &amp; mask.s_addr;
<a name="l02173"></a>02173   him.s_addr = ip_src.s_addr &amp; mask.s_addr;
<a name="l02174"></a>02174 
<a name="l02175"></a>02175  <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;me, &amp;him))
<a name="l02176"></a>02176    <span class="keywordflow">return</span> 1;
<a name="l02177"></a>02177 
<a name="l02178"></a>02178  <span class="keywordflow">return</span> 0;
<a name="l02179"></a>02179 }
<a name="l02180"></a>02180 
<a name="l02181"></a>02181 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02182"></a><a class="code" href="ospf__packet_8c.html#af96c6365b1096cee2d2a08ecc1ffd5d3">02182</a> <a class="code" href="ospf__packet_8c.html#af96c6365b1096cee2d2a08ecc1ffd5d3">ospf_check_auth</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *ibuf,
<a name="l02183"></a>02183          <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02184"></a>02184 {
<a name="l02185"></a>02185   <span class="keywordtype">int</span> ret = 0;
<a name="l02186"></a>02186   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l02187"></a>02187 
<a name="l02188"></a>02188   <span class="keywordflow">switch</span> (ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>))
<a name="l02189"></a>02189     {
<a name="l02190"></a>02190     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a7fed6737ae4236d1f4ac7c977844b128">OSPF_AUTH_NULL</a>:
<a name="l02191"></a>02191       ret = 1;
<a name="l02192"></a>02192       <span class="keywordflow">break</span>;
<a name="l02193"></a>02193     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a4b962c0c6d99c31cb646010cb0af57c0">OSPF_AUTH_SIMPLE</a>:
<a name="l02194"></a>02194       <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_simple), ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a551388adacd968cea14c3999755c0a42">auth_data</a>, <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>))
<a name="l02195"></a>02195     ret = 1;
<a name="l02196"></a>02196       <span class="keywordflow">else</span>
<a name="l02197"></a>02197     ret = 0;
<a name="l02198"></a>02198       <span class="keywordflow">break</span>;
<a name="l02199"></a>02199     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>:
<a name="l02200"></a>02200       <span class="keywordflow">if</span> ((ck = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a50e32cbff5b5b7f2494387516fd818fc">listtail</a>(<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi,auth_crypt)))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02201"></a>02201     {
<a name="l02202"></a>02202       ret = 0;
<a name="l02203"></a>02203       <span class="keywordflow">break</span>;
<a name="l02204"></a>02204     }
<a name="l02205"></a>02205       
<a name="l02206"></a>02206       <span class="comment">/* This is very basic, the digest processing is elsewhere */</span>
<a name="l02207"></a>02207       <span class="keywordflow">if</span> (ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.auth_data_len == <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a> &amp;&amp; 
<a name="l02208"></a>02208           ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.key_id == ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a> &amp;&amp;
<a name="l02209"></a>02209           ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>) + <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a> &lt;= <a class="code" href="stream_8c.html#a4b32bba6c2427f336373189365afef01">stream_get_size</a> (ibuf))
<a name="l02210"></a>02210         ret = 1;
<a name="l02211"></a>02211       <span class="keywordflow">else</span>
<a name="l02212"></a>02212         ret = 0;
<a name="l02213"></a>02213       <span class="keywordflow">break</span>;
<a name="l02214"></a>02214     <span class="keywordflow">default</span>:
<a name="l02215"></a>02215       ret = 0;
<a name="l02216"></a>02216       <span class="keywordflow">break</span>;
<a name="l02217"></a>02217     }
<a name="l02218"></a>02218 
<a name="l02219"></a>02219   <span class="keywordflow">return</span> ret;
<a name="l02220"></a>02220 }
<a name="l02221"></a>02221 
<a name="l02222"></a>02222 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02223"></a><a class="code" href="ospf__packet_8c.html#aaa1d2708bc68c0c6d6dd310e0f74c167">02223</a> <a class="code" href="ospf__packet_8c.html#aaa1d2708bc68c0c6d6dd310e0f74c167">ospf_check_sum</a> (<span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02224"></a>02224 {
<a name="l02225"></a>02225   u_int32_t ret;
<a name="l02226"></a>02226   u_int16_t sum;
<a name="l02227"></a>02227 
<a name="l02228"></a>02228   <span class="comment">/* clear auth_data for checksum. */</span>
<a name="l02229"></a>02229   memset (ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a551388adacd968cea14c3999755c0a42">auth_data</a>, 0, <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>);
<a name="l02230"></a>02230 
<a name="l02231"></a>02231   <span class="comment">/* keep checksum and clear. */</span>
<a name="l02232"></a>02232   sum = ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a>;
<a name="l02233"></a>02233   memset (&amp;ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a>, 0, sizeof (u_int16_t));
<a name="l02234"></a>02234 
<a name="l02235"></a>02235   <span class="comment">/* calculate checksum. */</span>
<a name="l02236"></a>02236   ret = <a class="code" href="checksum_8c.html#afd7d8e31fdd7d500d89ee477149e95fd">in_cksum</a> (ospfh, ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>));
<a name="l02237"></a>02237 
<a name="l02238"></a>02238   <span class="keywordflow">if</span> (ret != sum)
<a name="l02239"></a>02239     {
<a name="l02240"></a>02240       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;ospf_check_sum(): checksum mismatch, my %X, his %X&quot;</span>,
<a name="l02241"></a>02241          ret, sum);
<a name="l02242"></a>02242       <span class="keywordflow">return</span> 0;
<a name="l02243"></a>02243     }
<a name="l02244"></a>02244 
<a name="l02245"></a>02245   <span class="keywordflow">return</span> 1;
<a name="l02246"></a>02246 }
<a name="l02247"></a>02247 
<a name="l02248"></a>02248 <span class="comment">/* OSPF Header verification. */</span>
<a name="l02249"></a>02249 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02250"></a><a class="code" href="ospf__packet_8c.html#afa26be342bd698a0c5463eb6a8c09a8b">02250</a> <a class="code" href="ospf__packet_8c.html#afa26be342bd698a0c5463eb6a8c09a8b">ospf_verify_header</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *ibuf, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l02251"></a>02251             <span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02252"></a>02252 {
<a name="l02253"></a>02253   <span class="comment">/* check version. */</span>
<a name="l02254"></a>02254   <span class="keywordflow">if</span> (ospfh-&gt;<a class="code" href="structospf__header.html#a9c323de9135ca3af7443cd7ab7002c93">version</a> != <a class="code" href="ospfd_8h.html#ade0a29a3c62c5cb42b132c812208ea54">OSPF_VERSION</a>)
<a name="l02255"></a>02255     {
<a name="l02256"></a>02256       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read version number mismatch.&quot;</span>,
<a name="l02257"></a>02257          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02258"></a>02258       <span class="keywordflow">return</span> -1;
<a name="l02259"></a>02259     }
<a name="l02260"></a>02260 
<a name="l02261"></a>02261   <span class="comment">/* Check Area ID. */</span>
<a name="l02262"></a>02262   <span class="keywordflow">if</span> (!<a class="code" href="ospf__packet_8c.html#a83df01a727144ce55f827f23da90de4e">ospf_check_area_id</a> (oi, ospfh))
<a name="l02263"></a>02263     {
<a name="l02264"></a>02264       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read invalid Area ID %s.&quot;</span>,
<a name="l02265"></a>02265          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#abc28c3f03a35afd1da498979dd99bc6d">area_id</a>));
<a name="l02266"></a>02266       <span class="keywordflow">return</span> -1;
<a name="l02267"></a>02267     }
<a name="l02268"></a>02268 
<a name="l02269"></a>02269   <span class="comment">/* Check network mask, Silently discarded. */</span>
<a name="l02270"></a>02270   <span class="keywordflow">if</span> (! <a class="code" href="ospf__packet_8c.html#ac919488a6ad9feed7bf19db217482fa0">ospf_check_network_mask</a> (oi, iph-&gt;ip_src))
<a name="l02271"></a>02271     {
<a name="l02272"></a>02272       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read network address is not same [%s]&quot;</span>,
<a name="l02273"></a>02273          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), inet_ntoa (iph-&gt;ip_src));
<a name="l02274"></a>02274       <span class="keywordflow">return</span> -1;
<a name="l02275"></a>02275     }
<a name="l02276"></a>02276 
<a name="l02277"></a>02277   <span class="comment">/* Check authentication. */</span>
<a name="l02278"></a>02278   <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (oi) != ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>))
<a name="l02279"></a>02279     {
<a name="l02280"></a>02280       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: auth-type mismatch, local %d, rcvd %d&quot;</span>,
<a name="l02281"></a>02281          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), <a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (oi), ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>));
<a name="l02282"></a>02282       <span class="keywordflow">return</span> -1;
<a name="l02283"></a>02283     }
<a name="l02284"></a>02284 
<a name="l02285"></a>02285   <span class="keywordflow">if</span> (! <a class="code" href="ospf__packet_8c.html#af96c6365b1096cee2d2a08ecc1ffd5d3">ospf_check_auth</a> (oi, ibuf, ospfh))
<a name="l02286"></a>02286     {
<a name="l02287"></a>02287       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read authentication failed.&quot;</span>,
<a name="l02288"></a>02288          <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02289"></a>02289       <span class="keywordflow">return</span> -1;
<a name="l02290"></a>02290     }
<a name="l02291"></a>02291 
<a name="l02292"></a>02292   <span class="comment">/* if check sum is invalid, packet is discarded. */</span>
<a name="l02293"></a>02293   <span class="keywordflow">if</span> (ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>) != <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>)
<a name="l02294"></a>02294     {
<a name="l02295"></a>02295       <span class="keywordflow">if</span> (! <a class="code" href="ospf__packet_8c.html#aaa1d2708bc68c0c6d6dd310e0f74c167">ospf_check_sum</a> (ospfh))
<a name="l02296"></a>02296     {
<a name="l02297"></a>02297       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read packet checksum error %s&quot;</span>,
<a name="l02298"></a>02298              <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>));
<a name="l02299"></a>02299       <span class="keywordflow">return</span> -1;
<a name="l02300"></a>02300     }
<a name="l02301"></a>02301     }
<a name="l02302"></a>02302   <span class="keywordflow">else</span>
<a name="l02303"></a>02303     {
<a name="l02304"></a>02304       <span class="keywordflow">if</span> (ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a> != 0)
<a name="l02305"></a>02305     <span class="keywordflow">return</span> -1;
<a name="l02306"></a>02306       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#a60937d0517eb80d5e585ab9843214c12">ospf_check_md5_digest</a> (oi, ibuf, ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>)) == 0)
<a name="l02307"></a>02307     {
<a name="l02308"></a>02308       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface %s: ospf_read md5 authentication failed.&quot;</span>,
<a name="l02309"></a>02309              <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02310"></a>02310       <span class="keywordflow">return</span> -1;
<a name="l02311"></a>02311     }
<a name="l02312"></a>02312     }
<a name="l02313"></a>02313 
<a name="l02314"></a>02314   <span class="keywordflow">return</span> 0;
<a name="l02315"></a>02315 }
<a name="l02316"></a>02316 
<a name="l02317"></a>02317 <span class="comment">/* Starting point of packet process function. */</span>
<a name="l02318"></a>02318 <span class="keywordtype">int</span>
<a name="l02319"></a><a class="code" href="ospf__packet_8h.html#a3bbbd5584ef93691fbd0b1e22e8a08ae">02319</a> <a class="code" href="ospf__packet_8c.html#a6327e5b8ab0bf00617153a9e6225ec2b">ospf_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l02320"></a>02320 {
<a name="l02321"></a>02321   <span class="keywordtype">int</span> ret;
<a name="l02322"></a>02322   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *ibuf;
<a name="l02323"></a>02323   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
<a name="l02324"></a>02324   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02325"></a>02325   <span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph;
<a name="l02326"></a>02326   <span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *ospfh;
<a name="l02327"></a>02327   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02328"></a>02328   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l02329"></a>02329 
<a name="l02330"></a>02330   <span class="comment">/* first of all get interface pointer. */</span>
<a name="l02331"></a>02331   ospf = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l02332"></a>02332 
<a name="l02333"></a>02333   <span class="comment">/* prepare for next packet. */</span>
<a name="l02334"></a>02334   ospf-&gt;<a class="code" href="structospf.html#ace995e4406c0eab0fcbe9353107e06f6">t_read</a> = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#a6327e5b8ab0bf00617153a9e6225ec2b">ospf_read</a>, ospf, ospf-&gt;<a class="code" href="structospf.html#a13100b27c547a3ba3572908aa24259c5">fd</a>);
<a name="l02335"></a>02335 
<a name="l02336"></a>02336   <span class="comment">/* read OSPF packet. */</span>
<a name="l02337"></a>02337   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a>(ospf-&gt;<a class="code" href="structospf.html#a43a02c52efc45fdd5a775688aed3d66b">ibuf</a>);
<a name="l02338"></a>02338   <span class="keywordflow">if</span> (!(ibuf = <a class="code" href="ospf__packet_8c.html#a08b17df5a285620f9ceb7bebbec51067">ospf_recv_packet</a> (ospf-&gt;<a class="code" href="structospf.html#a13100b27c547a3ba3572908aa24259c5">fd</a>, &amp;ifp, ospf-&gt;<a class="code" href="structospf.html#a43a02c52efc45fdd5a775688aed3d66b">ibuf</a>)))
<a name="l02339"></a>02339     <span class="keywordflow">return</span> -1;
<a name="l02340"></a>02340   
<a name="l02341"></a>02341   <span class="comment">/* Note that there should not be alignment problems with this assignment</span>
<a name="l02342"></a>02342 <span class="comment">     because this is at the beginning of the stream data buffer. */</span>
<a name="l02343"></a>02343   iph = (<span class="keyword">struct </span><a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (ibuf);
<a name="l02344"></a>02344   <span class="comment">/* Note that sockopt_iphdrincl_swab_systoh was called in ospf_recv_packet. */</span>
<a name="l02345"></a>02345 
<a name="l02346"></a>02346   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02347"></a>02347     <span class="comment">/* Handle cases where the platform does not support retrieving the ifindex,</span>
<a name="l02348"></a>02348 <span class="comment">       and also platforms (such as Solaris 8) that claim to support ifindex</span>
<a name="l02349"></a>02349 <span class="comment">       retrieval but do not. */</span>
<a name="l02350"></a>02350     ifp = <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (iph-&gt;ip_src);
<a name="l02351"></a>02351   
<a name="l02352"></a>02352   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02353"></a>02353     <span class="keywordflow">return</span> 0;
<a name="l02354"></a>02354 
<a name="l02355"></a>02355   <span class="comment">/* IP Header dump. */</span>
<a name="l02356"></a>02356     <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a>(0, <a class="code" href="bgp__debug_8h.html#a5c3976553336476b6fea4108b844ecf2">RECV</a>))
<a name="l02357"></a>02357         <a class="code" href="ospf__dump_8c.html#adedd77798f087b36b611a6a13aa6e9a8">ospf_ip_header_dump</a> (iph);
<a name="l02358"></a>02358 
<a name="l02359"></a>02359   <span class="comment">/* Self-originated packet should be discarded silently. */</span>
<a name="l02360"></a>02360   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, iph-&gt;ip_src))
<a name="l02361"></a>02361     {
<a name="l02362"></a>02362       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (0, <a class="code" href="bgp__debug_8h.html#a5c3976553336476b6fea4108b844ecf2">RECV</a>))
<a name="l02363"></a>02363         {
<a name="l02364"></a>02364           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_read[%s]: Dropping self-originated packet&quot;</span>,
<a name="l02365"></a>02365                      inet_ntoa (iph-&gt;ip_src));
<a name="l02366"></a>02366         }
<a name="l02367"></a>02367       <span class="keywordflow">return</span> 0;
<a name="l02368"></a>02368     }
<a name="l02369"></a>02369 
<a name="l02370"></a>02370   <span class="comment">/* Adjust size to message length. */</span>
<a name="l02371"></a>02371   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (ibuf, iph-&gt;ip_hl * 4);
<a name="l02372"></a>02372   
<a name="l02373"></a>02373   <span class="comment">/* Get ospf packet header. */</span>
<a name="l02374"></a>02374   ospfh = (<span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (ibuf);
<a name="l02375"></a>02375 
<a name="l02376"></a>02376   <span class="comment">/* associate packet with ospf interface */</span>
<a name="l02377"></a>02377   oi = <a class="code" href="ospf__interface_8c.html#a4e3a74bf97746313364b81e1a272e028">ospf_if_lookup_recv_if</a> (ospf, iph-&gt;ip_src, ifp);
<a name="l02378"></a>02378 
<a name="l02379"></a>02379   <span class="comment">/* If incoming interface is passive one, ignore it. */</span>
<a name="l02380"></a>02380   <span class="keywordflow">if</span> (oi &amp;&amp; <a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a> (oi) == <a class="code" href="ospf__interface_8h.html#a68e4f61453d94a303183c773f0d02a27">OSPF_IF_PASSIVE</a>)
<a name="l02381"></a>02381     {
<a name="l02382"></a>02382       <span class="keywordtype">char</span> buf[3][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l02383"></a>02383 
<a name="l02384"></a>02384       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02385"></a>02385     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ignoring packet from router %s sent to %s, &quot;</span>
<a name="l02386"></a>02386             <span class="stringliteral">&quot;received on a passive interface, %s&quot;</span>,
<a name="l02387"></a>02387             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l02388"></a>02388             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;iph-&gt;ip_dst, buf[1], <span class="keyword">sizeof</span>(buf[1])),
<a name="l02389"></a>02389             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
<a name="l02390"></a>02390                   buf[2], <span class="keyword">sizeof</span>(buf[2])));
<a name="l02391"></a>02391 
<a name="l02392"></a>02392       <span class="keywordflow">if</span> (iph-&gt;ip_dst.s_addr == htonl(<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>))
<a name="l02393"></a>02393     {
<a name="l02394"></a>02394       <span class="comment">/* Try to fix multicast membership.</span>
<a name="l02395"></a>02395 <span class="comment">       * Some OS:es may have problems in this area,</span>
<a name="l02396"></a>02396 <span class="comment">       * make sure it is removed.</span>
<a name="l02397"></a>02397 <span class="comment">       */</span>
<a name="l02398"></a>02398       <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
<a name="l02399"></a>02399       <a class="code" href="ospf__interface_8c.html#a4d1ed1c93fa9a91e2461470344b8a977">ospf_if_set_multicast</a>(oi);
<a name="l02400"></a>02400     }
<a name="l02401"></a>02401       <span class="keywordflow">return</span> 0;
<a name="l02402"></a>02402   }
<a name="l02403"></a>02403 
<a name="l02404"></a>02404 
<a name="l02405"></a>02405   <span class="comment">/* if no local ospf_interface, </span>
<a name="l02406"></a>02406 <span class="comment">   * or header area is backbone but ospf_interface is not</span>
<a name="l02407"></a>02407 <span class="comment">   * check for VLINK interface</span>
<a name="l02408"></a>02408 <span class="comment">   */</span>
<a name="l02409"></a>02409   <span class="keywordflow">if</span> ( (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ||
<a name="l02410"></a>02410       (<a class="code" href="ospfd_8h.html#a3c9df8914219b5ad5aa165ecc3428ae0">OSPF_IS_AREA_ID_BACKBONE</a>(ospfh-&gt;<a class="code" href="structospf__header.html#abc28c3f03a35afd1da498979dd99bc6d">area_id</a>)
<a name="l02411"></a>02411       &amp;&amp; !<a class="code" href="ospfd_8h.html#a3c9df8914219b5ad5aa165ecc3428ae0">OSPF_IS_AREA_ID_BACKBONE</a>(oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
<a name="l02412"></a>02412      )
<a name="l02413"></a>02413     {
<a name="l02414"></a>02414       <span class="keywordflow">if</span> ((oi = <a class="code" href="ospf__packet_8c.html#a4249d88bd6e928079bc596afedc8b4bb">ospf_associate_packet_vl</a> (ospf, ifp, iph, ospfh)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02415"></a>02415         {
<a name="l02416"></a>02416           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02417"></a>02417             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Packet from [%s] received on link %s&quot;</span>
<a name="l02418"></a>02418                         <span class="stringliteral">&quot; but no ospf_interface&quot;</span>,
<a name="l02419"></a>02419                         inet_ntoa (iph-&gt;ip_src), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l02420"></a>02420           <span class="keywordflow">return</span> 0;
<a name="l02421"></a>02421         }
<a name="l02422"></a>02422     }
<a name="l02423"></a>02423 
<a name="l02424"></a>02424   <span class="comment">/* else it must be a local ospf interface, check it was received on </span>
<a name="l02425"></a>02425 <span class="comment">   * correct link </span>
<a name="l02426"></a>02426 <span class="comment">   */</span>
<a name="l02427"></a>02427   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> != ifp)
<a name="l02428"></a>02428     {
<a name="l02429"></a>02429       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02430"></a>02430         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Packet from [%s] received on wrong link %s&quot;</span>,
<a name="l02431"></a>02431                    inet_ntoa (iph-&gt;ip_src), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>); 
<a name="l02432"></a>02432       <span class="keywordflow">return</span> 0;
<a name="l02433"></a>02433     }
<a name="l02434"></a>02434   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>)
<a name="l02435"></a>02435     {
<a name="l02436"></a>02436       <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l02437"></a>02437       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Ignoring packet from %s to %s received on interface that is &quot;</span>
<a name="l02438"></a>02438              <span class="stringliteral">&quot;down [%s]; interface flags are %s&quot;</span>,
<a name="l02439"></a>02439          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;iph-&gt;ip_src, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l02440"></a>02440          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;iph-&gt;ip_dst, buf[1], <span class="keyword">sizeof</span>(buf[1])),
<a name="l02441"></a>02441              ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <a class="code" href="if_8c.html#a75d5485663b09e8a83a1d79d67d5ea39">if_flag_dump</a>(ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>));
<a name="l02442"></a>02442       <span class="comment">/* Fix multicast memberships? */</span>
<a name="l02443"></a>02443       <span class="keywordflow">if</span> (iph-&gt;ip_dst.s_addr == htonl(<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>))
<a name="l02444"></a>02444         <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
<a name="l02445"></a>02445       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (iph-&gt;ip_dst.s_addr == htonl(<a class="code" href="ospfd_8h.html#a8ba5ca00e358c35a32b660dc87e4b7cd">OSPF_ALLDROUTERS</a>))
<a name="l02446"></a>02446     <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
<a name="l02447"></a>02447       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#ae55fb42c5b5096720016b8c586d35339">multicast_memberships</a>)
<a name="l02448"></a>02448     <a class="code" href="ospf__interface_8c.html#a4d1ed1c93fa9a91e2461470344b8a977">ospf_if_set_multicast</a>(oi);
<a name="l02449"></a>02449       <span class="keywordflow">return</span> 0;
<a name="l02450"></a>02450     }
<a name="l02451"></a>02451 
<a name="l02452"></a>02452   <span class="comment">/*</span>
<a name="l02453"></a>02453 <span class="comment">   * If the received packet is destined for AllDRouters, the packet</span>
<a name="l02454"></a>02454 <span class="comment">   * should be accepted only if the received ospf interface state is</span>
<a name="l02455"></a>02455 <span class="comment">   * either DR or Backup -- endo.</span>
<a name="l02456"></a>02456 <span class="comment">   */</span>
<a name="l02457"></a>02457   <span class="keywordflow">if</span> (iph-&gt;ip_dst.s_addr == htonl (<a class="code" href="ospfd_8h.html#a8ba5ca00e358c35a32b660dc87e4b7cd">OSPF_ALLDROUTERS</a>)
<a name="l02458"></a>02458   &amp;&amp; (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a> &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>))
<a name="l02459"></a>02459     {
<a name="l02460"></a>02460       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Dropping packet for AllDRouters from [%s] via [%s] (ISM: %s)&quot;</span>,
<a name="l02461"></a>02461                  inet_ntoa (iph-&gt;ip_src), <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi),
<a name="l02462"></a>02462                  <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#ae4c65baac757ab6ffaaf05421dd53b3a">ospf_ism_state_msg</a>, oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>));
<a name="l02463"></a>02463       <span class="comment">/* Try to fix multicast membership. */</span>
<a name="l02464"></a>02464       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(oi-&gt;<a class="code" href="structospf__interface.html#ae55fb42c5b5096720016b8c586d35339">multicast_memberships</a>, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
<a name="l02465"></a>02465       <a class="code" href="ospf__interface_8c.html#a4d1ed1c93fa9a91e2461470344b8a977">ospf_if_set_multicast</a>(oi);
<a name="l02466"></a>02466       <span class="keywordflow">return</span> 0;
<a name="l02467"></a>02467     }
<a name="l02468"></a>02468 
<a name="l02469"></a>02469   <span class="comment">/* Show debug receiving packet. */</span>
<a name="l02470"></a>02470   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> - 1, <a class="code" href="bgp__debug_8h.html#a5c3976553336476b6fea4108b844ecf2">RECV</a>))
<a name="l02471"></a>02471     {
<a name="l02472"></a>02472       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> - 1, <a class="code" href="bgp__debug_8h.html#a7c5b2b199cc1d0b7645bc3c7c234fd3a">DETAIL</a>))
<a name="l02473"></a>02473         {
<a name="l02474"></a>02474           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------------------------------------------&quot;</span>);
<a name="l02475"></a>02475           <a class="code" href="ospf__dump_8c.html#a461bc2850902bd555113ddfc8fea4611">ospf_packet_dump</a> (ibuf);
<a name="l02476"></a>02476         }
<a name="l02477"></a>02477 
<a name="l02478"></a>02478       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s received from [%s] via [%s]&quot;</span>,
<a name="l02479"></a>02479                  <a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a>],
<a name="l02480"></a>02480                  inet_ntoa (ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a>), <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02481"></a>02481       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot; src [%s],&quot;</span>, inet_ntoa (iph-&gt;ip_src));
<a name="l02482"></a>02482       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot; dst [%s]&quot;</span>, inet_ntoa (iph-&gt;ip_dst));
<a name="l02483"></a>02483 
<a name="l02484"></a>02484       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> - 1, <a class="code" href="bgp__debug_8h.html#a7c5b2b199cc1d0b7645bc3c7c234fd3a">DETAIL</a>))
<a name="l02485"></a>02485     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;-----------------------------------------------------&quot;</span>);
<a name="l02486"></a>02486   }
<a name="l02487"></a>02487 
<a name="l02488"></a>02488   <span class="comment">/* Some header verification. */</span>
<a name="l02489"></a>02489   ret = <a class="code" href="ospf__packet_8c.html#afa26be342bd698a0c5463eb6a8c09a8b">ospf_verify_header</a> (ibuf, oi, iph, ospfh);
<a name="l02490"></a>02490   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02491"></a>02491     {
<a name="l02492"></a>02492       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> - 1, <a class="code" href="bgp__debug_8h.html#a5c3976553336476b6fea4108b844ecf2">RECV</a>))
<a name="l02493"></a>02493         {
<a name="l02494"></a>02494           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_read[%s/%s]: Header check failed, &quot;</span>
<a name="l02495"></a>02495                      <span class="stringliteral">&quot;dropping.&quot;</span>,
<a name="l02496"></a>02496                      <a class="code" href="ospf__dump_8h.html#a6dfce52e3c137fbfe9187f7055c5f455">ospf_packet_type_str</a>[ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a>],
<a name="l02497"></a>02497                      inet_ntoa (iph-&gt;ip_src));
<a name="l02498"></a>02498         }
<a name="l02499"></a>02499       <span class="keywordflow">return</span> ret;
<a name="l02500"></a>02500     }
<a name="l02501"></a>02501 
<a name="l02502"></a>02502   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (ibuf, <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>);
<a name="l02503"></a>02503 
<a name="l02504"></a>02504   <span class="comment">/* Adjust size to message length. */</span>
<a name="l02505"></a>02505   length = ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a>) - <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l02506"></a>02506 
<a name="l02507"></a>02507   <span class="comment">/* Read rest of the packet and call each sort of packet routine. */</span>
<a name="l02508"></a>02508   <span class="keywordflow">switch</span> (ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a>)
<a name="l02509"></a>02509     {
<a name="l02510"></a>02510     <span class="keywordflow">case</span> <a class="code" href="ospf__packet_8h.html#a1fa975559e07a39ee83b194caa6ae56b">OSPF_MSG_HELLO</a>:
<a name="l02511"></a>02511       <a class="code" href="ospf__packet_8c.html#afdba0c6658c739d82677daa810522d7f">ospf_hello</a> (iph, ospfh, ibuf, oi, length);
<a name="l02512"></a>02512       <span class="keywordflow">break</span>;
<a name="l02513"></a>02513     <span class="keywordflow">case</span> <a class="code" href="ospf__packet_8h.html#a367312ccca45c75e90fd72d241fa1628">OSPF_MSG_DB_DESC</a>:
<a name="l02514"></a>02514       <a class="code" href="ospf__packet_8c.html#a89b5a1f830849455a41ea97d8278216e">ospf_db_desc</a> (iph, ospfh, ibuf, oi, length);
<a name="l02515"></a>02515       <span class="keywordflow">break</span>;
<a name="l02516"></a>02516     <span class="keywordflow">case</span> <a class="code" href="ospf__packet_8h.html#a512b62b0a53781cc39bf1e5af29cd87d">OSPF_MSG_LS_REQ</a>:
<a name="l02517"></a>02517       <a class="code" href="ospf__packet_8c.html#a67c5af7ccab57522caf7c41782ddf507">ospf_ls_req</a> (iph, ospfh, ibuf, oi, length);
<a name="l02518"></a>02518       <span class="keywordflow">break</span>;
<a name="l02519"></a>02519     <span class="keywordflow">case</span> <a class="code" href="ospf__packet_8h.html#a2021ef5cd86ec563bffe0a94f3d23a9e">OSPF_MSG_LS_UPD</a>:
<a name="l02520"></a>02520       <a class="code" href="ospf__packet_8c.html#ae6d6c24939d4be655119e40f91955c4a">ospf_ls_upd</a> (iph, ospfh, ibuf, oi, length);
<a name="l02521"></a>02521       <span class="keywordflow">break</span>;
<a name="l02522"></a>02522     <span class="keywordflow">case</span> <a class="code" href="ospf__packet_8h.html#ad9b68de6334b262d7ca66dac18c96f48">OSPF_MSG_LS_ACK</a>:
<a name="l02523"></a>02523       <a class="code" href="ospf__packet_8c.html#a09c6622500acd269049149c060ffda75">ospf_ls_ack</a> (iph, ospfh, ibuf, oi, length);
<a name="l02524"></a>02524       <span class="keywordflow">break</span>;
<a name="l02525"></a>02525     <span class="keywordflow">default</span>:
<a name="l02526"></a>02526       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING,
<a name="l02527"></a>02527         <span class="stringliteral">&quot;interface %s: OSPF packet header type %d is illegal&quot;</span>,
<a name="l02528"></a>02528         <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a>);
<a name="l02529"></a>02529       <span class="keywordflow">break</span>;
<a name="l02530"></a>02530     }
<a name="l02531"></a>02531 
<a name="l02532"></a>02532   <span class="keywordflow">return</span> 0;
<a name="l02533"></a>02533 }
<a name="l02534"></a>02534 
<a name="l02535"></a>02535 <span class="comment">/* Make OSPF header. */</span>
<a name="l02536"></a>02536 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02537"></a><a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">02537</a> <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<span class="keywordtype">int</span> type, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02538"></a>02538 {
<a name="l02539"></a>02539   <span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *ospfh;
<a name="l02540"></a>02540 
<a name="l02541"></a>02541   ospfh = (<span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);
<a name="l02542"></a>02542 
<a name="l02543"></a>02543   ospfh-&gt;<a class="code" href="structospf__header.html#a9c323de9135ca3af7443cd7ab7002c93">version</a> = (u_char) <a class="code" href="ospfd_8h.html#ade0a29a3c62c5cb42b132c812208ea54">OSPF_VERSION</a>;
<a name="l02544"></a>02544   ospfh-&gt;<a class="code" href="structospf__header.html#a2f832538a5f930a155b8f4981284ffe1">type</a> = (u_char) type;
<a name="l02545"></a>02545 
<a name="l02546"></a>02546   ospfh-&gt;<a class="code" href="structospf__header.html#a412ee04aed6f3918a5a7351d3d23f4a0">router_id</a> = oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>;
<a name="l02547"></a>02547 
<a name="l02548"></a>02548   ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a> = 0;
<a name="l02549"></a>02549   ospfh-&gt;<a class="code" href="structospf__header.html#abc28c3f03a35afd1da498979dd99bc6d">area_id</a> = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l02550"></a>02550   ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a> = htons (<a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (oi));
<a name="l02551"></a>02551 
<a name="l02552"></a>02552   memset (ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a551388adacd968cea14c3999755c0a42">auth_data</a>, 0, <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>);
<a name="l02553"></a>02553 
<a name="l02554"></a>02554   <a class="code" href="stream_8c.html#aa8fdf46961b0a0aa3d014bb602712076">stream_forward_endp</a> (s, <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>);
<a name="l02555"></a>02555 }
<a name="l02556"></a>02556 
<a name="l02557"></a>02557 <span class="comment">/* Make Authentication Data. */</span>
<a name="l02558"></a>02558 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02559"></a><a class="code" href="ospf__packet_8c.html#a87bfed1627c87aad997439f7b2f152b0">02559</a> <a class="code" href="ospf__packet_8c.html#a87bfed1627c87aad997439f7b2f152b0">ospf_make_auth</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__header.html">ospf_header</a> *ospfh)
<a name="l02560"></a>02560 {
<a name="l02561"></a>02561   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l02562"></a>02562 
<a name="l02563"></a>02563   <span class="keywordflow">switch</span> (<a class="code" href="ospf__packet_8c.html#a8c674dddfebc06f8eda35243b0bd9cba">ospf_auth_type</a> (oi))
<a name="l02564"></a>02564     {
<a name="l02565"></a>02565     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a7fed6737ae4236d1f4ac7c977844b128">OSPF_AUTH_NULL</a>:
<a name="l02566"></a>02566       <span class="comment">/* memset (ospfh-&gt;u.auth_data, 0, sizeof (ospfh-&gt;u.auth_data)); */</span>
<a name="l02567"></a>02567       <span class="keywordflow">break</span>;
<a name="l02568"></a>02568     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a4b962c0c6d99c31cb646010cb0af57c0">OSPF_AUTH_SIMPLE</a>:
<a name="l02569"></a>02569       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a551388adacd968cea14c3999755c0a42">auth_data</a>, <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_simple),
<a name="l02570"></a>02570           <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>);
<a name="l02571"></a>02571       <span class="keywordflow">break</span>;
<a name="l02572"></a>02572     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>:
<a name="l02573"></a>02573       <span class="comment">/* If key is not set, then set 0. */</span>
<a name="l02574"></a>02574       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt)))
<a name="l02575"></a>02575     {
<a name="l02576"></a>02576       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.zero = 0;
<a name="l02577"></a>02577       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.key_id = 0;
<a name="l02578"></a>02578       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.auth_data_len = <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>;
<a name="l02579"></a>02579     }
<a name="l02580"></a>02580       <span class="keywordflow">else</span>
<a name="l02581"></a>02581     {
<a name="l02582"></a>02582       ck = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a50e32cbff5b5b7f2494387516fd818fc">listtail</a>(<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_crypt)));
<a name="l02583"></a>02583       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.zero = 0;
<a name="l02584"></a>02584       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.key_id = ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a>;
<a name="l02585"></a>02585       ospfh-&gt;<a class="code" href="structospf__header.html#aeee7498b27f3289d550db591580dbc27">u</a>.<a class="code" href="structospf__header.html#a2b08c4847d7be3cf4bd8ea0a02e1163a">crypt</a>.auth_data_len = <a class="code" href="ospf__packet_8h.html#a4361f27185f8d7ea61101c3033a85952">OSPF_AUTH_MD5_SIZE</a>;
<a name="l02586"></a>02586     }
<a name="l02587"></a>02587       <span class="comment">/* note: the seq is done in ospf_make_md5_digest() */</span>
<a name="l02588"></a>02588       <span class="keywordflow">break</span>;
<a name="l02589"></a>02589     <span class="keywordflow">default</span>:
<a name="l02590"></a>02590       <span class="comment">/* memset (ospfh-&gt;u.auth_data, 0, sizeof (ospfh-&gt;u.auth_data)); */</span>
<a name="l02591"></a>02591       <span class="keywordflow">break</span>;
<a name="l02592"></a>02592     }
<a name="l02593"></a>02593 
<a name="l02594"></a>02594   <span class="keywordflow">return</span> 0;
<a name="l02595"></a>02595 }
<a name="l02596"></a>02596 
<a name="l02597"></a>02597 <span class="comment">/* Fill rest of OSPF header. */</span>
<a name="l02598"></a>02598 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02599"></a><a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">02599</a> <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l02600"></a>02600           <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l02601"></a>02601 {
<a name="l02602"></a>02602   <span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *ospfh;
<a name="l02603"></a>02603 
<a name="l02604"></a>02604   ospfh = (<span class="keyword">struct </span><a class="code" href="structospf__header.html">ospf_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);
<a name="l02605"></a>02605 
<a name="l02606"></a>02606   <span class="comment">/* Fill length. */</span>
<a name="l02607"></a>02607   ospfh-&gt;<a class="code" href="structospf__header.html#afb005873a7409b826e6e3cdd0260cb19">length</a> = htons (length);
<a name="l02608"></a>02608 
<a name="l02609"></a>02609   <span class="comment">/* Calculate checksum. */</span>
<a name="l02610"></a>02610   <span class="keywordflow">if</span> (ntohs (ospfh-&gt;<a class="code" href="structospf__header.html#afcb4ec794bf78236eff9f33cbbfba8b0">auth_type</a>) != <a class="code" href="ospfd_8h.html#ae45bd56b3cc9f0635ed7fa758d4ea38b">OSPF_AUTH_CRYPTOGRAPHIC</a>)
<a name="l02611"></a>02611     ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a> = <a class="code" href="checksum_8c.html#afd7d8e31fdd7d500d89ee477149e95fd">in_cksum</a> (ospfh, length);
<a name="l02612"></a>02612   <span class="keywordflow">else</span>
<a name="l02613"></a>02613     ospfh-&gt;<a class="code" href="structospf__header.html#ab7635d6e96856a3d92f9d48e2455b34d">checksum</a> = 0;
<a name="l02614"></a>02614 
<a name="l02615"></a>02615   <span class="comment">/* Add Authentication Data. */</span>
<a name="l02616"></a>02616   <a class="code" href="ospf__packet_8c.html#a87bfed1627c87aad997439f7b2f152b0">ospf_make_auth</a> (oi, ospfh);
<a name="l02617"></a>02617 }
<a name="l02618"></a>02618 
<a name="l02619"></a>02619 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02620"></a><a class="code" href="ospf__packet_8c.html#aae99e08e101483b1f7ceeeb0d9479625">02620</a> <a class="code" href="ospf__packet_8c.html#aae99e08e101483b1f7ceeeb0d9479625">ospf_make_hello</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02621"></a>02621 {
<a name="l02622"></a>02622   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02623"></a>02623   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02624"></a>02624   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#a66e89ac395b84382b108574f1f46fd1b">OSPF_HELLO_MIN_SIZE</a>;
<a name="l02625"></a>02625   <span class="keyword">struct </span>in_addr mask;
<a name="l02626"></a>02626   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l02627"></a>02627   <span class="keywordtype">int</span> flag = 0;
<a name="l02628"></a>02628 
<a name="l02629"></a>02629   <span class="comment">/* Set netmask of interface. */</span>
<a name="l02630"></a>02630   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a> &amp;&amp;
<a name="l02631"></a>02631       oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l02632"></a>02632     <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
<a name="l02633"></a>02633   <span class="keywordflow">else</span>
<a name="l02634"></a>02634     memset ((<span class="keywordtype">char</span> *) &amp;mask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02635"></a>02635   <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);
<a name="l02636"></a>02636 
<a name="l02637"></a>02637   <span class="comment">/* Set Hello Interval. */</span>
<a name="l02638"></a>02638   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, fast_hello) == 0)
<a name="l02639"></a>02639     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_hello));
<a name="l02640"></a>02640   <span class="keywordflow">else</span>
<a name="l02641"></a>02641     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0); <span class="comment">/* hello-interval of 0 for fast-hellos */</span>
<a name="l02642"></a>02642 
<a name="l02643"></a>02643   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02644"></a>02644     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;make_hello: options: %x, int: %s&quot;</span>,
<a name="l02645"></a>02645            <a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a>(oi), <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02646"></a>02646 
<a name="l02647"></a>02647   <span class="comment">/* Set Options. */</span>
<a name="l02648"></a>02648   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi));
<a name="l02649"></a>02649 
<a name="l02650"></a>02650   <span class="comment">/* Set Router Priority. */</span>
<a name="l02651"></a>02651   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ospf__interface_8h.html#accb5457e43688e067b0b9844b08ae520">PRIORITY</a> (oi));
<a name="l02652"></a>02652 
<a name="l02653"></a>02653   <span class="comment">/* Set Router Dead Interval. */</span>
<a name="l02654"></a>02654   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_wait));
<a name="l02655"></a>02655 
<a name="l02656"></a>02656   <span class="comment">/* Set Designated Router. */</span>
<a name="l02657"></a>02657   <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, <a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi).s_addr);
<a name="l02658"></a>02658 
<a name="l02659"></a>02659   p = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02660"></a>02660 
<a name="l02661"></a>02661   <span class="comment">/* Set Backup Designated Router. */</span>
<a name="l02662"></a>02662   <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, <a class="code" href="ospf__interface_8h.html#ab9a182dc79cc0d10a77a27c60f2351cd">BDR</a> (oi).s_addr);
<a name="l02663"></a>02663 
<a name="l02664"></a>02664   <span class="comment">/* Add neighbor seen. */</span>
<a name="l02665"></a>02665   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02666"></a>02666     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
<a name="l02667"></a>02667       <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>.s_addr != 0)   <span class="comment">/* Ignore 0.0.0.0 node. */</span>
<a name="l02668"></a>02668     <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a8151a9925f00bd1d3b3362a7557bab67">NSM_Attempt</a>)  <span class="comment">/* Ignore Down neighbor. */</span>
<a name="l02669"></a>02669     <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a>)     <span class="comment">/* This is myself for DR election. */</span>
<a name="l02670"></a>02670       <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
<a name="l02671"></a>02671         {
<a name="l02672"></a>02672           <span class="comment">/* Check neighbor is sane? */</span>
<a name="l02673"></a>02673           <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a>.s_addr != 0
<a name="l02674"></a>02674           &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a24e4e7033ceb3d8ed0fadf5c6e5e76da">d_router</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>)
<a name="l02675"></a>02675           &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaf380e3e193de01f1ff80c71fc841c9d">bd_router</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l02676"></a>02676         flag = 1;
<a name="l02677"></a>02677 
<a name="l02678"></a>02678           <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>.s_addr);
<a name="l02679"></a>02679           length += 4;
<a name="l02680"></a>02680         }
<a name="l02681"></a>02681 
<a name="l02682"></a>02682   <span class="comment">/* Let neighbor generate BackupSeen. */</span>
<a name="l02683"></a>02683   <span class="keywordflow">if</span> (flag == 1)
<a name="l02684"></a>02684     <a class="code" href="stream_8c.html#ac25eaf59cd64ec23012f50a7d37a9f4a">stream_putl_at</a> (s, p, 0); <span class="comment">/* ipv4 address, normally */</span>
<a name="l02685"></a>02685 
<a name="l02686"></a>02686   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02687"></a>02687 }
<a name="l02688"></a>02688 
<a name="l02689"></a>02689 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02690"></a><a class="code" href="ospf__packet_8c.html#a2ce501a5599cdabe2d6a9f1beea1fd14">02690</a> <a class="code" href="ospf__packet_8c.html#a2ce501a5599cdabe2d6a9f1beea1fd14">ospf_make_db_desc</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr,
<a name="l02691"></a>02691            <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02692"></a>02692 {
<a name="l02693"></a>02693   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02694"></a>02694   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#a872e1fdf510665b31c5090348d51b8ab">OSPF_DB_DESC_MIN_SIZE</a>;
<a name="l02695"></a>02695   u_char options;
<a name="l02696"></a>02696   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pp;
<a name="l02697"></a>02697   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02698"></a>02698   <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb;
<a name="l02699"></a>02699   
<a name="l02700"></a>02700   <span class="comment">/* Set Interface MTU. */</span>
<a name="l02701"></a>02701   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l02702"></a>02702     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02703"></a>02703   <span class="keywordflow">else</span>
<a name="l02704"></a>02704     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l02705"></a>02705 
<a name="l02706"></a>02706   <span class="comment">/* Set Options. */</span>
<a name="l02707"></a>02707   options = <a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi);
<a name="l02708"></a>02708 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l02709"></a>02709 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l02710"></a>02710     {
<a name="l02711"></a>02711       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8h.html#aa9ac12af4b4bd7b1a1c5bed8bd39b937">IS_SET_DD_I</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>)
<a name="l02712"></a>02712       ||  <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l02713"></a>02713         <span class="comment">/*</span>
<a name="l02714"></a>02714 <span class="comment">         * Set O-bit in the outgoing DD packet for capablity negotiation,</span>
<a name="l02715"></a>02715 <span class="comment">         * if one of following case is applicable. </span>
<a name="l02716"></a>02716 <span class="comment">         *</span>
<a name="l02717"></a>02717 <span class="comment">         * 1) WaitTimer expiration event triggered the neighbor state to</span>
<a name="l02718"></a>02718 <span class="comment">         *    change to Exstart, but no (valid) DD packet has received</span>
<a name="l02719"></a>02719 <span class="comment">         *    from the neighbor yet.</span>
<a name="l02720"></a>02720 <span class="comment">         *</span>
<a name="l02721"></a>02721 <span class="comment">         * 2) At least one DD packet with O-bit on has received from the</span>
<a name="l02722"></a>02722 <span class="comment">         *    neighbor.</span>
<a name="l02723"></a>02723 <span class="comment">         */</span>
<a name="l02724"></a>02724         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (options, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>);
<a name="l02725"></a>02725     }
<a name="l02726"></a>02726 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l02727"></a>02727   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, options);
<a name="l02728"></a>02728 
<a name="l02729"></a>02729   <span class="comment">/* DD flags */</span>
<a name="l02730"></a>02730   pp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02731"></a>02731   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>);
<a name="l02732"></a>02732 
<a name="l02733"></a>02733   <span class="comment">/* Set DD Sequence Number. */</span>
<a name="l02734"></a>02734   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a8d065d2872e94ddd25727faee7c39a7c">dd_seqnum</a>);
<a name="l02735"></a>02735 
<a name="l02736"></a>02736   <span class="comment">/* shortcut unneeded walk of (empty) summary LSDBs */</span>
<a name="l02737"></a>02737   <span class="keywordflow">if</span> (<a class="code" href="ospf__nsm_8c.html#ac37bb4e71b7ca701aeec1bb101340ae3">ospf_db_summary_isempty</a> (nbr))
<a name="l02738"></a>02738     <span class="keywordflow">goto</span> empty;
<a name="l02739"></a>02739 
<a name="l02740"></a>02740   <span class="comment">/* Describe LSA Header from Database Summary List. */</span>
<a name="l02741"></a>02741   lsdb = &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aa9dff1f5ba19ec799c3dc9254b849049">db_sum</a>;
<a name="l02742"></a>02742 
<a name="l02743"></a>02743   <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
<a name="l02744"></a>02744     {
<a name="l02745"></a>02745       <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table = lsdb-&gt;<a class="code" href="structospf__lsdb.html#a0af6d8740509eb2ed0ad1aa9c6599d56">type</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structospf__lsdb.html#ac02ad39566534869219d3e9d942bf565">db</a>;
<a name="l02746"></a>02746       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02747"></a>02747 
<a name="l02748"></a>02748       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02749"></a>02749     <span class="keywordflow">if</span> ((lsa = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02750"></a>02750       {
<a name="l02751"></a>02751 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l02752"></a>02752 <span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02753"></a>02753             &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (options, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>)))
<a name="l02754"></a>02754               {
<a name="l02755"></a>02755                 <span class="comment">/* Suppress advertising opaque-informations. */</span>
<a name="l02756"></a>02756                 <span class="comment">/* Remove LSA from DB summary list. */</span>
<a name="l02757"></a>02757                 <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (lsdb, lsa);
<a name="l02758"></a>02758                 <span class="keywordflow">continue</span>;
<a name="l02759"></a>02759               }
<a name="l02760"></a>02760 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l02761"></a>02761 
<a name="l02762"></a>02762         <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a7c24685e365aa6c180d976e7ccfeb302">OSPF_LSA_DISCARD</a>))
<a name="l02763"></a>02763           {
<a name="l02764"></a>02764         <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l02765"></a>02765         u_int16_t <a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>;
<a name="l02766"></a>02766         
<a name="l02767"></a>02767         <span class="comment">/* DD packet overflows interface MTU. */</span>
<a name="l02768"></a>02768         <span class="keywordflow">if</span> (length + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> &gt; <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (oi))
<a name="l02769"></a>02769           <span class="keywordflow">break</span>;
<a name="l02770"></a>02770         
<a name="l02771"></a>02771         <span class="comment">/* Keep pointer to LS age. */</span>
<a name="l02772"></a>02772         lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s) +
<a name="l02773"></a>02773                           <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l02774"></a>02774         
<a name="l02775"></a>02775         <span class="comment">/* Proceed stream pointer. */</span>
<a name="l02776"></a>02776         <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l02777"></a>02777         length += <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>;
<a name="l02778"></a>02778         
<a name="l02779"></a>02779         <span class="comment">/* Set LS age. */</span>
<a name="l02780"></a>02780         ls_age = <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (lsa);
<a name="l02781"></a>02781         lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (ls_age);
<a name="l02782"></a>02782         
<a name="l02783"></a>02783           }
<a name="l02784"></a>02784         
<a name="l02785"></a>02785         <span class="comment">/* Remove LSA from DB summary list. */</span>
<a name="l02786"></a>02786         <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (lsdb, lsa);
<a name="l02787"></a>02787       }
<a name="l02788"></a>02788     }
<a name="l02789"></a>02789 
<a name="l02790"></a>02790   <span class="comment">/* Update &#39;More&#39; bit */</span>
<a name="l02791"></a>02791   <span class="keywordflow">if</span> (<a class="code" href="ospf__nsm_8c.html#ac37bb4e71b7ca701aeec1bb101340ae3">ospf_db_summary_isempty</a> (nbr))
<a name="l02792"></a>02792     {
<a name="l02793"></a>02793 empty:
<a name="l02794"></a>02794       <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &gt;= <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l02795"></a>02795         {
<a name="l02796"></a>02796           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>, <a class="code" href="ospfd_8h.html#a6b39a0f2e2f0415a60230aa869cabb48">OSPF_DD_FLAG_M</a>);
<a name="l02797"></a>02797           <span class="comment">/* Rewrite DD flags */</span>
<a name="l02798"></a>02798           <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, pp, nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>);
<a name="l02799"></a>02799         }
<a name="l02800"></a>02800       <span class="keywordflow">else</span>
<a name="l02801"></a>02801         {
<a name="l02802"></a>02802           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="ospf__packet_8h.html#a05e41ae2cb53cca5409902b486e732ec">IS_SET_DD_M</a>(nbr-&gt;<a class="code" href="structospf__neighbor.html#afd7a64a3a213196cc5dd3c4c5b2e2a5b">dd_flags</a>));
<a name="l02803"></a>02803         }
<a name="l02804"></a>02804     }
<a name="l02805"></a>02805   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02806"></a>02806 }
<a name="l02807"></a>02807 
<a name="l02808"></a>02808 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02809"></a><a class="code" href="ospf__packet_8c.html#a72f3f43cff78177c56b4a70f22f38f22">02809</a> <a class="code" href="ospf__packet_8c.html#a72f3f43cff78177c56b4a70f22f38f22">ospf_make_ls_req_func</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_int16_t *<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
<a name="l02810"></a>02810                <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delta, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr,
<a name="l02811"></a>02811                <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02812"></a>02812 {
<a name="l02813"></a>02813   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02814"></a>02814 
<a name="l02815"></a>02815   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l02816"></a>02816 
<a name="l02817"></a>02817   <span class="comment">/* LS Request packet overflows interface MTU. */</span>
<a name="l02818"></a>02818   <span class="keywordflow">if</span> (*length + delta &gt; <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a>(oi))
<a name="l02819"></a>02819     <span class="keywordflow">return</span> 0;
<a name="l02820"></a>02820 
<a name="l02821"></a>02821   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l02822"></a>02822   <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr);
<a name="l02823"></a>02823   <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>.s_addr);
<a name="l02824"></a>02824   
<a name="l02825"></a>02825   <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a>);
<a name="l02826"></a>02826   nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a> = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa);
<a name="l02827"></a>02827   
<a name="l02828"></a>02828   *length += 12;
<a name="l02829"></a>02829   <span class="keywordflow">return</span> 1;
<a name="l02830"></a>02830 }
<a name="l02831"></a>02831 
<a name="l02832"></a>02832 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02833"></a><a class="code" href="ospf__packet_8c.html#ae4d87c81eeb19a950b4e8da4852401da">02833</a> <a class="code" href="ospf__packet_8c.html#ae4d87c81eeb19a950b4e8da4852401da">ospf_make_ls_req</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02834"></a>02834 {
<a name="l02835"></a>02835   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02836"></a>02836   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#abb512c6d6c0730264d12f1c3108d45bf">OSPF_LS_REQ_MIN_SIZE</a>;
<a name="l02837"></a>02837   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delta = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s)+12;
<a name="l02838"></a>02838   <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
<a name="l02839"></a>02839   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02840"></a>02840   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02841"></a>02841   <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb;
<a name="l02842"></a>02842 
<a name="l02843"></a>02843   lsdb = &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>;
<a name="l02844"></a>02844 
<a name="l02845"></a>02845   <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
<a name="l02846"></a>02846     {
<a name="l02847"></a>02847       table = lsdb-&gt;<a class="code" href="structospf__lsdb.html#a0af6d8740509eb2ed0ad1aa9c6599d56">type</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structospf__lsdb.html#ac02ad39566534869219d3e9d942bf565">db</a>;
<a name="l02848"></a>02848       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02849"></a>02849     <span class="keywordflow">if</span> ((lsa = (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02850"></a>02850       <span class="keywordflow">if</span> (<a class="code" href="ospf__packet_8c.html#a72f3f43cff78177c56b4a70f22f38f22">ospf_make_ls_req_func</a> (s, &amp;length, delta, nbr, lsa) == 0)
<a name="l02851"></a>02851         {
<a name="l02852"></a>02852           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l02853"></a>02853           <span class="keywordflow">break</span>;
<a name="l02854"></a>02854         }
<a name="l02855"></a>02855     }
<a name="l02856"></a>02856   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02857"></a>02857 }
<a name="l02858"></a>02858 
<a name="l02859"></a>02859 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02860"></a><a class="code" href="ospf__packet_8c.html#a128fd8da1417d27002d0c6fe6beeff4a">02860</a> <a class="code" href="ospf__packet_8c.html#a128fd8da1417d27002d0c6fe6beeff4a">ls_age_increment</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa, <span class="keywordtype">int</span> delay)
<a name="l02861"></a>02861 {
<a name="l02862"></a>02862   <span class="keywordtype">int</span> age;
<a name="l02863"></a>02863 
<a name="l02864"></a>02864   age = <a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa) ? <a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a> : <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (lsa) + delay;
<a name="l02865"></a>02865 
<a name="l02866"></a>02866   <span class="keywordflow">return</span> (age &gt; <a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a> ? <a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a> : age);
<a name="l02867"></a>02867 }
<a name="l02868"></a>02868 
<a name="l02869"></a>02869 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02870"></a><a class="code" href="ospf__packet_8c.html#aea2d7141af895fb08dfd6093eef6cebd">02870</a> <a class="code" href="ospf__packet_8c.html#aea2d7141af895fb08dfd6093eef6cebd">ospf_make_ls_upd</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *update, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02871"></a>02871 {
<a name="l02872"></a>02872   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02873"></a>02873   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02874"></a>02874   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = 0;
<a name="l02875"></a>02875   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size_noauth;
<a name="l02876"></a>02876   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delta = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02877"></a>02877   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pp;
<a name="l02878"></a>02878   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a> = 0;
<a name="l02879"></a>02879 
<a name="l02880"></a>02880   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02881"></a>02881     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_make_ls_upd: Start&quot;</span>);
<a name="l02882"></a>02882 
<a name="l02883"></a>02883   pp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02884"></a>02884   <a class="code" href="stream_8c.html#aa8fdf46961b0a0aa3d014bb602712076">stream_forward_endp</a> (s, <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>);
<a name="l02885"></a>02885   length += <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>;
<a name="l02886"></a>02886 
<a name="l02887"></a>02887   <span class="comment">/* Calculate amount of packet usable for data. */</span>
<a name="l02888"></a>02888   size_noauth = <a class="code" href="stream_8c.html#a4b32bba6c2427f336373189365afef01">stream_get_size</a>(s) - <a class="code" href="ospf__packet_8c.html#a3a8934ac4566c50e11c393b55c884316">ospf_packet_authspace</a>(oi);
<a name="l02889"></a>02889 
<a name="l02890"></a>02890   <span class="keywordflow">while</span> ((node = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (update)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02891"></a>02891     {
<a name="l02892"></a>02892       <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l02893"></a>02893       u_int16_t <a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>;
<a name="l02894"></a>02894 
<a name="l02895"></a>02895       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02896"></a>02896         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_make_ls_upd: List Iteration&quot;</span>);
<a name="l02897"></a>02897 
<a name="l02898"></a>02898       lsa = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (node);
<a name="l02899"></a>02899 
<a name="l02900"></a>02900       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l02901"></a>02901 
<a name="l02902"></a>02902       <span class="comment">/* Will it fit? */</span>
<a name="l02903"></a>02903       <span class="keywordflow">if</span> (length + delta + ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) &gt; size_noauth)
<a name="l02904"></a>02904         <span class="keywordflow">break</span>;
<a name="l02905"></a>02905 
<a name="l02906"></a>02906       <span class="comment">/* Keep pointer to LS age. */</span>
<a name="l02907"></a>02907       lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s) + <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l02908"></a>02908 
<a name="l02909"></a>02909       <span class="comment">/* Put LSA to Link State Request. */</span>
<a name="l02910"></a>02910       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>));
<a name="l02911"></a>02911 
<a name="l02912"></a>02912       <span class="comment">/* Set LS age. */</span>
<a name="l02913"></a>02913       <span class="comment">/* each hop must increment an lsa_age by transmit_delay </span>
<a name="l02914"></a>02914 <span class="comment">         of OSPF interface */</span>
<a name="l02915"></a>02915       ls_age = <a class="code" href="ospf__packet_8c.html#a128fd8da1417d27002d0c6fe6beeff4a">ls_age_increment</a> (lsa, <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, transmit_delay));
<a name="l02916"></a>02916       lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (ls_age);
<a name="l02917"></a>02917 
<a name="l02918"></a>02918       length += ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l02919"></a>02919       count++;
<a name="l02920"></a>02920 
<a name="l02921"></a>02921       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (update, node);
<a name="l02922"></a>02922       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* oi-&gt;ls_upd_queue */</span>
<a name="l02923"></a>02923     }
<a name="l02924"></a>02924 
<a name="l02925"></a>02925   <span class="comment">/* Now set #LSAs. */</span>
<a name="l02926"></a>02926   <a class="code" href="stream_8c.html#ac25eaf59cd64ec23012f50a7d37a9f4a">stream_putl_at</a> (s, pp, count);
<a name="l02927"></a>02927 
<a name="l02928"></a>02928   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02929"></a>02929     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_make_ls_upd: Stop&quot;</span>);
<a name="l02930"></a>02930   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02931"></a>02931 }
<a name="l02932"></a>02932 
<a name="l02933"></a>02933 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02934"></a><a class="code" href="ospf__packet_8c.html#a324f3d5d86502fad05924e8ccf2fe128">02934</a> <a class="code" href="ospf__packet_8c.html#a324f3d5d86502fad05924e8ccf2fe128">ospf_make_ls_ack</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *ack, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l02935"></a>02935 {
<a name="l02936"></a>02936   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02937"></a>02937   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#a78d2a951ce65fa884583b770ea971b01">OSPF_LS_ACK_MIN_SIZE</a>;
<a name="l02938"></a>02938   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delta = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s) + 24;
<a name="l02939"></a>02939   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02940"></a>02940 
<a name="l02941"></a>02941   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ack, node, nnode, lsa))
<a name="l02942"></a>02942     {
<a name="l02943"></a>02943       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa);
<a name="l02944"></a>02944       
<a name="l02945"></a>02945       <span class="keywordflow">if</span> (length + delta &gt; <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (oi))
<a name="l02946"></a>02946     <span class="keywordflow">break</span>;
<a name="l02947"></a>02947       
<a name="l02948"></a>02948       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l02949"></a>02949       length += <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>;
<a name="l02950"></a>02950       
<a name="l02951"></a>02951       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ack, lsa);
<a name="l02952"></a>02952       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* oi-&gt;ls_ack_direct.ls_ack */</span>
<a name="l02953"></a>02953     }
<a name="l02954"></a>02954   
<a name="l02955"></a>02955   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02956"></a>02956 }
<a name="l02957"></a>02957 
<a name="l02958"></a>02958 <span class="keywordtype">void</span>
<a name="l02959"></a><a class="code" href="ospf__packet_8h.html#a4d6ac2df9d55c817cb3be6ee5adc95c3">02959</a> <a class="code" href="ospf__packet_8c.html#ae580c694ac036ef02635ff750d37fd8a">ospf_hello_send_sub</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> in_addr *addr)
<a name="l02960"></a>02960 {
<a name="l02961"></a>02961   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l02962"></a>02962   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l02963"></a>02963 
<a name="l02964"></a>02964   op = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l02965"></a>02965 
<a name="l02966"></a>02966   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l02967"></a>02967   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#a1fa975559e07a39ee83b194caa6ae56b">OSPF_MSG_HELLO</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l02968"></a>02968 
<a name="l02969"></a>02969   <span class="comment">/* Prepare OSPF Hello body. */</span>
<a name="l02970"></a>02970   length += <a class="code" href="ospf__packet_8c.html#aae99e08e101483b1f7ceeeb0d9479625">ospf_make_hello</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l02971"></a>02971 
<a name="l02972"></a>02972   <span class="comment">/* Fill OSPF header. */</span>
<a name="l02973"></a>02973   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l02974"></a>02974 
<a name="l02975"></a>02975   <span class="comment">/* Set packet length. */</span>
<a name="l02976"></a>02976   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02977"></a>02977 
<a name="l02978"></a>02978   op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = addr-&gt;s_addr;
<a name="l02979"></a>02979 
<a name="l02980"></a>02980   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l02981"></a>02981   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l02982"></a>02982 
<a name="l02983"></a>02983   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l02984"></a>02984   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l02985"></a>02985 }
<a name="l02986"></a>02986 
<a name="l02987"></a>02987 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02988"></a><a class="code" href="ospf__packet_8c.html#a627151062fdddeffcc2a5fb420518f1e">02988</a> <a class="code" href="ospf__packet_8c.html#a627151062fdddeffcc2a5fb420518f1e">ospf_poll_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma)
<a name="l02989"></a>02989 {
<a name="l02990"></a>02990   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02991"></a>02991 
<a name="l02992"></a>02992   oi = nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a501752990df8f83d0efae32fbb9dead9">oi</a>;
<a name="l02993"></a>02993   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(oi);
<a name="l02994"></a>02994 
<a name="l02995"></a>02995   <span class="comment">/* If this is passive interface, do not send OSPF Hello. */</span>
<a name="l02996"></a>02996   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a> (oi) == <a class="code" href="ospf__interface_8h.html#a68e4f61453d94a303183c773f0d02a27">OSPF_IF_PASSIVE</a>)
<a name="l02997"></a>02997     <span class="keywordflow">return</span>;
<a name="l02998"></a>02998 
<a name="l02999"></a>02999   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l03000"></a>03000     <span class="keywordflow">return</span>;
<a name="l03001"></a>03001 
<a name="l03002"></a>03002   <span class="keywordflow">if</span> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a>-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a>)
<a name="l03003"></a>03003     <span class="keywordflow">return</span>;
<a name="l03004"></a>03004 
<a name="l03005"></a>03005   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#accb5457e43688e067b0b9844b08ae520">PRIORITY</a>(oi) == 0)
<a name="l03006"></a>03006     <span class="keywordflow">return</span>;
<a name="l03007"></a>03007 
<a name="l03008"></a>03008   <span class="keywordflow">if</span> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a3d452f4f0a3396d1ee21e58e9635e228">priority</a> == 0
<a name="l03009"></a>03009       &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a> &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)
<a name="l03010"></a>03010     <span class="keywordflow">return</span>;
<a name="l03011"></a>03011 
<a name="l03012"></a>03012   <a class="code" href="ospf__packet_8c.html#ae580c694ac036ef02635ff750d37fd8a">ospf_hello_send_sub</a> (oi, &amp;nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a5fc2a7f849288ef91acc9c055a934fe8">addr</a>);
<a name="l03013"></a>03013 }
<a name="l03014"></a>03014 
<a name="l03015"></a>03015 <span class="keywordtype">int</span>
<a name="l03016"></a><a class="code" href="ospf__packet_8h.html#af15f4380467064446745acb56e631216">03016</a> <a class="code" href="ospf__packet_8c.html#a2232cdce5e30b12f8f9d29a49952b8f8">ospf_poll_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l03017"></a>03017 {
<a name="l03018"></a>03018   <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma;
<a name="l03019"></a>03019 
<a name="l03020"></a>03020   nbr_nbma = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l03021"></a>03021   nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a9aa6dd806f5903f6a4ded3ee4ca26e29">t_poll</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03022"></a>03022 
<a name="l03023"></a>03023   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (nsm, NSM_TIMERS))
<a name="l03024"></a>03024     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_DEBUG, <span class="stringliteral">&quot;NSM[%s:%s]: Timer (Poll timer expire)&quot;</span>,
<a name="l03025"></a>03025     <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a501752990df8f83d0efae32fbb9dead9">oi</a>), inet_ntoa (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a5fc2a7f849288ef91acc9c055a934fe8">addr</a>));
<a name="l03026"></a>03026 
<a name="l03027"></a>03027   <a class="code" href="ospf__packet_8c.html#a627151062fdddeffcc2a5fb420518f1e">ospf_poll_send</a> (nbr_nbma);
<a name="l03028"></a>03028 
<a name="l03029"></a>03029   <span class="keywordflow">if</span> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#ac2f40d497fd994774eaa662ba7a45f9d">v_poll</a> &gt; 0)
<a name="l03030"></a>03030     <a class="code" href="ospfd_8h.html#ac2416fe7bfb9581d7d9c05b7326be6c1">OSPF_POLL_TIMER_ON</a> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a9aa6dd806f5903f6a4ded3ee4ca26e29">t_poll</a>, <a class="code" href="ospf__packet_8c.html#a2232cdce5e30b12f8f9d29a49952b8f8">ospf_poll_timer</a>,
<a name="l03031"></a>03031             nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#ac2f40d497fd994774eaa662ba7a45f9d">v_poll</a>);
<a name="l03032"></a>03032 
<a name="l03033"></a>03033   <span class="keywordflow">return</span> 0;
<a name="l03034"></a>03034 }
<a name="l03035"></a>03035 
<a name="l03036"></a>03036 
<a name="l03037"></a>03037 <span class="keywordtype">int</span>
<a name="l03038"></a><a class="code" href="ospf__packet_8h.html#a6756b631688bb3dabb18a7257c00ad02">03038</a> <a class="code" href="ospf__packet_8c.html#adff0d56481224bab2f663b2c72ffb979">ospf_hello_reply_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l03039"></a>03039 {
<a name="l03040"></a>03040   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l03041"></a>03041 
<a name="l03042"></a>03042   nbr = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l03043"></a>03043   nbr-&gt;<a class="code" href="structospf__neighbor.html#a9bb86528f191dbbe6c6272501ccc7ad6">t_hello_reply</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03044"></a>03044 
<a name="l03045"></a>03045   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>);
<a name="l03046"></a>03046 
<a name="l03047"></a>03047   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (nsm, NSM_TIMERS))
<a name="l03048"></a>03048     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_DEBUG, <span class="stringliteral">&quot;NSM[%s:%s]: Timer (hello-reply timer expire)&quot;</span>,
<a name="l03049"></a>03049       <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>), inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>));
<a name="l03050"></a>03050 
<a name="l03051"></a>03051   <a class="code" href="ospf__packet_8c.html#ae580c694ac036ef02635ff750d37fd8a">ospf_hello_send_sub</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l03052"></a>03052 
<a name="l03053"></a>03053   <span class="keywordflow">return</span> 0;
<a name="l03054"></a>03054 }
<a name="l03055"></a>03055 
<a name="l03056"></a>03056 <span class="comment">/* Send OSPF Hello. */</span>
<a name="l03057"></a>03057 <span class="keywordtype">void</span>
<a name="l03058"></a><a class="code" href="ospf__packet_8h.html#a1fb8b9605dcc524a54fd41cedac834d0">03058</a> <a class="code" href="ospf__packet_8c.html#a0ec5bea1d903b79d5dca071f0fabb268">ospf_hello_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)
<a name="l03059"></a>03059 {
<a name="l03060"></a>03060   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l03061"></a>03061   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l03062"></a>03062 
<a name="l03063"></a>03063   <span class="comment">/* If this is passive interface, do not send OSPF Hello. */</span>
<a name="l03064"></a>03064   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a> (oi) == <a class="code" href="ospf__interface_8h.html#a68e4f61453d94a303183c773f0d02a27">OSPF_IF_PASSIVE</a>)
<a name="l03065"></a>03065     <span class="keywordflow">return</span>;
<a name="l03066"></a>03066 
<a name="l03067"></a>03067   op = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l03068"></a>03068 
<a name="l03069"></a>03069   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l03070"></a>03070   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#a1fa975559e07a39ee83b194caa6ae56b">OSPF_MSG_HELLO</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03071"></a>03071 
<a name="l03072"></a>03072   <span class="comment">/* Prepare OSPF Hello body. */</span>
<a name="l03073"></a>03073   length += <a class="code" href="ospf__packet_8c.html#aae99e08e101483b1f7ceeeb0d9479625">ospf_make_hello</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03074"></a>03074 
<a name="l03075"></a>03075   <span class="comment">/* Fill OSPF header. */</span>
<a name="l03076"></a>03076   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l03077"></a>03077 
<a name="l03078"></a>03078   <span class="comment">/* Set packet length. */</span>
<a name="l03079"></a>03079   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03080"></a>03080 
<a name="l03081"></a>03081   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l03082"></a>03082     {
<a name="l03083"></a>03083       <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l03084"></a>03084       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03085"></a>03085 
<a name="l03086"></a>03086       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03087"></a>03087     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
<a name="l03088"></a>03088       <span class="keywordflow">if</span> (nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>)
<a name="l03089"></a>03089         <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a>)
<a name="l03090"></a>03090           {
<a name="l03091"></a>03091         <span class="comment">/*  RFC 2328  Section 9.5.1</span>
<a name="l03092"></a>03092 <span class="comment">            If the router is not eligible to become Designated Router,</span>
<a name="l03093"></a>03093 <span class="comment">            it must periodically send Hello Packets to both the</span>
<a name="l03094"></a>03094 <span class="comment">            Designated Router and the Backup Designated Router (if they</span>
<a name="l03095"></a>03095 <span class="comment">            exist).  */</span>
<a name="l03096"></a>03096         <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#accb5457e43688e067b0b9844b08ae520">PRIORITY</a>(oi) == 0 &amp;&amp;
<a name="l03097"></a>03097             <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a>(&amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a>(oi),  &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) &amp;&amp;
<a name="l03098"></a>03098             <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a>(&amp;<a class="code" href="ospf__interface_8h.html#ab9a182dc79cc0d10a77a27c60f2351cd">BDR</a>(oi), &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l03099"></a>03099           <span class="keywordflow">continue</span>;
<a name="l03100"></a>03100 
<a name="l03101"></a>03101         <span class="comment">/*  If the router is eligible to become Designated Router, it</span>
<a name="l03102"></a>03102 <span class="comment">            must periodically send Hello Packets to all neighbors that</span>
<a name="l03103"></a>03103 <span class="comment">            are also eligible. In addition, if the router is itself the</span>
<a name="l03104"></a>03104 <span class="comment">            Designated Router or Backup Designated Router, it must also</span>
<a name="l03105"></a>03105 <span class="comment">            send periodic Hello Packets to all other neighbors. */</span>
<a name="l03106"></a>03106 
<a name="l03107"></a>03107         <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a> == 0 &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a63c91d64f244427665286ca82eaeea04">ISM_DROther</a>)
<a name="l03108"></a>03108           <span class="keywordflow">continue</span>;
<a name="l03109"></a>03109         <span class="comment">/* if oi-&gt;state == Waiting, send hello to all neighbors */</span>
<a name="l03110"></a>03110         {
<a name="l03111"></a>03111           <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op_dup;
<a name="l03112"></a>03112 
<a name="l03113"></a>03113           op_dup = <a class="code" href="ospf__packet_8c.html#a47248d16b5708ee3b44409020a6bb125">ospf_packet_dup</a>(op);
<a name="l03114"></a>03114           op_dup-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a> = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l03115"></a>03115 
<a name="l03116"></a>03116           <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03117"></a>03117           <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op_dup);
<a name="l03118"></a>03118 
<a name="l03119"></a>03119           <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03120"></a>03120         }
<a name="l03121"></a>03121 
<a name="l03122"></a>03122           }
<a name="l03123"></a>03123       <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (op);
<a name="l03124"></a>03124     }
<a name="l03125"></a>03125   <span class="keywordflow">else</span>
<a name="l03126"></a>03126     {
<a name="l03127"></a>03127       <span class="comment">/* Decide destination address. */</span>
<a name="l03128"></a>03128       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l03129"></a>03129     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>.s_addr;
<a name="l03130"></a>03130       <span class="keywordflow">else</span> 
<a name="l03131"></a>03131     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03132"></a>03132 
<a name="l03133"></a>03133       <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03134"></a>03134       <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l03135"></a>03135 
<a name="l03136"></a>03136       <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03137"></a>03137       <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03138"></a>03138     }
<a name="l03139"></a>03139 }
<a name="l03140"></a>03140 
<a name="l03141"></a>03141 <span class="comment">/* Send OSPF Database Description. */</span>
<a name="l03142"></a>03142 <span class="keywordtype">void</span>
<a name="l03143"></a><a class="code" href="ospf__packet_8h.html#a7130ce5d875da36257ad4d60fde78b58">03143</a> <a class="code" href="ospf__packet_8c.html#adaf5568141a0f47dc301981cfb92fbfb">ospf_db_desc_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l03144"></a>03144 {
<a name="l03145"></a>03145   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l03146"></a>03146   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l03147"></a>03147   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l03148"></a>03148 
<a name="l03149"></a>03149   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l03150"></a>03150   op = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l03151"></a>03151 
<a name="l03152"></a>03152   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l03153"></a>03153   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#a367312ccca45c75e90fd72d241fa1628">OSPF_MSG_DB_DESC</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03154"></a>03154 
<a name="l03155"></a>03155   <span class="comment">/* Prepare OSPF Database Description body. */</span>
<a name="l03156"></a>03156   length += <a class="code" href="ospf__packet_8c.html#a2ce501a5599cdabe2d6a9f1beea1fd14">ospf_make_db_desc</a> (oi, nbr, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03157"></a>03157 
<a name="l03158"></a>03158   <span class="comment">/* Fill OSPF header. */</span>
<a name="l03159"></a>03159   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l03160"></a>03160 
<a name="l03161"></a>03161   <span class="comment">/* Set packet length. */</span>
<a name="l03162"></a>03162   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03163"></a>03163 
<a name="l03164"></a>03164   <span class="comment">/* Decide destination address. */</span>
<a name="l03165"></a>03165   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>) 
<a name="l03166"></a>03166     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03167"></a>03167   <span class="keywordflow">else</span>
<a name="l03168"></a>03168     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a> = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l03169"></a>03169 
<a name="l03170"></a>03170   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03171"></a>03171   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l03172"></a>03172 
<a name="l03173"></a>03173   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03174"></a>03174   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03175"></a>03175 
<a name="l03176"></a>03176   <span class="comment">/* Remove old DD packet, then copy new one and keep in neighbor structure. */</span>
<a name="l03177"></a>03177   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae5321e0cc874246d0002917b591ee3d0">last_send</a>)
<a name="l03178"></a>03178     <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae5321e0cc874246d0002917b591ee3d0">last_send</a>);
<a name="l03179"></a>03179   nbr-&gt;<a class="code" href="structospf__neighbor.html#ae5321e0cc874246d0002917b591ee3d0">last_send</a> = <a class="code" href="ospf__packet_8c.html#a47248d16b5708ee3b44409020a6bb125">ospf_packet_dup</a> (op);
<a name="l03180"></a>03180   <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ae7ca27d679d64ea0244355b1ebff4e1b">last_send_ts</a>);
<a name="l03181"></a>03181 }
<a name="l03182"></a>03182 
<a name="l03183"></a>03183 <span class="comment">/* Re-send Database Description. */</span>
<a name="l03184"></a>03184 <span class="keywordtype">void</span>
<a name="l03185"></a><a class="code" href="ospf__packet_8h.html#ab49647de83d0bca25a302a47b3f0d25c">03185</a> <a class="code" href="ospf__packet_8c.html#a822058f9ec5fa23f5f9cb5a57ba4d8c1">ospf_db_desc_resend</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l03186"></a>03186 {
<a name="l03187"></a>03187   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l03188"></a>03188 
<a name="l03189"></a>03189   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l03190"></a>03190 
<a name="l03191"></a>03191   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03192"></a>03192   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, <a class="code" href="ospf__packet_8c.html#a47248d16b5708ee3b44409020a6bb125">ospf_packet_dup</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae5321e0cc874246d0002917b591ee3d0">last_send</a>));
<a name="l03193"></a>03193 
<a name="l03194"></a>03194   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03195"></a>03195   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03196"></a>03196 }
<a name="l03197"></a>03197 
<a name="l03198"></a>03198 <span class="comment">/* Send Link State Request. */</span>
<a name="l03199"></a>03199 <span class="keywordtype">void</span>
<a name="l03200"></a><a class="code" href="ospf__packet_8h.html#a735984b00d09d2a158eaf1d3e2428349">03200</a> <a class="code" href="ospf__packet_8c.html#a6ebacc4d964f773f52e1f4f184d5b622">ospf_ls_req_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l03201"></a>03201 {
<a name="l03202"></a>03202   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l03203"></a>03203   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l03204"></a>03204   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l03205"></a>03205 
<a name="l03206"></a>03206   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l03207"></a>03207   op = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l03208"></a>03208 
<a name="l03209"></a>03209   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l03210"></a>03210   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#a512b62b0a53781cc39bf1e5af29cd87d">OSPF_MSG_LS_REQ</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03211"></a>03211 
<a name="l03212"></a>03212   <span class="comment">/* Prepare OSPF Link State Request body. */</span>
<a name="l03213"></a>03213   length += <a class="code" href="ospf__packet_8c.html#ae4d87c81eeb19a950b4e8da4852401da">ospf_make_ls_req</a> (nbr, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03214"></a>03214   <span class="keywordflow">if</span> (length == <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>)
<a name="l03215"></a>03215     {
<a name="l03216"></a>03216       <a class="code" href="ospf__packet_8c.html#a809c1e09677b5aaee9ed0c336a04a4c6">ospf_packet_free</a> (op);
<a name="l03217"></a>03217       <span class="keywordflow">return</span>;
<a name="l03218"></a>03218     }
<a name="l03219"></a>03219 
<a name="l03220"></a>03220   <span class="comment">/* Fill OSPF header. */</span>
<a name="l03221"></a>03221   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l03222"></a>03222 
<a name="l03223"></a>03223   <span class="comment">/* Set packet length. */</span>
<a name="l03224"></a>03224   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03225"></a>03225 
<a name="l03226"></a>03226   <span class="comment">/* Decide destination address. */</span>
<a name="l03227"></a>03227   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>) 
<a name="l03228"></a>03228     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03229"></a>03229   <span class="keywordflow">else</span>
<a name="l03230"></a>03230     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a> = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l03231"></a>03231 
<a name="l03232"></a>03232   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03233"></a>03233   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l03234"></a>03234 
<a name="l03235"></a>03235   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03236"></a>03236   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03237"></a>03237 
<a name="l03238"></a>03238   <span class="comment">/* Add Link State Request Retransmission Timer. */</span>
<a name="l03239"></a>03239   <a class="code" href="ospf__nsm_8h.html#a13172a390c4ab15fea61d66d2c9262d9">OSPF_NSM_TIMER_ON</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ae92276b22586f96e9022efd0a447793b">t_ls_req</a>, <a class="code" href="ospf__packet_8c.html#ad3a6a5d5edd50ea50ea23dbc17d4fb0b">ospf_ls_req_timer</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a7f247fc2d724d69acef918ad766be6f6">v_ls_req</a>);
<a name="l03240"></a>03240 }
<a name="l03241"></a>03241 
<a name="l03242"></a>03242 <span class="comment">/* Send Link State Update with an LSA. */</span>
<a name="l03243"></a>03243 <span class="keywordtype">void</span>
<a name="l03244"></a><a class="code" href="ospf__packet_8h.html#adc5da1b60477e64c8997d798ef6ac03b">03244</a> <a class="code" href="ospf__packet_8c.html#a725d9c1aa0cf357d4411f9bcbad7d441">ospf_ls_upd_send_lsa</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa,
<a name="l03245"></a>03245               <span class="keywordtype">int</span> flag)
<a name="l03246"></a>03246 {
<a name="l03247"></a>03247   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *update;
<a name="l03248"></a>03248 
<a name="l03249"></a>03249   update = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l03250"></a>03250 
<a name="l03251"></a>03251   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (update, lsa);
<a name="l03252"></a>03252   <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (nbr, update, flag);
<a name="l03253"></a>03253 
<a name="l03254"></a>03254   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (update);
<a name="l03255"></a>03255 }
<a name="l03256"></a>03256 
<a name="l03257"></a>03257 <span class="comment">/* Determine size for packet. Must be at least big enough to accomodate next</span>
<a name="l03258"></a>03258 <span class="comment"> * LSA on list, which may be bigger than MTU size.</span>
<a name="l03259"></a>03259 <span class="comment"> *</span>
<a name="l03260"></a>03260 <span class="comment"> * Return pointer to new ospf_packet</span>
<a name="l03261"></a>03261 <span class="comment"> * NULL if we can not allocate, eg because LSA is bigger than imposed limit</span>
<a name="l03262"></a>03262 <span class="comment"> * on packet sizes (in which case offending LSA is deleted from update list)</span>
<a name="l03263"></a>03263 <span class="comment"> */</span>
<a name="l03264"></a>03264 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *
<a name="l03265"></a><a class="code" href="ospf__packet_8c.html#a9dbd9d6401dd2cb5844daa9b5cc0b1bd">03265</a> <a class="code" href="ospf__packet_8c.html#a9dbd9d6401dd2cb5844daa9b5cc0b1bd">ospf_ls_upd_packet_new</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *update, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l03266"></a>03266 {
<a name="l03267"></a>03267   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l03268"></a>03268   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln;
<a name="l03269"></a>03269   <span class="keywordtype">size_t</span> size;
<a name="l03270"></a>03270   <span class="keyword">static</span> <span class="keywordtype">char</span> warned = 0;
<a name="l03271"></a>03271 
<a name="l03272"></a>03272   lsa = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>((ln = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (update)));
<a name="l03273"></a>03273   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
<a name="l03274"></a>03274 
<a name="l03275"></a>03275   <span class="keywordflow">if</span> ((<a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a> + ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>))
<a name="l03276"></a>03276       &gt; <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (oi))
<a name="l03277"></a>03277     {
<a name="l03278"></a>03278       <span class="keywordflow">if</span> (!warned)
<a name="l03279"></a>03279         {
<a name="l03280"></a>03280           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_ls_upd_packet_new: oversized LSA encountered!&quot;</span>
<a name="l03281"></a>03281                      <span class="stringliteral">&quot;will need to fragment. Not optimal. Try divide up&quot;</span>
<a name="l03282"></a>03282                      <span class="stringliteral">&quot; your network with areas. Use &#39;debug ospf packet send&#39;&quot;</span>
<a name="l03283"></a>03283                      <span class="stringliteral">&quot; to see details, or look at &#39;show ip ospf database ..&#39;&quot;</span>);
<a name="l03284"></a>03284           warned = 1;
<a name="l03285"></a>03285         }
<a name="l03286"></a>03286 
<a name="l03287"></a>03287       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a50782c413033fa4a13d47121831e0ab1">IS_DEBUG_OSPF_PACKET</a> (0, <a class="code" href="bgp__debug_8h.html#abc9603445bf79a3793831ee1d0ea8890">SEND</a>))
<a name="l03288"></a>03288         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ls_upd_packet_new: oversized LSA id:%s,&quot;</span>
<a name="l03289"></a>03289                    <span class="stringliteral">&quot; %d bytes originated by %s, will be fragmented!&quot;</span>,
<a name="l03290"></a>03290                    inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
<a name="l03291"></a>03291                    ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>),
<a name="l03292"></a>03292                    inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>));
<a name="l03293"></a>03293 
<a name="l03294"></a>03294       <span class="comment">/* </span>
<a name="l03295"></a>03295 <span class="comment">       * Allocate just enough to fit this LSA only, to avoid including other</span>
<a name="l03296"></a>03296 <span class="comment">       * LSAs in fragmented LSA Updates.</span>
<a name="l03297"></a>03297 <span class="comment">       */</span>
<a name="l03298"></a>03298       size = ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) + (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> - <a class="code" href="ospf__packet_8c.html#aa9e355c099a3d0482b58446566f47619">ospf_packet_max</a> (oi))
<a name="l03299"></a>03299              + <a class="code" href="ospf__packet_8h.html#a003fcbfbe0b11e037553bead044725d8">OSPF_LS_UPD_MIN_SIZE</a>;
<a name="l03300"></a>03300     }
<a name="l03301"></a>03301   <span class="keywordflow">else</span>
<a name="l03302"></a>03302     size = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>;
<a name="l03303"></a>03303 
<a name="l03304"></a>03304   <span class="keywordflow">if</span> (size &gt; <a class="code" href="ospf__packet_8h.html#a931e4cc5c8888b6cf1d91636fd4340a6">OSPF_MAX_PACKET_SIZE</a>)
<a name="l03305"></a>03305     {
<a name="l03306"></a>03306       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_ls_upd_packet_new: oversized LSA id:%s too big,&quot;</span>
<a name="l03307"></a>03307                  <span class="stringliteral">&quot; %d bytes, packet size %ld, dropping it completely.&quot;</span>
<a name="l03308"></a>03308                  <span class="stringliteral">&quot; OSPF routing is broken!&quot;</span>,
<a name="l03309"></a>03309                  inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>),
<a name="l03310"></a>03310                  (<span class="keywordtype">long</span> <span class="keywordtype">int</span>) size);
<a name="l03311"></a>03311       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (update, ln);
<a name="l03312"></a>03312       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03313"></a>03313     }
<a name="l03314"></a>03314 
<a name="l03315"></a>03315   <span class="comment">/* IP header is built up separately by ospf_write(). This means, that we must</span>
<a name="l03316"></a>03316 <span class="comment">   * reduce the &quot;affordable&quot; size just calculated by length of an IP header.</span>
<a name="l03317"></a>03317 <span class="comment">   * This makes sure, that even if we manage to fill the payload with LSA data</span>
<a name="l03318"></a>03318 <span class="comment">   * completely, the final packet (our data plus IP header) still fits into</span>
<a name="l03319"></a>03319 <span class="comment">   * outgoing interface MTU. This correction isn&#39;t really meaningful for an</span>
<a name="l03320"></a>03320 <span class="comment">   * oversized LSA, but for consistency the correction is done for both cases.</span>
<a name="l03321"></a>03321 <span class="comment">   *</span>
<a name="l03322"></a>03322 <span class="comment">   * P.S. OSPF_MAX_PACKET_SIZE above already includes IP header size</span>
<a name="l03323"></a>03323 <span class="comment">   */</span>
<a name="l03324"></a>03324   <span class="keywordflow">return</span> <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (size - <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a>));
<a name="l03325"></a>03325 }
<a name="l03326"></a>03326 
<a name="l03327"></a>03327 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03328"></a><a class="code" href="ospf__packet_8c.html#a6a51e2532d43e91794a7ef6a8ace4e93">03328</a> <a class="code" href="ospf__packet_8c.html#a6a51e2532d43e91794a7ef6a8ace4e93">ospf_ls_upd_queue_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *update,
<a name="l03329"></a>03329             <span class="keyword">struct</span> in_addr addr)
<a name="l03330"></a>03330 {
<a name="l03331"></a>03331   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l03332"></a>03332   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l03333"></a>03333 
<a name="l03334"></a>03334   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l03335"></a>03335     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;listcount = %d, dst %s&quot;</span>, <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (update), inet_ntoa(addr));
<a name="l03336"></a>03336   
<a name="l03337"></a>03337   op = <a class="code" href="ospf__packet_8c.html#a9dbd9d6401dd2cb5844daa9b5cc0b1bd">ospf_ls_upd_packet_new</a> (update, oi);
<a name="l03338"></a>03338 
<a name="l03339"></a>03339   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l03340"></a>03340   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#a2021ef5cd86ec563bffe0a94f3d23a9e">OSPF_MSG_LS_UPD</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03341"></a>03341 
<a name="l03342"></a>03342   <span class="comment">/* Prepare OSPF Link State Update body.</span>
<a name="l03343"></a>03343 <span class="comment">   * Includes Type-7 translation. </span>
<a name="l03344"></a>03344 <span class="comment">   */</span>
<a name="l03345"></a>03345   length += <a class="code" href="ospf__packet_8c.html#aea2d7141af895fb08dfd6093eef6cebd">ospf_make_ls_upd</a> (oi, update, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03346"></a>03346 
<a name="l03347"></a>03347   <span class="comment">/* Fill OSPF header. */</span>
<a name="l03348"></a>03348   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l03349"></a>03349 
<a name="l03350"></a>03350   <span class="comment">/* Set packet length. */</span>
<a name="l03351"></a>03351   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03352"></a>03352 
<a name="l03353"></a>03353   <span class="comment">/* Decide destination address. */</span>
<a name="l03354"></a>03354   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>) 
<a name="l03355"></a>03355     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03356"></a>03356   <span class="keywordflow">else</span>
<a name="l03357"></a>03357     op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>.s_addr = addr.s_addr;
<a name="l03358"></a>03358 
<a name="l03359"></a>03359   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03360"></a>03360   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l03361"></a>03361 
<a name="l03362"></a>03362   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03363"></a>03363   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03364"></a>03364 }
<a name="l03365"></a>03365 
<a name="l03366"></a>03366 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03367"></a><a class="code" href="ospf__packet_8c.html#a290998f889abb3e0de6f5d242d763090">03367</a> <a class="code" href="ospf__packet_8c.html#a290998f889abb3e0de6f5d242d763090">ospf_ls_upd_send_queue_event</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l03368"></a>03368 {
<a name="l03369"></a>03369   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a>(thread);
<a name="l03370"></a>03370   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03371"></a>03371   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rnext;
<a name="l03372"></a>03372   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *update;
<a name="l03373"></a>03373   <span class="keywordtype">char</span> again = 0;
<a name="l03374"></a>03374   
<a name="l03375"></a>03375   oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03376"></a>03376 
<a name="l03377"></a>03377   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l03378"></a>03378     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ls_upd_send_queue start&quot;</span>);
<a name="l03379"></a>03379 
<a name="l03380"></a>03380   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a>); rn; rn = rnext)
<a name="l03381"></a>03381     {
<a name="l03382"></a>03382       rnext = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
<a name="l03383"></a>03383       
<a name="l03384"></a>03384       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03385"></a>03385         <span class="keywordflow">continue</span>;
<a name="l03386"></a>03386       
<a name="l03387"></a>03387       update = (<span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *)rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l03388"></a>03388 
<a name="l03389"></a>03389       <a class="code" href="ospf__packet_8c.html#a6a51e2532d43e91794a7ef6a8ace4e93">ospf_ls_upd_queue_send</a> (oi, update, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l03390"></a>03390       
<a name="l03391"></a>03391       <span class="comment">/* list might not be empty. */</span>
<a name="l03392"></a>03392       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a>(update) == 0)
<a name="l03393"></a>03393         {
<a name="l03394"></a>03394           <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l03395"></a>03395           rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03396"></a>03396           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03397"></a>03397         }
<a name="l03398"></a>03398       <span class="keywordflow">else</span>
<a name="l03399"></a>03399         again = 1;
<a name="l03400"></a>03400     }
<a name="l03401"></a>03401 
<a name="l03402"></a>03402   <span class="keywordflow">if</span> (again != 0)
<a name="l03403"></a>03403     {
<a name="l03404"></a>03404       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l03405"></a>03405         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ls_upd_send_queue: update lists not cleared,&quot;</span>
<a name="l03406"></a>03406                    <span class="stringliteral">&quot; %d nodes to try again, raising new event&quot;</span>, again);
<a name="l03407"></a>03407       oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> = 
<a name="l03408"></a>03408         <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#a290998f889abb3e0de6f5d242d763090">ospf_ls_upd_send_queue_event</a>, oi, 0);
<a name="l03409"></a>03409     }
<a name="l03410"></a>03410 
<a name="l03411"></a>03411   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l03412"></a>03412     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ls_upd_send_queue stop&quot;</span>);
<a name="l03413"></a>03413   
<a name="l03414"></a>03414   <span class="keywordflow">return</span> 0;
<a name="l03415"></a>03415 }
<a name="l03416"></a>03416 
<a name="l03417"></a>03417 <span class="keywordtype">void</span>
<a name="l03418"></a><a class="code" href="ospf__packet_8h.html#a2375af385f6283629913b25806adb40a">03418</a> <a class="code" href="ospf__packet_8c.html#a7af98d8a4ccc0fc5777ae1b8512d7cbd">ospf_ls_upd_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *update, <span class="keywordtype">int</span> flag)
<a name="l03419"></a>03419 {
<a name="l03420"></a>03420   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l03421"></a>03421   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l03422"></a>03422   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l03423"></a>03423   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03424"></a>03424   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l03425"></a>03425   
<a name="l03426"></a>03426   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l03427"></a>03427 
<a name="l03428"></a>03428   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l03429"></a>03429   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l03430"></a>03430   
<a name="l03431"></a>03431   <span class="comment">/* Decide destination address. */</span>
<a name="l03432"></a>03432   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l03433"></a>03433     p.prefix = oi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>;
<a name="l03434"></a>03434   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>) 
<a name="l03435"></a>03435      p.prefix.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03436"></a>03436   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>)
<a name="l03437"></a>03437      p.prefix = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l03438"></a>03438   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a> || oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)
<a name="l03439"></a>03439      p.prefix.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03440"></a>03440   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#aa65cd67781b9573131ead326b8976194">OSPF_IFTYPE_POINTOMULTIPOINT</a>)
<a name="l03441"></a>03441      p.prefix.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03442"></a>03442   <span class="keywordflow">else</span>
<a name="l03443"></a>03443      p.prefix.s_addr = htonl (<a class="code" href="ospfd_8h.html#a8ba5ca00e358c35a32b660dc87e4b7cd">OSPF_ALLDROUTERS</a>);
<a name="l03444"></a>03444 
<a name="l03445"></a>03445   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l03446"></a>03446     {
<a name="l03447"></a>03447       <span class="keywordflow">if</span> (flag == <a class="code" href="ospf__packet_8h.html#a76f6e5970f4cddaa077a801063a4c0ef">OSPF_SEND_PACKET_INDIRECT</a>)
<a name="l03448"></a>03448     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;* LS-Update is directly sent on NBMA network.&quot;</span>);
<a name="l03449"></a>03449       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;p.prefix.s_addr))
<a name="l03450"></a>03450     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;* LS-Update is sent to myself.&quot;</span>);
<a name="l03451"></a>03451     }
<a name="l03452"></a>03452 
<a name="l03453"></a>03453   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l03454"></a>03454 
<a name="l03455"></a>03455   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03456"></a>03456     rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l03457"></a>03457 
<a name="l03458"></a>03458   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (update, node, lsa))
<a name="l03459"></a>03459     <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa)); <span class="comment">/* oi-&gt;ls_upd_queue */</span>
<a name="l03460"></a>03460 
<a name="l03461"></a>03461   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03462"></a>03462     oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> =
<a name="l03463"></a>03463       <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#a290998f889abb3e0de6f5d242d763090">ospf_ls_upd_send_queue_event</a>, oi, 0);
<a name="l03464"></a>03464 }
<a name="l03465"></a>03465 
<a name="l03466"></a>03466 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03467"></a><a class="code" href="ospf__packet_8c.html#a5daf949f0e045297ba11fcb03408e301">03467</a> <a class="code" href="ospf__packet_8c.html#a5daf949f0e045297ba11fcb03408e301">ospf_ls_ack_send_list</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *ack,
<a name="l03468"></a>03468                <span class="keyword">struct</span> in_addr dst)
<a name="l03469"></a>03469 {
<a name="l03470"></a>03470   <span class="keyword">struct </span><a class="code" href="structospf__packet.html">ospf_packet</a> *op;
<a name="l03471"></a>03471   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> = <a class="code" href="ospf__packet_8h.html#aa0e82e0da0245541e042fcad8b9a0f2e">OSPF_HEADER_SIZE</a>;
<a name="l03472"></a>03472 
<a name="l03473"></a>03473   op = <a class="code" href="ospf__packet_8c.html#aa2f83b94a7be3ca5a93f9fa65dfe1bc1">ospf_packet_new</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l03474"></a>03474 
<a name="l03475"></a>03475   <span class="comment">/* Prepare OSPF common header. */</span>
<a name="l03476"></a>03476   <a class="code" href="ospf__packet_8c.html#a96ce66f46bd9e9357b585540470e33c0">ospf_make_header</a> (<a class="code" href="ospf__packet_8h.html#ad9b68de6334b262d7ca66dac18c96f48">OSPF_MSG_LS_ACK</a>, oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03477"></a>03477 
<a name="l03478"></a>03478   <span class="comment">/* Prepare OSPF Link State Acknowledgment body. */</span>
<a name="l03479"></a>03479   length += <a class="code" href="ospf__packet_8c.html#a324f3d5d86502fad05924e8ccf2fe128">ospf_make_ls_ack</a> (oi, ack, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>);
<a name="l03480"></a>03480 
<a name="l03481"></a>03481   <span class="comment">/* Fill OSPF header. */</span>
<a name="l03482"></a>03482   <a class="code" href="ospf__packet_8c.html#a200c548a243d95de3095eb0efff76458">ospf_fill_header</a> (oi, op-&gt;<a class="code" href="structospf__packet.html#a5ebe2d160ac3b91233387fc87eff17f3">s</a>, length);
<a name="l03483"></a>03483 
<a name="l03484"></a>03484   <span class="comment">/* Set packet length. */</span>
<a name="l03485"></a>03485   op-&gt;<a class="code" href="structospf__packet.html#aa88c6259af943426a28bd5f1dabab596">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l03486"></a>03486 
<a name="l03487"></a>03487   <span class="comment">/* Set destination IP address. */</span>
<a name="l03488"></a>03488   op-&gt;<a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a> = <a class="code" href="structospf__packet.html#a37ac8ced9627ad1a210e214aa94cc2e7">dst</a>;
<a name="l03489"></a>03489   
<a name="l03490"></a>03490   <span class="comment">/* Add packet to the interface output queue. */</span>
<a name="l03491"></a>03491   <a class="code" href="ospf__packet_8c.html#ac55f65cc4d651ee73476c4eb974ce055">ospf_packet_add</a> (oi, op);
<a name="l03492"></a>03492 
<a name="l03493"></a>03493   <span class="comment">/* Hook thread to write packet. */</span>
<a name="l03494"></a>03494   <a class="code" href="ospf__ism_8h.html#acd2a285495892c5423a0c4894c43ce94">OSPF_ISM_WRITE_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>);
<a name="l03495"></a>03495 }
<a name="l03496"></a>03496 
<a name="l03497"></a>03497 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03498"></a><a class="code" href="ospf__packet_8c.html#aba45b62b61a78861e6e6e6f12e4d9a35">03498</a> <a class="code" href="ospf__packet_8c.html#aba45b62b61a78861e6e6e6f12e4d9a35">ospf_ls_ack_send_event</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l03499"></a>03499 {
<a name="l03500"></a>03500   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l03501"></a>03501 
<a name="l03502"></a>03502   oi-&gt;<a class="code" href="structospf__interface.html#a1fef0480466c761ca2921c55748b9d53">t_ls_ack_direct</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03503"></a>03503   
<a name="l03504"></a>03504   <span class="keywordflow">while</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>))
<a name="l03505"></a>03505     <a class="code" href="ospf__packet_8c.html#a5daf949f0e045297ba11fcb03408e301">ospf_ls_ack_send_list</a> (oi, oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>,
<a name="l03506"></a>03506                oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#a19d6a7edb5bceb7d3928aec92808f540">dst</a>);
<a name="l03507"></a>03507 
<a name="l03508"></a>03508   <span class="keywordflow">return</span> 0;
<a name="l03509"></a>03509 }
<a name="l03510"></a>03510 
<a name="l03511"></a>03511 <span class="keywordtype">void</span>
<a name="l03512"></a><a class="code" href="ospf__packet_8h.html#a6ed680a77d300ba61ccb044a10ce6671">03512</a> <a class="code" href="ospf__packet_8c.html#a0526da5e78520753054e11e7520f5c99">ospf_ls_ack_send</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l03513"></a>03513 {
<a name="l03514"></a>03514   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l03515"></a>03515 
<a name="l03516"></a>03516   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>) == 0)
<a name="l03517"></a>03517     oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#a19d6a7edb5bceb7d3928aec92808f540">dst</a> = nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l03518"></a>03518   
<a name="l03519"></a>03519   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa));
<a name="l03520"></a>03520   
<a name="l03521"></a>03521   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a1fef0480466c761ca2921c55748b9d53">t_ls_ack_direct</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03522"></a>03522     oi-&gt;<a class="code" href="structospf__interface.html#a1fef0480466c761ca2921c55748b9d53">t_ls_ack_direct</a> =
<a name="l03523"></a>03523       <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__packet_8c.html#aba45b62b61a78861e6e6e6f12e4d9a35">ospf_ls_ack_send_event</a>, oi, 0);
<a name="l03524"></a>03524 }
<a name="l03525"></a>03525 
<a name="l03526"></a>03526 <span class="comment">/* Send Link State Acknowledgment delayed. */</span>
<a name="l03527"></a>03527 <span class="keywordtype">void</span>
<a name="l03528"></a><a class="code" href="ospf__packet_8h.html#a626b7ed609e96786ecbd315cbaabf768">03528</a> <a class="code" href="ospf__packet_8c.html#a579d018454c1f072266f76db636173c6">ospf_ls_ack_send_delayed</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l03529"></a>03529 {
<a name="l03530"></a>03530   <span class="keyword">struct </span>in_addr dst;
<a name="l03531"></a>03531   
<a name="l03532"></a>03532   <span class="comment">/* Decide destination address. */</span>
<a name="l03533"></a>03533   <span class="comment">/* RFC2328 Section 13.5                           On non-broadcast</span>
<a name="l03534"></a>03534 <span class="comment">    networks, delayed Link State Acknowledgment packets must be</span>
<a name="l03535"></a>03535 <span class="comment">    unicast separately over each adjacency (i.e., neighbor whose</span>
<a name="l03536"></a>03536 <span class="comment">    state is &gt;= Exchange).  */</span>
<a name="l03537"></a>03537   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l03538"></a>03538     {
<a name="l03539"></a>03539       <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l03540"></a>03540       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03541"></a>03541 
<a name="l03542"></a>03542       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03543"></a>03543     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03544"></a>03544       <span class="keywordflow">if</span> (nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &gt;= <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l03545"></a>03545         <span class="keywordflow">while</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>))
<a name="l03546"></a>03546           <a class="code" href="ospf__packet_8c.html#a5daf949f0e045297ba11fcb03408e301">ospf_ls_ack_send_list</a> (oi, oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l03547"></a>03547       <span class="keywordflow">return</span>;
<a name="l03548"></a>03548     }
<a name="l03549"></a>03549   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l03550"></a>03550     dst.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>.s_addr;
<a name="l03551"></a>03551   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a> || oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)
<a name="l03552"></a>03552     dst.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03553"></a>03553   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>)
<a name="l03554"></a>03554     dst.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03555"></a>03555   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#aa65cd67781b9573131ead326b8976194">OSPF_IFTYPE_POINTOMULTIPOINT</a>)
<a name="l03556"></a>03556     dst.s_addr = htonl (<a class="code" href="ospfd_8h.html#a80bda0f2566dc7b64f07a28562cfb2c1">OSPF_ALLSPFROUTERS</a>);
<a name="l03557"></a>03557   <span class="keywordflow">else</span>
<a name="l03558"></a>03558     dst.s_addr = htonl (<a class="code" href="ospfd_8h.html#a8ba5ca00e358c35a32b660dc87e4b7cd">OSPF_ALLDROUTERS</a>);
<a name="l03559"></a>03559 
<a name="l03560"></a>03560   <span class="keywordflow">while</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>))
<a name="l03561"></a>03561     <a class="code" href="ospf__packet_8c.html#a5daf949f0e045297ba11fcb03408e301">ospf_ls_ack_send_list</a> (oi, oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, dst);
<a name="l03562"></a>03562 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__packet_8c.html">ospf_packet.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
