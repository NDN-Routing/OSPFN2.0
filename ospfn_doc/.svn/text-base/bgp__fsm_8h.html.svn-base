<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_fsm.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__fsm_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_fsm.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__fsm_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__fsm_8hdep" alt=""/></div>
<map name="bgpd_2bgp__fsm_8hdep" id="bgpd_2bgp__fsm_8hdep">
<area shape="rect" id="node3" href="bgp__advertise_8c.html" title="bgpd/bgp_advertise.c" alt="" coords="5,80,160,107"/><area shape="rect" id="node5" href="bgp__fsm_8c.html" title="bgpd/bgp_fsm.c" alt="" coords="185,80,305,107"/><area shape="rect" id="node7" href="bgp__network_8c.html" title="bgpd/bgp_network.c" alt="" coords="330,80,477,107"/><area shape="rect" id="node9" href="bgp__open_8c.html" title="bgpd/bgp_open.c" alt="" coords="503,80,633,107"/><area shape="rect" id="node11" href="bgp__packet_8c.html" title="bgpd/bgp_packet.c" alt="" coords="658,80,797,107"/><area shape="rect" id="node13" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="823,80,953,107"/><area shape="rect" id="node15" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="978,80,1096,107"/><area shape="rect" id="node17" href="bgp__zebra_8c.html" title="bgpd/bgp_zebra.c" alt="" coords="1121,80,1252,107"/><area shape="rect" id="node19" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="1277,80,1376,107"/></map>
</div>
</div>
<p><a href="bgp__fsm_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a62b5746c9e6a92bffde54f2dc61557d7">BGP_READ_ON</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, F, V)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, F, V)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, F, V)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a>(P, E)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#af4f1a52b106aa7dbf3494d0debf644d3">BGP_EVENT_FLUSH</a>(P)</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a0ca676929248063979d5b120114cbccd">bgp_event</a> (struct <a class="el" href="structthread.html">thread</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a23225d6fc2f070dc92db1f6627ec1a29">bgp_timer_set</a> (struct <a class="el" href="structpeer.html">peer</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#ae5bbbc9f4290574b72885050744741fd">bgp_fsm_change_status</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, int status)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__fsm_8h.html#a20174a312cef5d9aa6905c8bf6037020">peer_down_str</a> []</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a20f7fd10817508149783bf6729dd6727"></a><!-- doxytag: member="bgp_fsm.h::BGP_EVENT_ADD" ref="a20f7fd10817508149783bf6729dd6727" args="(P, E)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_EVENT_ADD</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">P, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">E&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if ((P)-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>)         \
      thread_add_event (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__fsm_8c.html#a0ca676929248063979d5b120114cbccd">bgp_event</a>, (P), (E)); \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00062">62</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="af4f1a52b106aa7dbf3494d0debf644d3"></a><!-- doxytag: member="bgp_fsm.h::BGP_EVENT_FLUSH" ref="af4f1a52b106aa7dbf3494d0debf644d3" args="(P)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_EVENT_FLUSH</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">P</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    assert (<a class="code" href="structpeer.html">peer</a>);              \
    thread_cancel_event (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, (P));      \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00068">68</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="abda2b4012d32bfc561f7c97e37263bbe"></a><!-- doxytag: member="bgp_fsm.h::BGP_READ_OFF" ref="abda2b4012d32bfc561f7c97e37263bbe" args="(T)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_READ_OFF</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)                  \
      THREAD_READ_OFF(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>);           \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00032">32</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="a62b5746c9e6a92bffde54f2dc61557d7"></a><!-- doxytag: member="bgp_fsm.h::BGP_READ_ON" ref="a62b5746c9e6a92bffde54f2dc61557d7" args="(T, F, V)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_READ_ON</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">F, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">V&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (!(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>) &amp;&amp; (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>))  \
      THREAD_READ_ON(<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>,<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>,<a class="code" href="md5_8c.html#ad6d7c306af62dbc87d1fcde6cb1bfb0e">F</a>,<a class="code" href="structpeer.html">peer</a>,V);    \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00026">26</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="adc51abba0e065120000e106a628242fe"></a><!-- doxytag: member="bgp_fsm.h::BGP_TIMER_OFF" ref="adc51abba0e065120000e106a628242fe" args="(T)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_TIMER_OFF</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)                  \
      THREAD_TIMER_OFF(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>);          \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00056">56</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="aaf9fcd8314ca70eef21f5689423d7152"></a><!-- doxytag: member="bgp_fsm.h::BGP_TIMER_ON" ref="aaf9fcd8314ca70eef21f5689423d7152" args="(T, F, V)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_TIMER_ON</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">F, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">V&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (!(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>) &amp;&amp; (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>))  \
      THREAD_TIMER_ON(<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>,(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>),(<a class="code" href="md5_8c.html#ad6d7c306af62dbc87d1fcde6cb1bfb0e">F</a>),<a class="code" href="structpeer.html">peer</a>,(V)); \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00050">50</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="a49884b788209354868be2e7e580584ce"></a><!-- doxytag: member="bgp_fsm.h::BGP_WRITE_OFF" ref="a49884b788209354868be2e7e580584ce" args="(T)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_WRITE_OFF</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)                  \
      THREAD_WRITE_OFF(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>);          \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00044">44</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<a class="anchor" id="a441b8dfef999d79ac1c3e3b9573fe516"></a><!-- doxytag: member="bgp_fsm.h::BGP_WRITE_ON" ref="a441b8dfef999d79ac1c3e3b9573fe516" args="(T, F, V)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_WRITE_ON</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">F, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">V&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> {                        \
    if (!(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>) &amp;&amp; (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>))  \
      THREAD_WRITE_ON(<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>,(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>),(<a class="code" href="md5_8c.html#ad6d7c306af62dbc87d1fcde6cb1bfb0e">F</a>),<a class="code" href="structpeer.html">peer</a>,(V)); \
  } <span class="keywordflow">while</span> (0)
</pre></div>
<p>Definition at line <a class="el" href="bgp__fsm_8h_source.html#l00038">38</a> of file <a class="el" href="bgp__fsm_8h_source.html">bgp_fsm.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ca676929248063979d5b120114cbccd"></a><!-- doxytag: member="bgp_fsm.h::bgp_event" ref="a0ca676929248063979d5b120114cbccd" args="(struct thread *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_event </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__fsm_8c_source.html#l01076">1076</a> of file <a class="el" href="bgp__fsm_8c_source.html">bgp_fsm.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret = 0;
  <span class="keywordtype">int</span> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>;
  <span class="keywordtype">int</span> next;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (<a class="code" href="structthread.html">thread</a>);
  <span class="keyword">event</span> = <a class="code" href="thread_8h.html#a88d7c483cad15baac709fac747480a11">THREAD_VAL</a> (<a class="code" href="structthread.html">thread</a>);

  <span class="comment">/* Logging this event. */</span>
  next = <a class="code" href="bgp__fsm_8c.html#aa80c210a6930b131524d9462e32ccad4">FSM</a> [peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> -1][<span class="keyword">event</span> - 1].next_state;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (fsm, <a class="code" href="bgp__fsm_8c.html#aa80c210a6930b131524d9462e32ccad4">FSM</a>) &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != next)
    <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [FSM] %s (%s-&gt;%s)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
           <a class="code" href="bgp__fsm_8c.html#a4a8b0fec5e2e678cd1c5824ab4662ce6">bgp_event_str</a>[event],
           <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>),
           <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, next));

  <span class="comment">/* Call function. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__fsm_8c.html#aa80c210a6930b131524d9462e32ccad4">FSM</a> [peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> -1][event - 1].func)
    ret = (*(<a class="code" href="bgp__fsm_8c.html#aa80c210a6930b131524d9462e32ccad4">FSM</a> [peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> - 1][<span class="keyword">event</span> - 1].func))(peer);

  <span class="comment">/* When function do not want proceed next job return -1. */</span>
  <span class="keywordflow">if</span> (ret &gt;= 0)
    {
      <span class="comment">/* If status is changed. */</span>
      <span class="keywordflow">if</span> (next != peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>)
        <a class="code" href="bgp__fsm_8c.html#ae5bbbc9f4290574b72885050744741fd">bgp_fsm_change_status</a> (peer, next);
      
      <span class="comment">/* Make sure timer is set. */</span>
      <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
    }
  
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae5bbbc9f4290574b72885050744741fd"></a><!-- doxytag: member="bgp_fsm.h::bgp_fsm_change_status" ref="ae5bbbc9f4290574b72885050744741fd" args="(struct peer *peer, int status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_fsm_change_status </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__fsm_8c_source.html#l00401">401</a> of file <a class="el" href="bgp__fsm_8c_source.html">bgp_fsm.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__dump_8c.html#a583bbdd359820c2e8ecd9c64c39e3998">bgp_dump_state</a> (peer, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>, <a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>);

  <span class="comment">/* Transition into Clearing or Deleted must /always/ clear all routes.. </span>
<span class="comment">   * (and must do so before actually changing into Deleted..</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> &gt;= <a class="code" href="bgpd_8h.html#ac1826d1d659fefa5f3c15db9e57f7eb7">Clearing</a>)
    <a class="code" href="bgp__route_8c.html#ac73f860ac71768cc3169bf96512d1b1c">bgp_clear_route_all</a> (peer);
  
  <span class="comment">/* Preserve old status and change into new status. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a6f5e76deea384483efc1f5bb27e51fbf">ostatus</a> = peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>;
  peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = <a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s went from %s to %s&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
        <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#a6f5e76deea384483efc1f5bb27e51fbf">ostatus</a>),
        <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70832c80e2f7e40a453d23689818d84a"></a><!-- doxytag: member="bgp_fsm.h::bgp_stop" ref="a70832c80e2f7e40a453d23689818d84a" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_stop </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__fsm_8c_source.html#l00435">435</a> of file <a class="el" href="bgp__fsm_8c_source.html">bgp_fsm.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keywordtype">char</span> orf_name[BUFSIZ];

  <span class="comment">/* Can&#39;t do this in Clearing; events are used for state transitions */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#ac1826d1d659fefa5f3c15db9e57f7eb7">Clearing</a>)
    {
      <span class="comment">/* Delete all existing events of the peer */</span>
      <a class="code" href="bgp__fsm_8h.html#af4f1a52b106aa7dbf3494d0debf644d3">BGP_EVENT_FLUSH</a> (peer);
    }

  <span class="comment">/* Increment Dropped count. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#adb1885b5103791a47fbb5922536c22c9">dropped</a>++;

      <span class="comment">/* bgp log-neighbor-changes of neighbor Down */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a4871d191e1b11258fc7d58365a8de88b">BGP_FLAG_LOG_NEIGHBOR_CHANGES</a>))
    <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%%ADJCHANGE: neighbor %s Down %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
                   <a class="code" href="bgp__fsm_8c.html#a20174a312cef5d9aa6905c8bf6037020">peer_down_str</a> [(<span class="keywordtype">int</span>) peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a>]);

      <span class="comment">/* graceful restart */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>)
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>);
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart stalepath timer stopped&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart timer started for %d sec&quot;</span>,
              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a>);
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart stalepath timer started for %d sec&quot;</span>,
              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a>);
        }
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (peer-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>, <a class="code" href="bgp__fsm_8c.html#a9e33b04e19f066ddd88661d79b117a1c">bgp_graceful_restart_timer_expire</a>,
            peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a>);
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>, <a class="code" href="bgp__fsm_8c.html#abdf2a409fcad0cf22682f61f74d4f937">bgp_graceful_stale_timer_expire</a>,
            peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>);

      <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
        <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> ; safi &lt; <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a> ; safi++)
          peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[afi][safi] = 0;
    }

      <span class="comment">/* set last reset time */</span>
      peer-&gt;<a class="code" href="structpeer.html#a6b54a3917c026e52541f861b1a7b9cf8">resettime</a> = peer-&gt;<a class="code" href="structpeer.html#a008ca2beea8dd058639039cf2b468844">uptime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>      <a class="code" href="bgp__snmp_8h.html#ad57de0ca6043122ebee75e6a97d18733">bgpTrapBackwardTransition</a> (peer);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

      <span class="comment">/* Reset peer synctime */</span>
      peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a> = 0;
    }

  <span class="comment">/* Stop read and write threads when exists. */</span>
  <a class="code" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>);
  <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);

  <span class="comment">/* Stop all timers. */</span>
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
  <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);

  <span class="comment">/* Stream reset. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = 0;

  <span class="comment">/* Clear input and output buffer.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
    <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>)
    <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>);
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>)
    <a class="code" href="stream_8c.html#a9e1a6e68edeeb87d009b54c7c2b22365">stream_fifo_clean</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);

  <span class="comment">/* Close of file descriptor. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
    {
      close (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
      peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = -1;
    }

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> ; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a> ; safi++)
      {
        <span class="comment">/* Reset all negotiated variables */</span>
        peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 0;
        peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[afi][safi] = 0;
        peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi] = 0;

    <span class="comment">/* peer address family capability flags*/</span>
    peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi] = 0;

    <span class="comment">/* peer address family status flags*/</span>
    peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi] = 0;

    <span class="comment">/* Received ORF prefix-filter */</span>
    peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

        <span class="comment">/* ORF received prefix-filter pnt */</span>
        sprintf (orf_name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
        <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (orf_name);
      }

  <span class="comment">/* Reset keepalive and holdtime */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>))
    {
      peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>;
      peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
    }
  <span class="keywordflow">else</span>
    {
      peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a>;
      peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;
    }

  peer-&gt;<a class="code" href="structpeer.html#a417a77217f3ecfb948016245a4eaf650">update_time</a> = 0;

  <span class="comment">/* Until we are sure that there is no problem about prefix count</span>
<span class="comment">     this should be commented out.*/</span>
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <span class="comment">/* Reset prefix count */</span>
  peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 0;
  peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 0;
  peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>] = 0;
  peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 0;
  peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 0;
<span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a23225d6fc2f070dc92db1f6627ec1a29"></a><!-- doxytag: member="bgp_fsm.h::bgp_timer_set" ref="a23225d6fc2f070dc92db1f6627ec1a29" args="(struct peer *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_timer_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__fsm_8c_source.html#l00080">80</a> of file <a class="el" href="bgp__fsm_8c_source.html">bgp_fsm.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> jitter = 0;

  <span class="keywordflow">switch</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aa87491374c5f1e04e123e51e1dfd043f">Idle</a>:
      <span class="comment">/* First entry point of peer&#39;s finite state machine.  In Idle</span>
<span class="comment">     status start timer is on unless peer is shutdown or peer is</span>
<span class="comment">     inactive.  All other timer must be turned off */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__fsm_8c.html#ad9ce88248446ff0372b352a095212a03">BGP_PEER_START_SUPPRESSED</a> (<a class="code" href="structpeer.html">peer</a>) || ! <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (<a class="code" href="structpeer.html">peer</a>))
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
    }
      <span class="keywordflow">else</span>
    {
      jitter = <a class="code" href="bgp__fsm_8c.html#afbc7bca040c07e81b9431b7b171b2d89">bgp_start_jitter</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a>);
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>, <a class="code" href="bgp__fsm_8c.html#a6376ed698f2472152192884e4834f45e">bgp_start_timer</a>,
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> + jitter);
    }
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>:
      <span class="comment">/* After start timer is expired, the peer moves to Connnect</span>
<span class="comment">         status.  Make sure start timer is off and connect timer is</span>
<span class="comment">         on. */</span>
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>, <a class="code" href="bgp__fsm_8c.html#a00534644637211950775a0c09c30b184">bgp_connect_timer</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a3e4aba4f7d3a690fdce5d1fe31156421">Active</a>:
      <span class="comment">/* Active is waiting connection from remote peer.  And if</span>
<span class="comment">         connect timer is expired, change status to Connect. */</span>
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <span class="comment">/* If peer is passive mode, do not set connect timer. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>, <a class="code" href="bgp__fsm_8c.html#a00534644637211950775a0c09c30b184">bgp_connect_timer</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a>);
    }
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a1873a46d77babce8de80c71ce1624718">OpenSent</a>:
      <span class="comment">/* OpenSent status. */</span>
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> != 0)
    {
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>, <a class="code" href="bgp__fsm_8c.html#a6a478dce126762a49478f511d22e3744">bgp_holdtime_timer</a>, 
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
    }
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a0bf5b4ab03c60ff4c23c94a1d683b0b9">OpenConfirm</a>:
      <span class="comment">/* OpenConfirm status. */</span>
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);

      <span class="comment">/* If the negotiated Hold Time value is zero, then the Hold Time</span>
<span class="comment">         timer and KeepAlive timers are not started. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> == 0)
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>, <a class="code" href="bgp__fsm_8c.html#a6a478dce126762a49478f511d22e3744">bgp_holdtime_timer</a>,
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>, <a class="code" href="bgp__fsm_8c.html#ab1b3731e45da5d4889eb7a8eefe6f647">bgp_keepalive_timer</a>, 
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a>);
    }
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>:
      <span class="comment">/* In Established status start and connect timer is turned</span>
<span class="comment">         off. */</span>
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);

      <span class="comment">/* Same as OpenConfirm, if holdtime is zero then both holdtime</span>
<span class="comment">         and keepalive must be turned off. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> == 0)
    {
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>, <a class="code" href="bgp__fsm_8c.html#a6a478dce126762a49478f511d22e3744">bgp_holdtime_timer</a>,
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#aaf9fcd8314ca70eef21f5689423d7152">BGP_TIMER_ON</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>, <a class="code" href="bgp__fsm_8c.html#ab1b3731e45da5d4889eb7a8eefe6f647">bgp_keepalive_timer</a>,
            <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a>);
    }
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>:
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>);
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ac1826d1d659fefa5f3c15db9e57f7eb7">Clearing</a>:
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad7cf15fc612938449a9ac8d7ed111a91">t_start</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a7badb9ad50dae6376ecaa005318676e4">t_connect</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a84256b6da29b58448f37ed9fd3247bb6">t_holdtime</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4f8889925480578b771c9574e88add27">t_keepalive</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae6ca6f06c2ebc2537ff2f10da05263d3">t_asorig</a>);
      <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a81042b1115a4cc6ced7d496a1aaaacac">t_routeadv</a>);
    }
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a20174a312cef5d9aa6905c8bf6037020"></a><!-- doxytag: member="bgp_fsm.h::peer_down_str" ref="a20174a312cef5d9aa6905c8bf6037020" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="bgp__fsm_8h.html#a20174a312cef5d9aa6905c8bf6037020">peer_down_str</a>[]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__fsm_8c_source.html#l00319">319</a> of file <a class="el" href="bgp__fsm_8c_source.html">bgp_fsm.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__fsm_8h.html">bgp_fsm.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:11 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
