<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_route.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__route_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_route.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__route_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * OSPF routing table.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1999, 2000 Toshiaki Takada</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="ospf__route_8h.html">ospfd/ospf_route.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospf__zebra_8h.html">ospfd/ospf_zebra.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *
<a name="l00044"></a><a class="code" href="ospf__route_8h.html#afef434770bdf4d8099d88849acea8796">00044</a> <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ()
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *<span class="keyword">new</span>;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6a252257efa68529873f79272dcac0cd">MTYPE_OSPF_ROUTE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a>));
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="keyword">new</span>-&gt;ctime = <a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00051"></a>00051   <span class="keyword">new</span>-&gt;mtime = <span class="keyword">new</span>-&gt;ctime;
<a name="l00052"></a>00052   <span class="keyword">new</span>-&gt;paths = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00053"></a>00053   <span class="keyword">new</span>-&gt;paths-&gt;del = (void (*) (<span class="keywordtype">void</span> *))<a class="code" href="ospf__route_8c.html#af3dbe3b97b03134d267d14e78abe0717">ospf_path_free</a>;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="keywordtype">void</span>
<a name="l00059"></a><a class="code" href="ospf__route_8h.html#ac0c95551cba6241cc07c0ed4f0b4ca5d">00059</a> <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *or)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061   <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>)
<a name="l00062"></a>00062       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6a252257efa68529873f79272dcac0cd">MTYPE_OSPF_ROUTE</a>, or);
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *
<a name="l00068"></a><a class="code" href="ospf__route_8h.html#a9b785f31ebd99b3fc947d42a863246a1">00068</a> <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ()
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *<span class="keyword">new</span>;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4ca1dee1bc47bb6af075fc21e679b640">MTYPE_OSPF_PATH</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a>));
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *
<a name="l00078"></a><a class="code" href="ospf__route_8c.html#a0b27d3d8b6654d4f2129a1d9d1c52d24">00078</a> <a class="code" href="ospf__route_8c.html#a0b27d3d8b6654d4f2129a1d9d1c52d24">ospf_path_dup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a> *path)
<a name="l00079"></a>00079 {
<a name="l00080"></a>00080   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *<span class="keyword">new</span>;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082   <span class="keyword">new</span> = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
<a name="l00083"></a>00083   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<span class="keyword">new</span>, path, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a>));
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="keywordtype">void</span>
<a name="l00089"></a><a class="code" href="ospf__route_8h.html#a53cb935f05ae4282aa3063df79b29729">00089</a> <a class="code" href="ospf__route_8c.html#af3dbe3b97b03134d267d14e78abe0717">ospf_path_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a> *op)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4ca1dee1bc47bb6af075fc21e679b640">MTYPE_OSPF_PATH</a>, op);
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="keywordtype">void</span>
<a name="l00095"></a><a class="code" href="ospf__route_8h.html#a087e74bf1d18b0046f5f217823c50274">00095</a> <a class="code" href="ospf__route_8c.html#aa7c274fb5c9182db7291a1e03aadf4c4">ospf_route_delete</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00098"></a>00098   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00101"></a>00101     <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00102"></a>00102       {
<a name="l00103"></a>00103     <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
<a name="l00104"></a>00104       <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>,
<a name="l00105"></a>00105                        or);
<a name="l00106"></a>00106     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
<a name="l00107"></a>00107       <a class="code" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l00108"></a>00108       }
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="keywordtype">void</span>
<a name="l00112"></a><a class="code" href="ospf__route_8h.html#aee4a7971ef96274398a7346b3bdda59f">00112</a> <a class="code" href="ospf__route_8c.html#a1af9a7462973d18c31f1f610ff70e338">ospf_route_table_free</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt)
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00115"></a>00115   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00118"></a>00118     <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00119"></a>00119       {
<a name="l00120"></a>00120     <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00123"></a>00123     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00124"></a>00124       }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126    <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (rt);
<a name="l00127"></a>00127 }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="comment">/* If a prefix and a nexthop match any route in the routing table,</span>
<a name="l00130"></a>00130 <span class="comment">   then return 1, otherwise return 0. */</span>
<a name="l00131"></a>00131 <span class="keywordtype">int</span>
<a name="l00132"></a><a class="code" href="ospf__route_8h.html#aedcf15195b0c02c469a4182de9a8687b">00132</a> <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="structprefix.html">prefix</a>,
<a name="l00133"></a>00133                <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *newor)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00136"></a>00136   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00137"></a>00137   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;
<a name="l00138"></a>00138   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *newop;
<a name="l00139"></a>00139   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1;
<a name="l00140"></a>00140   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n2;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordflow">if</span> (! rt || ! prefix)
<a name="l00143"></a>00143     <span class="keywordflow">return</span> 0;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145    rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rt, (<span class="keyword">struct</span> prefix *) prefix);
<a name="l00146"></a>00146    <span class="keywordflow">if</span> (! rn || ! rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00147"></a>00147      <span class="keywordflow">return</span> 0;
<a name="l00148"></a>00148  
<a name="l00149"></a>00149    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00150"></a>00150 
<a name="l00151"></a>00151    or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00152"></a>00152    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == newor-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> &amp;&amp; or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> == newor-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
<a name="l00153"></a>00153      {
<a name="l00154"></a>00154        <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
<a name="l00155"></a>00155      {
<a name="l00156"></a>00156        <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != newor-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
<a name="l00157"></a>00157          <span class="keywordflow">return</span> 0;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159        <span class="comment">/* Check each path. */</span>
<a name="l00160"></a>00160        <span class="keywordflow">for</span> (n1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>), n2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (newor-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00161"></a>00161         n1 &amp;&amp; n2; n1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n1), n2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n2))
<a name="l00162"></a>00162          { 
<a name="l00163"></a>00163            op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n1);
<a name="l00164"></a>00164            newop = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n2);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166            <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;newop-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
<a name="l00167"></a>00167          <span class="keywordflow">return</span> 0;
<a name="l00168"></a>00168            <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> != newop-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>)
<a name="l00169"></a>00169          <span class="keywordflow">return</span> 0;
<a name="l00170"></a>00170          }
<a name="l00171"></a>00171        <span class="keywordflow">return</span> 1;
<a name="l00172"></a>00172      }
<a name="l00173"></a>00173        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, (<span class="keyword">struct</span> prefix *) prefix))
<a name="l00174"></a>00174      <span class="keywordflow">return</span> 1;
<a name="l00175"></a>00175      }
<a name="l00176"></a>00176   <span class="keywordflow">return</span> 0;
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="comment">/* delete routes generated from AS-External routes if there is a inter/intra</span>
<a name="l00180"></a>00180 <span class="comment"> * area route</span>
<a name="l00181"></a>00181 <span class="comment"> */</span>
<a name="l00182"></a>00182 <span class="keyword">static</span> <span class="keywordtype">void</span> 
<a name="l00183"></a><a class="code" href="ospf__route_8c.html#a7e8b2e3968d2de53d4c13b5c7a0814ab">00183</a> <a class="code" href="ospf__route_8c.html#a7e8b2e3968d2de53d4c13b5c7a0814ab">ospf_route_delete_same_ext</a>(<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *external_routes,
<a name="l00184"></a>00184                      <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *routes)
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn,
<a name="l00187"></a>00187                     *ext_rn;
<a name="l00188"></a>00188   
<a name="l00189"></a>00189   <span class="keywordflow">if</span> ( (external_routes == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) || (routes == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) )
<a name="l00190"></a>00190     <span class="keywordflow">return</span>;
<a name="l00191"></a>00191   
<a name="l00192"></a>00192   <span class="comment">/* Remove deleted routes */</span>
<a name="l00193"></a>00193   <span class="keywordflow">for</span> ( rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (routes); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn) )
<a name="l00194"></a>00194     {
<a name="l00195"></a>00195       <span class="keywordflow">if</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00196"></a>00196         {
<a name="l00197"></a>00197           <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)(&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l00198"></a>00198           <span class="keywordflow">if</span> ( (ext_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (external_routes, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p)) )
<a name="l00199"></a>00199             {
<a name="l00200"></a>00200               <span class="keywordflow">if</span> (ext_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00201"></a>00201                 {
<a name="l00202"></a>00202                   <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> (p, ext_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00203"></a>00203                   <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a>( ext_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00204"></a>00204                   ext_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00205"></a>00205                 }
<a name="l00206"></a>00206               <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (ext_rn);
<a name="l00207"></a>00207             }
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">/* rt: Old, cmprt: New */</span>
<a name="l00213"></a>00213 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00214"></a><a class="code" href="ospf__route_8c.html#a28f72bf6d366ad41b981f8040b3c8ea1">00214</a> <a class="code" href="ospf__route_8c.html#a28f72bf6d366ad41b981f8040b3c8ea1">ospf_route_delete_uniq</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *cmprt)
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00217"></a>00217   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00220"></a>00220     <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00221"></a>00221       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a> ||
<a name="l00222"></a>00222       or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>)
<a name="l00223"></a>00223     {
<a name="l00224"></a>00224       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226           <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (cmprt, 
<a name="l00227"></a>00227                        (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
<a name="l00228"></a>00228         <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or);
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
<a name="l00231"></a>00231         <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (cmprt,
<a name="l00232"></a>00232                      (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
<a name="l00233"></a>00233           <a class="code" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l00234"></a>00234     }
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">/* Install routes to table. */</span>
<a name="l00238"></a>00238 <span class="keywordtype">void</span>
<a name="l00239"></a><a class="code" href="ospf__route_8h.html#a2a1b3b854753dd893114849d54683417">00239</a> <a class="code" href="ospf__route_8c.html#a92f9b15b23de4eb92b0d2afa5bb65664">ospf_route_install</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt)
<a name="l00240"></a>00240 {
<a name="l00241"></a>00241   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00242"></a>00242   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   <span class="comment">/* rt contains new routing table, new_table contains an old one.</span>
<a name="l00245"></a>00245 <span class="comment">     updating pointers */</span>
<a name="l00246"></a>00246   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>)
<a name="l00247"></a>00247     <a class="code" href="ospf__route_8c.html#a1af9a7462973d18c31f1f610ff70e338">ospf_route_table_free</a> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a> = ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>;
<a name="l00250"></a>00250   ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a> = rt;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252   <span class="comment">/* Delete old routes. */</span>
<a name="l00253"></a>00253   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>)
<a name="l00254"></a>00254     <a class="code" href="ospf__route_8c.html#a28f72bf6d366ad41b981f8040b3c8ea1">ospf_route_delete_uniq</a> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>, rt);
<a name="l00255"></a>00255   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>)
<a name="l00256"></a>00256     <a class="code" href="ospf__route_8c.html#a7e8b2e3968d2de53d4c13b5c7a0814ab">ospf_route_delete_same_ext</a> (ospf-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>, rt);
<a name="l00257"></a>00257 
<a name="l00258"></a>00258   <span class="comment">/* Install new routes. */</span>
<a name="l00259"></a>00259   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00260"></a>00260     <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00261"></a>00261       {
<a name="l00262"></a>00262     <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
<a name="l00263"></a>00263       {
<a name="l00264"></a>00264         <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>,
<a name="l00265"></a>00265                      (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
<a name="l00266"></a>00266           <a class="code" href="ospf__zebra_8c.html#a8045c2db458b9ad1e679863cf369e5be">ospf_zebra_add</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or);
<a name="l00267"></a>00267       }
<a name="l00268"></a>00268     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
<a name="l00269"></a>00269       <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (ospf-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>,
<a name="l00270"></a>00270                        (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
<a name="l00271"></a>00271         <a class="code" href="ospf__zebra_8c.html#a49ea785a614ca3ddf8878814cd58681a">ospf_zebra_add_discard</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l00272"></a>00272       }
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00276"></a><a class="code" href="ospf__route_8c.html#a95bf22549653f4a5a6a11d4cbdf1ff4f">00276</a> <a class="code" href="ospf__route_8c.html#a95bf22549653f4a5a6a11d4cbdf1ff4f">ospf_intra_route_add</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00277"></a>00277               <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00278"></a>00278 {
<a name="l00279"></a>00279   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00280"></a>00280   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00281"></a>00281   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00282"></a>00282   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00283"></a>00283   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *<a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a>;
<a name="l00284"></a>00284   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00287"></a>00287   p.prefix = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00288"></a>00288   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00289"></a>00289     p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00290"></a>00290   <span class="keywordflow">else</span>
<a name="l00291"></a>00291     {
<a name="l00292"></a>00292       <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *lsa = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00293"></a>00293       p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (lsa-&gt;<a class="code" href="structnetwork__lsa.html#a65a1f220899e8eb91f9b80a2f15d7d22">mask</a>);
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00298"></a>00298   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Same routing information exists for %s&quot;</span>, inet_ntoa (v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>));
<a name="l00301"></a>00301       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00302"></a>00302       <span class="keywordflow">return</span>;
<a name="l00303"></a>00303     }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>)
<a name="l00308"></a>00308     {
<a name="l00309"></a>00309       or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, nnode, parent))
<a name="l00312"></a>00312         {
<a name="l00313"></a>00313           path = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
<a name="l00314"></a>00314           path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a> = parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
<a name="l00315"></a>00315           <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, path);
<a name="l00316"></a>00316         }
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318   <span class="keywordflow">else</span>
<a name="l00319"></a>00319     or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a2020c7b82fde8082e85a045d04bfae2a">OSPF_DESTINATION_ROUTER</a>;
<a name="l00320"></a>00320 
<a name="l00321"></a>00321   or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00322"></a>00322   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00323"></a>00323   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a>= area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>;
<a name="l00324"></a>00324   or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
<a name="l00325"></a>00325   or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = or;
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="comment">/* RFC2328 16.1. (4). For &quot;router&quot;. */</span>
<a name="l00331"></a>00331 <span class="keywordtype">void</span>
<a name="l00332"></a><a class="code" href="ospf__route_8h.html#a8ce9e01a1c7b780f605e6648e699600a">00332</a> <a class="code" href="ospf__route_8c.html#ae3f51a8346ea35a7a697c35db4c578c1">ospf_intra_add_router</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00333"></a>00333                <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00334"></a>00334 {
<a name="l00335"></a>00335   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00336"></a>00336   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00337"></a>00337   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00338"></a>00338   <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *lsa;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00341"></a>00341     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: Start&quot;</span>);
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   lsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00344"></a>00344 
<a name="l00345"></a>00345   if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00346"></a>00346     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: LS ID: %s&quot;</span>,
<a name="l00347"></a>00347            inet_ntoa (lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00348"></a>00348   
<a name="l00349"></a>00349   <span class="keywordflow">if</span> (!<a class="code" href="ospfd_8h.html#a62518cec4ea9ee2a4db410d3c42b23f7">OSPF_IS_AREA_BACKBONE</a>(area))
<a name="l00350"></a>00350     <a class="code" href="ospf__interface_8c.html#a5a24594a44bf465fefe438b02f077a20">ospf_vl_up_check</a> (area, lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, v);
<a name="l00351"></a>00351 
<a name="l00352"></a>00352   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structrouter__lsa.html#a1fdd09ba13cd7ca0f1b1d694d2d839aa">flags</a>, <a class="code" href="ospf__lsa_8h.html#ae763d55031a619d49a3b9dc7dbdbed15">ROUTER_LSA_SHORTCUT</a>))
<a name="l00353"></a>00353     area-&gt;<a class="code" href="structospf__area.html#a46f9caf873a09f0ebe364907b08639d2">shortcut_capability</a> = 0;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355   <span class="comment">/* If the newly added vertex is an area border router or AS boundary</span>
<a name="l00356"></a>00356 <span class="comment">     router, a routing table entry is added whose destination type is</span>
<a name="l00357"></a>00357 <span class="comment">     &quot;router&quot;. */</span>
<a name="l00358"></a>00358   <span class="keywordflow">if</span> (! <a class="code" href="ospf__lsa_8h.html#a6741309c91ce8ca9fc9c07e1ac286c1c">IS_ROUTER_LSA_BORDER</a> (lsa) &amp;&amp; ! <a class="code" href="ospf__lsa_8h.html#ae24763c612e28d32f19f5c4d49cf805c">IS_ROUTER_LSA_EXTERNAL</a> (lsa))
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00361"></a>00361     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: &quot;</span>
<a name="l00362"></a>00362            <span class="stringliteral">&quot;this router is neither ASBR nor ABR, skipping it&quot;</span>);
<a name="l00363"></a>00363       <span class="keywordflow">return</span>;
<a name="l00364"></a>00364     }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="comment">/* Update ABR and ASBR count in this area. */</span>
<a name="l00367"></a>00367   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a6741309c91ce8ca9fc9c07e1ac286c1c">IS_ROUTER_LSA_BORDER</a> (lsa))
<a name="l00368"></a>00368     area-&gt;<a class="code" href="structospf__area.html#a467c1a5bf34511b0520f0b13948ece72">abr_count</a>++;
<a name="l00369"></a>00369   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#ae24763c612e28d32f19f5c4d49cf805c">IS_ROUTER_LSA_EXTERNAL</a> (lsa))
<a name="l00370"></a>00370     area-&gt;<a class="code" href="structospf__area.html#ad46b2710280032eab16991e2369fab32">asbr_count</a>++;
<a name="l00371"></a>00371 
<a name="l00372"></a>00372   <span class="comment">/* The Options field found in the associated router-LSA is copied</span>
<a name="l00373"></a>00373 <span class="comment">     into the routing table entry&#39;s Optional capabilities field. Call</span>
<a name="l00374"></a>00374 <span class="comment">     the newly added vertex Router X. */</span>
<a name="l00375"></a>00375   or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
<a name="l00376"></a>00376 
<a name="l00377"></a>00377   or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00378"></a>00378   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00379"></a>00379   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>;
<a name="l00380"></a>00380   or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
<a name="l00381"></a>00381   or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
<a name="l00382"></a>00382   or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a2020c7b82fde8082e85a045d04bfae2a">OSPF_DESTINATION_ROUTER</a>;
<a name="l00383"></a>00383   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
<a name="l00384"></a>00384   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#a47649b012cf11814fb1e3abe9cf6a7ed">options</a> = lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>;
<a name="l00385"></a>00385   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#abd1fb7a470e51e2dc894282f5c1a637b">flags</a> = lsa-&gt;<a class="code" href="structrouter__lsa.html#a1fdd09ba13cd7ca0f1b1d694d2d839aa">flags</a>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   <span class="comment">/* If Router X is the endpoint of one of the calculating router&#39;s</span>
<a name="l00388"></a>00388 <span class="comment">     virtual links, and the virtual link uses Area A as Transit area:</span>
<a name="l00389"></a>00389 <span class="comment">     the virtual link is declared up, the IP address of the virtual</span>
<a name="l00390"></a>00390 <span class="comment">     interface is set to the IP address of the outgoing interface</span>
<a name="l00391"></a>00391 <span class="comment">     calculated above for Router X, and the virtual neighbor&#39;s IP</span>
<a name="l00392"></a>00392 <span class="comment">     address is set to Router X&#39;s interface address (contained in</span>
<a name="l00393"></a>00393 <span class="comment">     Router X&#39;s router-LSA) that points back to the root of the</span>
<a name="l00394"></a>00394 <span class="comment">     shortest- path tree; equivalently, this is the interface that</span>
<a name="l00395"></a>00395 <span class="comment">     points back to Router X&#39;s parent vertex on the shortest-path tree</span>
<a name="l00396"></a>00396 <span class="comment">     (similar to the calculation in Section 16.1.1). */</span>
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00399"></a>00399   p.prefix = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00400"></a>00400   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00403"></a>00403     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: talking about %s/%d&quot;</span>,
<a name="l00404"></a>00404            inet_ntoa (p.prefix), p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00407"></a>00407 
<a name="l00408"></a>00408   <span class="comment">/* Note that we keep all routes to ABRs and ASBRs, not only the best */</span>
<a name="l00409"></a>00409   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00410"></a>00410     rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00411"></a>00411   <span class="keywordflow">else</span>
<a name="l00412"></a>00412     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, or);
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00419"></a>00419     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: Stop&quot;</span>);
<a name="l00420"></a>00420 }
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 <span class="comment">/* RFC2328 16.1. (4).  For transit network. */</span>
<a name="l00423"></a>00423 <span class="keywordtype">void</span>
<a name="l00424"></a><a class="code" href="ospf__route_8h.html#acb6aef096e811d476a155bc943797de0">00424</a> <a class="code" href="ospf__route_8c.html#ac4b754a414528b3d20a477d821ed07dd">ospf_intra_add_transit</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00425"></a>00425             <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00426"></a>00426 {
<a name="l00427"></a>00427   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00428"></a>00428   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00429"></a>00429   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00430"></a>00430   <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *lsa;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432   lsa = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a>*) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00433"></a>00433 
<a name="l00434"></a>00434   <span class="comment">/* If the newly added vertex is a transit network, the routing table</span>
<a name="l00435"></a>00435 <span class="comment">     entry for the network is located.  The entry&#39;s Destination ID is</span>
<a name="l00436"></a>00436 <span class="comment">     the IP network number, which can be obtained by masking the</span>
<a name="l00437"></a>00437 <span class="comment">     Vertex ID (Link State ID) with its associated subnet mask (found</span>
<a name="l00438"></a>00438 <span class="comment">     in the body of the associated network-LSA). */</span>
<a name="l00439"></a>00439   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00440"></a>00440   p.prefix = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00441"></a>00441   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (lsa-&gt;<a class="code" href="structnetwork__lsa.html#a65a1f220899e8eb91f9b80a2f15d7d22">mask</a>);
<a name="l00442"></a>00442   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00443"></a>00443 
<a name="l00444"></a>00444   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00445"></a>00445 
<a name="l00446"></a>00446   <span class="comment">/* If the routing table entry already exists (i.e., there is already</span>
<a name="l00447"></a>00447 <span class="comment">     an intra-area route to the destination installed in the routing</span>
<a name="l00448"></a>00448 <span class="comment">     table), multiple vertices have mapped to the same IP network.</span>
<a name="l00449"></a>00449 <span class="comment">     For example, this can occur when a new Designated Router is being</span>
<a name="l00450"></a>00450 <span class="comment">     established.  In this case, the current routing table entry</span>
<a name="l00451"></a>00451 <span class="comment">     should be overwritten if and only if the newly found path is just</span>
<a name="l00452"></a>00452 <span class="comment">     as short and the current routing table entry&#39;s Link State Origin</span>
<a name="l00453"></a>00453 <span class="comment">     has a smaller Link State ID than the newly added vertex&#39; LSA. */</span>
<a name="l00454"></a>00454   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00455"></a>00455     {
<a name="l00456"></a>00456       <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *cur_or;
<a name="l00457"></a>00457 
<a name="l00458"></a>00458       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00459"></a>00459       cur_or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00460"></a>00460 
<a name="l00461"></a>00461       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> &gt; cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> ||
<a name="l00462"></a>00462           <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;lsa-&gt;<a class="code" href="structnetwork__lsa.html#a3c43f76888785ba064b4f2bf20a9818f">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>) &gt; 0)
<a name="l00463"></a>00463     <span class="keywordflow">return</span>;
<a name="l00464"></a>00464       
<a name="l00465"></a>00465       <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00466"></a>00466     }
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
<a name="l00469"></a>00469 
<a name="l00470"></a>00470   or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00471"></a>00471   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00472"></a>00472   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>;
<a name="l00473"></a>00473   or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
<a name="l00474"></a>00474   or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
<a name="l00475"></a>00475   or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
<a name="l00476"></a>00476   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);
<a name="l00479"></a>00479   
<a name="l00480"></a>00480   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = or;
<a name="l00481"></a>00481 }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="comment">/* RFC2328 16.1. second stage. */</span>
<a name="l00484"></a>00484 <span class="keywordtype">void</span>
<a name="l00485"></a><a class="code" href="ospf__route_8h.html#a8aeb6c0fef3861f45cc9fcf72d027d75">00485</a> <a class="code" href="ospf__route_8c.html#ae57967d6e78f08454bec423455f89048">ospf_intra_add_stub</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *link,
<a name="l00486"></a>00486              <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00487"></a>00487              <span class="keywordtype">int</span> parent_is_root)
<a name="l00488"></a>00488 {
<a name="l00489"></a>00489   u_int32_t cost;
<a name="l00490"></a>00490   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00491"></a>00491   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00492"></a>00492   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00493"></a>00493   <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *lsa;
<a name="l00494"></a>00494   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00495"></a>00495   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00496"></a>00496 
<a name="l00497"></a>00497   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00498"></a>00498     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): Start&quot;</span>);
<a name="l00499"></a>00499 
<a name="l00500"></a>00500   lsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00501"></a>00501 
<a name="l00502"></a>00502   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00503"></a>00503   p.prefix = link-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>;
<a name="l00504"></a>00504   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (link-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>);
<a name="l00505"></a>00505   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00506"></a>00506 
<a name="l00507"></a>00507   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00508"></a>00508     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): processing route to %s/%d&quot;</span>,  
<a name="l00509"></a>00509            inet_ntoa (p.prefix), p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00510"></a>00510 
<a name="l00511"></a>00511   <span class="comment">/* (1) Calculate the distance D of stub network from the root.  D is</span>
<a name="l00512"></a>00512 <span class="comment">     equal to the distance from the root to the router vertex</span>
<a name="l00513"></a>00513 <span class="comment">     (calculated in stage 1), plus the stub network link&#39;s advertised</span>
<a name="l00514"></a>00514 <span class="comment">     cost. */</span>
<a name="l00515"></a>00515   cost = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> + ntohs (link-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a>);
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00518"></a>00518     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): calculated cost is %d + %d = %d&quot;</span>, 
<a name="l00519"></a>00519            v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>, ntohs(link-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a>), cost);
<a name="l00520"></a>00520   
<a name="l00521"></a>00521   <span class="comment">/* PtP links with /32 masks adds host routes to remote, directly</span>
<a name="l00522"></a>00522 <span class="comment">   * connected hosts, see RFC 2328, 12.4.1.1, Option 1.</span>
<a name="l00523"></a>00523 <span class="comment">   * Such routes can just be ignored for the sake of tidyness.</span>
<a name="l00524"></a>00524 <span class="comment">   */</span>
<a name="l00525"></a>00525   <span class="keywordflow">if</span> (parent_is_root &amp;&amp; link-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>.s_addr == 0xffffffff &amp;&amp;
<a name="l00526"></a>00526       <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, link-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>))
<a name="l00527"></a>00527     {
<a name="l00528"></a>00528       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00529"></a>00529         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring host route %s/32 to self.&quot;</span>,
<a name="l00530"></a>00530                     __func__, inet_ntoa (link-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
<a name="l00531"></a>00531       <span class="keywordflow">return</span>;
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533   
<a name="l00534"></a>00534   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="comment">/* Lookup current routing table. */</span>
<a name="l00537"></a>00537   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00538"></a>00538     {
<a name="l00539"></a>00539       <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *cur_or;
<a name="l00540"></a>00540 
<a name="l00541"></a>00541       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00542"></a>00542 
<a name="l00543"></a>00543       cur_or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00544"></a>00544 
<a name="l00545"></a>00545       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00546"></a>00546     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): &quot;</span>
<a name="l00547"></a>00547            <span class="stringliteral">&quot;another route to the same prefix found with cost %u&quot;</span>,
<a name="l00548"></a>00548            cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
<a name="l00549"></a>00549 
<a name="l00550"></a>00550       <span class="comment">/* Compare this distance to the current best cost to the stub</span>
<a name="l00551"></a>00551 <span class="comment">     network.  This is done by looking up the stub network&#39;s</span>
<a name="l00552"></a>00552 <span class="comment">     current routing table entry.  If the calculated distance D is</span>
<a name="l00553"></a>00553 <span class="comment">     larger, go on to examine the next stub network link in the</span>
<a name="l00554"></a>00554 <span class="comment">     LSA. */</span>
<a name="l00555"></a>00555       <span class="keywordflow">if</span> (cost &gt; cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
<a name="l00556"></a>00556     {
<a name="l00557"></a>00557       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00558"></a>00558         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): old route is better, exit&quot;</span>);
<a name="l00559"></a>00559       <span class="keywordflow">return</span>;
<a name="l00560"></a>00560     }
<a name="l00561"></a>00561 
<a name="l00562"></a>00562       <span class="comment">/* (2) If this step is reached, the stub network&#39;s routing table</span>
<a name="l00563"></a>00563 <span class="comment">     entry must be updated.  Calculate the set of next hops that</span>
<a name="l00564"></a>00564 <span class="comment">     would result from using the stub network link.  This</span>
<a name="l00565"></a>00565 <span class="comment">     calculation is shown in Section 16.1.1; input to this</span>
<a name="l00566"></a>00566 <span class="comment">     calculation is the destination (the stub network) and the</span>
<a name="l00567"></a>00567 <span class="comment">     parent vertex (the router vertex). If the distance D is the</span>
<a name="l00568"></a>00568 <span class="comment">     same as the current routing table cost, simply add this set</span>
<a name="l00569"></a>00569 <span class="comment">     of next hops to the routing table entry&#39;s list of next hops.</span>
<a name="l00570"></a>00570 <span class="comment">     In this case, the routing table already has a Link State</span>
<a name="l00571"></a>00571 <span class="comment">     Origin.  If this Link State Origin is a router-LSA whose Link</span>
<a name="l00572"></a>00572 <span class="comment">     State ID is smaller than V&#39;s Router ID, reset the Link State</span>
<a name="l00573"></a>00573 <span class="comment">     Origin to V&#39;s router-LSA. */</span>
<a name="l00574"></a>00574 
<a name="l00575"></a>00575       <span class="keywordflow">if</span> (cost == cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
<a name="l00576"></a>00576     {
<a name="l00577"></a>00577       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00578"></a>00578         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): routes are equal, merge&quot;</span>);
<a name="l00579"></a>00579 
<a name="l00580"></a>00580       <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (cur_or, v);
<a name="l00581"></a>00581 
<a name="l00582"></a>00582       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>) &lt; 0)
<a name="l00583"></a>00583         cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
<a name="l00584"></a>00584       <span class="keywordflow">return</span>;
<a name="l00585"></a>00585     }
<a name="l00586"></a>00586 
<a name="l00587"></a>00587       <span class="comment">/* Otherwise D is smaller than the routing table cost.</span>
<a name="l00588"></a>00588 <span class="comment">     Overwrite the current routing table entry by setting the</span>
<a name="l00589"></a>00589 <span class="comment">     routing table entry&#39;s cost to D, and by setting the entry&#39;s</span>
<a name="l00590"></a>00590 <span class="comment">     list of next hops to the newly calculated set.  Set the</span>
<a name="l00591"></a>00591 <span class="comment">     routing table entry&#39;s Link State Origin to V&#39;s router-LSA.</span>
<a name="l00592"></a>00592 <span class="comment">     Then go on to examine the next stub network link. */</span>
<a name="l00593"></a>00593 
<a name="l00594"></a>00594       <span class="keywordflow">if</span> (cost &lt; cur_or-&gt;cost)
<a name="l00595"></a>00595     {
<a name="l00596"></a>00596       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00597"></a>00597         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): new route is better, set it&quot;</span>);
<a name="l00598"></a>00598 
<a name="l00599"></a>00599       cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = cost;
<a name="l00600"></a>00600 
<a name="l00601"></a>00601       <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (cur_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00602"></a>00602 
<a name="l00603"></a>00603       <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (cur_or, v);
<a name="l00604"></a>00604 
<a name="l00605"></a>00605       cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
<a name="l00606"></a>00606       <span class="keywordflow">return</span>;
<a name="l00607"></a>00607     }
<a name="l00608"></a>00608     }
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00611"></a>00611     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): installing new route&quot;</span>);
<a name="l00612"></a>00612 
<a name="l00613"></a>00613   or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
<a name="l00614"></a>00614 
<a name="l00615"></a>00615   or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>;
<a name="l00616"></a>00616   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00617"></a>00617   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>;
<a name="l00618"></a>00618   or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
<a name="l00619"></a>00619   or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = cost;
<a name="l00620"></a>00620   or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
<a name="l00621"></a>00621   or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
<a name="l00622"></a>00622 
<a name="l00623"></a>00623   <span class="comment">/* Nexthop is depend on connection type. */</span>
<a name="l00624"></a>00624   <span class="keywordflow">if</span> (v != area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>)
<a name="l00625"></a>00625     {
<a name="l00626"></a>00626       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00627"></a>00627     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): this network is on remote router&quot;</span>);
<a name="l00628"></a>00628       <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);
<a name="l00629"></a>00629     }
<a name="l00630"></a>00630   <span class="keywordflow">else</span>
<a name="l00631"></a>00631     {
<a name="l00632"></a>00632       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00633"></a>00633     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): this network is on this router&quot;</span>);
<a name="l00634"></a>00634 
<a name="l00635"></a>00635       <span class="keywordflow">if</span> ((oi = <a class="code" href="ospf__interface_8c.html#a9255c148dc6fdf178c585cf1be34782c">ospf_if_lookup_by_prefix</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, &amp;p)))
<a name="l00636"></a>00636     {
<a name="l00637"></a>00637       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00638"></a>00638         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): the interface is %s&quot;</span>,
<a name="l00639"></a>00639                <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00640"></a>00640 
<a name="l00641"></a>00641       path = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
<a name="l00642"></a>00642       path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr = 0;
<a name="l00643"></a>00643       path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00644"></a>00644       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, path);
<a name="l00645"></a>00645     }
<a name="l00646"></a>00646       <span class="keywordflow">else</span>
<a name="l00647"></a>00647     {
<a name="l00648"></a>00648       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00649"></a>00649         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): where&#39;s the interface ?&quot;</span>);
<a name="l00650"></a>00650     }
<a name="l00651"></a>00651     }
<a name="l00652"></a>00652 
<a name="l00653"></a>00653   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = or;
<a name="l00654"></a>00654 
<a name="l00655"></a>00655   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00656"></a>00656     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;ospf_intra_add_stub(): Stop&quot;</span>);
<a name="l00657"></a>00657 }
<a name="l00658"></a>00658 
<a name="l00659"></a><a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">00659</a> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">ospf_path_type_str</a>[] =
<a name="l00660"></a>00660 {
<a name="l00661"></a>00661   <span class="stringliteral">&quot;unknown-type&quot;</span>,
<a name="l00662"></a>00662   <span class="stringliteral">&quot;intra-area&quot;</span>,
<a name="l00663"></a>00663   <span class="stringliteral">&quot;inter-area&quot;</span>,
<a name="l00664"></a>00664   <span class="stringliteral">&quot;type1-external&quot;</span>,
<a name="l00665"></a>00665   <span class="stringliteral">&quot;type2-external&quot;</span>
<a name="l00666"></a>00666 };
<a name="l00667"></a>00667 
<a name="l00668"></a>00668 <span class="keywordtype">void</span>
<a name="l00669"></a><a class="code" href="ospf__route_8h.html#a76197bb92a0e3a7c77ab6c1674b4c7e0">00669</a> <a class="code" href="ospf__route_8c.html#a9396efc189379cb3ebbd9948e2a3a46c">ospf_route_table_dump</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt)
<a name="l00670"></a>00670 {
<a name="l00671"></a>00671   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00672"></a>00672   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00673"></a>00673   <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l00674"></a>00674   <span class="keywordtype">char</span> buf2[BUFSIZ];
<a name="l00675"></a>00675   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *pnode;
<a name="l00676"></a>00676   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00677"></a>00677 
<a name="l00678"></a>00678 <span class="preprocessor">#if 0</span>
<a name="l00679"></a>00679 <span class="preprocessor"></span>  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type   Dest   Area   Path     Type    Cost   Next     Adv.&quot;</span>);
<a name="l00680"></a>00680   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;                 Hop(s)   Router(s)&quot;</span>);
<a name="l00681"></a>00681 <span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>
<a name="l00682"></a>00682 
<a name="l00683"></a>00683   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;========== OSPF routing table ==========&quot;</span>);
<a name="l00684"></a>00684   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00685"></a>00685     <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00686"></a>00686       {
<a name="l00687"></a>00687         <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
<a name="l00688"></a>00688       {
<a name="l00689"></a>00689         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;N %s/%d\t%s\t%s\t%d&quot;</span>, 
<a name="l00690"></a>00690                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf1, BUFSIZ),
<a name="l00691"></a>00691                rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l00692"></a>00692                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>, buf2,
<a name="l00693"></a>00693                   BUFSIZ),
<a name="l00694"></a>00694                <a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">ospf_path_type_str</a>[or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>],
<a name="l00695"></a>00695                or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
<a name="l00696"></a>00696         <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, pnode, path))
<a name="l00697"></a>00697               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  -&gt; %s&quot;</span>, inet_ntoa (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>));
<a name="l00698"></a>00698       }
<a name="l00699"></a>00699         <span class="keywordflow">else</span>
<a name="l00700"></a>00700       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;R %s\t%s\t%s\t%d&quot;</span>, 
<a name="l00701"></a>00701              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf1, BUFSIZ),
<a name="l00702"></a>00702              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>, buf2,
<a name="l00703"></a>00703                 BUFSIZ),
<a name="l00704"></a>00704              <a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">ospf_path_type_str</a>[or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>],
<a name="l00705"></a>00705              or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
<a name="l00706"></a>00706       }
<a name="l00707"></a>00707   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;========================================&quot;</span>);
<a name="l00708"></a>00708 }
<a name="l00709"></a>00709 
<a name="l00710"></a>00710 <span class="comment">/* This is 16.4.1 implementation.</span>
<a name="l00711"></a>00711 <span class="comment">   o Intra-area paths using non-backbone areas are always the most preferred.</span>
<a name="l00712"></a>00712 <span class="comment">   o The other paths, intra-area backbone paths and inter-area paths,</span>
<a name="l00713"></a>00713 <span class="comment">     are of equal preference. */</span>
<a name="l00714"></a>00714 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00715"></a><a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">00715</a> <a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">ospf_asbr_route_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *r1,
<a name="l00716"></a>00716              <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *r2)
<a name="l00717"></a>00717 {
<a name="l00718"></a>00718   u_char r1_type, r2_type;
<a name="l00719"></a>00719 
<a name="l00720"></a>00720   r1_type = r1-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>;
<a name="l00721"></a>00721   r2_type = r2-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>;
<a name="l00722"></a>00722 
<a name="l00723"></a>00723   <span class="comment">/* If RFC1583Compat flag is on -- all paths are equal. */</span>
<a name="l00724"></a>00724   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
<a name="l00725"></a>00725     <span class="keywordflow">return</span> 0;
<a name="l00726"></a>00726 
<a name="l00727"></a>00727   <span class="comment">/* r1/r2 itself is backbone, and it&#39;s Inter-area path. */</span>
<a name="l00728"></a>00728   <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a3c9df8914219b5ad5aa165ecc3428ae0">OSPF_IS_AREA_ID_BACKBONE</a> (r1-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>))
<a name="l00729"></a>00729     r1_type = <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>;
<a name="l00730"></a>00730   <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a3c9df8914219b5ad5aa165ecc3428ae0">OSPF_IS_AREA_ID_BACKBONE</a> (r2-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>))
<a name="l00731"></a>00731     r2_type = <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>;
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   <span class="keywordflow">return</span> (r1_type - r2_type);
<a name="l00734"></a>00734 }
<a name="l00735"></a>00735 
<a name="l00736"></a>00736 <span class="comment">/* Compare two routes.</span>
<a name="l00737"></a>00737 <span class="comment"> ret &lt;  0 -- r1 is better.</span>
<a name="l00738"></a>00738 <span class="comment"> ret == 0 -- r1 and r2 are the same.</span>
<a name="l00739"></a>00739 <span class="comment"> ret &gt;  0 -- r2 is better. */</span>
<a name="l00740"></a>00740 <span class="keywordtype">int</span>
<a name="l00741"></a><a class="code" href="ospf__route_8h.html#acbf38276943fb3348be9cb6644129538">00741</a> <a class="code" href="ospf__route_8c.html#a578fe7fdb12e2d1c8d258a1019e49c48">ospf_route_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *r1,
<a name="l00742"></a>00742         <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *r2)
<a name="l00743"></a>00743 {
<a name="l00744"></a>00744   <span class="keywordtype">int</span> ret = 0;
<a name="l00745"></a>00745 
<a name="l00746"></a>00746   <span class="comment">/* Path types of r1 and r2 are not the same. */</span>
<a name="l00747"></a>00747   <span class="keywordflow">if</span> ((ret = (r1-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> - r2-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)))
<a name="l00748"></a>00748     <span class="keywordflow">return</span> ret;
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00751"></a>00751     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[Compare]: Path types are the same.&quot;</span>);
<a name="l00752"></a>00752   <span class="comment">/* Path types are the same, compare any cost. */</span>
<a name="l00753"></a>00753   <span class="keywordflow">switch</span> (r1-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)
<a name="l00754"></a>00754     {
<a name="l00755"></a>00755     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>:
<a name="l00756"></a>00756     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>:
<a name="l00757"></a>00757       <span class="keywordflow">break</span>;
<a name="l00758"></a>00758     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>:
<a name="l00759"></a>00759       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
<a name="l00760"></a>00760     {
<a name="l00761"></a>00761       ret = <a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">ospf_asbr_route_cmp</a> (ospf, r1-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a930fd3803aade7e2a7468eda3ee2cd9a">asbr</a>, r2-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a930fd3803aade7e2a7468eda3ee2cd9a">asbr</a>);
<a name="l00762"></a>00762       <span class="keywordflow">if</span> (ret != 0)
<a name="l00763"></a>00763         <span class="keywordflow">return</span> ret;
<a name="l00764"></a>00764     }
<a name="l00765"></a>00765       <span class="keywordflow">break</span>;
<a name="l00766"></a>00766     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>:
<a name="l00767"></a>00767       <span class="keywordflow">if</span> ((ret = (r1-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a> - r2-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a>)))
<a name="l00768"></a>00768     <span class="keywordflow">return</span> ret;
<a name="l00769"></a>00769 
<a name="l00770"></a>00770       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
<a name="l00771"></a>00771     {
<a name="l00772"></a>00772       ret = <a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">ospf_asbr_route_cmp</a> (ospf, r1-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a930fd3803aade7e2a7468eda3ee2cd9a">asbr</a>, r2-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a930fd3803aade7e2a7468eda3ee2cd9a">asbr</a>);
<a name="l00773"></a>00773       <span class="keywordflow">if</span> (ret != 0)
<a name="l00774"></a>00774         <span class="keywordflow">return</span> ret;
<a name="l00775"></a>00775     }
<a name="l00776"></a>00776       <span class="keywordflow">break</span>;
<a name="l00777"></a>00777     }      
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   <span class="comment">/* Anyway, compare the costs. */</span>
<a name="l00780"></a>00780   <span class="keywordflow">return</span> (r1-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> - r2-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
<a name="l00781"></a>00781 }
<a name="l00782"></a>00782 
<a name="l00783"></a>00783 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00784"></a><a class="code" href="ospf__route_8c.html#ac9f486bd1eea8cce7bfa523e66400830">00784</a> <a class="code" href="ospf__route_8c.html#ac9f486bd1eea8cce7bfa523e66400830">ospf_path_exist</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *plist, <span class="keyword">struct</span> in_addr <a class="code" href="structnexthop.html">nexthop</a>,
<a name="l00785"></a>00785          <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00786"></a>00786 {
<a name="l00787"></a>00787   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00788"></a>00788   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00789"></a>00789 
<a name="l00790"></a>00790   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (plist, node, nnode, path))
<a name="l00791"></a>00791     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;nexthop) &amp;&amp;
<a name="l00792"></a>00792     path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> == oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
<a name="l00793"></a>00793       <span class="keywordflow">return</span> 1;
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="keywordflow">return</span> 0;
<a name="l00796"></a>00796 }
<a name="l00797"></a>00797 
<a name="l00798"></a>00798 <span class="keywordtype">void</span>
<a name="l00799"></a><a class="code" href="ospf__route_8h.html#a922f59a3b6d0f9e669d7e5e31de56e05">00799</a> <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *to,
<a name="l00800"></a>00800                       <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v)
<a name="l00801"></a>00801 {
<a name="l00802"></a>00802   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00803"></a>00803   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00804"></a>00804   <span class="keyword">struct </span><a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00805"></a>00805   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00806"></a>00806 
<a name="l00807"></a>00807   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00808"></a>00808 
<a name="l00809"></a>00809   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
<a name="l00810"></a>00810     {
<a name="l00811"></a>00811       nexthop = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>;
<a name="l00812"></a>00812       
<a name="l00813"></a>00813       <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00814"></a>00814     {
<a name="l00815"></a>00815       <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#ac9f486bd1eea8cce7bfa523e66400830">ospf_path_exist</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>, nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>))
<a name="l00816"></a>00816         {
<a name="l00817"></a>00817           path = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
<a name="l00818"></a>00818           path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a> = nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
<a name="l00819"></a>00819           path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> = nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00820"></a>00820           <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, path);
<a name="l00821"></a>00821         }
<a name="l00822"></a>00822     }
<a name="l00823"></a>00823     }
<a name="l00824"></a>00824 }
<a name="l00825"></a>00825 
<a name="l00826"></a>00826 <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *
<a name="l00827"></a><a class="code" href="ospf__route_8h.html#adcc96fdc143698d825bfbbd56b10a6e5">00827</a> <a class="code" href="ospf__route_8c.html#a0ff9bff69b019f97b8d7b54041595bd7">ospf_path_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *plist, <span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a> *path)
<a name="l00828"></a>00828 {
<a name="l00829"></a>00829   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00830"></a>00830   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;
<a name="l00831"></a>00831 
<a name="l00832"></a>00832   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (plist, node, op))
<a name="l00833"></a>00833   {
<a name="l00834"></a>00834     <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
<a name="l00835"></a>00835       <span class="keywordflow">continue</span>;
<a name="l00836"></a>00836     <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a986b18fa4def90382139eaf1e6276a21">adv_router</a>, &amp;path-&gt;<a class="code" href="structospf__path.html#a986b18fa4def90382139eaf1e6276a21">adv_router</a>))
<a name="l00837"></a>00837       <span class="keywordflow">continue</span>;
<a name="l00838"></a>00838     <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> != path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>)
<a name="l00839"></a>00839       <span class="keywordflow">continue</span>;
<a name="l00840"></a>00840     <span class="keywordflow">return</span> op;
<a name="l00841"></a>00841   }
<a name="l00842"></a>00842   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00843"></a>00843 }
<a name="l00844"></a>00844 
<a name="l00845"></a>00845 <span class="keywordtype">void</span>
<a name="l00846"></a><a class="code" href="ospf__route_8h.html#aad9966ebbcdcb1a2dfb456c0a67caaa6">00846</a> <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *to, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *from)
<a name="l00847"></a>00847 {
<a name="l00848"></a>00848   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00849"></a>00849   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l00850"></a>00850 
<a name="l00851"></a>00851   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00852"></a>00852 
<a name="l00853"></a>00853   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (from, node, nnode, path))
<a name="l00854"></a>00854     <span class="comment">/* The same routes are just discarded. */</span>
<a name="l00855"></a>00855     <span class="keywordflow">if</span> (!<a class="code" href="ospf__route_8c.html#a0ff9bff69b019f97b8d7b54041595bd7">ospf_path_lookup</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, path))
<a name="l00856"></a>00856       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, <a class="code" href="ospf__route_8c.html#a0b27d3d8b6654d4f2129a1d9d1c52d24">ospf_path_dup</a> (path));
<a name="l00857"></a>00857 }
<a name="l00858"></a>00858 
<a name="l00859"></a>00859 <span class="keywordtype">void</span>
<a name="l00860"></a><a class="code" href="ospf__route_8h.html#a499b49456fe5858ca8f36ddb07d5a9c2">00860</a> <a class="code" href="ospf__route_8c.html#a30819c21f3422d7eae04e814430c92b3">ospf_route_subst_nexthops</a> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *to, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *from)
<a name="l00861"></a>00861 {
<a name="l00862"></a>00862 
<a name="l00863"></a>00863   <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (to-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00864"></a>00864   <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (to, from);
<a name="l00865"></a>00865 }
<a name="l00866"></a>00866 
<a name="l00867"></a>00867 <span class="keywordtype">void</span>
<a name="l00868"></a><a class="code" href="ospf__route_8h.html#ad15eddd3cfd05588023df4471e93bbfe">00868</a> <a class="code" href="ospf__route_8c.html#a57e1e00a8853861a883983f4827489b2">ospf_route_subst</a> (<span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *rn, <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *new_or,
<a name="l00869"></a>00869           <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *over)
<a name="l00870"></a>00870 {
<a name="l00871"></a>00871   <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
<a name="l00872"></a>00872   <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00873"></a>00873 
<a name="l00874"></a>00874   <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (new_or, over-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00875"></a>00875   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = new_or;
<a name="l00876"></a>00876   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00877"></a>00877 }
<a name="l00878"></a>00878 
<a name="l00879"></a>00879 <span class="keywordtype">void</span>
<a name="l00880"></a><a class="code" href="ospf__route_8h.html#ad09931c3bbc997167498b50b08adb687">00880</a> <a class="code" href="ospf__route_8c.html#a902c992a455d2f5e414d5f28446c0f22">ospf_route_add</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l00881"></a>00881         <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *new_or, <span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *over)
<a name="l00882"></a>00882 {
<a name="l00883"></a>00883   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00884"></a>00884 
<a name="l00885"></a>00885   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
<a name="l00886"></a>00886 
<a name="l00887"></a>00887   <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (new_or, over-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l00888"></a>00888 
<a name="l00889"></a>00889   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00890"></a>00890     {
<a name="l00891"></a>00891       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00892"></a>00892     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_route_add(): something&#39;s wrong !&quot;</span>);
<a name="l00893"></a>00893       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00894"></a>00894       <span class="keywordflow">return</span>;
<a name="l00895"></a>00895     }
<a name="l00896"></a>00896 
<a name="l00897"></a>00897   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = new_or;
<a name="l00898"></a>00898 }
<a name="l00899"></a>00899 
<a name="l00900"></a>00900 <span class="keywordtype">void</span>
<a name="l00901"></a><a class="code" href="ospf__route_8h.html#abad85225c2c54f113e6750a05785c929">00901</a> <a class="code" href="ospf__route_8c.html#a664b20a2a9ead67d9c8daf9194e971c2">ospf_prune_unreachable_networks</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt)
<a name="l00902"></a>00902 {
<a name="l00903"></a>00903   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *next;
<a name="l00904"></a>00904   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00905"></a>00905 
<a name="l00906"></a>00906   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00907"></a>00907     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning unreachable networks&quot;</span>);
<a name="l00908"></a>00908 
<a name="l00909"></a>00909   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = next)
<a name="l00910"></a>00910     {
<a name="l00911"></a>00911       next = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
<a name="l00912"></a>00912       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00913"></a>00913     {
<a name="l00914"></a>00914       or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00915"></a>00915       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>) == 0)
<a name="l00916"></a>00916         {
<a name="l00917"></a>00917           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00918"></a>00918         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning route to %s/%d&quot;</span>,
<a name="l00919"></a>00919                inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00920"></a>00920 
<a name="l00921"></a>00921           <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
<a name="l00922"></a>00922           rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00923"></a>00923           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00924"></a>00924         }
<a name="l00925"></a>00925     }
<a name="l00926"></a>00926     }
<a name="l00927"></a>00927 }
<a name="l00928"></a>00928 
<a name="l00929"></a>00929 <span class="keywordtype">void</span>
<a name="l00930"></a><a class="code" href="ospf__route_8h.html#a9584237960df23d9b3884fddba473f16">00930</a> <a class="code" href="ospf__route_8c.html#a8a234f1fccc982181a97e59ce18e62a7">ospf_prune_unreachable_routers</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rtrs)
<a name="l00931"></a>00931 {
<a name="l00932"></a>00932   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *next;
<a name="l00933"></a>00933   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l00934"></a>00934   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00935"></a>00935   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *paths;
<a name="l00936"></a>00936 
<a name="l00937"></a>00937   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00938"></a>00938     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning unreachable routers&quot;</span>);
<a name="l00939"></a>00939 
<a name="l00940"></a>00940   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = next)
<a name="l00941"></a>00941     {
<a name="l00942"></a>00942       next = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
<a name="l00943"></a>00943       <span class="keywordflow">if</span> ((paths = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00944"></a>00944     <span class="keywordflow">continue</span>;
<a name="l00945"></a>00945 
<a name="l00946"></a>00946       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (paths, node, nnode, or))
<a name="l00947"></a>00947     {
<a name="l00948"></a>00948       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>) == 0)
<a name="l00949"></a>00949         {
<a name="l00950"></a>00950           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00951"></a>00951         {
<a name="l00952"></a>00952           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning route to rtr %s&quot;</span>,
<a name="l00953"></a>00953                  inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l00954"></a>00954           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;               via area %s&quot;</span>,
<a name="l00955"></a>00955                  inet_ntoa (or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>));
<a name="l00956"></a>00956         }
<a name="l00957"></a>00957 
<a name="l00958"></a>00958           <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (paths, or);
<a name="l00959"></a>00959           <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
<a name="l00960"></a>00960         }
<a name="l00961"></a>00961     }
<a name="l00962"></a>00962 
<a name="l00963"></a>00963       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (paths) == 0)
<a name="l00964"></a>00964     {
<a name="l00965"></a>00965       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00966"></a>00966         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning router node %s&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l00967"></a>00967 
<a name="l00968"></a>00968       <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (paths);
<a name="l00969"></a>00969       rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00970"></a>00970       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00971"></a>00971     }
<a name="l00972"></a>00972     }
<a name="l00973"></a>00973 }
<a name="l00974"></a>00974 
<a name="l00975"></a>00975 <span class="keywordtype">int</span>
<a name="l00976"></a><a class="code" href="ospf__route_8h.html#af2f73a9ae9b0289cb2e43751d3bc1d6e">00976</a> <a class="code" href="ospf__route_8c.html#a6ba37b7d4dd2c286ad0f70471c048c44">ospf_add_discard_route</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00977"></a>00977             <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00978"></a>00978 {
<a name="l00979"></a>00979   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00980"></a>00980   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or, *new_or;
<a name="l00981"></a>00981 
<a name="l00982"></a>00982   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
<a name="l00983"></a>00983 
<a name="l00984"></a>00984   <span class="keywordflow">if</span> (rn == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00985"></a>00985     {
<a name="l00986"></a>00986       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00987"></a>00987     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): router installation error&quot;</span>);
<a name="l00988"></a>00988       <span class="keywordflow">return</span> 0;
<a name="l00989"></a>00989     }
<a name="l00990"></a>00990 
<a name="l00991"></a>00991   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) <span class="comment">/* If the route to the same destination is found */</span>
<a name="l00992"></a>00992     {
<a name="l00993"></a>00993       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00994"></a>00994 
<a name="l00995"></a>00995       or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00996"></a>00996 
<a name="l00997"></a>00997       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>)
<a name="l00998"></a>00998     {
<a name="l00999"></a>00999       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01000"></a>01000         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): &quot;</span>
<a name="l01001"></a>01001                <span class="stringliteral">&quot;an intra-area route exists&quot;</span>);
<a name="l01002"></a>01002       <span class="keywordflow">return</span> 0;
<a name="l01003"></a>01003     }
<a name="l01004"></a>01004 
<a name="l01005"></a>01005       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
<a name="l01006"></a>01006     {
<a name="l01007"></a>01007       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01008"></a>01008         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): &quot;</span>
<a name="l01009"></a>01009                <span class="stringliteral">&quot;discard entry already installed&quot;</span>);
<a name="l01010"></a>01010       <span class="keywordflow">return</span> 0;
<a name="l01011"></a>01011     }
<a name="l01012"></a>01012 
<a name="l01013"></a>01013       <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l01014"></a>01014   }
<a name="l01015"></a>01015 
<a name="l01016"></a>01016   new_or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
<a name="l01017"></a>01017   new_or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>;
<a name="l01018"></a>01018   new_or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>.s_addr = 0;
<a name="l01019"></a>01019   new_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = 0;
<a name="l01020"></a>01020   new_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l01021"></a>01021   new_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>;
<a name="l01022"></a>01022   new_or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>;
<a name="l01023"></a>01023   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = new_or;
<a name="l01024"></a>01024 
<a name="l01025"></a>01025   <a class="code" href="ospf__zebra_8c.html#a49ea785a614ca3ddf8878814cd58681a">ospf_zebra_add_discard</a> (p);
<a name="l01026"></a>01026 
<a name="l01027"></a>01027   <span class="keywordflow">return</span> 1;
<a name="l01028"></a>01028 }
<a name="l01029"></a>01029 
<a name="l01030"></a>01030 <span class="keywordtype">void</span>
<a name="l01031"></a><a class="code" href="ospf__route_8h.html#a205aaead74e907b626028ebc67b2d292">01031</a> <a class="code" href="ospf__route_8c.html#ad70227bcce895a92b74cc1ed6d30f7b5">ospf_delete_discard_route</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l01032"></a>01032 {
<a name="l01033"></a>01033   <a class="code" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a>(p);
<a name="l01034"></a>01034 }
<a name="l01035"></a>01035 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__route_8c.html">ospf_route.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
