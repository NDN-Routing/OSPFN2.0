<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/if_ioctl_solaris.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('if__ioctl__solaris_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">zebra/if_ioctl_solaris.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ioctl_8h_source.html">ioctl.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="connected_8h_source.html">connected.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="privs_8h_source.html">privs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="interface_8h_source.html">zebra/interface.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for if_ioctl_solaris.c:</div>
<div class="dyncontent">
<div class="center"><img src="if__ioctl__solaris_8c__incl.png" border="0" usemap="#zebra_2if__ioctl__solaris_8c" alt=""/></div>
<map name="zebra_2if__ioctl__solaris_8c" id="zebra_2if__ioctl__solaris_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1475,80,1541,107"/><area shape="rect" id="node61" href="if_8h.html" title="if.h" alt="" coords="2896,304,2936,331"/><area shape="rect" id="node65" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2937,453,3031,480"/><area shape="rect" id="node67" href="prefix_8h.html" title="prefix.h" alt="" coords="3075,379,3143,405"/><area shape="rect" id="node70" href="ioctl_8h.html" title="ioctl.h" alt="" coords="3167,80,3225,107"/><area shape="rect" id="node72" href="connected_8h.html" title="connected.h" alt="" coords="3249,80,3348,107"/><area shape="rect" id="node74" href="memory_8h.html" title="memory.h" alt="" coords="3372,80,3455,107"/><area shape="rect" id="node78" href="log_8h.html" title="log.h" alt="" coords="2763,80,2815,107"/><area shape="rect" id="node81" href="privs_8h.html" title="privs.h" alt="" coords="3479,80,3541,107"/><area shape="rect" id="node83" href="interface_8h.html" title="zebra/interface.h" alt="" coords="2969,80,3092,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2033,155,2111,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2135,155,2184,181"/><area shape="rect" id="node63" href="linklist_8h.html" title="linklist.h" alt="" coords="2897,379,2967,405"/><area shape="rect" id="node76" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3356,155,3471,181"/><area shape="rect" id="node85" href="redistribute_8h.html" title="redistribute.h" alt="" coords="2979,155,3081,181"/><area shape="rect" id="node87" href="table_8h.html" title="table.h" alt="" coords="2953,229,3017,256"/><area shape="rect" id="node89" href="zserv_8h.html" title="zserv.h" alt="" coords="3042,229,3107,256"/><area shape="rect" id="node91" href="rib_8h.html" title="rib.h" alt="" coords="3085,304,3133,331"/><area shape="rect" id="node95" href="workqueue_8h.html" title="workqueue.h" alt="" coords="2961,304,3060,331"/></map>
</div>
</div>
<p><a href="if__ioctl__solaris_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a7948dae760e5ffb4e8877e11983792ca">IFNUM_BASE</a>&#160;&#160;&#160;32</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#ae664b436e38fc934b0306daedd6643ba">ADDRLEN</a>(sa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a03596d0cdddf3dc7f6598bde3c2b42bc">SIN</a>(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)&#160;&#160;&#160;((struct sockaddr_in *)(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a17a5216d22096f04d8e012276499841f">SIN6</a>(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)&#160;&#160;&#160;((struct sockaddr_in6 *)(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>))</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (struct lifreq *, const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#aef9745adb143d78a8b48446246d95219">if_get_flags_direct</a> (const char *, uint64_t *, unsigned int af)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a3e44d600452c924958ded0b3de04d737">if_get_addr</a> (struct <a class="el" href="structinterface.html">interface</a> *, struct sockaddr *, const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a67382c9d3c2df6855019fb6ab4a54863">interface_info_ioctl</a> (struct <a class="el" href="structinterface.html">interface</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#aeb439893ae0817f78d441ed0a0b2401d">interface_list_ioctl</a> (int af)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#ab3547248323e74e4b2c035ce2e8548b4">if_get_index</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a566ef48adbf48e92f6e0044e317b0d99">interface_list</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a993ce5d30d59ced012621979ac76496b">if_lookup_linklocal</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ae664b436e38fc934b0306daedd6643ba"></a><!-- doxytag: member="if_ioctl_solaris.c::ADDRLEN" ref="ae664b436e38fc934b0306daedd6643ba" args="(sa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ADDRLEN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">sa</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment">(((sa)-&gt;sa_family == AF_INET ?  \
                <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in) : <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6)))
</pre></div>
<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00245">245</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>

</div>
</div>
<a class="anchor" id="a7948dae760e5ffb4e8877e11983792ca"></a><!-- doxytag: member="if_ioctl_solaris.c::IFNUM_BASE" ref="a7948dae760e5ffb4e8877e11983792ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IFNUM_BASE&#160;&#160;&#160;32</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a03596d0cdddf3dc7f6598bde3c2b42bc"></a><!-- doxytag: member="if_ioctl_solaris.c::SIN" ref="a03596d0cdddf3dc7f6598bde3c2b42bc" args="(s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a></td><td>)</td>
          <td>&#160;&#160;&#160;((struct sockaddr_in *)(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00248">248</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>

</div>
</div>
<a class="anchor" id="a17a5216d22096f04d8e012276499841f"></a><!-- doxytag: member="if_ioctl_solaris.c::SIN6" ref="a17a5216d22096f04d8e012276499841f" args="(s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIN6</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a></td><td>)</td>
          <td>&#160;&#160;&#160;((struct sockaddr_in6 *)(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00249">249</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3e44d600452c924958ded0b3de04d737"></a><!-- doxytag: member="if_ioctl_solaris.c::if_get_addr" ref="a3e44d600452c924958ded0b3de04d737" args="(struct interface *, struct sockaddr *, const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int if_get_addr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr *&#160;</td>
          <td class="paramname"><em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>label</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00253">253</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>lifreq lifreq;
  <span class="keyword">struct </span>sockaddr_storage mask, dest;
  <span class="keywordtype">char</span> *dest_pnt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  u_char prefixlen = 0;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> af;
  <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a> = 0;

  <span class="comment">/* Interface&#39;s name and address family.</span>
<span class="comment">   * We need to use the logical interface name / label, if we&#39;ve been</span>
<span class="comment">   * given one, in order to get the right address</span>
<span class="comment">   */</span>
  strncpy (lifreq.lifr_name, (label ? label : ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>), IFNAMSIZ);

  <span class="comment">/* Interface&#39;s address. */</span>
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;lifreq.lifr_addr, addr, <a class="code" href="if__ioctl__solaris_8c.html#ae664b436e38fc934b0306daedd6643ba">ADDRLEN</a> (addr));
  af = addr-&gt;sa_family;

  <span class="comment">/* Point to point or broad cast address pointer init. */</span>
  dest_pnt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (af, SIOCGLIFDSTADDR, (caddr_t) &amp; lifreq) &gt;= 0)
    {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;dest, &amp;lifreq.lifr_dstaddr, <a class="code" href="if__ioctl__solaris_8c.html#ae664b436e38fc934b0306daedd6643ba">ADDRLEN</a> (addr));
      <span class="keywordflow">if</span> (af == AF_INET)
        dest_pnt = (<span class="keywordtype">char</span> *) &amp;(<a class="code" href="if__ioctl__solaris_8c.html#a03596d0cdddf3dc7f6598bde3c2b42bc">SIN</a> (&amp;dest)-&gt;sin_addr);
      <span class="keywordflow">else</span>
        dest_pnt = (<span class="keywordtype">char</span> *) &amp;(<a class="code" href="if__ioctl__solaris_8c.html#a17a5216d22096f04d8e012276499841f">SIN6</a> (&amp;dest)-&gt;sin6_addr);
      flags = <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>;
    }

  <span class="keywordflow">if</span> (af == AF_INET)
    {
      ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGLIFNETMASK, (caddr_t) &amp; lifreq);
      
      <span class="keywordflow">if</span> (ret &lt; 0)
        {
          <span class="keywordflow">if</span> (errno != EADDRNOTAVAIL)
            {
              <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGLIFNETMASK (%s) fail: %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
                         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
              <span class="keywordflow">return</span> ret;
            }
          <span class="keywordflow">return</span> 0;
        }
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mask, &amp;lifreq.lifr_addr, <a class="code" href="if__ioctl__solaris_8c.html#ae664b436e38fc934b0306daedd6643ba">ADDRLEN</a> (addr));

      prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (<a class="code" href="if__ioctl__solaris_8c.html#a03596d0cdddf3dc7f6598bde3c2b42bc">SIN</a> (&amp;mask)-&gt;sin_addr);
      <span class="keywordflow">if</span> (!dest_pnt &amp;&amp; (<a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGLIFBRDADDR, (caddr_t) &amp; lifreq) &gt;= 0))
    {
          <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;dest, &amp;lifreq.lifr_broadaddr, sizeof (<span class="keyword">struct</span> sockaddr_in));
          dest_pnt = (<span class="keywordtype">char</span> *) &amp;<a class="code" href="if__ioctl__solaris_8c.html#a03596d0cdddf3dc7f6598bde3c2b42bc">SIN</a> (&amp;dest)-&gt;sin_addr;
        }
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (af == AF_INET6)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (SIOCGLIFSUBNET, (caddr_t) &amp; lifreq) &lt; 0)
    {
      <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; IFF_POINTOPOINT)
        prefixlen = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGLIFSUBNET (%s) fail: %s&quot;</span>,
               ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
    }
      <span class="keywordflow">else</span>
    {
      prefixlen = lifreq.lifr_addrlen;
    }
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Set address to the interface. */</span>
  <span class="keywordflow">if</span> (af == AF_INET)
    <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (ifp, flags, &amp;<a class="code" href="if__ioctl__solaris_8c.html#a03596d0cdddf3dc7f6598bde3c2b42bc">SIN</a> (addr)-&gt;sin_addr, prefixlen,
                        (<span class="keyword">struct</span> in_addr *) dest_pnt, label);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (af == AF_INET6)
    connected_add_ipv6 (ifp, flags, &amp;<a class="code" href="if__ioctl__solaris_8c.html#a17a5216d22096f04d8e012276499841f">SIN6</a> (addr)-&gt;sin6_addr, prefixlen,
                        (<span class="keyword">struct</span> in6_addr *) dest_pnt, label);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aef9745adb143d78a8b48446246d95219"></a><!-- doxytag: member="if_ioctl_solaris.c::if_get_flags_direct" ref="aef9745adb143d78a8b48446246d95219" args="(const char *, uint64_t *, unsigned int af)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int if_get_flags_direct </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>af</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ioctl__solaris_8c_source.html#l00290">290</a> of file <a class="el" href="ioctl__solaris_8c_source.html">ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>lifreq lifreq;
  <span class="keywordtype">int</span> ret;
    
  <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifname);
  
  ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (af, SIOCGLIFFLAGS, (caddr_t) &amp;lifreq);
  
  <span class="keywordflow">if</span> (ret)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifname %s, error %s (%d)&quot;</span>,
                __func__, ifname, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno), errno);
  
  *<a class="code" href="structflags.html">flags</a> = lifreq.lifr_flags;
  
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab3547248323e74e4b2c035ce2e8548b4"></a><!-- doxytag: member="if_ioctl_solaris.c::if_get_index" ref="ab3547248323e74e4b2c035ce2e8548b4" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int if_get_index </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00212">212</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>lifreq lifreq;

  <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
    ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET, SIOCGLIFINDEX, (caddr_t) &amp; lifreq);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
    ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET6, SIOCGLIFINDEX, (caddr_t) &amp; lifreq);
  <span class="keywordflow">else</span>
    ret = -1;

  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGLIFINDEX(%s) failed&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <span class="keywordflow">return</span> ret;
    }

  <span class="comment">/* OK we got interface index. */</span>
<span class="preprocessor">#ifdef ifr_ifindex</span>
<span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = lifreq.lifr_ifindex;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = lifreq.lifr_index;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <span class="keywordflow">return</span> ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a993ce5d30d59ced012621979ac76496b"></a><!-- doxytag: member="if_ioctl_solaris.c::if_lookup_linklocal" ref="a993ce5d30d59ced012621979ac76496b" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structconnected.html">connected</a>* if_lookup_linklocal </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00360">360</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;

  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a>(ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, ifc))
    {
      <span class="keywordflow">if</span> ((ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6) &amp;&amp;
          (IN6_IS_ADDR_LINKLOCAL (&amp;ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.prefix6)))
        <span class="keywordflow">return</span> ifc;
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a67382c9d3c2df6855019fb6ab4a54863"></a><!-- doxytag: member="if_ioctl_solaris.c::interface_info_ioctl" ref="a67382c9d3c2df6855019fb6ab4a54863" args="(struct interface *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void interface_info_ioctl </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00342">342</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="if__ioctl__solaris_8c.html#ab3547248323e74e4b2c035ce2e8548b4">if_get_index</a> (ifp);
  <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (ifp);
  <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (ifp);
  <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (ifp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a566ef48adbf48e92f6e0044e317b0d99"></a><!-- doxytag: member="if_ioctl_solaris.c::interface_list" ref="a566ef48adbf48e92f6e0044e317b0d99" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void interface_list </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00352">352</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="if__ioctl__solaris_8c.html#aeb439893ae0817f78d441ed0a0b2401d">interface_list_ioctl</a> (AF_INET);
  <a class="code" href="if__ioctl__solaris_8c.html#aeb439893ae0817f78d441ed0a0b2401d">interface_list_ioctl</a> (AF_INET6);
  <a class="code" href="if__ioctl__solaris_8c.html#aeb439893ae0817f78d441ed0a0b2401d">interface_list_ioctl</a> (AF_UNSPEC);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeb439893ae0817f78d441ed0a0b2401d"></a><!-- doxytag: member="if_ioctl_solaris.c::interface_list_ioctl" ref="aeb439893ae0817f78d441ed0a0b2401d" args="(int af)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int interface_list_ioctl </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>af</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl__solaris_8c_source.html#l00043">43</a> of file <a class="el" href="if__ioctl__solaris_8c_source.html">if_ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
<span class="preprocessor">#define IFNUM_BASE 32</span>
<span class="preprocessor"></span>  <span class="keyword">struct </span>lifnum lifn;
  <span class="keywordtype">int</span> ifnum;
  <span class="keyword">struct </span>lifreq *lifreq;
  <span class="keyword">struct </span>lifconf lifconf;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
  <span class="keywordtype">int</span> save_errno;
  <span class="keywordtype">size_t</span> needed, lastneeded = 0;
  <span class="keywordtype">char</span> *buf = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
  
  sock = socket (af, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t make %s socket stream: %s&quot;</span>,
                 (af == AF_INET ? <span class="stringliteral">&quot;AF_INET&quot;</span> : <span class="stringliteral">&quot;AF_INET6&quot;</span>), <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
                 
      <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
        <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
        
      <span class="keywordflow">return</span> -1;
    }

calculate_lifc_len:     <span class="comment">/* must hold privileges to enter here */</span>
  lifn.lifn_family = af;
  lifn.lifn_flags = LIFC_NOXMIT; <span class="comment">/* we want NOXMIT interfaces too */</span>
  ret = ioctl (sock, SIOCGLIFNUM, &amp;lifn);
  save_errno = errno;
  
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
 
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface_list_ioctl: SIOCGLIFNUM failed %s&quot;</span>,
                 <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
      close (sock);
      <span class="keywordflow">return</span> -1;
    }
  ifnum = lifn.lifn_count;

  <span class="comment">/*</span>
<span class="comment">   * When calculating the buffer size needed, add a small number</span>
<span class="comment">   * of interfaces to those we counted.  We do this to capture</span>
<span class="comment">   * the interface status of potential interfaces which may have</span>
<span class="comment">   * been plumbed between the SIOCGLIFNUM and the SIOCGLIFCONF.</span>
<span class="comment">   */</span>
  needed = (ifnum + 4) * <span class="keyword">sizeof</span> (<span class="keyword">struct</span> lifreq);
  <span class="keywordflow">if</span> (needed &gt; lastneeded || needed &lt; lastneeded / 2)
    {
      <span class="keywordflow">if</span> (buf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, buf);
      <span class="keywordflow">if</span> ((buf = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, needed)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;interface_list_ioctl: malloc failed&quot;</span>);
          close (sock);
          <span class="keywordflow">return</span> -1;
        }
    }
  lastneeded = needed;

  lifconf.lifc_family = af;
  lifconf.lifc_flags = LIFC_NOXMIT;
  lifconf.lifc_len = needed;
  lifconf.lifc_buf = buf;

  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
    
  ret = ioctl (sock, SIOCGLIFCONF, &amp;lifconf);

  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="keywordflow">if</span> (errno == EINVAL)
        <span class="keywordflow">goto</span> calculate_lifc_len; <span class="comment">/* deliberately hold privileges */</span>

      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGLIFCONF: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));

      <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
        <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);

      <span class="keywordflow">goto</span> end;
    }

  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
    
  <span class="comment">/* Allocate interface. */</span>
  lifreq = lifconf.lifc_req;

  <span class="keywordflow">for</span> (n = 0; n &lt; lifconf.lifc_len; n += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>lifreq))
    {
      <span class="comment">/* we treat Solaris logical interfaces as addresses, because that is</span>
<span class="comment">       * how PF_ROUTE on Solaris treats them. Hence we can not directly use</span>
<span class="comment">       * the lifreq_name to get the ifp.  We need to normalise the name</span>
<span class="comment">       * before attempting get.</span>
<span class="comment">       *</span>
<span class="comment">       * Solaris logical interface names are in the form of:</span>
<span class="comment">       * &lt;interface name&gt;:&lt;logical interface id&gt;</span>
<span class="comment">       */</span>
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> normallen = 0;
      uint64_t lifflags;
      
      <span class="comment">/* We should exclude ~IFF_UP interfaces, as we&#39;ll find out about them</span>
<span class="comment">       * coming up later through RTM_NEWADDR message on the route socket.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#aef9745adb143d78a8b48446246d95219">if_get_flags_direct</a> (lifreq-&gt;lifr_name, &amp;lifflags,
                           lifreq-&gt;lifr_addr.ss_family)
          || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lifflags, IFF_UP))
        {
          lifreq++;
          <span class="keywordflow">continue</span>;
        }
      
      <span class="comment">/* Find the normalised name */</span>
      <span class="keywordflow">while</span> ( (normallen &lt; <span class="keyword">sizeof</span>(lifreq-&gt;lifr_name))
             &amp;&amp; ( *(lifreq-&gt;lifr_name + normallen) != <span class="charliteral">&#39;\0&#39;</span>)
             &amp;&amp; ( *(lifreq-&gt;lifr_name + normallen) != <span class="charliteral">&#39;:&#39;</span>) )
        normallen++;
      
      ifp = <a class="code" href="if_8c.html#a18fa51c3b90a3afa1f564e85a2f4c62b">if_get_by_name_len</a>(lifreq-&gt;lifr_name, normallen);

      <span class="keywordflow">if</span> (lifreq-&gt;lifr_addr.ss_family == AF_INET)
        ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> |= <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>;

      <span class="keywordflow">if</span> (lifreq-&gt;lifr_addr.ss_family == AF_INET6)
        {
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>          ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> |= <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>          lifreq++;
          <span class="keywordflow">continue</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
        }
        
      <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);

      <a class="code" href="if__ioctl__solaris_8c.html#a67382c9d3c2df6855019fb6ab4a54863">interface_info_ioctl</a> (ifp);
      
      <span class="comment">/* If a logical interface pass the full name so it can be</span>
<span class="comment">       * as a label on the address</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> ( *(lifreq-&gt;lifr_name + normallen) != <span class="charliteral">&#39;\0&#39;</span>)
        <a class="code" href="if__ioctl_8c.html#a4ab9a3cd5b22b08ebce9585106cf604f">if_get_addr</a> (ifp, (<span class="keyword">struct</span> sockaddr *) &amp;lifreq-&gt;lifr_addr,
                     lifreq-&gt;lifr_name);
      <span class="keywordflow">else</span>
        <a class="code" href="if__ioctl_8c.html#a4ab9a3cd5b22b08ebce9585106cf604f">if_get_addr</a> (ifp, (<span class="keyword">struct</span> sockaddr *) &amp;lifreq-&gt;lifr_addr, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
        
      <span class="comment">/* Poke the interface flags. Lets IFF_UP mangling kick in */</span>
      <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>);
      
      lifreq++;
    }

end:
  close (sock);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, lifconf.lifc_buf);
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a722ec3cfa50be64cc83bf2006bca83a5"></a><!-- doxytag: member="if_ioctl_solaris.c::lifreq_set_name" ref="a722ec3cfa50be64cc83bf2006bca83a5" args="(struct lifreq *, const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void lifreq_set_name </td>
          <td>(</td>
          <td class="paramtype">struct lifreq *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ioctl__solaris_8c_source.html#l00040">40</a> of file <a class="el" href="ioctl__solaris_8c_source.html">ioctl_solaris.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  strncpy (lifreq-&gt;lifr_name, ifname, IFNAMSIZ);
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a10659da9c59441877a609c3cd916f3cf"></a><!-- doxytag: member="if_ioctl_solaris.c::zserv_privs" ref="a10659da9c59441877a609c3cd916f3cf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="el" href="zserv_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra_2main_8c_source.html#l00096">96</a> of file <a class="el" href="zebra_2main_8c_source.html">main.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="if__ioctl__solaris_8c.html">if_ioctl_solaris.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:37 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
