<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_dump.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__dump_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_dump.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__table_8h_source.html">bgpd/bgp_table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__dump_8h_source.html">bgpd/bgp_dump.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_dump.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__dump_8c__incl.png" border="0" usemap="#bgpd_2bgp__dump_8c" alt=""/></div>
<map name="bgpd_2bgp__dump_8c" id="bgpd_2bgp__dump_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1512,80,1579,107"/><area shape="rect" id="node61" href="log_8h.html" title="log.h" alt="" coords="2786,229,2837,256"/><area shape="rect" id="node64" href="stream_8h.html" title="stream.h" alt="" coords="3273,80,3348,107"/><area shape="rect" id="node66" href="prefix_8h.html" title="prefix.h" alt="" coords="3277,155,3344,181"/><area shape="rect" id="node68" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3376,229,3469,256"/><area shape="rect" id="node71" href="command_8h.html" title="command.h" alt="" coords="2978,80,3069,107"/><area shape="rect" id="node77" href="thread_8h.html" title="thread.h" alt="" coords="3007,229,3079,256"/><area shape="rect" id="node84" href="linklist_8h.html" title="linklist.h" alt="" coords="3549,80,3619,107"/><area shape="rect" id="node86" href="bgp__table_8h.html" title="bgpd/bgp_table.h" alt="" coords="3695,155,3825,181"/><area shape="rect" id="node88" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3373,80,3472,107"/><area shape="rect" id="node91" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="3644,80,3775,107"/><area shape="rect" id="node94" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="3849,80,3969,107"/><area shape="rect" id="node96" href="bgp__dump_8h.html" title="bgpd/bgp_dump.h" alt="" coords="3993,80,4127,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1816,155,1893,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="1918,155,1967,181"/><area shape="rect" id="node73" href="vector_8h.html" title="vector.h" alt="" coords="2927,155,2999,181"/><area shape="rect" id="node75" href="vty_8h.html" title="vty.h" alt="" coords="2850,155,2901,181"/><area shape="rect" id="node80" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="3023,155,3147,181"/></map>
</div>
</div>
<p><a href="bgp__dump_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__dump.html">bgp_dump</a></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608ab">bgp_dump_type</a> { <a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd">BGP_DUMP_ALL</a>, 
<a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b">BGP_DUMP_UPDATES</a>, 
<a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd">BGP_DUMP_ROUTES</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083a">MRT_MSG_TYPES</a> { <br/>
&#160;&#160;<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa13078c6ece92b3953cde3dd3b97256c7">MSG_NULL</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa702fa26f01731d4e6f62ec9865ae6364">MSG_START</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aac9b00665fd37f5e562216ed3b27a7120">MSG_DIE</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa7b9ee67104832ffa180539a80169f58d">MSG_I_AM_DEAD</a>, 
<br/>
&#160;&#160;<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa9e8ddd1e79894b86041c109e1148019a">MSG_PEER_DOWN</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa8ed26ebdf07446e8ad9ff3b4c36f5152">MSG_PROTOCOL_BGP</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa6dd84f574b387bb119a6c244571c80d1">MSG_PROTOCOL_RIP</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa9ff740459ab6f3820f85e8a437f3faba">MSG_PROTOCOL_IDRP</a>, 
<br/>
&#160;&#160;<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa10519cd845f91bedc69a44cd217c0c23">MSG_PROTOCOL_RIPNG</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa0d6c1d1a74f658dc83125c0f029bbeab">MSG_PROTOCOL_BGP4PLUS</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa6f151d9aeccc6655cbeaeaaff2be0b17">MSG_PROTOCOL_BGP4PLUS_01</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa85206ff6abf8a3cd4ef073816778825c">MSG_PROTOCOL_OSPF</a>, 
<br/>
&#160;&#160;<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aaa0777352feb887450fbe079f4588d6f4">MSG_TABLE_DUMP</a>, 
<a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a03e20f1079916f8b199d845d7e9290ec">bgp_dump_interval_func</a> (struct <a class="el" href="structthread.html">thread</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a83a98e4dd07ab8ab3065e9fa4c7cfde5">bgp_dump_open_file</a> (struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *<a class="el" href="structbgp__dump.html">bgp_dump</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a394c2d5e40a37005a6246a168d45cb0e">bgp_dump_interval_add</a> (struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *<a class="el" href="structbgp__dump.html">bgp_dump</a>, int interval)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (struct <a class="el" href="structstream.html">stream</a> *obuf, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int subtype)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#aeea4aaf739360141366d24b3a0a2c32c">bgp_dump_set_size</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#ac3d2bfc128c220eba4e77782b563bfb2">bgp_dump_routes_index_table</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a804d21aa1878059e1a7eefa32a228e83">bgp_dump_routes_func</a> (int afi, int first_run, unsigned int seq)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a4793b761f0d6e7dba96ab4e32ededcaa">bgp_dump_common</a> (struct <a class="el" href="structstream.html">stream</a> *obuf, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, int forceas4)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a583bbdd359820c2e8ecd9c64c39e3998">bgp_dump_state</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, int status_old, int status_new)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a155c4167ced1f77e1e0dbc00395a5744">bgp_dump_packet_func</a> (struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *<a class="el" href="structbgp__dump.html">bgp_dump</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structstream.html">stream</a> *packet)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#aa97689fd779f7eaaaad6d74bb3ffc837">bgp_dump_packet</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct <a class="el" href="structstream.html">stream</a> *packet)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a1165f68741bdba80dc77f0f2027794f4">bgp_dump_parse_time</a> (const char *<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *<a class="el" href="structbgp__dump.html">bgp_dump</a>, enum <a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608ab">bgp_dump_type</a> <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *path, const char *interval_str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a59037b6c33622bac74c406f6b01c955f">bgp_dump_unset</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *<a class="el" href="structbgp__dump.html">bgp_dump</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a6123815185ba65e14fdf131ba719e12c">DEFUN</a> (dump_bgp_all, dump_bgp_all_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> all PATH&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a33dd7b4f47fada217342aee6127150f0">DEFUN</a> (dump_bgp_all_interval, dump_bgp_all_interval_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> all PATH INTERVAL&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#ad346163ef8df1fd4f257a4b349a50b81">DEFUN</a> (no_dump_bgp_all, no_dump_bgp_all_cmd,&quot;no dump <a class="el" href="structbgp.html">bgp</a> all [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#af051666167a337659d4415ad3e25b57a">DEFUN</a> (dump_bgp_updates, dump_bgp_updates_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> updates PATH&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a1f5f4445c659a139e1240b4be5798198">DEFUN</a> (dump_bgp_updates_interval, dump_bgp_updates_interval_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> updates PATH INTERVAL&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#aa3dd1c3f62b82fc9cdf584eff62da4e6">DEFUN</a> (no_dump_bgp_updates, no_dump_bgp_updates_cmd,&quot;no dump <a class="el" href="structbgp.html">bgp</a> updates [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a467f5bf35144c7f819157199fc0a5641">DEFUN</a> (dump_bgp_routes, dump_bgp_routes_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> routes-mrt PATH&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a79d20719255900af67da91992eee9739">DEFUN</a> (dump_bgp_routes_interval, dump_bgp_routes_interval_cmd,&quot;dump <a class="el" href="structbgp.html">bgp</a> routes-mrt PATH INTERVAL&quot;,&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a70c826ae3c03c440f2cccad7dbb99f2e">DEFUN</a> (no_dump_bgp_routes, no_dump_bgp_routes_cmd,&quot;no dump <a class="el" href="structbgp.html">bgp</a> routes-mrt [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a38ab48bf42d33009c6320fbcb6936a23">config_write_bgp_dump</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#afa613c770fb199232be285cb5061f765">bgp_dump_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a9011f2abe3c40483e04714cc3189475e">bgp_dump_finish</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__dump.html">bgp_dump</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__dump.html">bgp_dump</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__dump.html">bgp_dump</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread.html">thread</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#ad83105d839fc720128fa304d481982a8">t_bgp_dump_routes</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structcmd__node.html">cmd_node</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__dump_8c.html#adb205c2384f08bce1d15368029538232">bgp_dump_node</a></td></tr>
</table>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="af5c4c5c58c06e9e0da028895448608ab"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_type" ref="af5c4c5c58c06e9e0da028895448608ab" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608ab">bgp_dump_type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd"></a><!-- doxytag: member="BGP_DUMP_ALL" ref="af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd" args="" -->BGP_DUMP_ALL</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b"></a><!-- doxytag: member="BGP_DUMP_UPDATES" ref="af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b" args="" -->BGP_DUMP_UPDATES</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd"></a><!-- doxytag: member="BGP_DUMP_ROUTES" ref="af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd" args="" -->BGP_DUMP_ROUTES</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00037">37</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd">BGP_DUMP_ALL</a>,
  <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b">BGP_DUMP_UPDATES</a>,
  <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd">BGP_DUMP_ROUTES</a>
};
</pre></div>
</div>
</div>
<a class="anchor" id="a40efcecf46bdb61ee74514861374083a"></a><!-- doxytag: member="bgp_dump.c::MRT_MSG_TYPES" ref="a40efcecf46bdb61ee74514861374083a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083a">MRT_MSG_TYPES</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa13078c6ece92b3953cde3dd3b97256c7"></a><!-- doxytag: member="MSG_NULL" ref="a40efcecf46bdb61ee74514861374083aa13078c6ece92b3953cde3dd3b97256c7" args="" -->MSG_NULL</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa702fa26f01731d4e6f62ec9865ae6364"></a><!-- doxytag: member="MSG_START" ref="a40efcecf46bdb61ee74514861374083aa702fa26f01731d4e6f62ec9865ae6364" args="" -->MSG_START</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aac9b00665fd37f5e562216ed3b27a7120"></a><!-- doxytag: member="MSG_DIE" ref="a40efcecf46bdb61ee74514861374083aac9b00665fd37f5e562216ed3b27a7120" args="" -->MSG_DIE</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa7b9ee67104832ffa180539a80169f58d"></a><!-- doxytag: member="MSG_I_AM_DEAD" ref="a40efcecf46bdb61ee74514861374083aa7b9ee67104832ffa180539a80169f58d" args="" -->MSG_I_AM_DEAD</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa9e8ddd1e79894b86041c109e1148019a"></a><!-- doxytag: member="MSG_PEER_DOWN" ref="a40efcecf46bdb61ee74514861374083aa9e8ddd1e79894b86041c109e1148019a" args="" -->MSG_PEER_DOWN</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa8ed26ebdf07446e8ad9ff3b4c36f5152"></a><!-- doxytag: member="MSG_PROTOCOL_BGP" ref="a40efcecf46bdb61ee74514861374083aa8ed26ebdf07446e8ad9ff3b4c36f5152" args="" -->MSG_PROTOCOL_BGP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa6dd84f574b387bb119a6c244571c80d1"></a><!-- doxytag: member="MSG_PROTOCOL_RIP" ref="a40efcecf46bdb61ee74514861374083aa6dd84f574b387bb119a6c244571c80d1" args="" -->MSG_PROTOCOL_RIP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa9ff740459ab6f3820f85e8a437f3faba"></a><!-- doxytag: member="MSG_PROTOCOL_IDRP" ref="a40efcecf46bdb61ee74514861374083aa9ff740459ab6f3820f85e8a437f3faba" args="" -->MSG_PROTOCOL_IDRP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa10519cd845f91bedc69a44cd217c0c23"></a><!-- doxytag: member="MSG_PROTOCOL_RIPNG" ref="a40efcecf46bdb61ee74514861374083aa10519cd845f91bedc69a44cd217c0c23" args="" -->MSG_PROTOCOL_RIPNG</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa0d6c1d1a74f658dc83125c0f029bbeab"></a><!-- doxytag: member="MSG_PROTOCOL_BGP4PLUS" ref="a40efcecf46bdb61ee74514861374083aa0d6c1d1a74f658dc83125c0f029bbeab" args="" -->MSG_PROTOCOL_BGP4PLUS</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa6f151d9aeccc6655cbeaeaaff2be0b17"></a><!-- doxytag: member="MSG_PROTOCOL_BGP4PLUS_01" ref="a40efcecf46bdb61ee74514861374083aa6f151d9aeccc6655cbeaeaaff2be0b17" args="" -->MSG_PROTOCOL_BGP4PLUS_01</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa85206ff6abf8a3cd4ef073816778825c"></a><!-- doxytag: member="MSG_PROTOCOL_OSPF" ref="a40efcecf46bdb61ee74514861374083aa85206ff6abf8a3cd4ef073816778825c" args="" -->MSG_PROTOCOL_OSPF</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aaa0777352feb887450fbe079f4588d6f4"></a><!-- doxytag: member="MSG_TABLE_DUMP" ref="a40efcecf46bdb61ee74514861374083aaa0777352feb887450fbe079f4588d6f4" args="" -->MSG_TABLE_DUMP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0"></a><!-- doxytag: member="MSG_TABLE_DUMP_V2" ref="a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0" args="" -->MSG_TABLE_DUMP_V2</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00044">44</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">                   {
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa13078c6ece92b3953cde3dd3b97256c7">MSG_NULL</a>,
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa702fa26f01731d4e6f62ec9865ae6364">MSG_START</a>,                   <span class="comment">/* sender is starting up */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aac9b00665fd37f5e562216ed3b27a7120">MSG_DIE</a>,                     <span class="comment">/* receiver should shut down */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa7b9ee67104832ffa180539a80169f58d">MSG_I_AM_DEAD</a>,               <span class="comment">/* sender is shutting down */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa9e8ddd1e79894b86041c109e1148019a">MSG_PEER_DOWN</a>,               <span class="comment">/* sender&#39;s peer is down */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa8ed26ebdf07446e8ad9ff3b4c36f5152">MSG_PROTOCOL_BGP</a>,            <span class="comment">/* msg is a BGP packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa6dd84f574b387bb119a6c244571c80d1">MSG_PROTOCOL_RIP</a>,            <span class="comment">/* msg is a RIP packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa9ff740459ab6f3820f85e8a437f3faba">MSG_PROTOCOL_IDRP</a>,           <span class="comment">/* msg is an IDRP packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa10519cd845f91bedc69a44cd217c0c23">MSG_PROTOCOL_RIPNG</a>,          <span class="comment">/* msg is a RIPNG packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa0d6c1d1a74f658dc83125c0f029bbeab">MSG_PROTOCOL_BGP4PLUS</a>,       <span class="comment">/* msg is a BGP4+ packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa6f151d9aeccc6655cbeaeaaff2be0b17">MSG_PROTOCOL_BGP4PLUS_01</a>,    <span class="comment">/* msg is a BGP4+ (draft 01) packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa85206ff6abf8a3cd4ef073816778825c">MSG_PROTOCOL_OSPF</a>,           <span class="comment">/* msg is an OSPF packet */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aaa0777352feb887450fbe079f4588d6f4">MSG_TABLE_DUMP</a>,              <span class="comment">/* routing table dump */</span>
   <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>            <span class="comment">/* routing table dump, version 2 */</span>
};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a4793b761f0d6e7dba96ab4e32ededcaa"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_common" ref="a4793b761f0d6e7dba96ab4e32ededcaa" args="(struct stream *obuf, struct peer *peer, int forceas4)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_dump_common </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>obuf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>forceas4</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00413">413</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> empty[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  <span class="comment">/* Source AS number and Destination AS number. */</span>
  <span class="keywordflow">if</span> (forceas4 || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) )
    {
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
    }

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
    {
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#a959523b5b0a6ed9a0b87825e42545ec0">ifindex</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);

      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, empty, <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
    {
      <span class="comment">/* Interface Index and Address family. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#a959523b5b0a6ed9a0b87825e42545ec0">ifindex</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);

      <span class="comment">/* Source IP Address and Destination IP Address. */</span>
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.sin6.sin6_addr, <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>-&gt;sin6.sin6_addr, <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, empty, <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9011f2abe3c40483e04714cc3189475e"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_finish" ref="a9011f2abe3c40483e04714cc3189475e" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00870">870</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (<a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a>);
  <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac6384bad2fc6676ba026779420d0fc3e"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_header" ref="ac6384bad2fc6676ba026779420d0fc3e" args="(struct stream *obuf, int type, int subtype)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_dump_header </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>obuf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>subtype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00174">174</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  time_t now;

  <span class="comment">/* Set header. */</span>
  time (&amp;now);

  <span class="comment">/* Put dump packet header. */</span>
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, now);  
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, subtype);

  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, 0);    <span class="comment">/* len */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="afa613c770fb199232be285cb5061f765"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_init" ref="afa613c770fb199232be285cb5061f765" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00847">847</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  memset (&amp;<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__dump.html">bgp_dump</a>));
  memset (&amp;<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__dump.html">bgp_dump</a>));
  memset (&amp;<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__dump.html">bgp_dump</a>));

  <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a> + <a class="code" href="bgp__dump_8h.html#abdf8e79afefff2a371634fcbd788b1df">BGP_DUMP_MSG_HEADER</a>
                              + <a class="code" href="bgp__dump_8h.html#ac06b815d8ee149eee8c8891d61222104">BGP_DUMP_HEADER_SIZE</a>);

  <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;<a class="code" href="bgp__dump_8c.html#adb205c2384f08bce1d15368029538232">bgp_dump_node</a>, <a class="code" href="bgp__dump_8c.html#a38ab48bf42d33009c6320fbcb6936a23">config_write_bgp_dump</a>);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_all_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_all_interval_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_dump_bgp_all_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_updates_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_updates_interval_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_dump_bgp_updates_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_routes_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;dump_bgp_routes_interval_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_dump_bgp_routes_cmd);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a394c2d5e40a37005a6246a168d45cb0e"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_interval_add" ref="a394c2d5e40a37005a6246a168d45cb0e" args="(struct bgp_dump *bgp_dump, int interval)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_dump_interval_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *&#160;</td>
          <td class="paramname"><em>bgp_dump</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>interval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00140">140</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> secs_into_day;
  time_t <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
  <span class="keyword">struct </span>tm *tm;

  <span class="keywordflow">if</span> (<a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a> &gt; 0)
    {
      <span class="comment">/* Periodic dump every interval seconds */</span>
      <span class="keywordflow">if</span> ((<a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a> &lt; 86400) &amp;&amp; ((86400 % <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>) == 0))
    {
      <span class="comment">/* Dump at predictable times: if a day has a whole number of</span>
<span class="comment">       * intervals, dump every interval seconds starting from midnight</span>
<span class="comment">       */</span>
      (void) time(&amp;t);
      tm = localtime(&amp;t);
      secs_into_day = tm-&gt;tm_sec + 60*tm-&gt;tm_min + 60*60*tm-&gt;tm_hour;
      <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a> = <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a> - secs_into_day % <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>; <span class="comment">/* always &gt; 0 */</span>
    }
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__dump_8c.html#a03e20f1079916f8b199d845d7e9290ec">bgp_dump_interval_func</a>, 
                           bgp_dump, <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* One-off dump: execute immediately, don&#39;t affect any scheduled dumps */</span>
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a> = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__dump_8c.html#a03e20f1079916f8b199d845d7e9290ec">bgp_dump_interval_func</a>,
                           bgp_dump, 0);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a03e20f1079916f8b199d845d7e9290ec"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_interval_func" ref="a03e20f1079916f8b199d845d7e9290ec" args="(struct thread *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_dump_interval_func </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00382">382</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__dump.html">bgp_dump</a> *<a class="code" href="structbgp__dump.html">bgp_dump</a>;
  bgp_dump = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Reschedule dump even if file couldn&#39;t be opened this time... */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a83a98e4dd07ab8ab3065e9fa4c7cfde5">bgp_dump_open_file</a> (bgp_dump) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="comment">/* In case of bgp_dump_routes, we need special route dump function. */</span>
      <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a0a26a007ae667dea94fc4e5cd7cffd37">type</a> == <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd">BGP_DUMP_ROUTES</a>)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> seq = <a class="code" href="bgp__dump_8c.html#a804d21aa1878059e1a7eefa32a228e83">bgp_dump_routes_func</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, 1, 0);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <a class="code" href="bgp__dump_8c.html#a804d21aa1878059e1a7eefa32a228e83">bgp_dump_routes_func</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, 0, seq);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
      <span class="comment">/* Close the file now. For a RIB dump there&#39;s no point in leaving</span>
<span class="comment">       * it open until the next scheduled dump starts. */</span>
      fclose(bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>); bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    }

  <span class="comment">/* if interval is set reschedule */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#aa47b11c732f512a63663c56976687f18">interval</a> &gt; 0)
    <a class="code" href="bgp__dump_8c.html#a394c2d5e40a37005a6246a168d45cb0e">bgp_dump_interval_add</a> (bgp_dump, bgp_dump-&gt;<a class="code" href="structbgp__dump.html#aa47b11c732f512a63663c56976687f18">interval</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a83a98e4dd07ab8ab3065e9fa4c7cfde5"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_open_file" ref="a83a98e4dd07ab8ab3065e9fa4c7cfde5" args="(struct bgp_dump *bgp_dump)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static FILE* bgp_dump_open_file </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *&#160;</td>
          <td class="paramname"><em>bgp_dump</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00095">95</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  time_t clock;
  <span class="keyword">struct </span>tm *tm;
  <span class="keywordtype">char</span> fullpath[MAXPATHLEN];
  <span class="keywordtype">char</span> realpath[MAXPATHLEN];
  mode_t oldumask;

  time (&amp;clock);
  tm = localtime (&amp;clock);

  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>[0] != <a class="code" href="vty_8h.html#af5bb38799561e2bd96aa97ac3fde28ee">DIRECTORY_SEP</a>)
    {
      sprintf (fullpath, <span class="stringliteral">&quot;%s/%s&quot;</span>, <a class="code" href="vty_8c.html#a6f4339c73034bde3cba10481ee9d5286">vty_get_cwd</a> (), bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>);
      ret = strftime (realpath, MAXPATHLEN, fullpath, tm);
    }
  <span class="keywordflow">else</span>
    ret = strftime (realpath, MAXPATHLEN, bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, tm);

  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;bgp_dump_open_file: strftime error&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>)
    fclose (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);


  oldumask = umask(0777 &amp; ~LOGFILE_MASK);
  bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> = fopen (realpath, <span class="stringliteral">&quot;w&quot;</span>);

  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;bgp_dump_open_file: %s: %s&quot;</span>, realpath, strerror (errno));
      umask(oldumask);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  umask(oldumask);  

  <span class="keywordflow">return</span> bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa97689fd779f7eaaaad6d74bb3ffc837"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_packet" ref="aa97689fd779f7eaaaad6d74bb3ffc837" args="(struct peer *peer, int type, struct stream *packet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_packet </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>packet</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00525">525</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* bgp_dump_all. */</span>
  <a class="code" href="bgp__dump_8c.html#a155c4167ced1f77e1e0dbc00395a5744">bgp_dump_packet_func</a> (&amp;<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>, peer, packet);

  <span class="comment">/* bgp_dump_updates. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>)
    <a class="code" href="bgp__dump_8c.html#a155c4167ced1f77e1e0dbc00395a5744">bgp_dump_packet_func</a> (&amp;<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>, peer, packet);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a155c4167ced1f77e1e0dbc00395a5744"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_packet_func" ref="a155c4167ced1f77e1e0dbc00395a5744" args="(struct bgp_dump *bgp_dump, struct peer *peer, struct stream *packet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_dump_packet_func </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *&#160;</td>
          <td class="paramname"><em>bgp_dump</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>packet</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00488">488</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *obuf;

  <span class="comment">/* If dump file pointer is disabled return immediately. */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Make dump stream. */</span>
  obuf = <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (obuf);

  <span class="comment">/* Dump header and common part. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) )
    { 
      <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8h.html#ad124357d2cf2c7d99d0cb19f228fec15">MSG_PROTOCOL_BGP4MP</a>, <a class="code" href="bgp__dump_8h.html#a09d282b6328f4e8efa7e86cc288630ea">BGP4MP_MESSAGE_AS4</a>);
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8h.html#ad124357d2cf2c7d99d0cb19f228fec15">MSG_PROTOCOL_BGP4MP</a>, <a class="code" href="bgp__dump_8h.html#a30fa3ac5df0e94803f626704364cf969">BGP4MP_MESSAGE</a>);
    }
  <a class="code" href="bgp__dump_8c.html#a4793b761f0d6e7dba96ab4e32ededcaa">bgp_dump_common</a> (obuf, peer, 0);

  <span class="comment">/* Packet contents. */</span>
  <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (obuf, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (packet), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (packet));
  
  <span class="comment">/* Set length. */</span>
  <a class="code" href="bgp__dump_8c.html#aeea4aaf739360141366d24b3a0a2c32c">bgp_dump_set_size</a> (obuf, <a class="code" href="bgp__dump_8h.html#ad124357d2cf2c7d99d0cb19f228fec15">MSG_PROTOCOL_BGP4MP</a>);

  <span class="comment">/* Write to the stream. */</span>
  fwrite (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (obuf), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (obuf), 1, bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
  fflush (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1165f68741bdba80dc77f0f2027794f4"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_parse_time" ref="a1165f68741bdba80dc77f0f2027794f4" args="(const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int bgp_dump_parse_time </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00536">536</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keywordtype">int</span> len;
  <span class="keywordtype">int</span> seen_h;
  <span class="keywordtype">int</span> seen_m;
  <span class="keywordtype">int</span> time;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> total;

  time = 0;
  total = 0;
  seen_h = 0;
  seen_m = 0;
  len = strlen (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>);

  <span class="keywordflow">for</span> (i = 0; i &lt; len; i++)
    {
      <span class="keywordflow">if</span> (isdigit ((<span class="keywordtype">int</span>) <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[i]))
    {
      time *= 10;
      time += <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] - <span class="charliteral">&#39;0&#39;</span>;
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[i] == <span class="charliteral">&#39;H&#39;</span> || <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[i] == <span class="charliteral">&#39;h&#39;</span>)
    {
      <span class="keywordflow">if</span> (seen_h)
        <span class="keywordflow">return</span> 0;
      <span class="keywordflow">if</span> (seen_m)
        <span class="keywordflow">return</span> 0;
      total += time * 60 *60;
      time = 0;
      seen_h = 1;
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[i] == <span class="charliteral">&#39;M&#39;</span> || <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[i] == <span class="charliteral">&#39;m&#39;</span>)
    {
      <span class="keywordflow">if</span> (seen_m)
        <span class="keywordflow">return</span> 0;
      total += time * 60;
      time = 0;
      seen_h = 1;
    }
      <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">return</span> total + time;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a804d21aa1878059e1a7eefa32a228e83"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_routes_func" ref="a804d21aa1878059e1a7eefa32a228e83" args="(int afi, int first_run, unsigned int seq)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int bgp_dump_routes_func </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>first_run</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>seq</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00276">276</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *obuf;
  <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *info;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *table;

  bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
  <span class="keywordflow">if</span> (!bgp)
    <span class="keywordflow">return</span> seq;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> seq;

  <span class="comment">/* Note that bgp_dump_routes_index_table will do ipv4 and ipv6 peers,</span>
<span class="comment">     so this should only be done on the first call to bgp_dump_routes_func.</span>
<span class="comment">     ( this function will be called once for ipv4 and once for ipv6 ) */</span>
  <span class="keywordflow">if</span>(first_run)
    <a class="code" href="bgp__dump_8c.html#ac3d2bfc128c220eba4e77782b563bfb2">bgp_dump_routes_index_table</a>(bgp);

  obuf = <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a>(obuf);

  <span class="comment">/* Walk down each BGP route. */</span>
  table = bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];

  <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
    {
      <span class="keywordflow">if</span>(!rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
        <span class="keywordflow">continue</span>;

      <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a>(obuf);

      <span class="comment">/* MRT header */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
        {
          <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>, <a class="code" href="bgp__dump_8h.html#ac5adbb4bab2e80bfe5334082b9e08f35">TABLE_DUMP_V2_RIB_IPV4_UNICAST</a>);
        }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
        {
          <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>, <a class="code" href="bgp__dump_8h.html#abe1d7ba1b817adc62ab5668a8f2b14f0">TABLE_DUMP_V2_RIB_IPV6_UNICAST</a>);
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

      <span class="comment">/* Sequence number */</span>
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a>(obuf, seq);

      <span class="comment">/* Prefix length */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (obuf, rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

      <span class="comment">/* Prefix */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
        {
          <span class="comment">/* We&#39;ll dump only the useful bits (those not 0), but have to align on 8 bits */</span>
          <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a>(obuf, (u_char *)&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>+7)/8);
        }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
        {
          <span class="comment">/* We&#39;ll dump only the useful bits (those not 0), but have to align on 8 bits */</span>
          <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (obuf, (u_char *)&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>+7)/8);
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

      <span class="comment">/* Save where we are now, so we can overwride the entry count later */</span>
      <span class="keywordtype">int</span> sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(obuf);

      <span class="comment">/* Entry count */</span>
      uint16_t entry_count = 0;

      <span class="comment">/* Entry count, note that this is overwritten later */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(obuf, 0);

      <span class="keywordflow">for</span> (info = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; info; info = info-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>)
        {
          entry_count++;

          <span class="comment">/* Peer index */</span>
          <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(obuf, info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#abbff1c8ba5633b76e20d2746f773916c">table_dump_index</a>);

          <span class="comment">/* Originated */</span>
          <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, info-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a>);

          <span class="comment">/* Dump attribute. */</span>
          <span class="comment">/* Skip prefix &amp; AFI/SAFI for MP_NLRI */</span>
          <a class="code" href="bgp__attr_8c.html#a1a02efc1fa4f47e5fa5b9ee42edd6d57">bgp_dump_routes_attr</a> (obuf, info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>);
        }

      <span class="comment">/* Overwrite the entry count, now that we know the right number */</span>
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (obuf, sizep, entry_count);

      seq++;

      <a class="code" href="bgp__dump_8c.html#aeea4aaf739360141366d24b3a0a2c32c">bgp_dump_set_size</a>(obuf, <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>);
      fwrite (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (obuf), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (obuf), 1, <a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);

    }

  fflush (<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);

  <span class="keywordflow">return</span> seq;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac3d2bfc128c220eba4e77782b563bfb2"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_routes_index_table" ref="ac3d2bfc128c220eba4e77782b563bfb2" args="(struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_dump_routes_index_table </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00196">196</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  uint16_t peerno = 0;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *obuf;

  obuf = <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (obuf);

  <span class="comment">/* MRT header */</span>
  <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>, <a class="code" href="bgp__dump_8h.html#acebd6bfb4107e92415af72916c8523fd">TABLE_DUMP_V2_PEER_INDEX_TABLE</a>);

  <span class="comment">/* Collector BGP ID */</span>
  <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (obuf, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);

  <span class="comment">/* View name */</span>
  <span class="keywordflow">if</span>(bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    {
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, strlen(bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>));
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(obuf, bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, strlen(bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>));
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(obuf, 0);
    }

  <span class="comment">/* Peer count */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a>(bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>));

  <span class="comment">/* Walk down all peers */</span>
  <span class="keywordflow">for</span>(<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, peer))
    {

      <span class="comment">/* Peer&#39;s type */</span>
      <span class="keywordflow">if</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>) == AF_INET)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (obuf, <a class="code" href="bgp__dump_8h.html#a884b9798da9461c3a0abb2194e362ad1">TABLE_DUMP_V2_PEER_INDEX_TABLE_AS4</a>+<a class="code" href="bgp__dump_8h.html#a41d86668f4b75e0dde045ac4b412e541">TABLE_DUMP_V2_PEER_INDEX_TABLE_IP</a>);
        }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>) == AF_INET6)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (obuf, <a class="code" href="bgp__dump_8h.html#a884b9798da9461c3a0abb2194e362ad1">TABLE_DUMP_V2_PEER_INDEX_TABLE_AS4</a>+<a class="code" href="bgp__dump_8h.html#a89cf2ae1acfe5e3ef26b6d3893323659">TABLE_DUMP_V2_PEER_INDEX_TABLE_IP6</a>);
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

      <span class="comment">/* Peer&#39;s BGP ID */</span>
      <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>);

      <span class="comment">/* Peer&#39;s IP address */</span>
      <span class="keywordflow">if</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>) == AF_INET)
        {
          <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (obuf, &amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
        }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="sockunion_8h.html#ac361ce9c3dca3e5b0e903c2c4fcc300c">sockunion_family</a>(&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>) == AF_INET6)
        {
          <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (obuf, (u_char *)&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.sin6.sin6_addr,
                        <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

      <span class="comment">/* Peer&#39;s AS number. */</span>
      <span class="comment">/* Note that, as this is an AS4 compliant quagga, the RIB is always AS4 */</span>
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (obuf, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);

      <span class="comment">/* Store the peer number for this peer */</span>
      peer-&gt;<a class="code" href="structpeer.html#abbff1c8ba5633b76e20d2746f773916c">table_dump_index</a> = peerno;
      peerno++;
    }

  <a class="code" href="bgp__dump_8c.html#aeea4aaf739360141366d24b3a0a2c32c">bgp_dump_set_size</a>(obuf, <a class="code" href="bgp__dump_8c.html#a40efcecf46bdb61ee74514861374083aa799d1ad00cfd330f5752175079f075c0">MSG_TABLE_DUMP_V2</a>);

  fwrite (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (obuf), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (obuf), 1, <a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
  fflush (<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aff02bb19df804283759645e5eda910cc"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_set" ref="aff02bb19df804283759645e5eda910cc" args="(struct vty *vty, struct bgp_dump *bgp_dump, enum bgp_dump_type type, const char *path, const char *interval_str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_dump_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *&#160;</td>
          <td class="paramname"><em>bgp_dump</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">enum <a class="el" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608ab">bgp_dump_type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>interval_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00583">583</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
  
  <span class="keywordflow">if</span> (interval_str)
    {
      
      <span class="comment">/* Check interval string. */</span>
      interval = <a class="code" href="bgp__dump_8c.html#a1165f68741bdba80dc77f0f2027794f4">bgp_dump_parse_time</a> (interval_str);
      <span class="keywordflow">if</span> (interval == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed interval string%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

      <span class="comment">/* Don&#39;t schedule duplicate dumps if the dump command is given twice */</span>
      <span class="keywordflow">if</span> (interval == bgp_dump-&gt;<a class="code" href="structbgp__dump.html#aa47b11c732f512a63663c56976687f18">interval</a> &amp;&amp;
      <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a0a26a007ae667dea94fc4e5cd7cffd37">type</a> &amp;&amp;
          path &amp;&amp; bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a> &amp;&amp; !strcmp (path, bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>))
    {
          <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
    }

      <span class="comment">/* Set interval. */</span>
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#aa47b11c732f512a63663c56976687f18">interval</a> = <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
      <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>)
    free (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>);
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a> = strdup (interval_str);
      
    }
  <span class="keywordflow">else</span>
    {
      interval = 0;
    }
    
  <span class="comment">/* Create interval thread. */</span>
  <a class="code" href="bgp__dump_8c.html#a394c2d5e40a37005a6246a168d45cb0e">bgp_dump_interval_add</a> (bgp_dump, interval);

  <span class="comment">/* Set type. */</span>
  bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a0a26a007ae667dea94fc4e5cd7cffd37">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;

  <span class="comment">/* Set file name. */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>)
    free (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>);
  bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a> = strdup (path);

  <span class="comment">/* This should be called when interval is expired. */</span>
  <a class="code" href="bgp__dump_8c.html#a83a98e4dd07ab8ab3065e9fa4c7cfde5">bgp_dump_open_file</a> (bgp_dump);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeea4aaf739360141366d24b3a0a2c32c"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_set_size" ref="aeea4aaf739360141366d24b3a0a2c32c" args="(struct stream *s, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_dump_set_size </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00190">190</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#ac25eaf59cd64ec23012f50a7d37a9f4a">stream_putl_at</a> (s, 8, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - <a class="code" href="bgp__dump_8h.html#ac06b815d8ee149eee8c8891d61222104">BGP_DUMP_HEADER_SIZE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a583bbdd359820c2e8ecd9c64c39e3998"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_state" ref="a583bbdd359820c2e8ecd9c64c39e3998" args="(struct peer *peer, int status_old, int status_new)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_state </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status_old</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status_new</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00461">461</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *obuf;

  <span class="comment">/* If dump file pointer is disabled return immediately. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Make dump stream. */</span>
  obuf = <a class="code" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (obuf);

  <a class="code" href="bgp__dump_8c.html#ac6384bad2fc6676ba026779420d0fc3e">bgp_dump_header</a> (obuf, <a class="code" href="bgp__dump_8h.html#ad124357d2cf2c7d99d0cb19f228fec15">MSG_PROTOCOL_BGP4MP</a>, <a class="code" href="bgp__dump_8h.html#ace3bfe470f956397bdac00db7747b6e7">BGP4MP_STATE_CHANGE_AS4</a>);
  <a class="code" href="bgp__dump_8c.html#a4793b761f0d6e7dba96ab4e32ededcaa">bgp_dump_common</a> (obuf, peer, 1);<span class="comment">/* force this in as4speak*/</span>

  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, status_old);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (obuf, status_new);

  <span class="comment">/* Set length. */</span>
  <a class="code" href="bgp__dump_8c.html#aeea4aaf739360141366d24b3a0a2c32c">bgp_dump_set_size</a> (obuf, <a class="code" href="bgp__dump_8h.html#ad124357d2cf2c7d99d0cb19f228fec15">MSG_PROTOCOL_BGP4MP</a>);

  <span class="comment">/* Write to the stream. */</span>
  fwrite (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (obuf), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (obuf), 1, <a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
  fflush (<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a59037b6c33622bac74c406f6b01c955f"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_unset" ref="a59037b6c33622bac74c406f6b01c955f" args="(struct vty *vty, struct bgp_dump *bgp_dump)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_dump_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> *&#160;</td>
          <td class="paramname"><em>bgp_dump</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00638">638</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set file name. */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>)
    {
      free (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>);
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* This should be called when interval is expired. */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>)
    {
      fclose (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a>);
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a39e52c350128e7df6c3c1582121be402">fp</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* Create interval thread. */</span>
  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a>);
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#abf41ec887f001277014534e163588475">t_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  bgp_dump-&gt;<a class="code" href="structbgp__dump.html#aa47b11c732f512a63663c56976687f18">interval</a> = 0;

  <span class="keywordflow">if</span> (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>)
    {
      free (bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>);
      bgp_dump-&gt;<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38ab48bf42d33009c6320fbcb6936a23"></a><!-- doxytag: member="bgp_dump.c::config_write_bgp_dump" ref="a38ab48bf42d33009c6320fbcb6936a23" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int config_write_bgp_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00810">810</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp all %s %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp all %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp updates %s %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp updates %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
  <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp routes-mrt %s %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a5f69c1d41e0fdafd5ade563b5458045c">interval_str</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;dump bgp routes-mrt %s%s&quot;</span>, 
         <a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>.<a class="code" href="structbgp__dump.html#a9b85be4d92c696e0cfdb38d8ca8705c6">filename</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6123815185ba65e14fdf131ba719e12c"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a6123815185ba65e14fdf131ba719e12c" args="(dump_bgp_all, dump_bgp_all_cmd,&quot;dump bgp all PATH&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump all BGP packets\n&quot;&quot;Output filename\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_all&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_all_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> all PATH&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00673">673</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd">BGP_DUMP_ALL</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a33dd7b4f47fada217342aee6127150f0"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a33dd7b4f47fada217342aee6127150f0" args="(dump_bgp_all_interval, dump_bgp_all_interval_cmd,&quot;dump bgp all PATH INTERVAL&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump all BGP packets\n&quot;&quot;Output filename\n&quot;&quot;Interval of output\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_all_interval&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_all_interval_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> all PATH INTERVAL&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00684">684</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad3ea5d7423efba6d550de303f4c535bd">BGP_DUMP_ALL</a>, argv[0], argv[1]);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad346163ef8df1fd4f257a4b349a50b81"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="ad346163ef8df1fd4f257a4b349a50b81" args="(no_dump_bgp_all, no_dump_bgp_all_cmd,&quot;no dump bgp all [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump all BGP packets\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_dump_bgp_all&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_dump_bgp_all_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no dump <a class="el" href="structbgp.html">bgp</a> all  &quot;&#160;</td>
          <td class="paramname">[PATH][INTERVAL], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump all BGP packets\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00696">696</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#a59037b6c33622bac74c406f6b01c955f">bgp_dump_unset</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af051666167a337659d4415ad3e25b57a"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="af051666167a337659d4415ad3e25b57a" args="(dump_bgp_updates, dump_bgp_updates_cmd,&quot;dump bgp updates PATH&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump BGP updates only\n&quot;&quot;Output filename\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_updates&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_updates_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> updates PATH&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00707">707</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b">BGP_DUMP_UPDATES</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1f5f4445c659a139e1240b4be5798198"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a1f5f4445c659a139e1240b4be5798198" args="(dump_bgp_updates_interval, dump_bgp_updates_interval_cmd,&quot;dump bgp updates PATH INTERVAL&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump BGP updates only\n&quot;&quot;Output filename\n&quot;&quot;Interval of output\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_updates_interval&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_updates_interval_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> updates PATH INTERVAL&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00718">718</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608abad4305596c9de6b42129a894800dc2a4b">BGP_DUMP_UPDATES</a>, argv[0], argv[1]);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa3dd1c3f62b82fc9cdf584eff62da4e6"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="aa3dd1c3f62b82fc9cdf584eff62da4e6" args="(no_dump_bgp_updates, no_dump_bgp_updates_cmd,&quot;no dump bgp updates [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump BGP updates only\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_dump_bgp_updates&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_dump_bgp_updates_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no dump <a class="el" href="structbgp.html">bgp</a> updates  &quot;&#160;</td>
          <td class="paramname">[PATH][INTERVAL], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump BGP updates only\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00730">730</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#a59037b6c33622bac74c406f6b01c955f">bgp_dump_unset</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a467f5bf35144c7f819157199fc0a5641"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a467f5bf35144c7f819157199fc0a5641" args="(dump_bgp_routes, dump_bgp_routes_cmd,&quot;dump bgp routes&#45;mrt PATH&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump whole BGP routing table\n&quot;&quot;Output filename\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_routes&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_routes_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> routes-mrt PATH&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00741">741</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd">BGP_DUMP_ROUTES</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a79d20719255900af67da91992eee9739"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a79d20719255900af67da91992eee9739" args="(dump_bgp_routes_interval, dump_bgp_routes_interval_cmd,&quot;dump bgp routes&#45;mrt PATH INTERVAL&quot;,&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump whole BGP routing table\n&quot;&quot;Output filename\n&quot;&quot;Interval of output\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">dump_bgp_routes_interval&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dump_bgp_routes_interval_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;dump <a class="el" href="structbgp.html">bgp</a> routes-mrt PATH INTERVAL&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Output filename\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Interval of output\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00752">752</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#aff02bb19df804283759645e5eda910cc">bgp_dump_set</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>, <a class="code" href="bgp__dump_8c.html#af5c4c5c58c06e9e0da028895448608aba8da7006d79a833ea2d2d60d3c0f44ecd">BGP_DUMP_ROUTES</a>, argv[0], argv[1]);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70c826ae3c03c440f2cccad7dbb99f2e"></a><!-- doxytag: member="bgp_dump.c::DEFUN" ref="a70c826ae3c03c440f2cccad7dbb99f2e" args="(no_dump_bgp_routes, no_dump_bgp_routes_cmd,&quot;no dump bgp routes&#45;mrt [PATH] [INTERVAL]&quot;, NO_STR&quot;Dump packet\n&quot;&quot;BGP packet dump\n&quot;&quot;Dump whole BGP routing table\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_dump_bgp_routes&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_dump_bgp_routes_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no dump <a class="el" href="structbgp.html">bgp</a> routes-mrt  &quot;&#160;</td>
          <td class="paramname">[PATH][INTERVAL], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Dump packet\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;BGP packet dump\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Dump whole BGP routing table\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00764">764</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__dump_8c.html#a59037b6c33622bac74c406f6b01c955f">bgp_dump_unset</a> (<a class="code" href="structvty.html">vty</a>, &amp;<a class="code" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a>);
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a893516e440b8519ca09ed2b808373234"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_all" ref="a893516e440b8519ca09ed2b808373234" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> <a class="el" href="bgp__dump_8c.html#a893516e440b8519ca09ed2b808373234">bgp_dump_all</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00082">82</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
<a class="anchor" id="adb205c2384f08bce1d15368029538232"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_node" ref="adb205c2384f08bce1d15368029538232" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcmd__node.html">cmd_node</a> <a class="el" href="bgp__dump_8c.html#adb205c2384f08bce1d15368029538232">bgp_dump_node</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aae9c95dff07c83c8e7bf4791a9bae0a6">DUMP_NODE</a>,
  <span class="stringliteral">&quot;&quot;</span>,
  1
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00776">776</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
<a class="anchor" id="a1d11a40e549767e660a25317d84233e2"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_obuf" ref="a1d11a40e549767e660a25317d84233e2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structstream.html">stream</a>* <a class="el" href="bgp__dump_8c.html#a1d11a40e549767e660a25317d84233e2">bgp_dump_obuf</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00079">79</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
<a class="anchor" id="a7b4b628fda6c31730228e04aacd18e5b"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_routes" ref="a7b4b628fda6c31730228e04aacd18e5b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> <a class="el" href="bgp__dump_8c.html#a7b4b628fda6c31730228e04aacd18e5b">bgp_dump_routes</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00088">88</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
<a class="anchor" id="aacab64cf07b4180898b9d032bdc5fef7"></a><!-- doxytag: member="bgp_dump.c::bgp_dump_updates" ref="aacab64cf07b4180898b9d032bdc5fef7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__dump.html">bgp_dump</a> <a class="el" href="bgp__dump_8c.html#aacab64cf07b4180898b9d032bdc5fef7">bgp_dump_updates</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00085">85</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
<a class="anchor" id="ad83105d839fc720128fa304d481982a8"></a><!-- doxytag: member="bgp_dump.c::t_bgp_dump_routes" ref="ad83105d839fc720128fa304d481982a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread.html">thread</a>* <a class="el" href="bgp__dump_8c.html#ad83105d839fc720128fa304d481982a8">t_bgp_dump_routes</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__dump_8c_source.html#l00091">91</a> of file <a class="el" href="bgp__dump_8c_source.html">bgp_dump.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__dump_8c.html">bgp_dump.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:11 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
