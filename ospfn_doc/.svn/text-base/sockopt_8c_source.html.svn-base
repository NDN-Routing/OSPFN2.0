<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/sockopt.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sockopt_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/sockopt.c</div>  </div>
</div>
<div class="contents">
<a href="sockopt_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* setsockopt functions</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="sockopt_8h.html">sockopt.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keywordtype">int</span>
<a name="l00028"></a><a class="code" href="sockopt_8h.html#abdfd124bd2b3b787be44b3e78e99bc37">00028</a> <a class="code" href="sockopt_8c.html#abdfd124bd2b3b787be44b3e78e99bc37">setsockopt_so_recvbuf</a> (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> size)
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030   <span class="keywordtype">int</span> ret;
<a name="l00031"></a>00031   
<a name="l00032"></a>00032   <span class="keywordflow">if</span> ( (ret = setsockopt (sock, SOL_SOCKET, SO_RCVBUF, (<span class="keywordtype">char</span> *)
<a name="l00033"></a>00033                           &amp;size, <span class="keyword">sizeof</span> (<span class="keywordtype">int</span>))) &lt; 0)
<a name="l00034"></a>00034     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;fd %d: can&#39;t setsockopt SO_RCVBUF to %d: %s&quot;</span>,
<a name="l00035"></a>00035           sock,size,<a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="keywordflow">return</span> ret;
<a name="l00038"></a>00038 }
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keywordtype">int</span>
<a name="l00041"></a><a class="code" href="sockopt_8h.html#ad801e41fc584078bdc1fc1f5f5f08a10">00041</a> <a class="code" href="sockopt_8c.html#ad801e41fc584078bdc1fc1f5f5f08a10">setsockopt_so_sendbuf</a> (<span class="keyword">const</span> <span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> size)
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043   <span class="keywordtype">int</span> ret = setsockopt (sock, SOL_SOCKET, SO_SNDBUF,
<a name="l00044"></a>00044     (<span class="keywordtype">char</span> *)&amp;size, <span class="keyword">sizeof</span> (<span class="keywordtype">int</span>));
<a name="l00045"></a>00045   
<a name="l00046"></a>00046   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00047"></a>00047     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;fd %d: can&#39;t setsockopt SO_SNDBUF to %d: %s&quot;</span>,
<a name="l00048"></a>00048       sock, size, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="keywordflow">return</span> ret;
<a name="l00051"></a>00051 }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keywordtype">int</span>
<a name="l00054"></a><a class="code" href="sockopt_8h.html#aae8ed164606b3d56b05af0e09730a554">00054</a> <a class="code" href="sockopt_8c.html#aae8ed164606b3d56b05af0e09730a554">getsockopt_so_sendbuf</a> (<span class="keyword">const</span> <span class="keywordtype">int</span> sock)
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056   u_int32_t optval;
<a name="l00057"></a>00057   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> optlen = <span class="keyword">sizeof</span> (optval);
<a name="l00058"></a>00058   <span class="keywordtype">int</span> ret = getsockopt (sock, SOL_SOCKET, SO_SNDBUF,
<a name="l00059"></a>00059     (<span class="keywordtype">char</span> *)&amp;optval, &amp;optlen);
<a name="l00060"></a>00060   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00061"></a>00061   {
<a name="l00062"></a>00062     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;fd %d: can&#39;t getsockopt SO_SNDBUF: %d (%s)&quot;</span>,
<a name="l00063"></a>00063       sock, errno, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00064"></a>00064     <span class="keywordflow">return</span> ret;
<a name="l00065"></a>00065   }
<a name="l00066"></a>00066   <span class="keywordflow">return</span> optval;
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keyword">static</span> <span class="keywordtype">void</span> *
<a name="l00070"></a><a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">00070</a> <a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">getsockopt_cmsg_data</a> (<span class="keyword">struct</span> msghdr *msgh, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00071"></a>00071 {
<a name="l00072"></a>00072   <span class="keyword">struct </span>cmsghdr *cmsg;
<a name="l00073"></a>00073   <span class="keywordtype">void</span> *ptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00074"></a>00074   
<a name="l00075"></a>00075   <span class="keywordflow">for</span> (cmsg = <a class="code" href="zebra_8h.html#af3b20d5606eb7dbfc120601cd3a889be">ZCMSG_FIRSTHDR</a>(msgh); 
<a name="l00076"></a>00076        cmsg != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00077"></a>00077        cmsg = CMSG_NXTHDR(msgh, cmsg))
<a name="l00078"></a>00078     <span class="keywordflow">if</span> (cmsg-&gt;cmsg_level == level &amp;&amp; cmsg-&gt;cmsg_type)
<a name="l00079"></a>00079       <span class="keywordflow">return</span> (ptr = CMSG_DATA(cmsg));
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="comment">/* Set IPv6 packet info to the socket. */</span>
<a name="l00086"></a>00086 <span class="keywordtype">int</span>
<a name="l00087"></a>00087 setsockopt_ipv6_pktinfo (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089   <span class="keywordtype">int</span> ret;
<a name="l00090"></a>00090     
<a name="l00091"></a>00091 <span class="preprocessor">#ifdef IPV6_RECVPKTINFO     </span><span class="comment">/*2292bis-01*/</span>
<a name="l00092"></a>00092   ret = setsockopt(sock, IPPROTO_IPV6, IPV6_RECVPKTINFO, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00093"></a>00093   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00094"></a>00094     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_RECVPKTINFO : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00095"></a>00095 <span class="preprocessor">#else   </span><span class="comment">/*RFC2292*/</span>
<a name="l00096"></a>00096   ret = setsockopt(sock, IPPROTO_IPV6, IPV6_PKTINFO, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00097"></a>00097   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00098"></a>00098     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_PKTINFO : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00099"></a>00099 <span class="preprocessor">#endif </span><span class="comment">/* INIA_IPV6 */</span>
<a name="l00100"></a>00100   <span class="keywordflow">return</span> ret;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">/* Set multicast hops val to the socket. */</span>
<a name="l00104"></a>00104 <span class="keywordtype">int</span>
<a name="l00105"></a>00105 setsockopt_ipv6_checksum (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107   <span class="keywordtype">int</span> ret;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="preprocessor">#ifdef GNU_LINUX</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>  ret = setsockopt(sock, IPPROTO_RAW, IPV6_CHECKSUM, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00111"></a>00111 <span class="preprocessor">#else</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span>  ret = setsockopt(sock, IPPROTO_IPV6, IPV6_CHECKSUM, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00113"></a>00113 <span class="preprocessor">#endif </span><span class="comment">/* GNU_LINUX */</span>
<a name="l00114"></a>00114   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00115"></a>00115     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_CHECKSUM&quot;</span>);
<a name="l00116"></a>00116   <span class="keywordflow">return</span> ret;
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="comment">/* Set multicast hops val to the socket. */</span>
<a name="l00120"></a>00120 <span class="keywordtype">int</span>
<a name="l00121"></a>00121 setsockopt_ipv6_multicast_hops (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123   <span class="keywordtype">int</span> ret;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   ret = setsockopt(sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00126"></a>00126   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00127"></a>00127     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_MULTICAST_HOPS&quot;</span>);
<a name="l00128"></a>00128   <span class="keywordflow">return</span> ret;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="comment">/* Set multicast hops val to the socket. */</span>
<a name="l00132"></a>00132 <span class="keywordtype">int</span>
<a name="l00133"></a>00133 setsockopt_ipv6_unicast_hops (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keywordtype">int</span> ret;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   ret = setsockopt(sock, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00138"></a>00138   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00139"></a>00139     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_UNICAST_HOPS&quot;</span>);
<a name="l00140"></a>00140   <span class="keywordflow">return</span> ret;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="keywordtype">int</span>
<a name="l00144"></a>00144 setsockopt_ipv6_hoplimit (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <span class="keywordtype">int</span> ret;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="preprocessor">#ifdef IPV6_RECVHOPLIMIT    </span><span class="comment">/*2292bis-01*/</span>
<a name="l00149"></a>00149   ret = setsockopt (sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00150"></a>00150   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00151"></a>00151     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_RECVHOPLIMIT&quot;</span>);
<a name="l00152"></a>00152 <span class="preprocessor">#else   </span><span class="comment">/*RFC2292*/</span>
<a name="l00153"></a>00153   ret = setsockopt (sock, IPPROTO_IPV6, IPV6_HOPLIMIT, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l00154"></a>00154   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00155"></a>00155     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_HOPLIMIT&quot;</span>);
<a name="l00156"></a>00156 <span class="preprocessor">#endif</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>  <span class="keywordflow">return</span> ret;
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">/* Set multicast loop zero to the socket. */</span>
<a name="l00161"></a>00161 <span class="keywordtype">int</span>
<a name="l00162"></a>00162 setsockopt_ipv6_multicast_loop (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164   <span class="keywordtype">int</span> ret;
<a name="l00165"></a>00165     
<a name="l00166"></a>00166   ret = setsockopt (sock, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, &amp;val,
<a name="l00167"></a>00167             <span class="keyword">sizeof</span> (val));
<a name="l00168"></a>00168   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00169"></a>00169     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_MULTICAST_LOOP&quot;</span>);
<a name="l00170"></a>00170   <span class="keywordflow">return</span> ret;
<a name="l00171"></a>00171 }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00174"></a>00174 getsockopt_ipv6_ifindex (<span class="keyword">struct</span> msghdr *msgh)
<a name="l00175"></a>00175 {
<a name="l00176"></a>00176   <span class="keyword">struct </span>in6_pktinfo *pktinfo;
<a name="l00177"></a>00177   
<a name="l00178"></a>00178   pktinfo = <a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">getsockopt_cmsg_data</a> (msgh, IPPROTO_IPV6, IPV6_PKTINFO);
<a name="l00179"></a>00179   
<a name="l00180"></a>00180   <span class="keywordflow">return</span> pktinfo-&gt;ipi6_ifindex;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">/*</span>
<a name="l00186"></a>00186 <span class="comment"> * Process multicast socket options for IPv4 in an OS-dependent manner.</span>
<a name="l00187"></a>00187 <span class="comment"> * Supported options are IP_MULTICAST_IF and IP_{ADD,DROP}_MEMBERSHIP.</span>
<a name="l00188"></a>00188 <span class="comment"> *</span>
<a name="l00189"></a>00189 <span class="comment"> * Many operating systems have a limit on the number of groups that</span>
<a name="l00190"></a>00190 <span class="comment"> * can be joined per socket (where each group and local address</span>
<a name="l00191"></a>00191 <span class="comment"> * counts).  This impacts OSPF, which joins groups on each interface</span>
<a name="l00192"></a>00192 <span class="comment"> * using a single socket.  The limit is typically 20, derived from the</span>
<a name="l00193"></a>00193 <span class="comment"> * original BSD multicast implementation.  Some systems have</span>
<a name="l00194"></a>00194 <span class="comment"> * mechanisms for increasing this limit.</span>
<a name="l00195"></a>00195 <span class="comment"> *</span>
<a name="l00196"></a>00196 <span class="comment"> * In many 4.4BSD-derived systems, multicast group operations are not</span>
<a name="l00197"></a>00197 <span class="comment"> * allowed on interfaces that are not UP.  Thus, a previous attempt to</span>
<a name="l00198"></a>00198 <span class="comment"> * leave the group may have failed, leaving it still joined, and we</span>
<a name="l00199"></a>00199 <span class="comment"> * drop/join quietly to recover.  This may not be necessary, but aims to</span>
<a name="l00200"></a>00200 <span class="comment"> * defend against unknown behavior in that we will still return an error</span>
<a name="l00201"></a>00201 <span class="comment"> * if the second join fails.  It is not clear how other systems</span>
<a name="l00202"></a>00202 <span class="comment"> * (e.g. Linux, Solaris) behave when leaving groups on down interfaces,</span>
<a name="l00203"></a>00203 <span class="comment"> * but this behavior should not be harmful if they behave the same way,</span>
<a name="l00204"></a>00204 <span class="comment"> * allow leaves, or implicitly leave all groups joined to down interfaces.</span>
<a name="l00205"></a>00205 <span class="comment"> */</span>
<a name="l00206"></a>00206 <span class="keywordtype">int</span>
<a name="l00207"></a><a class="code" href="sockopt_8h.html#ad3ada4f32ebe26f0e333ba3bebb1cf93">00207</a> <a class="code" href="sockopt_8c.html#ad3ada4f32ebe26f0e333ba3bebb1cf93">setsockopt_multicast_ipv4</a>(<span class="keywordtype">int</span> sock, 
<a name="l00208"></a>00208             <span class="keywordtype">int</span> optname, 
<a name="l00209"></a>00209             <span class="keyword">struct</span> in_addr if_addr <span class="comment">/* required */</span>,
<a name="l00210"></a>00210             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mcast_addr,
<a name="l00211"></a>00211             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex <span class="comment">/* optional: if non-zero, may be</span>
<a name="l00212"></a>00212 <span class="comment">                          used instead of if_addr */</span>)
<a name="l00213"></a>00213 {
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 <span class="preprocessor">#ifdef HAVE_STRUCT_IP_MREQN_IMR_IFINDEX</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span>  <span class="comment">/* This is better because it uses ifindex directly */</span>
<a name="l00217"></a>00217   <span class="keyword">struct </span>ip_mreqn mreqn;
<a name="l00218"></a>00218   <span class="keyword">struct </span>group_req gr;
<a name="l00219"></a>00219   <span class="keyword">struct </span>sockaddr_in *si;
<a name="l00220"></a>00220   <span class="keywordtype">int</span> ret;
<a name="l00221"></a>00221   
<a name="l00222"></a>00222   <span class="keywordflow">switch</span> (optname)
<a name="l00223"></a>00223     {
<a name="l00224"></a>00224     <span class="keywordflow">case</span> IP_MULTICAST_IF:
<a name="l00225"></a>00225       memset (&amp;mreqn, 0, <span class="keyword">sizeof</span>(mreqn));
<a name="l00226"></a>00226 
<a name="l00227"></a>00227       <span class="keywordflow">if</span> (mcast_addr)
<a name="l00228"></a>00228     mreqn.imr_multiaddr.s_addr = mcast_addr;
<a name="l00229"></a>00229       
<a name="l00230"></a>00230       <span class="keywordflow">if</span> (ifindex)
<a name="l00231"></a>00231     mreqn.imr_ifindex = ifindex;
<a name="l00232"></a>00232       <span class="keywordflow">else</span>
<a name="l00233"></a>00233     mreqn.imr_address = if_addr;
<a name="l00234"></a>00234       
<a name="l00235"></a>00235       ret = setsockopt(sock, IPPROTO_IP, optname,
<a name="l00236"></a>00236                (<span class="keywordtype">void</span> *)&amp;mreqn, <span class="keyword">sizeof</span>(mreqn));
<a name="l00237"></a>00237       <span class="keywordflow">return</span> ret;
<a name="l00238"></a>00238       <span class="keywordflow">break</span>;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240     <span class="keywordflow">case</span> IP_ADD_MEMBERSHIP:
<a name="l00241"></a>00241     <span class="keywordflow">case</span> IP_DROP_MEMBERSHIP:
<a name="l00242"></a>00242       <span class="keywordflow">if</span> (ifindex)
<a name="l00243"></a>00243         {
<a name="l00244"></a>00244           memset (&amp;gr, 0, <span class="keyword">sizeof</span>(gr));
<a name="l00245"></a>00245       si = (<span class="keyword">struct </span>sockaddr_in *)&amp;gr.gr_group;
<a name="l00246"></a>00246       gr.gr_interface = ifindex;
<a name="l00247"></a>00247           if (mcast_addr)
<a name="l00248"></a>00248             si-&gt;sin_family = AF_INET;
<a name="l00249"></a>00249 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span>            si-&gt;sin_len = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>sockaddr_in);
<a name="l00251"></a>00251 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00252"></a>00252         si-&gt;sin_addr.s_addr = mcast_addr;
<a name="l00253"></a>00253           <span class="keywordflow">if</span> (optname == IP_ADD_MEMBERSHIP)
<a name="l00254"></a>00254             ret = setsockopt(sock, IPPROTO_IP, MCAST_JOIN_GROUP, (<span class="keywordtype">void</span> *)&amp;gr, <span class="keyword">sizeof</span>(gr));
<a name="l00255"></a>00255           <span class="keywordflow">else</span>
<a name="l00256"></a>00256             ret = setsockopt(sock, IPPROTO_IP, MCAST_LEAVE_GROUP, (<span class="keywordtype">void</span> *)&amp;gr, <span class="keyword">sizeof</span>(gr));
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258       <span class="keywordflow">else</span>
<a name="l00259"></a>00259         {
<a name="l00260"></a>00260           memset (&amp;mreqn, 0, <span class="keyword">sizeof</span>(mreqn));
<a name="l00261"></a>00261           <span class="keywordflow">if</span> (mcast_addr)
<a name="l00262"></a>00262         mreqn.imr_multiaddr.s_addr = mcast_addr;
<a name="l00263"></a>00263       mreqn.imr_address = if_addr;
<a name="l00264"></a>00264       
<a name="l00265"></a>00265           ret = setsockopt(sock, IPPROTO_IP, optname,
<a name="l00266"></a>00266                (<span class="keywordtype">void</span> *)&amp;mreqn, <span class="keyword">sizeof</span>(mreqn));
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268       <span class="keywordflow">if</span> ((ret &lt; 0) &amp;&amp; (optname == IP_ADD_MEMBERSHIP) &amp;&amp; (errno == EADDRINUSE))
<a name="l00269"></a>00269         {
<a name="l00270"></a>00270       <span class="comment">/* see above: handle possible problem when interface comes back up */</span>
<a name="l00271"></a>00271       <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00272"></a>00272       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;setsockopt_multicast_ipv4 attempting to drop and &quot;</span>
<a name="l00273"></a>00273             <span class="stringliteral">&quot;re-add (fd %d, ifaddr %s, mcast %s, ifindex %u)&quot;</span>,
<a name="l00274"></a>00274             sock,
<a name="l00275"></a>00275             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;if_addr, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l00276"></a>00276             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;mcast_addr, buf[1], <span class="keyword">sizeof</span>(buf[1])),
<a name="l00277"></a>00277                     ifindex);
<a name="l00278"></a>00278           <span class="keywordflow">if</span> (ifindex)
<a name="l00279"></a>00279             {
<a name="l00280"></a>00280           setsockopt(sock, IPPROTO_IP, MCAST_LEAVE_GROUP, (<span class="keywordtype">void</span> *)&amp;gr, <span class="keyword">sizeof</span>(gr));
<a name="l00281"></a>00281           ret = setsockopt(sock, IPPROTO_IP, MCAST_JOIN_GROUP, (<span class="keywordtype">void</span> *)&amp;gr, <span class="keyword">sizeof</span>(gr));
<a name="l00282"></a>00282             }
<a name="l00283"></a>00283           <span class="keywordflow">else</span>
<a name="l00284"></a>00284             {
<a name="l00285"></a>00285           setsockopt(sock, IPPROTO_IP, IP_DROP_MEMBERSHIP, (<span class="keywordtype">void</span> *)&amp;mreqn, <span class="keyword">sizeof</span>(mreqn));
<a name="l00286"></a>00286           ret = setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (<span class="keywordtype">void</span> *)&amp;mreqn, <span class="keyword">sizeof</span>(mreqn));
<a name="l00287"></a>00287             }
<a name="l00288"></a>00288         }
<a name="l00289"></a>00289       <span class="keywordflow">return</span> ret;
<a name="l00290"></a>00290       <span class="keywordflow">break</span>;
<a name="l00291"></a>00291 
<a name="l00292"></a>00292     <span class="keywordflow">default</span>:
<a name="l00293"></a>00293       <span class="comment">/* Can out and give an understandable error */</span>
<a name="l00294"></a>00294       errno = EINVAL;
<a name="l00295"></a>00295       <span class="keywordflow">return</span> -1;
<a name="l00296"></a>00296       <span class="keywordflow">break</span>;
<a name="l00297"></a>00297     }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299   <span class="comment">/* Example defines for another OS, boilerplate off other code in this</span>
<a name="l00300"></a>00300 <span class="comment">     function, AND handle optname as per other sections for consistency !! */</span>
<a name="l00301"></a>00301   <span class="comment">/* #elif  defined(BOGON_NIX) &amp;&amp; EXAMPLE_VERSION_CODE &gt; -100000 */</span>
<a name="l00302"></a>00302   <span class="comment">/* Add your favourite OS here! */</span>
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 <span class="preprocessor">#else </span><span class="comment">/* #if OS_TYPE */</span> 
<a name="l00305"></a>00305   <span class="comment">/* standard BSD API */</span>
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="keyword">struct </span>in_addr m;
<a name="l00308"></a>00308   <span class="keyword">struct </span>ip_mreq mreq;
<a name="l00309"></a>00309   <span class="keywordtype">int</span> ret;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 <span class="preprocessor">#ifdef HAVE_BSD_STRUCT_IP_MREQ_HACK</span>
<a name="l00312"></a>00312 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (ifindex)
<a name="l00313"></a>00313     m.s_addr = htonl(ifindex);
<a name="l00314"></a>00314   <span class="keywordflow">else</span>
<a name="l00315"></a>00315 <span class="preprocessor">#endif</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>    m = if_addr;
<a name="l00317"></a>00317 
<a name="l00318"></a>00318   <span class="keywordflow">switch</span> (optname)
<a name="l00319"></a>00319     {
<a name="l00320"></a>00320     <span class="keywordflow">case</span> IP_MULTICAST_IF:
<a name="l00321"></a>00321       <span class="keywordflow">return</span> setsockopt (sock, IPPROTO_IP, optname, (<span class="keywordtype">void</span> *)&amp;m, <span class="keyword">sizeof</span>(m)); 
<a name="l00322"></a>00322       <span class="keywordflow">break</span>;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     <span class="keywordflow">case</span> IP_ADD_MEMBERSHIP:
<a name="l00325"></a>00325     <span class="keywordflow">case</span> IP_DROP_MEMBERSHIP:
<a name="l00326"></a>00326       memset (&amp;mreq, 0, <span class="keyword">sizeof</span>(mreq));
<a name="l00327"></a>00327       mreq.imr_multiaddr.s_addr = mcast_addr;
<a name="l00328"></a>00328       mreq.imr_interface = <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00329"></a>00329       
<a name="l00330"></a>00330       ret = setsockopt (sock, IPPROTO_IP, optname, (<span class="keywordtype">void</span> *)&amp;mreq, <span class="keyword">sizeof</span>(mreq));
<a name="l00331"></a>00331       <span class="keywordflow">if</span> ((ret &lt; 0) &amp;&amp; (optname == IP_ADD_MEMBERSHIP) &amp;&amp; (errno == EADDRINUSE))
<a name="l00332"></a>00332         {
<a name="l00333"></a>00333       <span class="comment">/* see above: handle possible problem when interface comes back up */</span>
<a name="l00334"></a>00334       <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00335"></a>00335       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;setsockopt_multicast_ipv4 attempting to drop and &quot;</span>
<a name="l00336"></a>00336             <span class="stringliteral">&quot;re-add (fd %d, ifaddr %s, mcast %s, ifindex %u)&quot;</span>,
<a name="l00337"></a>00337             sock,
<a name="l00338"></a>00338             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;if_addr, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l00339"></a>00339             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;mreq.imr_multiaddr,
<a name="l00340"></a>00340                   buf[1], <span class="keyword">sizeof</span>(buf[1])), ifindex);
<a name="l00341"></a>00341       setsockopt (sock, IPPROTO_IP, IP_DROP_MEMBERSHIP,
<a name="l00342"></a>00342               (<span class="keywordtype">void</span> *)&amp;mreq, <span class="keyword">sizeof</span>(mreq));
<a name="l00343"></a>00343       ret = setsockopt (sock, IPPROTO_IP, IP_ADD_MEMBERSHIP,
<a name="l00344"></a>00344                 (<span class="keywordtype">void</span> *)&amp;mreq, <span class="keyword">sizeof</span>(mreq));
<a name="l00345"></a>00345         }
<a name="l00346"></a>00346       <span class="keywordflow">return</span> ret;
<a name="l00347"></a>00347       <span class="keywordflow">break</span>;
<a name="l00348"></a>00348       
<a name="l00349"></a>00349     <span class="keywordflow">default</span>:
<a name="l00350"></a>00350       <span class="comment">/* Can out and give an understandable error */</span>
<a name="l00351"></a>00351       errno = EINVAL;
<a name="l00352"></a>00352       <span class="keywordflow">return</span> -1;
<a name="l00353"></a>00353       <span class="keywordflow">break</span>;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 <span class="preprocessor">#endif </span><span class="comment">/* #if OS_TYPE */</span>
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00360"></a><a class="code" href="sockopt_8c.html#ac51bac588aa20b0e838e2426977169c3">00360</a> <a class="code" href="sockopt_8c.html#ac51bac588aa20b0e838e2426977169c3">setsockopt_ipv4_ifindex</a> (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00361"></a>00361 {
<a name="l00362"></a>00362   <span class="keywordtype">int</span> ret;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 <span class="preprocessor">#if defined (IP_PKTINFO)</span>
<a name="l00365"></a>00365 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ((ret = setsockopt (sock, IPPROTO_IP, IP_PKTINFO, &amp;val, <span class="keyword">sizeof</span> (val))) &lt; 0)
<a name="l00366"></a>00366     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t set IP_PKTINFO option for fd %d to %d: %s&quot;</span>,
<a name="l00367"></a>00367            sock,val,<a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00368"></a>00368 <span class="preprocessor">#elif defined (IP_RECVIF)</span>
<a name="l00369"></a>00369 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ((ret = setsockopt (sock, IPPROTO_IP, IP_RECVIF, &amp;val, <span class="keyword">sizeof</span> (val))) &lt; 0)
<a name="l00370"></a>00370     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t set IP_RECVIF option for fd %d to %d: %s&quot;</span>,
<a name="l00371"></a>00371            sock,val,<a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00372"></a>00372 <span class="preprocessor">#else</span>
<a name="l00373"></a>00373 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;Neither IP_PKTINFO nor IP_RECVIF is available.&quot;</span>
<a name="l00374"></a>00374 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;Will not be able to receive link info.&quot;</span>
<a name="l00375"></a>00375 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;Things might be seriously broken..&quot;</span>
<a name="l00376"></a>00376 <span class="preprocessor"></span>  <span class="comment">/* XXX Does this ever happen?  Should there be a zlog_warn message here? */</span>
<a name="l00377"></a>00377   ret = -1;
<a name="l00378"></a>00378 <span class="preprocessor">#endif</span>
<a name="l00379"></a>00379 <span class="preprocessor"></span>  <span class="keywordflow">return</span> ret;
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 <span class="keywordtype">int</span>
<a name="l00383"></a><a class="code" href="sockopt_8h.html#a3ea00b83444773c5162871266744a286">00383</a> <a class="code" href="sockopt_8c.html#a3ea00b83444773c5162871266744a286">setsockopt_ipv4_tos</a>(<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> tos)
<a name="l00384"></a>00384 {
<a name="l00385"></a>00385   <span class="keywordtype">int</span> ret;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   ret = setsockopt (sock, IPPROTO_IP, IP_TOS, &amp;tos, <span class="keyword">sizeof</span> (tos));
<a name="l00388"></a>00388   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00389"></a>00389     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t set IP_TOS option for fd %d to %#x: %s&quot;</span>,
<a name="l00390"></a>00390            sock, tos, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00391"></a>00391   <span class="keywordflow">return</span> ret;
<a name="l00392"></a>00392 }
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 
<a name="l00395"></a>00395 <span class="keywordtype">int</span>
<a name="l00396"></a><a class="code" href="sockopt_8h.html#a9c761e75564fd3e769c39cc384c63904">00396</a> <a class="code" href="sockopt_8c.html#a892470b0232aca4e68e88117d2cb46ed">setsockopt_ifindex</a> (<span class="keywordtype">int</span> af, <span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> val)
<a name="l00397"></a>00397 {
<a name="l00398"></a>00398   <span class="keywordtype">int</span> ret = -1;
<a name="l00399"></a>00399   
<a name="l00400"></a>00400   <span class="keywordflow">switch</span> (af)
<a name="l00401"></a>00401     {
<a name="l00402"></a>00402       <span class="keywordflow">case</span> AF_INET:
<a name="l00403"></a>00403         ret = <a class="code" href="sockopt_8c.html#ac51bac588aa20b0e838e2426977169c3">setsockopt_ipv4_ifindex</a> (sock, val);
<a name="l00404"></a>00404         <span class="keywordflow">break</span>;
<a name="l00405"></a>00405 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00406"></a>00406 <span class="preprocessor"></span>      <span class="keywordflow">case</span> AF_INET6:
<a name="l00407"></a>00407         ret = setsockopt_ipv6_pktinfo (sock, val);
<a name="l00408"></a>00408         <span class="keywordflow">break</span>;
<a name="l00409"></a>00409 <span class="preprocessor">#endif</span>
<a name="l00410"></a>00410 <span class="preprocessor"></span>      <span class="keywordflow">default</span>:
<a name="l00411"></a>00411         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;setsockopt_ifindex: unknown address family %d&quot;</span>, af);
<a name="l00412"></a>00412     }
<a name="l00413"></a>00413   <span class="keywordflow">return</span> ret;
<a name="l00414"></a>00414 }
<a name="l00415"></a>00415   
<a name="l00416"></a>00416 <span class="comment">/*</span>
<a name="l00417"></a>00417 <span class="comment"> * Requires: msgh is not NULL and points to a valid struct msghdr, which</span>
<a name="l00418"></a>00418 <span class="comment"> * may or may not have control data about the incoming interface.</span>
<a name="l00419"></a>00419 <span class="comment"> *</span>
<a name="l00420"></a>00420 <span class="comment"> * Returns the interface index (small integer &gt;= 1) if it can be</span>
<a name="l00421"></a>00421 <span class="comment"> * determined, or else 0.</span>
<a name="l00422"></a>00422 <span class="comment"> */</span>
<a name="l00423"></a>00423 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00424"></a><a class="code" href="sockopt_8c.html#a9047f2e831fd6a67cf2d8e99a25f8302">00424</a> <a class="code" href="sockopt_8c.html#a9047f2e831fd6a67cf2d8e99a25f8302">getsockopt_ipv4_ifindex</a> (<span class="keyword">struct</span> msghdr *msgh)
<a name="l00425"></a>00425 {
<a name="l00426"></a>00426   <span class="comment">/* XXX: initialize to zero?  (Always overwritten, so just cosmetic.) */</span>
<a name="l00427"></a>00427   <span class="keywordtype">int</span> ifindex = -1;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 <span class="preprocessor">#if defined(IP_PKTINFO)</span>
<a name="l00430"></a>00430 <span class="preprocessor"></span><span class="comment">/* Linux pktinfo based ifindex retrieval */</span>
<a name="l00431"></a>00431   <span class="keyword">struct </span>in_pktinfo *pktinfo;
<a name="l00432"></a>00432   
<a name="l00433"></a>00433   pktinfo = 
<a name="l00434"></a>00434     (<span class="keyword">struct </span>in_pktinfo *)<a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">getsockopt_cmsg_data</a> (msgh, IPPROTO_IP, IP_PKTINFO);
<a name="l00435"></a>00435   <span class="comment">/* XXX Can pktinfo be NULL?  Clean up post 0.98. */</span>
<a name="l00436"></a>00436   ifindex = pktinfo-&gt;ipi_ifindex;
<a name="l00437"></a>00437   
<a name="l00438"></a>00438 <span class="preprocessor">#elif defined(IP_RECVIF)</span>
<a name="l00439"></a>00439 <span class="preprocessor"></span>
<a name="l00440"></a>00440   <span class="comment">/* retrieval based on IP_RECVIF */</span>
<a name="l00441"></a>00441 
<a name="l00442"></a>00442 <span class="preprocessor">#ifndef SUNOS_5</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span>  <span class="comment">/* BSD systems use a sockaddr_dl as the control message payload. */</span>
<a name="l00444"></a>00444   <span class="keyword">struct </span>sockaddr_dl *sdl;
<a name="l00445"></a>00445 <span class="preprocessor">#else</span>
<a name="l00446"></a>00446 <span class="preprocessor"></span>  <span class="comment">/* SUNOS_5 uses an integer with the index. */</span>
<a name="l00447"></a>00447   <span class="keywordtype">int</span> *ifindex_p;
<a name="l00448"></a>00448 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00449"></a>00449 
<a name="l00450"></a>00450 <span class="preprocessor">#ifndef SUNOS_5</span>
<a name="l00451"></a>00451 <span class="preprocessor"></span>  <span class="comment">/* BSD */</span>
<a name="l00452"></a>00452   sdl = 
<a name="l00453"></a>00453     (<span class="keyword">struct </span>sockaddr_dl *)<a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">getsockopt_cmsg_data</a> (msgh, IPPROTO_IP, IP_RECVIF);
<a name="l00454"></a>00454   <span class="keywordflow">if</span> (sdl != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00455"></a>00455     ifindex = sdl-&gt;sdl_index;
<a name="l00456"></a>00456   <span class="keywordflow">else</span>
<a name="l00457"></a>00457     ifindex = 0;
<a name="l00458"></a>00458 <span class="preprocessor">#else</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l00460"></a>00460 <span class="comment">   * Solaris.  On Solaris 8, IP_RECVIF is defined, but the call to</span>
<a name="l00461"></a>00461 <span class="comment">   * enable it fails with errno=99, and the struct msghdr has</span>
<a name="l00462"></a>00462 <span class="comment">   * controllen 0.</span>
<a name="l00463"></a>00463 <span class="comment">   */</span>
<a name="l00464"></a>00464   ifindex_p = (uint_t *)<a class="code" href="sockopt_8c.html#a56639ae934590197e1a613bd9d915a8a">getsockopt_cmsg_data</a> (msgh, IPPROTO_IP, IP_RECVIF); 
<a name="l00465"></a>00465   <span class="keywordflow">if</span> (ifindex_p != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00466"></a>00466     ifindex = *ifindex_p;
<a name="l00467"></a>00467   <span class="keywordflow">else</span>
<a name="l00468"></a>00468     ifindex = 0;
<a name="l00469"></a>00469 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00470"></a>00470 
<a name="l00471"></a>00471 <span class="preprocessor">#else</span>
<a name="l00472"></a>00472 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l00473"></a>00473 <span class="comment">   * Neither IP_PKTINFO nor IP_RECVIF defined - warn at compile time.</span>
<a name="l00474"></a>00474 <span class="comment">   * XXX Decide if this is a core service, or if daemons have to cope.</span>
<a name="l00475"></a>00475 <span class="comment">   * Since Solaris 8 and OpenBSD seem not to provide it, it seems that</span>
<a name="l00476"></a>00476 <span class="comment">   * daemons have to cope.</span>
<a name="l00477"></a>00477 <span class="comment">   */</span>
<a name="l00478"></a>00478 <span class="preprocessor">#warning &quot;getsockopt_ipv4_ifindex: Neither IP_PKTINFO nor IP_RECVIF defined.&quot;</span>
<a name="l00479"></a>00479 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;Some daemons may fail to operate correctly!&quot;</span>
<a name="l00480"></a>00480 <span class="preprocessor"></span>  ifindex = 0;
<a name="l00481"></a>00481 
<a name="l00482"></a>00482 <span class="preprocessor">#endif </span><span class="comment">/* IP_PKTINFO */</span> 
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keywordflow">return</span> ifindex;
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487 <span class="comment">/* return ifindex, 0 if none found */</span>
<a name="l00488"></a>00488 <span class="keywordtype">int</span>
<a name="l00489"></a><a class="code" href="sockopt_8h.html#a3762a9a3899d8a3e15f11ce1f6cafd9c">00489</a> <a class="code" href="sockopt_8c.html#aeb37d822f7c9d56e9bcffc7b33b0ced0">getsockopt_ifindex</a> (<span class="keywordtype">int</span> af, <span class="keyword">struct</span> msghdr *msgh)
<a name="l00490"></a>00490 {
<a name="l00491"></a>00491   <span class="keywordtype">int</span> ifindex = 0;
<a name="l00492"></a>00492   
<a name="l00493"></a>00493   <span class="keywordflow">switch</span> (af)
<a name="l00494"></a>00494     {
<a name="l00495"></a>00495       <span class="keywordflow">case</span> AF_INET:
<a name="l00496"></a>00496         <span class="keywordflow">return</span> (<a class="code" href="sockopt_8c.html#a9047f2e831fd6a67cf2d8e99a25f8302">getsockopt_ipv4_ifindex</a> (msgh));
<a name="l00497"></a>00497         <span class="keywordflow">break</span>;
<a name="l00498"></a>00498 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00499"></a>00499 <span class="preprocessor"></span>      <span class="keywordflow">case</span> AF_INET6:
<a name="l00500"></a>00500         <span class="keywordflow">return</span> (getsockopt_ipv6_ifindex (msgh));
<a name="l00501"></a>00501         <span class="keywordflow">break</span>;
<a name="l00502"></a>00502 <span class="preprocessor">#endif</span>
<a name="l00503"></a>00503 <span class="preprocessor"></span>      <span class="keywordflow">default</span>:
<a name="l00504"></a>00504         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;getsockopt_ifindex: unknown address family %d&quot;</span>, af);
<a name="l00505"></a>00505         <span class="keywordflow">return</span> (ifindex = 0);
<a name="l00506"></a>00506     }
<a name="l00507"></a>00507 }
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 <span class="comment">/* swab iph between order system uses for IP_HDRINCL and host order */</span>
<a name="l00510"></a>00510 <span class="keywordtype">void</span>
<a name="l00511"></a><a class="code" href="sockopt_8h.html#a31566785c09a80dd77599ca722974574">00511</a> <a class="code" href="sockopt_8c.html#a31566785c09a80dd77599ca722974574">sockopt_iphdrincl_swab_htosys</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph)
<a name="l00512"></a>00512 {
<a name="l00513"></a>00513   <span class="comment">/* BSD and derived take iph in network order, except for </span>
<a name="l00514"></a>00514 <span class="comment">   * ip_len and ip_off</span>
<a name="l00515"></a>00515 <span class="comment">   */</span>
<a name="l00516"></a>00516 <span class="preprocessor">#ifndef HAVE_IP_HDRINCL_BSD_ORDER</span>
<a name="l00517"></a>00517 <span class="preprocessor"></span>  iph-&gt;ip_len = htons(iph-&gt;ip_len);
<a name="l00518"></a>00518   iph-&gt;ip_off = htons(iph-&gt;ip_off);
<a name="l00519"></a>00519 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IP_HDRINCL_BSD_ORDER */</span>
<a name="l00520"></a>00520 
<a name="l00521"></a>00521   iph-&gt;ip_id = htons(iph-&gt;ip_id);
<a name="l00522"></a>00522 }
<a name="l00523"></a>00523 
<a name="l00524"></a>00524 <span class="keywordtype">void</span>
<a name="l00525"></a><a class="code" href="sockopt_8h.html#a8c237ab61f5040984e3ea04f9d9809b5">00525</a> <a class="code" href="sockopt_8c.html#a8c237ab61f5040984e3ea04f9d9809b5">sockopt_iphdrincl_swab_systoh</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph)
<a name="l00526"></a>00526 {
<a name="l00527"></a>00527 <span class="preprocessor">#ifndef HAVE_IP_HDRINCL_BSD_ORDER</span>
<a name="l00528"></a>00528 <span class="preprocessor"></span>  iph-&gt;ip_len = ntohs(iph-&gt;ip_len);
<a name="l00529"></a>00529   iph-&gt;ip_off = ntohs(iph-&gt;ip_off);
<a name="l00530"></a>00530 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IP_HDRINCL_BSD_ORDER */</span>
<a name="l00531"></a>00531 
<a name="l00532"></a>00532   iph-&gt;ip_id = ntohs(iph-&gt;ip_id);
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="keywordtype">int</span>
<a name="l00536"></a><a class="code" href="sockopt_8h.html#a61376b017f29987327735e1f2ac60189">00536</a> <a class="code" href="sockopt_8c.html#a61376b017f29987327735e1f2ac60189">sockopt_tcp_signature</a> (<span class="keywordtype">int</span> sock, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structpassword.html">password</a>)
<a name="l00537"></a>00537 {
<a name="l00538"></a>00538 <span class="preprocessor">#if defined(HAVE_TCP_MD5_LINUX24) &amp;&amp; defined(GNU_LINUX)</span>
<a name="l00539"></a>00539 <span class="preprocessor"></span>  <span class="comment">/* Support for the old Linux 2.4 TCP-MD5 patch, taken from Hasso Tepper&#39;s</span>
<a name="l00540"></a>00540 <span class="comment">   * version of the Quagga patch (based on work by Rick Payne, and Bruce</span>
<a name="l00541"></a>00541 <span class="comment">   * Simpson)</span>
<a name="l00542"></a>00542 <span class="comment">   */</span>
<a name="l00543"></a>00543 <span class="preprocessor">#define TCP_MD5_AUTH 13</span>
<a name="l00544"></a>00544 <span class="preprocessor"></span><span class="preprocessor">#define TCP_MD5_AUTH_ADD 1</span>
<a name="l00545"></a>00545 <span class="preprocessor"></span><span class="preprocessor">#define TCP_MD5_AUTH_DEL 2</span>
<a name="l00546"></a>00546 <span class="preprocessor"></span>  <span class="keyword">struct </span>tcp_rfc2385_cmd {
<a name="l00547"></a>00547     u_int8_t     command;    <span class="comment">/* Command - Add/Delete */</span>
<a name="l00548"></a>00548     u_int32_t    address;    <span class="comment">/* IPV4 address associated */</span>
<a name="l00549"></a>00549     u_int8_t     keylen;     <span class="comment">/* MD5 Key len (do NOT assume 0 terminated ascii) */</span>
<a name="l00550"></a>00550     <span class="keywordtype">void</span>         *<a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;       <span class="comment">/* MD5 Key */</span>
<a name="l00551"></a>00551   } cmd;
<a name="l00552"></a>00552   <span class="keyword">struct </span>in_addr *addr = &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
<a name="l00553"></a>00553   
<a name="l00554"></a>00554   cmd.command = (password != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ? TCP_MD5_AUTH_ADD : TCP_MD5_AUTH_DEL);
<a name="l00555"></a>00555   cmd.address = addr-&gt;s_addr;
<a name="l00556"></a>00556   cmd.keylen = (password != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ? strlen (password) : 0);
<a name="l00557"></a>00557   cmd.key = password;
<a name="l00558"></a>00558   
<a name="l00559"></a>00559   <span class="keywordflow">return</span> setsockopt (sock, IPPROTO_TCP, TCP_MD5_AUTH, &amp;cmd, <span class="keyword">sizeof</span> cmd);
<a name="l00560"></a>00560   
<a name="l00561"></a>00561 <span class="preprocessor">#elif HAVE_DECL_TCP_MD5SIG</span>
<a name="l00562"></a>00562 <span class="preprocessor"></span>  <span class="keywordtype">int</span> ret;
<a name="l00563"></a>00563 <span class="preprocessor">#ifndef GNU_LINUX</span>
<a name="l00564"></a>00564 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l00565"></a>00565 <span class="comment">   * XXX Need to do PF_KEY operation here to add/remove an SA entry,</span>
<a name="l00566"></a>00566 <span class="comment">   * and add/remove an SP entry for this peer&#39;s packet flows also.</span>
<a name="l00567"></a>00567 <span class="comment">   */</span>
<a name="l00568"></a>00568   <span class="keywordtype">int</span> md5sig = password &amp;&amp; *password ? 1 : 0;
<a name="l00569"></a>00569 <span class="preprocessor">#else</span>
<a name="l00570"></a>00570 <span class="preprocessor"></span>  <span class="keywordtype">int</span> keylen = password ? strlen (password) : 0;
<a name="l00571"></a>00571   <span class="keyword">struct </span>tcp_md5sig md5sig;
<a name="l00572"></a>00572   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su2, *susock;
<a name="l00573"></a>00573   
<a name="l00574"></a>00574   <span class="comment">/* Figure out whether the socket and the sockunion are the same family..</span>
<a name="l00575"></a>00575 <span class="comment">   * adding AF_INET to AF_INET6 needs to be v4 mapped, you&#39;d think..</span>
<a name="l00576"></a>00576 <span class="comment">   */</span>
<a name="l00577"></a>00577   <span class="keywordflow">if</span> (!(susock = <a class="code" href="sockunion_8c.html#a983f6545771518eb72da0089c1ffb798">sockunion_getsockname</a> (sock)))
<a name="l00578"></a>00578     <span class="keywordflow">return</span> -1;
<a name="l00579"></a>00579   
<a name="l00580"></a>00580   <span class="keywordflow">if</span> (susock-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family)
<a name="l00581"></a>00581     su2 = su;
<a name="l00582"></a>00582   <span class="keywordflow">else</span>
<a name="l00583"></a>00583     {
<a name="l00584"></a>00584       <span class="comment">/* oops.. */</span>
<a name="l00585"></a>00585       su2 = susock;
<a name="l00586"></a>00586       
<a name="l00587"></a>00587       <span class="keywordflow">if</span> (su2-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00588"></a>00588         {
<a name="l00589"></a>00589           <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (susock);
<a name="l00590"></a>00590           <span class="keywordflow">return</span> 0;
<a name="l00591"></a>00591         }
<a name="l00592"></a>00592       
<a name="l00593"></a>00593 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00594"></a>00594 <span class="preprocessor"></span>      <span class="comment">/* If this does not work, then all users of this sockopt will need to</span>
<a name="l00595"></a>00595 <span class="comment">       * differentiate between IPv4 and IPv6, and keep seperate sockets for</span>
<a name="l00596"></a>00596 <span class="comment">       * each. </span>
<a name="l00597"></a>00597 <span class="comment">       *</span>
<a name="l00598"></a>00598 <span class="comment">       * Sadly, it doesn&#39;t seem to work at present. It&#39;s unknown whether</span>
<a name="l00599"></a>00599 <span class="comment">       * this is a bug or not.</span>
<a name="l00600"></a>00600 <span class="comment">       */</span>
<a name="l00601"></a>00601       <span class="keywordflow">if</span> (su2-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6
<a name="l00602"></a>00602           &amp;&amp; su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00603"></a>00603         {
<a name="l00604"></a>00604            su2-&gt;sin6.sin6_family = AF_INET6;
<a name="l00605"></a>00605            <span class="comment">/* V4Map the address */</span>
<a name="l00606"></a>00606            memset (&amp;su2-&gt;sin6.sin6_addr, 0, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00607"></a>00607            su2-&gt;sin6.sin6_addr.s6_addr32[2] = htonl(0xffff);
<a name="l00608"></a>00608            <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;su2-&gt;sin6.sin6_addr.s6_addr32[3], &amp;su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr, 4);
<a name="l00609"></a>00609         }
<a name="l00610"></a>00610 <span class="preprocessor">#endif</span>
<a name="l00611"></a>00611 <span class="preprocessor"></span>    }
<a name="l00612"></a>00612   
<a name="l00613"></a>00613   memset (&amp;md5sig, 0, <span class="keyword">sizeof</span> (md5sig));
<a name="l00614"></a>00614   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;md5sig.tcpm_addr, su2, sizeof (*su2));
<a name="l00615"></a>00615   md5sig.tcpm_keylen = keylen;
<a name="l00616"></a>00616   <span class="keywordflow">if</span> (keylen)
<a name="l00617"></a>00617     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (md5sig.tcpm_key, password, keylen);
<a name="l00618"></a>00618   <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (susock);
<a name="l00619"></a>00619 <span class="preprocessor">#endif </span><span class="comment">/* GNU_LINUX */</span>
<a name="l00620"></a>00620   <span class="keywordflow">if</span> ((ret = setsockopt (sock, IPPROTO_TCP, TCP_MD5SIG, &amp;md5sig, <span class="keyword">sizeof</span> md5sig)) &lt; 0)
<a name="l00621"></a>00621     {
<a name="l00622"></a>00622       <span class="comment">/* ENOENT is harmless.  It is returned when we clear a password for which</span>
<a name="l00623"></a>00623 <span class="comment">     one was not previously set. */</span>
<a name="l00624"></a>00624       <span class="keywordflow">if</span> (ENOENT == errno)
<a name="l00625"></a>00625     ret = 0;
<a name="l00626"></a>00626       <span class="keywordflow">else</span>
<a name="l00627"></a>00627     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;sockopt_tcp_signature: setsockopt(%d): %s&quot;</span>,
<a name="l00628"></a>00628           sock, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00629"></a>00629     }
<a name="l00630"></a>00630   <span class="keywordflow">return</span> ret;
<a name="l00631"></a>00631 <span class="preprocessor">#else </span><span class="comment">/* HAVE_TCP_MD5SIG */</span>
<a name="l00632"></a>00632   <span class="keywordflow">return</span> -2;
<a name="l00633"></a>00633 <span class="preprocessor">#endif </span><span class="comment">/* !HAVE_TCP_MD5SIG */</span>
<a name="l00634"></a>00634 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sockopt_8c.html">sockopt.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
