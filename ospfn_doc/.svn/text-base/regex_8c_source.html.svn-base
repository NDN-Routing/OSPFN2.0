<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/regex.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('regex_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/regex.c</div>  </div>
</div>
<div class="contents">
<a href="regex_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Extended regular expression matching and search library,</span>
<a name="l00002"></a>00002 <span class="comment">   version 0.12.</span>
<a name="l00003"></a>00003 <span class="comment">   (Implements POSIX draft P1003.2/D11.2, except for some of the</span>
<a name="l00004"></a>00004 <span class="comment">   internationalization features.)</span>
<a name="l00005"></a>00005 <span class="comment">   Copyright (C) 1993, 94, 95, 96, 97, 98, 99 Free Software Foundation, Inc.</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">   The GNU C Library is free software; you can redistribute it and/or</span>
<a name="l00008"></a>00008 <span class="comment">   modify it under the terms of the GNU Library General Public License as</span>
<a name="l00009"></a>00009 <span class="comment">   published by the Free Software Foundation; either version 2 of the</span>
<a name="l00010"></a>00010 <span class="comment">   License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">   The GNU C Library is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">   but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">   Library General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"></span>
<a name="l00017"></a>00017 <span class="comment">   You should have received a copy of the GNU Library General Public</span>
<a name="l00018"></a>00018 <span class="comment">   License along with the GNU C Library; see the file COPYING.LIB.  If not,</span>
<a name="l00019"></a>00019 <span class="comment">   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment">   Boston, MA 02111-1307, USA.  */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/* AIX requires this to be the first thing in the file. */</span>
<a name="l00023"></a>00023 <span class="preprocessor">#if defined _AIX &amp;&amp; !defined REGEX_MALLOC</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">  #pragma alloca</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#undef  _GNU_SOURCE</span>
<a name="l00028"></a><a class="code" href="regex_8c.html#a369266c24eacffb87046522897a570d5">00028</a> <span class="preprocessor"></span><span class="preprocessor">#define _GNU_SOURCE</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#ifdef HAVE_CONFIG_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor"># include &lt;config.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#ifdef _WIN32</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="comment">/* Windows does not provide unistd.h, which is required for abort() */</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#endif </span><span class="comment">/* _WIN32 */</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#ifndef PARAMS</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor"># if defined __GNUC__ || (defined __STDC__ &amp;&amp; __STDC__)</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#  define PARAMS(args) args</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor"># else</span>
<a name="l00042"></a><a class="code" href="regex_8c.html#a3084488315144c5c6df29f6368c7131f">00042</a> <span class="preprocessor"></span><span class="preprocessor">#  define PARAMS(args) ()</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor"># endif  </span><span class="comment">/* GCC.  */</span>
<a name="l00044"></a>00044 <span class="preprocessor">#endif  </span><span class="comment">/* Not PARAMS.  */</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#if defined STDC_HEADERS &amp;&amp; !defined emacs</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor"># include &lt;stddef.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#else</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="comment">/* We need this for `regex.h&#39;, and perhaps for the Emacs include files.  */</span>
<a name="l00050"></a>00050 <span class="preprocessor"># include &lt;sys/types.h&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a><a class="code" href="regex_8c.html#a6640e68e2e8afe5fa53c6899403630a8">00053</a> <span class="preprocessor">#define WIDE_CHAR_SUPPORT (HAVE_WCTYPE_H &amp;&amp; HAVE_WCHAR_H &amp;&amp; HAVE_BTOWC)</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="comment">/* For platform which support the ISO C amendement 1 functionality we</span>
<a name="l00056"></a>00056 <span class="comment">   support user defined character classes.  */</span>
<a name="l00057"></a>00057 <span class="preprocessor">#if defined _LIBC || WIDE_CHAR_SUPPORT</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="comment">/* Solaris 2.5 has a bug: &lt;wchar.h&gt; must be included before &lt;wctype.h&gt;.  */</span>
<a name="l00059"></a>00059 <span class="preprocessor"># include &lt;wchar.h&gt;</span>
<a name="l00060"></a>00060 <span class="preprocessor"># include &lt;wctype.h&gt;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#endif</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="comment">/* We have to keep the namespace clean.  */</span>
<a name="l00065"></a>00065 <span class="preprocessor"># define regfree(preg) __regfree (preg)</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor"># define regexec(pr, st, nm, pm, ef) __regexec (pr, st, nm, pm, ef)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor"># define regcomp(preg, pattern, cflags) __regcomp (preg, pattern, cflags)</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor"># define regerror(errcode, preg, errbuf, errbuf_size) \</span>
<a name="l00069"></a>00069 <span class="preprocessor">    __regerror(errcode, preg, errbuf, errbuf_size)</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor"># define re_set_registers(bu, re, nu, st, en) \</span>
<a name="l00071"></a>00071 <span class="preprocessor">    __re_set_registers (bu, re, nu, st, en)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor"># define re_match_2(bufp, string1, size1, string2, size2, pos, regs, stop) \</span>
<a name="l00073"></a>00073 <span class="preprocessor">    __re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor"># define re_match(bufp, string, size, pos, regs) \</span>
<a name="l00075"></a>00075 <span class="preprocessor">    __re_match (bufp, string, size, pos, regs)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor"># define re_search(bufp, string, size, startpos, range, regs) \</span>
<a name="l00077"></a>00077 <span class="preprocessor">    __re_search (bufp, string, size, startpos, range, regs)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor"># define re_compile_pattern(pattern, length, bufp) \</span>
<a name="l00079"></a>00079 <span class="preprocessor">    __re_compile_pattern (pattern, length, bufp)</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor"># define re_set_syntax(syntax) __re_set_syntax (syntax)</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor"># define re_search_2(bufp, st1, s1, st2, s2, startpos, range, regs, stop) \</span>
<a name="l00082"></a>00082 <span class="preprocessor">    __re_search_2 (bufp, st1, s1, st2, s2, startpos, range, regs, stop)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor"># define re_compile_fastmap(bufp) __re_compile_fastmap (bufp)</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>
<a name="l00085"></a>00085 <span class="preprocessor">#define btowc __btowc</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="comment">/* This is for other GNU distributions with internationalized messages.  */</span>
<a name="l00089"></a>00089 <span class="preprocessor">#if HAVE_LIBINTL_H || defined _LIBC</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span><span class="preprocessor"># include &lt;libintl.h&gt;</span>
<a name="l00091"></a>00091 <span class="preprocessor">#else</span>
<a name="l00092"></a><a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">00092</a> <span class="preprocessor"></span><span class="preprocessor"># define gettext(msgid) (msgid)</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>
<a name="l00095"></a>00095 <span class="preprocessor">#ifndef gettext_noop</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="comment">/* This define is so xgettext can find the internationalizable</span>
<a name="l00097"></a>00097 <span class="comment">   strings.  */</span>
<a name="l00098"></a><a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">00098</a> <span class="preprocessor"># define gettext_noop(String) String</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span>
<a name="l00101"></a>00101 <span class="comment">/* The `emacs&#39; switch turns on certain matching commands</span>
<a name="l00102"></a>00102 <span class="comment">   that make sense only in Emacs. */</span>
<a name="l00103"></a>00103 <span class="preprocessor">#ifdef emacs</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span>
<a name="l00105"></a>00105 <span class="preprocessor"># include &quot;lisp.h&quot;</span>
<a name="l00106"></a>00106 <span class="preprocessor"># include &quot;<a class="code" href="buffer_8h.html">buffer.h</a>&quot;</span>
<a name="l00107"></a>00107 <span class="preprocessor"># include &quot;syntax.h&quot;</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="preprocessor">#else  </span><span class="comment">/* not emacs */</span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="comment">/* If we are not linking with Emacs proper,</span>
<a name="l00112"></a>00112 <span class="comment">   we can&#39;t use the relocating allocator</span>
<a name="l00113"></a>00113 <span class="comment">   even if config.h says that we can.  */</span>
<a name="l00114"></a>00114 <span class="preprocessor"># undef REL_ALLOC</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="preprocessor"># if defined STDC_HEADERS || defined _LIBC</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#  include &lt;stdlib.h&gt;</span>
<a name="l00118"></a>00118 <span class="preprocessor"># else</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span><span class="keywordtype">char</span> *<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> ();
<a name="l00120"></a>00120 <span class="keywordtype">char</span> *<a class="code" href="regex_8c.html#a3d4d6185d412b00bc3def2b58b2898cc">realloc</a> ();
<a name="l00121"></a>00121 <span class="preprocessor"># endif</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span>
<a name="l00123"></a>00123 <span class="comment">/* When used in Emacs&#39;s lib-src, we need to get bzero and bcopy somehow.</span>
<a name="l00124"></a>00124 <span class="comment">   If nothing else has been done, use the method below.  */</span>
<a name="l00125"></a>00125 <span class="preprocessor"># ifdef INHIBIT_STRING_HEADER</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">#  if !(defined HAVE_BZERO &amp;&amp; defined HAVE_BCOPY)</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">#   if !defined bzero &amp;&amp; !defined bcopy</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">#    undef INHIBIT_STRING_HEADER</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">#   endif</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#  endif</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>
<a name="l00133"></a>00133 <span class="comment">/* This is the normal way of making sure we have a bcopy and a bzero.</span>
<a name="l00134"></a>00134 <span class="comment">   This is used in most programs--a few other programs avoid this</span>
<a name="l00135"></a>00135 <span class="comment">   by defining INHIBIT_STRING_HEADER.  */</span>
<a name="l00136"></a>00136 <span class="preprocessor"># ifndef INHIBIT_STRING_HEADER</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">#  if defined HAVE_STRING_H || defined STDC_HEADERS || defined _LIBC</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">#   include &lt;string.h&gt;</span>
<a name="l00139"></a>00139 <span class="preprocessor">#   ifndef bzero</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span><span class="preprocessor">#    ifndef _LIBC</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span><span class="preprocessor">#     define bzero(s, n)    (memset (s, &#39;\0&#39;, n), (s))</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span><span class="preprocessor">#    else</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span><span class="preprocessor">#     define bzero(s, n)    __bzero (s, n)</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span><span class="preprocessor">#    endif</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#   endif</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#  else</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span><span class="preprocessor">#   include &lt;strings.h&gt;</span>
<a name="l00148"></a>00148 <span class="preprocessor">#   ifndef memcmp</span>
<a name="l00149"></a><a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">00149</a> <span class="preprocessor"></span><span class="preprocessor">#    define memcmp(s1, s2, n)   bcmp (s1, s2, n)</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span><span class="preprocessor">#   endif</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#   ifndef memcpy</span>
<a name="l00152"></a><a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">00152</a> <span class="preprocessor"></span><span class="preprocessor">#    define memcpy(d, s, n) (bcopy (s, d, n), (d))</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">#   endif</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">#  endif</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>
<a name="l00157"></a>00157 <span class="comment">/* Define the syntax stuff for &lt;, &gt;, etc.  */</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="comment">/* This must be nonzero for the wordchar and notwordchar pattern</span>
<a name="l00160"></a>00160 <span class="comment">   commands in re_match_2.  */</span>
<a name="l00161"></a>00161 <span class="preprocessor"># ifndef Sword</span>
<a name="l00162"></a><a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">00162</a> <span class="preprocessor"></span><span class="preprocessor">#  define Sword 1</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>
<a name="l00165"></a>00165 <span class="preprocessor"># ifdef SWITCH_ENUM_BUG</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span><span class="preprocessor">#  define SWITCH_ENUM_CAST(x) ((int)(x))</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor"># else</span>
<a name="l00168"></a><a class="code" href="regex_8c.html#a95cf7f68f7a75751d4abd454d6add11a">00168</a> <span class="preprocessor"></span><span class="preprocessor">#  define SWITCH_ENUM_CAST(x) (x)</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>
<a name="l00171"></a>00171 <span class="comment">/* How many characters in the character set.  */</span>
<a name="l00172"></a><a class="code" href="regex_8c.html#adebebe79bb84190296da4c5d67e4e434">00172</a> <span class="preprocessor"># define CHAR_SET_SIZE 256</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>
<a name="l00174"></a>00174 <span class="preprocessor"># ifdef SYNTAX_TABLE</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span>
<a name="l00176"></a>00176 <span class="keyword">extern</span> <span class="keywordtype">char</span> *<a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="preprocessor"># else </span><span class="comment">/* not SYNTAX_TABLE */</span>
<a name="l00179"></a>00179 
<a name="l00180"></a><a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">00180</a> <span class="keyword">static</span> <span class="keywordtype">char</span> <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>[<a class="code" href="regex_8c.html#adebebe79bb84190296da4c5d67e4e434">CHAR_SET_SIZE</a>];
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00183"></a><a class="code" href="regex_8c.html#a74a93df5c6415ecc4c83d7497bb52a9b">00183</a> <a class="code" href="regex_8c.html#a74a93df5c6415ecc4c83d7497bb52a9b">init_syntax_once</a> ()
<a name="l00184"></a>00184 {
<a name="l00185"></a>00185    <span class="keyword">register</span> <span class="keywordtype">int</span> c;
<a name="l00186"></a>00186    <span class="keyword">static</span> <span class="keywordtype">int</span> done;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188    <span class="keywordflow">if</span> (done)
<a name="l00189"></a>00189      <span class="keywordflow">return</span>;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191    memset (<a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>, 0, <span class="keyword">sizeof</span> <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193    <span class="keywordflow">for</span> (c = <span class="charliteral">&#39;a&#39;</span>; c &lt;= <span class="charliteral">&#39;z&#39;</span>; c++)
<a name="l00194"></a>00194      <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>[c] = <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l00195"></a>00195 
<a name="l00196"></a>00196    <span class="keywordflow">for</span> (c = <span class="charliteral">&#39;A&#39;</span>; c &lt;= <span class="charliteral">&#39;Z&#39;</span>; c++)
<a name="l00197"></a>00197      <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>[c] = <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199    <span class="keywordflow">for</span> (c = <span class="charliteral">&#39;0&#39;</span>; c &lt;= <span class="charliteral">&#39;9&#39;</span>; c++)
<a name="l00200"></a>00200      <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>[c] = <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202    <a class="code" href="regex_8c.html#a87944e3ae2c8e13e58ae2209e27447a8">re_syntax_table</a>[<span class="charliteral">&#39;_&#39;</span>] = <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204    done = 1;
<a name="l00205"></a>00205 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="preprocessor"># endif </span><span class="comment">/* not SYNTAX_TABLE */</span>
<a name="l00208"></a>00208 
<a name="l00209"></a><a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">00209</a> <span class="preprocessor"># define SYNTAX(c) re_syntax_table[c]</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
<a name="l00211"></a>00211 <span class="preprocessor">#endif </span><span class="comment">/* not emacs */</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="comment">/* Get the interface, including the syntax bits.  */</span>
<a name="l00214"></a>00214 <span class="preprocessor">#include &lt;<a class="code" href="regex-gnu_8h.html">regex-gnu.h</a>&gt;</span>
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="comment">/* isalpha etc. are used for the character classes.  */</span>
<a name="l00217"></a>00217 <span class="preprocessor">#include &lt;ctype.h&gt;</span>
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="comment">/* Jim Meyering writes:</span>
<a name="l00220"></a>00220 <span class="comment"></span>
<a name="l00221"></a>00221 <span class="comment">   &quot;... Some ctype macros are valid only for character codes that</span>
<a name="l00222"></a>00222 <span class="comment">   isascii says are ASCII (SGI&#39;s IRIX-4.0.5 is one such system --when</span>
<a name="l00223"></a>00223 <span class="comment">   using /bin/cc or gcc but without giving an ansi option).  So, all</span>
<a name="l00224"></a>00224 <span class="comment">   ctype uses should be through macros like ISPRINT...  If</span>
<a name="l00225"></a>00225 <span class="comment">   STDC_HEADERS is defined, then autoconf has verified that the ctype</span>
<a name="l00226"></a>00226 <span class="comment">   macros don&#39;t need to be guarded with references to isascii. ...</span>
<a name="l00227"></a>00227 <span class="comment">   Defining isascii to 1 should let any compiler worth its salt</span>
<a name="l00228"></a>00228 <span class="comment">   eliminate the &amp;&amp; through constant folding.&quot;</span>
<a name="l00229"></a>00229 <span class="comment">   Solaris defines some of these symbols so we must undefine them first.  */</span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="preprocessor">#undef ISASCII</span>
<a name="l00232"></a>00232 <span class="preprocessor"></span><span class="preprocessor">#if defined STDC_HEADERS || (!defined isascii &amp;&amp; !defined HAVE_ISASCII)</span>
<a name="l00233"></a><a class="code" href="regex_8c.html#af96ff81718c3c27b342b5958fac6cb7e">00233</a> <span class="preprocessor"></span><span class="preprocessor"># define ISASCII(c) 1</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00235"></a>00235 <span class="preprocessor"></span><span class="preprocessor"># define ISASCII(c) isascii(c)</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span>
<a name="l00238"></a>00238 <span class="preprocessor">#ifdef isblank</span>
<a name="l00239"></a>00239 <span class="preprocessor"></span><span class="preprocessor"># define ISBLANK(c) (ISASCII (c) &amp;&amp; isblank (c))</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00241"></a><a class="code" href="regex_8c.html#a3773b51bd1f0ba67a1d8f05923c87d4c">00241</a> <span class="preprocessor"></span><span class="preprocessor"># define ISBLANK(c) ((c) == &#39; &#39; || (c) == &#39;\t&#39;)</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00243"></a>00243 <span class="preprocessor"></span><span class="preprocessor">#ifdef isgraph</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span><span class="preprocessor"># define ISGRAPH(c) (ISASCII (c) &amp;&amp; isgraph (c))</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00246"></a><a class="code" href="regex_8c.html#a31ddd189071199427310ccde9cedfb71">00246</a> <span class="preprocessor"></span><span class="preprocessor"># define ISGRAPH(c) (ISASCII (c) &amp;&amp; isprint (c) &amp;&amp; !isspace (c))</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span>
<a name="l00249"></a>00249 <span class="preprocessor">#undef ISPRINT</span>
<a name="l00250"></a><a class="code" href="regex_8c.html#af65108a54093e5c7220dfc15f6cd9db1">00250</a> <span class="preprocessor"></span><span class="preprocessor">#define ISPRINT(c) (ISASCII (c) &amp;&amp; isprint (c))</span>
<a name="l00251"></a><a class="code" href="regex_8c.html#ab615ddd0d086b80219cd7e0345d6b5ef">00251</a> <span class="preprocessor"></span><span class="preprocessor">#define ISDIGIT(c) (ISASCII (c) &amp;&amp; isdigit (c))</span>
<a name="l00252"></a><a class="code" href="regex_8c.html#a8c0056118f585fa052e0f76e3198db6a">00252</a> <span class="preprocessor"></span><span class="preprocessor">#define ISALNUM(c) (ISASCII (c) &amp;&amp; isalnum (c))</span>
<a name="l00253"></a><a class="code" href="regex_8c.html#afe0bf9496b5e0ecf253fb86072ee7ecf">00253</a> <span class="preprocessor"></span><span class="preprocessor">#define ISALPHA(c) (ISASCII (c) &amp;&amp; isalpha (c))</span>
<a name="l00254"></a><a class="code" href="regex_8c.html#a5079e89f60f6f44944ea9dc3b59f14d5">00254</a> <span class="preprocessor"></span><span class="preprocessor">#define ISCNTRL(c) (ISASCII (c) &amp;&amp; iscntrl (c))</span>
<a name="l00255"></a><a class="code" href="regex_8c.html#acb1e7358e00baea87b36a635fdb6970f">00255</a> <span class="preprocessor"></span><span class="preprocessor">#define ISLOWER(c) (ISASCII (c) &amp;&amp; islower (c))</span>
<a name="l00256"></a><a class="code" href="regex_8c.html#a165393454eb1019f3f77cedba52e23de">00256</a> <span class="preprocessor"></span><span class="preprocessor">#define ISPUNCT(c) (ISASCII (c) &amp;&amp; ispunct (c))</span>
<a name="l00257"></a><a class="code" href="regex_8c.html#ae8cdc17e44905c826bddf416b7bf621c">00257</a> <span class="preprocessor"></span><span class="preprocessor">#define ISSPACE(c) (ISASCII (c) &amp;&amp; isspace (c))</span>
<a name="l00258"></a><a class="code" href="regex_8c.html#a2bfd4177f165a5968d95960d42578ab6">00258</a> <span class="preprocessor"></span><span class="preprocessor">#define ISUPPER(c) (ISASCII (c) &amp;&amp; isupper (c))</span>
<a name="l00259"></a><a class="code" href="regex_8c.html#a419f06aab80b7c8eb3aaf4dd70463731">00259</a> <span class="preprocessor"></span><span class="preprocessor">#define ISXDIGIT(c) (ISASCII (c) &amp;&amp; isxdigit (c))</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span>
<a name="l00261"></a>00261 <span class="preprocessor">#ifdef _tolower</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span><span class="preprocessor"># define TOLOWER(c) _tolower(c)</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00264"></a><a class="code" href="regex_8c.html#ad4771ad2e5dd6a87c83ecf879b7985de">00264</a> <span class="preprocessor"></span><span class="preprocessor"># define TOLOWER(c) tolower(c)</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>
<a name="l00267"></a>00267 <span class="preprocessor">#ifndef NULL</span>
<a name="l00268"></a><a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">00268</a> <span class="preprocessor"></span><span class="preprocessor"># define NULL (void *)0</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span>
<a name="l00271"></a>00271 <span class="comment">/* We remove any previous definition of `SIGN_EXTEND_CHAR&#39;,</span>
<a name="l00272"></a>00272 <span class="comment">   since ours (we hope) works properly with all combinations of</span>
<a name="l00273"></a>00273 <span class="comment">   machines, compilers, `char&#39; and `unsigned char&#39; argument types.</span>
<a name="l00274"></a>00274 <span class="comment">   (Per Bothner suggested the basic approach.)  */</span>
<a name="l00275"></a>00275 <span class="preprocessor">#undef SIGN_EXTEND_CHAR</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span><span class="preprocessor">#if __STDC__</span>
<a name="l00277"></a>00277 <span class="preprocessor"></span><span class="preprocessor"># define SIGN_EXTEND_CHAR(c) ((signed char) (c))</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span><span class="preprocessor">#else  </span><span class="comment">/* not __STDC__ */</span>
<a name="l00279"></a>00279 <span class="comment">/* As in Harbison and Steele.  */</span>
<a name="l00280"></a><a class="code" href="regex_8c.html#affd804aa116f7d43493d29c6607df14d">00280</a> <span class="preprocessor"># define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span>
<a name="l00283"></a>00283 <span class="comment">/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we</span>
<a name="l00284"></a>00284 <span class="comment">   use `alloca&#39; instead of `malloc&#39;.  This is because using malloc in</span>
<a name="l00285"></a>00285 <span class="comment">   re_search* or re_match* could cause memory leaks when C-g is used in</span>
<a name="l00286"></a>00286 <span class="comment">   Emacs; also, malloc is slower and causes storage fragmentation.  On</span>
<a name="l00287"></a>00287 <span class="comment">   the other hand, malloc is more portable, and easier to debug.</span>
<a name="l00288"></a>00288 <span class="comment"></span>
<a name="l00289"></a>00289 <span class="comment">   Because we sometimes use alloca, some routines have to be macros,</span>
<a name="l00290"></a>00290 <span class="comment">   not functions -- `alloca&#39;-allocated space disappears at the end of the</span>
<a name="l00291"></a>00291 <span class="comment">   function it is called in.  */</span>
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 <span class="preprocessor">#ifdef REGEX_MALLOC</span>
<a name="l00294"></a>00294 <span class="preprocessor"></span>
<a name="l00295"></a>00295 <span class="preprocessor"># define REGEX_ALLOCATE malloc</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span><span class="preprocessor"># define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor"># define REGEX_FREE free</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>
<a name="l00299"></a>00299 <span class="preprocessor">#else </span><span class="comment">/* not REGEX_MALLOC  */</span>
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="comment">/* Emacs already defines alloca, sometimes.  */</span>
<a name="l00302"></a>00302 <span class="preprocessor"># ifndef alloca</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>
<a name="l00304"></a>00304 <span class="comment">/* Make alloca work the best possible way.  */</span>
<a name="l00305"></a>00305 <span class="preprocessor">#  ifdef __GNUC__</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span><span class="preprocessor">#   define alloca __builtin_alloca</span>
<a name="l00307"></a>00307 <span class="preprocessor"></span><span class="preprocessor">#  else </span><span class="comment">/* not __GNUC__ */</span>
<a name="l00308"></a>00308 <span class="preprocessor">#   if HAVE_ALLOCA_H</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span><span class="preprocessor">#    include &lt;alloca.h&gt;</span>
<a name="l00310"></a>00310 <span class="preprocessor">#   endif </span><span class="comment">/* HAVE_ALLOCA_H */</span>
<a name="l00311"></a>00311 <span class="preprocessor">#  endif </span><span class="comment">/* not __GNUC__ */</span>
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 <span class="preprocessor"># endif </span><span class="comment">/* not alloca */</span>
<a name="l00314"></a>00314 
<a name="l00315"></a><a class="code" href="regex_8c.html#ac0f85b18908da63fd510f189601c2a9c">00315</a> <span class="preprocessor"># define REGEX_ALLOCATE alloca</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>
<a name="l00317"></a>00317 <span class="comment">/* Assumes a `char *destination&#39; variable.  */</span>
<a name="l00318"></a><a class="code" href="regex_8c.html#a3694b4c0eee68e086e659d2508cf618a">00318</a> <span class="preprocessor"># define REGEX_REALLOCATE(source, osize, nsize)             \</span>
<a name="l00319"></a>00319 <span class="preprocessor">  (destination = (char *) alloca (nsize),               \</span>
<a name="l00320"></a>00320 <span class="preprocessor">   memcpy (destination, source, osize))</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span>
<a name="l00322"></a>00322 <span class="comment">/* No need to do anything to free, after alloca.  */</span>
<a name="l00323"></a><a class="code" href="regex_8c.html#aea9786147160a9d7734726ed1b60a8db">00323</a> <span class="preprocessor"># define REGEX_FREE(arg) ((void)0) </span><span class="comment">/* Do nothing!  But inhibit gcc warning.  */</span>
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="preprocessor">#endif </span><span class="comment">/* not REGEX_MALLOC */</span>
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 <span class="comment">/* Define how to allocate the failure stack.  */</span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 <span class="preprocessor">#if defined REL_ALLOC &amp;&amp; defined REGEX_MALLOC</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>
<a name="l00331"></a>00331 <span class="preprocessor"># define REGEX_ALLOCATE_STACK(size)             \</span>
<a name="l00332"></a>00332 <span class="preprocessor">  r_alloc (&amp;failure_stack_ptr, (size))</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span><span class="preprocessor"># define REGEX_REALLOCATE_STACK(source, osize, nsize)       \</span>
<a name="l00334"></a>00334 <span class="preprocessor">  r_re_alloc (&amp;failure_stack_ptr, (nsize))</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span><span class="preprocessor"># define REGEX_FREE_STACK(ptr)                  \</span>
<a name="l00336"></a>00336 <span class="preprocessor">  r_alloc_free (&amp;failure_stack_ptr)</span>
<a name="l00337"></a>00337 <span class="preprocessor"></span>
<a name="l00338"></a>00338 <span class="preprocessor">#else </span><span class="comment">/* not using relocating allocator */</span>
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 <span class="preprocessor"># ifdef REGEX_MALLOC</span>
<a name="l00341"></a>00341 <span class="preprocessor"></span>
<a name="l00342"></a>00342 <span class="preprocessor">#  define REGEX_ALLOCATE_STACK malloc</span>
<a name="l00343"></a>00343 <span class="preprocessor"></span><span class="preprocessor">#  define REGEX_REALLOCATE_STACK(source, osize, nsize) realloc (source, nsize)</span>
<a name="l00344"></a>00344 <span class="preprocessor"></span><span class="preprocessor">#  define REGEX_FREE_STACK free</span>
<a name="l00345"></a>00345 <span class="preprocessor"></span>
<a name="l00346"></a>00346 <span class="preprocessor"># else </span><span class="comment">/* not REGEX_MALLOC */</span>
<a name="l00347"></a>00347 
<a name="l00348"></a><a class="code" href="regex_8c.html#a37f419167ca1f8c499ee4c899b53614b">00348</a> <span class="preprocessor">#  define REGEX_ALLOCATE_STACK alloca</span>
<a name="l00349"></a>00349 <span class="preprocessor"></span>
<a name="l00350"></a><a class="code" href="regex_8c.html#a9247bcb7e41d886eaac155949a0e58e0">00350</a> <span class="preprocessor">#  define REGEX_REALLOCATE_STACK(source, osize, nsize)          \</span>
<a name="l00351"></a>00351 <span class="preprocessor">   REGEX_REALLOCATE (source, osize, nsize)</span>
<a name="l00352"></a>00352 <span class="preprocessor"></span><span class="comment">/* No need to explicitly free anything.  */</span>
<a name="l00353"></a><a class="code" href="regex_8c.html#a6eea4d3debda32ae12ea46de7cf1a11f">00353</a> <span class="preprocessor">#  define REGEX_FREE_STACK(arg)</span>
<a name="l00354"></a>00354 <span class="preprocessor"></span>
<a name="l00355"></a>00355 <span class="preprocessor"># endif </span><span class="comment">/* not REGEX_MALLOC */</span>
<a name="l00356"></a>00356 <span class="preprocessor">#endif </span><span class="comment">/* not using relocating allocator */</span>
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 <span class="comment">/* True if `size1&#39; is non-NULL and PTR is pointing anywhere inside</span>
<a name="l00360"></a>00360 <span class="comment">   `string1&#39; or just past its end.  This works if PTR is NULL, which is</span>
<a name="l00361"></a>00361 <span class="comment">   a good thing.  */</span>
<a name="l00362"></a><a class="code" href="regex_8c.html#a490c47f87b80eb6afdb77510567659e4">00362</a> <span class="preprocessor">#define FIRST_STRING_P(ptr)                     \</span>
<a name="l00363"></a>00363 <span class="preprocessor">  (size1 &amp;&amp; string1 &lt;= (ptr) &amp;&amp; (ptr) &lt;= string1 + size1)</span>
<a name="l00364"></a>00364 <span class="preprocessor"></span>
<a name="l00365"></a>00365 <span class="comment">/* (Re)Allocate N items of type T using malloc, or fail.  */</span>
<a name="l00366"></a><a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">00366</a> <span class="preprocessor">#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))</span>
<a name="l00367"></a><a class="code" href="regex_8c.html#ae247cb248fa0309737dce6bdfc3a6a3d">00367</a> <span class="preprocessor"></span><span class="preprocessor">#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))</span>
<a name="l00368"></a><a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">00368</a> <span class="preprocessor"></span><span class="preprocessor">#define RETALLOC_IF(addr, n, t) \</span>
<a name="l00369"></a>00369 <span class="preprocessor">  if (addr) RETALLOC((addr), (n), t); else (addr) = TALLOC ((n), t)</span>
<a name="l00370"></a><a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">00370</a> <span class="preprocessor"></span><span class="preprocessor">#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))</span>
<a name="l00371"></a>00371 <span class="preprocessor"></span>
<a name="l00372"></a><a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">00372</a> <span class="preprocessor">#define BYTEWIDTH 8 </span><span class="comment">/* In bits.  */</span>
<a name="l00373"></a>00373 
<a name="l00374"></a><a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">00374</a> <span class="preprocessor">#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))</span>
<a name="l00375"></a>00375 <span class="preprocessor"></span>
<a name="l00376"></a>00376 <span class="preprocessor">#undef MAX</span>
<a name="l00377"></a>00377 <span class="preprocessor"></span><span class="preprocessor">#undef MIN</span>
<a name="l00378"></a><a class="code" href="regex_8c.html#afa99ec4acc4ecb2dc3c2d05da15d0e3f">00378</a> <span class="preprocessor"></span><span class="preprocessor">#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span>
<a name="l00379"></a><a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">00379</a> <span class="preprocessor"></span><span class="preprocessor">#define MIN(a, b) ((a) &lt; (b) ? (a) : (b))</span>
<a name="l00380"></a>00380 <span class="preprocessor"></span>
<a name="l00381"></a><a class="code" href="regex_8c.html#a330a2ea4da1ce57c189821c8ebf59618">00381</a> <span class="keyword">typedef</span> <span class="keywordtype">char</span> <a class="code" href="regex_8c.html#a330a2ea4da1ce57c189821c8ebf59618">boolean</a>;
<a name="l00382"></a><a class="code" href="regex_8c.html#a65e9886d74aaee76545e83dd09011727">00382</a> <span class="preprocessor">#define false 0</span>
<a name="l00383"></a><a class="code" href="regex_8c.html#a41f9c5fb8b08eb5dc3edce4dcb37fee7">00383</a> <span class="preprocessor"></span><span class="preprocessor">#define true 1</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span>
<a name="l00385"></a>00385 <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">re_match_2_internal</a> <a class="code" href="regex_8c.html#a3084488315144c5c6df29f6368c7131f">PARAMS</a> ((<span class="keyword">struct</span> <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp,
<a name="l00386"></a>00386                     <span class="keyword">const</span> <span class="keywordtype">char</span> *string1, <span class="keywordtype">int</span> size1,
<a name="l00387"></a>00387                     <span class="keyword">const</span> <span class="keywordtype">char</span> *string2, <span class="keywordtype">int</span> size2,
<a name="l00388"></a>00388                     <span class="keywordtype">int</span> pos,
<a name="l00389"></a>00389                     <span class="keyword">struct</span> <a class="code" href="structre__registers.html">re_registers</a> *regs,
<a name="l00390"></a>00390                     <span class="keywordtype">int</span> stop));
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment">/* These are the command codes that appear in compiled regular</span>
<a name="l00393"></a>00393 <span class="comment">   expressions.  Some opcodes are followed by argument bytes.  A</span>
<a name="l00394"></a>00394 <span class="comment">   command code can specify any interpretation whatsoever for its</span>
<a name="l00395"></a>00395 <span class="comment">   arguments.  Zero bytes may appear in the compiled regular expression.  */</span>
<a name="l00396"></a>00396 
<a name="l00397"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">00397</a> <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00398"></a>00398 {
<a name="l00399"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">00399</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a> = 0,
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="comment">/* Succeed right away--no more backtracking.  */</span>
<a name="l00402"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a37fe3367d5bf38cb0ac666ebae52d4f9">00402</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a37fe3367d5bf38cb0ac666ebae52d4f9">succeed</a>,
<a name="l00403"></a>00403 
<a name="l00404"></a>00404         <span class="comment">/* Followed by one byte giving n, then by n literal bytes.  */</span>
<a name="l00405"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">00405</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>,
<a name="l00406"></a>00406 
<a name="l00407"></a>00407         <span class="comment">/* Matches any (more or less) character.  */</span>
<a name="l00408"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">00408</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">anychar</a>,
<a name="l00409"></a>00409 
<a name="l00410"></a>00410         <span class="comment">/* Matches any one char belonging to specified set.  First</span>
<a name="l00411"></a>00411 <span class="comment">           following byte is number of bitmap bytes.  Then come bytes</span>
<a name="l00412"></a>00412 <span class="comment">           for a bitmap saying which chars are in.  Bits in each byte</span>
<a name="l00413"></a>00413 <span class="comment">           are ordered low-bit-first.  A character is in the set if its</span>
<a name="l00414"></a>00414 <span class="comment">           bit is 1.  A character too large to have a bit in the map is</span>
<a name="l00415"></a>00415 <span class="comment">           automatically not in the set.  */</span>
<a name="l00416"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">00416</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>,
<a name="l00417"></a>00417 
<a name="l00418"></a>00418         <span class="comment">/* Same parameters as charset, but match any character that is</span>
<a name="l00419"></a>00419 <span class="comment">           not one of those specified.  */</span>
<a name="l00420"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">00420</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>,
<a name="l00421"></a>00421 
<a name="l00422"></a>00422         <span class="comment">/* Start remembering the text that is matched, for storing in a</span>
<a name="l00423"></a>00423 <span class="comment">           register.  Followed by one byte with the register number, in</span>
<a name="l00424"></a>00424 <span class="comment">           the range 0 to one less than the pattern buffer&#39;s re_nsub</span>
<a name="l00425"></a>00425 <span class="comment">           field.  Then followed by one byte with the number of groups</span>
<a name="l00426"></a>00426 <span class="comment">           inner to this one.  (This last has to be part of the</span>
<a name="l00427"></a>00427 <span class="comment">           start_memory only because we need it in the on_failure_jump</span>
<a name="l00428"></a>00428 <span class="comment">           of re_match_2.)  */</span>
<a name="l00429"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">00429</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>,
<a name="l00430"></a>00430 
<a name="l00431"></a>00431         <span class="comment">/* Stop remembering the text that is matched and store it in a</span>
<a name="l00432"></a>00432 <span class="comment">           memory register.  Followed by one byte with the register</span>
<a name="l00433"></a>00433 <span class="comment">           number, in the range 0 to one less than `re_nsub&#39; in the</span>
<a name="l00434"></a>00434 <span class="comment">           pattern buffer, and one byte with the number of inner groups,</span>
<a name="l00435"></a>00435 <span class="comment">           just like `start_memory&#39;.  (We need the number of inner</span>
<a name="l00436"></a>00436 <span class="comment">           groups here because we don&#39;t have any easy way of finding the</span>
<a name="l00437"></a>00437 <span class="comment">           corresponding start_memory when we&#39;re at a stop_memory.)  */</span>
<a name="l00438"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">00438</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>,
<a name="l00439"></a>00439 
<a name="l00440"></a>00440         <span class="comment">/* Match a duplicate of something remembered. Followed by one</span>
<a name="l00441"></a>00441 <span class="comment">           byte containing the register number.  */</span>
<a name="l00442"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">00442</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>,
<a name="l00443"></a>00443 
<a name="l00444"></a>00444         <span class="comment">/* Fail unless at beginning of line.  */</span>
<a name="l00445"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">00445</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>,
<a name="l00446"></a>00446 
<a name="l00447"></a>00447         <span class="comment">/* Fail unless at end of line.  */</span>
<a name="l00448"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">00448</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>,
<a name="l00449"></a>00449 
<a name="l00450"></a>00450         <span class="comment">/* Succeeds if at beginning of buffer (if emacs) or at beginning</span>
<a name="l00451"></a>00451 <span class="comment">           of string to be matched (if not).  */</span>
<a name="l00452"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">00452</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>,
<a name="l00453"></a>00453 
<a name="l00454"></a>00454         <span class="comment">/* Analogously, for end of buffer/string.  */</span>
<a name="l00455"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">00455</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>,
<a name="l00456"></a>00456 
<a name="l00457"></a>00457         <span class="comment">/* Followed by two byte relative address to which to jump.  */</span>
<a name="l00458"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">00458</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>,
<a name="l00459"></a>00459 
<a name="l00460"></a>00460     <span class="comment">/* Same as jump, but marks the end of an alternative.  */</span>
<a name="l00461"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">00461</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>,
<a name="l00462"></a>00462 
<a name="l00463"></a>00463         <span class="comment">/* Followed by two-byte relative address of place to resume at</span>
<a name="l00464"></a>00464 <span class="comment">           in case of failure.  */</span>
<a name="l00465"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">00465</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>,
<a name="l00466"></a>00466 
<a name="l00467"></a>00467         <span class="comment">/* Like on_failure_jump, but pushes a placeholder instead of the</span>
<a name="l00468"></a>00468 <span class="comment">           current string position when executed.  */</span>
<a name="l00469"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">00469</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">on_failure_keep_string_jump</a>,
<a name="l00470"></a>00470 
<a name="l00471"></a>00471         <span class="comment">/* Throw away latest failure point and then jump to following</span>
<a name="l00472"></a>00472 <span class="comment">           two-byte relative address.  */</span>
<a name="l00473"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">00473</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>,
<a name="l00474"></a>00474 
<a name="l00475"></a>00475         <span class="comment">/* Change to pop_failure_jump if know won&#39;t have to backtrack to</span>
<a name="l00476"></a>00476 <span class="comment">           match; otherwise change to jump.  This is used to jump</span>
<a name="l00477"></a>00477 <span class="comment">           back to the beginning of a repeat.  If what follows this jump</span>
<a name="l00478"></a>00478 <span class="comment">           clearly won&#39;t match what the repeat does, such that we can be</span>
<a name="l00479"></a>00479 <span class="comment">           sure that there is no use backtracking out of repetitions</span>
<a name="l00480"></a>00480 <span class="comment">           already matched, then we change it to a pop_failure_jump.</span>
<a name="l00481"></a>00481 <span class="comment">           Followed by two-byte address.  */</span>
<a name="l00482"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">00482</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>,
<a name="l00483"></a>00483 
<a name="l00484"></a>00484         <span class="comment">/* Jump to following two-byte address, and push a dummy failure</span>
<a name="l00485"></a>00485 <span class="comment">           point. This failure point will be thrown away if an attempt</span>
<a name="l00486"></a>00486 <span class="comment">           is made to use it for a failure.  A `+&#39; construct makes this</span>
<a name="l00487"></a>00487 <span class="comment">           before the first repeat.  Also used as an intermediary kind</span>
<a name="l00488"></a>00488 <span class="comment">           of jump when compiling an alternative.  */</span>
<a name="l00489"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">00489</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>,
<a name="l00490"></a>00490 
<a name="l00491"></a>00491     <span class="comment">/* Push a dummy failure point and continue.  Used at the end of</span>
<a name="l00492"></a>00492 <span class="comment">       alternatives.  */</span>
<a name="l00493"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">00493</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">push_dummy_failure</a>,
<a name="l00494"></a>00494 
<a name="l00495"></a>00495         <span class="comment">/* Followed by two-byte relative address and two-byte number n.</span>
<a name="l00496"></a>00496 <span class="comment">           After matching N times, jump to the address upon failure.  */</span>
<a name="l00497"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">00497</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>,
<a name="l00498"></a>00498 
<a name="l00499"></a>00499         <span class="comment">/* Followed by two-byte relative address, and two-byte number n.</span>
<a name="l00500"></a>00500 <span class="comment">           Jump to the address N times, then fail.  */</span>
<a name="l00501"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">00501</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>,
<a name="l00502"></a>00502 
<a name="l00503"></a>00503         <span class="comment">/* Set the following two-byte relative address to the</span>
<a name="l00504"></a>00504 <span class="comment">           subsequent two-byte number.  The address *includes* the two</span>
<a name="l00505"></a>00505 <span class="comment">           bytes of number.  */</span>
<a name="l00506"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">00506</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>,
<a name="l00507"></a>00507 
<a name="l00508"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">00508</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>, <span class="comment">/* Matches any word-constituent character.  */</span>
<a name="l00509"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">00509</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>,  <span class="comment">/* Matches any char that is not a word-constituent.  */</span>
<a name="l00510"></a>00510 
<a name="l00511"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">00511</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>,  <span class="comment">/* Succeeds if at word beginning.  */</span>
<a name="l00512"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">00512</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>,  <span class="comment">/* Succeeds if at word end.  */</span>
<a name="l00513"></a>00513 
<a name="l00514"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">00514</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>,    <span class="comment">/* Succeeds if at a word boundary.  */</span>
<a name="l00515"></a><a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">00515</a>   <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>  <span class="comment">/* Succeeds if not at a word boundary.  */</span>
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="preprocessor">#ifdef emacs</span>
<a name="l00518"></a>00518 <span class="preprocessor"></span>  ,before_dot,  <span class="comment">/* Succeeds if before point.  */</span>
<a name="l00519"></a>00519   at_dot,   <span class="comment">/* Succeeds if at point.  */</span>
<a name="l00520"></a>00520   after_dot,    <span class="comment">/* Succeeds if after point.  */</span>
<a name="l00521"></a>00521 
<a name="l00522"></a>00522     <span class="comment">/* Matches any character whose syntax is specified.  Followed by</span>
<a name="l00523"></a>00523 <span class="comment">           a byte which contains a syntax code, e.g., Sword.  */</span>
<a name="l00524"></a>00524   syntaxspec,
<a name="l00525"></a>00525 
<a name="l00526"></a>00526     <span class="comment">/* Matches any character whose syntax is not that specified.  */</span>
<a name="l00527"></a>00527   notsyntaxspec
<a name="l00528"></a>00528 <span class="preprocessor">#endif </span><span class="comment">/* emacs */</span>
<a name="l00529"></a>00529 } <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>;
<a name="l00530"></a>00530 
<a name="l00531"></a>00531 <span class="comment">/* Common operations on the compiled pattern.  */</span>
<a name="l00532"></a>00532 
<a name="l00533"></a>00533 <span class="comment">/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */</span>
<a name="l00534"></a>00534 
<a name="l00535"></a><a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">00535</a> <span class="preprocessor">#define STORE_NUMBER(destination, number)               \</span>
<a name="l00536"></a>00536 <span class="preprocessor">  do {                                  \</span>
<a name="l00537"></a>00537 <span class="preprocessor">    (destination)[0] = (number) &amp; 0377;                 \</span>
<a name="l00538"></a>00538 <span class="preprocessor">    (destination)[1] = (number) &gt;&gt; 8;                   \</span>
<a name="l00539"></a>00539 <span class="preprocessor">  } while (0)</span>
<a name="l00540"></a>00540 <span class="preprocessor"></span>
<a name="l00541"></a>00541 <span class="comment">/* Same as STORE_NUMBER, except increment DESTINATION to</span>
<a name="l00542"></a>00542 <span class="comment">   the byte after where the number is stored.  Therefore, DESTINATION</span>
<a name="l00543"></a>00543 <span class="comment">   must be an lvalue.  */</span>
<a name="l00544"></a>00544 
<a name="l00545"></a><a class="code" href="regex_8c.html#aec2d0e7545b2756d65a556d3ac7cdf89">00545</a> <span class="preprocessor">#define STORE_NUMBER_AND_INCR(destination, number)          \</span>
<a name="l00546"></a>00546 <span class="preprocessor">  do {                                  \</span>
<a name="l00547"></a>00547 <span class="preprocessor">    STORE_NUMBER (destination, number);                 \</span>
<a name="l00548"></a>00548 <span class="preprocessor">    (destination) += 2;                         \</span>
<a name="l00549"></a>00549 <span class="preprocessor">  } while (0)</span>
<a name="l00550"></a>00550 <span class="preprocessor"></span>
<a name="l00551"></a>00551 <span class="comment">/* Put into DESTINATION a number stored in two contiguous bytes starting</span>
<a name="l00552"></a>00552 <span class="comment">   at SOURCE.  */</span>
<a name="l00553"></a>00553 
<a name="l00554"></a><a class="code" href="regex_8c.html#a9afddc5990335682b1958801af7e4bf3">00554</a> <span class="preprocessor">#define EXTRACT_NUMBER(destination, source)             \</span>
<a name="l00555"></a>00555 <span class="preprocessor">  do {                                  \</span>
<a name="l00556"></a>00556 <span class="preprocessor">    (destination) = *(source) &amp; 0377;                   \</span>
<a name="l00557"></a>00557 <span class="preprocessor">    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) &lt;&lt; 8;       \</span>
<a name="l00558"></a>00558 <span class="preprocessor">  } while (0)</span>
<a name="l00559"></a>00559 <span class="preprocessor"></span>
<a name="l00560"></a>00560 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00561"></a>00561 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span> extract_number <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keywordtype">int</span> *dest, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a>));
<a name="l00562"></a>00562 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00563"></a>00563 extract_number (dest, <a class="code" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a>)
<a name="l00564"></a>00564     int *dest;
<a name="l00565"></a>00565     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a>;
<a name="l00566"></a>00566 {
<a name="l00567"></a>00567   <span class="keywordtype">int</span> temp = <a class="code" href="regex_8c.html#affd804aa116f7d43493d29c6607df14d">SIGN_EXTEND_CHAR</a> (*(source + 1));
<a name="l00568"></a>00568   *dest = *source &amp; 0377;
<a name="l00569"></a>00569   *dest += temp &lt;&lt; 8;
<a name="l00570"></a>00570 }
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="preprocessor"># ifndef EXTRACT_MACROS </span><span class="comment">/* To debug the macros.  */</span>
<a name="l00573"></a>00573 <span class="preprocessor">#  undef EXTRACT_NUMBER</span>
<a name="l00574"></a>00574 <span class="preprocessor"></span><span class="preprocessor">#  define EXTRACT_NUMBER(dest, src) extract_number (&amp;dest, src)</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span><span class="preprocessor"># endif </span><span class="comment">/* not EXTRACT_MACROS */</span>
<a name="l00576"></a>00576 
<a name="l00577"></a>00577 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l00578"></a>00578 
<a name="l00579"></a>00579 <span class="comment">/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.</span>
<a name="l00580"></a>00580 <span class="comment">   SOURCE must be an lvalue.  */</span>
<a name="l00581"></a>00581 
<a name="l00582"></a><a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">00582</a> <span class="preprocessor">#define EXTRACT_NUMBER_AND_INCR(destination, source)            \</span>
<a name="l00583"></a>00583 <span class="preprocessor">  do {                                  \</span>
<a name="l00584"></a>00584 <span class="preprocessor">    EXTRACT_NUMBER (destination, source);               \</span>
<a name="l00585"></a>00585 <span class="preprocessor">    (source) += 2;                          \</span>
<a name="l00586"></a>00586 <span class="preprocessor">  } while (0)</span>
<a name="l00587"></a>00587 <span class="preprocessor"></span>
<a name="l00588"></a>00588 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00589"></a>00589 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span> extract_number_and_incr <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keywordtype">int</span> *destination,
<a name="l00590"></a>00590                            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **source));
<a name="l00591"></a>00591 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00592"></a>00592 extract_number_and_incr (destination, source)
<a name="l00593"></a>00593     int *destination;
<a name="l00594"></a>00594     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **source;
<a name="l00595"></a>00595 {
<a name="l00596"></a>00596   extract_number (destination, *source);
<a name="l00597"></a>00597   *source += 2;
<a name="l00598"></a>00598 }
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <span class="preprocessor"># ifndef EXTRACT_MACROS</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span><span class="preprocessor">#  undef EXTRACT_NUMBER_AND_INCR</span>
<a name="l00602"></a>00602 <span class="preprocessor"></span><span class="preprocessor">#  define EXTRACT_NUMBER_AND_INCR(dest, src) \</span>
<a name="l00603"></a>00603 <span class="preprocessor">  extract_number_and_incr (&amp;dest, &amp;src)</span>
<a name="l00604"></a>00604 <span class="preprocessor"></span><span class="preprocessor"># endif </span><span class="comment">/* not EXTRACT_MACROS */</span>
<a name="l00605"></a>00605 
<a name="l00606"></a>00606 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l00607"></a>00607 
<a name="l00608"></a>00608 <span class="comment">/* If DEBUG is defined, Regex prints many voluminous messages about what</span>
<a name="l00609"></a>00609 <span class="comment">   it is doing (if the variable `debug&#39; is nonzero).  If linked with the</span>
<a name="l00610"></a>00610 <span class="comment">   main program in `iregex.c&#39;, you can enter patterns and strings</span>
<a name="l00611"></a>00611 <span class="comment">   interactively.  And if linked with the main program in `main.c&#39; and</span>
<a name="l00612"></a>00612 <span class="comment">   the other test files, you can run the already-written tests.  */</span>
<a name="l00613"></a>00613 
<a name="l00614"></a>00614 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00615"></a>00615 <span class="preprocessor"></span>
<a name="l00616"></a>00616 <span class="comment">/* We use standard I/O for debugging.  */</span>
<a name="l00617"></a>00617 <span class="preprocessor"># include &lt;stdio.h&gt;</span>
<a name="l00618"></a>00618 
<a name="l00619"></a>00619 <span class="comment">/* It is useful to test things that ``must&#39;&#39; be true when debugging.  */</span>
<a name="l00620"></a>00620 <span class="preprocessor"># include &quot;<a class="code" href="zassert_8h.html">zassert.h</a>&quot;</span>
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="bgp__debug_8c.html#abc1624539747635021518178e4df5a69">debug</a>;
<a name="l00623"></a>00623 
<a name="l00624"></a>00624 <span class="preprocessor"># define DEBUG_STATEMENT(e) e</span>
<a name="l00625"></a>00625 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT1(x) if (debug) printf (x)</span>
<a name="l00626"></a>00626 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)</span>
<a name="l00627"></a>00627 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)</span>
<a name="l00628"></a>00628 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)</span>
<a name="l00629"></a>00629 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)              \</span>
<a name="l00630"></a>00630 <span class="preprocessor">  if (debug) print_partial_compiled_pattern (s, e)</span>
<a name="l00631"></a>00631 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)         \</span>
<a name="l00632"></a>00632 <span class="preprocessor">  if (debug) print_double_string (w, s1, sz1, s2, sz2)</span>
<a name="l00633"></a>00633 <span class="preprocessor"></span>
<a name="l00634"></a>00634 
<a name="l00635"></a>00635 <span class="comment">/* Print the fastmap in human-readable form.  */</span>
<a name="l00636"></a>00636 
<a name="l00637"></a>00637 <span class="keywordtype">void</span>
<a name="l00638"></a>00638 print_fastmap (fastmap)
<a name="l00639"></a>00639     char *fastmap;
<a name="l00640"></a>00640 {
<a name="l00641"></a>00641   <span class="keywordtype">unsigned</span> was_a_range = 0;
<a name="l00642"></a>00642   <span class="keywordtype">unsigned</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00643"></a>00643 
<a name="l00644"></a>00644   <span class="keywordflow">while</span> (i &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>))
<a name="l00645"></a>00645     {
<a name="l00646"></a>00646       <span class="keywordflow">if</span> (fastmap[i++])
<a name="l00647"></a>00647     {
<a name="l00648"></a>00648       was_a_range = 0;
<a name="l00649"></a>00649           putchar (i - 1);
<a name="l00650"></a>00650           <span class="keywordflow">while</span> (i &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)  &amp;&amp;  fastmap[i])
<a name="l00651"></a>00651             {
<a name="l00652"></a>00652               was_a_range = 1;
<a name="l00653"></a>00653               i++;
<a name="l00654"></a>00654             }
<a name="l00655"></a>00655       <span class="keywordflow">if</span> (was_a_range)
<a name="l00656"></a>00656             {
<a name="l00657"></a>00657               printf (<span class="stringliteral">&quot;-&quot;</span>);
<a name="l00658"></a>00658               putchar (i - 1);
<a name="l00659"></a>00659             }
<a name="l00660"></a>00660         }
<a name="l00661"></a>00661     }
<a name="l00662"></a>00662   putchar (<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00663"></a>00663 }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665 
<a name="l00666"></a>00666 <span class="comment">/* Print a compiled pattern string in human-readable form, starting at</span>
<a name="l00667"></a>00667 <span class="comment">   the START pointer into it and ending just before the pointer END.  */</span>
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 <span class="keywordtype">void</span>
<a name="l00670"></a>00670 print_partial_compiled_pattern (start, end)
<a name="l00671"></a>00671     unsigned <span class="keywordtype">char</span> *start;
<a name="l00672"></a>00672     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end;
<a name="l00673"></a>00673 {
<a name="l00674"></a>00674   <span class="keywordtype">int</span> mcnt, mcnt2;
<a name="l00675"></a>00675   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1;
<a name="l00676"></a>00676   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = start;
<a name="l00677"></a>00677   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pend = end;
<a name="l00678"></a>00678 
<a name="l00679"></a>00679   <span class="keywordflow">if</span> (start == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00680"></a>00680     {
<a name="l00681"></a>00681       printf (<span class="stringliteral">&quot;(null)\n&quot;</span>);
<a name="l00682"></a>00682       <span class="keywordflow">return</span>;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684 
<a name="l00685"></a>00685   <span class="comment">/* Loop over pattern commands.  */</span>
<a name="l00686"></a>00686   <span class="keywordflow">while</span> (p &lt; pend)
<a name="l00687"></a>00687     {
<a name="l00688"></a>00688       printf (<span class="stringliteral">&quot;%d:\t&quot;</span>, p - start);
<a name="l00689"></a>00689 
<a name="l00690"></a>00690       <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p++)
<a name="l00691"></a>00691     {
<a name="l00692"></a>00692         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>:
<a name="l00693"></a>00693           printf (<span class="stringliteral">&quot;/no_op&quot;</span>);
<a name="l00694"></a>00694           <span class="keywordflow">break</span>;
<a name="l00695"></a>00695 
<a name="l00696"></a>00696     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>:
<a name="l00697"></a>00697       mcnt = *p++;
<a name="l00698"></a>00698           printf (<span class="stringliteral">&quot;/exactn/%d&quot;</span>, mcnt);
<a name="l00699"></a>00699           <span class="keywordflow">do</span>
<a name="l00700"></a>00700         {
<a name="l00701"></a>00701               putchar (<span class="charliteral">&#39;/&#39;</span>);
<a name="l00702"></a>00702           putchar (*p++);
<a name="l00703"></a>00703             }
<a name="l00704"></a>00704           <span class="keywordflow">while</span> (--mcnt);
<a name="l00705"></a>00705           <span class="keywordflow">break</span>;
<a name="l00706"></a>00706 
<a name="l00707"></a>00707     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>:
<a name="l00708"></a>00708           mcnt = *p++;
<a name="l00709"></a>00709           printf (<span class="stringliteral">&quot;/start_memory/%d/%d&quot;</span>, mcnt, *p++);
<a name="l00710"></a>00710           <span class="keywordflow">break</span>;
<a name="l00711"></a>00711 
<a name="l00712"></a>00712     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>:
<a name="l00713"></a>00713           mcnt = *p++;
<a name="l00714"></a>00714       printf (<span class="stringliteral">&quot;/stop_memory/%d/%d&quot;</span>, mcnt, *p++);
<a name="l00715"></a>00715           <span class="keywordflow">break</span>;
<a name="l00716"></a>00716 
<a name="l00717"></a>00717     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>:
<a name="l00718"></a>00718       printf (<span class="stringliteral">&quot;/duplicate/%d&quot;</span>, *p++);
<a name="l00719"></a>00719       <span class="keywordflow">break</span>;
<a name="l00720"></a>00720 
<a name="l00721"></a>00721     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">anychar</a>:
<a name="l00722"></a>00722       printf (<span class="stringliteral">&quot;/anychar&quot;</span>);
<a name="l00723"></a>00723       <span class="keywordflow">break</span>;
<a name="l00724"></a>00724 
<a name="l00725"></a>00725     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>:
<a name="l00726"></a>00726         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>:
<a name="l00727"></a>00727           {
<a name="l00728"></a>00728             <span class="keyword">register</span> <span class="keywordtype">int</span> c, last = -100;
<a name="l00729"></a>00729         <span class="keyword">register</span> <span class="keywordtype">int</span> in_range = 0;
<a name="l00730"></a>00730 
<a name="l00731"></a>00731         printf (<span class="stringliteral">&quot;/charset [%s&quot;</span>,
<a name="l00732"></a>00732                 (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *(p - 1) == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a> ? <span class="stringliteral">&quot;^&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l00733"></a>00733 
<a name="l00734"></a>00734             <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p + *p &lt; pend);
<a name="l00735"></a>00735 
<a name="l00736"></a>00736             <span class="keywordflow">for</span> (c = 0; c &lt; 256; c++)
<a name="l00737"></a>00737           <span class="keywordflow">if</span> (c / 8 &lt; *p
<a name="l00738"></a>00738           &amp;&amp; (p[1 + (c/8)] &amp; (1 &lt;&lt; (c % 8))))
<a name="l00739"></a>00739         {
<a name="l00740"></a>00740           <span class="comment">/* Are we starting a range?  */</span>
<a name="l00741"></a>00741           <span class="keywordflow">if</span> (last + 1 == c &amp;&amp; ! in_range)
<a name="l00742"></a>00742             {
<a name="l00743"></a>00743               putchar (<span class="charliteral">&#39;-&#39;</span>);
<a name="l00744"></a>00744               in_range = 1;
<a name="l00745"></a>00745             }
<a name="l00746"></a>00746           <span class="comment">/* Have we broken a range?  */</span>
<a name="l00747"></a>00747           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (last + 1 != c &amp;&amp; in_range)
<a name="l00748"></a>00748               {
<a name="l00749"></a>00749               putchar (last);
<a name="l00750"></a>00750               in_range = 0;
<a name="l00751"></a>00751             }
<a name="l00752"></a>00752 
<a name="l00753"></a>00753           <span class="keywordflow">if</span> (! in_range)
<a name="l00754"></a>00754             putchar (c);
<a name="l00755"></a>00755 
<a name="l00756"></a>00756           last = c;
<a name="l00757"></a>00757               }
<a name="l00758"></a>00758 
<a name="l00759"></a>00759         <span class="keywordflow">if</span> (in_range)
<a name="l00760"></a>00760           putchar (last);
<a name="l00761"></a>00761 
<a name="l00762"></a>00762         putchar (<span class="charliteral">&#39;]&#39;</span>);
<a name="l00763"></a>00763 
<a name="l00764"></a>00764         p += 1 + *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00765"></a>00765       }
<a name="l00766"></a>00766       <span class="keywordflow">break</span>;
<a name="l00767"></a>00767 
<a name="l00768"></a>00768     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>:
<a name="l00769"></a>00769       printf (<span class="stringliteral">&quot;/begline&quot;</span>);
<a name="l00770"></a>00770           <span class="keywordflow">break</span>;
<a name="l00771"></a>00771 
<a name="l00772"></a>00772     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>:
<a name="l00773"></a>00773           printf (<span class="stringliteral">&quot;/endline&quot;</span>);
<a name="l00774"></a>00774           <span class="keywordflow">break</span>;
<a name="l00775"></a>00775 
<a name="l00776"></a>00776     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>:
<a name="l00777"></a>00777           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00778"></a>00778       printf (<span class="stringliteral">&quot;/on_failure_jump to %d&quot;</span>, p + mcnt - start);
<a name="l00779"></a>00779           <span class="keywordflow">break</span>;
<a name="l00780"></a>00780 
<a name="l00781"></a>00781     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">on_failure_keep_string_jump</a>:
<a name="l00782"></a>00782           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00783"></a>00783       printf (<span class="stringliteral">&quot;/on_failure_keep_string_jump to %d&quot;</span>, p + mcnt - start);
<a name="l00784"></a>00784           <span class="keywordflow">break</span>;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>:
<a name="l00787"></a>00787           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00788"></a>00788       printf (<span class="stringliteral">&quot;/dummy_failure_jump to %d&quot;</span>, p + mcnt - start);
<a name="l00789"></a>00789           <span class="keywordflow">break</span>;
<a name="l00790"></a>00790 
<a name="l00791"></a>00791     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">push_dummy_failure</a>:
<a name="l00792"></a>00792           printf (<span class="stringliteral">&quot;/push_dummy_failure&quot;</span>);
<a name="l00793"></a>00793           <span class="keywordflow">break</span>;
<a name="l00794"></a>00794 
<a name="l00795"></a>00795         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>:
<a name="l00796"></a>00796           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00797"></a>00797       printf (<span class="stringliteral">&quot;/maybe_pop_jump to %d&quot;</span>, p + mcnt - start);
<a name="l00798"></a>00798       <span class="keywordflow">break</span>;
<a name="l00799"></a>00799 
<a name="l00800"></a>00800         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>:
<a name="l00801"></a>00801       extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00802"></a>00802       printf (<span class="stringliteral">&quot;/pop_failure_jump to %d&quot;</span>, p + mcnt - start);
<a name="l00803"></a>00803       <span class="keywordflow">break</span>;
<a name="l00804"></a>00804 
<a name="l00805"></a>00805         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>:
<a name="l00806"></a>00806       extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00807"></a>00807       printf (<span class="stringliteral">&quot;/jump_past_alt to %d&quot;</span>, p + mcnt - start);
<a name="l00808"></a>00808       <span class="keywordflow">break</span>;
<a name="l00809"></a>00809 
<a name="l00810"></a>00810         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l00811"></a>00811       extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00812"></a>00812       printf (<span class="stringliteral">&quot;/jump to %d&quot;</span>, p + mcnt - start);
<a name="l00813"></a>00813       <span class="keywordflow">break</span>;
<a name="l00814"></a>00814 
<a name="l00815"></a>00815         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>:
<a name="l00816"></a>00816           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00817"></a>00817       p1 = p + mcnt;
<a name="l00818"></a>00818           extract_number_and_incr (&amp;mcnt2, &amp;p);
<a name="l00819"></a>00819       printf (<span class="stringliteral">&quot;/succeed_n to %d, %d times&quot;</span>, p1 - start, mcnt2);
<a name="l00820"></a>00820           <span class="keywordflow">break</span>;
<a name="l00821"></a>00821 
<a name="l00822"></a>00822         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>:
<a name="l00823"></a>00823           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00824"></a>00824       p1 = p + mcnt;
<a name="l00825"></a>00825           extract_number_and_incr (&amp;mcnt2, &amp;p);
<a name="l00826"></a>00826       printf (<span class="stringliteral">&quot;/jump_n to %d, %d times&quot;</span>, p1 - start, mcnt2);
<a name="l00827"></a>00827           <span class="keywordflow">break</span>;
<a name="l00828"></a>00828 
<a name="l00829"></a>00829         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>:
<a name="l00830"></a>00830           extract_number_and_incr (&amp;mcnt, &amp;p);
<a name="l00831"></a>00831       p1 = p + mcnt;
<a name="l00832"></a>00832           extract_number_and_incr (&amp;mcnt2, &amp;p);
<a name="l00833"></a>00833       printf (<span class="stringliteral">&quot;/set_number_at location %d to %d&quot;</span>, p1 - start, mcnt2);
<a name="l00834"></a>00834           <span class="keywordflow">break</span>;
<a name="l00835"></a>00835 
<a name="l00836"></a>00836         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>:
<a name="l00837"></a>00837       printf (<span class="stringliteral">&quot;/wordbound&quot;</span>);
<a name="l00838"></a>00838       <span class="keywordflow">break</span>;
<a name="l00839"></a>00839 
<a name="l00840"></a>00840     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>:
<a name="l00841"></a>00841       printf (<span class="stringliteral">&quot;/notwordbound&quot;</span>);
<a name="l00842"></a>00842           <span class="keywordflow">break</span>;
<a name="l00843"></a>00843 
<a name="l00844"></a>00844     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>:
<a name="l00845"></a>00845       printf (<span class="stringliteral">&quot;/wordbeg&quot;</span>);
<a name="l00846"></a>00846       <span class="keywordflow">break</span>;
<a name="l00847"></a>00847 
<a name="l00848"></a>00848     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>:
<a name="l00849"></a>00849       printf (<span class="stringliteral">&quot;/wordend&quot;</span>);
<a name="l00850"></a>00850 
<a name="l00851"></a>00851 <span class="preprocessor"># ifdef emacs</span>
<a name="l00852"></a>00852 <span class="preprocessor"></span>    <span class="keywordflow">case</span> before_dot:
<a name="l00853"></a>00853       printf (<span class="stringliteral">&quot;/before_dot&quot;</span>);
<a name="l00854"></a>00854           <span class="keywordflow">break</span>;
<a name="l00855"></a>00855 
<a name="l00856"></a>00856     <span class="keywordflow">case</span> at_dot:
<a name="l00857"></a>00857       printf (<span class="stringliteral">&quot;/at_dot&quot;</span>);
<a name="l00858"></a>00858           <span class="keywordflow">break</span>;
<a name="l00859"></a>00859 
<a name="l00860"></a>00860     <span class="keywordflow">case</span> after_dot:
<a name="l00861"></a>00861       printf (<span class="stringliteral">&quot;/after_dot&quot;</span>);
<a name="l00862"></a>00862           <span class="keywordflow">break</span>;
<a name="l00863"></a>00863 
<a name="l00864"></a>00864     <span class="keywordflow">case</span> syntaxspec:
<a name="l00865"></a>00865           printf (<span class="stringliteral">&quot;/syntaxspec&quot;</span>);
<a name="l00866"></a>00866       mcnt = *p++;
<a name="l00867"></a>00867       printf (<span class="stringliteral">&quot;/%d&quot;</span>, mcnt);
<a name="l00868"></a>00868           <span class="keywordflow">break</span>;
<a name="l00869"></a>00869 
<a name="l00870"></a>00870     <span class="keywordflow">case</span> notsyntaxspec:
<a name="l00871"></a>00871           printf (<span class="stringliteral">&quot;/notsyntaxspec&quot;</span>);
<a name="l00872"></a>00872       mcnt = *p++;
<a name="l00873"></a>00873       printf (<span class="stringliteral">&quot;/%d&quot;</span>, mcnt);
<a name="l00874"></a>00874       <span class="keywordflow">break</span>;
<a name="l00875"></a>00875 <span class="preprocessor"># endif </span><span class="comment">/* emacs */</span>
<a name="l00876"></a>00876 
<a name="l00877"></a>00877     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>:
<a name="l00878"></a>00878       printf (<span class="stringliteral">&quot;/wordchar&quot;</span>);
<a name="l00879"></a>00879           <span class="keywordflow">break</span>;
<a name="l00880"></a>00880 
<a name="l00881"></a>00881     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>:
<a name="l00882"></a>00882       printf (<span class="stringliteral">&quot;/notwordchar&quot;</span>);
<a name="l00883"></a>00883           <span class="keywordflow">break</span>;
<a name="l00884"></a>00884 
<a name="l00885"></a>00885     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>:
<a name="l00886"></a>00886       printf (<span class="stringliteral">&quot;/begbuf&quot;</span>);
<a name="l00887"></a>00887           <span class="keywordflow">break</span>;
<a name="l00888"></a>00888 
<a name="l00889"></a>00889     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>:
<a name="l00890"></a>00890       printf (<span class="stringliteral">&quot;/endbuf&quot;</span>);
<a name="l00891"></a>00891           <span class="keywordflow">break</span>;
<a name="l00892"></a>00892 
<a name="l00893"></a>00893         <span class="keywordflow">default</span>:
<a name="l00894"></a>00894           printf (<span class="stringliteral">&quot;?%d&quot;</span>, *(p-1));
<a name="l00895"></a>00895     }
<a name="l00896"></a>00896 
<a name="l00897"></a>00897       putchar (<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00898"></a>00898     }
<a name="l00899"></a>00899 
<a name="l00900"></a>00900   printf (<span class="stringliteral">&quot;%d:\tend of pattern.\n&quot;</span>, p - start);
<a name="l00901"></a>00901 }
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 
<a name="l00904"></a>00904 <span class="keywordtype">void</span>
<a name="l00905"></a>00905 print_compiled_pattern (bufp)
<a name="l00906"></a>00906     struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l00907"></a>00907 {
<a name="l00908"></a>00908   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="structbuffer.html">buffer</a> = bufp-&gt;buffer;
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   print_partial_compiled_pattern (buffer, buffer + bufp-&gt;used);
<a name="l00911"></a>00911   printf (<span class="stringliteral">&quot;%ld bytes used/%ld bytes allocated.\n&quot;</span>,
<a name="l00912"></a>00912       bufp-&gt;used, bufp-&gt;allocated);
<a name="l00913"></a>00913 
<a name="l00914"></a>00914   <span class="keywordflow">if</span> (bufp-&gt;fastmap_accurate &amp;&amp; bufp-&gt;fastmap)
<a name="l00915"></a>00915     {
<a name="l00916"></a>00916       printf (<span class="stringliteral">&quot;fastmap: &quot;</span>);
<a name="l00917"></a>00917       print_fastmap (bufp-&gt;fastmap);
<a name="l00918"></a>00918     }
<a name="l00919"></a>00919 
<a name="l00920"></a>00920   printf (<span class="stringliteral">&quot;re_nsub: %d\t&quot;</span>, bufp-&gt;re_nsub);
<a name="l00921"></a>00921   printf (<span class="stringliteral">&quot;regs_alloc: %d\t&quot;</span>, bufp-&gt;regs_allocated);
<a name="l00922"></a>00922   printf (<span class="stringliteral">&quot;can_be_null: %d\t&quot;</span>, bufp-&gt;can_be_null);
<a name="l00923"></a>00923   printf (<span class="stringliteral">&quot;newline_anchor: %d\n&quot;</span>, bufp-&gt;newline_anchor);
<a name="l00924"></a>00924   printf (<span class="stringliteral">&quot;no_sub: %d\t&quot;</span>, bufp-&gt;no_sub);
<a name="l00925"></a>00925   printf (<span class="stringliteral">&quot;not_bol: %d\t&quot;</span>, bufp-&gt;not_bol);
<a name="l00926"></a>00926   printf (<span class="stringliteral">&quot;not_eol: %d\t&quot;</span>, bufp-&gt;not_eol);
<a name="l00927"></a>00927   printf (<span class="stringliteral">&quot;syntax: %lx\n&quot;</span>, bufp-&gt;syntax);
<a name="l00928"></a>00928   <span class="comment">/* Perhaps we should print the translate table?  */</span>
<a name="l00929"></a>00929 }
<a name="l00930"></a>00930 
<a name="l00931"></a>00931 
<a name="l00932"></a>00932 <span class="keywordtype">void</span>
<a name="l00933"></a>00933 print_double_string (where, string1, size1, string2, size2)
<a name="l00934"></a>00934     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *where;
<a name="l00935"></a>00935     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *string1;
<a name="l00936"></a>00936     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *string2;
<a name="l00937"></a>00937     <span class="keywordtype">int</span> size1;
<a name="l00938"></a>00938     <span class="keywordtype">int</span> size2;
<a name="l00939"></a>00939 {
<a name="l00940"></a>00940   <span class="keywordtype">int</span> this_char;
<a name="l00941"></a>00941 
<a name="l00942"></a>00942   <span class="keywordflow">if</span> (where == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00943"></a>00943     printf (<span class="stringliteral">&quot;(null)&quot;</span>);
<a name="l00944"></a>00944   <span class="keywordflow">else</span>
<a name="l00945"></a>00945     {
<a name="l00946"></a>00946       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a490c47f87b80eb6afdb77510567659e4">FIRST_STRING_P</a> (where))
<a name="l00947"></a>00947         {
<a name="l00948"></a>00948           <span class="keywordflow">for</span> (this_char = where - string1; this_char &lt; size1; this_char++)
<a name="l00949"></a>00949             putchar (string1[this_char]);
<a name="l00950"></a>00950 
<a name="l00951"></a>00951           where = string2;
<a name="l00952"></a>00952         }
<a name="l00953"></a>00953 
<a name="l00954"></a>00954       <span class="keywordflow">for</span> (this_char = where - string2; this_char &lt; size2; this_char++)
<a name="l00955"></a>00955         putchar (string2[this_char]);
<a name="l00956"></a>00956     }
<a name="l00957"></a>00957 }
<a name="l00958"></a>00958 
<a name="l00959"></a>00959 <span class="keywordtype">void</span>
<a name="l00960"></a>00960 printchar (c)
<a name="l00961"></a>00961      int c;
<a name="l00962"></a>00962 {
<a name="l00963"></a>00963   putc (c, stderr);
<a name="l00964"></a>00964 }
<a name="l00965"></a>00965 
<a name="l00966"></a>00966 <span class="preprocessor">#else </span><span class="comment">/* not DEBUG */</span>
<a name="l00967"></a>00967 
<a name="l00968"></a>00968 <span class="preprocessor"># undef assert</span>
<a name="l00969"></a><a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">00969</a> <span class="preprocessor"></span><span class="preprocessor"># define assert(e)</span>
<a name="l00970"></a>00970 <span class="preprocessor"></span>
<a name="l00971"></a><a class="code" href="regex_8c.html#ad1f96075b21c23232c91a890025692c2">00971</a> <span class="preprocessor"># define DEBUG_STATEMENT(e)</span>
<a name="l00972"></a><a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">00972</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT1(x)</span>
<a name="l00973"></a><a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">00973</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT2(x1, x2)</span>
<a name="l00974"></a><a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">00974</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT3(x1, x2, x3)</span>
<a name="l00975"></a><a class="code" href="regex_8c.html#aca55c7b840c46d7e72964a9ecf52310f">00975</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT4(x1, x2, x3, x4)</span>
<a name="l00976"></a><a class="code" href="regex_8c.html#ac9718b28cdc916b46e7f98bd4c38151e">00976</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)</span>
<a name="l00977"></a><a class="code" href="regex_8c.html#ac98cc201be49e8dd0e1d05264e7651d7">00977</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)</span>
<a name="l00978"></a>00978 <span class="preprocessor"></span>
<a name="l00979"></a>00979 <span class="preprocessor">#endif </span><span class="comment">/* not DEBUG */</span>
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 <span class="comment">/* Set by `re_set_syntax&#39; to the current regexp syntax to recognize.  Can</span>
<a name="l00982"></a>00982 <span class="comment">   also be assigned to arbitrarily: each pattern buffer stores its own</span>
<a name="l00983"></a>00983 <span class="comment">   syntax, so it can be changed between regex compilations.  */</span>
<a name="l00984"></a>00984 <span class="comment">/* This has no initializer because initialized variables in Emacs</span>
<a name="l00985"></a>00985 <span class="comment">   become read-only after dumping.  */</span>
<a name="l00986"></a><a class="code" href="regex_8c.html#abdc5e67bbb6a48b740a95aef2bc3f5f2">00986</a> <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> <a class="code" href="regex-gnu_8h.html#abdc5e67bbb6a48b740a95aef2bc3f5f2">re_syntax_options</a>;
<a name="l00987"></a>00987 
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 <span class="comment">/* Specify the precise syntax of regexps for compilation.  This provides</span>
<a name="l00990"></a>00990 <span class="comment">   for compatibility for various utilities which historically have</span>
<a name="l00991"></a>00991 <span class="comment">   different, incompatible syntaxes.</span>
<a name="l00992"></a>00992 <span class="comment"></span>
<a name="l00993"></a>00993 <span class="comment">   The argument SYNTAX is a bit mask comprised of the various bits</span>
<a name="l00994"></a>00994 <span class="comment">   defined in regex.h.  We return the old syntax.  */</span>
<a name="l00995"></a>00995 
<a name="l00996"></a>00996 <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a>
<a name="l00997"></a><a class="code" href="regex_8c.html#ad7a880e03677a7961ddf81cdc73e8fb4">00997</a> <a class="code" href="regex_8c.html#ad7a880e03677a7961ddf81cdc73e8fb4">re_set_syntax</a> (syntax)
<a name="l00998"></a>00998     <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax;
<a name="l00999"></a>00999 {
<a name="l01000"></a>01000   <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> ret = <a class="code" href="regex-gnu_8h.html#abdc5e67bbb6a48b740a95aef2bc3f5f2">re_syntax_options</a>;
<a name="l01001"></a>01001 
<a name="l01002"></a>01002   re_syntax_options = syntax;
<a name="l01003"></a>01003 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l01004"></a>01004 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a8b5102c6c1d783f324012804b26e82cb">RE_DEBUG</a>)
<a name="l01005"></a>01005     debug = 1;
<a name="l01006"></a>01006   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (debug) <span class="comment">/* was on but now is not */</span>
<a name="l01007"></a>01007     debug = 0;
<a name="l01008"></a>01008 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l01009"></a>01009   <span class="keywordflow">return</span> ret;
<a name="l01010"></a>01010 }
<a name="l01011"></a>01011 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l01012"></a>01012 <span class="preprocessor"></span>weak_alias (__re_set_syntax, <a class="code" href="regex_8c.html#ad7a880e03677a7961ddf81cdc73e8fb4">re_set_syntax</a>)
<a name="l01013"></a>01013 <span class="preprocessor">#endif</span>
<a name="l01014"></a>01014 <span class="preprocessor"></span>
<a name="l01015"></a>01015 <span class="comment">/* This table gives an error message for each of the error codes listed</span>
<a name="l01016"></a>01016 <span class="comment">   in regex.h.  Obviously the order here has to be same as there.</span>
<a name="l01017"></a>01017 <span class="comment">   POSIX doesn&#39;t require that we do anything for REG_NOERROR,</span>
<a name="l01018"></a>01018 <span class="comment">   but why not be nice?  */</span>
<a name="l01019"></a>01019 
<a name="l01020"></a><a class="code" href="regex_8c.html#a4a5e7ab240e155127f898d0a96c68922">01020</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> <a class="code" href="regex_8c.html#a4a5e7ab240e155127f898d0a96c68922">re_error_msgid</a>[] =
<a name="l01021"></a>01021   {
<a name="l01022"></a>01022 <span class="preprocessor">#define REG_NOERROR_IDX 0</span>
<a name="l01023"></a>01023 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Success&quot;</span>)    <span class="comment">/* REG_NOERROR */</span>
<a name="l01024"></a>01024     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01025"></a>01025 <span class="preprocessor">#define REG_NOMATCH_IDX (REG_NOERROR_IDX + sizeof &quot;Success&quot;)</span>
<a name="l01026"></a>01026 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;No match&quot;</span>)   <span class="comment">/* REG_NOMATCH */</span>
<a name="l01027"></a>01027     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01028"></a>01028 <span class="preprocessor">#define REG_BADPAT_IDX  (REG_NOMATCH_IDX + sizeof &quot;No match&quot;)</span>
<a name="l01029"></a>01029 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid regular expression&quot;</span>) <span class="comment">/* REG_BADPAT */</span>
<a name="l01030"></a>01030     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01031"></a>01031 <span class="preprocessor">#define REG_ECOLLATE_IDX (REG_BADPAT_IDX + sizeof &quot;Invalid regular expression&quot;)</span>
<a name="l01032"></a>01032 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid collation character&quot;</span>) <span class="comment">/* REG_ECOLLATE */</span>
<a name="l01033"></a>01033     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01034"></a>01034 <span class="preprocessor">#define REG_ECTYPE_IDX  (REG_ECOLLATE_IDX + sizeof &quot;Invalid collation character&quot;)</span>
<a name="l01035"></a>01035 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid character class name&quot;</span>) <span class="comment">/* REG_ECTYPE */</span>
<a name="l01036"></a>01036     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01037"></a>01037 <span class="preprocessor">#define REG_EESCAPE_IDX (REG_ECTYPE_IDX + sizeof &quot;Invalid character class name&quot;)</span>
<a name="l01038"></a>01038 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Trailing backslash&quot;</span>) <span class="comment">/* REG_EESCAPE */</span>
<a name="l01039"></a>01039     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01040"></a>01040 <span class="preprocessor">#define REG_ESUBREG_IDX (REG_EESCAPE_IDX + sizeof &quot;Trailing backslash&quot;)</span>
<a name="l01041"></a>01041 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid back reference&quot;</span>) <span class="comment">/* REG_ESUBREG */</span>
<a name="l01042"></a>01042     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01043"></a>01043 <span class="preprocessor">#define REG_EBRACK_IDX  (REG_ESUBREG_IDX + sizeof &quot;Invalid back reference&quot;)</span>
<a name="l01044"></a>01044 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Unmatched [ or [^&quot;</span>)  <span class="comment">/* REG_EBRACK */</span>
<a name="l01045"></a>01045     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01046"></a>01046 <span class="preprocessor">#define REG_EPAREN_IDX  (REG_EBRACK_IDX + sizeof &quot;Unmatched [ or [^&quot;)</span>
<a name="l01047"></a>01047 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Unmatched ( or \\(&quot;</span>) <span class="comment">/* REG_EPAREN */</span>
<a name="l01048"></a>01048     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01049"></a>01049 <span class="preprocessor">#define REG_EBRACE_IDX  (REG_EPAREN_IDX + sizeof &quot;Unmatched ( or \\(&quot;)</span>
<a name="l01050"></a>01050 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Unmatched \\{&quot;</span>) <span class="comment">/* REG_EBRACE */</span>
<a name="l01051"></a>01051     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01052"></a>01052 <span class="preprocessor">#define REG_BADBR_IDX   (REG_EBRACE_IDX + sizeof &quot;Unmatched \\{&quot;)</span>
<a name="l01053"></a>01053 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid content of \\{\\}&quot;</span>) <span class="comment">/* REG_BADBR */</span>
<a name="l01054"></a>01054     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01055"></a>01055 <span class="preprocessor">#define REG_ERANGE_IDX  (REG_BADBR_IDX + sizeof &quot;Invalid content of \\{\\}&quot;)</span>
<a name="l01056"></a>01056 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid range end&quot;</span>)  <span class="comment">/* REG_ERANGE */</span>
<a name="l01057"></a>01057     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01058"></a>01058 <span class="preprocessor">#define REG_ESPACE_IDX  (REG_ERANGE_IDX + sizeof &quot;Invalid range end&quot;)</span>
<a name="l01059"></a>01059 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Memory exhausted&quot;</span>) <span class="comment">/* REG_ESPACE */</span>
<a name="l01060"></a>01060     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01061"></a>01061 <span class="preprocessor">#define REG_BADRPT_IDX  (REG_ESPACE_IDX + sizeof &quot;Memory exhausted&quot;)</span>
<a name="l01062"></a>01062 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Invalid preceding regular expression&quot;</span>) <span class="comment">/* REG_BADRPT */</span>
<a name="l01063"></a>01063     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01064"></a>01064 <span class="preprocessor">#define REG_EEND_IDX    (REG_BADRPT_IDX + sizeof &quot;Invalid preceding regular expression&quot;)</span>
<a name="l01065"></a>01065 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Premature end of regular expression&quot;</span>) <span class="comment">/* REG_EEND */</span>
<a name="l01066"></a>01066     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01067"></a>01067 <span class="preprocessor">#define REG_ESIZE_IDX   (REG_EEND_IDX + sizeof &quot;Premature end of regular expression&quot;)</span>
<a name="l01068"></a>01068 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Regular expression too big&quot;</span>) <span class="comment">/* REG_ESIZE */</span>
<a name="l01069"></a>01069     <span class="stringliteral">&quot;\0&quot;</span>
<a name="l01070"></a>01070 <span class="preprocessor">#define REG_ERPAREN_IDX (REG_ESIZE_IDX + sizeof &quot;Regular expression too big&quot;)</span>
<a name="l01071"></a>01071 <span class="preprocessor"></span>    <a class="code" href="regex_8c.html#a1a0ef2e42374f90a13299cc06f437847">gettext_noop</a> (<span class="stringliteral">&quot;Unmatched ) or \\)&quot;</span>), <span class="comment">/* REG_ERPAREN */</span>
<a name="l01072"></a>01072   };
<a name="l01073"></a>01073 
<a name="l01074"></a><a class="code" href="regex_8c.html#aff41b1a2e0447b7f5744746b3abb9530">01074</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="regex_8c.html#aff41b1a2e0447b7f5744746b3abb9530">re_error_msgid_idx</a>[] =
<a name="l01075"></a>01075   {
<a name="l01076"></a>01076     <a class="code" href="regex_8c.html#a53cac93056e7e4dcd77c87fd5b64ab85">REG_NOERROR_IDX</a>,
<a name="l01077"></a>01077     <a class="code" href="regex_8c.html#a20c488a0672699e12eebb87f4536a2a1">REG_NOMATCH_IDX</a>,
<a name="l01078"></a>01078     <a class="code" href="regex_8c.html#a48ae85c8247f711c7612edf7783e857c">REG_BADPAT_IDX</a>,
<a name="l01079"></a>01079     <a class="code" href="regex_8c.html#a6c414c00809d9b700e9d8071c4d8b051">REG_ECOLLATE_IDX</a>,
<a name="l01080"></a>01080     <a class="code" href="regex_8c.html#acdb862b0439091c6aba1ddb34ec74c9f">REG_ECTYPE_IDX</a>,
<a name="l01081"></a>01081     <a class="code" href="regex_8c.html#a94bc4724ebb8f838d053f9f10fa3981a">REG_EESCAPE_IDX</a>,
<a name="l01082"></a>01082     <a class="code" href="regex_8c.html#aacadf8be59807dfbb1e55d08c26744b9">REG_ESUBREG_IDX</a>,
<a name="l01083"></a>01083     <a class="code" href="regex_8c.html#a206525485bf45f18ebf8fd0fcab5f3cd">REG_EBRACK_IDX</a>,
<a name="l01084"></a>01084     <a class="code" href="regex_8c.html#ab27649935fb8e05dd687d0d1e738697a">REG_EPAREN_IDX</a>,
<a name="l01085"></a>01085     <a class="code" href="regex_8c.html#ae63f97c2af9852820b09ada8117982f3">REG_EBRACE_IDX</a>,
<a name="l01086"></a>01086     <a class="code" href="regex_8c.html#a4d53631524c3e1f51d75b3d50f04d8ed">REG_BADBR_IDX</a>,
<a name="l01087"></a>01087     <a class="code" href="regex_8c.html#a9335e944484ecf3dac6270666feaaf1f">REG_ERANGE_IDX</a>,
<a name="l01088"></a>01088     <a class="code" href="regex_8c.html#af6d28ac4aa08afd5fe52f7fd43abc5bb">REG_ESPACE_IDX</a>,
<a name="l01089"></a>01089     <a class="code" href="regex_8c.html#acf4d9e47a0ca86890be7bee5fc73aceb">REG_BADRPT_IDX</a>,
<a name="l01090"></a>01090     <a class="code" href="regex_8c.html#a5f5131e9e883c6f787f7c1041d3d3f1a">REG_EEND_IDX</a>,
<a name="l01091"></a>01091     <a class="code" href="regex_8c.html#aa86dc74b96a36fc455d490601cab5529">REG_ESIZE_IDX</a>,
<a name="l01092"></a>01092     <a class="code" href="regex_8c.html#a7a212c67e65cef62a14bc026104b3965">REG_ERPAREN_IDX</a>
<a name="l01093"></a>01093   };
<a name="l01094"></a>01094 
<a name="l01095"></a>01095 <span class="comment">/* Avoiding alloca during matching, to placate r_alloc.  */</span>
<a name="l01096"></a>01096 
<a name="l01097"></a>01097 <span class="comment">/* Define MATCH_MAY_ALLOCATE unless we need to make sure that the</span>
<a name="l01098"></a>01098 <span class="comment">   searching and matching functions should not call alloca.  On some</span>
<a name="l01099"></a>01099 <span class="comment">   systems, alloca is implemented in terms of malloc, and if we&#39;re</span>
<a name="l01100"></a>01100 <span class="comment">   using the relocating allocator routines, then malloc could cause a</span>
<a name="l01101"></a>01101 <span class="comment">   relocation, which might (if the strings being searched are in the</span>
<a name="l01102"></a>01102 <span class="comment">   ralloc heap) shift the data out from underneath the regexp</span>
<a name="l01103"></a>01103 <span class="comment">   routines.</span>
<a name="l01104"></a>01104 <span class="comment"></span>
<a name="l01105"></a>01105 <span class="comment">   Here&#39;s another reason to avoid allocation: Emacs</span>
<a name="l01106"></a>01106 <span class="comment">   processes input from X in a signal handler; processing X input may</span>
<a name="l01107"></a>01107 <span class="comment">   call malloc; if input arrives while a matching routine is calling</span>
<a name="l01108"></a>01108 <span class="comment">   malloc, then we&#39;re scrod.  But Emacs can&#39;t just block input while</span>
<a name="l01109"></a>01109 <span class="comment">   calling matching routines; then we don&#39;t notice interrupts when</span>
<a name="l01110"></a>01110 <span class="comment">   they come in.  So, Emacs blocks input around all regexp calls</span>
<a name="l01111"></a>01111 <span class="comment">   except the matching calls, which it leaves unprotected, in the</span>
<a name="l01112"></a>01112 <span class="comment">   faith that they will not malloc.  */</span>
<a name="l01113"></a>01113 
<a name="l01114"></a>01114 <span class="comment">/* Normally, this is fine.  */</span>
<a name="l01115"></a><a class="code" href="regex_8c.html#ad211d540a618e60d26c61ae8b711a0e2">01115</a> <span class="preprocessor">#define MATCH_MAY_ALLOCATE</span>
<a name="l01116"></a>01116 <span class="preprocessor"></span>
<a name="l01117"></a>01117 <span class="comment">/* When using GNU C, we are not REALLY using the C alloca, no matter</span>
<a name="l01118"></a>01118 <span class="comment">   what config.h may say.  So don&#39;t take precautions for it.  */</span>
<a name="l01119"></a>01119 <span class="preprocessor">#ifdef __GNUC__</span>
<a name="l01120"></a>01120 <span class="preprocessor"></span><span class="preprocessor"># undef C_ALLOCA</span>
<a name="l01121"></a>01121 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01122"></a>01122 <span class="preprocessor"></span>
<a name="l01123"></a>01123 <span class="comment">/* The match routines may not allocate if (1) they would do it with malloc</span>
<a name="l01124"></a>01124 <span class="comment">   and (2) it&#39;s not safe for them to use malloc.</span>
<a name="l01125"></a>01125 <span class="comment">   Note that if REL_ALLOC is defined, matching would not use malloc for the</span>
<a name="l01126"></a>01126 <span class="comment">   failure stack, but we would still use it for the register vectors;</span>
<a name="l01127"></a>01127 <span class="comment">   so REL_ALLOC should not affect this.  */</span>
<a name="l01128"></a>01128 <span class="preprocessor">#if (defined C_ALLOCA || defined REGEX_MALLOC) &amp;&amp; defined emacs</span>
<a name="l01129"></a>01129 <span class="preprocessor"></span><span class="preprocessor"># undef MATCH_MAY_ALLOCATE</span>
<a name="l01130"></a>01130 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01131"></a>01131 <span class="preprocessor"></span>
<a name="l01132"></a>01132 
<a name="l01133"></a>01133 <span class="comment">/* Failure stack declarations and macros; both re_compile_fastmap and</span>
<a name="l01134"></a>01134 <span class="comment">   re_match_2 use a failure stack.  These have to be macros because of</span>
<a name="l01135"></a>01135 <span class="comment">   REGEX_ALLOCATE_STACK.  */</span>
<a name="l01136"></a>01136 
<a name="l01137"></a>01137 
<a name="l01138"></a>01138 <span class="comment">/* Number of failure points for which to initially allocate space</span>
<a name="l01139"></a>01139 <span class="comment">   when matching.  If this number is exceeded, we allocate more</span>
<a name="l01140"></a>01140 <span class="comment">   space, so it is not a hard limit.  */</span>
<a name="l01141"></a>01141 <span class="preprocessor">#ifndef INIT_FAILURE_ALLOC</span>
<a name="l01142"></a><a class="code" href="regex_8c.html#aeac2a61705646c181c38a42de6d71b7a">01142</a> <span class="preprocessor"></span><span class="preprocessor"># define INIT_FAILURE_ALLOC 5</span>
<a name="l01143"></a>01143 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01144"></a>01144 <span class="preprocessor"></span>
<a name="l01145"></a>01145 <span class="comment">/* Roughly the maximum number of failure points on the stack.  Would be</span>
<a name="l01146"></a>01146 <span class="comment">   exactly that if always used MAX_FAILURE_ITEMS items each time we failed.</span>
<a name="l01147"></a>01147 <span class="comment">   This is a variable only so users of regex can assign to it; we never</span>
<a name="l01148"></a>01148 <span class="comment">   change it ourselves.  */</span>
<a name="l01149"></a>01149 
<a name="l01150"></a>01150 <span class="preprocessor">#ifdef INT_IS_16BIT</span>
<a name="l01151"></a>01151 <span class="preprocessor"></span>
<a name="l01152"></a>01152 <span class="preprocessor"># if defined MATCH_MAY_ALLOCATE</span>
<a name="l01153"></a>01153 <span class="preprocessor"></span><span class="comment">/* 4400 was enough to cause a crash on Alpha OSF/1,</span>
<a name="l01154"></a>01154 <span class="comment">   whose default stack limit is 2mb.  */</span>
<a name="l01155"></a>01155 <span class="keywordtype">long</span> <span class="keywordtype">int</span> <a class="code" href="regex_8c.html#a22b8c11c82d877fbf919376da65e62ca">re_max_failures</a> = 4000;
<a name="l01156"></a>01156 <span class="preprocessor"># else</span>
<a name="l01157"></a>01157 <span class="preprocessor"></span><span class="keywordtype">long</span> <span class="keywordtype">int</span> re_max_failures = 2000;
<a name="l01158"></a>01158 <span class="preprocessor"># endif</span>
<a name="l01159"></a>01159 <span class="preprocessor"></span>
<a name="l01160"></a>01160 <span class="keyword">union </span><a class="code" href="unionfail__stack__elt.html">fail_stack_elt</a>
<a name="l01161"></a>01161 {
<a name="l01162"></a>01162   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="unionfail__stack__elt.html#ae38105ebed00410e3185ad89ca1d6877">pointer</a>;
<a name="l01163"></a>01163   <span class="keywordtype">long</span> <span class="keywordtype">int</span> <a class="code" href="unionfail__stack__elt.html#a7a3b5ae99d00bf5fa1427c0abf646bc9">integer</a>;
<a name="l01164"></a>01164 };
<a name="l01165"></a>01165 
<a name="l01166"></a>01166 <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionfail__stack__elt.html">fail_stack_elt</a> <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>;
<a name="l01167"></a>01167 
<a name="l01168"></a>01168 <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l01169"></a>01169 {
<a name="l01170"></a>01170   <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *stack;
<a name="l01171"></a>01171   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> size;
<a name="l01172"></a>01172   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> avail;      <span class="comment">/* Offset of next open position.  */</span>
<a name="l01173"></a>01173 } <a class="code" href="structfail__stack__type.html">fail_stack_type</a>;
<a name="l01174"></a>01174 
<a name="l01175"></a>01175 <span class="preprocessor">#else </span><span class="comment">/* not INT_IS_16BIT */</span>
<a name="l01176"></a>01176 
<a name="l01177"></a>01177 <span class="preprocessor"># if defined MATCH_MAY_ALLOCATE</span>
<a name="l01178"></a>01178 <span class="preprocessor"></span><span class="comment">/* 4400 was enough to cause a crash on Alpha OSF/1,</span>
<a name="l01179"></a>01179 <span class="comment">   whose default stack limit is 2mb.  */</span>
<a name="l01180"></a><a class="code" href="regex_8c.html#a22b8c11c82d877fbf919376da65e62ca">01180</a> <span class="keywordtype">int</span> re_max_failures = 20000;
<a name="l01181"></a>01181 <span class="preprocessor"># else</span>
<a name="l01182"></a>01182 <span class="preprocessor"></span><span class="keywordtype">int</span> re_max_failures = 2000;
<a name="l01183"></a>01183 <span class="preprocessor"># endif</span>
<a name="l01184"></a>01184 <span class="preprocessor"></span>
<a name="l01185"></a><a class="code" href="unionfail__stack__elt.html">01185</a> <span class="keyword">union </span><a class="code" href="unionfail__stack__elt.html">fail_stack_elt</a>
<a name="l01186"></a>01186 {
<a name="l01187"></a><a class="code" href="unionfail__stack__elt.html#ae38105ebed00410e3185ad89ca1d6877">01187</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="unionfail__stack__elt.html#ae38105ebed00410e3185ad89ca1d6877">pointer</a>;
<a name="l01188"></a><a class="code" href="unionfail__stack__elt.html#a7a3b5ae99d00bf5fa1427c0abf646bc9">01188</a>   <span class="keywordtype">int</span> <a class="code" href="unionfail__stack__elt.html#a7a3b5ae99d00bf5fa1427c0abf646bc9">integer</a>;
<a name="l01189"></a>01189 };
<a name="l01190"></a>01190 
<a name="l01191"></a><a class="code" href="regex_8c.html#ad124700b566688232f5fb6638b679858">01191</a> <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionfail__stack__elt.html">fail_stack_elt</a> <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>;
<a name="l01192"></a>01192 
<a name="l01193"></a><a class="code" href="structfail__stack__type.html">01193</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l01194"></a>01194 {
<a name="l01195"></a><a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">01195</a>   <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>;
<a name="l01196"></a><a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">01196</a>   <span class="keywordtype">unsigned</span> <a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a>;
<a name="l01197"></a><a class="code" href="structfail__stack__type.html#a1e3d4256deebf37a4528f58d3d261854">01197</a>   <span class="keywordtype">unsigned</span> <a class="code" href="structfail__stack__type.html#a1e3d4256deebf37a4528f58d3d261854">avail</a>;           <span class="comment">/* Offset of next open position.  */</span>
<a name="l01198"></a>01198 } <a class="code" href="structfail__stack__type.html">fail_stack_type</a>;
<a name="l01199"></a>01199 
<a name="l01200"></a>01200 <span class="preprocessor">#endif </span><span class="comment">/* INT_IS_16BIT */</span>
<a name="l01201"></a>01201 
<a name="l01202"></a><a class="code" href="regex_8c.html#a222a4648230cba6a1801e51b4e2ced77">01202</a> <span class="preprocessor">#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)</span>
<a name="l01203"></a><a class="code" href="regex_8c.html#a7218502745eb68919c81cf41be91f7e8">01203</a> <span class="preprocessor"></span><span class="preprocessor">#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr-&gt;avail == 0)</span>
<a name="l01204"></a><a class="code" href="regex_8c.html#ae2c89df0b8a642151867be8aaab52b44">01204</a> <span class="preprocessor"></span><span class="preprocessor">#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)</span>
<a name="l01205"></a>01205 <span class="preprocessor"></span>
<a name="l01206"></a>01206 
<a name="l01207"></a>01207 <span class="comment">/* Define macros to initialize and free the failure stack.</span>
<a name="l01208"></a>01208 <span class="comment">   Do `return -2&#39; if the alloc fails.  */</span>
<a name="l01209"></a>01209 
<a name="l01210"></a>01210 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE</span>
<a name="l01211"></a><a class="code" href="regex_8c.html#a0a97c6a1ac97ed1288cb47dceabc56df">01211</a> <span class="preprocessor"></span><span class="preprocessor"># define INIT_FAIL_STACK()                      \</span>
<a name="l01212"></a>01212 <span class="preprocessor">  do {                                  \</span>
<a name="l01213"></a>01213 <span class="preprocessor">    fail_stack.stack = (fail_stack_elt_t *)             \</span>
<a name="l01214"></a>01214 <span class="preprocessor">      REGEX_ALLOCATE_STACK (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t)); \</span>
<a name="l01215"></a>01215 <span class="preprocessor">                                    \</span>
<a name="l01216"></a>01216 <span class="preprocessor">    if (fail_stack.stack == NULL)                   \</span>
<a name="l01217"></a>01217 <span class="preprocessor">      return -2;                            \</span>
<a name="l01218"></a>01218 <span class="preprocessor">                                    \</span>
<a name="l01219"></a>01219 <span class="preprocessor">    fail_stack.size = INIT_FAILURE_ALLOC;               \</span>
<a name="l01220"></a>01220 <span class="preprocessor">    fail_stack.avail = 0;                       \</span>
<a name="l01221"></a>01221 <span class="preprocessor">  } while (0)</span>
<a name="l01222"></a>01222 <span class="preprocessor"></span>
<a name="l01223"></a><a class="code" href="regex_8c.html#af9f8d0785dfac45a23d8d8fdb4df1629">01223</a> <span class="preprocessor"># define RESET_FAIL_STACK()  REGEX_FREE_STACK (fail_stack.stack)</span>
<a name="l01224"></a>01224 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l01225"></a>01225 <span class="preprocessor"></span><span class="preprocessor"># define INIT_FAIL_STACK()                      \</span>
<a name="l01226"></a>01226 <span class="preprocessor">  do {                                  \</span>
<a name="l01227"></a>01227 <span class="preprocessor">    fail_stack.avail = 0;                       \</span>
<a name="l01228"></a>01228 <span class="preprocessor">  } while (0)</span>
<a name="l01229"></a>01229 <span class="preprocessor"></span>
<a name="l01230"></a>01230 <span class="preprocessor"># define RESET_FAIL_STACK()</span>
<a name="l01231"></a>01231 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01232"></a>01232 <span class="preprocessor"></span>
<a name="l01233"></a>01233 
<a name="l01234"></a>01234 <span class="comment">/* Double the size of FAIL_STACK, up to approximately `re_max_failures&#39; items.</span>
<a name="l01235"></a>01235 <span class="comment"></span>
<a name="l01236"></a>01236 <span class="comment">   Return 1 if succeeds, and 0 if either ran out of memory</span>
<a name="l01237"></a>01237 <span class="comment">   allocating space for it or it was already too large.</span>
<a name="l01238"></a>01238 <span class="comment"></span>
<a name="l01239"></a>01239 <span class="comment">   REGEX_REALLOCATE_STACK requires `destination&#39; be declared.   */</span>
<a name="l01240"></a>01240 
<a name="l01241"></a><a class="code" href="regex_8c.html#a138c79633bb68c93b6f7b7a31989fd0c">01241</a> <span class="preprocessor">#define DOUBLE_FAIL_STACK(fail_stack)                   \</span>
<a name="l01242"></a>01242 <span class="preprocessor">  ((fail_stack).size &gt; (unsigned) (re_max_failures * MAX_FAILURE_ITEMS) \</span>
<a name="l01243"></a>01243 <span class="preprocessor">   ? 0                                  \</span>
<a name="l01244"></a>01244 <span class="preprocessor">   : ((fail_stack).stack = (fail_stack_elt_t *)             \</span>
<a name="l01245"></a>01245 <span class="preprocessor">        REGEX_REALLOCATE_STACK ((fail_stack).stack,             \</span>
<a name="l01246"></a>01246 <span class="preprocessor">          (fail_stack).size * sizeof (fail_stack_elt_t),        \</span>
<a name="l01247"></a>01247 <span class="preprocessor">          ((fail_stack).size &lt;&lt; 1) * sizeof (fail_stack_elt_t)),    \</span>
<a name="l01248"></a>01248 <span class="preprocessor">                                    \</span>
<a name="l01249"></a>01249 <span class="preprocessor">      (fail_stack).stack == NULL                    \</span>
<a name="l01250"></a>01250 <span class="preprocessor">      ? 0                               \</span>
<a name="l01251"></a>01251 <span class="preprocessor">      : ((fail_stack).size &lt;&lt;= 1,                   \</span>
<a name="l01252"></a>01252 <span class="preprocessor">         1)))</span>
<a name="l01253"></a>01253 <span class="preprocessor"></span>
<a name="l01254"></a>01254 
<a name="l01255"></a>01255 <span class="comment">/* Push pointer POINTER on FAIL_STACK.</span>
<a name="l01256"></a>01256 <span class="comment">   Return 1 if was able to do so and 0 if ran out of memory allocating</span>
<a name="l01257"></a>01257 <span class="comment">   space to do so.  */</span>
<a name="l01258"></a><a class="code" href="regex_8c.html#a78ae8e3bdec768f7fd9a75b31109fa8d">01258</a> <span class="preprocessor">#define PUSH_PATTERN_OP(POINTER, FAIL_STACK)                \</span>
<a name="l01259"></a>01259 <span class="preprocessor">  ((FAIL_STACK_FULL ()                          \</span>
<a name="l01260"></a>01260 <span class="preprocessor">    &amp;&amp; !DOUBLE_FAIL_STACK (FAIL_STACK))                 \</span>
<a name="l01261"></a>01261 <span class="preprocessor">   ? 0                                  \</span>
<a name="l01262"></a>01262 <span class="preprocessor">   : ((FAIL_STACK).stack[(FAIL_STACK).avail++].pointer = POINTER,   \</span>
<a name="l01263"></a>01263 <span class="preprocessor">      1))</span>
<a name="l01264"></a>01264 <span class="preprocessor"></span>
<a name="l01265"></a>01265 <span class="comment">/* Push a pointer value onto the failure stack.</span>
<a name="l01266"></a>01266 <span class="comment">   Assumes the variable `fail_stack&#39;.  Probably should only</span>
<a name="l01267"></a>01267 <span class="comment">   be called from within `PUSH_FAILURE_POINT&#39;.  */</span>
<a name="l01268"></a><a class="code" href="regex_8c.html#a880b2917876e9b98f61d985cef56109e">01268</a> <span class="preprocessor">#define PUSH_FAILURE_POINTER(item)                  \</span>
<a name="l01269"></a>01269 <span class="preprocessor">  fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (item)</span>
<a name="l01270"></a>01270 <span class="preprocessor"></span>
<a name="l01271"></a>01271 <span class="comment">/* This pushes an integer-valued item onto the failure stack.</span>
<a name="l01272"></a>01272 <span class="comment">   Assumes the variable `fail_stack&#39;.  Probably should only</span>
<a name="l01273"></a>01273 <span class="comment">   be called from within `PUSH_FAILURE_POINT&#39;.  */</span>
<a name="l01274"></a><a class="code" href="regex_8c.html#ab92b2a4088d04570c444979b2c7f909c">01274</a> <span class="preprocessor">#define PUSH_FAILURE_INT(item)                  \</span>
<a name="l01275"></a>01275 <span class="preprocessor">  fail_stack.stack[fail_stack.avail++].integer = (item)</span>
<a name="l01276"></a>01276 <span class="preprocessor"></span>
<a name="l01277"></a>01277 <span class="comment">/* Push a fail_stack_elt_t value onto the failure stack.</span>
<a name="l01278"></a>01278 <span class="comment">   Assumes the variable `fail_stack&#39;.  Probably should only</span>
<a name="l01279"></a>01279 <span class="comment">   be called from within `PUSH_FAILURE_POINT&#39;.  */</span>
<a name="l01280"></a><a class="code" href="regex_8c.html#ad2265d63a0d1735021b318f4726920f9">01280</a> <span class="preprocessor">#define PUSH_FAILURE_ELT(item)                  \</span>
<a name="l01281"></a>01281 <span class="preprocessor">  fail_stack.stack[fail_stack.avail++] =  (item)</span>
<a name="l01282"></a>01282 <span class="preprocessor"></span>
<a name="l01283"></a>01283 <span class="comment">/* These three POP... operations complement the three PUSH... operations.</span>
<a name="l01284"></a>01284 <span class="comment">   All assume that `fail_stack&#39; is nonempty.  */</span>
<a name="l01285"></a><a class="code" href="regex_8c.html#abde0e78c06d9082788a9f5f0a08140cd">01285</a> <span class="preprocessor">#define POP_FAILURE_POINTER() fail_stack.stack[--fail_stack.avail].pointer</span>
<a name="l01286"></a><a class="code" href="regex_8c.html#a9f6a9e7cd2ec7f1a660dbdad98f7ccd3">01286</a> <span class="preprocessor"></span><span class="preprocessor">#define POP_FAILURE_INT() fail_stack.stack[--fail_stack.avail].integer</span>
<a name="l01287"></a><a class="code" href="regex_8c.html#a3dd24cbefa49fcb9c198ead90fed08bb">01287</a> <span class="preprocessor"></span><span class="preprocessor">#define POP_FAILURE_ELT() fail_stack.stack[--fail_stack.avail]</span>
<a name="l01288"></a>01288 <span class="preprocessor"></span>
<a name="l01289"></a>01289 <span class="comment">/* Used to omit pushing failure point id&#39;s when we&#39;re not debugging.  */</span>
<a name="l01290"></a>01290 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l01291"></a>01291 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PUSH PUSH_FAILURE_INT</span>
<a name="l01292"></a>01292 <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_INT ()</span>
<a name="l01293"></a>01293 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l01294"></a><a class="code" href="regex_8c.html#adcf501a46c37ea945270b413a48d997c">01294</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_PUSH(item)</span>
<a name="l01295"></a><a class="code" href="regex_8c.html#a0f6414b702d4cdb7c696daf16ff46267">01295</a> <span class="preprocessor"></span><span class="preprocessor"># define DEBUG_POP(item_addr)</span>
<a name="l01296"></a>01296 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01297"></a>01297 <span class="preprocessor"></span>
<a name="l01298"></a>01298 
<a name="l01299"></a>01299 <span class="comment">/* Push the information about the state we will need</span>
<a name="l01300"></a>01300 <span class="comment">   if we ever fail back to it.</span>
<a name="l01301"></a>01301 <span class="comment"></span>
<a name="l01302"></a>01302 <span class="comment">   Requires variables fail_stack, regstart, regend, reg_info, and</span>
<a name="l01303"></a>01303 <span class="comment">   num_regs_pushed be declared.  DOUBLE_FAIL_STACK requires `destination&#39;</span>
<a name="l01304"></a>01304 <span class="comment">   be declared.</span>
<a name="l01305"></a>01305 <span class="comment"></span>
<a name="l01306"></a>01306 <span class="comment">   Does `return FAILURE_CODE&#39; if runs out of memory.  */</span>
<a name="l01307"></a>01307 
<a name="l01308"></a><a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">01308</a> <span class="preprocessor">#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)   \</span>
<a name="l01309"></a>01309 <span class="preprocessor">  do {                                  \</span>
<a name="l01310"></a>01310 <span class="preprocessor">    char *destination;                          \</span>
<a name="l01311"></a>01311 <span class="preprocessor">    </span><span class="comment">/* Must be int, so when we don&#39;t save any registers, the arithmetic \</span>
<a name="l01312"></a>01312 <span class="comment">       of 0 + -1 isn&#39;t done as unsigned.  */</span>                \
<a name="l01313"></a>01313     <span class="comment">/* Can&#39;t be int, since there is not a shred of a guarantee that int \</span>
<a name="l01314"></a>01314 <span class="comment">       is wide enough to hold a value of something to which pointer can \</span>
<a name="l01315"></a>01315 <span class="comment">       be assigned */</span>                           \
<a name="l01316"></a>01316     active_reg_t this_reg;                      \
<a name="l01317"></a>01317                                         \
<a name="l01318"></a>01318     DEBUG_STATEMENT (failure_id++);                 \
<a name="l01319"></a>01319     DEBUG_STATEMENT (nfailure_points_pushed++);             \
<a name="l01320"></a>01320     DEBUG_PRINT2 (&quot;\nPUSH_FAILURE_POINT #%u:\n&quot;, failure_id);       \
<a name="l01321"></a>01321     DEBUG_PRINT2 (&quot;  Before push, next avail: %d\n&quot;, (fail_stack).avail);\
<a name="l01322"></a>01322     DEBUG_PRINT2 (&quot;                     size: %d\n&quot;, (fail_stack).size);\
<a name="l01323"></a>01323                                     \
<a name="l01324"></a>01324     DEBUG_PRINT2 (&quot;  slots needed: %ld\n&quot;, NUM_FAILURE_ITEMS);      \
<a name="l01325"></a>01325     DEBUG_PRINT2 (&quot;     available: %d\n&quot;, REMAINING_AVAIL_SLOTS);   \
<a name="l01326"></a>01326                                     \
<a name="l01327"></a>01327     <span class="comment">/* Ensure we have enough space allocated for what we will push.  */</span> \
<a name="l01328"></a>01328     while (REMAINING_AVAIL_SLOTS &lt; NUM_FAILURE_ITEMS)           \
<a name="l01329"></a>01329       {                                 \
<a name="l01330"></a>01330         if (!DOUBLE_FAIL_STACK (fail_stack))                \
<a name="l01331"></a>01331           return failure_code;                      \
<a name="l01332"></a>01332                                     \
<a name="l01333"></a>01333         DEBUG_PRINT2 (&quot;\n  Doubled stack; size now: %d\n&quot;,      \
<a name="l01334"></a>01334                (fail_stack).size);              \
<a name="l01335"></a>01335         DEBUG_PRINT2 (&quot;  slots available: %d\n&quot;, REMAINING_AVAIL_SLOTS);\
<a name="l01336"></a>01336       }                                 \
<a name="l01337"></a>01337                                     \
<a name="l01338"></a>01338     <span class="comment">/* Push the info, starting with the registers.  */</span>          \
<a name="l01339"></a>01339     DEBUG_PRINT1 (&quot;\n&quot;);                        \
<a name="l01340"></a>01340                                     \
<a name="l01341"></a>01341     if (1)                              \
<a name="l01342"></a>01342       for (this_reg = lowest_active_reg; this_reg &lt;= highest_active_reg; \
<a name="l01343"></a>01343        this_reg++)                          \
<a name="l01344"></a>01344     {                               \
<a name="l01345"></a>01345       DEBUG_PRINT2 (&quot;  Pushing reg: %lu\n&quot;, this_reg);      \
<a name="l01346"></a>01346       DEBUG_STATEMENT (num_regs_pushed++);              \
<a name="l01347"></a>01347                                     \
<a name="l01348"></a>01348       DEBUG_PRINT2 (&quot;    start: %p\n&quot;, regstart[this_reg]);     \
<a name="l01349"></a>01349       PUSH_FAILURE_POINTER (regstart[this_reg]);            \
<a name="l01350"></a>01350                                     \
<a name="l01351"></a>01351       DEBUG_PRINT2 (&quot;    end: %p\n&quot;, regend[this_reg]);     \
<a name="l01352"></a>01352       PUSH_FAILURE_POINTER (regend[this_reg]);          \
<a name="l01353"></a>01353                                     \
<a name="l01354"></a>01354       DEBUG_PRINT2 (&quot;    info: %p\n      &quot;,             \
<a name="l01355"></a>01355             reg_info[this_reg].word.pointer);       \
<a name="l01356"></a>01356       DEBUG_PRINT2 (&quot; match_null=%d&quot;,               \
<a name="l01357"></a>01357             REG_MATCH_NULL_STRING_P (reg_info[this_reg]));  \
<a name="l01358"></a>01358       DEBUG_PRINT2 (&quot; active=%d&quot;, IS_ACTIVE (reg_info[this_reg]));  \
<a name="l01359"></a>01359       DEBUG_PRINT2 (&quot; matched_something=%d&quot;,            \
<a name="l01360"></a>01360             MATCHED_SOMETHING (reg_info[this_reg]));    \
<a name="l01361"></a>01361       DEBUG_PRINT2 (&quot; ever_matched=%d&quot;,             \
<a name="l01362"></a>01362             EVER_MATCHED_SOMETHING (reg_info[this_reg]));   \
<a name="l01363"></a>01363       DEBUG_PRINT1 (&quot;\n&quot;);                      \
<a name="l01364"></a>01364       PUSH_FAILURE_ELT (reg_info[this_reg].word);           \
<a name="l01365"></a>01365     }                               \
<a name="l01366"></a>01366                                     \
<a name="l01367"></a>01367     DEBUG_PRINT2 (&quot;  Pushing  low active reg: %ld\n&quot;, lowest_active_reg);\
<a name="l01368"></a>01368     PUSH_FAILURE_INT (lowest_active_reg);               \
<a name="l01369"></a>01369                                     \
<a name="l01370"></a>01370     DEBUG_PRINT2 (&quot;  Pushing high active reg: %ld\n&quot;, highest_active_reg);\
<a name="l01371"></a>01371     PUSH_FAILURE_INT (highest_active_reg);              \
<a name="l01372"></a>01372                                     \
<a name="l01373"></a>01373     DEBUG_PRINT2 (&quot;  Pushing pattern %p:\n&quot;, pattern_place);        \
<a name="l01374"></a>01374     DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);       \
<a name="l01375"></a>01375     PUSH_FAILURE_POINTER (pattern_place);               \
<a name="l01376"></a>01376                                     \
<a name="l01377"></a>01377     DEBUG_PRINT2 (&quot;  Pushing string %p: `&quot;, string_place);      \
<a name="l01378"></a>01378     DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
<a name="l01379"></a>01379                  size2);                \
<a name="l01380"></a>01380     DEBUG_PRINT1 (&quot;&#39;\n&quot;);                       \
<a name="l01381"></a>01381     PUSH_FAILURE_POINTER (string_place);                \
<a name="l01382"></a>01382                                     \
<a name="l01383"></a>01383     DEBUG_PRINT2 (&quot;  Pushing failure id: %u\n&quot;, failure_id);        \
<a name="l01384"></a>01384     DEBUG_PUSH (failure_id);                        \
<a name="l01385"></a>01385   } while (0)
<a name="l01386"></a><a class="code" href="regex_8c.html#acc5ecaf7b97fde5acbc377a7003496d7">01386</a> 
<a name="l01387"></a>01387 <span class="comment">/* This is the number of items that are pushed and popped on the stack</span>
<a name="l01388"></a>01388 <span class="comment">   for each register.  */</span>
<a name="l01389"></a>01389 <span class="preprocessor">#define NUM_REG_ITEMS  3</span>
<a name="l01390"></a>01390 <span class="preprocessor"></span>
<a name="l01391"></a>01391 <span class="comment">/* Individual items aside from the registers.  */</span>
<a name="l01392"></a><a class="code" href="regex_8c.html#aa6fc40697161c66c2a8a7c72a9cb5e77">01392</a> <span class="preprocessor">#ifdef DEBUG</span>
<a name="l01393"></a>01393 <span class="preprocessor"></span><span class="preprocessor"># define NUM_NONREG_ITEMS 5 </span><span class="comment">/* Includes failure point id.  */</span>
<a name="l01394"></a>01394 <span class="preprocessor">#else</span>
<a name="l01395"></a>01395 <span class="preprocessor"></span><span class="preprocessor"># define NUM_NONREG_ITEMS 4</span>
<a name="l01396"></a>01396 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01397"></a>01397 <span class="preprocessor"></span>
<a name="l01398"></a>01398 <span class="comment">/* We push at most this many items on the stack.  */</span>
<a name="l01399"></a><a class="code" href="regex_8c.html#a9c1cb14ecb36be1c3ff3c5a050ecc561">01399</a> <span class="comment">/* We used to use (num_regs - 1), which is the number of registers</span>
<a name="l01400"></a>01400 <span class="comment">   this regexp will save; but that was changed to 5</span>
<a name="l01401"></a>01401 <span class="comment">   to avoid stack overflow for a regexp with lots of parens.  */</span>
<a name="l01402"></a><a class="code" href="regex_8c.html#a6c2bd568049066ea7c22fadaee2c894f">01402</a> <span class="preprocessor">#define MAX_FAILURE_ITEMS (5 * NUM_REG_ITEMS + NUM_NONREG_ITEMS)</span>
<a name="l01403"></a>01403 <span class="preprocessor"></span>
<a name="l01404"></a>01404 <span class="comment">/* We actually push this many items.  */</span>
<a name="l01405"></a>01405 <span class="preprocessor">#define NUM_FAILURE_ITEMS               \</span>
<a name="l01406"></a>01406 <span class="preprocessor">  (((0                          \</span>
<a name="l01407"></a>01407 <span class="preprocessor">     ? 0 : highest_active_reg - lowest_active_reg + 1)  \</span>
<a name="l01408"></a>01408 <span class="preprocessor">    * NUM_REG_ITEMS)                    \</span>
<a name="l01409"></a><a class="code" href="regex_8c.html#a3c10fb30732d92eb33b8d2d0a2817e7b">01409</a> <span class="preprocessor">   + NUM_NONREG_ITEMS)</span>
<a name="l01410"></a>01410 <span class="preprocessor"></span>
<a name="l01411"></a>01411 <span class="comment">/* How many items can still be added to the stack without overflowing it.  */</span>
<a name="l01412"></a>01412 <span class="preprocessor">#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)</span>
<a name="l01413"></a>01413 <span class="preprocessor"></span>
<a name="l01414"></a>01414 
<a name="l01415"></a>01415 <span class="comment">/* Pops what PUSH_FAIL_STACK pushes.</span>
<a name="l01416"></a>01416 <span class="comment"></span>
<a name="l01417"></a>01417 <span class="comment">   We restore into the parameters, all of which should be lvalues:</span>
<a name="l01418"></a>01418 <span class="comment">     STR -- the saved data position.</span>
<a name="l01419"></a>01419 <span class="comment">     PAT -- the saved pattern position.</span>
<a name="l01420"></a>01420 <span class="comment">     LOW_REG, HIGH_REG -- the highest and lowest active registers.</span>
<a name="l01421"></a>01421 <span class="comment">     REGSTART, REGEND -- arrays of string positions.</span>
<a name="l01422"></a>01422 <span class="comment">     REG_INFO -- array of information about each subexpression.</span>
<a name="l01423"></a>01423 <span class="comment"></span>
<a name="l01424"></a><a class="code" href="regex_8c.html#a51d78204b5e3cc240058c986103c8b8e">01424</a> <span class="comment">   Also assumes the variables `fail_stack&#39; and (if debugging), `bufp&#39;,</span>
<a name="l01425"></a>01425 <span class="comment">   `pend&#39;, `string1&#39;, `size1&#39;, `string2&#39;, and `size2&#39;.  */</span>
<a name="l01426"></a>01426 
<a name="l01427"></a>01427 <span class="preprocessor">#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\</span>
<a name="l01428"></a>01428 <span class="preprocessor">{                                   \</span>
<a name="l01429"></a>01429 <span class="preprocessor">  DEBUG_STATEMENT (unsigned failure_id;)                \</span>
<a name="l01430"></a>01430 <span class="preprocessor">  active_reg_t this_reg;                        \</span>
<a name="l01431"></a>01431 <span class="preprocessor">  const unsigned char *string_temp;                 \</span>
<a name="l01432"></a>01432 <span class="preprocessor">                                    \</span>
<a name="l01433"></a>01433 <span class="preprocessor">  assert (!FAIL_STACK_EMPTY ());                    \</span>
<a name="l01434"></a>01434 <span class="preprocessor">                                    \</span>
<a name="l01435"></a>01435 <span class="preprocessor">  </span><span class="comment">/* Remove failure points and point to how many regs pushed.  */</span>   \
<a name="l01436"></a>01436   DEBUG_PRINT1 (&quot;POP_FAILURE_POINT:\n&quot;);                \
<a name="l01437"></a>01437   DEBUG_PRINT2 (&quot;  Before pop, next avail: %d\n&quot;, fail_stack.avail);    \
<a name="l01438"></a>01438   DEBUG_PRINT2 (&quot;                    size: %d\n&quot;, fail_stack.size); \
<a name="l01439"></a>01439                                     \
<a name="l01440"></a>01440   assert (fail_stack.avail &gt;= NUM_NONREG_ITEMS);            \
<a name="l01441"></a>01441                                     \
<a name="l01442"></a>01442   DEBUG_POP (&amp;failure_id);                      \
<a name="l01443"></a>01443   DEBUG_PRINT2 (&quot;  Popping failure id: %u\n&quot;, failure_id);      \
<a name="l01444"></a>01444                                     \
<a name="l01445"></a>01445   <span class="comment">/* If the saved string location is NULL, it came from an      \</span>
<a name="l01446"></a>01446 <span class="comment">     on_failure_keep_string_jump opcode, and we want to throw away the  \</span>
<a name="l01447"></a>01447 <span class="comment">     saved NULL, thus retaining our current position in the string.  */</span> \
<a name="l01448"></a>01448   string_temp = POP_FAILURE_POINTER ();                 \
<a name="l01449"></a>01449   if (string_temp != NULL)                      \
<a name="l01450"></a>01450     str = (const char *) string_temp;                   \
<a name="l01451"></a>01451                                     \
<a name="l01452"></a>01452   DEBUG_PRINT2 (&quot;  Popping string %p: `&quot;, str);             \
<a name="l01453"></a>01453   DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);  \
<a name="l01454"></a>01454   DEBUG_PRINT1 (&quot;&#39;\n&quot;);                         \
<a name="l01455"></a>01455                                     \
<a name="l01456"></a>01456   pat = (unsigned char *) POP_FAILURE_POINTER ();           \
<a name="l01457"></a>01457   DEBUG_PRINT2 (&quot;  Popping pattern %p:\n&quot;, pat);            \
<a name="l01458"></a>01458   DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);           \
<a name="l01459"></a>01459                                     \
<a name="l01460"></a>01460   <span class="comment">/* Restore register info.  */</span>                     \
<a name="l01461"></a>01461   high_reg = (active_reg_t) POP_FAILURE_INT ();             \
<a name="l01462"></a>01462   DEBUG_PRINT2 (&quot;  Popping high active reg: %ld\n&quot;, high_reg);      \
<a name="l01463"></a>01463                                     \
<a name="l01464"></a>01464   low_reg = (active_reg_t) POP_FAILURE_INT ();              \
<a name="l01465"></a>01465   DEBUG_PRINT2 (&quot;  Popping  low active reg: %ld\n&quot;, low_reg);       \
<a name="l01466"></a>01466                                     \
<a name="l01467"></a>01467   if (1)                                \
<a name="l01468"></a>01468     for (this_reg = high_reg; this_reg &gt;= low_reg; this_reg--)      \
<a name="l01469"></a>01469       {                                 \
<a name="l01470"></a>01470     DEBUG_PRINT2 (&quot;    Popping reg: %ld\n&quot;, this_reg);      \
<a name="l01471"></a>01471                                     \
<a name="l01472"></a>01472     reg_info[this_reg].word = POP_FAILURE_ELT ();           \
<a name="l01473"></a>01473     DEBUG_PRINT2 (&quot;      info: %p\n&quot;,               \
<a name="l01474"></a>01474               reg_info[this_reg].word.pointer);         \
<a name="l01475"></a>01475                                     \
<a name="l01476"></a>01476     regend[this_reg] = (const char *) POP_FAILURE_POINTER ();   \
<a name="l01477"></a>01477     DEBUG_PRINT2 (&quot;      end: %p\n&quot;, regend[this_reg]);     \
<a name="l01478"></a>01478                                     \
<a name="l01479"></a>01479     regstart[this_reg] = (const char *) POP_FAILURE_POINTER (); \
<a name="l01480"></a>01480     DEBUG_PRINT2 (&quot;      start: %p\n&quot;, regstart[this_reg]);     \
<a name="l01481"></a>01481       }                                 \
<a name="l01482"></a>01482   else                                  \
<a name="l01483"></a>01483     {                                   \
<a name="l01484"></a>01484       for (this_reg = highest_active_reg; this_reg &gt; high_reg; this_reg--) \
<a name="l01485"></a>01485     {                               \
<a name="l01486"></a>01486       reg_info[this_reg].word.integer = 0;              \
<a name="l01487"></a>01487       regend[this_reg] = 0;                     \
<a name="l01488"></a>01488       regstart[this_reg] = 0;                   \
<a name="l01489"></a>01489     }                               \
<a name="l01490"></a>01490       highest_active_reg = high_reg;                    \
<a name="l01491"></a>01491     }                                   \
<a name="l01492"></a>01492                                     \
<a name="l01493"></a>01493   set_regs_matched_done = 0;                        \
<a name="l01494"></a>01494   DEBUG_STATEMENT (nfailure_points_popped++);               \
<a name="l01495"></a>01495 } <span class="comment">/* POP_FAILURE_POINT */</span>
<a name="l01496"></a>01496 
<a name="l01497"></a>01497 
<a name="l01498"></a>01498 
<a name="l01499"></a>01499 <span class="comment">/* Structure for per-register (a.k.a. per-group) information.</span>
<a name="l01500"></a>01500 <span class="comment">   Other register information, such as the</span>
<a name="l01501"></a>01501 <span class="comment">   starting and ending positions (which are addresses), and the list of</span>
<a name="l01502"></a>01502 <span class="comment">   inner groups (which is a bits list) are maintained in separate</span>
<a name="l01503"></a>01503 <span class="comment">   variables.</span>
<a name="l01504"></a>01504 <span class="comment"></span>
<a name="l01505"></a>01505 <span class="comment">   We are making a (strictly speaking) nonportable assumption here: that</span>
<a name="l01506"></a>01506 <span class="comment">   the compiler will pack our bit fields into something that fits into</span>
<a name="l01507"></a>01507 <span class="comment">   the type of `word&#39;, i.e., is something that fits into one item on the</span>
<a name="l01508"></a><a class="code" href="unionregister__info__type.html">01508</a> <span class="comment">   failure stack.  */</span>
<a name="l01509"></a>01509 
<a name="l01510"></a><a class="code" href="unionregister__info__type.html#a043049c539c1faf32f7827ecfd213d54">01510</a> 
<a name="l01511"></a>01511 <span class="comment">/* Declarations and macros for re_match_2.  */</span>
<a name="l01512"></a>01512 
<a name="l01513"></a>01513 <span class="keyword">typedef</span> <span class="keyword">union</span>
<a name="l01514"></a>01514 {
<a name="l01515"></a><a class="code" href="regex_8c.html#a9fbdd9b78059994c85d9f064f9fa9ec3">01515</a>   <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> word;
<a name="l01516"></a><a class="code" href="unionregister__info__type.html#a989fd7471cc6cca3b11a1f131953ee02">01516</a>   <span class="keyword">struct</span>
<a name="l01517"></a><a class="code" href="unionregister__info__type.html#adff16b2ba318af82b945d659c0f91ffa">01517</a>   {
<a name="l01518"></a><a class="code" href="unionregister__info__type.html#a5050422a9b6e4673315964626b1fd1ac">01518</a>       <span class="comment">/* This field is one if this group can match the empty string,</span>
<a name="l01519"></a><a class="code" href="unionregister__info__type.html#a9834f5a8a58b57e135fa8024ff7be739">01519</a> <span class="comment">         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE&#39;.  */</span>
<a name="l01520"></a>01520 <span class="preprocessor">#define MATCH_NULL_UNSET_VALUE 3</span>
<a name="l01521"></a>01521 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> match_null_string_p : 2;
<a name="l01522"></a>01522     <span class="keywordtype">unsigned</span> is_active : 1;
<a name="l01523"></a><a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">01523</a>     <span class="keywordtype">unsigned</span> matched_something : 1;
<a name="l01524"></a><a class="code" href="regex_8c.html#a4f6628b4b02e356efb3c4c8e6cf8eaff">01524</a>     <span class="keywordtype">unsigned</span> ever_matched_something : 1;
<a name="l01525"></a><a class="code" href="regex_8c.html#a37aeb4969c6ded152f5be7582330e6e5">01525</a>   } bits;
<a name="l01526"></a><a class="code" href="regex_8c.html#ad4e9639db811e6b09f31ff92466b404e">01526</a> } <a class="code" href="unionregister__info__type.html">register_info_type</a>;
<a name="l01527"></a>01527 
<a name="l01528"></a>01528 <span class="preprocessor">#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)</span>
<a name="l01529"></a>01529 <span class="preprocessor"></span><span class="preprocessor">#define IS_ACTIVE(R)  ((R).bits.is_active)</span>
<a name="l01530"></a>01530 <span class="preprocessor"></span><span class="preprocessor">#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)</span>
<a name="l01531"></a>01531 <span class="preprocessor"></span><span class="preprocessor">#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)</span>
<a name="l01532"></a><a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">01532</a> <span class="preprocessor"></span>
<a name="l01533"></a>01533 
<a name="l01534"></a>01534 <span class="comment">/* Call this when have matched a real character; it sets `matched&#39; flags</span>
<a name="l01535"></a>01535 <span class="comment">   for the subexpressions which we are currently inside.  Also records</span>
<a name="l01536"></a>01536 <span class="comment">   that those subexprs have matched.  */</span>
<a name="l01537"></a>01537 <span class="preprocessor">#define SET_REGS_MATCHED()                      \</span>
<a name="l01538"></a>01538 <span class="preprocessor">  do                                    \</span>
<a name="l01539"></a>01539 <span class="preprocessor">    {                                   \</span>
<a name="l01540"></a>01540 <span class="preprocessor">      if (!set_regs_matched_done)                   \</span>
<a name="l01541"></a>01541 <span class="preprocessor">    {                               \</span>
<a name="l01542"></a>01542 <span class="preprocessor">      active_reg_t r;                       \</span>
<a name="l01543"></a>01543 <span class="preprocessor">      set_regs_matched_done = 1;                    \</span>
<a name="l01544"></a>01544 <span class="preprocessor">      for (r = lowest_active_reg; r &lt;= highest_active_reg; r++) \</span>
<a name="l01545"></a>01545 <span class="preprocessor">        {                               \</span>
<a name="l01546"></a>01546 <span class="preprocessor">          MATCHED_SOMETHING (reg_info[r])               \</span>
<a name="l01547"></a>01547 <span class="preprocessor">        = EVER_MATCHED_SOMETHING (reg_info[r])          \</span>
<a name="l01548"></a>01548 <span class="preprocessor">        = 1;                            \</span>
<a name="l01549"></a>01549 <span class="preprocessor">        }                               \</span>
<a name="l01550"></a><a class="code" href="regex_8c.html#aadf22463a9896cf91277d88f89246e43">01550</a> <span class="preprocessor">    }                               \</span>
<a name="l01551"></a><a class="code" href="regex_8c.html#a78d7e87774e3c9ae84570f8ab88f55a5">01551</a> <span class="preprocessor">    }                                   \</span>
<a name="l01552"></a><a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">01552</a> <span class="preprocessor">  while (0)</span>
<a name="l01553"></a>01553 <span class="preprocessor"></span>
<a name="l01554"></a>01554 <span class="comment">/* Registers are set to a sentinel when they haven&#39;t yet matched.  */</span>
<a name="l01555"></a>01555 <span class="keyword">static</span> <span class="keywordtype">char</span> <a class="code" href="regex_8c.html#aadf22463a9896cf91277d88f89246e43">reg_unset_dummy</a>;
<a name="l01556"></a>01556 <span class="preprocessor">#define REG_UNSET_VALUE (&amp;reg_unset_dummy)</span>
<a name="l01557"></a>01557 <span class="preprocessor"></span><span class="preprocessor">#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)</span>
<a name="l01558"></a>01558 <span class="preprocessor"></span>
<a name="l01559"></a>01559 <span class="comment">/* Subroutine declarations and macros for regex_compile.  */</span>
<a name="l01560"></a>01560 
<a name="l01561"></a>01561 <span class="keyword">static</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> <a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">regex_compile</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keyword">const</span> <span class="keywordtype">char</span> *pattern, <span class="keywordtype">size_t</span> size,
<a name="l01562"></a>01562                           <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax,
<a name="l01563"></a>01563                           <span class="keyword">struct</span> <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp));
<a name="l01564"></a>01564 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="regex_8c.html#ac119126b68c58a7c0fc1af5b119450ed">store_op1</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc, <span class="keywordtype">int</span> arg));
<a name="l01565"></a>01565 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="regex_8c.html#ab2200093505d6435c2521ff819125d0d">store_op2</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc,
<a name="l01566"></a>01566                  <span class="keywordtype">int</span> arg1, <span class="keywordtype">int</span> arg2));
<a name="l01567"></a>01567 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="regex_8c.html#a6ec9fc1db02e8f3a1625ed9771f5bd92">insert_op1</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc,
<a name="l01568"></a>01568                   <span class="keywordtype">int</span> arg, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end));
<a name="l01569"></a>01569 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="regex_8c.html#ae31b1d009dfa3a2b5eca3f11ec3dee6a">insert_op2</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc,
<a name="l01570"></a>01570                   <span class="keywordtype">int</span> arg1, <span class="keywordtype">int</span> arg2, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end));
<a name="l01571"></a>01571 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#a9fcec6851521f04076e51adfa274403c">at_begline_loc_p</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keyword">const</span> <span class="keywordtype">char</span> *pattern, <span class="keyword">const</span> <span class="keywordtype">char</span> *p,
<a name="l01572"></a>01572                        <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax));
<a name="l01573"></a>01573 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#a85a9d04db18bdf4b65ea1113400613e4">at_endline_loc_p</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keyword">const</span> <span class="keywordtype">char</span> *p, <span class="keyword">const</span> <span class="keywordtype">char</span> *pend,
<a name="l01574"></a>01574                        <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax));
<a name="l01575"></a>01575 <span class="keyword">static</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> <a class="code" href="regex_8c.html#a06b0c1ae265d6791c041df0ddf6d7ff6">compile_range</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keyword">const</span> <span class="keywordtype">char</span> **p_ptr,
<a name="l01576"></a>01576                           <span class="keyword">const</span> <span class="keywordtype">char</span> *pend,
<a name="l01577"></a>01577                           <span class="keywordtype">char</span> *translate,
<a name="l01578"></a>01578                           <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax,
<a name="l01579"></a>01579                           <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *b));
<a name="l01580"></a>01580 
<a name="l01581"></a><a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">01581</a> <span class="comment">/* Fetch the next character in the uncompiled pattern---translating it</span>
<a name="l01582"></a>01582 <span class="comment">   if necessary.  Also cast from a signed character in the constant</span>
<a name="l01583"></a>01583 <span class="comment">   string passed to us by the user to an unsigned char that we can use</span>
<a name="l01584"></a>01584 <span class="comment">   as an array index (in, e.g., `translate&#39;).  */</span>
<a name="l01585"></a>01585 <span class="preprocessor">#ifndef PATFETCH</span>
<a name="l01586"></a>01586 <span class="preprocessor"></span><span class="preprocessor"># define PATFETCH(c)                            \</span>
<a name="l01587"></a>01587 <span class="preprocessor">  do {if (p == pend) return REG_EEND;                   \</span>
<a name="l01588"></a>01588 <span class="preprocessor">    c = (unsigned char) *p++;                       \</span>
<a name="l01589"></a>01589 <span class="preprocessor">    if (translate) c = (unsigned char) translate[c];            \</span>
<a name="l01590"></a><a class="code" href="regex_8c.html#a95ed173b1e65d739ab2d15cc9b738ed9">01590</a> <span class="preprocessor">  } while (0)</span>
<a name="l01591"></a>01591 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01592"></a>01592 <span class="preprocessor"></span>
<a name="l01593"></a>01593 <span class="comment">/* Fetch the next character in the uncompiled pattern, with no</span>
<a name="l01594"></a>01594 <span class="comment">   translation.  */</span>
<a name="l01595"></a>01595 <span class="preprocessor">#define PATFETCH_RAW(c)                         \</span>
<a name="l01596"></a><a class="code" href="regex_8c.html#a77ae0460c3885ddc73f4544ef494e402">01596</a> <span class="preprocessor">  do {if (p == pend) return REG_EEND;                   \</span>
<a name="l01597"></a>01597 <span class="preprocessor">    c = (unsigned char) *p++;                       \</span>
<a name="l01598"></a>01598 <span class="preprocessor">  } while (0)</span>
<a name="l01599"></a>01599 <span class="preprocessor"></span>
<a name="l01600"></a>01600 <span class="comment">/* Go backwards one character in the pattern.  */</span>
<a name="l01601"></a>01601 <span class="preprocessor">#define PATUNFETCH p--</span>
<a name="l01602"></a>01602 <span class="preprocessor"></span>
<a name="l01603"></a>01603 
<a name="l01604"></a><a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">01604</a> <span class="comment">/* If `translate&#39; is non-null, return translate[D], else just D.  We</span>
<a name="l01605"></a>01605 <span class="comment">   cast the subscript to translate because some data is declared as</span>
<a name="l01606"></a>01606 <span class="comment">   `char *&#39;, to avoid warnings when a string constant is passed.  But</span>
<a name="l01607"></a>01607 <span class="comment">   when we use a character as a subscript we must make it unsigned.  */</span>
<a name="l01608"></a>01608 <span class="preprocessor">#ifndef TRANSLATE</span>
<a name="l01609"></a>01609 <span class="preprocessor"></span><span class="preprocessor"># define TRANSLATE(d) \</span>
<a name="l01610"></a>01610 <span class="preprocessor">  (translate ? (char) translate[(unsigned char) (d)] : (d))</span>
<a name="l01611"></a>01611 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01612"></a><a class="code" href="regex_8c.html#a598285922e2b62b38ee46ced0ebd9388">01612</a> <span class="preprocessor"></span>
<a name="l01613"></a>01613 
<a name="l01614"></a>01614 <span class="comment">/* Macros for outputting the compiled pattern into `buffer&#39;.  */</span>
<a name="l01615"></a><a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">01615</a> 
<a name="l01616"></a>01616 <span class="comment">/* If the buffer isn&#39;t allocated when it comes in, use this.  */</span>
<a name="l01617"></a>01617 <span class="preprocessor">#define INIT_BUF_SIZE  32</span>
<a name="l01618"></a>01618 <span class="preprocessor"></span>
<a name="l01619"></a>01619 <span class="comment">/* Make sure we have at least N more bytes of space in buffer.  */</span>
<a name="l01620"></a><a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">01620</a> <span class="preprocessor">#define GET_BUFFER_SPACE(n)                     \</span>
<a name="l01621"></a>01621 <span class="preprocessor">    while ((unsigned long) (b - bufp-&gt;buffer + (n)) &gt; bufp-&gt;allocated)  \</span>
<a name="l01622"></a>01622 <span class="preprocessor">      EXTEND_BUFFER ()</span>
<a name="l01623"></a>01623 <span class="preprocessor"></span>
<a name="l01624"></a>01624 <span class="comment">/* Make sure we have one more byte of buffer space and then add C to it.  */</span>
<a name="l01625"></a>01625 <span class="preprocessor">#define BUF_PUSH(c)                         \</span>
<a name="l01626"></a>01626 <span class="preprocessor">  do {                                  \</span>
<a name="l01627"></a>01627 <span class="preprocessor">    GET_BUFFER_SPACE (1);                       \</span>
<a name="l01628"></a><a class="code" href="regex_8c.html#a8cfee99226a6b73952701f9de12912b9">01628</a> <span class="preprocessor">    *b++ = (unsigned char) (c);                     \</span>
<a name="l01629"></a>01629 <span class="preprocessor">  } while (0)</span>
<a name="l01630"></a>01630 <span class="preprocessor"></span>
<a name="l01631"></a>01631 
<a name="l01632"></a>01632 <span class="comment">/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */</span>
<a name="l01633"></a>01633 <span class="preprocessor">#define BUF_PUSH_2(c1, c2)                      \</span>
<a name="l01634"></a>01634 <span class="preprocessor">  do {                                  \</span>
<a name="l01635"></a>01635 <span class="preprocessor">    GET_BUFFER_SPACE (2);                       \</span>
<a name="l01636"></a>01636 <span class="preprocessor">    *b++ = (unsigned char) (c1);                    \</span>
<a name="l01637"></a><a class="code" href="regex_8c.html#a38ceed7188d42c689f202512a1cb76fb">01637</a> <span class="preprocessor">    *b++ = (unsigned char) (c2);                    \</span>
<a name="l01638"></a>01638 <span class="preprocessor">  } while (0)</span>
<a name="l01639"></a>01639 <span class="preprocessor"></span>
<a name="l01640"></a>01640 
<a name="l01641"></a>01641 <span class="comment">/* As with BUF_PUSH_2, except for three bytes.  */</span>
<a name="l01642"></a>01642 <span class="preprocessor">#define BUF_PUSH_3(c1, c2, c3)                      \</span>
<a name="l01643"></a>01643 <span class="preprocessor">  do {                                  \</span>
<a name="l01644"></a>01644 <span class="preprocessor">    GET_BUFFER_SPACE (3);                       \</span>
<a name="l01645"></a>01645 <span class="preprocessor">    *b++ = (unsigned char) (c1);                    \</span>
<a name="l01646"></a>01646 <span class="preprocessor">    *b++ = (unsigned char) (c2);                    \</span>
<a name="l01647"></a>01647 <span class="preprocessor">    *b++ = (unsigned char) (c3);                    \</span>
<a name="l01648"></a><a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">01648</a> <span class="preprocessor">  } while (0)</span>
<a name="l01649"></a>01649 <span class="preprocessor"></span>
<a name="l01650"></a>01650 
<a name="l01651"></a>01651 <span class="comment">/* Store a jump with opcode OP at LOC to location TO.  We store a</span>
<a name="l01652"></a><a class="code" href="regex_8c.html#aa2aa60706e57e51cc9b54ff2c8cc38a2">01652</a> <span class="comment">   relative address offset by the three bytes the jump itself occupies.  */</span>
<a name="l01653"></a>01653 <span class="preprocessor">#define STORE_JUMP(op, loc, to) \</span>
<a name="l01654"></a>01654 <span class="preprocessor">  store_op1 (op, loc, (int) ((to) - (loc) - 3))</span>
<a name="l01655"></a>01655 <span class="preprocessor"></span>
<a name="l01656"></a><a class="code" href="regex_8c.html#a4c4a6f3c88794d7c99809e8ef5054614">01656</a> <span class="comment">/* Likewise, for a two-argument jump.  */</span>
<a name="l01657"></a>01657 <span class="preprocessor">#define STORE_JUMP2(op, loc, to, arg) \</span>
<a name="l01658"></a>01658 <span class="preprocessor">  store_op2 (op, loc, (int) ((to) - (loc) - 3), arg)</span>
<a name="l01659"></a>01659 <span class="preprocessor"></span>
<a name="l01660"></a><a class="code" href="regex_8c.html#a7dd59dc7da937c9308d1e7b9331aa916">01660</a> <span class="comment">/* Like `STORE_JUMP&#39;, but for inserting.  Assume `b&#39; is the buffer end.  */</span>
<a name="l01661"></a>01661 <span class="preprocessor">#define INSERT_JUMP(op, loc, to) \</span>
<a name="l01662"></a>01662 <span class="preprocessor">  insert_op1 (op, loc, (int) ((to) - (loc) - 3), b)</span>
<a name="l01663"></a>01663 <span class="preprocessor"></span>
<a name="l01664"></a>01664 <span class="comment">/* Like `STORE_JUMP2&#39;, but for inserting.  Assume `b&#39; is the buffer end.  */</span>
<a name="l01665"></a>01665 <span class="preprocessor">#define INSERT_JUMP2(op, loc, to, arg) \</span>
<a name="l01666"></a>01666 <span class="preprocessor">  insert_op2 (op, loc, (int) ((to) - (loc) - 3), arg, b)</span>
<a name="l01667"></a>01667 <span class="preprocessor"></span>
<a name="l01668"></a>01668 
<a name="l01669"></a>01669 <span class="comment">/* This is not an arbitrary limit: the arguments which represent offsets</span>
<a name="l01670"></a>01670 <span class="comment">   into the pattern are two bytes long.  So if 2^16 bytes turns out to</span>
<a name="l01671"></a>01671 <span class="comment">   be too small, many things would have to change.  */</span>
<a name="l01672"></a>01672 <span class="comment">/* Any other compiler which, like MSC, has allocation limit below 2^16</span>
<a name="l01673"></a>01673 <span class="comment">   bytes will have to use approach similar to what was done below for</span>
<a name="l01674"></a>01674 <span class="comment">   MSC and drop MAX_BUF_SIZE a bit.  Otherwise you may end up</span>
<a name="l01675"></a>01675 <span class="comment">   reallocating to 0 bytes.  Such thing is not going to work too well.</span>
<a name="l01676"></a>01676 <span class="comment">   You have been warned!!  */</span>
<a name="l01677"></a>01677 <span class="preprocessor">#if defined _MSC_VER  &amp;&amp; !defined _WIN32</span>
<a name="l01678"></a>01678 <span class="preprocessor"></span><span class="comment">/* Microsoft C 16-bit versions limit malloc to approx 65512 bytes.</span>
<a name="l01679"></a><a class="code" href="regex_8c.html#a7244ab798f58214294b580ca0bb48552">01679</a> <span class="comment">   The REALLOC define eliminates a flurry of conversion warnings,</span>
<a name="l01680"></a><a class="code" href="regex_8c.html#a17d9af8542e3c215a173f67977fb06aa">01680</a> <span class="comment">   but is not required. */</span>
<a name="l01681"></a>01681 <span class="preprocessor"># define MAX_BUF_SIZE  65500L</span>
<a name="l01682"></a>01682 <span class="preprocessor"></span><span class="preprocessor"># define REALLOC(p,s) realloc ((p), (size_t) (s))</span>
<a name="l01683"></a>01683 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l01684"></a>01684 <span class="preprocessor"></span><span class="preprocessor"># define MAX_BUF_SIZE (1L &lt;&lt; 16)</span>
<a name="l01685"></a>01685 <span class="preprocessor"></span><span class="preprocessor"># define REALLOC(p,s) realloc ((p), (s))</span>
<a name="l01686"></a>01686 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01687"></a><a class="code" href="regex_8c.html#a3ac8687e6929ebcea6fbcec3332b2fe8">01687</a> <span class="preprocessor"></span>
<a name="l01688"></a>01688 <span class="comment">/* Extend the buffer by twice its current size via realloc and</span>
<a name="l01689"></a>01689 <span class="comment">   reset the pointers that pointed into the old block to point to the</span>
<a name="l01690"></a>01690 <span class="comment">   correct places in the new one.  If extending the buffer results in it</span>
<a name="l01691"></a>01691 <span class="comment">   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */</span>
<a name="l01692"></a>01692 <span class="preprocessor">#define EXTEND_BUFFER()                         \</span>
<a name="l01693"></a>01693 <span class="preprocessor">  do {                                  \</span>
<a name="l01694"></a>01694 <span class="preprocessor">    unsigned char *old_buffer = bufp-&gt;buffer;               \</span>
<a name="l01695"></a>01695 <span class="preprocessor">    if (bufp-&gt;allocated == MAX_BUF_SIZE)                \</span>
<a name="l01696"></a>01696 <span class="preprocessor">      return REG_ESIZE;                         \</span>
<a name="l01697"></a>01697 <span class="preprocessor">    bufp-&gt;allocated &lt;&lt;= 1;                      \</span>
<a name="l01698"></a>01698 <span class="preprocessor">    if (bufp-&gt;allocated &gt; MAX_BUF_SIZE)                 \</span>
<a name="l01699"></a>01699 <span class="preprocessor">      bufp-&gt;allocated = MAX_BUF_SIZE;                   \</span>
<a name="l01700"></a>01700 <span class="preprocessor">    bufp-&gt;buffer = (unsigned char *) REALLOC (bufp-&gt;buffer, bufp-&gt;allocated);\</span>
<a name="l01701"></a>01701 <span class="preprocessor">    if (bufp-&gt;buffer == NULL)                       \</span>
<a name="l01702"></a>01702 <span class="preprocessor">      return REG_ESPACE;                        \</span>
<a name="l01703"></a>01703 <span class="preprocessor">    </span><span class="comment">/* If the buffer moved, move all the pointers into it.  */</span>      \
<a name="l01704"></a>01704     if (old_buffer != bufp-&gt;buffer)                 \
<a name="l01705"></a>01705       {                                 \
<a name="l01706"></a>01706         b = (b - old_buffer) + bufp-&gt;buffer;                \
<a name="l01707"></a>01707         begalt = (begalt - old_buffer) + bufp-&gt;buffer;          \
<a name="l01708"></a>01708         if (fixup_alt_jump)                     \
<a name="l01709"></a>01709           fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp-&gt;buffer;\
<a name="l01710"></a>01710         if (laststart)                          \
<a name="l01711"></a>01711           laststart = (laststart - old_buffer) + bufp-&gt;buffer;      \
<a name="l01712"></a>01712         if (pending_exact)                      \
<a name="l01713"></a>01713           pending_exact = (pending_exact - old_buffer) + bufp-&gt;buffer;  \
<a name="l01714"></a>01714       }                                 \
<a name="l01715"></a>01715   } while (0)
<a name="l01716"></a><a class="code" href="regex_8c.html#af1b3c3e22fe42152c272df6027b1bf4b">01716</a> 
<a name="l01717"></a>01717 
<a name="l01718"></a>01718 <span class="comment">/* Since we have one byte reserved for the register number argument to</span>
<a name="l01719"></a>01719 <span class="comment">   {start,stop}_memory, the maximum number of groups we can report</span>
<a name="l01720"></a><a class="code" href="regex_8c.html#a9e5a8ee5ece120e8e7b7c28eea3aa7cd">01720</a> <span class="comment">   things about is what fits in that byte.  */</span>
<a name="l01721"></a>01721 <span class="preprocessor">#define MAX_REGNUM 255</span>
<a name="l01722"></a>01722 <span class="preprocessor"></span>
<a name="l01723"></a>01723 <span class="comment">/* But patterns can have more than `MAX_REGNUM&#39; registers.  We just</span>
<a name="l01724"></a>01724 <span class="comment">   ignore the excess.  */</span>
<a name="l01725"></a>01725 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <a class="code" href="regex_8c.html#a9e5a8ee5ece120e8e7b7c28eea3aa7cd">regnum_t</a>;
<a name="l01726"></a>01726 
<a name="l01727"></a>01727 
<a name="l01728"></a><a class="code" href="regex_8c.html#a389ceb5c54c193f7b942544f6b0fe9b0">01728</a> <span class="comment">/* Macros for the compile stack.  */</span>
<a name="l01729"></a>01729 
<a name="l01730"></a><a class="code" href="structcompile__stack__elt__t.html">01730</a> <span class="comment">/* Since offsets can go either forwards or backwards, this type needs to</span>
<a name="l01731"></a>01731 <span class="comment">   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */</span>
<a name="l01732"></a><a class="code" href="structcompile__stack__elt__t.html#a66d64048ae2b32e73ba2b87fee8d7170">01732</a> <span class="comment">/* int may be not enough when sizeof(int) == 2.  */</span>
<a name="l01733"></a><a class="code" href="structcompile__stack__elt__t.html#a8b8a84a9e80b0af645dbba2ca5685fdd">01733</a> <span class="keyword">typedef</span> <span class="keywordtype">long</span> <a class="code" href="regex_8c.html#a389ceb5c54c193f7b942544f6b0fe9b0">pattern_offset_t</a>;
<a name="l01734"></a><a class="code" href="structcompile__stack__elt__t.html#a468489b4c865c185b34aaf5740593eff">01734</a> 
<a name="l01735"></a><a class="code" href="structcompile__stack__elt__t.html#aa0a2a34389f622cea20e08efff331168">01735</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l01736"></a><a class="code" href="structcompile__stack__elt__t.html#af027fbe8c196c2e4646ae6247094d1f8">01736</a> {
<a name="l01737"></a>01737   pattern_offset_t begalt_offset;
<a name="l01738"></a>01738   pattern_offset_t fixup_alt_jump;
<a name="l01739"></a>01739   pattern_offset_t inner_group_offset;
<a name="l01740"></a><a class="code" href="structcompile__stack__type.html">01740</a>   pattern_offset_t laststart_offset;
<a name="l01741"></a>01741   regnum_t regnum;
<a name="l01742"></a><a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">01742</a> } <a class="code" href="structcompile__stack__elt__t.html">compile_stack_elt_t</a>;
<a name="l01743"></a><a class="code" href="structcompile__stack__type.html#af5a43e711b027026ed61228f5c96ea71">01743</a> 
<a name="l01744"></a><a class="code" href="structcompile__stack__type.html#a45982ffa38800f8a9502da9708ec587c">01744</a> 
<a name="l01745"></a>01745 <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l01746"></a>01746 {
<a name="l01747"></a>01747   <a class="code" href="structcompile__stack__elt__t.html">compile_stack_elt_t</a> *stack;
<a name="l01748"></a><a class="code" href="regex_8c.html#a988583693c22a092825fc78426d22856">01748</a>   <span class="keywordtype">unsigned</span> size;
<a name="l01749"></a>01749   <span class="keywordtype">unsigned</span> avail;           <span class="comment">/* Offset of next open position.  */</span>
<a name="l01750"></a><a class="code" href="regex_8c.html#a7d96976a27d0138b3f189f1d1a663d68">01750</a> } <a class="code" href="structcompile__stack__type.html">compile_stack_type</a>;
<a name="l01751"></a><a class="code" href="regex_8c.html#a7e61c2eafa31a2bc3b4942c22e803e5c">01751</a> 
<a name="l01752"></a>01752 
<a name="l01753"></a>01753 <span class="preprocessor">#define INIT_COMPILE_STACK_SIZE 32</span>
<a name="l01754"></a><a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">01754</a> <span class="preprocessor"></span>
<a name="l01755"></a>01755 <span class="preprocessor">#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)</span>
<a name="l01756"></a>01756 <span class="preprocessor"></span><span class="preprocessor">#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)</span>
<a name="l01757"></a>01757 <span class="preprocessor"></span>
<a name="l01758"></a><a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">01758</a> <span class="comment">/* The next available element.  */</span>
<a name="l01759"></a>01759 <span class="preprocessor">#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])</span>
<a name="l01760"></a>01760 <span class="preprocessor"></span>
<a name="l01761"></a>01761 
<a name="l01762"></a>01762 <span class="comment">/* Set the bit for character C in a list.  */</span>
<a name="l01763"></a>01763 <span class="preprocessor">#define SET_LIST_BIT(c)                               \</span>
<a name="l01764"></a><a class="code" href="regex_8c.html#aa678aabaa579a244b2f36e8e452d977e">01764</a> <span class="preprocessor">  (b[((unsigned char) (c)) / BYTEWIDTH]               \</span>
<a name="l01765"></a>01765 <span class="preprocessor">   |= 1 &lt;&lt; (((unsigned char) c) % BYTEWIDTH))</span>
<a name="l01766"></a>01766 <span class="preprocessor"></span>
<a name="l01767"></a>01767 
<a name="l01768"></a>01768 <span class="comment">/* Get the next unsigned number in the uncompiled pattern.  */</span>
<a name="l01769"></a>01769 <span class="preprocessor">#define GET_UNSIGNED_NUMBER(num)                    \</span>
<a name="l01770"></a>01770 <span class="preprocessor">  { if (p != pend)                          \</span>
<a name="l01771"></a>01771 <span class="preprocessor">     {                                  \</span>
<a name="l01772"></a>01772 <span class="preprocessor">       PATFETCH (c);                            \</span>
<a name="l01773"></a>01773 <span class="preprocessor">       while (ISDIGIT (c))                      \</span>
<a name="l01774"></a>01774 <span class="preprocessor">         {                              \</span>
<a name="l01775"></a>01775 <span class="preprocessor">           if (num &lt; 0)                         \</span>
<a name="l01776"></a>01776 <span class="preprocessor">              num = 0;                          \</span>
<a name="l01777"></a>01777 <span class="preprocessor">           num = num * 10 + c - &#39;0&#39;;                    \</span>
<a name="l01778"></a>01778 <span class="preprocessor">           if (p == pend)                       \</span>
<a name="l01779"></a>01779 <span class="preprocessor">              break;                            \</span>
<a name="l01780"></a>01780 <span class="preprocessor">           PATFETCH (c);                        \</span>
<a name="l01781"></a>01781 <span class="preprocessor">         }                              \</span>
<a name="l01782"></a>01782 <span class="preprocessor">       }                                \</span>
<a name="l01783"></a>01783 <span class="preprocessor">    }</span>
<a name="l01784"></a>01784 <span class="preprocessor"></span>
<a name="l01785"></a>01785 <span class="preprocessor">#if defined _LIBC || WIDE_CHAR_SUPPORT</span>
<a name="l01786"></a>01786 <span class="preprocessor"></span><span class="comment">/* The GNU C library provides support for user-defined character classes</span>
<a name="l01787"></a>01787 <span class="comment">   and the functions from ISO C amendement 1.  */</span>
<a name="l01788"></a>01788 <span class="preprocessor"># ifdef CHARCLASS_NAME_MAX</span>
<a name="l01789"></a>01789 <span class="preprocessor"></span><span class="preprocessor">#  define CHAR_CLASS_MAX_LENGTH CHARCLASS_NAME_MAX</span>
<a name="l01790"></a>01790 <span class="preprocessor"></span><span class="preprocessor"># else</span>
<a name="l01791"></a>01791 <span class="preprocessor"></span><span class="comment">/* This shouldn&#39;t happen but some implementation might still have this</span>
<a name="l01792"></a>01792 <span class="comment">   problem.  Use a reasonable default value.  */</span>
<a name="l01793"></a>01793 <span class="preprocessor">#  define CHAR_CLASS_MAX_LENGTH 256</span>
<a name="l01794"></a>01794 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l01795"></a>01795 <span class="preprocessor"></span>
<a name="l01796"></a>01796 <span class="preprocessor"># ifdef _LIBC</span>
<a name="l01797"></a><a class="code" href="regex_8c.html#a060354a63e337df065f8cd869b3118f1">01797</a> <span class="preprocessor"></span><span class="preprocessor">#  define IS_CHAR_CLASS(string) __wctype (string)</span>
<a name="l01798"></a>01798 <span class="preprocessor"></span><span class="preprocessor"># else</span>
<a name="l01799"></a><a class="code" href="regex_8c.html#a8b3d83f068b179782bccaca23e3b20f7">01799</a> <span class="preprocessor"></span><span class="preprocessor">#  define IS_CHAR_CLASS(string) wctype (string)</span>
<a name="l01800"></a>01800 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l01801"></a>01801 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l01802"></a>01802 <span class="preprocessor"></span><span class="preprocessor"># define CHAR_CLASS_MAX_LENGTH  6 </span><span class="comment">/* Namely, `xdigit&#39;.  */</span>
<a name="l01803"></a>01803 
<a name="l01804"></a>01804 <span class="preprocessor"># define IS_CHAR_CLASS(string)                      \</span>
<a name="l01805"></a>01805 <span class="preprocessor">   (STREQ (string, &quot;alpha&quot;) || STREQ (string, &quot;upper&quot;)          \</span>
<a name="l01806"></a>01806 <span class="preprocessor">    || STREQ (string, &quot;lower&quot;) || STREQ (string, &quot;digit&quot;)       \</span>
<a name="l01807"></a>01807 <span class="preprocessor">    || STREQ (string, &quot;alnum&quot;) || STREQ (string, &quot;xdigit&quot;)      \</span>
<a name="l01808"></a>01808 <span class="preprocessor">    || STREQ (string, &quot;space&quot;) || STREQ (string, &quot;print&quot;)       \</span>
<a name="l01809"></a>01809 <span class="preprocessor">    || STREQ (string, &quot;punct&quot;) || STREQ (string, &quot;graph&quot;)       \</span>
<a name="l01810"></a>01810 <span class="preprocessor">    || STREQ (string, &quot;cntrl&quot;) || STREQ (string, &quot;blank&quot;))</span>
<a name="l01811"></a>01811 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01812"></a>01812 <span class="preprocessor"></span>
<a name="l01813"></a>01813 <span class="preprocessor">#ifndef MATCH_MAY_ALLOCATE</span>
<a name="l01814"></a>01814 <span class="preprocessor"></span>
<a name="l01815"></a>01815 <span class="comment">/* If we cannot allocate large objects within re_match_2_internal,</span>
<a name="l01816"></a>01816 <span class="comment">   we make the fail stack and register vectors global.</span>
<a name="l01817"></a>01817 <span class="comment">   The fail stack, we grow to the maximum size when a regexp</span>
<a name="l01818"></a>01818 <span class="comment">   is compiled.</span>
<a name="l01819"></a>01819 <span class="comment">   The register vectors, we adjust in size each time we</span>
<a name="l01820"></a>01820 <span class="comment">   compile a regexp, according to the number of registers it needs.  */</span>
<a name="l01821"></a>01821 
<a name="l01822"></a>01822 <span class="keyword">static</span> <a class="code" href="structfail__stack__type.html">fail_stack_type</a> fail_stack;
<a name="l01823"></a>01823 
<a name="l01824"></a>01824 <span class="comment">/* Size with which the following vectors are currently allocated.</span>
<a name="l01825"></a>01825 <span class="comment">   That is so we can make them bigger as needed,</span>
<a name="l01826"></a>01826 <span class="comment">   but never make them smaller.  */</span>
<a name="l01827"></a>01827 <span class="keyword">static</span> <span class="keywordtype">int</span> regs_allocated_size;
<a name="l01828"></a>01828 
<a name="l01829"></a>01829 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> **     regstart, **     regend;
<a name="l01830"></a>01830 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> ** old_regstart, ** old_regend;
<a name="l01831"></a>01831 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> **best_regstart, **best_regend;
<a name="l01832"></a>01832 <span class="keyword">static</span> <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info;
<a name="l01833"></a>01833 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> **reg_dummy;
<a name="l01834"></a>01834 <span class="keyword">static</span> <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info_dummy;
<a name="l01835"></a>01835 
<a name="l01836"></a>01836 <span class="comment">/* Make the register vectors big enough for NUM_REGS registers,</span>
<a name="l01837"></a>01837 <span class="comment">   but don&#39;t make them smaller.  */</span>
<a name="l01838"></a>01838 
<a name="l01839"></a>01839 <span class="keyword">static</span>
<a name="l01840"></a>01840 regex_grow_registers (num_regs)
<a name="l01841"></a>01841      int num_regs;
<a name="l01842"></a>01842 {
<a name="l01843"></a>01843   <span class="keywordflow">if</span> (num_regs &gt; regs_allocated_size)
<a name="l01844"></a>01844     {
<a name="l01845"></a>01845       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (regstart,     num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01846"></a>01846       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (regend,   num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01847"></a>01847       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (old_regstart, num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01848"></a>01848       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (old_regend,   num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01849"></a>01849       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (best_regstart, num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01850"></a>01850       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (best_regend,  num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01851"></a>01851       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (reg_info,     num_regs, <a class="code" href="unionregister__info__type.html">register_info_type</a>);
<a name="l01852"></a>01852       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (reg_dummy,    num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l01853"></a>01853       <a class="code" href="regex_8c.html#a12c694618416cdfd35b3eb0e7f99f7f6">RETALLOC_IF</a> (reg_info_dummy, num_regs, <a class="code" href="unionregister__info__type.html">register_info_type</a>);
<a name="l01854"></a>01854 
<a name="l01855"></a>01855       regs_allocated_size = num_regs;
<a name="l01856"></a>01856     }
<a name="l01857"></a>01857 }
<a name="l01858"></a>01858 
<a name="l01859"></a>01859 <span class="preprocessor">#endif </span><span class="comment">/* not MATCH_MAY_ALLOCATE */</span>
<a name="l01860"></a>01860 
<a name="l01861"></a>01861 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#a28dc5088ce179431d47162481e6c6540">group_in_compile_stack</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<a class="code" href="structcompile__stack__type.html">compile_stack_type</a>
<a name="l01862"></a>01862                          compile_stack,
<a name="l01863"></a>01863                          regnum_t regnum));
<a name="l01864"></a>01864 
<a name="l01865"></a>01865 <span class="comment">/* `regex_compile&#39; compiles PATTERN (of length SIZE) according to SYNTAX.</span>
<a name="l01866"></a>01866 <span class="comment">   Returns one of error codes defined in `regex.h&#39;, or zero for success.</span>
<a name="l01867"></a>01867 <span class="comment"></span>
<a name="l01868"></a>01868 <span class="comment">   Assumes the `allocated&#39; (and perhaps `buffer&#39;) and `translate&#39;</span>
<a name="l01869"></a>01869 <span class="comment">   fields are set in BUFP on entry.</span>
<a name="l01870"></a>01870 <span class="comment"></span>
<a name="l01871"></a>01871 <span class="comment">   If it succeeds, results are put in BUFP (if it returns an error, the</span>
<a name="l01872"></a>01872 <span class="comment">   contents of BUFP are undefined):</span>
<a name="l01873"></a>01873 <span class="comment">     `buffer&#39; is the compiled pattern;</span>
<a name="l01874"></a>01874 <span class="comment">     `syntax&#39; is set to SYNTAX;</span>
<a name="l01875"></a>01875 <span class="comment">     `used&#39; is set to the length of the compiled pattern;</span>
<a name="l01876"></a>01876 <span class="comment">     `fastmap_accurate&#39; is zero;</span>
<a name="l01877"></a>01877 <span class="comment">     `re_nsub&#39; is the number of subexpressions in PATTERN;</span>
<a name="l01878"></a>01878 <span class="comment">     `not_bol&#39; and `not_eol&#39; are zero;</span>
<a name="l01879"></a><a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">01879</a> <span class="comment"></span>
<a name="l01880"></a>01880 <span class="comment">   The `fastmap&#39; and `newline_anchor&#39; fields are neither</span>
<a name="l01881"></a>01881 <span class="comment">   examined nor set.  */</span>
<a name="l01882"></a>01882 
<a name="l01883"></a><a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">01883</a> <span class="comment">/* Return, freeing storage we allocated.  */</span>
<a name="l01884"></a>01884 <span class="preprocessor">#define FREE_STACK_RETURN(value)        \</span>
<a name="l01885"></a>01885 <span class="preprocessor">  return (free (compile_stack.stack), value)</span>
<a name="l01886"></a>01886 <span class="preprocessor"></span>
<a name="l01887"></a>01887 <span class="keyword">static</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a>
<a name="l01888"></a>01888 <a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">regex_compile</a> (pattern, size, syntax, bufp)
<a name="l01889"></a>01889      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *pattern;
<a name="l01890"></a>01890      <span class="keywordtype">size_t</span> size;
<a name="l01891"></a>01891      <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax;
<a name="l01892"></a>01892      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l01893"></a>01893 {
<a name="l01894"></a>01894   <span class="comment">/* We fetch characters from PATTERN here.  Even though PATTERN is</span>
<a name="l01895"></a>01895 <span class="comment">     `char *&#39; (i.e., signed), we declare these variables as unsigned, so</span>
<a name="l01896"></a>01896 <span class="comment">     they can be reliably used as array indices.  */</span>
<a name="l01897"></a>01897   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c, <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
<a name="l01898"></a>01898 
<a name="l01899"></a>01899   <span class="comment">/* A random temporary spot in PATTERN.  */</span>
<a name="l01900"></a>01900   <span class="keyword">const</span> <span class="keywordtype">char</span> *p1;
<a name="l01901"></a>01901 
<a name="l01902"></a>01902   <span class="comment">/* Points to the end of the buffer, where we should append.  */</span>
<a name="l01903"></a>01903   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>;
<a name="l01904"></a>01904 
<a name="l01905"></a>01905   <span class="comment">/* Keeps track of unclosed groups.  */</span>
<a name="l01906"></a>01906   <a class="code" href="structcompile__stack__type.html">compile_stack_type</a> compile_stack;
<a name="l01907"></a>01907 
<a name="l01908"></a>01908   <span class="comment">/* Points to the current (ending) position in the pattern.  */</span>
<a name="l01909"></a>01909   <span class="keyword">const</span> <span class="keywordtype">char</span> *p = pattern;
<a name="l01910"></a>01910   <span class="keyword">const</span> <span class="keywordtype">char</span> *pend = pattern + size;
<a name="l01911"></a>01911 
<a name="l01912"></a>01912   <span class="comment">/* How to translate the characters in the pattern.  */</span>
<a name="l01913"></a>01913   <a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a> translate = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a780f81d1ec1ebba869e138b5bc849658">translate</a>;
<a name="l01914"></a>01914 
<a name="l01915"></a>01915   <span class="comment">/* Address of the count-byte of the most recently inserted `exactn&#39;</span>
<a name="l01916"></a>01916 <span class="comment">     command.  This makes it possible to tell if a new exact-match</span>
<a name="l01917"></a>01917 <span class="comment">     character can be added to that command or if the character requires</span>
<a name="l01918"></a>01918 <span class="comment">     a new `exactn&#39; command.  */</span>
<a name="l01919"></a>01919   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pending_exact = 0;
<a name="l01920"></a>01920 
<a name="l01921"></a>01921   <span class="comment">/* Address of start of the most recently finished expression.</span>
<a name="l01922"></a>01922 <span class="comment">     This tells, e.g., postfix * where to find the start of its</span>
<a name="l01923"></a>01923 <span class="comment">     operand.  Reset at the beginning of groups and alternatives.  */</span>
<a name="l01924"></a>01924   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *laststart = 0;
<a name="l01925"></a>01925 
<a name="l01926"></a>01926   <span class="comment">/* Address of beginning of regexp, or inside of last group.  */</span>
<a name="l01927"></a>01927   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *begalt;
<a name="l01928"></a>01928 
<a name="l01929"></a>01929   <span class="comment">/* Place in the uncompiled pattern (i.e., the {) to</span>
<a name="l01930"></a>01930 <span class="comment">     which to go back if the interval is invalid.  */</span>
<a name="l01931"></a>01931   <span class="keyword">const</span> <span class="keywordtype">char</span> *beg_interval;
<a name="l01932"></a>01932 
<a name="l01933"></a>01933   <span class="comment">/* Address of the place where a forward jump should go to the end of</span>
<a name="l01934"></a>01934 <span class="comment">     the containing expression.  Each alternative of an `or&#39; -- except the</span>
<a name="l01935"></a>01935 <span class="comment">     last -- ends with a forward jump of this sort.  */</span>
<a name="l01936"></a>01936   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *fixup_alt_jump = 0;
<a name="l01937"></a>01937 
<a name="l01938"></a>01938   <span class="comment">/* Counts open-groups as they are encountered.  Remembered for the</span>
<a name="l01939"></a>01939 <span class="comment">     matching close-group on the compile stack, so the same register</span>
<a name="l01940"></a>01940 <span class="comment">     number is put in the stop_memory as the start_memory.  */</span>
<a name="l01941"></a>01941   regnum_t regnum = 0;
<a name="l01942"></a>01942 
<a name="l01943"></a>01943 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l01944"></a>01944 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;\nCompiling pattern: &quot;</span>);
<a name="l01945"></a>01945   <span class="keywordflow">if</span> (debug)
<a name="l01946"></a>01946     {
<a name="l01947"></a>01947       <span class="keywordtype">unsigned</span> debug_count;
<a name="l01948"></a>01948 
<a name="l01949"></a>01949       <span class="keywordflow">for</span> (debug_count = 0; debug_count &lt; size; debug_count++)
<a name="l01950"></a>01950         putchar (pattern[debug_count]);
<a name="l01951"></a>01951       putchar (<span class="charliteral">&#39;\n&#39;</span>);
<a name="l01952"></a>01952     }
<a name="l01953"></a>01953 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l01954"></a>01954 
<a name="l01955"></a>01955   <span class="comment">/* Initialize the compile stack.  */</span>
<a name="l01956"></a>01956   compile_stack.<a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">stack</a> = <a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">TALLOC</a> (<a class="code" href="regex_8c.html#a988583693c22a092825fc78426d22856">INIT_COMPILE_STACK_SIZE</a>, <a class="code" href="structcompile__stack__elt__t.html">compile_stack_elt_t</a>);
<a name="l01957"></a>01957   <span class="keywordflow">if</span> (compile_stack.<a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">stack</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01958"></a>01958     <span class="keywordflow">return</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>;
<a name="l01959"></a>01959 
<a name="l01960"></a>01960   compile_stack.<a class="code" href="structcompile__stack__type.html#af5a43e711b027026ed61228f5c96ea71">size</a> = <a class="code" href="regex_8c.html#a988583693c22a092825fc78426d22856">INIT_COMPILE_STACK_SIZE</a>;
<a name="l01961"></a>01961   compile_stack.<a class="code" href="structcompile__stack__type.html#a45982ffa38800f8a9502da9708ec587c">avail</a> = 0;
<a name="l01962"></a>01962 
<a name="l01963"></a>01963   <span class="comment">/* Initialize the pattern buffer.  */</span>
<a name="l01964"></a>01964   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#aa16e95a1befa7d5fd8eb89542fa065f8">syntax</a> = syntax;
<a name="l01965"></a>01965   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a837b026312b860e5485da6240b10d8f7">fastmap_accurate</a> = 0;
<a name="l01966"></a>01966   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a4a5d480a0891afbab92cf486a04e4a68">not_bol</a> = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a875954f4e64b585471f67b334d33799c">not_eol</a> = 0;
<a name="l01967"></a>01967 
<a name="l01968"></a>01968   <span class="comment">/* Set `used&#39; to zero, so that if we return an error, the pattern</span>
<a name="l01969"></a>01969 <span class="comment">     printer (for debugging) will think there&#39;s no pattern.  We reset it</span>
<a name="l01970"></a>01970 <span class="comment">     at the end.  */</span>
<a name="l01971"></a>01971   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a5c6bb086f4bfebee8aa4373c03bcc74b">used</a> = 0;
<a name="l01972"></a>01972 
<a name="l01973"></a>01973   <span class="comment">/* Always count groups, whether or not bufp-&gt;no_sub is set.  */</span>
<a name="l01974"></a>01974   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a703c2069a09bac7fa67de8871cb17d35">re_nsub</a> = 0;
<a name="l01975"></a>01975 
<a name="l01976"></a>01976 <span class="preprocessor">#if !defined emacs &amp;&amp; !defined SYNTAX_TABLE</span>
<a name="l01977"></a>01977 <span class="preprocessor"></span>  <span class="comment">/* Initialize the syntax table.  */</span>
<a name="l01978"></a>01978    <a class="code" href="regex_8c.html#a74a93df5c6415ecc4c83d7497bb52a9b">init_syntax_once</a> ();
<a name="l01979"></a>01979 <span class="preprocessor">#endif</span>
<a name="l01980"></a>01980 <span class="preprocessor"></span>
<a name="l01981"></a>01981   <span class="keywordflow">if</span> (bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a2947439f970297ce6f4a439867c0b5c7">allocated</a> == 0)
<a name="l01982"></a>01982     {
<a name="l01983"></a>01983       <span class="keywordflow">if</span> (bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>)
<a name="l01984"></a>01984     { <span class="comment">/* If zero allocated, but buffer is non-null, try to realloc</span>
<a name="l01985"></a>01985 <span class="comment">             enough space.  This loses if buffer&#39;s address is bogus, but</span>
<a name="l01986"></a>01986 <span class="comment">             that is the user&#39;s responsibility.  */</span>
<a name="l01987"></a>01987           <a class="code" href="regex_8c.html#ae247cb248fa0309737dce6bdfc3a6a3d">RETALLOC</a> (bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>, <a class="code" href="regex_8c.html#a598285922e2b62b38ee46ced0ebd9388">INIT_BUF_SIZE</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>);
<a name="l01988"></a>01988         }
<a name="l01989"></a>01989       <span class="keywordflow">else</span>
<a name="l01990"></a>01990         { <span class="comment">/* Caller did not allocate a buffer.  Do it for them.  */</span>
<a name="l01991"></a>01991           bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> = <a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">TALLOC</a> (<a class="code" href="regex_8c.html#a598285922e2b62b38ee46ced0ebd9388">INIT_BUF_SIZE</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>);
<a name="l01992"></a>01992         }
<a name="l01993"></a>01993       <span class="keywordflow">if</span> (!bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>);
<a name="l01994"></a>01994 
<a name="l01995"></a>01995       bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a2947439f970297ce6f4a439867c0b5c7">allocated</a> = <a class="code" href="regex_8c.html#a598285922e2b62b38ee46ced0ebd9388">INIT_BUF_SIZE</a>;
<a name="l01996"></a>01996     }
<a name="l01997"></a>01997 
<a name="l01998"></a>01998   begalt = b = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>;
<a name="l01999"></a>01999 
<a name="l02000"></a>02000   <span class="comment">/* Loop through the uncompiled pattern until we&#39;re at the end.  */</span>
<a name="l02001"></a>02001   <span class="keywordflow">while</span> (p != pend)
<a name="l02002"></a>02002     {
<a name="l02003"></a>02003       <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02004"></a>02004 
<a name="l02005"></a>02005       <span class="keywordflow">switch</span> (c)
<a name="l02006"></a>02006         {
<a name="l02007"></a>02007         <span class="keywordflow">case</span> <span class="charliteral">&#39;^&#39;</span>:
<a name="l02008"></a>02008           {
<a name="l02009"></a>02009             <span class="keywordflow">if</span> (   <span class="comment">/* If at start of pattern, it&#39;s an operator.  */</span>
<a name="l02010"></a>02010                    p == pattern + 1
<a name="l02011"></a>02011                    <span class="comment">/* If context independent, it&#39;s an operator.  */</span>
<a name="l02012"></a>02012                 || syntax &amp; <a class="code" href="regex-gnu_8h.html#a544bf7770a00eaaa62374a00fea08a2d">RE_CONTEXT_INDEP_ANCHORS</a>
<a name="l02013"></a>02013                    <span class="comment">/* Otherwise, depends on what&#39;s come before.  */</span>
<a name="l02014"></a>02014                 || <a class="code" href="regex_8c.html#a9fcec6851521f04076e51adfa274403c">at_begline_loc_p</a> (pattern, p, syntax))
<a name="l02015"></a>02015               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>);
<a name="l02016"></a>02016             <span class="keywordflow">else</span>
<a name="l02017"></a>02017               <span class="keywordflow">goto</span> normal_char;
<a name="l02018"></a>02018           }
<a name="l02019"></a>02019           <span class="keywordflow">break</span>;
<a name="l02020"></a>02020 
<a name="l02021"></a>02021 
<a name="l02022"></a>02022         <span class="keywordflow">case</span> <span class="charliteral">&#39;$&#39;</span>:
<a name="l02023"></a>02023           {
<a name="l02024"></a>02024             <span class="keywordflow">if</span> (   <span class="comment">/* If at end of pattern, it&#39;s an operator.  */</span>
<a name="l02025"></a>02025                    p == pend
<a name="l02026"></a>02026                    <span class="comment">/* If context independent, it&#39;s an operator.  */</span>
<a name="l02027"></a>02027                 || syntax &amp; <a class="code" href="regex-gnu_8h.html#a544bf7770a00eaaa62374a00fea08a2d">RE_CONTEXT_INDEP_ANCHORS</a>
<a name="l02028"></a>02028                    <span class="comment">/* Otherwise, depends on what&#39;s next.  */</span>
<a name="l02029"></a>02029                 || <a class="code" href="regex_8c.html#a85a9d04db18bdf4b65ea1113400613e4">at_endline_loc_p</a> (p, pend, syntax))
<a name="l02030"></a>02030                <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>);
<a name="l02031"></a>02031              <span class="keywordflow">else</span>
<a name="l02032"></a>02032                <span class="keywordflow">goto</span> normal_char;
<a name="l02033"></a>02033            }
<a name="l02034"></a>02034            <span class="keywordflow">break</span>;
<a name="l02035"></a>02035 
<a name="l02036"></a>02036 
<a name="l02037"></a>02037     <span class="keywordflow">case</span> <span class="charliteral">&#39;+&#39;</span>:
<a name="l02038"></a>02038         <span class="keywordflow">case</span> <span class="charliteral">&#39;?&#39;</span>:
<a name="l02039"></a>02039           <span class="keywordflow">if</span> ((syntax &amp; <a class="code" href="regex-gnu_8h.html#a94bdc20e1e83b401d2725902a642aa1e">RE_BK_PLUS_QM</a>)
<a name="l02040"></a>02040               || (syntax &amp; <a class="code" href="regex-gnu_8h.html#a0782bb31ad7160085c33f13dca7e369f">RE_LIMITED_OPS</a>))
<a name="l02041"></a>02041             <span class="keywordflow">goto</span> normal_char;
<a name="l02042"></a>02042         handle_plus:
<a name="l02043"></a>02043         <span class="keywordflow">case</span> <span class="charliteral">&#39;*&#39;</span>:
<a name="l02044"></a>02044           <span class="comment">/* If there is no previous pattern... */</span>
<a name="l02045"></a>02045           <span class="keywordflow">if</span> (!laststart)
<a name="l02046"></a>02046             {
<a name="l02047"></a>02047               <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#ae344a4e6129c8d549a88cd5f45e86adb">RE_CONTEXT_INVALID_OPS</a>)
<a name="l02048"></a>02048                 <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaf6eaf32c5250906aa304d801a227ccf9">REG_BADRPT</a>);
<a name="l02049"></a>02049               <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!(syntax &amp; <a class="code" href="regex-gnu_8h.html#aa96ee57fb2be85936dbb14f2b4c44b50">RE_CONTEXT_INDEP_OPS</a>))
<a name="l02050"></a>02050                 <span class="keywordflow">goto</span> normal_char;
<a name="l02051"></a>02051             }
<a name="l02052"></a>02052 
<a name="l02053"></a>02053           {
<a name="l02054"></a>02054             <span class="comment">/* Are we optimizing this jump?  */</span>
<a name="l02055"></a>02055             <span class="keywordtype">boolean</span> keep_string_p = <span class="keyword">false</span>;
<a name="l02056"></a>02056 
<a name="l02057"></a>02057             <span class="comment">/* 1 means zero (many) matches is allowed.  */</span>
<a name="l02058"></a>02058             <span class="keywordtype">char</span> zero_times_ok = 0, many_times_ok = 0;
<a name="l02059"></a>02059 
<a name="l02060"></a>02060             <span class="comment">/* If there is a sequence of repetition chars, collapse it</span>
<a name="l02061"></a>02061 <span class="comment">               down to just one (the right one).  We can&#39;t combine</span>
<a name="l02062"></a>02062 <span class="comment">               interval operators with these because of, e.g., `a{2}*&#39;,</span>
<a name="l02063"></a>02063 <span class="comment">               which should only match an even number of `a&#39;s.  */</span>
<a name="l02064"></a>02064 
<a name="l02065"></a>02065             <span class="keywordflow">for</span> (;;)
<a name="l02066"></a>02066               {
<a name="l02067"></a>02067                 zero_times_ok |= c != <span class="charliteral">&#39;+&#39;</span>;
<a name="l02068"></a>02068                 many_times_ok |= c != <span class="charliteral">&#39;?&#39;</span>;
<a name="l02069"></a>02069 
<a name="l02070"></a>02070                 <span class="keywordflow">if</span> (p == pend)
<a name="l02071"></a>02071                   <span class="keywordflow">break</span>;
<a name="l02072"></a>02072 
<a name="l02073"></a>02073                 <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02074"></a>02074 
<a name="l02075"></a>02075                 <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;*&#39;</span>
<a name="l02076"></a>02076                     || (!(syntax &amp; RE_BK_PLUS_QM) &amp;&amp; (c == <span class="charliteral">&#39;+&#39;</span> || c == <span class="charliteral">&#39;?&#39;</span>)))
<a name="l02077"></a>02077                   ;
<a name="l02078"></a>02078 
<a name="l02079"></a>02079                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (syntax &amp; RE_BK_PLUS_QM  &amp;&amp;  c == <span class="charliteral">&#39;\\&#39;</span>)
<a name="l02080"></a>02080                   {
<a name="l02081"></a>02081                     <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeabbae03a00b1f2359894b7fa4ad7efe83">REG_EESCAPE</a>);
<a name="l02082"></a>02082 
<a name="l02083"></a>02083                     <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c1);
<a name="l02084"></a>02084                     <span class="keywordflow">if</span> (!(c1 == <span class="charliteral">&#39;+&#39;</span> || c1 == <span class="charliteral">&#39;?&#39;</span>))
<a name="l02085"></a>02085                       {
<a name="l02086"></a>02086                         <a class="code" href="regex_8c.html#a77ae0460c3885ddc73f4544ef494e402">PATUNFETCH</a>;
<a name="l02087"></a>02087                         <a class="code" href="regex_8c.html#a77ae0460c3885ddc73f4544ef494e402">PATUNFETCH</a>;
<a name="l02088"></a>02088                         <span class="keywordflow">break</span>;
<a name="l02089"></a>02089                       }
<a name="l02090"></a>02090 
<a name="l02091"></a>02091                     c = c1;
<a name="l02092"></a>02092                   }
<a name="l02093"></a>02093                 <span class="keywordflow">else</span>
<a name="l02094"></a>02094                   {
<a name="l02095"></a>02095                     <a class="code" href="regex_8c.html#a77ae0460c3885ddc73f4544ef494e402">PATUNFETCH</a>;
<a name="l02096"></a>02096                     <span class="keywordflow">break</span>;
<a name="l02097"></a>02097                   }
<a name="l02098"></a>02098 
<a name="l02099"></a>02099                 <span class="comment">/* If we get here, we found another repeat character.  */</span>
<a name="l02100"></a>02100                }
<a name="l02101"></a>02101 
<a name="l02102"></a>02102             <span class="comment">/* Star, etc. applied to an empty pattern is equivalent</span>
<a name="l02103"></a>02103 <span class="comment">               to an empty pattern.  */</span>
<a name="l02104"></a>02104             <span class="keywordflow">if</span> (!laststart)
<a name="l02105"></a>02105               <span class="keywordflow">break</span>;
<a name="l02106"></a>02106 
<a name="l02107"></a>02107             <span class="comment">/* Now we know whether or not zero matches is allowed</span>
<a name="l02108"></a>02108 <span class="comment">               and also whether or not two or more matches is allowed.  */</span>
<a name="l02109"></a>02109             <span class="keywordflow">if</span> (many_times_ok)
<a name="l02110"></a>02110               { <span class="comment">/* More than one repetition is allowed, so put in at the</span>
<a name="l02111"></a>02111 <span class="comment">                   end a backward relative jump from `b&#39; to before the next</span>
<a name="l02112"></a>02112 <span class="comment">                   jump we&#39;re going to put in below (which jumps from</span>
<a name="l02113"></a>02113 <span class="comment">                   laststart to after this jump).</span>
<a name="l02114"></a>02114 <span class="comment"></span>
<a name="l02115"></a>02115 <span class="comment">                   But if we are at the `*&#39; in the exact sequence `.*\n&#39;,</span>
<a name="l02116"></a>02116 <span class="comment">                   insert an unconditional jump backwards to the .,</span>
<a name="l02117"></a>02117 <span class="comment">                   instead of the beginning of the loop.  This way we only</span>
<a name="l02118"></a>02118 <span class="comment">                   push a failure point once, instead of every time</span>
<a name="l02119"></a>02119 <span class="comment">                   through the loop.  */</span>
<a name="l02120"></a>02120                 <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p - 1 &gt; pattern);
<a name="l02121"></a>02121 
<a name="l02122"></a>02122                 <span class="comment">/* Allocate the space for the jump.  */</span>
<a name="l02123"></a>02123                 <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02124"></a>02124 
<a name="l02125"></a>02125                 <span class="comment">/* We know we are not at the first character of the pattern,</span>
<a name="l02126"></a>02126 <span class="comment">                   because laststart was nonzero.  And we&#39;ve already</span>
<a name="l02127"></a>02127 <span class="comment">                   incremented `p&#39;, by the way, to be the character after</span>
<a name="l02128"></a>02128 <span class="comment">                   the `*&#39;.  Do we have to do something analogous here</span>
<a name="l02129"></a>02129 <span class="comment">                   for null bytes, because of RE_DOT_NOT_NULL?  */</span>
<a name="l02130"></a>02130                 <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (*(p - 2)) == <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (<span class="charliteral">&#39;.&#39;</span>)
<a name="l02131"></a>02131             &amp;&amp; zero_times_ok
<a name="l02132"></a>02132                     &amp;&amp; p &lt; pend &amp;&amp; <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (*p) == <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (<span class="charliteral">&#39;\n&#39;</span>)
<a name="l02133"></a>02133                     &amp;&amp; !(syntax &amp; <a class="code" href="regex-gnu_8h.html#a405fe43871f2df60407b3c8272f4624c">RE_DOT_NEWLINE</a>))
<a name="l02134"></a>02134                   { <span class="comment">/* We have .*\n.  */</span>
<a name="l02135"></a>02135                     <a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">STORE_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>, b, laststart);
<a name="l02136"></a>02136                     keep_string_p = <span class="keyword">true</span>;
<a name="l02137"></a>02137                   }
<a name="l02138"></a>02138                 <span class="keywordflow">else</span>
<a name="l02139"></a>02139                   <span class="comment">/* Anything else.  */</span>
<a name="l02140"></a>02140                   <a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">STORE_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>, b, laststart - 3);
<a name="l02141"></a>02141 
<a name="l02142"></a>02142                 <span class="comment">/* We&#39;ve added more stuff to the buffer.  */</span>
<a name="l02143"></a>02143                 b += 3;
<a name="l02144"></a>02144               }
<a name="l02145"></a>02145 
<a name="l02146"></a>02146             <span class="comment">/* On failure, jump from laststart to b + 3, which will be the</span>
<a name="l02147"></a>02147 <span class="comment">               end of the buffer after this jump is inserted.  */</span>
<a name="l02148"></a>02148             <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02149"></a>02149             <a class="code" href="regex_8c.html#a4c4a6f3c88794d7c99809e8ef5054614">INSERT_JUMP</a> (keep_string_p ? <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">on_failure_keep_string_jump</a>
<a name="l02150"></a>02150                                        : <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>,
<a name="l02151"></a>02151                          laststart, b + 3);
<a name="l02152"></a>02152             pending_exact = 0;
<a name="l02153"></a>02153             b += 3;
<a name="l02154"></a>02154 
<a name="l02155"></a>02155             <span class="keywordflow">if</span> (!zero_times_ok)
<a name="l02156"></a>02156               {
<a name="l02157"></a>02157                 <span class="comment">/* At least one repetition is required, so insert a</span>
<a name="l02158"></a>02158 <span class="comment">                   `dummy_failure_jump&#39; before the initial</span>
<a name="l02159"></a>02159 <span class="comment">                   `on_failure_jump&#39; instruction of the loop. This</span>
<a name="l02160"></a>02160 <span class="comment">                   effects a skip over that instruction the first time</span>
<a name="l02161"></a>02161 <span class="comment">                   we hit that loop.  */</span>
<a name="l02162"></a>02162                 <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02163"></a>02163                 <a class="code" href="regex_8c.html#a4c4a6f3c88794d7c99809e8ef5054614">INSERT_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>, laststart, laststart + 6);
<a name="l02164"></a>02164                 b += 3;
<a name="l02165"></a>02165               }
<a name="l02166"></a>02166             }
<a name="l02167"></a>02167       <span class="keywordflow">break</span>;
<a name="l02168"></a>02168 
<a name="l02169"></a>02169 
<a name="l02170"></a>02170     <span class="keywordflow">case</span> <span class="charliteral">&#39;.&#39;</span>:
<a name="l02171"></a>02171           laststart = b;
<a name="l02172"></a>02172           <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">anychar</a>);
<a name="l02173"></a>02173           <span class="keywordflow">break</span>;
<a name="l02174"></a>02174 
<a name="l02175"></a>02175 
<a name="l02176"></a>02176         <span class="keywordflow">case</span> <span class="charliteral">&#39;[&#39;</span>:
<a name="l02177"></a>02177           {
<a name="l02178"></a>02178             <span class="keywordtype">boolean</span> had_char_class = <span class="keyword">false</span>;
<a name="l02179"></a>02179 
<a name="l02180"></a>02180             <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea88ca33166ecb752a908d3a28f2150123">REG_EBRACK</a>);
<a name="l02181"></a>02181 
<a name="l02182"></a>02182             <span class="comment">/* Ensure that we have enough space to push a charset: the</span>
<a name="l02183"></a>02183 <span class="comment">               opcode, the length count, and the bitset; 34 bytes in all.  */</span>
<a name="l02184"></a>02184         <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (34);
<a name="l02185"></a>02185 
<a name="l02186"></a>02186             laststart = b;
<a name="l02187"></a>02187 
<a name="l02188"></a>02188             <span class="comment">/* We test `*p == &#39;^&#39; twice, instead of using an if</span>
<a name="l02189"></a>02189 <span class="comment">               statement, so we only need one BUF_PUSH.  */</span>
<a name="l02190"></a>02190             <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (*p == <span class="charliteral">&#39;^&#39;</span> ? <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a> : <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>);
<a name="l02191"></a>02191             <span class="keywordflow">if</span> (*p == <span class="charliteral">&#39;^&#39;</span>)
<a name="l02192"></a>02192               p++;
<a name="l02193"></a>02193 
<a name="l02194"></a>02194             <span class="comment">/* Remember the first position in the bracket expression.  */</span>
<a name="l02195"></a>02195             p1 = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l02196"></a>02196 
<a name="l02197"></a>02197             <span class="comment">/* Push the number of bytes in the bitmap.  */</span>
<a name="l02198"></a>02198             <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> ((1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>) / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>);
<a name="l02199"></a>02199 
<a name="l02200"></a>02200             <span class="comment">/* Clear the whole map.  */</span>
<a name="l02201"></a>02201             memset (b, 0, (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>) / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>);
<a name="l02202"></a>02202 
<a name="l02203"></a>02203             <span class="comment">/* charset_not matches newline according to a syntax bit.  */</span>
<a name="l02204"></a>02204             <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) b[-2] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>
<a name="l02205"></a>02205                 &amp;&amp; (syntax &amp; <a class="code" href="regex-gnu_8h.html#aad6ec0e3f8f0bb3c53213e3f9ca77d8e">RE_HAT_LISTS_NOT_NEWLINE</a>))
<a name="l02206"></a>02206               <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (<span class="charliteral">&#39;\n&#39;</span>);
<a name="l02207"></a>02207 
<a name="l02208"></a>02208             <span class="comment">/* Read in characters and ranges, setting map bits.  */</span>
<a name="l02209"></a>02209             <span class="keywordflow">for</span> (;;)
<a name="l02210"></a>02210               {
<a name="l02211"></a>02211                 <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea88ca33166ecb752a908d3a28f2150123">REG_EBRACK</a>);
<a name="l02212"></a>02212 
<a name="l02213"></a>02213                 <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02214"></a>02214 
<a name="l02215"></a>02215                 <span class="comment">/* \ might escape characters inside [...] and [^...].  */</span>
<a name="l02216"></a>02216                 <span class="keywordflow">if</span> ((syntax &amp; <a class="code" href="regex-gnu_8h.html#a45356e84c34c98ed125ea5f75814ccc5">RE_BACKSLASH_ESCAPE_IN_LISTS</a>) &amp;&amp; c == <span class="charliteral">&#39;\\&#39;</span>)
<a name="l02217"></a>02217                   {
<a name="l02218"></a>02218                     <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeabbae03a00b1f2359894b7fa4ad7efe83">REG_EESCAPE</a>);
<a name="l02219"></a>02219 
<a name="l02220"></a>02220                     <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c1);
<a name="l02221"></a>02221                     <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (c1);
<a name="l02222"></a>02222                     <span class="keywordflow">continue</span>;
<a name="l02223"></a>02223                   }
<a name="l02224"></a>02224 
<a name="l02225"></a>02225                 <span class="comment">/* Could be the end of the bracket expression.  If it&#39;s</span>
<a name="l02226"></a>02226 <span class="comment">                   not (i.e., when the bracket expression is `[]&#39; so</span>
<a name="l02227"></a>02227 <span class="comment">                   far), the &#39;]&#39; character bit gets set way below.  */</span>
<a name="l02228"></a>02228                 <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;]&#39;</span> &amp;&amp; p != p1 + 1)
<a name="l02229"></a>02229                   <span class="keywordflow">break</span>;
<a name="l02230"></a>02230 
<a name="l02231"></a>02231                 <span class="comment">/* Look ahead to see if it&#39;s a range when the last thing</span>
<a name="l02232"></a>02232 <span class="comment">                   was a character class.  */</span>
<a name="l02233"></a>02233                 <span class="keywordflow">if</span> (had_char_class &amp;&amp; c == <span class="charliteral">&#39;-&#39;</span> &amp;&amp; *p != <span class="charliteral">&#39;]&#39;</span>)
<a name="l02234"></a>02234                   <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea16489a654c428b506103ccc746adda00">REG_ERANGE</a>);
<a name="l02235"></a>02235 
<a name="l02236"></a>02236                 <span class="comment">/* Look ahead to see if it&#39;s a range when the last thing</span>
<a name="l02237"></a>02237 <span class="comment">                   was a character: if this is a hyphen not at the</span>
<a name="l02238"></a>02238 <span class="comment">                   beginning or the end of a list, then it&#39;s the range</span>
<a name="l02239"></a>02239 <span class="comment">                   operator.  */</span>
<a name="l02240"></a>02240                 <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;-&#39;</span>
<a name="l02241"></a>02241                     &amp;&amp; !(p - 2 &gt;= pattern &amp;&amp; p[-2] == <span class="charliteral">&#39;[&#39;</span>)
<a name="l02242"></a>02242                     &amp;&amp; !(p - 3 &gt;= pattern &amp;&amp; p[-3] == <span class="charliteral">&#39;[&#39;</span> &amp;&amp; p[-2] == <span class="charliteral">&#39;^&#39;</span>)
<a name="l02243"></a>02243                     &amp;&amp; *p != <span class="charliteral">&#39;]&#39;</span>)
<a name="l02244"></a>02244                   {
<a name="l02245"></a>02245                     <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> ret
<a name="l02246"></a>02246                       = <a class="code" href="regex_8c.html#a06b0c1ae265d6791c041df0ddf6d7ff6">compile_range</a> (&amp;p, pend, translate, syntax, b);
<a name="l02247"></a>02247                     <span class="keywordflow">if</span> (ret != <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a>) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (ret);
<a name="l02248"></a>02248                   }
<a name="l02249"></a>02249 
<a name="l02250"></a>02250                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p[0] == <span class="charliteral">&#39;-&#39;</span> &amp;&amp; p[1] != <span class="charliteral">&#39;]&#39;</span>)
<a name="l02251"></a>02251                   { <span class="comment">/* This handles ranges made up of characters only.  */</span>
<a name="l02252"></a>02252                     <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> ret;
<a name="l02253"></a>02253 
<a name="l02254"></a>02254             <span class="comment">/* Move past the `-&#39;.  */</span>
<a name="l02255"></a>02255                     <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c1);
<a name="l02256"></a>02256 
<a name="l02257"></a>02257                     ret = <a class="code" href="regex_8c.html#a06b0c1ae265d6791c041df0ddf6d7ff6">compile_range</a> (&amp;p, pend, translate, syntax, b);
<a name="l02258"></a>02258                     <span class="keywordflow">if</span> (ret != <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a>) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (ret);
<a name="l02259"></a>02259                   }
<a name="l02260"></a>02260 
<a name="l02261"></a>02261                 <span class="comment">/* See if we&#39;re at the beginning of a possible character</span>
<a name="l02262"></a>02262 <span class="comment">                   class.  */</span>
<a name="l02263"></a>02263 
<a name="l02264"></a>02264                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a9650e76532d0ae7c8cc3ea5eb6dee6e7">RE_CHAR_CLASSES</a> &amp;&amp; c == <span class="charliteral">&#39;[&#39;</span> &amp;&amp; *p == <span class="charliteral">&#39;:&#39;</span>)
<a name="l02265"></a>02265                   { <span class="comment">/* Leave room for the null.  */</span>
<a name="l02266"></a>02266                     <span class="keywordtype">char</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[<a class="code" href="regex_8c.html#a060354a63e337df065f8cd869b3118f1">CHAR_CLASS_MAX_LENGTH</a> + 1];
<a name="l02267"></a>02267 
<a name="l02268"></a>02268                     <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02269"></a>02269                     c1 = 0;
<a name="l02270"></a>02270 
<a name="l02271"></a>02271                     <span class="comment">/* If pattern is `[[:&#39;.  */</span>
<a name="l02272"></a>02272                     <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea88ca33166ecb752a908d3a28f2150123">REG_EBRACK</a>);
<a name="l02273"></a>02273 
<a name="l02274"></a>02274                     <span class="keywordflow">for</span> (;;)
<a name="l02275"></a>02275                       {
<a name="l02276"></a>02276                         <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02277"></a>02277                         <span class="keywordflow">if</span> ((c == <span class="charliteral">&#39;:&#39;</span> &amp;&amp; *p == <span class="charliteral">&#39;]&#39;</span>) || p == pend)
<a name="l02278"></a>02278                           <span class="keywordflow">break</span>;
<a name="l02279"></a>02279             <span class="keywordflow">if</span> (c1 &lt; <a class="code" href="regex_8c.html#a060354a63e337df065f8cd869b3118f1">CHAR_CLASS_MAX_LENGTH</a>)
<a name="l02280"></a>02280               str[c1++] = c;
<a name="l02281"></a>02281             <span class="keywordflow">else</span>
<a name="l02282"></a>02282               <span class="comment">/* This is in any case an invalid class name.  */</span>
<a name="l02283"></a>02283               str[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l02284"></a>02284                       }
<a name="l02285"></a>02285                     str[c1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l02286"></a>02286 
<a name="l02287"></a>02287                     <span class="comment">/* If isn&#39;t a word bracketed by `[:&#39; and `:]&#39;:</span>
<a name="l02288"></a>02288 <span class="comment">                       undo the ending character, the letters, and leave</span>
<a name="l02289"></a>02289 <span class="comment">                       the leading `:&#39; and `[&#39; (but set bits for them).  */</span>
<a name="l02290"></a>02290                     <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;:&#39;</span> &amp;&amp; *p == <span class="charliteral">&#39;]&#39;</span>)
<a name="l02291"></a>02291                       {
<a name="l02292"></a>02292 <span class="preprocessor">#if defined _LIBC || WIDE_CHAR_SUPPORT</span>
<a name="l02293"></a>02293 <span class="preprocessor"></span>                        <span class="keywordtype">boolean</span> is_lower = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;lower&quot;</span>);
<a name="l02294"></a>02294                         <span class="keywordtype">boolean</span> is_upper = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;upper&quot;</span>);
<a name="l02295"></a>02295             wctype_t wt;
<a name="l02296"></a>02296                         <span class="keywordtype">int</span> ch;
<a name="l02297"></a>02297 
<a name="l02298"></a>02298             wt = <a class="code" href="regex_8c.html#a8b3d83f068b179782bccaca23e3b20f7">IS_CHAR_CLASS</a> (str);
<a name="l02299"></a>02299             <span class="keywordflow">if</span> (wt == 0)
<a name="l02300"></a>02300               <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea9a04e1101d24afa61896779ff846f837">REG_ECTYPE</a>);
<a name="l02301"></a>02301 
<a name="l02302"></a>02302                         <span class="comment">/* Throw away the ] at the end of the character</span>
<a name="l02303"></a>02303 <span class="comment">                           class.  */</span>
<a name="l02304"></a>02304                         <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02305"></a>02305 
<a name="l02306"></a>02306                         <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea88ca33166ecb752a908d3a28f2150123">REG_EBRACK</a>);
<a name="l02307"></a>02307 
<a name="l02308"></a>02308                         <span class="keywordflow">for</span> (ch = 0; ch &lt; 1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>; ++ch)
<a name="l02309"></a>02309               {
<a name="l02310"></a>02310 <span class="preprocessor"># ifdef _LIBC</span>
<a name="l02311"></a>02311 <span class="preprocessor"></span>                <span class="keywordflow">if</span> (__iswctype (__btowc (ch), wt))
<a name="l02312"></a>02312                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02313"></a>02313 <span class="preprocessor"># else</span>
<a name="l02314"></a>02314 <span class="preprocessor"></span>                <span class="keywordflow">if</span> (iswctype (btowc (ch), wt))
<a name="l02315"></a>02315                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02316"></a>02316 <span class="preprocessor"># endif</span>
<a name="l02317"></a>02317 <span class="preprocessor"></span>
<a name="l02318"></a>02318                 <span class="keywordflow">if</span> (translate &amp;&amp; (is_upper || is_lower)
<a name="l02319"></a>02319                 &amp;&amp; (<a class="code" href="regex_8c.html#a2bfd4177f165a5968d95960d42578ab6">ISUPPER</a> (ch) || <a class="code" href="regex_8c.html#acb1e7358e00baea87b36a635fdb6970f">ISLOWER</a> (ch)))
<a name="l02320"></a>02320                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02321"></a>02321               }
<a name="l02322"></a>02322 
<a name="l02323"></a>02323                         had_char_class = <span class="keyword">true</span>;
<a name="l02324"></a>02324 <span class="preprocessor">#else</span>
<a name="l02325"></a>02325 <span class="preprocessor"></span>                        <span class="keywordtype">int</span> ch;
<a name="l02326"></a>02326                         <span class="keywordtype">boolean</span> is_alnum = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;alnum&quot;</span>);
<a name="l02327"></a>02327                         <span class="keywordtype">boolean</span> is_alpha = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;alpha&quot;</span>);
<a name="l02328"></a>02328                         <span class="keywordtype">boolean</span> is_blank = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;blank&quot;</span>);
<a name="l02329"></a>02329                         <span class="keywordtype">boolean</span> is_cntrl = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;cntrl&quot;</span>);
<a name="l02330"></a>02330                         <span class="keywordtype">boolean</span> is_digit = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;digit&quot;</span>);
<a name="l02331"></a>02331                         <span class="keywordtype">boolean</span> is_graph = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;graph&quot;</span>);
<a name="l02332"></a>02332                         <span class="keywordtype">boolean</span> is_lower = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;lower&quot;</span>);
<a name="l02333"></a>02333                         <span class="keywordtype">boolean</span> is_print = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;print&quot;</span>);
<a name="l02334"></a>02334                         <span class="keywordtype">boolean</span> is_punct = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;punct&quot;</span>);
<a name="l02335"></a>02335                         <span class="keywordtype">boolean</span> is_space = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;space&quot;</span>);
<a name="l02336"></a>02336                         <span class="keywordtype">boolean</span> is_upper = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;upper&quot;</span>);
<a name="l02337"></a>02337                         <span class="keywordtype">boolean</span> is_xdigit = <a class="code" href="regex_8c.html#ab42511b5b7bf70ad31b13c44469d117f">STREQ</a> (str, <span class="stringliteral">&quot;xdigit&quot;</span>);
<a name="l02338"></a>02338 
<a name="l02339"></a>02339                         <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a8b3d83f068b179782bccaca23e3b20f7">IS_CHAR_CLASS</a> (str))
<a name="l02340"></a>02340               <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea9a04e1101d24afa61896779ff846f837">REG_ECTYPE</a>);
<a name="l02341"></a>02341 
<a name="l02342"></a>02342                         <span class="comment">/* Throw away the ] at the end of the character</span>
<a name="l02343"></a>02343 <span class="comment">                           class.  */</span>
<a name="l02344"></a>02344                         <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02345"></a>02345 
<a name="l02346"></a>02346                         <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea88ca33166ecb752a908d3a28f2150123">REG_EBRACK</a>);
<a name="l02347"></a>02347 
<a name="l02348"></a>02348                         <span class="keywordflow">for</span> (ch = 0; ch &lt; 1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>; ch++)
<a name="l02349"></a>02349                           {
<a name="l02350"></a>02350                 <span class="comment">/* This was split into 3 if&#39;s to</span>
<a name="l02351"></a>02351 <span class="comment">                   avoid an arbitrary limit in some compiler.  */</span>
<a name="l02352"></a>02352                             <span class="keywordflow">if</span> (   (is_alnum  &amp;&amp; <a class="code" href="regex_8c.html#a8c0056118f585fa052e0f76e3198db6a">ISALNUM</a> (ch))
<a name="l02353"></a>02353                                 || (is_alpha  &amp;&amp; <a class="code" href="regex_8c.html#afe0bf9496b5e0ecf253fb86072ee7ecf">ISALPHA</a> (ch))
<a name="l02354"></a>02354                                 || (is_blank  &amp;&amp; <a class="code" href="regex_8c.html#a3773b51bd1f0ba67a1d8f05923c87d4c">ISBLANK</a> (ch))
<a name="l02355"></a>02355                                 || (is_cntrl  &amp;&amp; <a class="code" href="regex_8c.html#a5079e89f60f6f44944ea9dc3b59f14d5">ISCNTRL</a> (ch)))
<a name="l02356"></a>02356                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02357"></a>02357                 <span class="keywordflow">if</span> (   (is_digit  &amp;&amp; <a class="code" href="regex_8c.html#ab615ddd0d086b80219cd7e0345d6b5ef">ISDIGIT</a> (ch))
<a name="l02358"></a>02358                                 || (is_graph  &amp;&amp; <a class="code" href="regex_8c.html#a31ddd189071199427310ccde9cedfb71">ISGRAPH</a> (ch))
<a name="l02359"></a>02359                                 || (is_lower  &amp;&amp; <a class="code" href="regex_8c.html#acb1e7358e00baea87b36a635fdb6970f">ISLOWER</a> (ch))
<a name="l02360"></a>02360                                 || (is_print  &amp;&amp; <a class="code" href="regex_8c.html#af65108a54093e5c7220dfc15f6cd9db1">ISPRINT</a> (ch)))
<a name="l02361"></a>02361                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02362"></a>02362                 <span class="keywordflow">if</span> (   (is_punct  &amp;&amp; <a class="code" href="regex_8c.html#a165393454eb1019f3f77cedba52e23de">ISPUNCT</a> (ch))
<a name="l02363"></a>02363                                 || (is_space  &amp;&amp; <a class="code" href="regex_8c.html#ae8cdc17e44905c826bddf416b7bf621c">ISSPACE</a> (ch))
<a name="l02364"></a>02364                                 || (is_upper  &amp;&amp; <a class="code" href="regex_8c.html#a2bfd4177f165a5968d95960d42578ab6">ISUPPER</a> (ch))
<a name="l02365"></a>02365                                 || (is_xdigit &amp;&amp; <a class="code" href="regex_8c.html#a419f06aab80b7c8eb3aaf4dd70463731">ISXDIGIT</a> (ch)))
<a name="l02366"></a>02366                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02367"></a>02367                 <span class="keywordflow">if</span> (   translate &amp;&amp; (is_upper || is_lower)
<a name="l02368"></a>02368                 &amp;&amp; (<a class="code" href="regex_8c.html#a2bfd4177f165a5968d95960d42578ab6">ISUPPER</a> (ch) || <a class="code" href="regex_8c.html#acb1e7358e00baea87b36a635fdb6970f">ISLOWER</a> (ch)))
<a name="l02369"></a>02369                   <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (ch);
<a name="l02370"></a>02370                           }
<a name="l02371"></a>02371                         had_char_class = <span class="keyword">true</span>;
<a name="l02372"></a>02372 <span class="preprocessor">#endif  </span><span class="comment">/* libc || wctype.h */</span>
<a name="l02373"></a>02373                       }
<a name="l02374"></a>02374                     <span class="keywordflow">else</span>
<a name="l02375"></a>02375                       {
<a name="l02376"></a>02376                         c1++;
<a name="l02377"></a>02377                         <span class="keywordflow">while</span> (c1--)
<a name="l02378"></a>02378                           <a class="code" href="regex_8c.html#a77ae0460c3885ddc73f4544ef494e402">PATUNFETCH</a>;
<a name="l02379"></a>02379                         <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (<span class="charliteral">&#39;[&#39;</span>);
<a name="l02380"></a>02380                         <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (<span class="charliteral">&#39;:&#39;</span>);
<a name="l02381"></a>02381                         had_char_class = <span class="keyword">false</span>;
<a name="l02382"></a>02382                       }
<a name="l02383"></a>02383                   }
<a name="l02384"></a>02384                 <span class="keywordflow">else</span>
<a name="l02385"></a>02385                   {
<a name="l02386"></a>02386                     had_char_class = <span class="keyword">false</span>;
<a name="l02387"></a>02387                     <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (c);
<a name="l02388"></a>02388                   }
<a name="l02389"></a>02389               }
<a name="l02390"></a>02390 
<a name="l02391"></a>02391             <span class="comment">/* Discard any (non)matching list bytes that are all 0 at the</span>
<a name="l02392"></a>02392 <span class="comment">               end of the map.  Decrease the map-length byte too.  */</span>
<a name="l02393"></a>02393             <span class="keywordflow">while</span> ((<span class="keywordtype">int</span>) b[-1] &gt; 0 &amp;&amp; b[b[-1] - 1] == 0)
<a name="l02394"></a>02394               b[-1]--;
<a name="l02395"></a>02395             b += b[-1];
<a name="l02396"></a>02396           }
<a name="l02397"></a>02397           <span class="keywordflow">break</span>;
<a name="l02398"></a>02398 
<a name="l02399"></a>02399 
<a name="l02400"></a>02400     <span class="keywordflow">case</span> <span class="charliteral">&#39;(&#39;</span>:
<a name="l02401"></a>02401           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#af2f17f18a9c771c91d963f466f559e68">RE_NO_BK_PARENS</a>)
<a name="l02402"></a>02402             <span class="keywordflow">goto</span> handle_open;
<a name="l02403"></a>02403           <span class="keywordflow">else</span>
<a name="l02404"></a>02404             <span class="keywordflow">goto</span> normal_char;
<a name="l02405"></a>02405 
<a name="l02406"></a>02406 
<a name="l02407"></a>02407         <span class="keywordflow">case</span> <span class="charliteral">&#39;)&#39;</span>:
<a name="l02408"></a>02408           <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_PARENS)
<a name="l02409"></a>02409             <span class="keywordflow">goto</span> handle_close;
<a name="l02410"></a>02410           <span class="keywordflow">else</span>
<a name="l02411"></a>02411             <span class="keywordflow">goto</span> normal_char;
<a name="l02412"></a>02412 
<a name="l02413"></a>02413 
<a name="l02414"></a>02414         <span class="keywordflow">case</span> <span class="charliteral">&#39;\n&#39;</span>:
<a name="l02415"></a>02415           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a7a69bf315a61cb9d674332a6a5d64819">RE_NEWLINE_ALT</a>)
<a name="l02416"></a>02416             <span class="keywordflow">goto</span> handle_alt;
<a name="l02417"></a>02417           <span class="keywordflow">else</span>
<a name="l02418"></a>02418             <span class="keywordflow">goto</span> normal_char;
<a name="l02419"></a>02419 
<a name="l02420"></a>02420 
<a name="l02421"></a>02421     <span class="keywordflow">case</span> <span class="charliteral">&#39;|&#39;</span>:
<a name="l02422"></a>02422           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a834997e69569c41f0394d6ee120051a0">RE_NO_BK_VBAR</a>)
<a name="l02423"></a>02423             <span class="keywordflow">goto</span> handle_alt;
<a name="l02424"></a>02424           <span class="keywordflow">else</span>
<a name="l02425"></a>02425             <span class="keywordflow">goto</span> normal_char;
<a name="l02426"></a>02426 
<a name="l02427"></a>02427 
<a name="l02428"></a>02428         <span class="keywordflow">case</span> <span class="charliteral">&#39;{&#39;</span>:
<a name="l02429"></a>02429            <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a377bd32fc62adedc890f74cd18845aa9">RE_INTERVALS</a> &amp;&amp; syntax &amp; <a class="code" href="regex-gnu_8h.html#a924b9782a779a0db37e3c858967d60af">RE_NO_BK_BRACES</a>)
<a name="l02430"></a>02430              <span class="keywordflow">goto</span> handle_interval;
<a name="l02431"></a>02431            <span class="keywordflow">else</span>
<a name="l02432"></a>02432              <span class="keywordflow">goto</span> normal_char;
<a name="l02433"></a>02433 
<a name="l02434"></a>02434 
<a name="l02435"></a>02435         <span class="keywordflow">case</span> <span class="charliteral">&#39;\\&#39;</span>:
<a name="l02436"></a>02436           <span class="keywordflow">if</span> (p == pend) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeabbae03a00b1f2359894b7fa4ad7efe83">REG_EESCAPE</a>);
<a name="l02437"></a>02437 
<a name="l02438"></a>02438           <span class="comment">/* Do not translate the character after the \, so that we can</span>
<a name="l02439"></a>02439 <span class="comment">             distinguish, e.g., \B from \b, even if we normally would</span>
<a name="l02440"></a>02440 <span class="comment">             translate, e.g., B to b.  */</span>
<a name="l02441"></a>02441           <a class="code" href="regex_8c.html#a95ed173b1e65d739ab2d15cc9b738ed9">PATFETCH_RAW</a> (c);
<a name="l02442"></a>02442 
<a name="l02443"></a>02443           <span class="keywordflow">switch</span> (c)
<a name="l02444"></a>02444             {
<a name="l02445"></a>02445             <span class="keywordflow">case</span> <span class="charliteral">&#39;(&#39;</span>:
<a name="l02446"></a>02446               <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_PARENS)
<a name="l02447"></a>02447                 <span class="keywordflow">goto</span> normal_backslash;
<a name="l02448"></a>02448 
<a name="l02449"></a>02449             handle_open:
<a name="l02450"></a>02450               bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a703c2069a09bac7fa67de8871cb17d35">re_nsub</a>++;
<a name="l02451"></a>02451               regnum++;
<a name="l02452"></a>02452 
<a name="l02453"></a>02453               <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a7e61c2eafa31a2bc3b4942c22e803e5c">COMPILE_STACK_FULL</a>)
<a name="l02454"></a>02454                 {
<a name="l02455"></a>02455                   <a class="code" href="regex_8c.html#ae247cb248fa0309737dce6bdfc3a6a3d">RETALLOC</a> (compile_stack.<a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">stack</a>, compile_stack.<a class="code" href="structcompile__stack__type.html#af5a43e711b027026ed61228f5c96ea71">size</a> &lt;&lt; 1,
<a name="l02456"></a>02456                             <a class="code" href="structcompile__stack__elt__t.html">compile_stack_elt_t</a>);
<a name="l02457"></a>02457                   <span class="keywordflow">if</span> (compile_stack.<a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">stack</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) <span class="keywordflow">return</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>;
<a name="l02458"></a>02458 
<a name="l02459"></a>02459                   compile_stack.<a class="code" href="structcompile__stack__type.html#af5a43e711b027026ed61228f5c96ea71">size</a> &lt;&lt;= 1;
<a name="l02460"></a>02460                 }
<a name="l02461"></a>02461 
<a name="l02462"></a>02462               <span class="comment">/* These are the values to restore when we hit end of this</span>
<a name="l02463"></a>02463 <span class="comment">                 group.  They are all relative offsets, so that if the</span>
<a name="l02464"></a>02464 <span class="comment">                 whole pattern moves because of realloc, they will still</span>
<a name="l02465"></a>02465 <span class="comment">                 be valid.  */</span>
<a name="l02466"></a>02466               <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.begalt_offset = begalt - bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>;
<a name="l02467"></a>02467               <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.fixup_alt_jump
<a name="l02468"></a>02468                 = fixup_alt_jump ? fixup_alt_jump - bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + 1 : 0;
<a name="l02469"></a>02469               <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.laststart_offset = b - bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>;
<a name="l02470"></a>02470               <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.regnum = regnum;
<a name="l02471"></a>02471 
<a name="l02472"></a>02472               <span class="comment">/* We will eventually replace the 0 with the number of</span>
<a name="l02473"></a>02473 <span class="comment">                 groups inner to this one.  But do not push a</span>
<a name="l02474"></a>02474 <span class="comment">                 start_memory for groups beyond the last one we can</span>
<a name="l02475"></a>02475 <span class="comment">                 represent in the compiled pattern.  */</span>
<a name="l02476"></a>02476               <span class="keywordflow">if</span> (regnum &lt;= <a class="code" href="regex_8c.html#af1b3c3e22fe42152c272df6027b1bf4b">MAX_REGNUM</a>)
<a name="l02477"></a>02477                 {
<a name="l02478"></a>02478                   <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.inner_group_offset = b - bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + 2;
<a name="l02479"></a>02479                   <a class="code" href="regex_8c.html#a38ceed7188d42c689f202512a1cb76fb">BUF_PUSH_3</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>, regnum, 0);
<a name="l02480"></a>02480                 }
<a name="l02481"></a>02481 
<a name="l02482"></a>02482               compile_stack.<a class="code" href="structcompile__stack__type.html#a45982ffa38800f8a9502da9708ec587c">avail</a>++;
<a name="l02483"></a>02483 
<a name="l02484"></a>02484               fixup_alt_jump = 0;
<a name="l02485"></a>02485               laststart = 0;
<a name="l02486"></a>02486               begalt = b;
<a name="l02487"></a>02487           <span class="comment">/* If we&#39;ve reached MAX_REGNUM groups, then this open</span>
<a name="l02488"></a>02488 <span class="comment">         won&#39;t actually generate any code, so we&#39;ll have to</span>
<a name="l02489"></a>02489 <span class="comment">         clear pending_exact explicitly.  */</span>
<a name="l02490"></a>02490           pending_exact = 0;
<a name="l02491"></a>02491               <span class="keywordflow">break</span>;
<a name="l02492"></a>02492 
<a name="l02493"></a>02493 
<a name="l02494"></a>02494             <span class="keywordflow">case</span> <span class="charliteral">&#39;)&#39;</span>:
<a name="l02495"></a>02495               <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_PARENS) <span class="keywordflow">goto</span> normal_backslash;
<a name="l02496"></a>02496 
<a name="l02497"></a>02497               <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a7d96976a27d0138b3f189f1d1a663d68">COMPILE_STACK_EMPTY</a>)
<a name="l02498"></a>02498         {
<a name="l02499"></a>02499           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#af1907a994cab6bd73ad14677b126a64b">RE_UNMATCHED_RIGHT_PAREN_ORD</a>)
<a name="l02500"></a>02500             <span class="keywordflow">goto</span> normal_backslash;
<a name="l02501"></a>02501           <span class="keywordflow">else</span>
<a name="l02502"></a>02502             <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea5797541a6619c4a5dbe28fe3bb58661b">REG_ERPAREN</a>);
<a name="l02503"></a>02503         }
<a name="l02504"></a>02504 
<a name="l02505"></a>02505             handle_close:
<a name="l02506"></a>02506               <span class="keywordflow">if</span> (fixup_alt_jump)
<a name="l02507"></a>02507                 { <span class="comment">/* Push a dummy failure point at the end of the</span>
<a name="l02508"></a>02508 <span class="comment">                     alternative for a possible future</span>
<a name="l02509"></a>02509 <span class="comment">                     `pop_failure_jump&#39; to pop.  See comments at</span>
<a name="l02510"></a>02510 <span class="comment">                     `push_dummy_failure&#39; in `re_match_2&#39;.  */</span>
<a name="l02511"></a>02511                   <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">push_dummy_failure</a>);
<a name="l02512"></a>02512 
<a name="l02513"></a>02513                   <span class="comment">/* We allocated space for this jump when we assigned</span>
<a name="l02514"></a>02514 <span class="comment">                     to `fixup_alt_jump&#39;, in the `handle_alt&#39; case below.  */</span>
<a name="l02515"></a>02515                   <a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">STORE_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>, fixup_alt_jump, b - 1);
<a name="l02516"></a>02516                 }
<a name="l02517"></a>02517 
<a name="l02518"></a>02518               <span class="comment">/* See similar code for backslashed left paren above.  */</span>
<a name="l02519"></a>02519               <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a7d96976a27d0138b3f189f1d1a663d68">COMPILE_STACK_EMPTY</a>)
<a name="l02520"></a>02520         {
<a name="l02521"></a>02521           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#af1907a994cab6bd73ad14677b126a64b">RE_UNMATCHED_RIGHT_PAREN_ORD</a>)
<a name="l02522"></a>02522             <span class="keywordflow">goto</span> normal_char;
<a name="l02523"></a>02523           <span class="keywordflow">else</span>
<a name="l02524"></a>02524             <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea5797541a6619c4a5dbe28fe3bb58661b">REG_ERPAREN</a>);
<a name="l02525"></a>02525         }
<a name="l02526"></a>02526 
<a name="l02527"></a>02527               <span class="comment">/* Since we just checked for an empty stack above, this</span>
<a name="l02528"></a>02528 <span class="comment">                 ``can&#39;t happen&#39;&#39;.  */</span>
<a name="l02529"></a>02529               <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (compile_stack.<a class="code" href="structcompile__stack__type.html#a45982ffa38800f8a9502da9708ec587c">avail</a> != 0);
<a name="l02530"></a>02530               {
<a name="l02531"></a>02531                 <span class="comment">/* We don&#39;t just want to restore into `regnum&#39;, because</span>
<a name="l02532"></a>02532 <span class="comment">                   later groups should continue to be numbered higher,</span>
<a name="l02533"></a>02533 <span class="comment">                   as in `(ab)c(de)&#39; -- the second group is #2.  */</span>
<a name="l02534"></a>02534                 regnum_t this_group_regnum;
<a name="l02535"></a>02535 
<a name="l02536"></a>02536                 compile_stack.<a class="code" href="structcompile__stack__type.html#a45982ffa38800f8a9502da9708ec587c">avail</a>--;
<a name="l02537"></a>02537                 begalt = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.begalt_offset;
<a name="l02538"></a>02538                 fixup_alt_jump
<a name="l02539"></a>02539                   = <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.fixup_alt_jump
<a name="l02540"></a>02540                     ? bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.fixup_alt_jump - 1
<a name="l02541"></a>02541                     : 0;
<a name="l02542"></a>02542                 laststart = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.laststart_offset;
<a name="l02543"></a>02543                 this_group_regnum = <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.regnum;
<a name="l02544"></a>02544         <span class="comment">/* If we&#39;ve reached MAX_REGNUM groups, then this open</span>
<a name="l02545"></a>02545 <span class="comment">           won&#39;t actually generate any code, so we&#39;ll have to</span>
<a name="l02546"></a>02546 <span class="comment">           clear pending_exact explicitly.  */</span>
<a name="l02547"></a>02547         pending_exact = 0;
<a name="l02548"></a>02548 
<a name="l02549"></a>02549                 <span class="comment">/* We&#39;re at the end of the group, so now we know how many</span>
<a name="l02550"></a>02550 <span class="comment">                   groups were inside this one.  */</span>
<a name="l02551"></a>02551                 <span class="keywordflow">if</span> (this_group_regnum &lt;= <a class="code" href="regex_8c.html#af1b3c3e22fe42152c272df6027b1bf4b">MAX_REGNUM</a>)
<a name="l02552"></a>02552                   {
<a name="l02553"></a>02553                     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inner_group_loc
<a name="l02554"></a>02554                       = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a> + <a class="code" href="regex_8c.html#a3c27bf6437874eb87a6622b75d2dac32">COMPILE_STACK_TOP</a>.inner_group_offset;
<a name="l02555"></a>02555 
<a name="l02556"></a>02556                     *inner_group_loc = regnum - this_group_regnum;
<a name="l02557"></a>02557                     <a class="code" href="regex_8c.html#a38ceed7188d42c689f202512a1cb76fb">BUF_PUSH_3</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>, this_group_regnum,
<a name="l02558"></a>02558                                 regnum - this_group_regnum);
<a name="l02559"></a>02559                   }
<a name="l02560"></a>02560               }
<a name="l02561"></a>02561               <span class="keywordflow">break</span>;
<a name="l02562"></a>02562 
<a name="l02563"></a>02563 
<a name="l02564"></a>02564             <span class="keywordflow">case</span> <span class="charliteral">&#39;|&#39;</span>:                   <span class="comment">/* `\|&#39;.  */</span>
<a name="l02565"></a>02565               <span class="keywordflow">if</span> (syntax &amp; RE_LIMITED_OPS || syntax &amp; RE_NO_BK_VBAR)
<a name="l02566"></a>02566                 <span class="keywordflow">goto</span> normal_backslash;
<a name="l02567"></a>02567             handle_alt:
<a name="l02568"></a>02568               <span class="keywordflow">if</span> (syntax &amp; RE_LIMITED_OPS)
<a name="l02569"></a>02569                 <span class="keywordflow">goto</span> normal_char;
<a name="l02570"></a>02570 
<a name="l02571"></a>02571               <span class="comment">/* Insert before the previous alternative a jump which</span>
<a name="l02572"></a>02572 <span class="comment">                 jumps to this alternative if the former fails.  */</span>
<a name="l02573"></a>02573               <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02574"></a>02574               <a class="code" href="regex_8c.html#a4c4a6f3c88794d7c99809e8ef5054614">INSERT_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>, begalt, b + 6);
<a name="l02575"></a>02575               pending_exact = 0;
<a name="l02576"></a>02576               b += 3;
<a name="l02577"></a>02577 
<a name="l02578"></a>02578               <span class="comment">/* The alternative before this one has a jump after it</span>
<a name="l02579"></a>02579 <span class="comment">                 which gets executed if it gets matched.  Adjust that</span>
<a name="l02580"></a>02580 <span class="comment">                 jump so it will jump to this alternative&#39;s analogous</span>
<a name="l02581"></a>02581 <span class="comment">                 jump (put in below, which in turn will jump to the next</span>
<a name="l02582"></a>02582 <span class="comment">                 (if any) alternative&#39;s such jump, etc.).  The last such</span>
<a name="l02583"></a>02583 <span class="comment">                 jump jumps to the correct final destination.  A picture:</span>
<a name="l02584"></a>02584 <span class="comment">                          _____ _____</span>
<a name="l02585"></a>02585 <span class="comment">                          |   | |   |</span>
<a name="l02586"></a>02586 <span class="comment">                          |   v |   v</span>
<a name="l02587"></a>02587 <span class="comment">                         a | b   | c</span>
<a name="l02588"></a>02588 <span class="comment"></span>
<a name="l02589"></a>02589 <span class="comment">                 If we are at `b&#39;, then fixup_alt_jump right now points to a</span>
<a name="l02590"></a>02590 <span class="comment">                 three-byte space after `a&#39;.  We&#39;ll put in the jump, set</span>
<a name="l02591"></a>02591 <span class="comment">                 fixup_alt_jump to right after `b&#39;, and leave behind three</span>
<a name="l02592"></a>02592 <span class="comment">                 bytes which we&#39;ll fill in when we get to after `c&#39;.  */</span>
<a name="l02593"></a>02593 
<a name="l02594"></a>02594               <span class="keywordflow">if</span> (fixup_alt_jump)
<a name="l02595"></a>02595                 <a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">STORE_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>, fixup_alt_jump, b);
<a name="l02596"></a>02596 
<a name="l02597"></a>02597               <span class="comment">/* Mark and leave space for a jump after this alternative,</span>
<a name="l02598"></a>02598 <span class="comment">                 to be filled in later either by next alternative or</span>
<a name="l02599"></a>02599 <span class="comment">                 when know we&#39;re at the end of a series of alternatives.  */</span>
<a name="l02600"></a>02600               fixup_alt_jump = b;
<a name="l02601"></a>02601               <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02602"></a>02602               b += 3;
<a name="l02603"></a>02603 
<a name="l02604"></a>02604               laststart = 0;
<a name="l02605"></a>02605               begalt = b;
<a name="l02606"></a>02606               <span class="keywordflow">break</span>;
<a name="l02607"></a>02607 
<a name="l02608"></a>02608 
<a name="l02609"></a>02609             <span class="keywordflow">case</span> <span class="charliteral">&#39;{&#39;</span>:
<a name="l02610"></a>02610               <span class="comment">/* If \{ is a literal.  */</span>
<a name="l02611"></a>02611               <span class="keywordflow">if</span> (!(syntax &amp; <a class="code" href="regex-gnu_8h.html#a377bd32fc62adedc890f74cd18845aa9">RE_INTERVALS</a>)
<a name="l02612"></a>02612                      <span class="comment">/* If we&#39;re at `\{&#39; and it&#39;s not the open-interval</span>
<a name="l02613"></a>02613 <span class="comment">                        operator.  */</span>
<a name="l02614"></a>02614                   || ((syntax &amp; RE_INTERVALS) &amp;&amp; (syntax &amp; RE_NO_BK_BRACES))
<a name="l02615"></a>02615                   || (p - 2 == pattern  &amp;&amp;  p == pend))
<a name="l02616"></a>02616                 <span class="keywordflow">goto</span> normal_backslash;
<a name="l02617"></a>02617 
<a name="l02618"></a>02618             handle_interval:
<a name="l02619"></a>02619               {
<a name="l02620"></a>02620                 <span class="comment">/* If got here, then the syntax allows intervals.  */</span>
<a name="l02621"></a>02621 
<a name="l02622"></a>02622                 <span class="comment">/* At least (most) this many matches must be made.  */</span>
<a name="l02623"></a>02623                 <span class="keywordtype">int</span> lower_bound = -1, upper_bound = -1;
<a name="l02624"></a>02624 
<a name="l02625"></a>02625                 beg_interval = p - 1;
<a name="l02626"></a>02626 
<a name="l02627"></a>02627                 <span class="keywordflow">if</span> (p == pend)
<a name="l02628"></a>02628                   {
<a name="l02629"></a>02629                     <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_BRACES)
<a name="l02630"></a>02630                       <span class="keywordflow">goto</span> unfetch_interval;
<a name="l02631"></a>02631                     <span class="keywordflow">else</span>
<a name="l02632"></a>02632                       <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafad659d2f7fe4c0f9d360ef68d371673">REG_EBRACE</a>);
<a name="l02633"></a>02633                   }
<a name="l02634"></a>02634 
<a name="l02635"></a>02635                 <a class="code" href="regex_8c.html#aa678aabaa579a244b2f36e8e452d977e">GET_UNSIGNED_NUMBER</a> (lower_bound);
<a name="l02636"></a>02636 
<a name="l02637"></a>02637                 <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;,&#39;</span>)
<a name="l02638"></a>02638                   {
<a name="l02639"></a>02639                     <a class="code" href="regex_8c.html#aa678aabaa579a244b2f36e8e452d977e">GET_UNSIGNED_NUMBER</a> (upper_bound);
<a name="l02640"></a>02640                     <span class="keywordflow">if</span> (upper_bound &lt; 0) upper_bound = <a class="code" href="regex-gnu_8h.html#aa7d072d0a88c61d3692dc547ea27538e">RE_DUP_MAX</a>;
<a name="l02641"></a>02641                   }
<a name="l02642"></a>02642                 <span class="keywordflow">else</span>
<a name="l02643"></a>02643                   <span class="comment">/* Interval such as `{1}&#39; =&gt; match exactly once. */</span>
<a name="l02644"></a>02644                   upper_bound = lower_bound;
<a name="l02645"></a>02645 
<a name="l02646"></a>02646                 <span class="keywordflow">if</span> (lower_bound &lt; 0 || upper_bound &gt; <a class="code" href="regex-gnu_8h.html#aa7d072d0a88c61d3692dc547ea27538e">RE_DUP_MAX</a>
<a name="l02647"></a>02647                     || lower_bound &gt; upper_bound)
<a name="l02648"></a>02648                   {
<a name="l02649"></a>02649                     <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_BRACES)
<a name="l02650"></a>02650                       <span class="keywordflow">goto</span> unfetch_interval;
<a name="l02651"></a>02651                     <span class="keywordflow">else</span>
<a name="l02652"></a>02652                       <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaeda9cecaba728fe6b18a8537872ffd34">REG_BADBR</a>);
<a name="l02653"></a>02653                   }
<a name="l02654"></a>02654 
<a name="l02655"></a>02655                 <span class="keywordflow">if</span> (!(syntax &amp; RE_NO_BK_BRACES))
<a name="l02656"></a>02656                   {
<a name="l02657"></a>02657                     <span class="keywordflow">if</span> (c != <span class="charliteral">&#39;\\&#39;</span>) <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafad659d2f7fe4c0f9d360ef68d371673">REG_EBRACE</a>);
<a name="l02658"></a>02658 
<a name="l02659"></a>02659                     <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02660"></a>02660                   }
<a name="l02661"></a>02661 
<a name="l02662"></a>02662                 <span class="keywordflow">if</span> (c != <span class="charliteral">&#39;}&#39;</span>)
<a name="l02663"></a>02663                   {
<a name="l02664"></a>02664                     <span class="keywordflow">if</span> (syntax &amp; RE_NO_BK_BRACES)
<a name="l02665"></a>02665                       <span class="keywordflow">goto</span> unfetch_interval;
<a name="l02666"></a>02666                     <span class="keywordflow">else</span>
<a name="l02667"></a>02667                       <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaeda9cecaba728fe6b18a8537872ffd34">REG_BADBR</a>);
<a name="l02668"></a>02668                   }
<a name="l02669"></a>02669 
<a name="l02670"></a>02670                 <span class="comment">/* We just parsed a valid interval.  */</span>
<a name="l02671"></a>02671 
<a name="l02672"></a>02672                 <span class="comment">/* If it&#39;s invalid to have no preceding re.  */</span>
<a name="l02673"></a>02673                 <span class="keywordflow">if</span> (!laststart)
<a name="l02674"></a>02674                   {
<a name="l02675"></a>02675                     <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#ae344a4e6129c8d549a88cd5f45e86adb">RE_CONTEXT_INVALID_OPS</a>)
<a name="l02676"></a>02676                       <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaf6eaf32c5250906aa304d801a227ccf9">REG_BADRPT</a>);
<a name="l02677"></a>02677                     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#aa96ee57fb2be85936dbb14f2b4c44b50">RE_CONTEXT_INDEP_OPS</a>)
<a name="l02678"></a>02678                       laststart = b;
<a name="l02679"></a>02679                     <span class="keywordflow">else</span>
<a name="l02680"></a>02680                       <span class="keywordflow">goto</span> unfetch_interval;
<a name="l02681"></a>02681                   }
<a name="l02682"></a>02682 
<a name="l02683"></a>02683                 <span class="comment">/* If the upper bound is zero, don&#39;t want to succeed at</span>
<a name="l02684"></a>02684 <span class="comment">                   all; jump from `laststart&#39; to `b + 3&#39;, which will be</span>
<a name="l02685"></a>02685 <span class="comment">                   the end of the buffer after we insert the jump.  */</span>
<a name="l02686"></a>02686                  <span class="keywordflow">if</span> (upper_bound == 0)
<a name="l02687"></a>02687                    {
<a name="l02688"></a>02688                      <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (3);
<a name="l02689"></a>02689                      <a class="code" href="regex_8c.html#a4c4a6f3c88794d7c99809e8ef5054614">INSERT_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>, laststart, b + 3);
<a name="l02690"></a>02690                      b += 3;
<a name="l02691"></a>02691                    }
<a name="l02692"></a>02692 
<a name="l02693"></a>02693                  <span class="comment">/* Otherwise, we have a nontrivial interval.  When</span>
<a name="l02694"></a>02694 <span class="comment">                    we&#39;re all done, the pattern will look like:</span>
<a name="l02695"></a>02695 <span class="comment">                      set_number_at &lt;jump count&gt; &lt;upper bound&gt;</span>
<a name="l02696"></a>02696 <span class="comment">                      set_number_at &lt;succeed_n count&gt; &lt;lower bound&gt;</span>
<a name="l02697"></a>02697 <span class="comment">                      succeed_n &lt;after jump addr&gt; &lt;succeed_n count&gt;</span>
<a name="l02698"></a>02698 <span class="comment">                      &lt;body of loop&gt;</span>
<a name="l02699"></a>02699 <span class="comment">                      jump_n &lt;succeed_n addr&gt; &lt;jump count&gt;</span>
<a name="l02700"></a>02700 <span class="comment">                    (The upper bound and `jump_n&#39; are omitted if</span>
<a name="l02701"></a>02701 <span class="comment">                    `upper_bound&#39; is 1, though.)  */</span>
<a name="l02702"></a>02702                  <span class="keywordflow">else</span>
<a name="l02703"></a>02703                    { <span class="comment">/* If the upper bound is &gt; 1, we need to insert</span>
<a name="l02704"></a>02704 <span class="comment">                        more at the end of the loop.  */</span>
<a name="l02705"></a>02705                      <span class="keywordtype">unsigned</span> nbytes = 10 + (upper_bound &gt; 1) * 10;
<a name="l02706"></a>02706 
<a name="l02707"></a>02707                      <a class="code" href="regex_8c.html#a820795fca6e5960dd9657eda06c66ed5">GET_BUFFER_SPACE</a> (nbytes);
<a name="l02708"></a>02708 
<a name="l02709"></a>02709                      <span class="comment">/* Initialize lower bound of the `succeed_n&#39;, even</span>
<a name="l02710"></a>02710 <span class="comment">                        though it will be set during matching by its</span>
<a name="l02711"></a>02711 <span class="comment">                        attendant `set_number_at&#39; (inserted next),</span>
<a name="l02712"></a>02712 <span class="comment">                        because `re_compile_fastmap&#39; needs to know.</span>
<a name="l02713"></a>02713 <span class="comment">                        Jump to the `jump_n&#39; we might insert below.  */</span>
<a name="l02714"></a>02714                      <a class="code" href="regex_8c.html#a7dd59dc7da937c9308d1e7b9331aa916">INSERT_JUMP2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>, laststart,
<a name="l02715"></a>02715                                    b + 5 + (upper_bound &gt; 1) * 5,
<a name="l02716"></a>02716                                    lower_bound);
<a name="l02717"></a>02717                      b += 5;
<a name="l02718"></a>02718 
<a name="l02719"></a>02719                      <span class="comment">/* Code to initialize the lower bound.  Insert</span>
<a name="l02720"></a>02720 <span class="comment">                        before the `succeed_n&#39;.  The `5&#39; is the last two</span>
<a name="l02721"></a>02721 <span class="comment">                        bytes of this `set_number_at&#39;, plus 3 bytes of</span>
<a name="l02722"></a>02722 <span class="comment">                        the following `succeed_n&#39;.  */</span>
<a name="l02723"></a>02723                      <a class="code" href="regex_8c.html#ae31b1d009dfa3a2b5eca3f11ec3dee6a">insert_op2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>, laststart, 5, lower_bound, b);
<a name="l02724"></a>02724                      b += 5;
<a name="l02725"></a>02725 
<a name="l02726"></a>02726                      <span class="keywordflow">if</span> (upper_bound &gt; 1)
<a name="l02727"></a>02727                        { <span class="comment">/* More than one repetition is allowed, so</span>
<a name="l02728"></a>02728 <span class="comment">                            append a backward jump to the `succeed_n&#39;</span>
<a name="l02729"></a>02729 <span class="comment">                            that starts this interval.</span>
<a name="l02730"></a>02730 <span class="comment"></span>
<a name="l02731"></a>02731 <span class="comment">                            When we&#39;ve reached this during matching,</span>
<a name="l02732"></a>02732 <span class="comment">                            we&#39;ll have matched the interval once, so</span>
<a name="l02733"></a>02733 <span class="comment">                            jump back only `upper_bound - 1&#39; times.  */</span>
<a name="l02734"></a>02734                          <a class="code" href="regex_8c.html#aa2aa60706e57e51cc9b54ff2c8cc38a2">STORE_JUMP2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>, b, laststart + 5,
<a name="l02735"></a>02735                                       upper_bound - 1);
<a name="l02736"></a>02736                          b += 5;
<a name="l02737"></a>02737 
<a name="l02738"></a>02738                          <span class="comment">/* The location we want to set is the second</span>
<a name="l02739"></a>02739 <span class="comment">                            parameter of the `jump_n&#39;; that is `b-2&#39; as</span>
<a name="l02740"></a>02740 <span class="comment">                            an absolute address.  `laststart&#39; will be</span>
<a name="l02741"></a>02741 <span class="comment">                            the `set_number_at&#39; we&#39;re about to insert;</span>
<a name="l02742"></a>02742 <span class="comment">                            `laststart+3&#39; the number to set, the source</span>
<a name="l02743"></a>02743 <span class="comment">                            for the relative address.  But we are</span>
<a name="l02744"></a>02744 <span class="comment">                            inserting into the middle of the pattern --</span>
<a name="l02745"></a>02745 <span class="comment">                            so everything is getting moved up by 5.</span>
<a name="l02746"></a>02746 <span class="comment">                            Conclusion: (b - 2) - (laststart + 3) + 5,</span>
<a name="l02747"></a>02747 <span class="comment">                            i.e., b - laststart.</span>
<a name="l02748"></a>02748 <span class="comment"></span>
<a name="l02749"></a>02749 <span class="comment">                            We insert this at the beginning of the loop</span>
<a name="l02750"></a>02750 <span class="comment">                            so that if we fail during matching, we&#39;ll</span>
<a name="l02751"></a>02751 <span class="comment">                            reinitialize the bounds.  */</span>
<a name="l02752"></a>02752                          <a class="code" href="regex_8c.html#ae31b1d009dfa3a2b5eca3f11ec3dee6a">insert_op2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>, laststart, b - laststart,
<a name="l02753"></a>02753                                      upper_bound - 1, b);
<a name="l02754"></a>02754                          b += 5;
<a name="l02755"></a>02755                        }
<a name="l02756"></a>02756                    }
<a name="l02757"></a>02757                 pending_exact = 0;
<a name="l02758"></a>02758                 beg_interval = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02759"></a>02759               }
<a name="l02760"></a>02760               <span class="keywordflow">break</span>;
<a name="l02761"></a>02761 
<a name="l02762"></a>02762             unfetch_interval:
<a name="l02763"></a>02763               <span class="comment">/* If an invalid interval, match the characters as literals.  */</span>
<a name="l02764"></a>02764                <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (beg_interval);
<a name="l02765"></a>02765                p = beg_interval;
<a name="l02766"></a>02766                beg_interval = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02767"></a>02767 
<a name="l02768"></a>02768                <span class="comment">/* normal_char and normal_backslash need `c&#39;.  */</span>
<a name="l02769"></a>02769                <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02770"></a>02770 
<a name="l02771"></a>02771                <span class="keywordflow">if</span> (!(syntax &amp; RE_NO_BK_BRACES))
<a name="l02772"></a>02772                  {
<a name="l02773"></a>02773                    <span class="keywordflow">if</span> (p &gt; pattern  &amp;&amp;  p[-1] == <span class="charliteral">&#39;\\&#39;</span>)
<a name="l02774"></a>02774                      <span class="keywordflow">goto</span> normal_backslash;
<a name="l02775"></a>02775                  }
<a name="l02776"></a>02776                <span class="keywordflow">goto</span> normal_char;
<a name="l02777"></a>02777 
<a name="l02778"></a>02778 <span class="preprocessor">#ifdef emacs</span>
<a name="l02779"></a>02779 <span class="preprocessor"></span>            <span class="comment">/* There is no way to specify the before_dot and after_dot</span>
<a name="l02780"></a>02780 <span class="comment">               operators.  rms says this is ok.  --karl  */</span>
<a name="l02781"></a>02781             <span class="keywordflow">case</span> <span class="charliteral">&#39;=&#39;</span>:
<a name="l02782"></a>02782               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (at_dot);
<a name="l02783"></a>02783               <span class="keywordflow">break</span>;
<a name="l02784"></a>02784 
<a name="l02785"></a>02785             <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l02786"></a>02786               laststart = b;
<a name="l02787"></a>02787               <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02788"></a>02788               <a class="code" href="regex_8c.html#a8cfee99226a6b73952701f9de12912b9">BUF_PUSH_2</a> (syntaxspec, syntax_spec_code[c]);
<a name="l02789"></a>02789               <span class="keywordflow">break</span>;
<a name="l02790"></a>02790 
<a name="l02791"></a>02791             <span class="keywordflow">case</span> <span class="charliteral">&#39;S&#39;</span>:
<a name="l02792"></a>02792               laststart = b;
<a name="l02793"></a>02793               <a class="code" href="regex_8c.html#a557d2f1c16f9bd2123e55885ee447c06">PATFETCH</a> (c);
<a name="l02794"></a>02794               <a class="code" href="regex_8c.html#a8cfee99226a6b73952701f9de12912b9">BUF_PUSH_2</a> (notsyntaxspec, syntax_spec_code[c]);
<a name="l02795"></a>02795               <span class="keywordflow">break</span>;
<a name="l02796"></a>02796 <span class="preprocessor">#endif </span><span class="comment">/* emacs */</span>
<a name="l02797"></a>02797 
<a name="l02798"></a>02798 
<a name="l02799"></a>02799             <span class="keywordflow">case</span> <span class="charliteral">&#39;w&#39;</span>:
<a name="l02800"></a>02800           <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#af60fbd1f693bfb95fd0a80caae9aa4c5">RE_NO_GNU_OPS</a>)
<a name="l02801"></a>02801         <span class="keywordflow">goto</span> normal_char;
<a name="l02802"></a>02802               laststart = b;
<a name="l02803"></a>02803               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>);
<a name="l02804"></a>02804               <span class="keywordflow">break</span>;
<a name="l02805"></a>02805 
<a name="l02806"></a>02806 
<a name="l02807"></a>02807             <span class="keywordflow">case</span> <span class="charliteral">&#39;W&#39;</span>:
<a name="l02808"></a>02808           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02809"></a>02809         <span class="keywordflow">goto</span> normal_char;
<a name="l02810"></a>02810               laststart = b;
<a name="l02811"></a>02811               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>);
<a name="l02812"></a>02812               <span class="keywordflow">break</span>;
<a name="l02813"></a>02813 
<a name="l02814"></a>02814 
<a name="l02815"></a>02815             <span class="keywordflow">case</span> <span class="charliteral">&#39;&lt;&#39;</span>:
<a name="l02816"></a>02816           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02817"></a>02817         <span class="keywordflow">goto</span> normal_char;
<a name="l02818"></a>02818               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>);
<a name="l02819"></a>02819               <span class="keywordflow">break</span>;
<a name="l02820"></a>02820 
<a name="l02821"></a>02821             <span class="keywordflow">case</span> <span class="charliteral">&#39;&gt;&#39;</span>:
<a name="l02822"></a>02822           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02823"></a>02823         <span class="keywordflow">goto</span> normal_char;
<a name="l02824"></a>02824               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>);
<a name="l02825"></a>02825               <span class="keywordflow">break</span>;
<a name="l02826"></a>02826 
<a name="l02827"></a>02827             <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:
<a name="l02828"></a>02828           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02829"></a>02829         <span class="keywordflow">goto</span> normal_char;
<a name="l02830"></a>02830               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>);
<a name="l02831"></a>02831               <span class="keywordflow">break</span>;
<a name="l02832"></a>02832 
<a name="l02833"></a>02833             <span class="keywordflow">case</span> <span class="charliteral">&#39;B&#39;</span>:
<a name="l02834"></a>02834           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02835"></a>02835         <span class="keywordflow">goto</span> normal_char;
<a name="l02836"></a>02836               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>);
<a name="l02837"></a>02837               <span class="keywordflow">break</span>;
<a name="l02838"></a>02838 
<a name="l02839"></a>02839             <span class="keywordflow">case</span> <span class="charliteral">&#39;`&#39;</span>:
<a name="l02840"></a>02840           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02841"></a>02841         <span class="keywordflow">goto</span> normal_char;
<a name="l02842"></a>02842               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>);
<a name="l02843"></a>02843               <span class="keywordflow">break</span>;
<a name="l02844"></a>02844 
<a name="l02845"></a>02845             <span class="keywordflow">case</span> <span class="charliteral">&#39;\&#39;&#39;</span>:
<a name="l02846"></a>02846           <span class="keywordflow">if</span> (syntax &amp; RE_NO_GNU_OPS)
<a name="l02847"></a>02847         <span class="keywordflow">goto</span> normal_char;
<a name="l02848"></a>02848               <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>);
<a name="l02849"></a>02849               <span class="keywordflow">break</span>;
<a name="l02850"></a>02850 
<a name="l02851"></a>02851             <span class="keywordflow">case</span> <span class="charliteral">&#39;1&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;2&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;3&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;4&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;5&#39;</span>:
<a name="l02852"></a>02852             <span class="keywordflow">case</span> <span class="charliteral">&#39;6&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;7&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;8&#39;</span>: <span class="keywordflow">case</span> <span class="charliteral">&#39;9&#39;</span>:
<a name="l02853"></a>02853               <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#aed01be95fde1250190b37b7788af5f35">RE_NO_BK_REFS</a>)
<a name="l02854"></a>02854                 <span class="keywordflow">goto</span> normal_char;
<a name="l02855"></a>02855 
<a name="l02856"></a>02856               c1 = c - <span class="charliteral">&#39;0&#39;</span>;
<a name="l02857"></a>02857 
<a name="l02858"></a>02858               <span class="keywordflow">if</span> (c1 &gt; regnum)
<a name="l02859"></a>02859                 <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeac700e4cae84ffc418afdff14792abf34">REG_ESUBREG</a>);
<a name="l02860"></a>02860 
<a name="l02861"></a>02861               <span class="comment">/* Can&#39;t back reference to a subexpression if inside of it.  */</span>
<a name="l02862"></a>02862               <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a28dc5088ce179431d47162481e6c6540">group_in_compile_stack</a> (compile_stack, (regnum_t) c1))
<a name="l02863"></a>02863                 <span class="keywordflow">goto</span> normal_char;
<a name="l02864"></a>02864 
<a name="l02865"></a>02865               laststart = b;
<a name="l02866"></a>02866               <a class="code" href="regex_8c.html#a8cfee99226a6b73952701f9de12912b9">BUF_PUSH_2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>, c1);
<a name="l02867"></a>02867               <span class="keywordflow">break</span>;
<a name="l02868"></a>02868 
<a name="l02869"></a>02869 
<a name="l02870"></a>02870             <span class="keywordflow">case</span> <span class="charliteral">&#39;+&#39;</span>:
<a name="l02871"></a>02871             <span class="keywordflow">case</span> <span class="charliteral">&#39;?&#39;</span>:
<a name="l02872"></a>02872               <span class="keywordflow">if</span> (syntax &amp; RE_BK_PLUS_QM)
<a name="l02873"></a>02873                 <span class="keywordflow">goto</span> handle_plus;
<a name="l02874"></a>02874               <span class="keywordflow">else</span>
<a name="l02875"></a>02875                 <span class="keywordflow">goto</span> normal_backslash;
<a name="l02876"></a>02876 
<a name="l02877"></a>02877             <span class="keywordflow">default</span>:
<a name="l02878"></a>02878             normal_backslash:
<a name="l02879"></a>02879               <span class="comment">/* You might think it would be useful for \ to mean</span>
<a name="l02880"></a>02880 <span class="comment">                 not to translate; but if we don&#39;t translate it</span>
<a name="l02881"></a>02881 <span class="comment">                 it will never match anything.  */</span>
<a name="l02882"></a>02882               c = <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (c);
<a name="l02883"></a>02883               <span class="keywordflow">goto</span> normal_char;
<a name="l02884"></a>02884             }
<a name="l02885"></a>02885           <span class="keywordflow">break</span>;
<a name="l02886"></a>02886 
<a name="l02887"></a>02887 
<a name="l02888"></a>02888     <span class="keywordflow">default</span>:
<a name="l02889"></a>02889         <span class="comment">/* Expects the character in `c&#39;.  */</span>
<a name="l02890"></a>02890     normal_char:
<a name="l02891"></a>02891           <span class="comment">/* If no exactn currently being built.  */</span>
<a name="l02892"></a>02892           <span class="keywordflow">if</span> (!pending_exact
<a name="l02893"></a>02893 
<a name="l02894"></a>02894               <span class="comment">/* If last exactn not at current position.  */</span>
<a name="l02895"></a>02895               || pending_exact + *pending_exact + 1 != b
<a name="l02896"></a>02896 
<a name="l02897"></a>02897               <span class="comment">/* We have only one byte following the exactn for the count.  */</span>
<a name="l02898"></a>02898           || *pending_exact == (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>) - 1
<a name="l02899"></a>02899 
<a name="l02900"></a>02900               <span class="comment">/* If followed by a repetition operator.  */</span>
<a name="l02901"></a>02901               || *p == <span class="charliteral">&#39;*&#39;</span> || *p == <span class="charliteral">&#39;^&#39;</span>
<a name="l02902"></a>02902           || ((syntax &amp; RE_BK_PLUS_QM)
<a name="l02903"></a>02903           ? *p == <span class="charliteral">&#39;\\&#39;</span> &amp;&amp; (p[1] == <span class="charliteral">&#39;+&#39;</span> || p[1] == <span class="charliteral">&#39;?&#39;</span>)
<a name="l02904"></a>02904           : (*p == <span class="charliteral">&#39;+&#39;</span> || *p == <span class="charliteral">&#39;?&#39;</span>))
<a name="l02905"></a>02905           || ((syntax &amp; <a class="code" href="regex-gnu_8h.html#a377bd32fc62adedc890f74cd18845aa9">RE_INTERVALS</a>)
<a name="l02906"></a>02906                   &amp;&amp; ((syntax &amp; RE_NO_BK_BRACES)
<a name="l02907"></a>02907               ? *p == <span class="charliteral">&#39;{&#39;</span>
<a name="l02908"></a>02908                       : (p[0] == <span class="charliteral">&#39;\\&#39;</span> &amp;&amp; p[1] == <span class="charliteral">&#39;{&#39;</span>))))
<a name="l02909"></a>02909         {
<a name="l02910"></a>02910           <span class="comment">/* Start building a new exactn.  */</span>
<a name="l02911"></a>02911 
<a name="l02912"></a>02912               laststart = b;
<a name="l02913"></a>02913 
<a name="l02914"></a>02914           <a class="code" href="regex_8c.html#a8cfee99226a6b73952701f9de12912b9">BUF_PUSH_2</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>, 0);
<a name="l02915"></a>02915           pending_exact = b - 1;
<a name="l02916"></a>02916             }
<a name="l02917"></a>02917 
<a name="l02918"></a>02918       <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (c);
<a name="l02919"></a>02919           (*pending_exact)++;
<a name="l02920"></a>02920       <span class="keywordflow">break</span>;
<a name="l02921"></a>02921         } <span class="comment">/* switch (c) */</span>
<a name="l02922"></a>02922     } <span class="comment">/* while p != pend */</span>
<a name="l02923"></a>02923 
<a name="l02924"></a>02924 
<a name="l02925"></a>02925   <span class="comment">/* Through the pattern now.  */</span>
<a name="l02926"></a>02926 
<a name="l02927"></a>02927   <span class="keywordflow">if</span> (fixup_alt_jump)
<a name="l02928"></a>02928     <a class="code" href="regex_8c.html#acfebc9fd667ce5b7d2162f2677087e21">STORE_JUMP</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>, fixup_alt_jump, b);
<a name="l02929"></a>02929 
<a name="l02930"></a>02930   <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a7d96976a27d0138b3f189f1d1a663d68">COMPILE_STACK_EMPTY</a>)
<a name="l02931"></a>02931     <a class="code" href="regex_8c.html#a90d3a551feb495f25eaf3e22933dd1d7">FREE_STACK_RETURN</a> (<a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeabde1462e3a1660e121d79ce2d0cc5664">REG_EPAREN</a>);
<a name="l02932"></a>02932 
<a name="l02933"></a>02933   <span class="comment">/* If we don&#39;t want backtracking, force success</span>
<a name="l02934"></a>02934 <span class="comment">     the first time we reach the end of the compiled pattern.  */</span>
<a name="l02935"></a>02935   <span class="keywordflow">if</span> (syntax &amp; <a class="code" href="regex-gnu_8h.html#a35cf160909ead17ad6599238a2ebdd58">RE_NO_POSIX_BACKTRACKING</a>)
<a name="l02936"></a>02936     <a class="code" href="regex_8c.html#aef73eb530578e61ff012a68faccb18d0">BUF_PUSH</a> (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a37fe3367d5bf38cb0ac666ebae52d4f9">succeed</a>);
<a name="l02937"></a>02937 
<a name="l02938"></a>02938   free (compile_stack.<a class="code" href="structcompile__stack__type.html#aebaf05ac308fe465d6a630e5d863fd4a">stack</a>);
<a name="l02939"></a>02939 
<a name="l02940"></a>02940   <span class="comment">/* We have succeeded; set the length of the buffer.  */</span>
<a name="l02941"></a>02941   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a5c6bb086f4bfebee8aa4373c03bcc74b">used</a> = b - bufp-&gt;<a class="code" href="structre__pattern__buffer.html#ae60c7055854785bf6e2743fd314fcb83">buffer</a>;
<a name="l02942"></a>02942 
<a name="l02943"></a>02943 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l02944"></a>02944 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (debug)
<a name="l02945"></a>02945     {
<a name="l02946"></a>02946       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;\nCompiled pattern: \n&quot;</span>);
<a name="l02947"></a>02947       print_compiled_pattern (bufp);
<a name="l02948"></a>02948     }
<a name="l02949"></a>02949 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l02950"></a>02950 
<a name="l02951"></a>02951 <span class="preprocessor">#ifndef MATCH_MAY_ALLOCATE</span>
<a name="l02952"></a>02952 <span class="preprocessor"></span>  <span class="comment">/* Initialize the failure stack to the largest possible stack.  This</span>
<a name="l02953"></a>02953 <span class="comment">     isn&#39;t necessary unless we&#39;re trying to avoid calling alloca in</span>
<a name="l02954"></a>02954 <span class="comment">     the search and match routines.  */</span>
<a name="l02955"></a>02955   {
<a name="l02956"></a>02956     <span class="keywordtype">int</span> num_regs = bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a703c2069a09bac7fa67de8871cb17d35">re_nsub</a> + 1;
<a name="l02957"></a>02957 
<a name="l02958"></a>02958     <span class="comment">/* Since DOUBLE_FAIL_STACK refuses to double only if the current size</span>
<a name="l02959"></a>02959 <span class="comment">       is strictly greater than re_max_failures, the largest possible stack</span>
<a name="l02960"></a>02960 <span class="comment">       is 2 * re_max_failures failure points.  */</span>
<a name="l02961"></a>02961     <span class="keywordflow">if</span> (fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a> &lt; (2 * re_max_failures * <a class="code" href="regex_8c.html#a9c1cb14ecb36be1c3ff3c5a050ecc561">MAX_FAILURE_ITEMS</a>))
<a name="l02962"></a>02962       {
<a name="l02963"></a>02963     fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a> = (2 * re_max_failures * <a class="code" href="regex_8c.html#a9c1cb14ecb36be1c3ff3c5a050ecc561">MAX_FAILURE_ITEMS</a>);
<a name="l02964"></a>02964 
<a name="l02965"></a>02965 <span class="preprocessor"># ifdef emacs</span>
<a name="l02966"></a>02966 <span class="preprocessor"></span>    <span class="keywordflow">if</span> (! fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>)
<a name="l02967"></a>02967       fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>
<a name="l02968"></a>02968         = (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *) xmalloc (fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a>
<a name="l02969"></a>02969                         * sizeof (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>));
<a name="l02970"></a>02970     <span class="keywordflow">else</span>
<a name="l02971"></a>02971       fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>
<a name="l02972"></a>02972         = (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *) xrealloc (fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>,
<a name="l02973"></a>02973                          (fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a>
<a name="l02974"></a>02974                           * sizeof (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>)));
<a name="l02975"></a>02975 <span class="preprocessor"># else </span><span class="comment">/* not emacs */</span>
<a name="l02976"></a>02976     <span class="keywordflow">if</span> (! fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>)
<a name="l02977"></a>02977       fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>
<a name="l02978"></a>02978         = (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *) <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a>
<a name="l02979"></a>02979                        * sizeof (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>));
<a name="l02980"></a>02980     <span class="keywordflow">else</span>
<a name="l02981"></a>02981       fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>
<a name="l02982"></a>02982         = (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *) <a class="code" href="regex_8c.html#a3d4d6185d412b00bc3def2b58b2898cc">realloc</a> (fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>,
<a name="l02983"></a>02983                         (fail_stack.<a class="code" href="structfail__stack__type.html#ae51a629391dd5d2cb07bffc95e545282">size</a>
<a name="l02984"></a>02984                          * sizeof (<a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a>)));
<a name="l02985"></a>02985 <span class="preprocessor"># endif </span><span class="comment">/* not emacs */</span>
<a name="l02986"></a>02986       }
<a name="l02987"></a>02987 
<a name="l02988"></a>02988     regex_grow_registers (num_regs);
<a name="l02989"></a>02989   }
<a name="l02990"></a>02990 <span class="preprocessor">#endif </span><span class="comment">/* not MATCH_MAY_ALLOCATE */</span>
<a name="l02991"></a>02991 
<a name="l02992"></a>02992   <span class="keywordflow">return</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a>;
<a name="l02993"></a>02993 } <span class="comment">/* regex_compile */</span>
<a name="l02994"></a>02994 
<a name="l02995"></a><a class="code" href="regex_8c.html#ac119126b68c58a7c0fc1af5b119450ed">02995</a> <span class="comment">/* Subroutines for `regex_compile&#39;.  */</span>
<a name="l02996"></a>02996 
<a name="l02997"></a>02997 <span class="comment">/* Store OP at LOC followed by two-byte integer parameter ARG.  */</span>
<a name="l02998"></a>02998 
<a name="l02999"></a>02999 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03000"></a>03000 <a class="code" href="regex_8c.html#ac119126b68c58a7c0fc1af5b119450ed">store_op1</a> (op, loc, arg)
<a name="l03001"></a>03001     <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op;
<a name="l03002"></a>03002     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc;
<a name="l03003"></a>03003     <span class="keywordtype">int</span> arg;
<a name="l03004"></a>03004 {
<a name="l03005"></a>03005   *loc = (<span class="keywordtype">unsigned</span> char) op;
<a name="l03006"></a>03006   <a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">STORE_NUMBER</a> (loc + 1, arg);
<a name="l03007"></a>03007 }
<a name="l03008"></a><a class="code" href="regex_8c.html#ab2200093505d6435c2521ff819125d0d">03008</a> 
<a name="l03009"></a>03009 
<a name="l03010"></a>03010 <span class="comment">/* Like `store_op1&#39;, but for two two-byte parameters ARG1 and ARG2.  */</span>
<a name="l03011"></a>03011 
<a name="l03012"></a>03012 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03013"></a>03013 <a class="code" href="regex_8c.html#ab2200093505d6435c2521ff819125d0d">store_op2</a> (op, loc, arg1, arg2)
<a name="l03014"></a>03014     <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op;
<a name="l03015"></a>03015     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc;
<a name="l03016"></a>03016     <span class="keywordtype">int</span> arg1, arg2;
<a name="l03017"></a>03017 {
<a name="l03018"></a>03018   *loc = (<span class="keywordtype">unsigned</span> char) op;
<a name="l03019"></a>03019   <a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">STORE_NUMBER</a> (loc + 1, arg1);
<a name="l03020"></a>03020   <a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">STORE_NUMBER</a> (loc + 3, arg2);
<a name="l03021"></a>03021 }
<a name="l03022"></a>03022 
<a name="l03023"></a><a class="code" href="regex_8c.html#a6ec9fc1db02e8f3a1625ed9771f5bd92">03023</a> 
<a name="l03024"></a>03024 <span class="comment">/* Copy the bytes from LOC to END to open up three bytes of space at LOC</span>
<a name="l03025"></a>03025 <span class="comment">   for OP followed by two-byte integer parameter ARG.  */</span>
<a name="l03026"></a>03026 
<a name="l03027"></a>03027 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03028"></a>03028 <a class="code" href="regex_8c.html#a6ec9fc1db02e8f3a1625ed9771f5bd92">insert_op1</a> (op, loc, arg, end)
<a name="l03029"></a>03029     <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op;
<a name="l03030"></a>03030     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc;
<a name="l03031"></a>03031     <span class="keywordtype">int</span> arg;
<a name="l03032"></a>03032     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end;
<a name="l03033"></a>03033 {
<a name="l03034"></a>03034   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pfrom = end;
<a name="l03035"></a>03035   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pto = end + 3;
<a name="l03036"></a>03036 
<a name="l03037"></a>03037   <span class="keywordflow">while</span> (pfrom != loc)
<a name="l03038"></a>03038     *--pto = *--pfrom;
<a name="l03039"></a>03039 
<a name="l03040"></a>03040   <a class="code" href="regex_8c.html#ac119126b68c58a7c0fc1af5b119450ed">store_op1</a> (op, loc, arg);
<a name="l03041"></a>03041 }
<a name="l03042"></a><a class="code" href="regex_8c.html#ae31b1d009dfa3a2b5eca3f11ec3dee6a">03042</a> 
<a name="l03043"></a>03043 
<a name="l03044"></a>03044 <span class="comment">/* Like `insert_op1&#39;, but for two two-byte parameters ARG1 and ARG2.  */</span>
<a name="l03045"></a>03045 
<a name="l03046"></a>03046 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03047"></a>03047 <a class="code" href="regex_8c.html#ae31b1d009dfa3a2b5eca3f11ec3dee6a">insert_op2</a> (op, loc, arg1, arg2, end)
<a name="l03048"></a>03048     <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a> op;
<a name="l03049"></a>03049     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *loc;
<a name="l03050"></a>03050     <span class="keywordtype">int</span> arg1, arg2;
<a name="l03051"></a>03051     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end;
<a name="l03052"></a>03052 {
<a name="l03053"></a>03053   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pfrom = end;
<a name="l03054"></a>03054   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pto = end + 5;
<a name="l03055"></a>03055 
<a name="l03056"></a>03056   <span class="keywordflow">while</span> (pfrom != loc)
<a name="l03057"></a>03057     *--pto = *--pfrom;
<a name="l03058"></a>03058 
<a name="l03059"></a>03059   <a class="code" href="regex_8c.html#ab2200093505d6435c2521ff819125d0d">store_op2</a> (op, loc, arg1, arg2);
<a name="l03060"></a>03060 }
<a name="l03061"></a>03061 
<a name="l03062"></a>03062 
<a name="l03063"></a><a class="code" href="regex_8c.html#a9fcec6851521f04076e51adfa274403c">03063</a> <span class="comment">/* P points to just after a ^ in PATTERN.  Return true if that ^ comes</span>
<a name="l03064"></a>03064 <span class="comment">   after an alternative or a begin-subexpression.  We assume there is at</span>
<a name="l03065"></a>03065 <span class="comment">   least one character before the ^.  */</span>
<a name="l03066"></a>03066 
<a name="l03067"></a>03067 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l03068"></a>03068 <a class="code" href="regex_8c.html#a9fcec6851521f04076e51adfa274403c">at_begline_loc_p</a> (pattern, p, syntax)
<a name="l03069"></a>03069     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *pattern, *p;
<a name="l03070"></a>03070     <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax;
<a name="l03071"></a>03071 {
<a name="l03072"></a>03072   <span class="keyword">const</span> <span class="keywordtype">char</span> *prev = p - 2;
<a name="l03073"></a>03073   <span class="keywordtype">boolean</span> prev_prev_backslash = prev &gt; pattern &amp;&amp; prev[-1] == <span class="charliteral">&#39;\\&#39;</span>;
<a name="l03074"></a>03074 
<a name="l03075"></a>03075   <span class="keywordflow">return</span>
<a name="l03076"></a>03076        <span class="comment">/* After a subexpression?  */</span>
<a name="l03077"></a>03077        (*prev == <span class="charliteral">&#39;(&#39;</span> &amp;&amp; (syntax &amp; <a class="code" href="regex-gnu_8h.html#af2f17f18a9c771c91d963f466f559e68">RE_NO_BK_PARENS</a> || prev_prev_backslash))
<a name="l03078"></a>03078        <span class="comment">/* After an alternative?  */</span>
<a name="l03079"></a>03079     || (*prev == <span class="charliteral">&#39;|&#39;</span> &amp;&amp; (syntax &amp; <a class="code" href="regex-gnu_8h.html#a834997e69569c41f0394d6ee120051a0">RE_NO_BK_VBAR</a> || prev_prev_backslash));
<a name="l03080"></a>03080 }
<a name="l03081"></a>03081 
<a name="l03082"></a><a class="code" href="regex_8c.html#a85a9d04db18bdf4b65ea1113400613e4">03082</a> 
<a name="l03083"></a>03083 <span class="comment">/* The dual of at_begline_loc_p.  This one is for $.  We assume there is</span>
<a name="l03084"></a>03084 <span class="comment">   at least one character after the $, i.e., `P &lt; PEND&#39;.  */</span>
<a name="l03085"></a>03085 
<a name="l03086"></a>03086 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l03087"></a>03087 <a class="code" href="regex_8c.html#a85a9d04db18bdf4b65ea1113400613e4">at_endline_loc_p</a> (p, pend, syntax)
<a name="l03088"></a>03088     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *p, *pend;
<a name="l03089"></a>03089     <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax;
<a name="l03090"></a>03090 {
<a name="l03091"></a>03091   <span class="keyword">const</span> <span class="keywordtype">char</span> *next = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l03092"></a>03092   <span class="keywordtype">boolean</span> next_backslash = *next == <span class="charliteral">&#39;\\&#39;</span>;
<a name="l03093"></a>03093   <span class="keyword">const</span> <span class="keywordtype">char</span> *next_next = p + 1 &lt; pend ? p + 1 : 0;
<a name="l03094"></a>03094 
<a name="l03095"></a>03095   <span class="keywordflow">return</span>
<a name="l03096"></a>03096        <span class="comment">/* Before a subexpression?  */</span>
<a name="l03097"></a>03097        (syntax &amp; <a class="code" href="regex-gnu_8h.html#af2f17f18a9c771c91d963f466f559e68">RE_NO_BK_PARENS</a> ? *next == <span class="charliteral">&#39;)&#39;</span>
<a name="l03098"></a>03098         : next_backslash &amp;&amp; next_next &amp;&amp; *next_next == <span class="charliteral">&#39;)&#39;</span>)
<a name="l03099"></a>03099        <span class="comment">/* Before an alternative?  */</span>
<a name="l03100"></a>03100     || (syntax &amp; <a class="code" href="regex-gnu_8h.html#a834997e69569c41f0394d6ee120051a0">RE_NO_BK_VBAR</a> ? *next == <span class="charliteral">&#39;|&#39;</span>
<a name="l03101"></a>03101         : next_backslash &amp;&amp; next_next &amp;&amp; *next_next == <span class="charliteral">&#39;|&#39;</span>);
<a name="l03102"></a>03102 }
<a name="l03103"></a>03103 
<a name="l03104"></a><a class="code" href="regex_8c.html#a28dc5088ce179431d47162481e6c6540">03104</a> 
<a name="l03105"></a>03105 <span class="comment">/* Returns true if REGNUM is in one of COMPILE_STACK&#39;s elements and</span>
<a name="l03106"></a>03106 <span class="comment">   false if it&#39;s not.  */</span>
<a name="l03107"></a>03107 
<a name="l03108"></a>03108 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l03109"></a>03109 <a class="code" href="regex_8c.html#a28dc5088ce179431d47162481e6c6540">group_in_compile_stack</a> (compile_stack, regnum)
<a name="l03110"></a>03110     <a class="code" href="structcompile__stack__type.html">compile_stack_type</a> compile_stack;
<a name="l03111"></a>03111     regnum_t regnum;
<a name="l03112"></a>03112 {
<a name="l03113"></a>03113   <span class="keywordtype">int</span> this_element;
<a name="l03114"></a>03114 
<a name="l03115"></a>03115   <span class="keywordflow">for</span> (this_element = compile_stack.avail - 1;
<a name="l03116"></a>03116        this_element &gt;= 0;
<a name="l03117"></a>03117        this_element--)
<a name="l03118"></a>03118     <span class="keywordflow">if</span> (compile_stack.stack[this_element].regnum == regnum)
<a name="l03119"></a>03119       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l03120"></a>03120 
<a name="l03121"></a>03121   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l03122"></a>03122 }
<a name="l03123"></a>03123 
<a name="l03124"></a>03124 
<a name="l03125"></a>03125 <span class="comment">/* Read the ending character of a range (in a bracket expression) from the</span>
<a name="l03126"></a>03126 <span class="comment">   uncompiled pattern *P_PTR (which ends at PEND).  We assume the</span>
<a name="l03127"></a>03127 <span class="comment">   starting character is in `P[-2]&#39;.  (`P[-1]&#39; is the character `-&#39;.)</span>
<a name="l03128"></a>03128 <span class="comment">   Then we set the translation of all bits between the starting and</span>
<a name="l03129"></a>03129 <span class="comment">   ending characters (inclusive) in the compiled pattern B.</span>
<a name="l03130"></a>03130 <span class="comment"></span>
<a name="l03131"></a>03131 <span class="comment">   Return an error code.</span>
<a name="l03132"></a><a class="code" href="regex_8c.html#a06b0c1ae265d6791c041df0ddf6d7ff6">03132</a> <span class="comment"></span>
<a name="l03133"></a>03133 <span class="comment">   We use these short variable names so we can use the same macros as</span>
<a name="l03134"></a>03134 <span class="comment">   `regex_compile&#39; itself.  */</span>
<a name="l03135"></a>03135 
<a name="l03136"></a>03136 <span class="keyword">static</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a>
<a name="l03137"></a>03137 <a class="code" href="regex_8c.html#a06b0c1ae265d6791c041df0ddf6d7ff6">compile_range</a> (p_ptr, pend, translate, syntax, b)
<a name="l03138"></a>03138     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> **p_ptr, *pend;
<a name="l03139"></a>03139     <a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a> translate;
<a name="l03140"></a>03140     <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> syntax;
<a name="l03141"></a>03141     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *b;
<a name="l03142"></a>03142 {
<a name="l03143"></a>03143   <span class="keywordtype">unsigned</span> this_char;
<a name="l03144"></a>03144 
<a name="l03145"></a>03145   <span class="keyword">const</span> <span class="keywordtype">char</span> *p = *p_ptr;
<a name="l03146"></a>03146   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> range_start, range_end;
<a name="l03147"></a>03147 
<a name="l03148"></a>03148   <span class="keywordflow">if</span> (p == pend)
<a name="l03149"></a>03149     <span class="keywordflow">return</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea16489a654c428b506103ccc746adda00">REG_ERANGE</a>;
<a name="l03150"></a>03150 
<a name="l03151"></a>03151   <span class="comment">/* Even though the pattern is a signed `char *&#39;, we need to fetch</span>
<a name="l03152"></a>03152 <span class="comment">     with unsigned char *&#39;s; if the high bit of the pattern character</span>
<a name="l03153"></a>03153 <span class="comment">     is set, the range endpoints will be negative if we fetch using a</span>
<a name="l03154"></a>03154 <span class="comment">     signed char *.</span>
<a name="l03155"></a>03155 <span class="comment"></span>
<a name="l03156"></a>03156 <span class="comment">     We also want to fetch the endpoints without translating them; the</span>
<a name="l03157"></a>03157 <span class="comment">     appropriate translation is done in the bit-setting loop below.  */</span>
<a name="l03158"></a>03158   <span class="comment">/* The SVR4 compiler on the 3B2 had trouble with unsigned const char *.  */</span>
<a name="l03159"></a>03159   range_start = ((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) p)[-2];
<a name="l03160"></a>03160   range_end   = ((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) p)[0];
<a name="l03161"></a>03161 
<a name="l03162"></a>03162   <span class="comment">/* Have to increment the pointer into the pattern string, so the</span>
<a name="l03163"></a>03163 <span class="comment">     caller isn&#39;t still at the ending character.  */</span>
<a name="l03164"></a>03164   (*p_ptr)++;
<a name="l03165"></a>03165 
<a name="l03166"></a>03166   <span class="comment">/* If the start is after the end, the range is empty.  */</span>
<a name="l03167"></a>03167   <span class="keywordflow">if</span> (range_start &gt; range_end)
<a name="l03168"></a>03168     <span class="keywordflow">return</span> syntax &amp; <a class="code" href="regex-gnu_8h.html#ae01c1dfed60f209c2f10f252c3acf9fd">RE_NO_EMPTY_RANGES</a> ? <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea16489a654c428b506103ccc746adda00">REG_ERANGE</a> : <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a>;
<a name="l03169"></a>03169 
<a name="l03170"></a>03170   <span class="comment">/* Here we see why `this_char&#39; has to be larger than an `unsigned</span>
<a name="l03171"></a>03171 <span class="comment">     char&#39; -- the range is inclusive, so if `range_end&#39; == 0xff</span>
<a name="l03172"></a>03172 <span class="comment">     (assuming 8-bit characters), we would otherwise go into an infinite</span>
<a name="l03173"></a>03173 <span class="comment">     loop, since all characters &lt;= 0xff.  */</span>
<a name="l03174"></a>03174   <span class="keywordflow">for</span> (this_char = range_start; this_char &lt;= range_end; this_char++)
<a name="l03175"></a>03175     {
<a name="l03176"></a>03176       <a class="code" href="regex_8c.html#aa09a4c3c61b8d82d7134225bfd5a32f7">SET_LIST_BIT</a> (<a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (this_char));
<a name="l03177"></a>03177     }
<a name="l03178"></a>03178 
<a name="l03179"></a>03179   <span class="keywordflow">return</span> <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a>;
<a name="l03180"></a>03180 }
<a name="l03181"></a>03181 
<a name="l03182"></a>03182 <span class="comment">/* re_compile_fastmap computes a ``fastmap&#39;&#39; for the compiled pattern in</span>
<a name="l03183"></a>03183 <span class="comment">   BUFP.  A fastmap records which of the (1 &lt;&lt; BYTEWIDTH) possible</span>
<a name="l03184"></a>03184 <span class="comment">   characters can start a string that matches the pattern.  This fastmap</span>
<a name="l03185"></a>03185 <span class="comment">   is used by re_search to skip quickly over impossible starting points.</span>
<a name="l03186"></a>03186 <span class="comment"></span>
<a name="l03187"></a>03187 <span class="comment">   The caller must supply the address of a (1 &lt;&lt; BYTEWIDTH)-byte data</span>
<a name="l03188"></a>03188 <span class="comment">   area as BUFP-&gt;fastmap.</span>
<a name="l03189"></a>03189 <span class="comment"></span>
<a name="l03190"></a>03190 <span class="comment">   We set the `fastmap&#39;, `fastmap_accurate&#39;, and `can_be_null&#39; fields in</span>
<a name="l03191"></a><a class="code" href="regex_8c.html#a39979f3b79c423214dc96b34996424a8">03191</a> <span class="comment">   the pattern buffer.</span>
<a name="l03192"></a>03192 <span class="comment"></span>
<a name="l03193"></a>03193 <span class="comment">   Returns 0 if we succeed, -2 if an internal error.   */</span>
<a name="l03194"></a>03194 
<a name="l03195"></a>03195 <span class="keywordtype">int</span>
<a name="l03196"></a>03196 <a class="code" href="regex_8c.html#a39979f3b79c423214dc96b34996424a8">re_compile_fastmap</a> (bufp)
<a name="l03197"></a>03197      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03198"></a>03198 {
<a name="l03199"></a>03199   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>, <a class="code" href="spgrid_8c.html#a166d56cfd4c4c4d27db0bd3cd0fe81d9">k</a>;
<a name="l03200"></a>03200 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE</span>
<a name="l03201"></a>03201 <span class="preprocessor"></span>  <a class="code" href="structfail__stack__type.html">fail_stack_type</a> fail_stack;
<a name="l03202"></a>03202 <span class="preprocessor">#endif</span>
<a name="l03203"></a>03203 <span class="preprocessor"></span><span class="preprocessor">#ifndef REGEX_MALLOC</span>
<a name="l03204"></a>03204 <span class="preprocessor"></span>  <span class="keywordtype">char</span> *destination;
<a name="l03205"></a>03205 <span class="preprocessor">#endif</span>
<a name="l03206"></a>03206 <span class="preprocessor"></span>
<a name="l03207"></a>03207   <span class="keyword">register</span> <span class="keywordtype">char</span> *fastmap = bufp-&gt;fastmap;
<a name="l03208"></a>03208   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pattern = bufp-&gt;buffer;
<a name="l03209"></a>03209   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p = pattern;
<a name="l03210"></a>03210   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pend = pattern + bufp-&gt;used;
<a name="l03211"></a>03211 
<a name="l03212"></a>03212 <span class="preprocessor">#ifdef REL_ALLOC</span>
<a name="l03213"></a>03213 <span class="preprocessor"></span>  <span class="comment">/* This holds the pointer to the failure stack, when</span>
<a name="l03214"></a>03214 <span class="comment">     it is allocated relocatably.  */</span>
<a name="l03215"></a>03215   <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *failure_stack_ptr;
<a name="l03216"></a>03216 <span class="preprocessor">#endif</span>
<a name="l03217"></a>03217 <span class="preprocessor"></span>
<a name="l03218"></a>03218   <span class="comment">/* Assume that each path through the pattern can be null until</span>
<a name="l03219"></a>03219 <span class="comment">     proven otherwise.  We set this false at the bottom of switch</span>
<a name="l03220"></a>03220 <span class="comment">     statement, to which we get only if a particular path doesn&#39;t</span>
<a name="l03221"></a>03221 <span class="comment">     match the empty string.  */</span>
<a name="l03222"></a>03222   <span class="keywordtype">boolean</span> path_can_be_null = <span class="keyword">true</span>;
<a name="l03223"></a>03223 
<a name="l03224"></a>03224   <span class="comment">/* We aren&#39;t doing a `succeed_n&#39; to begin with.  */</span>
<a name="l03225"></a>03225   <span class="keywordtype">boolean</span> succeed_n_p = <span class="keyword">false</span>;
<a name="l03226"></a>03226 
<a name="l03227"></a>03227   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (fastmap != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; p != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03228"></a>03228 
<a name="l03229"></a>03229   <a class="code" href="regex_8c.html#a0a97c6a1ac97ed1288cb47dceabc56df">INIT_FAIL_STACK</a> ();
<a name="l03230"></a>03230   memset (fastmap, 0, 1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>);  <span class="comment">/* Assume nothing&#39;s valid.  */</span>
<a name="l03231"></a>03231   bufp-&gt;fastmap_accurate = 1;       <span class="comment">/* It will be when we&#39;re done.  */</span>
<a name="l03232"></a>03232   bufp-&gt;can_be_null = 0;
<a name="l03233"></a>03233 
<a name="l03234"></a>03234   <span class="keywordflow">while</span> (1)
<a name="l03235"></a>03235     {
<a name="l03236"></a>03236       <span class="keywordflow">if</span> (p == pend || *p == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a37fe3367d5bf38cb0ac666ebae52d4f9">succeed</a>)
<a name="l03237"></a>03237     {
<a name="l03238"></a>03238       <span class="comment">/* We have reached the (effective) end of pattern.  */</span>
<a name="l03239"></a>03239       <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a222a4648230cba6a1801e51b4e2ced77">FAIL_STACK_EMPTY</a> ())
<a name="l03240"></a>03240         {
<a name="l03241"></a>03241           bufp-&gt;can_be_null |= path_can_be_null;
<a name="l03242"></a>03242 
<a name="l03243"></a>03243           <span class="comment">/* Reset for next path.  */</span>
<a name="l03244"></a>03244           path_can_be_null = <span class="keyword">true</span>;
<a name="l03245"></a>03245 
<a name="l03246"></a>03246           p = fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>[--fail_stack.<a class="code" href="structfail__stack__type.html#a1e3d4256deebf37a4528f58d3d261854">avail</a>].<a class="code" href="unionfail__stack__elt.html#ae38105ebed00410e3185ad89ca1d6877">pointer</a>;
<a name="l03247"></a>03247 
<a name="l03248"></a>03248           <span class="keywordflow">continue</span>;
<a name="l03249"></a>03249         }
<a name="l03250"></a>03250       <span class="keywordflow">else</span>
<a name="l03251"></a>03251         <span class="keywordflow">break</span>;
<a name="l03252"></a>03252     }
<a name="l03253"></a>03253 
<a name="l03254"></a>03254       <span class="comment">/* We should never be about to go beyond the end of the pattern.  */</span>
<a name="l03255"></a>03255       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p &lt; pend);
<a name="l03256"></a>03256 
<a name="l03257"></a>03257       <span class="keywordflow">switch</span> (<a class="code" href="regex_8c.html#a95cf7f68f7a75751d4abd454d6add11a">SWITCH_ENUM_CAST</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p++))
<a name="l03258"></a>03258     {
<a name="l03259"></a>03259 
<a name="l03260"></a>03260         <span class="comment">/* I guess the idea here is to simply not bother with a fastmap</span>
<a name="l03261"></a>03261 <span class="comment">           if a backreference is used, since it&#39;s too hard to figure out</span>
<a name="l03262"></a>03262 <span class="comment">           the fastmap for the corresponding group.  Setting</span>
<a name="l03263"></a>03263 <span class="comment">           `can_be_null&#39; stops `re_search_2&#39; from using the fastmap, so</span>
<a name="l03264"></a>03264 <span class="comment">           that is all we do.  */</span>
<a name="l03265"></a>03265     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>:
<a name="l03266"></a>03266       bufp-&gt;can_be_null = 1;
<a name="l03267"></a>03267           <span class="keywordflow">goto</span> done;
<a name="l03268"></a>03268 
<a name="l03269"></a>03269 
<a name="l03270"></a>03270       <span class="comment">/* Following are the cases which match a character.  These end</span>
<a name="l03271"></a>03271 <span class="comment">         with `break&#39;.  */</span>
<a name="l03272"></a>03272 
<a name="l03273"></a>03273     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>:
<a name="l03274"></a>03274           fastmap[p[1]] = 1;
<a name="l03275"></a>03275       <span class="keywordflow">break</span>;
<a name="l03276"></a>03276 
<a name="l03277"></a>03277 
<a name="l03278"></a>03278         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>:
<a name="l03279"></a>03279           <span class="keywordflow">for</span> (j = *p++ * <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a> - 1; j &gt;= 0; j--)
<a name="l03280"></a>03280         <span class="keywordflow">if</span> (p[j / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>] &amp; (1 &lt;&lt; (j % <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)))
<a name="l03281"></a>03281               fastmap[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>] = 1;
<a name="l03282"></a>03282       <span class="keywordflow">break</span>;
<a name="l03283"></a>03283 
<a name="l03284"></a>03284 
<a name="l03285"></a>03285     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>:
<a name="l03286"></a>03286       <span class="comment">/* Chars beyond end of map must be allowed.  */</span>
<a name="l03287"></a>03287       <span class="keywordflow">for</span> (j = *p * BYTEWIDTH; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03288"></a>03288             fastmap[j] = 1;
<a name="l03289"></a>03289 
<a name="l03290"></a>03290       <span class="keywordflow">for</span> (j = *p++ * BYTEWIDTH - 1; j &gt;= 0; j--)
<a name="l03291"></a>03291         <span class="keywordflow">if</span> (!(p[j / BYTEWIDTH] &amp; (1 &lt;&lt; (j % BYTEWIDTH))))
<a name="l03292"></a>03292               fastmap[j] = 1;
<a name="l03293"></a>03293           <span class="keywordflow">break</span>;
<a name="l03294"></a>03294 
<a name="l03295"></a>03295 
<a name="l03296"></a>03296     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>:
<a name="l03297"></a>03297       <span class="keywordflow">for</span> (j = 0; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03298"></a>03298         <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (j) == <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>)
<a name="l03299"></a>03299           fastmap[j] = 1;
<a name="l03300"></a>03300       <span class="keywordflow">break</span>;
<a name="l03301"></a>03301 
<a name="l03302"></a>03302 
<a name="l03303"></a>03303     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>:
<a name="l03304"></a>03304       <span class="keywordflow">for</span> (j = 0; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03305"></a>03305         <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (j) != <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>)
<a name="l03306"></a>03306           fastmap[j] = 1;
<a name="l03307"></a>03307       <span class="keywordflow">break</span>;
<a name="l03308"></a>03308 
<a name="l03309"></a>03309 
<a name="l03310"></a>03310         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">anychar</a>:
<a name="l03311"></a>03311       {
<a name="l03312"></a>03312         <span class="keywordtype">int</span> fastmap_newline = fastmap[<span class="charliteral">&#39;\n&#39;</span>];
<a name="l03313"></a>03313 
<a name="l03314"></a>03314         <span class="comment">/* `.&#39; matches anything ...  */</span>
<a name="l03315"></a>03315         <span class="keywordflow">for</span> (j = 0; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03316"></a>03316           fastmap[j] = 1;
<a name="l03317"></a>03317 
<a name="l03318"></a>03318         <span class="comment">/* ... except perhaps newline.  */</span>
<a name="l03319"></a>03319         <span class="keywordflow">if</span> (!(bufp-&gt;syntax &amp; <a class="code" href="regex-gnu_8h.html#a405fe43871f2df60407b3c8272f4624c">RE_DOT_NEWLINE</a>))
<a name="l03320"></a>03320           fastmap[<span class="charliteral">&#39;\n&#39;</span>] = fastmap_newline;
<a name="l03321"></a>03321 
<a name="l03322"></a>03322         <span class="comment">/* Return if we have already set `can_be_null&#39;; if we have,</span>
<a name="l03323"></a>03323 <span class="comment">           then the fastmap is irrelevant.  Something&#39;s wrong here.  */</span>
<a name="l03324"></a>03324         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bufp-&gt;can_be_null)
<a name="l03325"></a>03325           <span class="keywordflow">goto</span> done;
<a name="l03326"></a>03326 
<a name="l03327"></a>03327         <span class="comment">/* Otherwise, have to check alternative paths.  */</span>
<a name="l03328"></a>03328         <span class="keywordflow">break</span>;
<a name="l03329"></a>03329       }
<a name="l03330"></a>03330 
<a name="l03331"></a>03331 <span class="preprocessor">#ifdef emacs</span>
<a name="l03332"></a>03332 <span class="preprocessor"></span>        <span class="keywordflow">case</span> syntaxspec:
<a name="l03333"></a>03333       k = *p++;
<a name="l03334"></a>03334       <span class="keywordflow">for</span> (j = 0; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03335"></a>03335         <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (j) == (<span class="keyword">enum</span> syntaxcode) k)
<a name="l03336"></a>03336           fastmap[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>] = 1;
<a name="l03337"></a>03337       <span class="keywordflow">break</span>;
<a name="l03338"></a>03338 
<a name="l03339"></a>03339 
<a name="l03340"></a>03340     <span class="keywordflow">case</span> notsyntaxspec:
<a name="l03341"></a>03341       k = *p++;
<a name="l03342"></a>03342       <span class="keywordflow">for</span> (j = 0; j &lt; (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>); j++)
<a name="l03343"></a>03343         <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (j) != (<span class="keyword">enum</span> syntaxcode) k)
<a name="l03344"></a>03344           fastmap[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>] = 1;
<a name="l03345"></a>03345       <span class="keywordflow">break</span>;
<a name="l03346"></a>03346 
<a name="l03347"></a>03347 
<a name="l03348"></a>03348       <span class="comment">/* All cases after this match the empty string.  These end with</span>
<a name="l03349"></a>03349 <span class="comment">         `continue&#39;.  */</span>
<a name="l03350"></a>03350 
<a name="l03351"></a>03351 
<a name="l03352"></a>03352     <span class="keywordflow">case</span> before_dot:
<a name="l03353"></a>03353     <span class="keywordflow">case</span> at_dot:
<a name="l03354"></a>03354     <span class="keywordflow">case</span> after_dot:
<a name="l03355"></a>03355           <span class="keywordflow">continue</span>;
<a name="l03356"></a>03356 <span class="preprocessor">#endif </span><span class="comment">/* emacs */</span>
<a name="l03357"></a>03357 
<a name="l03358"></a>03358 
<a name="l03359"></a>03359         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>:
<a name="l03360"></a>03360         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>:
<a name="l03361"></a>03361         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>:
<a name="l03362"></a>03362     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>:
<a name="l03363"></a>03363     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>:
<a name="l03364"></a>03364     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>:
<a name="l03365"></a>03365     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>:
<a name="l03366"></a>03366     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>:
<a name="l03367"></a>03367     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>:
<a name="l03368"></a>03368         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">push_dummy_failure</a>:
<a name="l03369"></a>03369           <span class="keywordflow">continue</span>;
<a name="l03370"></a>03370 
<a name="l03371"></a>03371 
<a name="l03372"></a>03372     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>:
<a name="l03373"></a>03373         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>:
<a name="l03374"></a>03374     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>:
<a name="l03375"></a>03375     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l03376"></a>03376         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>:
<a name="l03377"></a>03377     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>:
<a name="l03378"></a>03378           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (j, p);
<a name="l03379"></a>03379       p += <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l03380"></a>03380       <span class="keywordflow">if</span> (j &gt; 0)
<a name="l03381"></a>03381         <span class="keywordflow">continue</span>;
<a name="l03382"></a>03382 
<a name="l03383"></a>03383           <span class="comment">/* Jump backward implies we just went through the body of a</span>
<a name="l03384"></a>03384 <span class="comment">             loop and matched nothing.  Opcode jumped to should be</span>
<a name="l03385"></a>03385 <span class="comment">             `on_failure_jump&#39; or `succeed_n&#39;.  Just treat it like an</span>
<a name="l03386"></a>03386 <span class="comment">             ordinary jump.  For a * loop, it has pushed its failure</span>
<a name="l03387"></a>03387 <span class="comment">             point already; if so, discard that as redundant.  */</span>
<a name="l03388"></a>03388           <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p != <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>
<a name="l03389"></a>03389           &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p != <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>)
<a name="l03390"></a>03390         <span class="keywordflow">continue</span>;
<a name="l03391"></a>03391 
<a name="l03392"></a>03392           p++;
<a name="l03393"></a>03393           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (j, p);
<a name="l03394"></a>03394           p += <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l03395"></a>03395 
<a name="l03396"></a>03396           <span class="comment">/* If what&#39;s on the stack is where we are now, pop it.  */</span>
<a name="l03397"></a>03397           <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a222a4648230cba6a1801e51b4e2ced77">FAIL_STACK_EMPTY</a> ()
<a name="l03398"></a>03398           &amp;&amp; fail_stack.<a class="code" href="structfail__stack__type.html#a810ddd6610b10fddebcfbf675f7800c8">stack</a>[fail_stack.<a class="code" href="structfail__stack__type.html#a1e3d4256deebf37a4528f58d3d261854">avail</a> - 1].<a class="code" href="unionfail__stack__elt.html#ae38105ebed00410e3185ad89ca1d6877">pointer</a> == p)
<a name="l03399"></a>03399             fail_stack.<a class="code" href="structfail__stack__type.html#a1e3d4256deebf37a4528f58d3d261854">avail</a>--;
<a name="l03400"></a>03400 
<a name="l03401"></a>03401           <span class="keywordflow">continue</span>;
<a name="l03402"></a>03402 
<a name="l03403"></a>03403 
<a name="l03404"></a>03404         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>:
<a name="l03405"></a>03405         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">on_failure_keep_string_jump</a>:
<a name="l03406"></a>03406     handle_on_failure_jump:
<a name="l03407"></a>03407           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (j, p);
<a name="l03408"></a>03408 
<a name="l03409"></a>03409           <span class="comment">/* For some patterns, e.g., `(a?)?&#39;, `p+j&#39; here points to the</span>
<a name="l03410"></a>03410 <span class="comment">             end of the pattern.  We don&#39;t want to push such a point,</span>
<a name="l03411"></a>03411 <span class="comment">             since when we restore it above, entering the switch will</span>
<a name="l03412"></a>03412 <span class="comment">             increment `p&#39; past the end of the pattern.  We don&#39;t need</span>
<a name="l03413"></a>03413 <span class="comment">             to push such a point since we obviously won&#39;t find any more</span>
<a name="l03414"></a>03414 <span class="comment">             fastmap entries beyond `pend&#39;.  Such a pattern can match</span>
<a name="l03415"></a>03415 <span class="comment">             the null string, though.  */</span>
<a name="l03416"></a>03416           <span class="keywordflow">if</span> (p + j &lt; pend)
<a name="l03417"></a>03417             {
<a name="l03418"></a>03418               <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a78ae8e3bdec768f7fd9a75b31109fa8d">PUSH_PATTERN_OP</a> (p + j, fail_stack))
<a name="l03419"></a>03419         {
<a name="l03420"></a>03420           <a class="code" href="regex_8c.html#af9f8d0785dfac45a23d8d8fdb4df1629">RESET_FAIL_STACK</a> ();
<a name="l03421"></a>03421           <span class="keywordflow">return</span> -2;
<a name="l03422"></a>03422         }
<a name="l03423"></a>03423             }
<a name="l03424"></a>03424           <span class="keywordflow">else</span>
<a name="l03425"></a>03425             bufp-&gt;can_be_null = 1;
<a name="l03426"></a>03426 
<a name="l03427"></a>03427           <span class="keywordflow">if</span> (succeed_n_p)
<a name="l03428"></a>03428             {
<a name="l03429"></a>03429               <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (k, p);   <span class="comment">/* Skip the n.  */</span>
<a name="l03430"></a>03430               succeed_n_p = <span class="keyword">false</span>;
<a name="l03431"></a>03431         }
<a name="l03432"></a>03432 
<a name="l03433"></a>03433           <span class="keywordflow">continue</span>;
<a name="l03434"></a>03434 
<a name="l03435"></a>03435 
<a name="l03436"></a>03436     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>:
<a name="l03437"></a>03437           <span class="comment">/* Get to the number of times to succeed.  */</span>
<a name="l03438"></a>03438           p += 2;
<a name="l03439"></a>03439 
<a name="l03440"></a>03440           <span class="comment">/* Increment p past the n for when k != 0.  */</span>
<a name="l03441"></a>03441           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (k, p);
<a name="l03442"></a>03442           <span class="keywordflow">if</span> (k == 0)
<a name="l03443"></a>03443         {
<a name="l03444"></a>03444               p -= 4;
<a name="l03445"></a>03445           succeed_n_p = <span class="keyword">true</span>;  <span class="comment">/* Spaghetti code alert.  */</span>
<a name="l03446"></a>03446               <span class="keywordflow">goto</span> handle_on_failure_jump;
<a name="l03447"></a>03447             }
<a name="l03448"></a>03448           <span class="keywordflow">continue</span>;
<a name="l03449"></a>03449 
<a name="l03450"></a>03450 
<a name="l03451"></a>03451     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>:
<a name="l03452"></a>03452           p += 4;
<a name="l03453"></a>03453           <span class="keywordflow">continue</span>;
<a name="l03454"></a>03454 
<a name="l03455"></a>03455 
<a name="l03456"></a>03456     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>:
<a name="l03457"></a>03457         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>:
<a name="l03458"></a>03458       p += 2;
<a name="l03459"></a>03459       <span class="keywordflow">continue</span>;
<a name="l03460"></a>03460 
<a name="l03461"></a>03461 
<a name="l03462"></a>03462     <span class="keywordflow">default</span>:
<a name="l03463"></a>03463           abort (); <span class="comment">/* We have listed all the cases.  */</span>
<a name="l03464"></a>03464         } <span class="comment">/* switch *p++ */</span>
<a name="l03465"></a>03465 
<a name="l03466"></a>03466       <span class="comment">/* Getting here means we have found the possible starting</span>
<a name="l03467"></a>03467 <span class="comment">         characters for one path of the pattern -- and that the empty</span>
<a name="l03468"></a>03468 <span class="comment">         string does not match.  We need not follow this path further.</span>
<a name="l03469"></a>03469 <span class="comment">         Instead, look at the next alternative (remembered on the</span>
<a name="l03470"></a>03470 <span class="comment">         stack), or quit if no more.  The test at the top of the loop</span>
<a name="l03471"></a>03471 <span class="comment">         does these things.  */</span>
<a name="l03472"></a>03472       path_can_be_null = <span class="keyword">false</span>;
<a name="l03473"></a>03473       p = pend;
<a name="l03474"></a>03474     } <span class="comment">/* while p */</span>
<a name="l03475"></a>03475 
<a name="l03476"></a>03476   <span class="comment">/* Set `can_be_null&#39; for the last path (also the first path, if the</span>
<a name="l03477"></a>03477 <span class="comment">     pattern is empty).  */</span>
<a name="l03478"></a>03478   bufp-&gt;can_be_null |= path_can_be_null;
<a name="l03479"></a>03479 
<a name="l03480"></a>03480  done:
<a name="l03481"></a>03481   <a class="code" href="regex_8c.html#af9f8d0785dfac45a23d8d8fdb4df1629">RESET_FAIL_STACK</a> ();
<a name="l03482"></a>03482   <span class="keywordflow">return</span> 0;
<a name="l03483"></a>03483 } <span class="comment">/* re_compile_fastmap */</span>
<a name="l03484"></a>03484 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l03485"></a>03485 <span class="preprocessor"></span>weak_alias (__re_compile_fastmap, <a class="code" href="regex_8c.html#a39979f3b79c423214dc96b34996424a8">re_compile_fastmap</a>)
<a name="l03486"></a>03486 <span class="preprocessor">#endif</span>
<a name="l03487"></a>03487 <span class="preprocessor"></span>
<a name="l03488"></a>03488 <span class="comment">/* Set REGS to hold NUM_REGS registers, storing them in STARTS and</span>
<a name="l03489"></a>03489 <span class="comment">   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use</span>
<a name="l03490"></a>03490 <span class="comment">   this memory for recording register information.  STARTS and ENDS</span>
<a name="l03491"></a>03491 <span class="comment">   must be allocated using the malloc library routine, and must each</span>
<a name="l03492"></a>03492 <span class="comment">   be at least NUM_REGS * sizeof (regoff_t) bytes long.</span>
<a name="l03493"></a>03493 <span class="comment"></span>
<a name="l03494"></a>03494 <span class="comment">   If NUM_REGS == 0, then subsequent matches should allocate their own</span>
<a name="l03495"></a>03495 <span class="comment">   register data.</span>
<a name="l03496"></a>03496 <span class="comment"></span>
<a name="l03497"></a><a class="code" href="regex_8c.html#ad9e4e94e6531ff0387a725491e028a41">03497</a> <span class="comment">   Unless this function is called, the first search or match using</span>
<a name="l03498"></a>03498 <span class="comment">   PATTERN_BUFFER will allocate its own register data, without</span>
<a name="l03499"></a>03499 <span class="comment">   freeing the old data.  */</span>
<a name="l03500"></a>03500 
<a name="l03501"></a>03501 <span class="keywordtype">void</span>
<a name="l03502"></a>03502 <a class="code" href="regex_8c.html#ad9e4e94e6531ff0387a725491e028a41">re_set_registers</a> (bufp, regs, num_regs, starts, ends)
<a name="l03503"></a>03503     struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03504"></a>03504     struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03505"></a>03505     <span class="keywordtype">unsigned</span> num_regs;
<a name="l03506"></a>03506     <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a> *starts, *ends;
<a name="l03507"></a>03507 {
<a name="l03508"></a>03508   <span class="keywordflow">if</span> (num_regs)
<a name="l03509"></a>03509     {
<a name="l03510"></a>03510       bufp-&gt;regs_allocated = <a class="code" href="regex-gnu_8h.html#a87642301f41c9c37e7f4d10ab5ade987">REGS_REALLOCATE</a>;
<a name="l03511"></a>03511       regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> = num_regs;
<a name="l03512"></a>03512       regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> = starts;
<a name="l03513"></a>03513       regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> = ends;
<a name="l03514"></a>03514     }
<a name="l03515"></a>03515   <span class="keywordflow">else</span>
<a name="l03516"></a>03516     {
<a name="l03517"></a>03517       bufp-&gt;regs_allocated = <a class="code" href="regex-gnu_8h.html#a2714d3e1903c4824ef31ccae36e702c7">REGS_UNALLOCATED</a>;
<a name="l03518"></a>03518       regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> = 0;
<a name="l03519"></a>03519       regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> = regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> = (<a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a> *) 0;
<a name="l03520"></a>03520     }
<a name="l03521"></a>03521 }
<a name="l03522"></a>03522 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l03523"></a>03523 <span class="preprocessor"></span>weak_alias (__re_set_registers, <a class="code" href="regex_8c.html#ad9e4e94e6531ff0387a725491e028a41">re_set_registers</a>)
<a name="l03524"></a>03524 <span class="preprocessor">#endif</span>
<a name="l03525"></a>03525 <span class="preprocessor"></span>
<a name="l03526"></a>03526 <span class="comment">/* Searching routines.  */</span>
<a name="l03527"></a><a class="code" href="regex_8c.html#afe0743116f59f62a4d00f50a9e9a4932">03527</a> 
<a name="l03528"></a>03528 <span class="comment">/* Like re_search_2, below, but only one string is specified, and</span>
<a name="l03529"></a>03529 <span class="comment">   doesn&#39;t let you say where to stop matching. */</span>
<a name="l03530"></a>03530 
<a name="l03531"></a>03531 <span class="keywordtype">int</span>
<a name="l03532"></a>03532 <a class="code" href="regex_8c.html#afe0743116f59f62a4d00f50a9e9a4932">re_search</a> (bufp, <span class="keywordtype">string</span>, size, startpos, range, regs)
<a name="l03533"></a>03533      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03534"></a>03534      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>;
<a name="l03535"></a>03535      <span class="keywordtype">int</span> size, startpos, range;
<a name="l03536"></a>03536      struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03537"></a>03537 {
<a name="l03538"></a>03538   <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a22058f53f03b835778e1117d7abf0bd7">re_search_2</a> (bufp, <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, <span class="keywordtype">string</span>, size, startpos, range,
<a name="l03539"></a>03539               regs, size);
<a name="l03540"></a>03540 }
<a name="l03541"></a>03541 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l03542"></a>03542 <span class="preprocessor"></span>weak_alias (__re_search, <a class="code" href="regex_8c.html#afe0743116f59f62a4d00f50a9e9a4932">re_search</a>)
<a name="l03543"></a>03543 <span class="preprocessor">#endif</span>
<a name="l03544"></a>03544 <span class="preprocessor"></span>
<a name="l03545"></a>03545 
<a name="l03546"></a>03546 <span class="comment">/* Using the compiled pattern in BUFP-&gt;buffer, first tries to match the</span>
<a name="l03547"></a>03547 <span class="comment">   virtual concatenation of STRING1 and STRING2, starting first at index</span>
<a name="l03548"></a>03548 <span class="comment">   STARTPOS, then at STARTPOS + 1, and so on.</span>
<a name="l03549"></a>03549 <span class="comment"></span>
<a name="l03550"></a>03550 <span class="comment">   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.</span>
<a name="l03551"></a>03551 <span class="comment"></span>
<a name="l03552"></a>03552 <span class="comment">   RANGE is how far to scan while trying to match.  RANGE = 0 means try</span>
<a name="l03553"></a>03553 <span class="comment">   only at STARTPOS; in general, the last start tried is STARTPOS +</span>
<a name="l03554"></a>03554 <span class="comment">   RANGE.</span>
<a name="l03555"></a>03555 <span class="comment"></span>
<a name="l03556"></a>03556 <span class="comment">   In REGS, return the indices of the virtual concatenation of STRING1</span>
<a name="l03557"></a>03557 <span class="comment">   and STRING2 that matched the entire BUFP-&gt;buffer and its contained</span>
<a name="l03558"></a>03558 <span class="comment">   subexpressions.</span>
<a name="l03559"></a>03559 <span class="comment"></span>
<a name="l03560"></a>03560 <span class="comment">   Do not consider matching one past the index STOP in the virtual</span>
<a name="l03561"></a>03561 <span class="comment">   concatenation of STRING1 and STRING2.</span>
<a name="l03562"></a>03562 <span class="comment"></span>
<a name="l03563"></a><a class="code" href="regex_8c.html#a22058f53f03b835778e1117d7abf0bd7">03563</a> <span class="comment">   We return either the position in the strings at which the match was</span>
<a name="l03564"></a>03564 <span class="comment">   found, -1 if no match, or -2 if error (such as failure</span>
<a name="l03565"></a>03565 <span class="comment">   stack overflow).  */</span>
<a name="l03566"></a>03566 
<a name="l03567"></a>03567 <span class="keywordtype">int</span>
<a name="l03568"></a>03568 <a class="code" href="regex_8c.html#a22058f53f03b835778e1117d7abf0bd7">re_search_2</a> (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
<a name="l03569"></a>03569      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03570"></a>03570      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *string1, *string2;
<a name="l03571"></a>03571      <span class="keywordtype">int</span> size1, size2;
<a name="l03572"></a>03572      <span class="keywordtype">int</span> startpos;
<a name="l03573"></a>03573      <span class="keywordtype">int</span> range;
<a name="l03574"></a>03574      struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03575"></a>03575      <span class="keywordtype">int</span> stop;
<a name="l03576"></a>03576 {
<a name="l03577"></a>03577   <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l03578"></a>03578   <span class="keyword">register</span> <span class="keywordtype">char</span> *fastmap = bufp-&gt;fastmap;
<a name="l03579"></a>03579   <span class="keyword">register</span> <a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a> translate = bufp-&gt;translate;
<a name="l03580"></a>03580   <span class="keywordtype">int</span> total_size = size1 + size2;
<a name="l03581"></a>03581   <span class="keywordtype">int</span> endpos = startpos + range;
<a name="l03582"></a>03582 
<a name="l03583"></a>03583   <span class="comment">/* Check for out-of-range STARTPOS.  */</span>
<a name="l03584"></a>03584   <span class="keywordflow">if</span> (startpos &lt; 0 || startpos &gt; total_size)
<a name="l03585"></a>03585     <span class="keywordflow">return</span> -1;
<a name="l03586"></a>03586 
<a name="l03587"></a>03587   <span class="comment">/* Fix up RANGE if it might eventually take us outside</span>
<a name="l03588"></a>03588 <span class="comment">     the virtual concatenation of STRING1 and STRING2.</span>
<a name="l03589"></a>03589 <span class="comment">     Make sure we won&#39;t move STARTPOS below 0 or above TOTAL_SIZE.  */</span>
<a name="l03590"></a>03590   <span class="keywordflow">if</span> (endpos &lt; 0)
<a name="l03591"></a>03591     range = 0 - startpos;
<a name="l03592"></a>03592   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (endpos &gt; total_size)
<a name="l03593"></a>03593     range = total_size - startpos;
<a name="l03594"></a>03594 
<a name="l03595"></a>03595   <span class="comment">/* If the search isn&#39;t to be a backwards one, don&#39;t waste time in a</span>
<a name="l03596"></a>03596 <span class="comment">     search for a pattern that must be anchored.  */</span>
<a name="l03597"></a>03597   <span class="keywordflow">if</span> (bufp-&gt;used &gt; 0 &amp;&amp; range &gt; 0
<a name="l03598"></a>03598       &amp;&amp; ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) bufp-&gt;buffer[0] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>
<a name="l03599"></a>03599       <span class="comment">/* `begline&#39; is like `begbuf&#39; if it cannot match at newlines.  */</span>
<a name="l03600"></a>03600       || ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) bufp-&gt;buffer[0] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>
<a name="l03601"></a>03601           &amp;&amp; !bufp-&gt;newline_anchor)))
<a name="l03602"></a>03602     {
<a name="l03603"></a>03603       <span class="keywordflow">if</span> (startpos &gt; 0)
<a name="l03604"></a>03604     <span class="keywordflow">return</span> -1;
<a name="l03605"></a>03605       <span class="keywordflow">else</span>
<a name="l03606"></a>03606     range = 1;
<a name="l03607"></a>03607     }
<a name="l03608"></a>03608 
<a name="l03609"></a>03609 <span class="preprocessor">#ifdef emacs</span>
<a name="l03610"></a>03610 <span class="preprocessor"></span>  <span class="comment">/* In a forward search for something that starts with \=.</span>
<a name="l03611"></a>03611 <span class="comment">     don&#39;t keep searching past point.  */</span>
<a name="l03612"></a>03612   <span class="keywordflow">if</span> (bufp-&gt;used &gt; 0 &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) bufp-&gt;buffer[0] == at_dot &amp;&amp; range &gt; 0)
<a name="l03613"></a>03613     {
<a name="l03614"></a>03614       range = PT - startpos;
<a name="l03615"></a>03615       <span class="keywordflow">if</span> (range &lt;= 0)
<a name="l03616"></a>03616     <span class="keywordflow">return</span> -1;
<a name="l03617"></a>03617     }
<a name="l03618"></a>03618 <span class="preprocessor">#endif </span><span class="comment">/* emacs */</span>
<a name="l03619"></a>03619 
<a name="l03620"></a>03620   <span class="comment">/* Update the fastmap now if not correct already.  */</span>
<a name="l03621"></a>03621   <span class="keywordflow">if</span> (fastmap &amp;&amp; !bufp-&gt;fastmap_accurate)
<a name="l03622"></a>03622     <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a39979f3b79c423214dc96b34996424a8">re_compile_fastmap</a> (bufp) == -2)
<a name="l03623"></a>03623       <span class="keywordflow">return</span> -2;
<a name="l03624"></a>03624 
<a name="l03625"></a>03625   <span class="comment">/* Loop through the string, looking for a place to start matching.  */</span>
<a name="l03626"></a>03626   <span class="keywordflow">for</span> (;;)
<a name="l03627"></a>03627     {
<a name="l03628"></a>03628       <span class="comment">/* If a fastmap is supplied, skip quickly over characters that</span>
<a name="l03629"></a>03629 <span class="comment">         cannot be the start of a match.  If the pattern can match the</span>
<a name="l03630"></a>03630 <span class="comment">         null string, however, we don&#39;t need to skip characters; we want</span>
<a name="l03631"></a>03631 <span class="comment">         the first null string.  */</span>
<a name="l03632"></a>03632       <span class="keywordflow">if</span> (fastmap &amp;&amp; startpos &lt; total_size &amp;&amp; !bufp-&gt;can_be_null)
<a name="l03633"></a>03633     {
<a name="l03634"></a>03634       <span class="keywordflow">if</span> (range &gt; 0)    <span class="comment">/* Searching forwards.  */</span>
<a name="l03635"></a>03635         {
<a name="l03636"></a>03636           <span class="keyword">register</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *d;
<a name="l03637"></a>03637           <span class="keyword">register</span> <span class="keywordtype">int</span> lim = 0;
<a name="l03638"></a>03638           <span class="keywordtype">int</span> irange = range;
<a name="l03639"></a>03639 
<a name="l03640"></a>03640               <span class="keywordflow">if</span> (startpos &lt; size1 &amp;&amp; startpos + range &gt;= size1)
<a name="l03641"></a>03641                 lim = range - (size1 - startpos);
<a name="l03642"></a>03642 
<a name="l03643"></a>03643           d = (startpos &gt;= size1 ? string2 - size1 : string1) + startpos;
<a name="l03644"></a>03644 
<a name="l03645"></a>03645               <span class="comment">/* Written out as an if-else to avoid testing `translate&#39;</span>
<a name="l03646"></a>03646 <span class="comment">                 inside the loop.  */</span>
<a name="l03647"></a>03647           <span class="keywordflow">if</span> (translate)
<a name="l03648"></a>03648                 <span class="keywordflow">while</span> (range &gt; lim
<a name="l03649"></a>03649                        &amp;&amp; !fastmap[(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)
<a name="l03650"></a>03650                    translate[(<span class="keywordtype">unsigned</span> char) *d++]])
<a name="l03651"></a>03651                   range--;
<a name="l03652"></a>03652           <span class="keywordflow">else</span>
<a name="l03653"></a>03653                 <span class="keywordflow">while</span> (range &gt; lim &amp;&amp; !fastmap[(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) *d++])
<a name="l03654"></a>03654                   range--;
<a name="l03655"></a>03655 
<a name="l03656"></a>03656           startpos += irange - range;
<a name="l03657"></a>03657         }
<a name="l03658"></a>03658       <span class="keywordflow">else</span>              <span class="comment">/* Searching backwards.  */</span>
<a name="l03659"></a>03659         {
<a name="l03660"></a>03660           <span class="keyword">register</span> <span class="keywordtype">char</span> c = (size1 == 0 || startpos &gt;= size1
<a name="l03661"></a>03661                                  ? string2[startpos - size1]
<a name="l03662"></a>03662                                  : string1[startpos]);
<a name="l03663"></a>03663 
<a name="l03664"></a>03664           <span class="keywordflow">if</span> (!fastmap[(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (c)])
<a name="l03665"></a>03665         <span class="keywordflow">goto</span> advance;
<a name="l03666"></a>03666         }
<a name="l03667"></a>03667     }
<a name="l03668"></a>03668 
<a name="l03669"></a>03669       <span class="comment">/* If can&#39;t match the null string, and that&#39;s all we have left, fail.  */</span>
<a name="l03670"></a>03670       <span class="keywordflow">if</span> (range &gt;= 0 &amp;&amp; startpos == total_size &amp;&amp; fastmap
<a name="l03671"></a>03671           &amp;&amp; !bufp-&gt;can_be_null)
<a name="l03672"></a>03672     <span class="keywordflow">return</span> -1;
<a name="l03673"></a>03673 
<a name="l03674"></a>03674       val = <a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">re_match_2_internal</a> (bufp, string1, size1, string2, size2,
<a name="l03675"></a>03675                  startpos, regs, stop);
<a name="l03676"></a>03676 <span class="preprocessor">#ifndef REGEX_MALLOC</span>
<a name="l03677"></a>03677 <span class="preprocessor"></span><span class="preprocessor"># ifdef C_ALLOCA</span>
<a name="l03678"></a>03678 <span class="preprocessor"></span>      alloca (0);
<a name="l03679"></a>03679 <span class="preprocessor"># endif</span>
<a name="l03680"></a>03680 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03681"></a>03681 <span class="preprocessor"></span>
<a name="l03682"></a>03682       <span class="keywordflow">if</span> (val &gt;= 0)
<a name="l03683"></a>03683     <span class="keywordflow">return</span> startpos;
<a name="l03684"></a>03684 
<a name="l03685"></a>03685       <span class="keywordflow">if</span> (val == -2)
<a name="l03686"></a>03686     <span class="keywordflow">return</span> -2;
<a name="l03687"></a>03687 
<a name="l03688"></a>03688     advance:
<a name="l03689"></a>03689       <span class="keywordflow">if</span> (!range)
<a name="l03690"></a>03690         <span class="keywordflow">break</span>;
<a name="l03691"></a>03691       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (range &gt; 0)
<a name="l03692"></a>03692         {
<a name="l03693"></a>03693           range--;
<a name="l03694"></a>03694           startpos++;
<a name="l03695"></a>03695         }
<a name="l03696"></a>03696       <span class="keywordflow">else</span>
<a name="l03697"></a>03697         {
<a name="l03698"></a>03698           range++;
<a name="l03699"></a>03699           startpos--;
<a name="l03700"></a>03700         }
<a name="l03701"></a>03701     }
<a name="l03702"></a>03702   <span class="keywordflow">return</span> -1;
<a name="l03703"></a>03703 } <span class="comment">/* re_search_2 */</span>
<a name="l03704"></a>03704 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l03705"></a><a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">03705</a> <span class="preprocessor"></span>weak_alias (__re_search_2, <a class="code" href="regex_8c.html#a22058f53f03b835778e1117d7abf0bd7">re_search_2</a>)
<a name="l03706"></a>03706 <span class="preprocessor">#endif</span>
<a name="l03707"></a>03707 <span class="preprocessor"></span>
<a name="l03708"></a>03708 <span class="comment">/* This converts PTR, a pointer into one of the search strings `string1&#39;</span>
<a name="l03709"></a>03709 <span class="comment">   and `string2&#39; into an offset from the beginning of that string.  */</span>
<a name="l03710"></a>03710 <span class="preprocessor">#define POINTER_TO_OFFSET(ptr)          \</span>
<a name="l03711"></a>03711 <span class="preprocessor">  (FIRST_STRING_P (ptr)             \</span>
<a name="l03712"></a><a class="code" href="regex_8c.html#a7c5c8716cb01b2ad2cb50732817cbe4d">03712</a> <span class="preprocessor">   ? ((regoff_t) ((ptr) - string1))     \</span>
<a name="l03713"></a>03713 <span class="preprocessor">   : ((regoff_t) ((ptr) - string2 + size1)))</span>
<a name="l03714"></a>03714 <span class="preprocessor"></span>
<a name="l03715"></a>03715 <span class="comment">/* Macros for dealing with the split strings in re_match_2.  */</span>
<a name="l03716"></a><a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">03716</a> 
<a name="l03717"></a>03717 <span class="preprocessor">#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)</span>
<a name="l03718"></a>03718 <span class="preprocessor"></span>
<a name="l03719"></a>03719 <span class="comment">/* Call before fetching a character with *d.  This switches over to</span>
<a name="l03720"></a>03720 <span class="comment">   string2 if necessary.  */</span>
<a name="l03721"></a>03721 <span class="preprocessor">#define PREFETCH()                          \</span>
<a name="l03722"></a>03722 <span class="preprocessor">  while (d == dend)                             \</span>
<a name="l03723"></a>03723 <span class="preprocessor">    {                                   \</span>
<a name="l03724"></a>03724 <span class="preprocessor">      </span><span class="comment">/* End of string2 =&gt; fail.  */</span>                    \
<a name="l03725"></a>03725       if (dend == end_match_2)                      \
<a name="l03726"></a>03726         goto fail;                          \
<a name="l03727"></a>03727       <span class="comment">/* End of string1 =&gt; advance to string2.  */</span>          \
<a name="l03728"></a>03728       d = string2;                              \
<a name="l03729"></a>03729       dend = end_match_2;                       \
<a name="l03730"></a><a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">03730</a>     }
<a name="l03731"></a><a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">03731</a> 
<a name="l03732"></a>03732 
<a name="l03733"></a>03733 <span class="comment">/* Test if at very beginning or at very end of the virtual concatenation</span>
<a name="l03734"></a>03734 <span class="comment">   of `string1&#39; and `string2&#39;.  If only one string, it&#39;s `string2&#39;.  */</span>
<a name="l03735"></a>03735 <span class="preprocessor">#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)</span>
<a name="l03736"></a>03736 <span class="preprocessor"></span><span class="preprocessor">#define AT_STRINGS_END(d) ((d) == end2)</span>
<a name="l03737"></a>03737 <span class="preprocessor"></span>
<a name="l03738"></a><a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">03738</a> 
<a name="l03739"></a>03739 <span class="comment">/* Test if D points to a character which is word-constituent.  We have</span>
<a name="l03740"></a>03740 <span class="comment">   two special cases to check for: if past the end of string1, look at</span>
<a name="l03741"></a>03741 <span class="comment">   the first character in string2; and if before the beginning of</span>
<a name="l03742"></a>03742 <span class="comment">   string2, look at the last character in string1.  */</span>
<a name="l03743"></a>03743 <span class="preprocessor">#define WORDCHAR_P(d)                           \</span>
<a name="l03744"></a>03744 <span class="preprocessor">  (SYNTAX ((d) == end1 ? *string2                   \</span>
<a name="l03745"></a>03745 <span class="preprocessor">           : (d) == string2 - 1 ? *(end1 - 1) : *(d))           \</span>
<a name="l03746"></a>03746 <span class="preprocessor">   == Sword)</span>
<a name="l03747"></a>03747 <span class="preprocessor"></span>
<a name="l03748"></a>03748 <span class="comment">/* Disabled due to a compiler bug -- see comment at case wordbound */</span>
<a name="l03749"></a>03749 <span class="preprocessor">#if 0</span>
<a name="l03750"></a>03750 <span class="preprocessor"></span><span class="comment">/* Test if the character before D and the one at D differ with respect</span>
<a name="l03751"></a>03751 <span class="comment">   to being word-constituent.  */</span>
<a name="l03752"></a>03752 <span class="preprocessor">#define AT_WORD_BOUNDARY(d)                     \</span>
<a name="l03753"></a>03753 <span class="preprocessor">  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)             \</span>
<a name="l03754"></a><a class="code" href="regex_8c.html#a0bf43761ab92cb6bd95c4ebc080d2a5c">03754</a> <span class="preprocessor">   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))</span>
<a name="l03755"></a><a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">03755</a> <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03756"></a>03756 <span class="preprocessor"></span>
<a name="l03757"></a>03757 <span class="comment">/* Free everything we malloc.  */</span>
<a name="l03758"></a>03758 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE</span>
<a name="l03759"></a>03759 <span class="preprocessor"></span><span class="preprocessor"># define FREE_VAR(var) if (var) REGEX_FREE (var); var = NULL</span>
<a name="l03760"></a>03760 <span class="preprocessor"></span><span class="preprocessor"># define FREE_VARIABLES()                       \</span>
<a name="l03761"></a>03761 <span class="preprocessor">  do {                                  \</span>
<a name="l03762"></a>03762 <span class="preprocessor">    REGEX_FREE_STACK (fail_stack.stack);                \</span>
<a name="l03763"></a>03763 <span class="preprocessor">    FREE_VAR (regstart);                        \</span>
<a name="l03764"></a>03764 <span class="preprocessor">    FREE_VAR (regend);                          \</span>
<a name="l03765"></a>03765 <span class="preprocessor">    FREE_VAR (old_regstart);                        \</span>
<a name="l03766"></a>03766 <span class="preprocessor">    FREE_VAR (old_regend);                      \</span>
<a name="l03767"></a>03767 <span class="preprocessor">    FREE_VAR (best_regstart);                       \</span>
<a name="l03768"></a>03768 <span class="preprocessor">    FREE_VAR (best_regend);                     \</span>
<a name="l03769"></a>03769 <span class="preprocessor">    FREE_VAR (reg_info);                        \</span>
<a name="l03770"></a>03770 <span class="preprocessor">    FREE_VAR (reg_dummy);                       \</span>
<a name="l03771"></a>03771 <span class="preprocessor">    FREE_VAR (reg_info_dummy);                      \</span>
<a name="l03772"></a>03772 <span class="preprocessor">  } while (0)</span>
<a name="l03773"></a>03773 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l03774"></a>03774 <span class="preprocessor"></span><span class="preprocessor"># define FREE_VARIABLES() ((void)0) </span><span class="comment">/* Do nothing!  But inhibit gcc warning. */</span>
<a name="l03775"></a>03775 <span class="preprocessor">#endif </span><span class="comment">/* not MATCH_MAY_ALLOCATE */</span>
<a name="l03776"></a>03776 
<a name="l03777"></a>03777 <span class="comment">/* These values must meet several constraints.  They must not be valid</span>
<a name="l03778"></a>03778 <span class="comment">   register values; since we have a limit of 255 registers (because</span>
<a name="l03779"></a><a class="code" href="regex_8c.html#ab79c167c4cd771eeb9f88cf07c8b66c2">03779</a> <span class="comment">   we use only one byte in the pattern for the register number), we can</span>
<a name="l03780"></a><a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">03780</a> <span class="comment">   use numbers larger than 255.  They must differ by 1, because of</span>
<a name="l03781"></a>03781 <span class="comment">   NUM_FAILURE_ITEMS above.  And the value for the lowest register must</span>
<a name="l03782"></a>03782 <span class="comment">   be larger than the value for the highest register, so we do not try</span>
<a name="l03783"></a>03783 <span class="comment">   to actually save any registers when none are active.  */</span>
<a name="l03784"></a>03784 <span class="preprocessor">#define NO_HIGHEST_ACTIVE_REG (1 &lt;&lt; BYTEWIDTH)</span>
<a name="l03785"></a>03785 <span class="preprocessor"></span><span class="preprocessor">#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)</span>
<a name="l03786"></a>03786 <span class="preprocessor"></span>
<a name="l03787"></a>03787 <span class="comment">/* Matching routines.  */</span>
<a name="l03788"></a><a class="code" href="regex_8c.html#a543f20720a243ca31e0667b697de3bda">03788</a> 
<a name="l03789"></a>03789 <span class="preprocessor">#ifndef emacs   </span><span class="comment">/* Emacs never uses this.  */</span>
<a name="l03790"></a>03790 <span class="comment">/* re_match is like re_match_2 except it takes only a single string.  */</span>
<a name="l03791"></a>03791 
<a name="l03792"></a>03792 <span class="keywordtype">int</span>
<a name="l03793"></a>03793 <a class="code" href="regex_8c.html#a543f20720a243ca31e0667b697de3bda">re_match</a> (bufp, <span class="keywordtype">string</span>, size, pos, regs)
<a name="l03794"></a>03794      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03795"></a>03795      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>;
<a name="l03796"></a>03796      <span class="keywordtype">int</span> size, pos;
<a name="l03797"></a>03797      struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03798"></a>03798 {
<a name="l03799"></a>03799   <span class="keywordtype">int</span> result = <a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">re_match_2_internal</a> (bufp, <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, <span class="keywordtype">string</span>, size,
<a name="l03800"></a>03800                     pos, regs, size);
<a name="l03801"></a>03801 <span class="preprocessor"># ifndef REGEX_MALLOC</span>
<a name="l03802"></a>03802 <span class="preprocessor"></span><span class="preprocessor">#  ifdef C_ALLOCA</span>
<a name="l03803"></a>03803 <span class="preprocessor"></span>  alloca (0);
<a name="l03804"></a>03804 <span class="preprocessor">#  endif</span>
<a name="l03805"></a>03805 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
<a name="l03806"></a>03806 <span class="preprocessor"></span>  <span class="keywordflow">return</span> result;
<a name="l03807"></a>03807 }
<a name="l03808"></a>03808 <span class="preprocessor"># ifdef _LIBC</span>
<a name="l03809"></a>03809 <span class="preprocessor"></span>weak_alias (__re_match, <a class="code" href="regex_8c.html#a543f20720a243ca31e0667b697de3bda">re_match</a>)
<a name="l03810"></a>03810 <span class="preprocessor"># endif</span>
<a name="l03811"></a>03811 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* not emacs */</span>
<a name="l03812"></a>03812 
<a name="l03813"></a>03813 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#ac1a3adc04ca27d22992ea483708c5812">group_match_null_string_p</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **p,
<a name="l03814"></a>03814                             <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end,
<a name="l03815"></a>03815                         <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info));
<a name="l03816"></a>03816 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#a4d088a8cdab2f2daa400a5df18cbf594">alt_match_null_string_p</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p,
<a name="l03817"></a>03817                           <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end,
<a name="l03818"></a>03818                         <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info));
<a name="l03819"></a>03819 <span class="keyword">static</span> <span class="keywordtype">boolean</span> <a class="code" href="regex_8c.html#a97ff784b1a6ed91bbc1013a3a44a05da">common_op_match_null_string_p</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **p,
<a name="l03820"></a>03820                             <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *end,
<a name="l03821"></a>03821                         <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info));
<a name="l03822"></a>03822 <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="regex_8c.html#a831fca3c806cff281a70c8757c40b134">bcmp_translate</a> <a class="code" href="regex-gnu_8h.html#a891e32371932a8b8e51dafe8382f3ea2">_RE_ARGS</a> ((<span class="keyword">const</span> <span class="keywordtype">char</span> *s1, <span class="keyword">const</span> <span class="keywordtype">char</span> *s2,
<a name="l03823"></a>03823                      <span class="keywordtype">int</span> len, <span class="keywordtype">char</span> *translate));
<a name="l03824"></a>03824 
<a name="l03825"></a>03825 <span class="comment">/* re_match_2 matches the compiled pattern in BUFP against the</span>
<a name="l03826"></a>03826 <span class="comment">   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1</span>
<a name="l03827"></a>03827 <span class="comment">   and SIZE2, respectively).  We start matching at POS, and stop</span>
<a name="l03828"></a>03828 <span class="comment">   matching at STOP.</span>
<a name="l03829"></a>03829 <span class="comment"></span>
<a name="l03830"></a>03830 <span class="comment">   If REGS is non-null and the `no_sub&#39; field of BUFP is nonzero, we</span>
<a name="l03831"></a>03831 <span class="comment">   store offsets for the substring each group matched in REGS.  See the</span>
<a name="l03832"></a>03832 <span class="comment">   documentation for exactly how many groups we fill.</span>
<a name="l03833"></a>03833 <span class="comment"></span>
<a name="l03834"></a><a class="code" href="regex_8c.html#ae4aacc367337cbfc7513b4be57808b78">03834</a> <span class="comment">   We return -1 if no match, -2 if an internal error (such as the</span>
<a name="l03835"></a>03835 <span class="comment">   failure stack overflowing).  Otherwise, we return the length of the</span>
<a name="l03836"></a>03836 <span class="comment">   matched substring.  */</span>
<a name="l03837"></a>03837 
<a name="l03838"></a>03838 <span class="keywordtype">int</span>
<a name="l03839"></a>03839 <a class="code" href="regex_8c.html#ae4aacc367337cbfc7513b4be57808b78">re_match_2</a> (bufp, string1, size1, string2, size2, pos, regs, stop)
<a name="l03840"></a>03840      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03841"></a>03841      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *string1, *string2;
<a name="l03842"></a>03842      <span class="keywordtype">int</span> size1, size2;
<a name="l03843"></a>03843      <span class="keywordtype">int</span> pos;
<a name="l03844"></a>03844      struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03845"></a>03845      <span class="keywordtype">int</span> stop;
<a name="l03846"></a>03846 {
<a name="l03847"></a>03847   <span class="keywordtype">int</span> result = <a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">re_match_2_internal</a> (bufp, string1, size1, string2, size2,
<a name="l03848"></a>03848                     pos, regs, stop);
<a name="l03849"></a>03849 <span class="preprocessor">#ifndef REGEX_MALLOC</span>
<a name="l03850"></a>03850 <span class="preprocessor"></span><span class="preprocessor"># ifdef C_ALLOCA</span>
<a name="l03851"></a>03851 <span class="preprocessor"></span>  alloca (0);
<a name="l03852"></a>03852 <span class="preprocessor"># endif</span>
<a name="l03853"></a>03853 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03854"></a>03854 <span class="preprocessor"></span>  <span class="keywordflow">return</span> result;
<a name="l03855"></a>03855 }
<a name="l03856"></a>03856 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l03857"></a>03857 <span class="preprocessor"></span>weak_alias (__re_match_2, <a class="code" href="regex_8c.html#ae4aacc367337cbfc7513b4be57808b78">re_match_2</a>)
<a name="l03858"></a><a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">03858</a> <span class="preprocessor">#endif</span>
<a name="l03859"></a>03859 <span class="preprocessor"></span>
<a name="l03860"></a>03860 <span class="comment">/* This is a separate function so that we can force an alloca cleanup</span>
<a name="l03861"></a>03861 <span class="comment">   afterwards.  */</span>
<a name="l03862"></a>03862 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03863"></a>03863 <a class="code" href="regex_8c.html#a3b426565d92028a1cf7113fcf41942c8">re_match_2_internal</a> (bufp, string1, size1, string2, size2, pos, regs, stop)
<a name="l03864"></a>03864      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l03865"></a>03865      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *string1, *string2;
<a name="l03866"></a>03866      <span class="keywordtype">int</span> size1, size2;
<a name="l03867"></a>03867      <span class="keywordtype">int</span> pos;
<a name="l03868"></a>03868      struct <a class="code" href="structre__registers.html">re_registers</a> *regs;
<a name="l03869"></a>03869      <span class="keywordtype">int</span> stop;
<a name="l03870"></a>03870 {
<a name="l03871"></a>03871   <span class="comment">/* General temporaries.  */</span>
<a name="l03872"></a>03872   <span class="keywordtype">int</span> mcnt;
<a name="l03873"></a>03873   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1;
<a name="l03874"></a>03874 
<a name="l03875"></a>03875   <span class="comment">/* Just past the end of the corresponding string.  */</span>
<a name="l03876"></a>03876   <span class="keyword">const</span> <span class="keywordtype">char</span> *end1, *end2;
<a name="l03877"></a>03877 
<a name="l03878"></a>03878   <span class="comment">/* Pointers into string1 and string2, just past the last characters in</span>
<a name="l03879"></a>03879 <span class="comment">     each to consider matching.  */</span>
<a name="l03880"></a>03880   <span class="keyword">const</span> <span class="keywordtype">char</span> *end_match_1, *end_match_2;
<a name="l03881"></a>03881 
<a name="l03882"></a>03882   <span class="comment">/* Where we are in the data, and the end of the current string.  */</span>
<a name="l03883"></a>03883   <span class="keyword">const</span> <span class="keywordtype">char</span> *d, *dend;
<a name="l03884"></a>03884 
<a name="l03885"></a>03885   <span class="comment">/* Where we are in the pattern, and the end of the pattern.  */</span>
<a name="l03886"></a>03886   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p = bufp-&gt;buffer;
<a name="l03887"></a>03887   <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pend = p + bufp-&gt;used;
<a name="l03888"></a>03888 
<a name="l03889"></a>03889   <span class="comment">/* Mark the opcode just after a start_memory, so we can test for an</span>
<a name="l03890"></a>03890 <span class="comment">     empty subpattern when we get to the stop_memory.  */</span>
<a name="l03891"></a>03891   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *just_past_start_mem = 0;
<a name="l03892"></a>03892 
<a name="l03893"></a>03893   <span class="comment">/* We use this to map every character in the string.  */</span>
<a name="l03894"></a>03894   <a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a> translate = bufp-&gt;translate;
<a name="l03895"></a>03895 
<a name="l03896"></a>03896   <span class="comment">/* Failure point stack.  Each place that can handle a failure further</span>
<a name="l03897"></a>03897 <span class="comment">     down the line pushes a failure point on this stack.  It consists of</span>
<a name="l03898"></a>03898 <span class="comment">     restart, regend, and reg_info for all registers corresponding to</span>
<a name="l03899"></a>03899 <span class="comment">     the subexpressions we&#39;re currently inside, plus the number of such</span>
<a name="l03900"></a>03900 <span class="comment">     registers, and, finally, two char *&#39;s.  The first char * is where</span>
<a name="l03901"></a>03901 <span class="comment">     to resume scanning the pattern; the second one is where to resume</span>
<a name="l03902"></a>03902 <span class="comment">     scanning the strings.  If the latter is zero, the failure point is</span>
<a name="l03903"></a>03903 <span class="comment">     a ``dummy&#39;&#39;; if a failure happens and the failure point is a dummy,</span>
<a name="l03904"></a>03904 <span class="comment">     it gets discarded and the next next one is tried.  */</span>
<a name="l03905"></a>03905 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, this is global.  */</span>
<a name="l03906"></a>03906   <a class="code" href="structfail__stack__type.html">fail_stack_type</a> fail_stack;
<a name="l03907"></a>03907 <span class="preprocessor">#endif</span>
<a name="l03908"></a>03908 <span class="preprocessor"></span><span class="preprocessor">#ifdef DEBUG</span>
<a name="l03909"></a>03909 <span class="preprocessor"></span>  <span class="keyword">static</span> <span class="keywordtype">unsigned</span> failure_id;
<a name="l03910"></a>03910   <span class="keywordtype">unsigned</span> nfailure_points_pushed = 0, nfailure_points_popped = 0;
<a name="l03911"></a>03911 <span class="preprocessor">#endif</span>
<a name="l03912"></a>03912 <span class="preprocessor"></span>
<a name="l03913"></a>03913 <span class="preprocessor">#ifdef REL_ALLOC</span>
<a name="l03914"></a>03914 <span class="preprocessor"></span>  <span class="comment">/* This holds the pointer to the failure stack, when</span>
<a name="l03915"></a>03915 <span class="comment">     it is allocated relocatably.  */</span>
<a name="l03916"></a>03916   <a class="code" href="unionfail__stack__elt.html">fail_stack_elt_t</a> *failure_stack_ptr;
<a name="l03917"></a>03917 <span class="preprocessor">#endif</span>
<a name="l03918"></a>03918 <span class="preprocessor"></span>
<a name="l03919"></a>03919   <span class="comment">/* We fill all the registers internally, independent of what we</span>
<a name="l03920"></a>03920 <span class="comment">     return, for use in backreferences.  The number here includes</span>
<a name="l03921"></a>03921 <span class="comment">     an element for register zero.  */</span>
<a name="l03922"></a>03922   <span class="keywordtype">size_t</span> num_regs = bufp-&gt;re_nsub + 1;
<a name="l03923"></a>03923 
<a name="l03924"></a>03924   <span class="comment">/* The currently active registers.  */</span>
<a name="l03925"></a>03925   <a class="code" href="regex-gnu_8h.html#ab64c4b3b9990d5c9e7e30219aecec37a">active_reg_t</a> lowest_active_reg = <a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">NO_LOWEST_ACTIVE_REG</a>;
<a name="l03926"></a>03926   <a class="code" href="regex-gnu_8h.html#ab64c4b3b9990d5c9e7e30219aecec37a">active_reg_t</a> highest_active_reg = <a class="code" href="regex_8c.html#ab79c167c4cd771eeb9f88cf07c8b66c2">NO_HIGHEST_ACTIVE_REG</a>;
<a name="l03927"></a>03927 
<a name="l03928"></a>03928   <span class="comment">/* Information on the contents of registers. These are pointers into</span>
<a name="l03929"></a>03929 <span class="comment">     the input strings; they record just what was matched (on this</span>
<a name="l03930"></a>03930 <span class="comment">     attempt) by a subexpression part of the pattern, that is, the</span>
<a name="l03931"></a>03931 <span class="comment">     regnum-th regstart pointer points to where in the pattern we began</span>
<a name="l03932"></a>03932 <span class="comment">     matching and the regnum-th regend points to right after where we</span>
<a name="l03933"></a>03933 <span class="comment">     stopped matching the regnum-th subexpression.  (The zeroth register</span>
<a name="l03934"></a>03934 <span class="comment">     keeps track of what the whole pattern matches.)  */</span>
<a name="l03935"></a>03935 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, these are global.  */</span>
<a name="l03936"></a>03936   <span class="keyword">const</span> <span class="keywordtype">char</span> **regstart, **regend;
<a name="l03937"></a>03937 <span class="preprocessor">#endif</span>
<a name="l03938"></a>03938 <span class="preprocessor"></span>
<a name="l03939"></a>03939   <span class="comment">/* If a group that&#39;s operated upon by a repetition operator fails to</span>
<a name="l03940"></a>03940 <span class="comment">     match anything, then the register for its start will need to be</span>
<a name="l03941"></a>03941 <span class="comment">     restored because it will have been set to wherever in the string we</span>
<a name="l03942"></a>03942 <span class="comment">     are when we last see its open-group operator.  Similarly for a</span>
<a name="l03943"></a>03943 <span class="comment">     register&#39;s end.  */</span>
<a name="l03944"></a>03944 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, these are global.  */</span>
<a name="l03945"></a>03945   <span class="keyword">const</span> <span class="keywordtype">char</span> **old_regstart, **old_regend;
<a name="l03946"></a>03946 <span class="preprocessor">#endif</span>
<a name="l03947"></a>03947 <span class="preprocessor"></span>
<a name="l03948"></a>03948   <span class="comment">/* The is_active field of reg_info helps us keep track of which (possibly</span>
<a name="l03949"></a>03949 <span class="comment">     nested) subexpressions we are currently in. The matched_something</span>
<a name="l03950"></a>03950 <span class="comment">     field of reg_info[reg_num] helps us tell whether or not we have</span>
<a name="l03951"></a>03951 <span class="comment">     matched any of the pattern so far this time through the reg_num-th</span>
<a name="l03952"></a>03952 <span class="comment">     subexpression.  These two fields get reset each time through any</span>
<a name="l03953"></a>03953 <span class="comment">     loop their register is in.  */</span>
<a name="l03954"></a>03954 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, this is global.  */</span>
<a name="l03955"></a>03955   <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info;
<a name="l03956"></a>03956 <span class="preprocessor">#endif</span>
<a name="l03957"></a>03957 <span class="preprocessor"></span>
<a name="l03958"></a>03958   <span class="comment">/* The following record the register info as found in the above</span>
<a name="l03959"></a>03959 <span class="comment">     variables when we find a match better than any we&#39;ve seen before.</span>
<a name="l03960"></a>03960 <span class="comment">     This happens as we backtrack through the failure points, which in</span>
<a name="l03961"></a>03961 <span class="comment">     turn happens only if we have not yet matched the entire string. */</span>
<a name="l03962"></a>03962   <span class="keywordtype">unsigned</span> best_regs_set = <span class="keyword">false</span>;
<a name="l03963"></a>03963 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, these are global.  */</span>
<a name="l03964"></a>03964   <span class="keyword">const</span> <span class="keywordtype">char</span> **best_regstart, **best_regend;
<a name="l03965"></a>03965 <span class="preprocessor">#endif</span>
<a name="l03966"></a>03966 <span class="preprocessor"></span>
<a name="l03967"></a>03967   <span class="comment">/* Logically, this is `best_regend[0]&#39;.  But we don&#39;t want to have to</span>
<a name="l03968"></a>03968 <span class="comment">     allocate space for that if we&#39;re not allocating space for anything</span>
<a name="l03969"></a>03969 <span class="comment">     else (see below).  Also, we never need info about register 0 for</span>
<a name="l03970"></a>03970 <span class="comment">     any of the other register vectors, and it seems rather a kludge to</span>
<a name="l03971"></a>03971 <span class="comment">     treat `best_regend&#39; differently than the rest.  So we keep track of</span>
<a name="l03972"></a>03972 <span class="comment">     the end of the best match so far in a separate variable.  We</span>
<a name="l03973"></a>03973 <span class="comment">     initialize this to NULL so that when we backtrack the first time</span>
<a name="l03974"></a>03974 <span class="comment">     and need to test it, it&#39;s not garbage.  */</span>
<a name="l03975"></a>03975   <span class="keyword">const</span> <span class="keywordtype">char</span> *match_end = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03976"></a>03976 
<a name="l03977"></a>03977   <span class="comment">/* This helps SET_REGS_MATCHED avoid doing redundant work.  */</span>
<a name="l03978"></a>03978   <span class="keywordtype">int</span> set_regs_matched_done = 0;
<a name="l03979"></a>03979 
<a name="l03980"></a>03980   <span class="comment">/* Used when we pop values we don&#39;t care about.  */</span>
<a name="l03981"></a>03981 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE </span><span class="comment">/* otherwise, these are global.  */</span>
<a name="l03982"></a>03982   <span class="keyword">const</span> <span class="keywordtype">char</span> **reg_dummy;
<a name="l03983"></a>03983   <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info_dummy;
<a name="l03984"></a>03984 <span class="preprocessor">#endif</span>
<a name="l03985"></a>03985 <span class="preprocessor"></span>
<a name="l03986"></a>03986 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l03987"></a>03987 <span class="preprocessor"></span>  <span class="comment">/* Counts the total number of registers pushed.  */</span>
<a name="l03988"></a>03988   <span class="keywordtype">unsigned</span> num_regs_pushed = 0;
<a name="l03989"></a>03989 <span class="preprocessor">#endif</span>
<a name="l03990"></a>03990 <span class="preprocessor"></span>
<a name="l03991"></a>03991   <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;\n\nEntering re_match_2.\n&quot;</span>);
<a name="l03992"></a>03992 
<a name="l03993"></a>03993   <a class="code" href="regex_8c.html#a0a97c6a1ac97ed1288cb47dceabc56df">INIT_FAIL_STACK</a> ();
<a name="l03994"></a>03994 
<a name="l03995"></a>03995 <span class="preprocessor">#ifdef MATCH_MAY_ALLOCATE</span>
<a name="l03996"></a>03996 <span class="preprocessor"></span>  <span class="comment">/* Do not bother to initialize all the register variables if there are</span>
<a name="l03997"></a>03997 <span class="comment">     no groups in the pattern, as it takes a fair amount of time.  If</span>
<a name="l03998"></a>03998 <span class="comment">     there are groups, we include space for register 0 (the whole</span>
<a name="l03999"></a>03999 <span class="comment">     pattern), even though we never use it, since it simplifies the</span>
<a name="l04000"></a>04000 <span class="comment">     array indexing.  We should fix this.  */</span>
<a name="l04001"></a>04001   <span class="keywordflow">if</span> (bufp-&gt;re_nsub)
<a name="l04002"></a>04002     {
<a name="l04003"></a>04003       regstart = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04004"></a>04004       regend = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04005"></a>04005       old_regstart = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04006"></a>04006       old_regend = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04007"></a>04007       best_regstart = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04008"></a>04008       best_regend = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04009"></a>04009       reg_info = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <a class="code" href="unionregister__info__type.html">register_info_type</a>);
<a name="l04010"></a>04010       reg_dummy = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l04011"></a>04011       reg_info_dummy = <a class="code" href="regex_8c.html#aa55c07b38a55837693a65170c5aa4c76">REGEX_TALLOC</a> (num_regs, <a class="code" href="unionregister__info__type.html">register_info_type</a>);
<a name="l04012"></a>04012 
<a name="l04013"></a>04013       <span class="keywordflow">if</span> (!(regstart &amp;&amp; regend &amp;&amp; old_regstart &amp;&amp; old_regend &amp;&amp; reg_info
<a name="l04014"></a>04014             &amp;&amp; best_regstart &amp;&amp; best_regend &amp;&amp; reg_dummy &amp;&amp; reg_info_dummy))
<a name="l04015"></a>04015         {
<a name="l04016"></a>04016           <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l04017"></a>04017           <span class="keywordflow">return</span> -2;
<a name="l04018"></a>04018         }
<a name="l04019"></a>04019     }
<a name="l04020"></a>04020   <span class="keywordflow">else</span>
<a name="l04021"></a>04021     {
<a name="l04022"></a>04022       <span class="comment">/* We must initialize all our variables to NULL, so that</span>
<a name="l04023"></a>04023 <span class="comment">         `FREE_VARIABLES&#39; doesn&#39;t try to free them.  */</span>
<a name="l04024"></a>04024       regstart = regend = old_regstart = old_regend = best_regstart
<a name="l04025"></a>04025         = best_regend = reg_dummy = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04026"></a>04026       reg_info = reg_info_dummy = (<a class="code" href="unionregister__info__type.html">register_info_type</a> *) <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04027"></a>04027     }
<a name="l04028"></a>04028 <span class="preprocessor">#endif </span><span class="comment">/* MATCH_MAY_ALLOCATE */</span>
<a name="l04029"></a>04029 
<a name="l04030"></a>04030   <span class="comment">/* The starting position is bogus.  */</span>
<a name="l04031"></a>04031   <span class="keywordflow">if</span> (pos &lt; 0 || pos &gt; size1 + size2)
<a name="l04032"></a>04032     {
<a name="l04033"></a>04033       <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l04034"></a>04034       <span class="keywordflow">return</span> -1;
<a name="l04035"></a>04035     }
<a name="l04036"></a>04036 
<a name="l04037"></a>04037   <span class="comment">/* Initialize subexpression text positions to -1 to mark ones that no</span>
<a name="l04038"></a>04038 <span class="comment">     start_memory/stop_memory has been seen for. Also initialize the</span>
<a name="l04039"></a>04039 <span class="comment">     register information struct.  */</span>
<a name="l04040"></a>04040   <span class="keywordflow">for</span> (mcnt = 1; (unsigned) mcnt &lt; num_regs; mcnt++)
<a name="l04041"></a>04041     {
<a name="l04042"></a>04042       regstart[mcnt] = regend[mcnt]
<a name="l04043"></a>04043         = old_regstart[mcnt] = old_regend[mcnt] = <a class="code" href="regex_8c.html#a78d7e87774e3c9ae84570f8ab88f55a5">REG_UNSET_VALUE</a>;
<a name="l04044"></a>04044 
<a name="l04045"></a>04045       <a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[mcnt]) = <a class="code" href="regex_8c.html#a9fbdd9b78059994c85d9f064f9fa9ec3">MATCH_NULL_UNSET_VALUE</a>;
<a name="l04046"></a>04046       <a class="code" href="regex_8c.html#a4f6628b4b02e356efb3c4c8e6cf8eaff">IS_ACTIVE</a> (reg_info[mcnt]) = 0;
<a name="l04047"></a>04047       <a class="code" href="regex_8c.html#a37aeb4969c6ded152f5be7582330e6e5">MATCHED_SOMETHING</a> (reg_info[mcnt]) = 0;
<a name="l04048"></a>04048       <a class="code" href="regex_8c.html#ad4e9639db811e6b09f31ff92466b404e">EVER_MATCHED_SOMETHING</a> (reg_info[mcnt]) = 0;
<a name="l04049"></a>04049     }
<a name="l04050"></a>04050 
<a name="l04051"></a>04051   <span class="comment">/* We move `string1&#39; into `string2&#39; if the latter&#39;s empty -- but not if</span>
<a name="l04052"></a>04052 <span class="comment">     `string1&#39; is null.  */</span>
<a name="l04053"></a>04053   <span class="keywordflow">if</span> (size2 == 0 &amp;&amp; string1 != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l04054"></a>04054     {
<a name="l04055"></a>04055       string2 = string1;
<a name="l04056"></a>04056       size2 = size1;
<a name="l04057"></a>04057       string1 = 0;
<a name="l04058"></a>04058       size1 = 0;
<a name="l04059"></a>04059     }
<a name="l04060"></a>04060   end1 = string1 + size1;
<a name="l04061"></a>04061   end2 = string2 + size2;
<a name="l04062"></a>04062 
<a name="l04063"></a>04063   <span class="comment">/* Compute where to stop matching, within the two strings.  */</span>
<a name="l04064"></a>04064   <span class="keywordflow">if</span> (stop &lt;= size1)
<a name="l04065"></a>04065     {
<a name="l04066"></a>04066       end_match_1 = string1 + stop;
<a name="l04067"></a>04067       end_match_2 = string2;
<a name="l04068"></a>04068     }
<a name="l04069"></a>04069   <span class="keywordflow">else</span>
<a name="l04070"></a>04070     {
<a name="l04071"></a>04071       end_match_1 = end1;
<a name="l04072"></a>04072       end_match_2 = string2 + stop - size1;
<a name="l04073"></a>04073     }
<a name="l04074"></a>04074 
<a name="l04075"></a>04075   <span class="comment">/* `p&#39; scans through the pattern as `d&#39; scans through the data.</span>
<a name="l04076"></a>04076 <span class="comment">     `dend&#39; is the end of the input string that `d&#39; points within.  `d&#39;</span>
<a name="l04077"></a>04077 <span class="comment">     is advanced into the following input string whenever necessary, but</span>
<a name="l04078"></a>04078 <span class="comment">     this happens before fetching; therefore, at the beginning of the</span>
<a name="l04079"></a>04079 <span class="comment">     loop, `d&#39; can be pointing at the end of a string, but it cannot</span>
<a name="l04080"></a>04080 <span class="comment">     equal `string2&#39;.  */</span>
<a name="l04081"></a>04081   <span class="keywordflow">if</span> (size1 &gt; 0 &amp;&amp; pos &lt;= size1)
<a name="l04082"></a>04082     {
<a name="l04083"></a>04083       d = string1 + pos;
<a name="l04084"></a>04084       dend = end_match_1;
<a name="l04085"></a>04085     }
<a name="l04086"></a>04086   <span class="keywordflow">else</span>
<a name="l04087"></a>04087     {
<a name="l04088"></a>04088       d = string2 + pos - size1;
<a name="l04089"></a>04089       dend = end_match_2;
<a name="l04090"></a>04090     }
<a name="l04091"></a>04091 
<a name="l04092"></a>04092   <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;The compiled pattern is:\n&quot;</span>);
<a name="l04093"></a>04093   <a class="code" href="regex_8c.html#ac9718b28cdc916b46e7f98bd4c38151e">DEBUG_PRINT_COMPILED_PATTERN</a> (bufp, p, pend);
<a name="l04094"></a>04094   <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;The string to match is: `&quot;</span>);
<a name="l04095"></a>04095   <a class="code" href="regex_8c.html#ac98cc201be49e8dd0e1d05264e7651d7">DEBUG_PRINT_DOUBLE_STRING</a> (d, string1, size1, string2, size2);
<a name="l04096"></a>04096   <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;&#39;\n&quot;</span>);
<a name="l04097"></a>04097 
<a name="l04098"></a>04098   <span class="comment">/* This loops over pattern commands.  It exits by returning from the</span>
<a name="l04099"></a>04099 <span class="comment">     function if the match is complete, or it drops through if the match</span>
<a name="l04100"></a>04100 <span class="comment">     fails at this starting point in the input data.  */</span>
<a name="l04101"></a>04101   <span class="keywordflow">for</span> (;;)
<a name="l04102"></a>04102     {
<a name="l04103"></a>04103 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04104"></a>04104 <span class="preprocessor"></span>      <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;\n%p: &quot;</span>, p);
<a name="l04105"></a>04105 <span class="preprocessor">#else</span>
<a name="l04106"></a>04106 <span class="preprocessor"></span>      <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;\n0x%x: &quot;</span>, p);
<a name="l04107"></a>04107 <span class="preprocessor">#endif</span>
<a name="l04108"></a>04108 <span class="preprocessor"></span>
<a name="l04109"></a>04109       <span class="keywordflow">if</span> (p == pend)
<a name="l04110"></a>04110     { <span class="comment">/* End of pattern means we might have succeeded.  */</span>
<a name="l04111"></a>04111           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;end of pattern ... &quot;</span>);
<a name="l04112"></a>04112 
<a name="l04113"></a>04113       <span class="comment">/* If we haven&#39;t matched the entire string, and we want the</span>
<a name="l04114"></a>04114 <span class="comment">             longest match, try backtracking.  */</span>
<a name="l04115"></a>04115           <span class="keywordflow">if</span> (d != end_match_2)
<a name="l04116"></a>04116         {
<a name="l04117"></a>04117           <span class="comment">/* 1 if this match ends in the same string (string1 or string2)</span>
<a name="l04118"></a>04118 <span class="comment">         as the best previous match.  */</span>
<a name="l04119"></a>04119           <span class="keywordtype">boolean</span> same_str_p = (<a class="code" href="regex_8c.html#a490c47f87b80eb6afdb77510567659e4">FIRST_STRING_P</a> (match_end)
<a name="l04120"></a>04120                     == <a class="code" href="regex_8c.html#a7c5c8716cb01b2ad2cb50732817cbe4d">MATCHING_IN_FIRST_STRING</a>);
<a name="l04121"></a>04121           <span class="comment">/* 1 if this match is the best seen so far.  */</span>
<a name="l04122"></a>04122           <span class="keywordtype">boolean</span> best_match_p;
<a name="l04123"></a>04123 
<a name="l04124"></a>04124           <span class="comment">/* AIX compiler got confused when this was combined</span>
<a name="l04125"></a>04125 <span class="comment">         with the previous declaration.  */</span>
<a name="l04126"></a>04126           <span class="keywordflow">if</span> (same_str_p)
<a name="l04127"></a>04127         best_match_p = d &gt; match_end;
<a name="l04128"></a>04128           <span class="keywordflow">else</span>
<a name="l04129"></a>04129         best_match_p = !<a class="code" href="regex_8c.html#a7c5c8716cb01b2ad2cb50732817cbe4d">MATCHING_IN_FIRST_STRING</a>;
<a name="l04130"></a>04130 
<a name="l04131"></a>04131               <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;backtracking.\n&quot;</span>);
<a name="l04132"></a>04132 
<a name="l04133"></a>04133               <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a222a4648230cba6a1801e51b4e2ced77">FAIL_STACK_EMPTY</a> ())
<a name="l04134"></a>04134                 { <span class="comment">/* More failure points to try.  */</span>
<a name="l04135"></a>04135 
<a name="l04136"></a>04136                   <span class="comment">/* If exceeds best match so far, save it.  */</span>
<a name="l04137"></a>04137                   <span class="keywordflow">if</span> (!best_regs_set || best_match_p)
<a name="l04138"></a>04138                     {
<a name="l04139"></a>04139                       best_regs_set = <span class="keyword">true</span>;
<a name="l04140"></a>04140                       match_end = d;
<a name="l04141"></a>04141 
<a name="l04142"></a>04142                       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;\nSAVING match as best so far.\n&quot;</span>);
<a name="l04143"></a>04143 
<a name="l04144"></a>04144                       <span class="keywordflow">for</span> (mcnt = 1; (unsigned) mcnt &lt; num_regs; mcnt++)
<a name="l04145"></a>04145                         {
<a name="l04146"></a>04146                           best_regstart[mcnt] = regstart[mcnt];
<a name="l04147"></a>04147                           best_regend[mcnt] = regend[mcnt];
<a name="l04148"></a>04148                         }
<a name="l04149"></a>04149                     }
<a name="l04150"></a>04150                   <span class="keywordflow">goto</span> fail;
<a name="l04151"></a>04151                 }
<a name="l04152"></a>04152 
<a name="l04153"></a>04153               <span class="comment">/* If no failure points, don&#39;t restore garbage.  And if</span>
<a name="l04154"></a>04154 <span class="comment">                 last match is real best match, don&#39;t restore second</span>
<a name="l04155"></a>04155 <span class="comment">                 best one. */</span>
<a name="l04156"></a>04156               <span class="keywordflow">else</span> <span class="keywordflow">if</span> (best_regs_set &amp;&amp; !best_match_p)
<a name="l04157"></a>04157                 {
<a name="l04158"></a>04158             restore_best_regs:
<a name="l04159"></a>04159                   <span class="comment">/* Restore best match.  It may happen that `dend ==</span>
<a name="l04160"></a>04160 <span class="comment">                     end_match_1&#39; while the restored d is in string2.</span>
<a name="l04161"></a>04161 <span class="comment">                     For example, the pattern `x.*y.*z&#39; against the</span>
<a name="l04162"></a>04162 <span class="comment">                     strings `x-&#39; and `y-z-&#39;, if the two strings are</span>
<a name="l04163"></a>04163 <span class="comment">                     not consecutive in memory.  */</span>
<a name="l04164"></a>04164                   <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;Restoring best registers.\n&quot;</span>);
<a name="l04165"></a>04165 
<a name="l04166"></a>04166                   d = match_end;
<a name="l04167"></a>04167                   dend = ((d &gt;= string1 &amp;&amp; d &lt;= end1)
<a name="l04168"></a>04168                    ? end_match_1 : end_match_2);
<a name="l04169"></a>04169 
<a name="l04170"></a>04170           <span class="keywordflow">for</span> (mcnt = 1; (unsigned) mcnt &lt; num_regs; mcnt++)
<a name="l04171"></a>04171             {
<a name="l04172"></a>04172               regstart[mcnt] = best_regstart[mcnt];
<a name="l04173"></a>04173               regend[mcnt] = best_regend[mcnt];
<a name="l04174"></a>04174             }
<a name="l04175"></a>04175                 }
<a name="l04176"></a>04176             } <span class="comment">/* d != end_match_2 */</span>
<a name="l04177"></a>04177 
<a name="l04178"></a>04178     succeed_label:
<a name="l04179"></a>04179           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;Accepting match.\n&quot;</span>);
<a name="l04180"></a>04180 
<a name="l04181"></a>04181           <span class="comment">/* If caller wants register contents data back, do it.  */</span>
<a name="l04182"></a>04182           <span class="keywordflow">if</span> (regs &amp;&amp; !bufp-&gt;no_sub)
<a name="l04183"></a>04183         {
<a name="l04184"></a>04184               <span class="comment">/* Have the register data arrays been allocated?  */</span>
<a name="l04185"></a>04185               <span class="keywordflow">if</span> (bufp-&gt;regs_allocated == <a class="code" href="regex-gnu_8h.html#a2714d3e1903c4824ef31ccae36e702c7">REGS_UNALLOCATED</a>)
<a name="l04186"></a>04186                 { <span class="comment">/* No.  So allocate them with malloc.  We need one</span>
<a name="l04187"></a>04187 <span class="comment">                     extra element beyond `num_regs&#39; for the `-1&#39; marker</span>
<a name="l04188"></a>04188 <span class="comment">                     GNU code uses.  */</span>
<a name="l04189"></a>04189                   regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> = <a class="code" href="regex_8c.html#afa99ec4acc4ecb2dc3c2d05da15d0e3f">MAX</a> (<a class="code" href="regex-gnu_8h.html#a36fa5b4c2430ba987abcc9a0d60ba37e">RE_NREGS</a>, num_regs + 1);
<a name="l04190"></a>04190                   regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> = <a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">TALLOC</a> (regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a>, <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>);
<a name="l04191"></a>04191                   regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> = <a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">TALLOC</a> (regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a>, <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>);
<a name="l04192"></a>04192                   <span class="keywordflow">if</span> (regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l04193"></a>04193             {
<a name="l04194"></a>04194               <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l04195"></a>04195               <span class="keywordflow">return</span> -2;
<a name="l04196"></a>04196             }
<a name="l04197"></a>04197                   bufp-&gt;regs_allocated = <a class="code" href="regex-gnu_8h.html#a87642301f41c9c37e7f4d10ab5ade987">REGS_REALLOCATE</a>;
<a name="l04198"></a>04198                 }
<a name="l04199"></a>04199               <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bufp-&gt;regs_allocated == <a class="code" href="regex-gnu_8h.html#a87642301f41c9c37e7f4d10ab5ade987">REGS_REALLOCATE</a>)
<a name="l04200"></a>04200                 { <span class="comment">/* Yes.  If we need more elements than were already</span>
<a name="l04201"></a>04201 <span class="comment">                     allocated, reallocate them.  If we need fewer, just</span>
<a name="l04202"></a>04202 <span class="comment">                     leave it alone.  */</span>
<a name="l04203"></a>04203                   <span class="keywordflow">if</span> (regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> &lt; num_regs + 1)
<a name="l04204"></a>04204                     {
<a name="l04205"></a>04205                       regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> = num_regs + 1;
<a name="l04206"></a>04206                       <a class="code" href="regex_8c.html#ae247cb248fa0309737dce6bdfc3a6a3d">RETALLOC</a> (regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>, regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a>, <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>);
<a name="l04207"></a>04207                       <a class="code" href="regex_8c.html#ae247cb248fa0309737dce6bdfc3a6a3d">RETALLOC</a> (regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>, regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a>, <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>);
<a name="l04208"></a>04208                       <span class="keywordflow">if</span> (regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l04209"></a>04209             {
<a name="l04210"></a>04210               <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l04211"></a>04211               <span class="keywordflow">return</span> -2;
<a name="l04212"></a>04212             }
<a name="l04213"></a>04213                     }
<a name="l04214"></a>04214                 }
<a name="l04215"></a>04215               <span class="keywordflow">else</span>
<a name="l04216"></a>04216         {
<a name="l04217"></a>04217           <span class="comment">/* These braces fend off a &quot;empty body in an else-statement&quot;</span>
<a name="l04218"></a>04218 <span class="comment">             warning under GCC when assert expands to nothing.  */</span>
<a name="l04219"></a>04219           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bufp-&gt;regs_allocated == <a class="code" href="regex-gnu_8h.html#a54c8820fca418980dbcd43ebd78ed5a6">REGS_FIXED</a>);
<a name="l04220"></a>04220         }
<a name="l04221"></a>04221 
<a name="l04222"></a>04222               <span class="comment">/* Convert the pointer data in `regstart&#39; and `regend&#39; to</span>
<a name="l04223"></a>04223 <span class="comment">                 indices.  Register zero has to be set differently,</span>
<a name="l04224"></a>04224 <span class="comment">                 since we haven&#39;t kept track of any info for it.  */</span>
<a name="l04225"></a>04225               <span class="keywordflow">if</span> (regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> &gt; 0)
<a name="l04226"></a>04226                 {
<a name="l04227"></a>04227                   regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>[0] = pos;
<a name="l04228"></a>04228                   regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>[0] = (<a class="code" href="regex_8c.html#a7c5c8716cb01b2ad2cb50732817cbe4d">MATCHING_IN_FIRST_STRING</a>
<a name="l04229"></a>04229                   ? ((<a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>) (d - string1))
<a name="l04230"></a>04230                       : ((<a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>) (d - string2 + size1)));
<a name="l04231"></a>04231                 }
<a name="l04232"></a>04232 
<a name="l04233"></a>04233               <span class="comment">/* Go through the first `min (num_regs, regs-&gt;num_regs)&#39;</span>
<a name="l04234"></a>04234 <span class="comment">                 registers, since that is all we initialized.  */</span>
<a name="l04235"></a>04235           <span class="keywordflow">for</span> (mcnt = 1; (unsigned) mcnt &lt; <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a> (num_regs, regs-&gt;<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a>);
<a name="l04236"></a>04236            mcnt++)
<a name="l04237"></a>04237         {
<a name="l04238"></a>04238                   <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regstart[mcnt]) || <a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regend[mcnt]))
<a name="l04239"></a>04239                     regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>[mcnt] = regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>[mcnt] = -1;
<a name="l04240"></a>04240                   <span class="keywordflow">else</span>
<a name="l04241"></a>04241                     {
<a name="l04242"></a>04242               regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>[mcnt]
<a name="l04243"></a>04243             = (<a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>) <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (regstart[mcnt]);
<a name="l04244"></a>04244                       regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>[mcnt]
<a name="l04245"></a>04245             = (<a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>) <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (regend[mcnt]);
<a name="l04246"></a>04246                     }
<a name="l04247"></a>04247         }
<a name="l04248"></a>04248 
<a name="l04249"></a>04249               <span class="comment">/* If the regs structure we return has more elements than</span>
<a name="l04250"></a>04250 <span class="comment">                 were in the pattern, set the extra elements to -1.  If</span>
<a name="l04251"></a>04251 <span class="comment">                 we (re)allocated the registers, this is the case,</span>
<a name="l04252"></a>04252 <span class="comment">                 because we always allocate enough to have at least one</span>
<a name="l04253"></a>04253 <span class="comment">                 -1 at the end.  */</span>
<a name="l04254"></a>04254               <span class="keywordflow">for</span> (mcnt = num_regs; (unsigned) mcnt &lt; regs-&gt;num_regs; mcnt++)
<a name="l04255"></a>04255                 regs-&gt;<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>[mcnt] = regs-&gt;<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>[mcnt] = -1;
<a name="l04256"></a>04256         } <span class="comment">/* regs &amp;&amp; !bufp-&gt;no_sub */</span>
<a name="l04257"></a>04257 
<a name="l04258"></a>04258           <a class="code" href="regex_8c.html#aca55c7b840c46d7e72964a9ecf52310f">DEBUG_PRINT4</a> (<span class="stringliteral">&quot;%u failure points pushed, %u popped (%u remain).\n&quot;</span>,
<a name="l04259"></a>04259                         nfailure_points_pushed, nfailure_points_popped,
<a name="l04260"></a>04260                         nfailure_points_pushed - nfailure_points_popped);
<a name="l04261"></a>04261           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;%u registers pushed.\n&quot;</span>, num_regs_pushed);
<a name="l04262"></a>04262 
<a name="l04263"></a>04263           mcnt = d - pos - (<a class="code" href="regex_8c.html#a7c5c8716cb01b2ad2cb50732817cbe4d">MATCHING_IN_FIRST_STRING</a>
<a name="l04264"></a>04264                 ? string1
<a name="l04265"></a>04265                 : string2 - size1);
<a name="l04266"></a>04266 
<a name="l04267"></a>04267           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;Returning %d from re_match_2.\n&quot;</span>, mcnt);
<a name="l04268"></a>04268 
<a name="l04269"></a>04269           <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l04270"></a>04270           <span class="keywordflow">return</span> mcnt;
<a name="l04271"></a>04271         }
<a name="l04272"></a>04272 
<a name="l04273"></a>04273       <span class="comment">/* Otherwise match next pattern command.  */</span>
<a name="l04274"></a>04274       <span class="keywordflow">switch</span> (<a class="code" href="regex_8c.html#a95cf7f68f7a75751d4abd454d6add11a">SWITCH_ENUM_CAST</a> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p++))
<a name="l04275"></a>04275     {
<a name="l04276"></a>04276         <span class="comment">/* Ignore these.  Used to ignore the n of succeed_n&#39;s which</span>
<a name="l04277"></a>04277 <span class="comment">           currently have n == 0.  */</span>
<a name="l04278"></a>04278         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>:
<a name="l04279"></a>04279           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING no_op.\n&quot;</span>);
<a name="l04280"></a>04280           <span class="keywordflow">break</span>;
<a name="l04281"></a>04281 
<a name="l04282"></a>04282     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a37fe3367d5bf38cb0ac666ebae52d4f9">succeed</a>:
<a name="l04283"></a>04283           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING succeed.\n&quot;</span>);
<a name="l04284"></a>04284       <span class="keywordflow">goto</span> succeed_label;
<a name="l04285"></a>04285 
<a name="l04286"></a>04286         <span class="comment">/* Match the next n pattern characters exactly.  The following</span>
<a name="l04287"></a>04287 <span class="comment">           byte in the pattern defines n, and the n bytes after that</span>
<a name="l04288"></a>04288 <span class="comment">           are the characters to match.  */</span>
<a name="l04289"></a>04289     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>:
<a name="l04290"></a>04290       mcnt = *p++;
<a name="l04291"></a>04291           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING exactn %d.\n&quot;</span>, mcnt);
<a name="l04292"></a>04292 
<a name="l04293"></a>04293           <span class="comment">/* This is written out as an if-else so we don&#39;t waste time</span>
<a name="l04294"></a>04294 <span class="comment">             testing `translate&#39; inside the loop.  */</span>
<a name="l04295"></a>04295           <span class="keywordflow">if</span> (translate)
<a name="l04296"></a>04296         {
<a name="l04297"></a>04297           <span class="keywordflow">do</span>
<a name="l04298"></a>04298         {
<a name="l04299"></a>04299           <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l04300"></a>04300           <span class="keywordflow">if</span> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) translate[(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) *d++]
<a name="l04301"></a>04301               != (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) *p++)
<a name="l04302"></a>04302                     <span class="keywordflow">goto</span> fail;
<a name="l04303"></a>04303         }
<a name="l04304"></a>04304           <span class="keywordflow">while</span> (--mcnt);
<a name="l04305"></a>04305         }
<a name="l04306"></a>04306       <span class="keywordflow">else</span>
<a name="l04307"></a>04307         {
<a name="l04308"></a>04308           <span class="keywordflow">do</span>
<a name="l04309"></a>04309         {
<a name="l04310"></a>04310           <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l04311"></a>04311           <span class="keywordflow">if</span> (*d++ != (<span class="keywordtype">char</span>) *p++) <span class="keywordflow">goto</span> fail;
<a name="l04312"></a>04312         }
<a name="l04313"></a>04313           <span class="keywordflow">while</span> (--mcnt);
<a name="l04314"></a>04314         }
<a name="l04315"></a>04315       <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l04316"></a>04316           <span class="keywordflow">break</span>;
<a name="l04317"></a>04317 
<a name="l04318"></a>04318 
<a name="l04319"></a>04319         <span class="comment">/* Match any character except possibly a newline or a null.  */</span>
<a name="l04320"></a>04320     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a375d40bb404dcb4aedbb775f40e7f648">anychar</a>:
<a name="l04321"></a>04321           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING anychar.\n&quot;</span>);
<a name="l04322"></a>04322 
<a name="l04323"></a>04323           <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l04324"></a>04324 
<a name="l04325"></a>04325           <span class="keywordflow">if</span> ((!(bufp-&gt;syntax &amp; <a class="code" href="regex-gnu_8h.html#a405fe43871f2df60407b3c8272f4624c">RE_DOT_NEWLINE</a>) &amp;&amp; <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (*d) == <span class="charliteral">&#39;\n&#39;</span>)
<a name="l04326"></a>04326               || (bufp-&gt;syntax &amp; <a class="code" href="regex-gnu_8h.html#a30d6a2fb42df1a210e830f3cd3f06977">RE_DOT_NOT_NULL</a> &amp;&amp; <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (*d) == <span class="charliteral">&#39;\000&#39;</span>))
<a name="l04327"></a>04327         <span class="keywordflow">goto</span> fail;
<a name="l04328"></a>04328 
<a name="l04329"></a>04329           <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l04330"></a>04330           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;  Matched `%d&#39;.\n&quot;</span>, *d);
<a name="l04331"></a>04331           d++;
<a name="l04332"></a>04332       <span class="keywordflow">break</span>;
<a name="l04333"></a>04333 
<a name="l04334"></a>04334 
<a name="l04335"></a>04335     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>:
<a name="l04336"></a>04336     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>:
<a name="l04337"></a>04337       {
<a name="l04338"></a>04338         <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c;
<a name="l04339"></a>04339         <span class="keywordtype">boolean</span> not = (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *(p - 1) == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>;
<a name="l04340"></a>04340 
<a name="l04341"></a>04341             <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING charset%s.\n&quot;</span>, not ? <span class="stringliteral">&quot;_not&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l04342"></a>04342 
<a name="l04343"></a>04343         <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l04344"></a>04344         c = <a class="code" href="regex_8c.html#a2eeeb49b77aa0f299d2d3c23dc1bfa17">TRANSLATE</a> (*d); <span class="comment">/* The character to match.  */</span>
<a name="l04345"></a>04345 
<a name="l04346"></a>04346             <span class="comment">/* Cast to `unsigned&#39; instead of `unsigned char&#39; in case the</span>
<a name="l04347"></a>04347 <span class="comment">               bit list is a full 32 bytes long.  */</span>
<a name="l04348"></a>04348         <span class="keywordflow">if</span> (c &lt; (<span class="keywordtype">unsigned</span>) (*p * <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)
<a name="l04349"></a>04349         &amp;&amp; p[1 + c / BYTEWIDTH] &amp; (1 &lt;&lt; (c % BYTEWIDTH)))
<a name="l04350"></a>04350           not = !not;
<a name="l04351"></a>04351 
<a name="l04352"></a>04352         p += 1 + *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04353"></a>04353 
<a name="l04354"></a>04354         <span class="keywordflow">if</span> (!not) <span class="keywordflow">goto</span> fail;
<a name="l04355"></a>04355 
<a name="l04356"></a>04356         <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l04357"></a>04357             d++;
<a name="l04358"></a>04358         <span class="keywordflow">break</span>;
<a name="l04359"></a>04359       }
<a name="l04360"></a>04360 
<a name="l04361"></a>04361 
<a name="l04362"></a>04362         <span class="comment">/* The beginning of a group is represented by start_memory.</span>
<a name="l04363"></a>04363 <span class="comment">           The arguments are the register number in the next byte, and the</span>
<a name="l04364"></a>04364 <span class="comment">           number of groups inner to this one in the next.  The text</span>
<a name="l04365"></a>04365 <span class="comment">           matched within the group is recorded (in the internal</span>
<a name="l04366"></a>04366 <span class="comment">           registers data structure) under the register number.  */</span>
<a name="l04367"></a>04367         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>:
<a name="l04368"></a>04368       <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;EXECUTING start_memory %d (%d):\n&quot;</span>, *p, p[1]);
<a name="l04369"></a>04369 
<a name="l04370"></a>04370           <span class="comment">/* Find out if this group can match the empty string.  */</span>
<a name="l04371"></a>04371       p1 = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;       <span class="comment">/* To send to group_match_null_string_p.  */</span>
<a name="l04372"></a>04372 
<a name="l04373"></a>04373           <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[*p]) == <a class="code" href="regex_8c.html#a9fbdd9b78059994c85d9f064f9fa9ec3">MATCH_NULL_UNSET_VALUE</a>)
<a name="l04374"></a>04374             <a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[*p])
<a name="l04375"></a>04375               = <a class="code" href="regex_8c.html#ac1a3adc04ca27d22992ea483708c5812">group_match_null_string_p</a> (&amp;p1, pend, reg_info);
<a name="l04376"></a>04376 
<a name="l04377"></a>04377           <span class="comment">/* Save the position in the string where we were the last time</span>
<a name="l04378"></a>04378 <span class="comment">             we were at this open-group operator in case the group is</span>
<a name="l04379"></a>04379 <span class="comment">             operated upon by a repetition operator, e.g., with `(a*)*b&#39;</span>
<a name="l04380"></a>04380 <span class="comment">             against `ab&#39;; then we want to ignore where we are now in</span>
<a name="l04381"></a>04381 <span class="comment">             the string in case this attempt to match fails.  */</span>
<a name="l04382"></a>04382           old_regstart[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>] = <a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[*p])
<a name="l04383"></a>04383                              ? <a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regstart[*p]) ? d : regstart[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>]
<a name="l04384"></a>04384                              : regstart[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>];
<a name="l04385"></a>04385       <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;  old_regstart: %d\n&quot;</span>,
<a name="l04386"></a>04386              <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (old_regstart[*p]));
<a name="l04387"></a>04387 
<a name="l04388"></a>04388           regstart[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>] = d;
<a name="l04389"></a>04389       <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;  regstart: %d\n&quot;</span>, <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (regstart[*p]));
<a name="l04390"></a>04390 
<a name="l04391"></a>04391           <a class="code" href="regex_8c.html#a4f6628b4b02e356efb3c4c8e6cf8eaff">IS_ACTIVE</a> (reg_info[*p]) = 1;
<a name="l04392"></a>04392           <a class="code" href="regex_8c.html#a37aeb4969c6ded152f5be7582330e6e5">MATCHED_SOMETHING</a> (reg_info[*p]) = 0;
<a name="l04393"></a>04393 
<a name="l04394"></a>04394       <span class="comment">/* Clear this whenever we change the register activity status.  */</span>
<a name="l04395"></a>04395       set_regs_matched_done = 0;
<a name="l04396"></a>04396 
<a name="l04397"></a>04397           <span class="comment">/* This is the new highest active register.  */</span>
<a name="l04398"></a>04398           highest_active_reg = *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04399"></a>04399 
<a name="l04400"></a>04400           <span class="comment">/* If nothing was active before, this is the new lowest active</span>
<a name="l04401"></a>04401 <span class="comment">             register.  */</span>
<a name="l04402"></a>04402           <span class="keywordflow">if</span> (lowest_active_reg == <a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">NO_LOWEST_ACTIVE_REG</a>)
<a name="l04403"></a>04403             lowest_active_reg = *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04404"></a>04404 
<a name="l04405"></a>04405           <span class="comment">/* Move past the register number and inner group count.  */</span>
<a name="l04406"></a>04406           p += 2;
<a name="l04407"></a>04407       just_past_start_mem = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04408"></a>04408 
<a name="l04409"></a>04409           <span class="keywordflow">break</span>;
<a name="l04410"></a>04410 
<a name="l04411"></a>04411 
<a name="l04412"></a>04412         <span class="comment">/* The stop_memory opcode represents the end of a group.  Its</span>
<a name="l04413"></a>04413 <span class="comment">           arguments are the same as start_memory&#39;s: the register</span>
<a name="l04414"></a>04414 <span class="comment">           number, and the number of inner groups.  */</span>
<a name="l04415"></a>04415     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>:
<a name="l04416"></a>04416       <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;EXECUTING stop_memory %d (%d):\n&quot;</span>, *p, p[1]);
<a name="l04417"></a>04417 
<a name="l04418"></a>04418           <span class="comment">/* We need to save the string position the last time we were at</span>
<a name="l04419"></a>04419 <span class="comment">             this close-group operator in case the group is operated</span>
<a name="l04420"></a>04420 <span class="comment">             upon by a repetition operator, e.g., with `((a*)*(b*)*)*&#39;</span>
<a name="l04421"></a>04421 <span class="comment">             against `aba&#39;; then we want to ignore where we are now in</span>
<a name="l04422"></a>04422 <span class="comment">             the string in case this attempt to match fails.  */</span>
<a name="l04423"></a>04423           old_regend[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>] = <a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[*p])
<a name="l04424"></a>04424                            ? <a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regend[*p]) ? d : regend[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>]
<a name="l04425"></a>04425                : regend[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>];
<a name="l04426"></a>04426       <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;      old_regend: %d\n&quot;</span>,
<a name="l04427"></a>04427              <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (old_regend[*p]));
<a name="l04428"></a>04428 
<a name="l04429"></a>04429           regend[*<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>] = d;
<a name="l04430"></a>04430       <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;      regend: %d\n&quot;</span>, <a class="code" href="regex_8c.html#a8bebab7ed279441748e37304f7a2c78a">POINTER_TO_OFFSET</a> (regend[*p]));
<a name="l04431"></a>04431 
<a name="l04432"></a>04432           <span class="comment">/* This register isn&#39;t active anymore.  */</span>
<a name="l04433"></a>04433           <a class="code" href="regex_8c.html#a4f6628b4b02e356efb3c4c8e6cf8eaff">IS_ACTIVE</a> (reg_info[*p]) = 0;
<a name="l04434"></a>04434 
<a name="l04435"></a>04435       <span class="comment">/* Clear this whenever we change the register activity status.  */</span>
<a name="l04436"></a>04436       set_regs_matched_done = 0;
<a name="l04437"></a>04437 
<a name="l04438"></a>04438           <span class="comment">/* If this was the only register active, nothing is active</span>
<a name="l04439"></a>04439 <span class="comment">             anymore.  */</span>
<a name="l04440"></a>04440           <span class="keywordflow">if</span> (lowest_active_reg == highest_active_reg)
<a name="l04441"></a>04441             {
<a name="l04442"></a>04442               lowest_active_reg = <a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">NO_LOWEST_ACTIVE_REG</a>;
<a name="l04443"></a>04443               highest_active_reg = <a class="code" href="regex_8c.html#ab79c167c4cd771eeb9f88cf07c8b66c2">NO_HIGHEST_ACTIVE_REG</a>;
<a name="l04444"></a>04444             }
<a name="l04445"></a>04445           <span class="keywordflow">else</span>
<a name="l04446"></a>04446             { <span class="comment">/* We must scan for the new highest active register, since</span>
<a name="l04447"></a>04447 <span class="comment">                 it isn&#39;t necessarily one less than now: consider</span>
<a name="l04448"></a>04448 <span class="comment">                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the</span>
<a name="l04449"></a>04449 <span class="comment">                 new highest active register is 1.  */</span>
<a name="l04450"></a>04450               <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> r = *p - 1;
<a name="l04451"></a>04451               <span class="keywordflow">while</span> (r &gt; 0 &amp;&amp; !<a class="code" href="regex_8c.html#a4f6628b4b02e356efb3c4c8e6cf8eaff">IS_ACTIVE</a> (reg_info[r]))
<a name="l04452"></a>04452                 r--;
<a name="l04453"></a>04453 
<a name="l04454"></a>04454               <span class="comment">/* If we end up at register zero, that means that we saved</span>
<a name="l04455"></a>04455 <span class="comment">                 the registers as the result of an `on_failure_jump&#39;, not</span>
<a name="l04456"></a>04456 <span class="comment">                 a `start_memory&#39;, and we jumped to past the innermost</span>
<a name="l04457"></a>04457 <span class="comment">                 `stop_memory&#39;.  For example, in ((.)*) we save</span>
<a name="l04458"></a>04458 <span class="comment">                 registers 1 and 2 as a result of the *, but when we pop</span>
<a name="l04459"></a>04459 <span class="comment">                 back to the second ), we are at the stop_memory 1.</span>
<a name="l04460"></a>04460 <span class="comment">                 Thus, nothing is active.  */</span>
<a name="l04461"></a>04461           <span class="keywordflow">if</span> (r == 0)
<a name="l04462"></a>04462                 {
<a name="l04463"></a>04463                   lowest_active_reg = <a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">NO_LOWEST_ACTIVE_REG</a>;
<a name="l04464"></a>04464                   highest_active_reg = <a class="code" href="regex_8c.html#ab79c167c4cd771eeb9f88cf07c8b66c2">NO_HIGHEST_ACTIVE_REG</a>;
<a name="l04465"></a>04465                 }
<a name="l04466"></a>04466               <span class="keywordflow">else</span>
<a name="l04467"></a>04467                 highest_active_reg = r;
<a name="l04468"></a>04468             }
<a name="l04469"></a>04469 
<a name="l04470"></a>04470           <span class="comment">/* If just failed to match something this time around with a</span>
<a name="l04471"></a>04471 <span class="comment">             group that&#39;s operated on by a repetition operator, try to</span>
<a name="l04472"></a>04472 <span class="comment">             force exit from the ``loop&#39;&#39;, and restore the register</span>
<a name="l04473"></a>04473 <span class="comment">             information for this group that we had before trying this</span>
<a name="l04474"></a>04474 <span class="comment">             last match.  */</span>
<a name="l04475"></a>04475           <span class="keywordflow">if</span> ((!<a class="code" href="regex_8c.html#a37aeb4969c6ded152f5be7582330e6e5">MATCHED_SOMETHING</a> (reg_info[*p])
<a name="l04476"></a>04476                || just_past_start_mem == p - 1)
<a name="l04477"></a>04477           &amp;&amp; (p + 2) &lt; pend)
<a name="l04478"></a>04478             {
<a name="l04479"></a>04479               <span class="keywordtype">boolean</span> is_a_jump_n = <span class="keyword">false</span>;
<a name="l04480"></a>04480 
<a name="l04481"></a>04481               p1 = p + 2;
<a name="l04482"></a>04482               mcnt = 0;
<a name="l04483"></a>04483               <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1++)
<a name="l04484"></a>04484                 {
<a name="l04485"></a>04485                   <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>:
<a name="l04486"></a>04486             is_a_jump_n = <span class="keyword">true</span>;
<a name="l04487"></a>04487                   <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>:
<a name="l04488"></a>04488           <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>:
<a name="l04489"></a>04489           <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l04490"></a>04490           <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>:
<a name="l04491"></a>04491                     <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l04492"></a>04492             <span class="keywordflow">if</span> (is_a_jump_n)
<a name="l04493"></a>04493               p1 += 2;
<a name="l04494"></a>04494                     <span class="keywordflow">break</span>;
<a name="l04495"></a>04495 
<a name="l04496"></a>04496                   <span class="keywordflow">default</span>:
<a name="l04497"></a>04497                     <span class="comment">/* do nothing */</span> ;
<a name="l04498"></a>04498                 }
<a name="l04499"></a>04499           p1 += mcnt;
<a name="l04500"></a>04500 
<a name="l04501"></a>04501               <span class="comment">/* If the next operation is a jump backwards in the pattern</span>
<a name="l04502"></a>04502 <span class="comment">             to an on_failure_jump right before the start_memory</span>
<a name="l04503"></a>04503 <span class="comment">                 corresponding to this stop_memory, exit from the loop</span>
<a name="l04504"></a>04504 <span class="comment">                 by forcing a failure after pushing on the stack the</span>
<a name="l04505"></a>04505 <span class="comment">                 on_failure_jump&#39;s jump in the pattern, and d.  */</span>
<a name="l04506"></a>04506               <span class="keywordflow">if</span> (mcnt &lt; 0 &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>
<a name="l04507"></a>04507                   &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a> &amp;&amp; p1[4] == *p)
<a name="l04508"></a>04508         {
<a name="l04509"></a>04509                   <span class="comment">/* If this group ever matched anything, then restore</span>
<a name="l04510"></a>04510 <span class="comment">                     what its registers were before trying this last</span>
<a name="l04511"></a>04511 <span class="comment">                     failed match, e.g., with `(a*)*b&#39; against `ab&#39; for</span>
<a name="l04512"></a>04512 <span class="comment">                     regstart[1], and, e.g., with `((a*)*(b*)*)*&#39;</span>
<a name="l04513"></a>04513 <span class="comment">                     against `aba&#39; for regend[3].</span>
<a name="l04514"></a>04514 <span class="comment"></span>
<a name="l04515"></a>04515 <span class="comment">                     Also restore the registers for inner groups for,</span>
<a name="l04516"></a>04516 <span class="comment">                     e.g., `((a*)(b*))*&#39; against `aba&#39; (register 3 would</span>
<a name="l04517"></a>04517 <span class="comment">                     otherwise get trashed).  */</span>
<a name="l04518"></a>04518 
<a name="l04519"></a>04519                   <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#ad4e9639db811e6b09f31ff92466b404e">EVER_MATCHED_SOMETHING</a> (reg_info[*p]))
<a name="l04520"></a>04520             {
<a name="l04521"></a>04521               <span class="keywordtype">unsigned</span> r;
<a name="l04522"></a>04522 
<a name="l04523"></a>04523                       <a class="code" href="regex_8c.html#ad4e9639db811e6b09f31ff92466b404e">EVER_MATCHED_SOMETHING</a> (reg_info[*p]) = 0;
<a name="l04524"></a>04524 
<a name="l04525"></a>04525               <span class="comment">/* Restore this and inner groups&#39; (if any) registers.  */</span>
<a name="l04526"></a>04526                       <span class="keywordflow">for</span> (r = *p; r &lt; (unsigned) *p + (<span class="keywordtype">unsigned</span>) *(p + 1);
<a name="l04527"></a>04527                r++)
<a name="l04528"></a>04528                         {
<a name="l04529"></a>04529                           regstart[r] = old_regstart[r];
<a name="l04530"></a>04530 
<a name="l04531"></a>04531                           <span class="comment">/* xx why this test?  */</span>
<a name="l04532"></a>04532                           <span class="keywordflow">if</span> (old_regend[r] &gt;= regstart[r])
<a name="l04533"></a>04533                             regend[r] = old_regend[r];
<a name="l04534"></a>04534                         }
<a name="l04535"></a>04535                     }
<a name="l04536"></a>04536           p1++;
<a name="l04537"></a>04537                   <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l04538"></a>04538                   <a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">PUSH_FAILURE_POINT</a> (p1 + mcnt, d, -2);
<a name="l04539"></a>04539 
<a name="l04540"></a>04540                   <span class="keywordflow">goto</span> fail;
<a name="l04541"></a>04541                 }
<a name="l04542"></a>04542             }
<a name="l04543"></a>04543 
<a name="l04544"></a>04544           <span class="comment">/* Move past the register number and the inner group count.  */</span>
<a name="l04545"></a>04545           p += 2;
<a name="l04546"></a>04546           <span class="keywordflow">break</span>;
<a name="l04547"></a>04547 
<a name="l04548"></a>04548 
<a name="l04549"></a>04549     <span class="comment">/* &lt;digit&gt; has been turned into a `duplicate&#39; command which is</span>
<a name="l04550"></a>04550 <span class="comment">           followed by the numeric value of &lt;digit&gt; as the register number.  */</span>
<a name="l04551"></a>04551         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>:
<a name="l04552"></a>04552       {
<a name="l04553"></a>04553         <span class="keyword">register</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *d2, *dend2;
<a name="l04554"></a>04554         <span class="keywordtype">int</span> regno = *p++;   <span class="comment">/* Get which register to match against.  */</span>
<a name="l04555"></a>04555         <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING duplicate %d.\n&quot;</span>, regno);
<a name="l04556"></a>04556 
<a name="l04557"></a>04557         <span class="comment">/* Can&#39;t back reference a group which we&#39;ve never matched.  */</span>
<a name="l04558"></a>04558             <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regstart[regno]) || <a class="code" href="regex_8c.html#afefb76392029f59835538d01a0c13242">REG_UNSET</a> (regend[regno]))
<a name="l04559"></a>04559               <span class="keywordflow">goto</span> fail;
<a name="l04560"></a>04560 
<a name="l04561"></a>04561             <span class="comment">/* Where in input to try to start matching.  */</span>
<a name="l04562"></a>04562             d2 = regstart[regno];
<a name="l04563"></a>04563 
<a name="l04564"></a>04564             <span class="comment">/* Where to stop matching; if both the place to start and</span>
<a name="l04565"></a>04565 <span class="comment">               the place to stop matching are in the same string, then</span>
<a name="l04566"></a>04566 <span class="comment">               set to the place to stop, otherwise, for now have to use</span>
<a name="l04567"></a>04567 <span class="comment">               the end of the first string.  */</span>
<a name="l04568"></a>04568 
<a name="l04569"></a>04569             dend2 = ((<a class="code" href="regex_8c.html#a490c47f87b80eb6afdb77510567659e4">FIRST_STRING_P</a> (regstart[regno])
<a name="l04570"></a>04570               == <a class="code" href="regex_8c.html#a490c47f87b80eb6afdb77510567659e4">FIRST_STRING_P</a> (regend[regno]))
<a name="l04571"></a>04571              ? regend[regno] : end_match_1);
<a name="l04572"></a>04572         <span class="keywordflow">for</span> (;;)
<a name="l04573"></a>04573           {
<a name="l04574"></a>04574         <span class="comment">/* If necessary, advance to next segment in register</span>
<a name="l04575"></a>04575 <span class="comment">                   contents.  */</span>
<a name="l04576"></a>04576         <span class="keywordflow">while</span> (d2 == dend2)
<a name="l04577"></a>04577           {
<a name="l04578"></a>04578             <span class="keywordflow">if</span> (dend2 == end_match_2) <span class="keywordflow">break</span>;
<a name="l04579"></a>04579             <span class="keywordflow">if</span> (dend2 == regend[regno]) <span class="keywordflow">break</span>;
<a name="l04580"></a>04580 
<a name="l04581"></a>04581                     <span class="comment">/* End of string1 =&gt; advance to string2. */</span>
<a name="l04582"></a>04582                     d2 = string2;
<a name="l04583"></a>04583                     dend2 = regend[regno];
<a name="l04584"></a>04584           }
<a name="l04585"></a>04585         <span class="comment">/* At end of register contents =&gt; success */</span>
<a name="l04586"></a>04586         <span class="keywordflow">if</span> (d2 == dend2) <span class="keywordflow">break</span>;
<a name="l04587"></a>04587 
<a name="l04588"></a>04588         <span class="comment">/* If necessary, advance to next segment in data.  */</span>
<a name="l04589"></a>04589         <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l04590"></a>04590 
<a name="l04591"></a>04591         <span class="comment">/* How many characters left in this segment to match.  */</span>
<a name="l04592"></a>04592         mcnt = dend - d;
<a name="l04593"></a>04593 
<a name="l04594"></a>04594         <span class="comment">/* Want how many consecutive characters we can match in</span>
<a name="l04595"></a>04595 <span class="comment">                   one shot, so, if necessary, adjust the count.  */</span>
<a name="l04596"></a>04596                 <span class="keywordflow">if</span> (mcnt &gt; dend2 - d2)
<a name="l04597"></a>04597           mcnt = dend2 - d2;
<a name="l04598"></a>04598 
<a name="l04599"></a>04599         <span class="comment">/* Compare that many; failure if mismatch, else move</span>
<a name="l04600"></a>04600 <span class="comment">                   past them.  */</span>
<a name="l04601"></a>04601         <span class="keywordflow">if</span> (translate
<a name="l04602"></a>04602                     ? <a class="code" href="regex_8c.html#a831fca3c806cff281a70c8757c40b134">bcmp_translate</a> (d, d2, mcnt, translate)
<a name="l04603"></a>04603                     : <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (d, d2, mcnt))
<a name="l04604"></a>04604           <span class="keywordflow">goto</span> fail;
<a name="l04605"></a>04605         d += mcnt, d2 += mcnt;
<a name="l04606"></a>04606 
<a name="l04607"></a>04607         <span class="comment">/* Do this because we&#39;ve match some characters.  */</span>
<a name="l04608"></a>04608         <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l04609"></a>04609           }
<a name="l04610"></a>04610       }
<a name="l04611"></a>04611       <span class="keywordflow">break</span>;
<a name="l04612"></a>04612 
<a name="l04613"></a>04613 
<a name="l04614"></a>04614         <span class="comment">/* begline matches the empty string at the beginning of the string</span>
<a name="l04615"></a>04615 <span class="comment">           (unless `not_bol&#39; is set in `bufp&#39;), and, if</span>
<a name="l04616"></a>04616 <span class="comment">           `newline_anchor&#39; is set, after newlines.  */</span>
<a name="l04617"></a>04617     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>:
<a name="l04618"></a>04618           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING begline.\n&quot;</span>);
<a name="l04619"></a>04619 
<a name="l04620"></a>04620           <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d))
<a name="l04621"></a>04621             {
<a name="l04622"></a>04622               <span class="keywordflow">if</span> (!bufp-&gt;not_bol) <span class="keywordflow">break</span>;
<a name="l04623"></a>04623             }
<a name="l04624"></a>04624           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (d[-1] == <span class="charliteral">&#39;\n&#39;</span> &amp;&amp; bufp-&gt;newline_anchor)
<a name="l04625"></a>04625             {
<a name="l04626"></a>04626               <span class="keywordflow">break</span>;
<a name="l04627"></a>04627             }
<a name="l04628"></a>04628           <span class="comment">/* In all other cases, we fail.  */</span>
<a name="l04629"></a>04629           <span class="keywordflow">goto</span> fail;
<a name="l04630"></a>04630 
<a name="l04631"></a>04631 
<a name="l04632"></a>04632         <span class="comment">/* endline is the dual of begline.  */</span>
<a name="l04633"></a>04633     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>:
<a name="l04634"></a>04634           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING endline.\n&quot;</span>);
<a name="l04635"></a>04635 
<a name="l04636"></a>04636           <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">AT_STRINGS_END</a> (d))
<a name="l04637"></a>04637             {
<a name="l04638"></a>04638               <span class="keywordflow">if</span> (!bufp-&gt;not_eol) <span class="keywordflow">break</span>;
<a name="l04639"></a>04639             }
<a name="l04640"></a>04640 
<a name="l04641"></a>04641           <span class="comment">/* We have to ``prefetch&#39;&#39; the next character.  */</span>
<a name="l04642"></a>04642           <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((d == end1 ? *string2 : *d) == <span class="charliteral">&#39;\n&#39;</span>
<a name="l04643"></a>04643                    &amp;&amp; bufp-&gt;newline_anchor)
<a name="l04644"></a>04644             {
<a name="l04645"></a>04645               <span class="keywordflow">break</span>;
<a name="l04646"></a>04646             }
<a name="l04647"></a>04647           <span class="keywordflow">goto</span> fail;
<a name="l04648"></a>04648 
<a name="l04649"></a>04649 
<a name="l04650"></a>04650     <span class="comment">/* Match at the very beginning of the data.  */</span>
<a name="l04651"></a>04651         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>:
<a name="l04652"></a>04652           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING begbuf.\n&quot;</span>);
<a name="l04653"></a>04653           <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d))
<a name="l04654"></a>04654             <span class="keywordflow">break</span>;
<a name="l04655"></a>04655           <span class="keywordflow">goto</span> fail;
<a name="l04656"></a>04656 
<a name="l04657"></a>04657 
<a name="l04658"></a>04658     <span class="comment">/* Match at the very end of the data.  */</span>
<a name="l04659"></a>04659         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>:
<a name="l04660"></a>04660           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING endbuf.\n&quot;</span>);
<a name="l04661"></a>04661       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">AT_STRINGS_END</a> (d))
<a name="l04662"></a>04662         <span class="keywordflow">break</span>;
<a name="l04663"></a>04663           <span class="keywordflow">goto</span> fail;
<a name="l04664"></a>04664 
<a name="l04665"></a>04665 
<a name="l04666"></a>04666         <span class="comment">/* on_failure_keep_string_jump is used to optimize `.*\n&#39;.  It</span>
<a name="l04667"></a>04667 <span class="comment">           pushes NULL as the value for the string on the stack.  Then</span>
<a name="l04668"></a>04668 <span class="comment">           `pop_failure_point&#39; will keep the current value for the</span>
<a name="l04669"></a>04669 <span class="comment">           string, instead of restoring it.  To see why, consider</span>
<a name="l04670"></a>04670 <span class="comment">           matching `foo\nbar&#39; against `.*\n&#39;.  The .* matches the foo;</span>
<a name="l04671"></a>04671 <span class="comment">           then the . fails against the \n.  But the next thing we want</span>
<a name="l04672"></a>04672 <span class="comment">           to do is match the \n against the \n; if we restored the</span>
<a name="l04673"></a>04673 <span class="comment">           string value, we would be back at the foo.</span>
<a name="l04674"></a>04674 <span class="comment"></span>
<a name="l04675"></a>04675 <span class="comment">           Because this is used only in specific cases, we don&#39;t need to</span>
<a name="l04676"></a>04676 <span class="comment">           check all the things that `on_failure_jump&#39; does, to make</span>
<a name="l04677"></a>04677 <span class="comment">           sure the right things get saved on the stack.  Hence we don&#39;t</span>
<a name="l04678"></a>04678 <span class="comment">           share its code.  The only reason to push anything on the</span>
<a name="l04679"></a>04679 <span class="comment">           stack at all is that otherwise we would have to change</span>
<a name="l04680"></a>04680 <span class="comment">           `anychar&#39;s code to do something besides goto fail in this</span>
<a name="l04681"></a>04681 <span class="comment">           case; that seems worse than this.  */</span>
<a name="l04682"></a>04682         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118adbebd35172fa7358845d6dd61727883b">on_failure_keep_string_jump</a>:
<a name="l04683"></a>04683           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING on_failure_keep_string_jump&quot;</span>);
<a name="l04684"></a>04684 
<a name="l04685"></a>04685           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);
<a name="l04686"></a>04686 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04687"></a>04687 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot; %d (to %p):\n&quot;</span>, mcnt, p + mcnt);
<a name="l04688"></a>04688 <span class="preprocessor">#else</span>
<a name="l04689"></a>04689 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot; %d (to 0x%x):\n&quot;</span>, mcnt, p + mcnt);
<a name="l04690"></a>04690 <span class="preprocessor">#endif</span>
<a name="l04691"></a>04691 <span class="preprocessor"></span>
<a name="l04692"></a>04692           <a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">PUSH_FAILURE_POINT</a> (p + mcnt, <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, -2);
<a name="l04693"></a>04693           <span class="keywordflow">break</span>;
<a name="l04694"></a>04694 
<a name="l04695"></a>04695 
<a name="l04696"></a>04696     <span class="comment">/* Uses of on_failure_jump:</span>
<a name="l04697"></a>04697 <span class="comment"></span>
<a name="l04698"></a>04698 <span class="comment">           Each alternative starts with an on_failure_jump that points</span>
<a name="l04699"></a>04699 <span class="comment">           to the beginning of the next alternative.  Each alternative</span>
<a name="l04700"></a>04700 <span class="comment">           except the last ends with a jump that in effect jumps past</span>
<a name="l04701"></a>04701 <span class="comment">           the rest of the alternatives.  (They really jump to the</span>
<a name="l04702"></a>04702 <span class="comment">           ending jump of the following alternative, because tensioning</span>
<a name="l04703"></a>04703 <span class="comment">           these jumps is a hassle.)</span>
<a name="l04704"></a>04704 <span class="comment"></span>
<a name="l04705"></a>04705 <span class="comment">           Repeats start with an on_failure_jump that points past both</span>
<a name="l04706"></a>04706 <span class="comment">           the repetition text and either the following jump or</span>
<a name="l04707"></a>04707 <span class="comment">           pop_failure_jump back to this on_failure_jump.  */</span>
<a name="l04708"></a>04708     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>:
<a name="l04709"></a>04709         on_failure:
<a name="l04710"></a>04710           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING on_failure_jump&quot;</span>);
<a name="l04711"></a>04711 
<a name="l04712"></a>04712           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);
<a name="l04713"></a>04713 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04714"></a>04714 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot; %d (to %p)&quot;</span>, mcnt, p + mcnt);
<a name="l04715"></a>04715 <span class="preprocessor">#else</span>
<a name="l04716"></a>04716 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot; %d (to 0x%x)&quot;</span>, mcnt, p + mcnt);
<a name="l04717"></a>04717 <span class="preprocessor">#endif</span>
<a name="l04718"></a>04718 <span class="preprocessor"></span>
<a name="l04719"></a>04719           <span class="comment">/* If this on_failure_jump comes right before a group (i.e.,</span>
<a name="l04720"></a>04720 <span class="comment">             the original * applied to a group), save the information</span>
<a name="l04721"></a>04721 <span class="comment">             for that group and all inner ones, so that if we fail back</span>
<a name="l04722"></a>04722 <span class="comment">             to this point, the group&#39;s information will be correct.</span>
<a name="l04723"></a>04723 <span class="comment">             For example, in \(a*\)*\1, we need the preceding group,</span>
<a name="l04724"></a>04724 <span class="comment">             and in \(zz\(a*\)b*\)\2, we need the inner group.  */</span>
<a name="l04725"></a>04725 
<a name="l04726"></a>04726           <span class="comment">/* We can&#39;t use `p&#39; to check ahead because we push</span>
<a name="l04727"></a>04727 <span class="comment">             a failure point to `p + mcnt&#39; after we do this.  */</span>
<a name="l04728"></a>04728           p1 = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04729"></a>04729 
<a name="l04730"></a>04730           <span class="comment">/* We need to skip no_op&#39;s before we look for the</span>
<a name="l04731"></a>04731 <span class="comment">             start_memory in case this on_failure_jump is happening as</span>
<a name="l04732"></a>04732 <span class="comment">             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1</span>
<a name="l04733"></a>04733 <span class="comment">             against aba.  */</span>
<a name="l04734"></a>04734           <span class="keywordflow">while</span> (p1 &lt; pend &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>)
<a name="l04735"></a>04735             p1++;
<a name="l04736"></a>04736 
<a name="l04737"></a>04737           <span class="keywordflow">if</span> (p1 &lt; pend &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>)
<a name="l04738"></a>04738             {
<a name="l04739"></a>04739               <span class="comment">/* We have a new highest active register now.  This will</span>
<a name="l04740"></a>04740 <span class="comment">                 get reset at the start_memory we are about to get to,</span>
<a name="l04741"></a>04741 <span class="comment">                 but we will have saved all the registers relevant to</span>
<a name="l04742"></a>04742 <span class="comment">                 this repetition op, as described above.  */</span>
<a name="l04743"></a>04743               highest_active_reg = *(p1 + 1) + *(p1 + 2);
<a name="l04744"></a>04744               <span class="keywordflow">if</span> (lowest_active_reg == <a class="code" href="regex_8c.html#a508c8adae6628ee43b8498249272efb9">NO_LOWEST_ACTIVE_REG</a>)
<a name="l04745"></a>04745                 lowest_active_reg = *(p1 + 1);
<a name="l04746"></a>04746             }
<a name="l04747"></a>04747 
<a name="l04748"></a>04748           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;:\n&quot;</span>);
<a name="l04749"></a>04749           <a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">PUSH_FAILURE_POINT</a> (p + mcnt, d, -2);
<a name="l04750"></a>04750           <span class="keywordflow">break</span>;
<a name="l04751"></a>04751 
<a name="l04752"></a>04752 
<a name="l04753"></a>04753         <span class="comment">/* A smart repeat ends with `maybe_pop_jump&#39;.</span>
<a name="l04754"></a>04754 <span class="comment">       We change it to either `pop_failure_jump&#39; or `jump&#39;.  */</span>
<a name="l04755"></a>04755         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>:
<a name="l04756"></a>04756           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);
<a name="l04757"></a>04757           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING maybe_pop_jump %d.\n&quot;</span>, mcnt);
<a name="l04758"></a>04758           {
<a name="l04759"></a>04759         <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p2 = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l04760"></a>04760 
<a name="l04761"></a>04761             <span class="comment">/* Compare the beginning of the repeat with what in the</span>
<a name="l04762"></a>04762 <span class="comment">               pattern follows its end. If we can establish that there</span>
<a name="l04763"></a>04763 <span class="comment">               is nothing that they would both match, i.e., that we</span>
<a name="l04764"></a>04764 <span class="comment">               would have to backtrack because of (as in, e.g., `a*a&#39;)</span>
<a name="l04765"></a>04765 <span class="comment">               then we can change to pop_failure_jump, because we&#39;ll</span>
<a name="l04766"></a>04766 <span class="comment">               never have to backtrack.</span>
<a name="l04767"></a>04767 <span class="comment"></span>
<a name="l04768"></a>04768 <span class="comment">               This is not true in the case of alternatives: in</span>
<a name="l04769"></a>04769 <span class="comment">               `(a|ab)*&#39; we do need to backtrack to the `ab&#39; alternative</span>
<a name="l04770"></a>04770 <span class="comment">               (e.g., if the string was `ab&#39;).  But instead of trying to</span>
<a name="l04771"></a>04771 <span class="comment">               detect that here, the alternative has put on a dummy</span>
<a name="l04772"></a>04772 <span class="comment">               failure point which is what we will end up popping.  */</span>
<a name="l04773"></a>04773 
<a name="l04774"></a>04774         <span class="comment">/* Skip over open/close-group commands.</span>
<a name="l04775"></a>04775 <span class="comment">           If what follows this loop is a ...+ construct,</span>
<a name="l04776"></a>04776 <span class="comment">           look at what begins its body, since we will have to</span>
<a name="l04777"></a>04777 <span class="comment">           match at least one of that.  */</span>
<a name="l04778"></a>04778         <span class="keywordflow">while</span> (1)
<a name="l04779"></a>04779           {
<a name="l04780"></a>04780         <span class="keywordflow">if</span> (p2 + 2 &lt; pend
<a name="l04781"></a>04781             &amp;&amp; ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>
<a name="l04782"></a>04782             || (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>))
<a name="l04783"></a>04783           p2 += 3;
<a name="l04784"></a>04784         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p2 + 6 &lt; pend
<a name="l04785"></a>04785              &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>)
<a name="l04786"></a>04786           p2 += 6;
<a name="l04787"></a>04787         <span class="keywordflow">else</span>
<a name="l04788"></a>04788           <span class="keywordflow">break</span>;
<a name="l04789"></a>04789           }
<a name="l04790"></a>04790 
<a name="l04791"></a>04791         p1 = p + mcnt;
<a name="l04792"></a>04792         <span class="comment">/* p1[0] ... p1[2] are the `on_failure_jump&#39; corresponding</span>
<a name="l04793"></a>04793 <span class="comment">           to the `maybe_finalize_jump&#39; of this case.  Examine what</span>
<a name="l04794"></a>04794 <span class="comment">           follows.  */</span>
<a name="l04795"></a>04795 
<a name="l04796"></a>04796             <span class="comment">/* If we&#39;re at the end of the pattern, we can change.  */</span>
<a name="l04797"></a>04797             <span class="keywordflow">if</span> (p2 == pend)
<a name="l04798"></a>04798           {
<a name="l04799"></a>04799         <span class="comment">/* Consider what happens when matching &quot;:\(.*\)&quot;</span>
<a name="l04800"></a>04800 <span class="comment">           against &quot;:/&quot;.  I don&#39;t really understand this code</span>
<a name="l04801"></a>04801 <span class="comment">           yet.  */</span>
<a name="l04802"></a>04802             p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04803"></a>04803                 <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a>
<a name="l04804"></a>04804                   (<span class="stringliteral">&quot;  End of pattern: change to `pop_failure_jump&#39;.\n&quot;</span>);
<a name="l04805"></a>04805               }
<a name="l04806"></a>04806 
<a name="l04807"></a>04807             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>
<a name="l04808"></a>04808              || (bufp-&gt;newline_anchor &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>))
<a name="l04809"></a>04809           {
<a name="l04810"></a>04810         <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c
<a name="l04811"></a>04811                   = *p2 == (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a> ? <span class="charliteral">&#39;\n&#39;</span> : p2[2];
<a name="l04812"></a>04812 
<a name="l04813"></a>04813                 <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a> &amp;&amp; p1[5] != c)
<a name="l04814"></a>04814                   {
<a name="l04815"></a>04815             p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04816"></a>04816                     <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  %c != %c =&gt; pop_failure_jump.\n&quot;</span>,
<a name="l04817"></a>04817                                   c, p1[5]);
<a name="l04818"></a>04818                   }
<a name="l04819"></a>04819 
<a name="l04820"></a>04820         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>
<a name="l04821"></a>04821              || (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>)
<a name="l04822"></a>04822           {
<a name="l04823"></a>04823             <span class="keywordtype">int</span> not = (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>;
<a name="l04824"></a>04824 
<a name="l04825"></a>04825             <span class="keywordflow">if</span> (c &lt; (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) (p1[4] * <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)
<a name="l04826"></a>04826             &amp;&amp; p1[5 + c / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>] &amp; (1 &lt;&lt; (c % <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)))
<a name="l04827"></a>04827               not = !not;
<a name="l04828"></a>04828 
<a name="l04829"></a>04829                     <span class="comment">/* `not&#39; is equal to 1 if c would match, which means</span>
<a name="l04830"></a>04830 <span class="comment">                        that we can&#39;t change to pop_failure_jump.  */</span>
<a name="l04831"></a>04831             <span class="keywordflow">if</span> (!not)
<a name="l04832"></a>04832                       {
<a name="l04833"></a>04833                 p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04834"></a>04834                         <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;  No match =&gt; pop_failure_jump.\n&quot;</span>);
<a name="l04835"></a>04835                       }
<a name="l04836"></a>04836           }
<a name="l04837"></a>04837           }
<a name="l04838"></a>04838             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p2 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>)
<a name="l04839"></a>04839           {
<a name="l04840"></a>04840 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l04841"></a>04841 <span class="preprocessor"></span>        <span class="keyword">register</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c
<a name="l04842"></a>04842                   = *p2 == (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a> ? <span class="charliteral">&#39;\n&#39;</span> : p2[2];
<a name="l04843"></a>04843 <span class="preprocessor">#endif</span>
<a name="l04844"></a>04844 <span class="preprocessor"></span>
<a name="l04845"></a>04845 <span class="preprocessor">#if 0</span>
<a name="l04846"></a>04846 <span class="preprocessor"></span>                <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>
<a name="l04847"></a>04847             &amp;&amp; ! ((int) p2[1] * <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a> &gt; (<span class="keywordtype">int</span>) p1[5]
<a name="l04848"></a>04848               &amp;&amp; (p2[2 + p1[5] / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>]
<a name="l04849"></a>04849                   &amp; (1 &lt;&lt; (p1[5] % <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)))))
<a name="l04850"></a>04850 #<span class="keywordflow">else</span>
<a name="l04851"></a>04851                 <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab0eca0e160953a14bcb41d151287d1f1">exactn</a>
<a name="l04852"></a>04852             &amp;&amp; ! ((int) p2[1] * <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a> &gt; (<span class="keywordtype">int</span>) p1[4]
<a name="l04853"></a>04853               &amp;&amp; (p2[2 + p1[4] / <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>]
<a name="l04854"></a>04854                   &amp; (1 &lt;&lt; (p1[4] % <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>)))))
<a name="l04855"></a>04855 #endif
<a name="l04856"></a>04856                   {
<a name="l04857"></a>04857             p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04858"></a>04858                     <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  %c != %c =&gt; pop_failure_jump.\n&quot;</span>,
<a name="l04859"></a>04859                                   c, p1[5]);
<a name="l04860"></a>04860                   }
<a name="l04861"></a>04861 
<a name="l04862"></a>04862         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118abcbe9b8a81da1098e4ffbb7c4f4a8e2e">charset_not</a>)
<a name="l04863"></a>04863           {
<a name="l04864"></a>04864             <span class="keywordtype">int</span> idx;
<a name="l04865"></a>04865             <span class="comment">/* We win if the charset_not inside the loop</span>
<a name="l04866"></a>04866 <span class="comment">               lists every character listed in the charset after.  */</span>
<a name="l04867"></a>04867             <span class="keywordflow">for</span> (idx = 0; idx &lt; (int) p2[1]; idx++)
<a name="l04868"></a>04868               <span class="keywordflow">if</span> (! (p2[2 + idx] == 0
<a name="l04869"></a>04869                  || (idx &lt; (<span class="keywordtype">int</span>) p1[4]
<a name="l04870"></a>04870                  &amp;&amp; ((p2[2 + idx] &amp; ~ p1[5 + idx]) == 0))))
<a name="l04871"></a>04871             <span class="keywordflow">break</span>;
<a name="l04872"></a>04872 
<a name="l04873"></a>04873             <span class="keywordflow">if</span> (idx == p2[1])
<a name="l04874"></a>04874                       {
<a name="l04875"></a>04875                 p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04876"></a>04876                         <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;  No match =&gt; pop_failure_jump.\n&quot;</span>);
<a name="l04877"></a>04877                       }
<a name="l04878"></a>04878           }
<a name="l04879"></a>04879         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6247a0132ac9bb1af7dbc840afe09c88">charset</a>)
<a name="l04880"></a>04880           {
<a name="l04881"></a>04881             <span class="keywordtype">int</span> idx;
<a name="l04882"></a>04882             <span class="comment">/* We win if the charset inside the loop</span>
<a name="l04883"></a>04883 <span class="comment">               has no overlap with the one after the loop.  */</span>
<a name="l04884"></a>04884             <span class="keywordflow">for</span> (idx = 0;
<a name="l04885"></a>04885              idx &lt; (int) p2[1] &amp;&amp; idx &lt; (<span class="keywordtype">int</span>) p1[4];
<a name="l04886"></a>04886              idx++)
<a name="l04887"></a>04887               <span class="keywordflow">if</span> ((p2[2 + idx] &amp; p1[5 + idx]) != 0)
<a name="l04888"></a>04888             <span class="keywordflow">break</span>;
<a name="l04889"></a>04889 
<a name="l04890"></a>04890             <span class="keywordflow">if</span> (idx == p2[1] || idx == p1[4])
<a name="l04891"></a>04891                       {
<a name="l04892"></a>04892                 p[-3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>;
<a name="l04893"></a>04893                         <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;  No match =&gt; pop_failure_jump.\n&quot;</span>);
<a name="l04894"></a>04894                       }
<a name="l04895"></a>04895           }
<a name="l04896"></a>04896           }
<a name="l04897"></a>04897       }
<a name="l04898"></a>04898       p -= 2;       <span class="comment">/* Point at relative address again.  */</span>
<a name="l04899"></a>04899       <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p[-1] != <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>)
<a name="l04900"></a>04900         {
<a name="l04901"></a>04901           p[-1] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>;
<a name="l04902"></a>04902               <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;  Match =&gt; jump.\n&quot;</span>);
<a name="l04903"></a>04903           <span class="keywordflow">goto</span> unconditional_jump;
<a name="l04904"></a>04904         }
<a name="l04905"></a>04905         <span class="comment">/* Note fall through.  */</span>
<a name="l04906"></a>04906 
<a name="l04907"></a>04907 
<a name="l04908"></a>04908     <span class="comment">/* The end of a simple repeat has a pop_failure_jump back to</span>
<a name="l04909"></a>04909 <span class="comment">           its matching on_failure_jump, where the latter will push a</span>
<a name="l04910"></a>04910 <span class="comment">           failure point.  The pop_failure_jump takes off failure</span>
<a name="l04911"></a>04911 <span class="comment">           points put on by this pop_failure_jump&#39;s matching</span>
<a name="l04912"></a>04912 <span class="comment">           on_failure_jump; we got through the pattern to here from the</span>
<a name="l04913"></a>04913 <span class="comment">           matching on_failure_jump, so didn&#39;t fail.  */</span>
<a name="l04914"></a>04914         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>:
<a name="l04915"></a>04915           {
<a name="l04916"></a>04916             <span class="comment">/* We need to pass separate storage for the lowest and</span>
<a name="l04917"></a>04917 <span class="comment">               highest registers, even though we don&#39;t care about the</span>
<a name="l04918"></a>04918 <span class="comment">               actual values.  Otherwise, we will restore only one</span>
<a name="l04919"></a>04919 <span class="comment">               register from the stack, since lowest will == highest in</span>
<a name="l04920"></a>04920 <span class="comment">               `pop_failure_point&#39;.  */</span>
<a name="l04921"></a>04921             <a class="code" href="regex-gnu_8h.html#ab64c4b3b9990d5c9e7e30219aecec37a">active_reg_t</a> dummy_low_reg, dummy_high_reg;
<a name="l04922"></a>04922             <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pdummy;
<a name="l04923"></a>04923             <span class="keyword">const</span> <span class="keywordtype">char</span> *sdummy;
<a name="l04924"></a>04924 
<a name="l04925"></a>04925             <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING pop_failure_jump.\n&quot;</span>);
<a name="l04926"></a>04926             <a class="code" href="regex_8c.html#a51d78204b5e3cc240058c986103c8b8e">POP_FAILURE_POINT</a> (sdummy, pdummy,
<a name="l04927"></a>04927                                dummy_low_reg, dummy_high_reg,
<a name="l04928"></a>04928                                reg_dummy, reg_dummy, reg_info_dummy);
<a name="l04929"></a>04929           }
<a name="l04930"></a>04930       <span class="comment">/* Note fall through.  */</span>
<a name="l04931"></a>04931 
<a name="l04932"></a>04932     unconditional_jump:
<a name="l04933"></a>04933 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04934"></a>04934 <span class="preprocessor"></span>      <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;\n%p: &quot;</span>, p);
<a name="l04935"></a>04935 <span class="preprocessor">#else</span>
<a name="l04936"></a>04936 <span class="preprocessor"></span>      <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;\n0x%x: &quot;</span>, p);
<a name="l04937"></a>04937 <span class="preprocessor">#endif</span>
<a name="l04938"></a>04938 <span class="preprocessor"></span>          <span class="comment">/* Note fall through.  */</span>
<a name="l04939"></a>04939 
<a name="l04940"></a>04940         <span class="comment">/* Unconditionally jump (without popping any failure points).  */</span>
<a name="l04941"></a>04941         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l04942"></a>04942       <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);    <span class="comment">/* Get the amount to jump.  */</span>
<a name="l04943"></a>04943           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING jump %d &quot;</span>, mcnt);
<a name="l04944"></a>04944       p += mcnt;                <span class="comment">/* Do the jump.  */</span>
<a name="l04945"></a>04945 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04946"></a>04946 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;(to %p).\n&quot;</span>, p);
<a name="l04947"></a>04947 <span class="preprocessor">#else</span>
<a name="l04948"></a>04948 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;(to 0x%x).\n&quot;</span>, p);
<a name="l04949"></a>04949 <span class="preprocessor">#endif</span>
<a name="l04950"></a>04950 <span class="preprocessor"></span>      <span class="keywordflow">break</span>;
<a name="l04951"></a>04951 
<a name="l04952"></a>04952 
<a name="l04953"></a>04953         <span class="comment">/* We need this opcode so we can detect where alternatives end</span>
<a name="l04954"></a>04954 <span class="comment">           in `group_match_null_string_p&#39; et al.  */</span>
<a name="l04955"></a>04955         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>:
<a name="l04956"></a>04956           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING jump_past_alt.\n&quot;</span>);
<a name="l04957"></a>04957           <span class="keywordflow">goto</span> unconditional_jump;
<a name="l04958"></a>04958 
<a name="l04959"></a>04959 
<a name="l04960"></a>04960         <span class="comment">/* Normally, the on_failure_jump pushes a failure point, which</span>
<a name="l04961"></a>04961 <span class="comment">           then gets popped at pop_failure_jump.  We will end up at</span>
<a name="l04962"></a>04962 <span class="comment">           pop_failure_jump, also, and with a pattern of, say, `a+&#39;, we</span>
<a name="l04963"></a>04963 <span class="comment">           are skipping over the on_failure_jump, so we have to push</span>
<a name="l04964"></a>04964 <span class="comment">           something meaningless for pop_failure_jump to pop.  */</span>
<a name="l04965"></a>04965         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a3918fb85c0fd4b2f8c84afad14836eba">dummy_failure_jump</a>:
<a name="l04966"></a>04966           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING dummy_failure_jump.\n&quot;</span>);
<a name="l04967"></a>04967           <span class="comment">/* It doesn&#39;t matter what we push for the string here.  What</span>
<a name="l04968"></a>04968 <span class="comment">             the code at `fail&#39; tests is the value for the pattern.  */</span>
<a name="l04969"></a>04969           <a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">PUSH_FAILURE_POINT</a> (<a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, -2);
<a name="l04970"></a>04970           <span class="keywordflow">goto</span> unconditional_jump;
<a name="l04971"></a>04971 
<a name="l04972"></a>04972 
<a name="l04973"></a>04973         <span class="comment">/* At the end of an alternative, we need to push a dummy failure</span>
<a name="l04974"></a>04974 <span class="comment">           point in case we are followed by a `pop_failure_jump&#39;, because</span>
<a name="l04975"></a>04975 <span class="comment">           we don&#39;t want the failure point for the alternative to be</span>
<a name="l04976"></a>04976 <span class="comment">           popped.  For example, matching `(a|ab)*&#39; against `aab&#39;</span>
<a name="l04977"></a>04977 <span class="comment">           requires that we match the `ab&#39; alternative.  */</span>
<a name="l04978"></a>04978         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae96f67086c4f61cc6fd32b6b493dc17f">push_dummy_failure</a>:
<a name="l04979"></a>04979           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING push_dummy_failure.\n&quot;</span>);
<a name="l04980"></a>04980           <span class="comment">/* See comments just above at `dummy_failure_jump&#39; about the</span>
<a name="l04981"></a>04981 <span class="comment">             two zeroes.  */</span>
<a name="l04982"></a>04982           <a class="code" href="regex_8c.html#a74904744b0c1f8fe8cb2bf1584da2b3b">PUSH_FAILURE_POINT</a> (<a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, -2);
<a name="l04983"></a>04983           <span class="keywordflow">break</span>;
<a name="l04984"></a>04984 
<a name="l04985"></a>04985         <span class="comment">/* Have to succeed matching what follows at least n times.</span>
<a name="l04986"></a>04986 <span class="comment">           After that, handle like `on_failure_jump&#39;.  */</span>
<a name="l04987"></a>04987         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>:
<a name="l04988"></a>04988           <a class="code" href="regex_8c.html#a9afddc5990335682b1958801af7e4bf3">EXTRACT_NUMBER</a> (mcnt, p + 2);
<a name="l04989"></a>04989           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING succeed_n %d.\n&quot;</span>, mcnt);
<a name="l04990"></a>04990 
<a name="l04991"></a>04991           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (mcnt &gt;= 0);
<a name="l04992"></a>04992           <span class="comment">/* Originally, this is how many times we HAVE to succeed.  */</span>
<a name="l04993"></a>04993           <span class="keywordflow">if</span> (mcnt &gt; 0)
<a name="l04994"></a>04994             {
<a name="l04995"></a>04995                mcnt--;
<a name="l04996"></a>04996            p += 2;
<a name="l04997"></a>04997                <a class="code" href="regex_8c.html#aec2d0e7545b2756d65a556d3ac7cdf89">STORE_NUMBER_AND_INCR</a> (p, mcnt);
<a name="l04998"></a>04998 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l04999"></a>04999 <span class="preprocessor"></span>               <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting %p to %d.\n&quot;</span>, p - 2, mcnt);
<a name="l05000"></a>05000 <span class="preprocessor">#else</span>
<a name="l05001"></a>05001 <span class="preprocessor"></span>               <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting 0x%x to %d.\n&quot;</span>, p - 2, mcnt);
<a name="l05002"></a>05002 <span class="preprocessor">#endif</span>
<a name="l05003"></a>05003 <span class="preprocessor"></span>            }
<a name="l05004"></a>05004       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mcnt == 0)
<a name="l05005"></a>05005             {
<a name="l05006"></a>05006 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05007"></a>05007 <span class="preprocessor"></span>              <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;  Setting two bytes from %p to no_op.\n&quot;</span>, p+2);
<a name="l05008"></a>05008 <span class="preprocessor">#else</span>
<a name="l05009"></a>05009 <span class="preprocessor"></span>              <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;  Setting two bytes from 0x%x to no_op.\n&quot;</span>, p+2);
<a name="l05010"></a>05010 <span class="preprocessor">#endif</span>
<a name="l05011"></a>05011 <span class="preprocessor"></span>          p[2] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>;
<a name="l05012"></a>05012               p[3] = (<span class="keywordtype">unsigned</span> char) <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>;
<a name="l05013"></a>05013               <span class="keywordflow">goto</span> on_failure;
<a name="l05014"></a>05014             }
<a name="l05015"></a>05015           <span class="keywordflow">break</span>;
<a name="l05016"></a>05016 
<a name="l05017"></a>05017         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>:
<a name="l05018"></a>05018           <a class="code" href="regex_8c.html#a9afddc5990335682b1958801af7e4bf3">EXTRACT_NUMBER</a> (mcnt, p + 2);
<a name="l05019"></a>05019           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING jump_n %d.\n&quot;</span>, mcnt);
<a name="l05020"></a>05020 
<a name="l05021"></a>05021           <span class="comment">/* Originally, this is how many times we CAN jump.  */</span>
<a name="l05022"></a>05022           <span class="keywordflow">if</span> (mcnt)
<a name="l05023"></a>05023             {
<a name="l05024"></a>05024                mcnt--;
<a name="l05025"></a>05025                <a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">STORE_NUMBER</a> (p + 2, mcnt);
<a name="l05026"></a>05026 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05027"></a>05027 <span class="preprocessor"></span>               <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting %p to %d.\n&quot;</span>, p + 2, mcnt);
<a name="l05028"></a>05028 <span class="preprocessor">#else</span>
<a name="l05029"></a>05029 <span class="preprocessor"></span>               <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting 0x%x to %d.\n&quot;</span>, p + 2, mcnt);
<a name="l05030"></a>05030 <span class="preprocessor">#endif</span>
<a name="l05031"></a>05031 <span class="preprocessor"></span>           <span class="keywordflow">goto</span> unconditional_jump;
<a name="l05032"></a>05032             }
<a name="l05033"></a>05033           <span class="comment">/* If don&#39;t have to jump any more, skip over the rest of command.  */</span>
<a name="l05034"></a>05034       <span class="keywordflow">else</span>
<a name="l05035"></a>05035         p += 4;
<a name="l05036"></a>05036           <span class="keywordflow">break</span>;
<a name="l05037"></a>05037 
<a name="l05038"></a>05038     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>:
<a name="l05039"></a>05039       {
<a name="l05040"></a>05040             <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING set_number_at.\n&quot;</span>);
<a name="l05041"></a>05041 
<a name="l05042"></a>05042             <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);
<a name="l05043"></a>05043             p1 = p + mcnt;
<a name="l05044"></a>05044             <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p);
<a name="l05045"></a>05045 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05046"></a>05046 <span class="preprocessor"></span>            <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting %p to %d.\n&quot;</span>, p1, mcnt);
<a name="l05047"></a>05047 <span class="preprocessor">#else</span>
<a name="l05048"></a>05048 <span class="preprocessor"></span>            <a class="code" href="regex_8c.html#ae1a07ee1a4b73aa71754bce23d0690aa">DEBUG_PRINT3</a> (<span class="stringliteral">&quot;  Setting 0x%x to %d.\n&quot;</span>, p1, mcnt);
<a name="l05049"></a>05049 <span class="preprocessor">#endif</span>
<a name="l05050"></a>05050 <span class="preprocessor"></span>        <a class="code" href="regex_8c.html#a6878991bbaf83ac3debe1d74f4a450e1">STORE_NUMBER</a> (p1, mcnt);
<a name="l05051"></a>05051             <span class="keywordflow">break</span>;
<a name="l05052"></a>05052           }
<a name="l05053"></a>05053 
<a name="l05054"></a>05054 <span class="preprocessor">#if 0</span>
<a name="l05055"></a>05055 <span class="preprocessor"></span>    <span class="comment">/* The DEC Alpha C compiler 3.x generates incorrect code for the</span>
<a name="l05056"></a>05056 <span class="comment">       test  WORDCHAR_P (d - 1) != WORDCHAR_P (d)  in the expansion of</span>
<a name="l05057"></a>05057 <span class="comment">       AT_WORD_BOUNDARY, so this code is disabled.  Expanding the</span>
<a name="l05058"></a>05058 <span class="comment">       macro and introducing temporary variables works around the bug.  */</span>
<a name="l05059"></a>05059 
<a name="l05060"></a>05060     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>:
<a name="l05061"></a>05061       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING wordbound.\n&quot;</span>);
<a name="l05062"></a>05062       <span class="keywordflow">if</span> (AT_WORD_BOUNDARY (d))
<a name="l05063"></a>05063         <span class="keywordflow">break</span>;
<a name="l05064"></a>05064       <span class="keywordflow">goto</span> fail;
<a name="l05065"></a>05065 
<a name="l05066"></a>05066     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>:
<a name="l05067"></a>05067       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING notwordbound.\n&quot;</span>);
<a name="l05068"></a>05068       <span class="keywordflow">if</span> (AT_WORD_BOUNDARY (d))
<a name="l05069"></a>05069         <span class="keywordflow">goto</span> fail;
<a name="l05070"></a>05070       <span class="keywordflow">break</span>;
<a name="l05071"></a>05071 <span class="preprocessor">#else</span>
<a name="l05072"></a>05072 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>:
<a name="l05073"></a>05073     {
<a name="l05074"></a>05074       <span class="keywordtype">boolean</span> prevchar, thischar;
<a name="l05075"></a>05075 
<a name="l05076"></a>05076       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING wordbound.\n&quot;</span>);
<a name="l05077"></a>05077       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d) || <a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">AT_STRINGS_END</a> (d))
<a name="l05078"></a>05078         <span class="keywordflow">break</span>;
<a name="l05079"></a>05079 
<a name="l05080"></a>05080       prevchar = <a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d - 1);
<a name="l05081"></a>05081       thischar = <a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d);
<a name="l05082"></a>05082       <span class="keywordflow">if</span> (prevchar != thischar)
<a name="l05083"></a>05083         <span class="keywordflow">break</span>;
<a name="l05084"></a>05084       <span class="keywordflow">goto</span> fail;
<a name="l05085"></a>05085     }
<a name="l05086"></a>05086 
<a name="l05087"></a>05087       <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>:
<a name="l05088"></a>05088     {
<a name="l05089"></a>05089       <span class="keywordtype">boolean</span> prevchar, thischar;
<a name="l05090"></a>05090 
<a name="l05091"></a>05091       <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING notwordbound.\n&quot;</span>);
<a name="l05092"></a>05092       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d) || <a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">AT_STRINGS_END</a> (d))
<a name="l05093"></a>05093         <span class="keywordflow">goto</span> fail;
<a name="l05094"></a>05094 
<a name="l05095"></a>05095       prevchar = <a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d - 1);
<a name="l05096"></a>05096       thischar = <a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d);
<a name="l05097"></a>05097       <span class="keywordflow">if</span> (prevchar != thischar)
<a name="l05098"></a>05098         <span class="keywordflow">goto</span> fail;
<a name="l05099"></a>05099       <span class="keywordflow">break</span>;
<a name="l05100"></a>05100     }
<a name="l05101"></a>05101 <span class="preprocessor">#endif</span>
<a name="l05102"></a>05102 <span class="preprocessor"></span>
<a name="l05103"></a>05103     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>:
<a name="l05104"></a>05104           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING wordbeg.\n&quot;</span>);
<a name="l05105"></a>05105       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d) &amp;&amp; (<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d) || !<a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d - 1)))
<a name="l05106"></a>05106         <span class="keywordflow">break</span>;
<a name="l05107"></a>05107           <span class="keywordflow">goto</span> fail;
<a name="l05108"></a>05108 
<a name="l05109"></a>05109     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>:
<a name="l05110"></a>05110           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING wordend.\n&quot;</span>);
<a name="l05111"></a>05111       <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a4ae509096aba99683d03e7731c8e1095">AT_STRINGS_BEG</a> (d) &amp;&amp; <a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d - 1)
<a name="l05112"></a>05112               &amp;&amp; (!<a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d) || <a class="code" href="regex_8c.html#a828f1cb8f3855b8656267c902effad75">AT_STRINGS_END</a> (d)))
<a name="l05113"></a>05113         <span class="keywordflow">break</span>;
<a name="l05114"></a>05114           <span class="keywordflow">goto</span> fail;
<a name="l05115"></a>05115 
<a name="l05116"></a>05116 <span class="preprocessor">#ifdef emacs</span>
<a name="l05117"></a>05117 <span class="preprocessor"></span>    <span class="keywordflow">case</span> before_dot:
<a name="l05118"></a>05118           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING before_dot.\n&quot;</span>);
<a name="l05119"></a>05119       <span class="keywordflow">if</span> (PTR_CHAR_POS ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) d) &gt;= point)
<a name="l05120"></a>05120         <span class="keywordflow">goto</span> fail;
<a name="l05121"></a>05121       <span class="keywordflow">break</span>;
<a name="l05122"></a>05122 
<a name="l05123"></a>05123     <span class="keywordflow">case</span> at_dot:
<a name="l05124"></a>05124           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING at_dot.\n&quot;</span>);
<a name="l05125"></a>05125       <span class="keywordflow">if</span> (PTR_CHAR_POS ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) d) != point)
<a name="l05126"></a>05126         <span class="keywordflow">goto</span> fail;
<a name="l05127"></a>05127       <span class="keywordflow">break</span>;
<a name="l05128"></a>05128 
<a name="l05129"></a>05129     <span class="keywordflow">case</span> after_dot:
<a name="l05130"></a>05130           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING after_dot.\n&quot;</span>);
<a name="l05131"></a>05131           <span class="keywordflow">if</span> (PTR_CHAR_POS ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) d) &lt;= point)
<a name="l05132"></a>05132         <span class="keywordflow">goto</span> fail;
<a name="l05133"></a>05133       <span class="keywordflow">break</span>;
<a name="l05134"></a>05134 
<a name="l05135"></a>05135     <span class="keywordflow">case</span> syntaxspec:
<a name="l05136"></a>05136           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING syntaxspec %d.\n&quot;</span>, mcnt);
<a name="l05137"></a>05137       mcnt = *p++;
<a name="l05138"></a>05138       <span class="keywordflow">goto</span> matchsyntax;
<a name="l05139"></a>05139 
<a name="l05140"></a>05140         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>:
<a name="l05141"></a>05141           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING Emacs wordchar.\n&quot;</span>);
<a name="l05142"></a>05142       mcnt = (int) <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l05143"></a>05143         matchsyntax:
<a name="l05144"></a>05144       <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l05145"></a>05145       <span class="comment">/* Can&#39;t use *d++ here; SYNTAX may be an unsafe macro.  */</span>
<a name="l05146"></a>05146       d++;
<a name="l05147"></a>05147       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (d[-1]) != (<span class="keyword">enum</span> syntaxcode) mcnt)
<a name="l05148"></a>05148         <span class="keywordflow">goto</span> fail;
<a name="l05149"></a>05149           <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l05150"></a>05150       <span class="keywordflow">break</span>;
<a name="l05151"></a>05151 
<a name="l05152"></a>05152     <span class="keywordflow">case</span> notsyntaxspec:
<a name="l05153"></a>05153           <a class="code" href="regex_8c.html#aa56b1ff14ec552b5af8e9af50bc9d5cc">DEBUG_PRINT2</a> (<span class="stringliteral">&quot;EXECUTING notsyntaxspec %d.\n&quot;</span>, mcnt);
<a name="l05154"></a>05154       mcnt = *p++;
<a name="l05155"></a>05155       <span class="keywordflow">goto</span> matchnotsyntax;
<a name="l05156"></a>05156 
<a name="l05157"></a>05157         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>:
<a name="l05158"></a>05158           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING Emacs notwordchar.\n&quot;</span>);
<a name="l05159"></a>05159       mcnt = (int) <a class="code" href="regex_8c.html#a3c4fa96131648fe8cb5bb3055015e73a">Sword</a>;
<a name="l05160"></a>05160         matchnotsyntax:
<a name="l05161"></a>05161       <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l05162"></a>05162       <span class="comment">/* Can&#39;t use *d++ here; SYNTAX may be an unsafe macro.  */</span>
<a name="l05163"></a>05163       d++;
<a name="l05164"></a>05164       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#aa3ac3cf24b0571b34350ae5cf10f354e">SYNTAX</a> (d[-1]) == (<span class="keyword">enum</span> syntaxcode) mcnt)
<a name="l05165"></a>05165         <span class="keywordflow">goto</span> fail;
<a name="l05166"></a>05166       <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l05167"></a>05167           <span class="keywordflow">break</span>;
<a name="l05168"></a>05168 
<a name="l05169"></a>05169 <span class="preprocessor">#else </span><span class="comment">/* not emacs */</span>
<a name="l05170"></a>05170     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a26eed2ae578da61bebc7b55e7610cf0b">wordchar</a>:
<a name="l05171"></a>05171           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING non-Emacs wordchar.\n&quot;</span>);
<a name="l05172"></a>05172       <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l05173"></a>05173           <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d))
<a name="l05174"></a>05174             <span class="keywordflow">goto</span> fail;
<a name="l05175"></a>05175       <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l05176"></a>05176           d++;
<a name="l05177"></a>05177       <span class="keywordflow">break</span>;
<a name="l05178"></a>05178 
<a name="l05179"></a>05179     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a01398d7bcfdbcb84b318fc65a7ef9c93">notwordchar</a>:
<a name="l05180"></a>05180           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;EXECUTING non-Emacs notwordchar.\n&quot;</span>);
<a name="l05181"></a>05181       <a class="code" href="regex_8c.html#a03e91c701217af9b9faab62cb2a65d7d">PREFETCH</a> ();
<a name="l05182"></a>05182       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a9cb82d6af5bb56ce088c91cef5127ce6">WORDCHAR_P</a> (d))
<a name="l05183"></a>05183             <span class="keywordflow">goto</span> fail;
<a name="l05184"></a>05184           <a class="code" href="regex_8c.html#aa286396ee78a5823c6bedd72e303e4c9">SET_REGS_MATCHED</a> ();
<a name="l05185"></a>05185           d++;
<a name="l05186"></a>05186       <span class="keywordflow">break</span>;
<a name="l05187"></a>05187 <span class="preprocessor">#endif </span><span class="comment">/* not emacs */</span>
<a name="l05188"></a>05188 
<a name="l05189"></a>05189         <span class="keywordflow">default</span>:
<a name="l05190"></a>05190           abort ();
<a name="l05191"></a>05191     }
<a name="l05192"></a>05192       <span class="keywordflow">continue</span>;  <span class="comment">/* Successfully executed one pattern command; keep going.  */</span>
<a name="l05193"></a>05193 
<a name="l05194"></a>05194 
<a name="l05195"></a>05195     <span class="comment">/* We goto here if a matching operation fails. */</span>
<a name="l05196"></a>05196     fail:
<a name="l05197"></a>05197       <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a222a4648230cba6a1801e51b4e2ced77">FAIL_STACK_EMPTY</a> ())
<a name="l05198"></a>05198     { <span class="comment">/* A restart point is known.  Restore to that state.  */</span>
<a name="l05199"></a>05199           <a class="code" href="regex_8c.html#a90a312923984a45f83767acea95b84a1">DEBUG_PRINT1</a> (<span class="stringliteral">&quot;\nFAIL:\n&quot;</span>);
<a name="l05200"></a>05200           <a class="code" href="regex_8c.html#a51d78204b5e3cc240058c986103c8b8e">POP_FAILURE_POINT</a> (d, p,
<a name="l05201"></a>05201                              lowest_active_reg, highest_active_reg,
<a name="l05202"></a>05202                              regstart, regend, reg_info);
<a name="l05203"></a>05203 
<a name="l05204"></a>05204           <span class="comment">/* If this failure point is a dummy, try the next one.  */</span>
<a name="l05205"></a>05205           <span class="keywordflow">if</span> (!p)
<a name="l05206"></a>05206         <span class="keywordflow">goto</span> fail;
<a name="l05207"></a>05207 
<a name="l05208"></a>05208           <span class="comment">/* If we failed to the end of the pattern, don&#39;t examine *p.  */</span>
<a name="l05209"></a>05209       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p &lt;= pend);
<a name="l05210"></a>05210           <span class="keywordflow">if</span> (p &lt; pend)
<a name="l05211"></a>05211             {
<a name="l05212"></a>05212               <span class="keywordtype">boolean</span> is_a_jump_n = <span class="keyword">false</span>;
<a name="l05213"></a>05213 
<a name="l05214"></a>05214               <span class="comment">/* If failed to a backwards jump that&#39;s part of a repetition</span>
<a name="l05215"></a>05215 <span class="comment">                 loop, need to pop this failure point and use the next one.  */</span>
<a name="l05216"></a>05216               <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p)
<a name="l05217"></a>05217                 {
<a name="l05218"></a>05218                 <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a333721a24859c29322c8abdae4159e1b">jump_n</a>:
<a name="l05219"></a>05219                   is_a_jump_n = <span class="keyword">true</span>;
<a name="l05220"></a>05220                 <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a54819e2968ab91bf6ad492f131d7f37b">maybe_pop_jump</a>:
<a name="l05221"></a>05221                 <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a24cdcea4f39ca8613374deb4bfe5b2cb">pop_failure_jump</a>:
<a name="l05222"></a>05222                 <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l05223"></a>05223                   p1 = p + 1;
<a name="l05224"></a>05224                   <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05225"></a>05225                   p1 += mcnt;
<a name="l05226"></a>05226 
<a name="l05227"></a>05227                   <span class="keywordflow">if</span> ((is_a_jump_n &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>)
<a name="l05228"></a>05228                       || (!is_a_jump_n
<a name="l05229"></a>05229                           &amp;&amp; (<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>))
<a name="l05230"></a>05230                     <span class="keywordflow">goto</span> fail;
<a name="l05231"></a>05231                   <span class="keywordflow">break</span>;
<a name="l05232"></a>05232                 <span class="keywordflow">default</span>:
<a name="l05233"></a>05233                   <span class="comment">/* do nothing */</span> ;
<a name="l05234"></a>05234                 }
<a name="l05235"></a>05235             }
<a name="l05236"></a>05236 
<a name="l05237"></a>05237           <span class="keywordflow">if</span> (d &gt;= string1 &amp;&amp; d &lt;= end1)
<a name="l05238"></a>05238         dend = end_match_1;
<a name="l05239"></a>05239         }
<a name="l05240"></a>05240       <span class="keywordflow">else</span>
<a name="l05241"></a>05241         <span class="keywordflow">break</span>;   <span class="comment">/* Matching at this starting point really fails.  */</span>
<a name="l05242"></a>05242     } <span class="comment">/* for (;;) */</span>
<a name="l05243"></a>05243 
<a name="l05244"></a>05244   <span class="keywordflow">if</span> (best_regs_set)
<a name="l05245"></a>05245     <span class="keywordflow">goto</span> restore_best_regs;
<a name="l05246"></a>05246 
<a name="l05247"></a>05247   <a class="code" href="regex_8c.html#a7f3f2410fe2ae0089be0a2f3005f15dd">FREE_VARIABLES</a> ();
<a name="l05248"></a>05248 
<a name="l05249"></a>05249   <span class="keywordflow">return</span> -1;                    <span class="comment">/* Failure to match.  */</span>
<a name="l05250"></a>05250 } <span class="comment">/* re_match_2 */</span>
<a name="l05251"></a>05251 
<a name="l05252"></a>05252 <span class="comment">/* Subroutine definitions for re_match_2.  */</span>
<a name="l05253"></a>05253 
<a name="l05254"></a>05254 
<a name="l05255"></a>05255 <span class="comment">/* We are passed P pointing to a register number after a start_memory.</span>
<a name="l05256"></a>05256 <span class="comment"></span>
<a name="l05257"></a>05257 <span class="comment">   Return true if the pattern up to the corresponding stop_memory can</span>
<a name="l05258"></a>05258 <span class="comment">   match the empty string, and false otherwise.</span>
<a name="l05259"></a>05259 <span class="comment"></span>
<a name="l05260"></a>05260 <span class="comment">   If we find the matching stop_memory, sets P to point to one past its number.</span>
<a name="l05261"></a><a class="code" href="regex_8c.html#ac1a3adc04ca27d22992ea483708c5812">05261</a> <span class="comment">   Otherwise, sets P to an undefined byte less than or equal to END.</span>
<a name="l05262"></a>05262 <span class="comment"></span>
<a name="l05263"></a>05263 <span class="comment">   We don&#39;t handle duplicates properly (yet).  */</span>
<a name="l05264"></a>05264 
<a name="l05265"></a>05265 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l05266"></a>05266 <a class="code" href="regex_8c.html#ac1a3adc04ca27d22992ea483708c5812">group_match_null_string_p</a> (p, end, reg_info)
<a name="l05267"></a>05267     unsigned <span class="keywordtype">char</span> **p, *end;
<a name="l05268"></a>05268     <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info;
<a name="l05269"></a>05269 {
<a name="l05270"></a>05270   <span class="keywordtype">int</span> mcnt;
<a name="l05271"></a>05271   <span class="comment">/* Point to after the args to the start_memory.  */</span>
<a name="l05272"></a>05272   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1 = *p + 2;
<a name="l05273"></a>05273 
<a name="l05274"></a>05274   <span class="keywordflow">while</span> (p1 &lt; end)
<a name="l05275"></a>05275     {
<a name="l05276"></a>05276       <span class="comment">/* Skip over opcodes that can match nothing, and return true or</span>
<a name="l05277"></a>05277 <span class="comment">     false, as appropriate, when we get to one that can&#39;t, or to the</span>
<a name="l05278"></a>05278 <span class="comment">         matching stop_memory.  */</span>
<a name="l05279"></a>05279 
<a name="l05280"></a>05280       <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1)
<a name="l05281"></a>05281         {
<a name="l05282"></a>05282         <span class="comment">/* Could be either a loop or a series of alternatives.  */</span>
<a name="l05283"></a>05283         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>:
<a name="l05284"></a>05284           p1++;
<a name="l05285"></a>05285           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05286"></a>05286 
<a name="l05287"></a>05287           <span class="comment">/* If the next operation is not a jump backwards in the</span>
<a name="l05288"></a>05288 <span class="comment">         pattern.  */</span>
<a name="l05289"></a>05289 
<a name="l05290"></a>05290       <span class="keywordflow">if</span> (mcnt &gt;= 0)
<a name="l05291"></a>05291         {
<a name="l05292"></a>05292               <span class="comment">/* Go through the on_failure_jumps of the alternatives,</span>
<a name="l05293"></a>05293 <span class="comment">                 seeing if any of the alternatives cannot match nothing.</span>
<a name="l05294"></a>05294 <span class="comment">                 The last alternative starts with only a jump,</span>
<a name="l05295"></a>05295 <span class="comment">                 whereas the rest start with on_failure_jump and end</span>
<a name="l05296"></a>05296 <span class="comment">                 with a jump, e.g., here is the pattern for `a|b|c&#39;:</span>
<a name="l05297"></a>05297 <span class="comment"></span>
<a name="l05298"></a>05298 <span class="comment">                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6</span>
<a name="l05299"></a>05299 <span class="comment">                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3</span>
<a name="l05300"></a>05300 <span class="comment">                 /exactn/1/c</span>
<a name="l05301"></a>05301 <span class="comment"></span>
<a name="l05302"></a>05302 <span class="comment">                 So, we have to first go through the first (n-1)</span>
<a name="l05303"></a>05303 <span class="comment">                 alternatives and then deal with the last one separately.  */</span>
<a name="l05304"></a>05304 
<a name="l05305"></a>05305 
<a name="l05306"></a>05306               <span class="comment">/* Deal with the first (n-1) alternatives, which start</span>
<a name="l05307"></a>05307 <span class="comment">                 with an on_failure_jump (see above) that jumps to right</span>
<a name="l05308"></a>05308 <span class="comment">                 past a jump_past_alt.  */</span>
<a name="l05309"></a>05309 
<a name="l05310"></a>05310               <span class="keywordflow">while</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[mcnt-3] == <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>)
<a name="l05311"></a>05311                 {
<a name="l05312"></a>05312                   <span class="comment">/* `mcnt&#39; holds how many bytes long the alternative</span>
<a name="l05313"></a>05313 <span class="comment">                     is, including the ending `jump_past_alt&#39; and</span>
<a name="l05314"></a>05314 <span class="comment">                     its number.  */</span>
<a name="l05315"></a>05315 
<a name="l05316"></a>05316                   <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a4d088a8cdab2f2daa400a5df18cbf594">alt_match_null_string_p</a> (p1, p1 + mcnt - 3,
<a name="l05317"></a>05317                                       reg_info))
<a name="l05318"></a>05318                     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05319"></a>05319 
<a name="l05320"></a>05320                   <span class="comment">/* Move to right after this alternative, including the</span>
<a name="l05321"></a>05321 <span class="comment">             jump_past_alt.  */</span>
<a name="l05322"></a>05322                   p1 += mcnt;
<a name="l05323"></a>05323 
<a name="l05324"></a>05324                   <span class="comment">/* Break if it&#39;s the beginning of an n-th alternative</span>
<a name="l05325"></a>05325 <span class="comment">                     that doesn&#39;t begin with an on_failure_jump.  */</span>
<a name="l05326"></a>05326                   <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1 != <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>)
<a name="l05327"></a>05327                     <span class="keywordflow">break</span>;
<a name="l05328"></a>05328 
<a name="l05329"></a>05329           <span class="comment">/* Still have to check that it&#39;s not an n-th</span>
<a name="l05330"></a>05330 <span class="comment">             alternative that starts with an on_failure_jump.  */</span>
<a name="l05331"></a>05331           p1++;
<a name="l05332"></a>05332                   <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05333"></a>05333                   <span class="keywordflow">if</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) p1[mcnt-3] != <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a2b75b8e92a52c848de16544d9ceb08da">jump_past_alt</a>)
<a name="l05334"></a>05334                     {
<a name="l05335"></a>05335               <span class="comment">/* Get to the beginning of the n-th alternative.  */</span>
<a name="l05336"></a>05336                       p1 -= 3;
<a name="l05337"></a>05337                       <span class="keywordflow">break</span>;
<a name="l05338"></a>05338                     }
<a name="l05339"></a>05339                 }
<a name="l05340"></a>05340 
<a name="l05341"></a>05341               <span class="comment">/* Deal with the last alternative: go back and get number</span>
<a name="l05342"></a>05342 <span class="comment">                 of the `jump_past_alt&#39; just before it.  `mcnt&#39; contains</span>
<a name="l05343"></a>05343 <span class="comment">                 the length of the alternative.  */</span>
<a name="l05344"></a>05344               <a class="code" href="regex_8c.html#a9afddc5990335682b1958801af7e4bf3">EXTRACT_NUMBER</a> (mcnt, p1 - 2);
<a name="l05345"></a>05345 
<a name="l05346"></a>05346               <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a4d088a8cdab2f2daa400a5df18cbf594">alt_match_null_string_p</a> (p1, p1 + mcnt, reg_info))
<a name="l05347"></a>05347                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05348"></a>05348 
<a name="l05349"></a>05349               p1 += mcnt;   <span class="comment">/* Get past the n-th alternative.  */</span>
<a name="l05350"></a>05350             } <span class="comment">/* if mcnt &gt; 0 */</span>
<a name="l05351"></a>05351           <span class="keywordflow">break</span>;
<a name="l05352"></a>05352 
<a name="l05353"></a>05353 
<a name="l05354"></a>05354         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a6a42f30575b66116b79f4527493d0ce9">stop_memory</a>:
<a name="l05355"></a>05355       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (p1[1] == **p);
<a name="l05356"></a>05356           *p = p1 + 2;
<a name="l05357"></a>05357           <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05358"></a>05358 
<a name="l05359"></a>05359 
<a name="l05360"></a>05360         <span class="keywordflow">default</span>:
<a name="l05361"></a>05361           <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a97ff784b1a6ed91bbc1013a3a44a05da">common_op_match_null_string_p</a> (&amp;p1, end, reg_info))
<a name="l05362"></a>05362             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05363"></a>05363         }
<a name="l05364"></a>05364     } <span class="comment">/* while p1 &lt; end */</span>
<a name="l05365"></a>05365 
<a name="l05366"></a>05366   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05367"></a>05367 } <span class="comment">/* group_match_null_string_p */</span>
<a name="l05368"></a>05368 
<a name="l05369"></a>05369 
<a name="l05370"></a><a class="code" href="regex_8c.html#a4d088a8cdab2f2daa400a5df18cbf594">05370</a> <span class="comment">/* Similar to group_match_null_string_p, but doesn&#39;t deal with alternatives:</span>
<a name="l05371"></a>05371 <span class="comment">   It expects P to be the first byte of a single alternative and END one</span>
<a name="l05372"></a>05372 <span class="comment">   byte past the last. The alternative can contain groups.  */</span>
<a name="l05373"></a>05373 
<a name="l05374"></a>05374 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l05375"></a>05375 <a class="code" href="regex_8c.html#a4d088a8cdab2f2daa400a5df18cbf594">alt_match_null_string_p</a> (p, end, reg_info)
<a name="l05376"></a>05376     unsigned <span class="keywordtype">char</span> *p, *end;
<a name="l05377"></a>05377     <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info;
<a name="l05378"></a>05378 {
<a name="l05379"></a>05379   <span class="keywordtype">int</span> mcnt;
<a name="l05380"></a>05380   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1 = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l05381"></a>05381 
<a name="l05382"></a>05382   <span class="keywordflow">while</span> (p1 &lt; end)
<a name="l05383"></a>05383     {
<a name="l05384"></a>05384       <span class="comment">/* Skip over opcodes that can match nothing, and break when we get</span>
<a name="l05385"></a>05385 <span class="comment">         to one that can&#39;t.  */</span>
<a name="l05386"></a>05386 
<a name="l05387"></a>05387       <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1)
<a name="l05388"></a>05388         {
<a name="l05389"></a>05389     <span class="comment">/* It&#39;s a loop.  */</span>
<a name="l05390"></a>05390         <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5ca3d8a56cc5259243bcaffedd070287">on_failure_jump</a>:
<a name="l05391"></a>05391           p1++;
<a name="l05392"></a>05392           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05393"></a>05393           p1 += mcnt;
<a name="l05394"></a>05394           <span class="keywordflow">break</span>;
<a name="l05395"></a>05395 
<a name="l05396"></a>05396     <span class="keywordflow">default</span>:
<a name="l05397"></a>05397           <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#a97ff784b1a6ed91bbc1013a3a44a05da">common_op_match_null_string_p</a> (&amp;p1, end, reg_info))
<a name="l05398"></a>05398             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05399"></a>05399         }
<a name="l05400"></a>05400     }  <span class="comment">/* while p1 &lt; end */</span>
<a name="l05401"></a>05401 
<a name="l05402"></a>05402   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05403"></a>05403 } <span class="comment">/* alt_match_null_string_p */</span>
<a name="l05404"></a>05404 
<a name="l05405"></a>05405 
<a name="l05406"></a>05406 <span class="comment">/* Deals with the ops common to group_match_null_string_p and</span>
<a name="l05407"></a><a class="code" href="regex_8c.html#a97ff784b1a6ed91bbc1013a3a44a05da">05407</a> <span class="comment">   alt_match_null_string_p.</span>
<a name="l05408"></a>05408 <span class="comment"></span>
<a name="l05409"></a>05409 <span class="comment">   Sets P to one after the op and its arguments, if any.  */</span>
<a name="l05410"></a>05410 
<a name="l05411"></a>05411 <span class="keyword">static</span> <span class="keywordtype">boolean</span>
<a name="l05412"></a>05412 <a class="code" href="regex_8c.html#a97ff784b1a6ed91bbc1013a3a44a05da">common_op_match_null_string_p</a> (p, end, reg_info)
<a name="l05413"></a>05413     unsigned <span class="keywordtype">char</span> **p, *end;
<a name="l05414"></a>05414     <a class="code" href="unionregister__info__type.html">register_info_type</a> *reg_info;
<a name="l05415"></a>05415 {
<a name="l05416"></a>05416   <span class="keywordtype">int</span> mcnt;
<a name="l05417"></a>05417   <span class="keywordtype">boolean</span> ret;
<a name="l05418"></a>05418   <span class="keywordtype">int</span> reg_no;
<a name="l05419"></a>05419   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1 = *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l05420"></a>05420 
<a name="l05421"></a>05421   <span class="keywordflow">switch</span> ((<a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118">re_opcode_t</a>) *p1++)
<a name="l05422"></a>05422     {
<a name="l05423"></a>05423     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a292eb17c5d97bf50ef0c4f733e56c836">no_op</a>:
<a name="l05424"></a>05424     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4780b4642f63093c414b1833e2d40107">begline</a>:
<a name="l05425"></a>05425     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0556771866997767489c4da274f15aa4">endline</a>:
<a name="l05426"></a>05426     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ab428f43b6557e8dfc45e452a8891b598">begbuf</a>:
<a name="l05427"></a>05427     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a4962434097279c747aa6ba59df478775">endbuf</a>:
<a name="l05428"></a>05428     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ad88e0028985b6bc61df64cd9578d3f18">wordbeg</a>:
<a name="l05429"></a>05429     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118accd3c02d3bd48af753cf5261bfb084ac">wordend</a>:
<a name="l05430"></a>05430     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a47168d753b8d555d2e89416a4b660da9">wordbound</a>:
<a name="l05431"></a>05431     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a9077999caa8f316015aabfd83b3745a0">notwordbound</a>:
<a name="l05432"></a>05432 <span class="preprocessor">#ifdef emacs</span>
<a name="l05433"></a>05433 <span class="preprocessor"></span>    <span class="keywordflow">case</span> before_dot:
<a name="l05434"></a>05434     <span class="keywordflow">case</span> at_dot:
<a name="l05435"></a>05435     <span class="keywordflow">case</span> after_dot:
<a name="l05436"></a>05436 <span class="preprocessor">#endif</span>
<a name="l05437"></a>05437 <span class="preprocessor"></span>      <span class="keywordflow">break</span>;
<a name="l05438"></a>05438 
<a name="l05439"></a>05439     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118affba14708233f194802bf7981fd7717e">start_memory</a>:
<a name="l05440"></a>05440       reg_no = *p1;
<a name="l05441"></a>05441       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (reg_no &gt; 0 &amp;&amp; reg_no &lt;= <a class="code" href="regex_8c.html#af1b3c3e22fe42152c272df6027b1bf4b">MAX_REGNUM</a>);
<a name="l05442"></a>05442       ret = <a class="code" href="regex_8c.html#ac1a3adc04ca27d22992ea483708c5812">group_match_null_string_p</a> (&amp;p1, end, reg_info);
<a name="l05443"></a>05443 
<a name="l05444"></a>05444       <span class="comment">/* Have to set this here in case we&#39;re checking a group which</span>
<a name="l05445"></a>05445 <span class="comment">         contains a group and a back reference to it.  */</span>
<a name="l05446"></a>05446 
<a name="l05447"></a>05447       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[reg_no]) == <a class="code" href="regex_8c.html#a9fbdd9b78059994c85d9f064f9fa9ec3">MATCH_NULL_UNSET_VALUE</a>)
<a name="l05448"></a>05448         <a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[reg_no]) = ret;
<a name="l05449"></a>05449 
<a name="l05450"></a>05450       <span class="keywordflow">if</span> (!ret)
<a name="l05451"></a>05451         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05452"></a>05452       <span class="keywordflow">break</span>;
<a name="l05453"></a>05453 
<a name="l05454"></a>05454     <span class="comment">/* If this is an optimized succeed_n for zero times, make the jump.  */</span>
<a name="l05455"></a>05455     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a5a08a3c1fa135350961630d2f9c2b849">jump</a>:
<a name="l05456"></a>05456       <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05457"></a>05457       <span class="keywordflow">if</span> (mcnt &gt;= 0)
<a name="l05458"></a>05458         p1 += mcnt;
<a name="l05459"></a>05459       <span class="keywordflow">else</span>
<a name="l05460"></a>05460         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05461"></a>05461       <span class="keywordflow">break</span>;
<a name="l05462"></a>05462 
<a name="l05463"></a>05463     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118ae45bee3e6749253a8ba8769646f79734">succeed_n</a>:
<a name="l05464"></a>05464       <span class="comment">/* Get to the number of times to succeed.  */</span>
<a name="l05465"></a>05465       p1 += 2;
<a name="l05466"></a>05466       <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05467"></a>05467 
<a name="l05468"></a>05468       <span class="keywordflow">if</span> (mcnt == 0)
<a name="l05469"></a>05469         {
<a name="l05470"></a>05470           p1 -= 4;
<a name="l05471"></a>05471           <a class="code" href="regex_8c.html#abf958c753956f073a33bd336660e9038">EXTRACT_NUMBER_AND_INCR</a> (mcnt, p1);
<a name="l05472"></a>05472           p1 += mcnt;
<a name="l05473"></a>05473         }
<a name="l05474"></a>05474       <span class="keywordflow">else</span>
<a name="l05475"></a>05475         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05476"></a>05476       <span class="keywordflow">break</span>;
<a name="l05477"></a>05477 
<a name="l05478"></a>05478     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0c02fe9db75630f52c6e9e44dd55d9de">duplicate</a>:
<a name="l05479"></a>05479       <span class="keywordflow">if</span> (!<a class="code" href="regex_8c.html#ac840f4f2ecf1841ed894bd361236715b">REG_MATCH_NULL_STRING_P</a> (reg_info[*p1]))
<a name="l05480"></a>05480         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05481"></a>05481       <span class="keywordflow">break</span>;
<a name="l05482"></a>05482 
<a name="l05483"></a>05483     <span class="keywordflow">case</span> <a class="code" href="regex_8c.html#ad1f757f0a86665780f50f812767b2118a0f280efb7129538f3b07aa789fc99fa1">set_number_at</a>:
<a name="l05484"></a>05484       p1 += 4;
<a name="l05485"></a>05485 
<a name="l05486"></a>05486     <span class="keywordflow">default</span>:
<a name="l05487"></a>05487       <span class="comment">/* All other opcodes mean we cannot match the empty string.  */</span>
<a name="l05488"></a>05488       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05489"></a>05489   }
<a name="l05490"></a>05490 
<a name="l05491"></a>05491   *p = p1;
<a name="l05492"></a>05492   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05493"></a>05493 } <span class="comment">/* common_op_match_null_string_p */</span>
<a name="l05494"></a>05494 
<a name="l05495"></a><a class="code" href="regex_8c.html#a831fca3c806cff281a70c8757c40b134">05495</a> 
<a name="l05496"></a>05496 <span class="comment">/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN</span>
<a name="l05497"></a>05497 <span class="comment">   bytes; nonzero otherwise.  */</span>
<a name="l05498"></a>05498 
<a name="l05499"></a>05499 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l05500"></a>05500 <a class="code" href="regex_8c.html#a831fca3c806cff281a70c8757c40b134">bcmp_translate</a> (s1, s2, len, translate)
<a name="l05501"></a>05501      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *s1, *s2;
<a name="l05502"></a>05502      register <span class="keywordtype">int</span> len;
<a name="l05503"></a>05503      <a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a> translate;
<a name="l05504"></a>05504 {
<a name="l05505"></a>05505   <span class="keyword">register</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p1 = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) s1;
<a name="l05506"></a>05506   <span class="keyword">register</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *p2 = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) s2;
<a name="l05507"></a>05507   <span class="keywordflow">while</span> (len)
<a name="l05508"></a>05508     {
<a name="l05509"></a>05509       <span class="keywordflow">if</span> (translate[*p1++] != translate[*p2++]) <span class="keywordflow">return</span> 1;
<a name="l05510"></a>05510       len--;
<a name="l05511"></a>05511     }
<a name="l05512"></a>05512   <span class="keywordflow">return</span> 0;
<a name="l05513"></a>05513 }
<a name="l05514"></a>05514 
<a name="l05515"></a>05515 <span class="comment">/* Entry points for GNU code.  */</span>
<a name="l05516"></a>05516 
<a name="l05517"></a>05517 <span class="comment">/* re_compile_pattern is the GNU regular expression compiler: it</span>
<a name="l05518"></a>05518 <span class="comment">   compiles PATTERN (of length SIZE) and puts the result in BUFP.</span>
<a name="l05519"></a>05519 <span class="comment">   Returns 0 if the pattern was valid, otherwise an error string.</span>
<a name="l05520"></a>05520 <span class="comment"></span>
<a name="l05521"></a>05521 <span class="comment">   Assumes the `allocated&#39; (and perhaps `buffer&#39;) and `translate&#39; fields</span>
<a name="l05522"></a><a class="code" href="regex_8c.html#af8f972d3f97fde09a38ee8f8e204b6c3">05522</a> <span class="comment">   are set in BUFP on entry.</span>
<a name="l05523"></a>05523 <span class="comment"></span>
<a name="l05524"></a>05524 <span class="comment">   We call regex_compile to do the actual compilation.  */</span>
<a name="l05525"></a>05525 
<a name="l05526"></a>05526 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l05527"></a>05527 <a class="code" href="regex_8c.html#af8f972d3f97fde09a38ee8f8e204b6c3">re_compile_pattern</a> (pattern, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, bufp)
<a name="l05528"></a>05528      <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *pattern;
<a name="l05529"></a>05529      <span class="keywordtype">size_t</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l05530"></a>05530      struct <a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> *bufp;
<a name="l05531"></a>05531 {
<a name="l05532"></a>05532   <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> ret;
<a name="l05533"></a>05533 
<a name="l05534"></a>05534   <span class="comment">/* GNU code is written to assume at least RE_NREGS registers will be set</span>
<a name="l05535"></a>05535 <span class="comment">     (and at least one extra will be -1).  */</span>
<a name="l05536"></a>05536   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a83388321c434be6ac33fe359a3d7b449">regs_allocated</a> = <a class="code" href="regex-gnu_8h.html#a2714d3e1903c4824ef31ccae36e702c7">REGS_UNALLOCATED</a>;
<a name="l05537"></a>05537 
<a name="l05538"></a>05538   <span class="comment">/* And GNU code determines whether or not to get register information</span>
<a name="l05539"></a>05539 <span class="comment">     by passing null for the REGS argument to re_match, etc., not by</span>
<a name="l05540"></a>05540 <span class="comment">     setting no_sub.  */</span>
<a name="l05541"></a>05541   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a83e122c96edb258aa4ef99d7a8b2bfa2">no_sub</a> = 0;
<a name="l05542"></a>05542 
<a name="l05543"></a>05543   <span class="comment">/* Match anchors at newline.  */</span>
<a name="l05544"></a>05544   bufp-&gt;<a class="code" href="structre__pattern__buffer.html#a46ed7a16b4cb87267ac5d219dab3536a">newline_anchor</a> = 1;
<a name="l05545"></a>05545 
<a name="l05546"></a>05546   ret = <a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">regex_compile</a> (pattern, length, re_syntax_options, bufp);
<a name="l05547"></a>05547 
<a name="l05548"></a>05548   <span class="keywordflow">if</span> (!ret)
<a name="l05549"></a>05549     <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05550"></a>05550   <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (re_error_msgid + re_error_msgid_idx[(<span class="keywordtype">int</span>) ret]);
<a name="l05551"></a>05551 }
<a name="l05552"></a>05552 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05553"></a>05553 <span class="preprocessor"></span>weak_alias (__re_compile_pattern, <a class="code" href="regex_8c.html#af8f972d3f97fde09a38ee8f8e204b6c3">re_compile_pattern</a>)
<a name="l05554"></a>05554 <span class="preprocessor">#endif</span>
<a name="l05555"></a>05555 <span class="preprocessor"></span>
<a name="l05556"></a>05556 <span class="comment">/* Entry points compatible with 4.2 BSD regex library.  We don&#39;t define</span>
<a name="l05557"></a>05557 <span class="comment">   them unless specifically requested.  */</span>
<a name="l05558"></a>05558 
<a name="l05559"></a>05559 <span class="preprocessor">#if defined _REGEX_RE_COMP || defined _LIBC</span>
<a name="l05560"></a>05560 <span class="preprocessor"></span>
<a name="l05561"></a>05561 <span class="comment">/* BSD has one and only one pattern buffer.  */</span>
<a name="l05562"></a>05562 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structre__pattern__buffer.html">re_pattern_buffer</a> re_comp_buf;
<a name="l05563"></a>05563 
<a name="l05564"></a>05564 <span class="keywordtype">char</span> *
<a name="l05565"></a>05565 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05566"></a>05566 <span class="preprocessor"></span><span class="comment">/* Make these definitions weak in libc, so POSIX programs can redefine</span>
<a name="l05567"></a>05567 <span class="comment">   these names if they don&#39;t use our functions, and still use</span>
<a name="l05568"></a>05568 <span class="comment">   regcomp/regexec below without link errors.  */</span>
<a name="l05569"></a>05569 weak_function
<a name="l05570"></a>05570 <span class="preprocessor">#endif</span>
<a name="l05571"></a>05571 <span class="preprocessor"></span>re_comp (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l05572"></a>05572     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l05573"></a>05573 {
<a name="l05574"></a>05574   <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> ret;
<a name="l05575"></a>05575 
<a name="l05576"></a>05576   <span class="keywordflow">if</span> (!s)
<a name="l05577"></a>05577     {
<a name="l05578"></a>05578       <span class="keywordflow">if</span> (!re_comp_buf.buffer)
<a name="l05579"></a>05579     <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (<span class="stringliteral">&quot;No previous regular expression&quot;</span>);
<a name="l05580"></a>05580       <span class="keywordflow">return</span> 0;
<a name="l05581"></a>05581     }
<a name="l05582"></a>05582 
<a name="l05583"></a>05583   <span class="keywordflow">if</span> (!re_comp_buf.buffer)
<a name="l05584"></a>05584     {
<a name="l05585"></a>05585       re_comp_buf.buffer = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (200);
<a name="l05586"></a>05586       <span class="keywordflow">if</span> (re_comp_buf.buffer == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05587"></a>05587         <span class="keywordflow">return</span> (<span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (re_error_msgid
<a name="l05588"></a>05588                  + re_error_msgid_idx[(<span class="keywordtype">int</span>) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>]);
<a name="l05589"></a>05589       re_comp_buf.allocated = 200;
<a name="l05590"></a>05590 
<a name="l05591"></a>05591       re_comp_buf.fastmap = (<span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>);
<a name="l05592"></a>05592       <span class="keywordflow">if</span> (re_comp_buf.fastmap == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05593"></a>05593     <span class="keywordflow">return</span> (<span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (re_error_msgid
<a name="l05594"></a>05594                  + re_error_msgid_idx[(<span class="keywordtype">int</span>) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>]);
<a name="l05595"></a>05595     }
<a name="l05596"></a>05596 
<a name="l05597"></a>05597   <span class="comment">/* Since `re_exec&#39; always passes NULL for the `regs&#39; argument, we</span>
<a name="l05598"></a>05598 <span class="comment">     don&#39;t need to initialize the pattern buffer fields which affect it.  */</span>
<a name="l05599"></a>05599 
<a name="l05600"></a>05600   <span class="comment">/* Match anchors at newlines.  */</span>
<a name="l05601"></a>05601   re_comp_buf.newline_anchor = 1;
<a name="l05602"></a>05602 
<a name="l05603"></a>05603   ret = <a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">regex_compile</a> (s, strlen (s), re_syntax_options, &amp;re_comp_buf);
<a name="l05604"></a>05604 
<a name="l05605"></a>05605   <span class="keywordflow">if</span> (!ret)
<a name="l05606"></a>05606     <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05607"></a>05607 
<a name="l05608"></a>05608   <span class="comment">/* Yes, we&#39;re discarding `const&#39; here if !HAVE_LIBINTL.  */</span>
<a name="l05609"></a>05609   <span class="keywordflow">return</span> (<span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (re_error_msgid + re_error_msgid_idx[(<span class="keywordtype">int</span>) ret]);
<a name="l05610"></a>05610 }
<a name="l05611"></a>05611 
<a name="l05612"></a>05612 
<a name="l05613"></a>05613 <span class="keywordtype">int</span>
<a name="l05614"></a>05614 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05615"></a>05615 <span class="preprocessor"></span>weak_function
<a name="l05616"></a>05616 <span class="preprocessor">#endif</span>
<a name="l05617"></a>05617 <span class="preprocessor"></span>re_exec (s)
<a name="l05618"></a>05618     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *s;
<a name="l05619"></a>05619 {
<a name="l05620"></a>05620   <span class="keyword">const</span> <span class="keywordtype">int</span> len = strlen (s);
<a name="l05621"></a>05621   <span class="keywordflow">return</span>
<a name="l05622"></a>05622     0 &lt;= <a class="code" href="regex_8c.html#afe0743116f59f62a4d00f50a9e9a4932">re_search</a> (&amp;re_comp_buf, s, len, 0, len, (<span class="keyword">struct</span> <a class="code" href="structre__registers.html">re_registers</a> *) 0);
<a name="l05623"></a>05623 }
<a name="l05624"></a>05624 
<a name="l05625"></a>05625 <span class="preprocessor">#endif </span><span class="comment">/* _REGEX_RE_COMP */</span>
<a name="l05626"></a>05626 
<a name="l05627"></a>05627 <span class="comment">/* POSIX.2 functions.  Don&#39;t define these for Emacs.  */</span>
<a name="l05628"></a>05628 
<a name="l05629"></a>05629 <span class="preprocessor">#ifndef emacs</span>
<a name="l05630"></a>05630 <span class="preprocessor"></span>
<a name="l05631"></a>05631 <span class="comment">/* regcomp takes a regular expression as a string and compiles it.</span>
<a name="l05632"></a>05632 <span class="comment"></span>
<a name="l05633"></a>05633 <span class="comment">   PREG is a regex_t *.  We do not expect any fields to be initialized,</span>
<a name="l05634"></a>05634 <span class="comment">   since POSIX says we shouldn&#39;t.  Thus, we set</span>
<a name="l05635"></a>05635 <span class="comment"></span>
<a name="l05636"></a>05636 <span class="comment">     `buffer&#39; to the compiled pattern;</span>
<a name="l05637"></a>05637 <span class="comment">     `used&#39; to the length of the compiled pattern;</span>
<a name="l05638"></a>05638 <span class="comment">     `syntax&#39; to RE_SYNTAX_POSIX_EXTENDED if the</span>
<a name="l05639"></a>05639 <span class="comment">       REG_EXTENDED bit in CFLAGS is set; otherwise, to</span>
<a name="l05640"></a>05640 <span class="comment">       RE_SYNTAX_POSIX_BASIC;</span>
<a name="l05641"></a>05641 <span class="comment">     `newline_anchor&#39; to REG_NEWLINE being set in CFLAGS;</span>
<a name="l05642"></a>05642 <span class="comment">     `fastmap&#39; to an allocated space for the fastmap;</span>
<a name="l05643"></a>05643 <span class="comment">     `fastmap_accurate&#39; to zero;</span>
<a name="l05644"></a>05644 <span class="comment">     `re_nsub&#39; to the number of subexpressions in PATTERN.</span>
<a name="l05645"></a>05645 <span class="comment"></span>
<a name="l05646"></a>05646 <span class="comment">   PATTERN is the address of the pattern string.</span>
<a name="l05647"></a>05647 <span class="comment"></span>
<a name="l05648"></a>05648 <span class="comment">   CFLAGS is a series of bits which affect compilation.</span>
<a name="l05649"></a>05649 <span class="comment"></span>
<a name="l05650"></a>05650 <span class="comment">     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we</span>
<a name="l05651"></a>05651 <span class="comment">     use POSIX basic syntax.</span>
<a name="l05652"></a>05652 <span class="comment"></span>
<a name="l05653"></a>05653 <span class="comment">     If REG_NEWLINE is set, then . and [^...] don&#39;t match newline.</span>
<a name="l05654"></a>05654 <span class="comment">     Also, regexec will try a match beginning after every newline.</span>
<a name="l05655"></a>05655 <span class="comment"></span>
<a name="l05656"></a>05656 <span class="comment">     If REG_ICASE is set, then we considers upper- and lowercase</span>
<a name="l05657"></a>05657 <span class="comment">     versions of letters to be equivalent when matching.</span>
<a name="l05658"></a>05658 <span class="comment"></span>
<a name="l05659"></a>05659 <span class="comment">     If REG_NOSUB is set, then when PREG is passed to regexec, that</span>
<a name="l05660"></a>05660 <span class="comment">     routine will report only success or failure, and nothing about the</span>
<a name="l05661"></a>05661 <span class="comment">     registers.</span>
<a name="l05662"></a><a class="code" href="regex_8c.html#a38bbfba560a12468196f72aa88486406">05662</a> <span class="comment"></span>
<a name="l05663"></a>05663 <span class="comment">   It returns 0 if it succeeds, nonzero if it doesn&#39;t.  (See regex.h for</span>
<a name="l05664"></a>05664 <span class="comment">   the return codes and their meanings.)  */</span>
<a name="l05665"></a>05665 
<a name="l05666"></a>05666 <span class="keywordtype">int</span>
<a name="l05667"></a>05667 <a class="code" href="regex_8c.html#a38bbfba560a12468196f72aa88486406">regcomp</a> (preg, pattern, cflags)
<a name="l05668"></a>05668     <a class="code" href="structre__pattern__buffer.html">regex_t</a> *preg;
<a name="l05669"></a>05669     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *pattern;
<a name="l05670"></a>05670     <span class="keywordtype">int</span> cflags;
<a name="l05671"></a>05671 {
<a name="l05672"></a>05672   <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5ae">reg_errcode_t</a> ret;
<a name="l05673"></a>05673   <a class="code" href="regex-gnu_8h.html#a7e0565199a2fabaca3d67a5a44fc4229">reg_syntax_t</a> <a class="code" href="structre__pattern__buffer.html#aa16e95a1befa7d5fd8eb89542fa065f8">syntax</a>
<a name="l05674"></a>05674     = (cflags &amp; <a class="code" href="regex-gnu_8h.html#a5fc31e6da9b77e09ea62b4544ac4767f">REG_EXTENDED</a>) ?
<a name="l05675"></a>05675       <a class="code" href="regex-gnu_8h.html#a18701b3ee3894b158993efa18f3958ec">RE_SYNTAX_POSIX_EXTENDED</a> : <a class="code" href="regex-gnu_8h.html#af0f03965e6d6bdc7576fe863c81bb7af">RE_SYNTAX_POSIX_BASIC</a>;
<a name="l05676"></a>05676 
<a name="l05677"></a>05677   <span class="comment">/* regex_compile will allocate the space for the compiled pattern.  */</span>
<a name="l05678"></a>05678   preg-&gt;buffer = 0;
<a name="l05679"></a>05679   preg-&gt;allocated = 0;
<a name="l05680"></a>05680   preg-&gt;used = 0;
<a name="l05681"></a>05681 
<a name="l05682"></a>05682   <span class="comment">/* Try to allocate space for the fastmap.  */</span>
<a name="l05683"></a>05683   preg-&gt;fastmap = (<span class="keywordtype">char</span> *) <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (1 &lt;&lt; <a class="code" href="regex_8c.html#ad72dc64cd2c9bc3598f792dc518d03b2">BYTEWIDTH</a>);
<a name="l05684"></a>05684 
<a name="l05685"></a>05685   <span class="keywordflow">if</span> (cflags &amp; <a class="code" href="regex-gnu_8h.html#a0c3e7b1d5bc9c2d278a544fe9b61b67a">REG_ICASE</a>)
<a name="l05686"></a>05686     {
<a name="l05687"></a>05687       <span class="keywordtype">unsigned</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l05688"></a>05688 
<a name="l05689"></a>05689       preg-&gt;translate
<a name="l05690"></a>05690     = (<a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a>) <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (<a class="code" href="regex_8c.html#adebebe79bb84190296da4c5d67e4e434">CHAR_SET_SIZE</a>
<a name="l05691"></a>05691                       * <span class="keyword">sizeof</span> (*(<a class="code" href="regex-gnu_8h.html#a96c9fb9c7074cb21740b63092b0637a4">RE_TRANSLATE_TYPE</a>)0));
<a name="l05692"></a>05692       <span class="keywordflow">if</span> (preg-&gt;translate == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05693"></a>05693         <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeaabf0128b7050c81c0fb933ea7265ebe9">REG_ESPACE</a>;
<a name="l05694"></a>05694 
<a name="l05695"></a>05695       <span class="comment">/* Map uppercase characters to corresponding lowercase ones.  */</span>
<a name="l05696"></a>05696       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="regex_8c.html#adebebe79bb84190296da4c5d67e4e434">CHAR_SET_SIZE</a>; i++)
<a name="l05697"></a>05697         preg-&gt;translate[i] = <a class="code" href="regex_8c.html#a2bfd4177f165a5968d95960d42578ab6">ISUPPER</a> (i) ? <a class="code" href="regex_8c.html#ad4771ad2e5dd6a87c83ecf879b7985de">TOLOWER</a> (i) : <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l05698"></a>05698     }
<a name="l05699"></a>05699   <span class="keywordflow">else</span>
<a name="l05700"></a>05700     preg-&gt;translate = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05701"></a>05701 
<a name="l05702"></a>05702   <span class="comment">/* If REG_NEWLINE is set, newlines are treated differently.  */</span>
<a name="l05703"></a>05703   <span class="keywordflow">if</span> (cflags &amp; <a class="code" href="regex-gnu_8h.html#ab678ef3b27bf7de2fb82c79cb2cd9d8a">REG_NEWLINE</a>)
<a name="l05704"></a>05704     { <span class="comment">/* REG_NEWLINE implies neither . nor [^...] match newline.  */</span>
<a name="l05705"></a>05705       syntax &amp;= ~<a class="code" href="regex-gnu_8h.html#a405fe43871f2df60407b3c8272f4624c">RE_DOT_NEWLINE</a>;
<a name="l05706"></a>05706       syntax |= <a class="code" href="regex-gnu_8h.html#aad6ec0e3f8f0bb3c53213e3f9ca77d8e">RE_HAT_LISTS_NOT_NEWLINE</a>;
<a name="l05707"></a>05707       <span class="comment">/* It also changes the matching behavior.  */</span>
<a name="l05708"></a>05708       preg-&gt;newline_anchor = 1;
<a name="l05709"></a>05709     }
<a name="l05710"></a>05710   <span class="keywordflow">else</span>
<a name="l05711"></a>05711     preg-&gt;newline_anchor = 0;
<a name="l05712"></a>05712 
<a name="l05713"></a>05713   preg-&gt;no_sub = !!(cflags &amp; <a class="code" href="regex-gnu_8h.html#abb835c7fe6f1673fc0efeff0064510ab">REG_NOSUB</a>);
<a name="l05714"></a>05714 
<a name="l05715"></a>05715   <span class="comment">/* POSIX says a null character in the pattern terminates it, so we</span>
<a name="l05716"></a>05716 <span class="comment">     can use strlen here in compiling the pattern.  */</span>
<a name="l05717"></a>05717   ret = <a class="code" href="regex_8c.html#a6a04e18fe89cacd4b8d04a474def5985">regex_compile</a> (pattern, strlen (pattern), syntax, preg);
<a name="l05718"></a>05718 
<a name="l05719"></a>05719   <span class="comment">/* POSIX doesn&#39;t distinguish between an unmatched open-group and an</span>
<a name="l05720"></a>05720 <span class="comment">     unmatched close-group: both are REG_EPAREN.  */</span>
<a name="l05721"></a>05721   <span class="keywordflow">if</span> (ret == <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea5797541a6619c4a5dbe28fe3bb58661b">REG_ERPAREN</a>) ret = <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeabde1462e3a1660e121d79ce2d0cc5664">REG_EPAREN</a>;
<a name="l05722"></a>05722 
<a name="l05723"></a>05723   <span class="keywordflow">if</span> (ret == <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a> &amp;&amp; preg-&gt;fastmap)
<a name="l05724"></a>05724     {
<a name="l05725"></a>05725       <span class="comment">/* Compute the fastmap now, since regexec cannot modify the pattern</span>
<a name="l05726"></a>05726 <span class="comment">     buffer.  */</span>
<a name="l05727"></a>05727       <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a39979f3b79c423214dc96b34996424a8">re_compile_fastmap</a> (preg) == -2)
<a name="l05728"></a>05728     {
<a name="l05729"></a>05729       <span class="comment">/* Some error occured while computing the fastmap, just forget</span>
<a name="l05730"></a>05730 <span class="comment">         about it.  */</span>
<a name="l05731"></a>05731       free (preg-&gt;fastmap);
<a name="l05732"></a>05732       preg-&gt;fastmap = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05733"></a>05733     }
<a name="l05734"></a>05734     }
<a name="l05735"></a>05735 
<a name="l05736"></a>05736   <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) ret;
<a name="l05737"></a>05737 }
<a name="l05738"></a>05738 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05739"></a>05739 <span class="preprocessor"></span>weak_alias (__regcomp, <a class="code" href="regex_8c.html#a38bbfba560a12468196f72aa88486406">regcomp</a>)
<a name="l05740"></a>05740 <span class="preprocessor">#endif</span>
<a name="l05741"></a>05741 <span class="preprocessor"></span>
<a name="l05742"></a>05742 
<a name="l05743"></a>05743 <span class="comment">/* regexec searches for a given pattern, specified by PREG, in the</span>
<a name="l05744"></a>05744 <span class="comment">   string STRING.</span>
<a name="l05745"></a>05745 <span class="comment"></span>
<a name="l05746"></a>05746 <span class="comment">   If NMATCH is zero or REG_NOSUB was set in the cflags argument to</span>
<a name="l05747"></a>05747 <span class="comment">   `regcomp&#39;, we ignore PMATCH.  Otherwise, we assume PMATCH has at</span>
<a name="l05748"></a>05748 <span class="comment">   least NMATCH elements, and we set them to the offsets of the</span>
<a name="l05749"></a>05749 <span class="comment">   corresponding matched substrings.</span>
<a name="l05750"></a>05750 <span class="comment"></span>
<a name="l05751"></a>05751 <span class="comment">   EFLAGS specifies `execution flags&#39; which affect matching: if</span>
<a name="l05752"></a>05752 <span class="comment">   REG_NOTBOL is set, then ^ does not match at the beginning of the</span>
<a name="l05753"></a><a class="code" href="regex_8c.html#a0298f60fae70832d70e8ec5d032472a8">05753</a> <span class="comment">   string; if REG_NOTEOL is set, then $ does not match at the end.</span>
<a name="l05754"></a>05754 <span class="comment"></span>
<a name="l05755"></a>05755 <span class="comment">   We return 0 if we find a match and REG_NOMATCH if not.  */</span>
<a name="l05756"></a>05756 
<a name="l05757"></a>05757 <span class="keywordtype">int</span>
<a name="l05758"></a>05758 <a class="code" href="regex_8c.html#a0298f60fae70832d70e8ec5d032472a8">regexec</a> (preg, <span class="keywordtype">string</span>, nmatch, pmatch, eflags)
<a name="l05759"></a>05759     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <a class="code" href="structre__pattern__buffer.html">regex_t</a> *preg;
<a name="l05760"></a>05760     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>;
<a name="l05761"></a>05761     <span class="keywordtype">size_t</span> nmatch;
<a name="l05762"></a>05762     <a class="code" href="structregmatch__t.html">regmatch_t</a> pmatch[];
<a name="l05763"></a>05763     <span class="keywordtype">int</span> eflags;
<a name="l05764"></a>05764 {
<a name="l05765"></a>05765   <span class="keywordtype">int</span> ret;
<a name="l05766"></a>05766   <span class="keyword">struct </span><a class="code" href="structre__registers.html">re_registers</a> regs;
<a name="l05767"></a>05767   <a class="code" href="structre__pattern__buffer.html">regex_t</a> private_preg;
<a name="l05768"></a>05768   <span class="keywordtype">int</span> len = strlen (<span class="keywordtype">string</span>);
<a name="l05769"></a>05769   <span class="keywordtype">boolean</span> want_reg_info = !preg-&gt;no_sub &amp;&amp; nmatch &gt; 0;
<a name="l05770"></a>05770 
<a name="l05771"></a>05771   private_preg = *preg;
<a name="l05772"></a>05772 
<a name="l05773"></a>05773   private_preg.not_bol = !!(eflags &amp; <a class="code" href="regex-gnu_8h.html#aa0ca15a79530976f6d4ef90326c46858">REG_NOTBOL</a>);
<a name="l05774"></a>05774   private_preg.not_eol = !!(eflags &amp; <a class="code" href="regex-gnu_8h.html#a9d97d85ef86123060a845723d28a92cb">REG_NOTEOL</a>);
<a name="l05775"></a>05775 
<a name="l05776"></a>05776   <span class="comment">/* The user has told us exactly how many registers to return</span>
<a name="l05777"></a>05777 <span class="comment">     information about, via `nmatch&#39;.  We have to pass that on to the</span>
<a name="l05778"></a>05778 <span class="comment">     matching routines.  */</span>
<a name="l05779"></a>05779   private_preg.regs_allocated = <a class="code" href="regex-gnu_8h.html#a54c8820fca418980dbcd43ebd78ed5a6">REGS_FIXED</a>;
<a name="l05780"></a>05780 
<a name="l05781"></a>05781   <span class="keywordflow">if</span> (want_reg_info)
<a name="l05782"></a>05782     {
<a name="l05783"></a>05783       regs.<a class="code" href="structre__registers.html#aeae8140aadf339f6fe0c49277d6aa7b5">num_regs</a> = nmatch;
<a name="l05784"></a>05784       regs.<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> = <a class="code" href="regex_8c.html#aaf77bcbd178f50762a35333d83bacd09">TALLOC</a> (nmatch * 2, <a class="code" href="regex-gnu_8h.html#a5b34995b47432512ee4ffa32b836e65f">regoff_t</a>);
<a name="l05785"></a>05785       <span class="keywordflow">if</span> (regs.<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> == <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05786"></a>05786         <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea4cc3b232a9ce92df5523d8c464c7beb2">REG_NOMATCH</a>;
<a name="l05787"></a>05787       regs.<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a> = regs.<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a> + nmatch;
<a name="l05788"></a>05788     }
<a name="l05789"></a>05789 
<a name="l05790"></a>05790   <span class="comment">/* Perform the searching operation.  */</span>
<a name="l05791"></a>05791   ret = <a class="code" href="regex_8c.html#afe0743116f59f62a4d00f50a9e9a4932">re_search</a> (&amp;private_preg, <span class="keywordtype">string</span>, len,
<a name="l05792"></a>05792                    <span class="comment">/* start: */</span> 0, <span class="comment">/* range: */</span> len,
<a name="l05793"></a>05793                    want_reg_info ? &amp;regs : (<span class="keyword">struct</span> <a class="code" href="structre__registers.html">re_registers</a> *) 0);
<a name="l05794"></a>05794 
<a name="l05795"></a>05795   <span class="comment">/* Copy the register information to the POSIX structure.  */</span>
<a name="l05796"></a>05796   <span class="keywordflow">if</span> (want_reg_info)
<a name="l05797"></a>05797     {
<a name="l05798"></a>05798       <span class="keywordflow">if</span> (ret &gt;= 0)
<a name="l05799"></a>05799         {
<a name="l05800"></a>05800           <span class="keywordtype">unsigned</span> r;
<a name="l05801"></a>05801 
<a name="l05802"></a>05802           <span class="keywordflow">for</span> (r = 0; r &lt; nmatch; r++)
<a name="l05803"></a>05803             {
<a name="l05804"></a>05804               pmatch[r].<a class="code" href="structregmatch__t.html#a90ac8973d256eaffdbb20de676ff45a4">rm_so</a> = regs.<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>[r];
<a name="l05805"></a>05805               pmatch[r].<a class="code" href="structregmatch__t.html#a728c28b9b23fa28c4e0b90e3a1a29efc">rm_eo</a> = regs.<a class="code" href="structre__registers.html#a0a9d373f1ab74c9c2063f233476fa5d4">end</a>[r];
<a name="l05806"></a>05806             }
<a name="l05807"></a>05807         }
<a name="l05808"></a>05808 
<a name="l05809"></a>05809       <span class="comment">/* If we needed the temporary register info, free the space now.  */</span>
<a name="l05810"></a>05810       free (regs.<a class="code" href="structre__registers.html#a6676ddb6ab07e50191e149b04dbcfe03">start</a>);
<a name="l05811"></a>05811     }
<a name="l05812"></a>05812 
<a name="l05813"></a>05813   <span class="comment">/* We want zero return to mean success, unlike `re_search&#39;.  */</span>
<a name="l05814"></a>05814   <span class="keywordflow">return</span> ret &gt;= 0 ? (int) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aeafa64e5a57596c8c859f982512f52cd6b">REG_NOERROR</a> : (<span class="keywordtype">int</span>) <a class="code" href="regex-gnu_8h.html#a1a37133027e6fa3a5f31044f9a76c5aea4cc3b232a9ce92df5523d8c464c7beb2">REG_NOMATCH</a>;
<a name="l05815"></a>05815 }
<a name="l05816"></a>05816 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05817"></a>05817 <span class="preprocessor"></span>weak_alias (__regexec, <a class="code" href="regex_8c.html#a0298f60fae70832d70e8ec5d032472a8">regexec</a>)
<a name="l05818"></a>05818 <span class="preprocessor">#endif</span>
<a name="l05819"></a>05819 <span class="preprocessor"></span>
<a name="l05820"></a><a class="code" href="regex_8c.html#a495ccb59d8346de24a54703f66fd517d">05820</a> 
<a name="l05821"></a>05821 <span class="comment">/* Returns a message corresponding to an error code, ERRCODE, returned</span>
<a name="l05822"></a>05822 <span class="comment">   from either regcomp or regexec.   We don&#39;t use PREG here.  */</span>
<a name="l05823"></a>05823 
<a name="l05824"></a>05824 <span class="keywordtype">size_t</span>
<a name="l05825"></a>05825 <a class="code" href="regex_8c.html#a495ccb59d8346de24a54703f66fd517d">regerror</a> (err, preg, errbuf, errbuf_size)
<a name="l05826"></a>05826     int err;
<a name="l05827"></a>05827     <a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <a class="code" href="structre__pattern__buffer.html">regex_t</a> *preg;
<a name="l05828"></a>05828     <span class="keywordtype">char</span> *errbuf;
<a name="l05829"></a>05829     <span class="keywordtype">size_t</span> errbuf_size;
<a name="l05830"></a>05830 {
<a name="l05831"></a>05831   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structmsg.html">msg</a>;
<a name="l05832"></a>05832   <span class="keywordtype">size_t</span> msg_size;
<a name="l05833"></a>05833 
<a name="l05834"></a>05834   <span class="keywordflow">if</span> (err &lt; 0
<a name="l05835"></a>05835       || err &gt;= (<span class="keywordtype">int</span>) (<span class="keyword">sizeof</span> (re_error_msgid_idx)
<a name="l05836"></a>05836                / <span class="keyword">sizeof</span> (re_error_msgid_idx[0])))
<a name="l05837"></a>05837     <span class="comment">/* Only error codes returned by the rest of the code should be passed</span>
<a name="l05838"></a>05838 <span class="comment">       to this routine.  If we are given anything else, or if other regex</span>
<a name="l05839"></a>05839 <span class="comment">       code generates an invalid error code, then the program has a bug.</span>
<a name="l05840"></a>05840 <span class="comment">       Dump core so we can fix it.  */</span>
<a name="l05841"></a>05841     abort ();
<a name="l05842"></a>05842 
<a name="l05843"></a>05843   msg = <a class="code" href="regex_8c.html#a84591b979e395c1ecf40f06963f89d8b">gettext</a> (re_error_msgid + re_error_msgid_idx[err]);
<a name="l05844"></a>05844 
<a name="l05845"></a>05845   msg_size = strlen (msg) + 1; <span class="comment">/* Includes the null.  */</span>
<a name="l05846"></a>05846 
<a name="l05847"></a>05847   <span class="keywordflow">if</span> (errbuf_size != 0)
<a name="l05848"></a>05848     {
<a name="l05849"></a>05849       <span class="keywordflow">if</span> (msg_size &gt; errbuf_size)
<a name="l05850"></a>05850         {
<a name="l05851"></a>05851 <span class="preprocessor">#if defined HAVE_MEMPCPY || defined _LIBC</span>
<a name="l05852"></a>05852 <span class="preprocessor"></span>      *((<span class="keywordtype">char</span> *) __mempcpy (errbuf, msg, errbuf_size - 1)) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l05853"></a>05853 <span class="preprocessor">#else</span>
<a name="l05854"></a>05854 <span class="preprocessor"></span>          <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (errbuf, msg, errbuf_size - 1);
<a name="l05855"></a>05855           errbuf[errbuf_size - 1] = 0;
<a name="l05856"></a>05856 <span class="preprocessor">#endif</span>
<a name="l05857"></a>05857 <span class="preprocessor"></span>        }
<a name="l05858"></a>05858       <span class="keywordflow">else</span>
<a name="l05859"></a>05859         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (errbuf, msg, msg_size);
<a name="l05860"></a>05860     }
<a name="l05861"></a>05861 
<a name="l05862"></a>05862   <span class="keywordflow">return</span> msg_size;
<a name="l05863"></a>05863 }
<a name="l05864"></a>05864 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05865"></a>05865 <span class="preprocessor"></span>weak_alias (__regerror, <a class="code" href="regex_8c.html#a495ccb59d8346de24a54703f66fd517d">regerror</a>)
<a name="l05866"></a>05866 <span class="preprocessor">#endif</span>
<a name="l05867"></a><a class="code" href="regex_8c.html#ad94d0de532eaa4fd959b8adde4d64898">05867</a> <span class="preprocessor"></span>
<a name="l05868"></a>05868 
<a name="l05869"></a>05869 <span class="comment">/* Free dynamically allocated space used by PREG.  */</span>
<a name="l05870"></a>05870 
<a name="l05871"></a>05871 <span class="keywordtype">void</span>
<a name="l05872"></a>05872 <a class="code" href="regex_8c.html#ad94d0de532eaa4fd959b8adde4d64898">regfree</a> (preg)
<a name="l05873"></a>05873     <a class="code" href="structre__pattern__buffer.html">regex_t</a> *preg;
<a name="l05874"></a>05874 {
<a name="l05875"></a>05875   <span class="keywordflow">if</span> (preg-&gt;buffer != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05876"></a>05876     free (preg-&gt;buffer);
<a name="l05877"></a>05877   preg-&gt;buffer = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05878"></a>05878 
<a name="l05879"></a>05879   preg-&gt;allocated = 0;
<a name="l05880"></a>05880   preg-&gt;used = 0;
<a name="l05881"></a>05881 
<a name="l05882"></a>05882   <span class="keywordflow">if</span> (preg-&gt;fastmap != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05883"></a>05883     free (preg-&gt;fastmap);
<a name="l05884"></a>05884   preg-&gt;fastmap = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05885"></a>05885   preg-&gt;fastmap_accurate = 0;
<a name="l05886"></a>05886 
<a name="l05887"></a>05887   <span class="keywordflow">if</span> (preg-&gt;translate != <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l05888"></a>05888     free (preg-&gt;translate);
<a name="l05889"></a>05889   preg-&gt;translate = <a class="code" href="regex_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05890"></a>05890 }
<a name="l05891"></a>05891 <span class="preprocessor">#ifdef _LIBC</span>
<a name="l05892"></a>05892 <span class="preprocessor"></span>weak_alias (__regfree, <a class="code" href="regex_8c.html#ad94d0de532eaa4fd959b8adde4d64898">regfree</a>)
<a name="l05893"></a>05893 <span class="preprocessor">#endif</span>
<a name="l05894"></a>05894 <span class="preprocessor"></span>
<a name="l05895"></a>05895 <span class="preprocessor">#endif </span><span class="comment">/* not emacs  */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="regex_8c.html">regex.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
