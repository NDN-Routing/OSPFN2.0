<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_route.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__route_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_route.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__route_8h__dep__incl.png" border="0" usemap="#ospfd_2ospf__route_8hdep" alt=""/></div>
<map name="ospfd_2ospf__route_8hdep" id="ospfd_2ospf__route_8hdep">
<area shape="rect" id="node3" href="ospf__abr_8c.html" title="ospfd/ospf_abr.c" alt="" coords="5,80,128,107"/><area shape="rect" id="node5" href="ospf__asbr_8c.html" title="ospfd/ospf_asbr.c" alt="" coords="153,80,284,107"/><area shape="rect" id="node7" href="ospf__ase_8c.html" title="ospfd/ospf_ase.c" alt="" coords="309,80,435,107"/><area shape="rect" id="node9" href="ospf__flood_8c.html" title="ospfd/ospf_flood.c" alt="" coords="460,80,596,107"/><area shape="rect" id="node11" href="ospf__ia_8c.html" title="ospfd/ospf_ia.c" alt="" coords="620,80,735,107"/><area shape="rect" id="node13" href="ospf__lsa_8c.html" title="ospfd/ospf_lsa.c" alt="" coords="759,80,881,107"/><area shape="rect" id="node15" href="ospf__route_8c.html" title="ospfd/ospf_route.c" alt="" coords="906,80,1043,107"/><area shape="rect" id="node17" href="ospf__routemap_8c.html" title="ospfd/ospf_routemap.c" alt="" coords="1068,80,1231,107"/><area shape="rect" id="node19" href="ospf__spf_8c.html" title="ospfd/ospf_spf.c" alt="" coords="1255,80,1379,107"/><area shape="rect" id="node21" href="ospf__vty_8c.html" title="ospfd/ospf_vty.c" alt="" coords="1403,80,1527,107"/><area shape="rect" id="node23" href="ospf__zebra_8c.html" title="ospfd/ospf_zebra.c" alt="" coords="1552,80,1691,107"/><area shape="rect" id="node25" href="ospfd_8c.html" title="ospfd/ospfd.c" alt="" coords="1715,80,1821,107"/></map>
</div>
</div>
<p><a href="ospf__route_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structospf__path.html">ospf_path</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structroute__standard.html">route_standard</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structroute__external.html">route_external</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structospf__route.html">ospf_route</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a2020c7b82fde8082e85a045d04bfae2a">OSPF_DESTINATION_ROUTER</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#afb33cf354f16d287317d4194ed454fc3">OSPF_PATH_MIN</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>&#160;&#160;&#160;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#ad72ba08ecf6dbfbe26ea17c6befe7626">OSPF_PATH_MAX</a>&#160;&#160;&#160;5</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__path.html">ospf_path</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a9b785f31ebd99b3fc947d42a863246a1">ospf_path_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a53cb935f05ae4282aa3063df79b29729">ospf_path_free</a> (struct <a class="el" href="structospf__path.html">ospf_path</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__path.html">ospf_path</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#adcc96fdc143698d825bfbbd56b10a6e5">ospf_path_lookup</a> (struct <a class="el" href="structlist.html">list</a> *, struct <a class="el" href="structospf__path.html">ospf_path</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#afef434770bdf4d8099d88849acea8796">ospf_route_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#ac0c95551cba6241cc07c0ed4f0b4ca5d">ospf_route_free</a> (struct <a class="el" href="structospf__route.html">ospf_route</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a087e74bf1d18b0046f5f217823c50274">ospf_route_delete</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#aee4a7971ef96274398a7346b3bdda59f">ospf_route_table_free</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a2a1b3b854753dd893114849d54683417">ospf_route_install</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a76197bb92a0e3a7c77ab6c1674b4c7e0">ospf_route_table_dump</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a8ce9e01a1c7b780f605e6648e699600a">ospf_intra_add_router</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structvertex.html">vertex</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#acb6aef096e811d476a155bc943797de0">ospf_intra_add_transit</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structvertex.html">vertex</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a8aeb6c0fef3861f45cc9fcf72d027d75">ospf_intra_add_stub</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *, struct <a class="el" href="structvertex.html">vertex</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *, int parent_is_root)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#acbf38276943fb3348be9cb6644129538">ospf_route_cmp</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#aad9966ebbcdcb1a2dfb456c0a67caaa6">ospf_route_copy_nexthops</a> (struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structlist.html">list</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a922f59a3b6d0f9e669d7e5e31de56e05">ospf_route_copy_nexthops_from_vertex</a> (struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structvertex.html">vertex</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#ad15eddd3cfd05588023df4471e93bbfe">ospf_route_subst</a> (struct <a class="el" href="structroute__node.html">route_node</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#ad09931c3bbc997167498b50b08adb687">ospf_route_add</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a499b49456fe5858ca8f36ddb07d5a9c2">ospf_route_subst_nexthops</a> (struct <a class="el" href="structospf__route.html">ospf_route</a> *, struct <a class="el" href="structlist.html">list</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#abad85225c2c54f113e6750a05785c929">ospf_prune_unreachable_networks</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a9584237960df23d9b3884fddba473f16">ospf_prune_unreachable_routers</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#af2f73a9ae9b0289cb2e43751d3bc1d6e">ospf_add_discard_route</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#a205aaead74e907b626028ebc67b2d292">ospf_delete_discard_route</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__route_8h.html#aedcf15195b0c02c469a4182de9a8687b">ospf_route_match_same</a> (struct <a class="el" href="structroute__table.html">route_table</a> *, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *, struct <a class="el" href="structospf__route.html">ospf_route</a> *)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a09ebe549088ee60073be68140c0f07a9"></a><!-- doxytag: member="ospf_route.h::OSPF_DESTINATION_DISCARD" ref="a09ebe549088ee60073be68140c0f07a9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_DESTINATION_DISCARD&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00028">28</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7f5d4a2b626b300ae96a502438de0615"></a><!-- doxytag: member="ospf_route.h::OSPF_DESTINATION_NETWORK" ref="a7f5d4a2b626b300ae96a502438de0615" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_DESTINATION_NETWORK&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00027">27</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2020c7b82fde8082e85a045d04bfae2a"></a><!-- doxytag: member="ospf_route.h::OSPF_DESTINATION_ROUTER" ref="a2020c7b82fde8082e85a045d04bfae2a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_DESTINATION_ROUTER&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00026">26</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1db558d26de4f9320c77c0d783d7b2b3"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_INTER_AREA" ref="a1db558d26de4f9320c77c0d783d7b2b3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_INTER_AREA&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00032">32</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="abc7a6177d1cdfac4e8a93ddd4235b08c"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_INTRA_AREA" ref="abc7a6177d1cdfac4e8a93ddd4235b08c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_INTRA_AREA&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00031">31</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad72ba08ecf6dbfbe26ea17c6befe7626"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_MAX" ref="ad72ba08ecf6dbfbe26ea17c6befe7626" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_MAX&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00035">35</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="afb33cf354f16d287317d4194ed454fc3"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_MIN" ref="afb33cf354f16d287317d4194ed454fc3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_MIN&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00030">30</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="a15dab014460164847059902ea4535834"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_TYPE1_EXTERNAL" ref="a15dab014460164847059902ea4535834" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_TYPE1_EXTERNAL&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00033">33</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa9752c4570157da8a3258dc4cdf23ce5"></a><!-- doxytag: member="ospf_route.h::OSPF_PATH_TYPE2_EXTERNAL" ref="aa9752c4570157da8a3258dc4cdf23ce5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_PATH_TYPE2_EXTERNAL&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8h_source.html#l00034">34</a> of file <a class="el" href="ospf__route_8h_source.html">ospf_route.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="af2f73a9ae9b0289cb2e43751d3bc1d6e"></a><!-- doxytag: member="ospf_route.h::ospf_add_discard_route" ref="af2f73a9ae9b0289cb2e43751d3bc1d6e" args="(struct route_table *, struct ospf_area *, struct prefix_ipv4 *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_add_discard_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00976">976</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or, *new_or;

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (rn == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): router installation error&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) <span class="comment">/* If the route to the same destination is found */</span>
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

      or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): &quot;</span>
               <span class="stringliteral">&quot;an intra-area route exists&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

      <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_add_discard_route(): &quot;</span>
               <span class="stringliteral">&quot;discard entry already installed&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

      <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
  }

  new_or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();
  new_or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>;
  new_or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>.s_addr = 0;
  new_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = 0;
  new_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;area_id;
  new_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;external_routing;
  new_or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>;
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = new_or;

  <a class="code" href="ospf__zebra_8c.html#a49ea785a614ca3ddf8878814cd58681a">ospf_zebra_add_discard</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a205aaead74e907b626028ebc67b2d292"></a><!-- doxytag: member="ospf_route.h::ospf_delete_discard_route" ref="a205aaead74e907b626028ebc67b2d292" args="(struct prefix_ipv4 *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_delete_discard_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l01031">1031</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a>(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8ce9e01a1c7b780f605e6648e699600a"></a><!-- doxytag: member="ospf_route.h::ospf_intra_add_router" ref="a8ce9e01a1c7b780f605e6648e699600a" args="(struct route_table *, struct vertex *, struct ospf_area *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_intra_add_router </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00332">332</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *lsa;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: Start&quot;</span>);

  lsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;lsa;

  if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: LS ID: %s&quot;</span>,
           inet_ntoa (lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
  
  <span class="keywordflow">if</span> (!<a class="code" href="ospfd_8h.html#a62518cec4ea9ee2a4db410d3c42b23f7">OSPF_IS_AREA_BACKBONE</a>(<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>))
    <a class="code" href="ospf__interface_8c.html#a5a24594a44bf465fefe438b02f077a20">ospf_vl_up_check</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, v);

  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structrouter__lsa.html#a1fdd09ba13cd7ca0f1b1d694d2d839aa">flags</a>, <a class="code" href="ospf__lsa_8h.html#ae763d55031a619d49a3b9dc7dbdbed15">ROUTER_LSA_SHORTCUT</a>))
    <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;shortcut_capability = 0;

  <span class="comment">/* If the newly added vertex is an area border router or AS boundary</span>
<span class="comment">     router, a routing table entry is added whose destination type is</span>
<span class="comment">     &quot;router&quot;. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="ospf__lsa_8h.html#a6741309c91ce8ca9fc9c07e1ac286c1c">IS_ROUTER_LSA_BORDER</a> (lsa) &amp;&amp; ! <a class="code" href="ospf__lsa_8h.html#ae24763c612e28d32f19f5c4d49cf805c">IS_ROUTER_LSA_EXTERNAL</a> (lsa))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: &quot;</span>
           <span class="stringliteral">&quot;this router is neither ASBR nor ABR, skipping it&quot;</span>);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Update ABR and ASBR count in this area. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a6741309c91ce8ca9fc9c07e1ac286c1c">IS_ROUTER_LSA_BORDER</a> (lsa))
    <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;abr_count++;
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#ae24763c612e28d32f19f5c4d49cf805c">IS_ROUTER_LSA_EXTERNAL</a> (lsa))
    <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;asbr_count++;

  <span class="comment">/* The Options field found in the associated router-LSA is copied</span>
<span class="comment">     into the routing table entry&#39;s Optional capabilities field. Call</span>
<span class="comment">     the newly added vertex Router X. */</span>
  or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();

  or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;area_id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;external_routing;
  or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
  or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = v-&gt;distance;
  or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a2020c7b82fde8082e85a045d04bfae2a">OSPF_DESTINATION_ROUTER</a>;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#a47649b012cf11814fb1e3abe9cf6a7ed">options</a> = lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#abd1fb7a470e51e2dc894282f5c1a637b">flags</a> = lsa-&gt;<a class="code" href="structrouter__lsa.html#a1fdd09ba13cd7ca0f1b1d694d2d839aa">flags</a>;

  <span class="comment">/* If Router X is the endpoint of one of the calculating router&#39;s</span>
<span class="comment">     virtual links, and the virtual link uses Area A as Transit area:</span>
<span class="comment">     the virtual link is declared up, the IP address of the virtual</span>
<span class="comment">     interface is set to the IP address of the outgoing interface</span>
<span class="comment">     calculated above for Router X, and the virtual neighbor&#39;s IP</span>
<span class="comment">     address is set to Router X&#39;s interface address (contained in</span>
<span class="comment">     Router X&#39;s router-LSA) that points back to the root of the</span>
<span class="comment">     shortest- path tree; equivalently, this is the interface that</span>
<span class="comment">     points back to Router X&#39;s parent vertex on the shortest-path tree</span>
<span class="comment">     (similar to the calculation in Section 16.1.1). */</span>

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = v-&gt;id;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: talking about %s/%d&quot;</span>,
           inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Note that we keep all routes to ABRs and ASBRs, not only the best */</span>
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <span class="keywordflow">else</span>
    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);

  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, or);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_router: Stop&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8aeb6c0fef3861f45cc9fcf72d027d75"></a><!-- doxytag: member="ospf_route.h::ospf_intra_add_stub" ref="a8aeb6c0fef3861f45cc9fcf72d027d75" args="(struct route_table *, struct router_lsa_link *, struct vertex *, struct ospf_area *, int parent_is_root)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_intra_add_stub </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>parent_is_root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00485">485</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t cost;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): Start&quot;</span>);

  lsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;lsa;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = <a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;link_id;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;link_data);
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): processing route to %s/%d&quot;</span>,  
           inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);

  <span class="comment">/* (1) Calculate the distance D of stub network from the root.  D is</span>
<span class="comment">     equal to the distance from the root to the router vertex</span>
<span class="comment">     (calculated in stage 1), plus the stub network link&#39;s advertised</span>
<span class="comment">     cost. */</span>
  cost = v-&gt;distance + ntohs (<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;m[0].metric);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): calculated cost is %d + %d = %d&quot;</span>, 
           v-&gt;distance, ntohs(<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;m[0].metric), cost);
  
  <span class="comment">/* PtP links with /32 masks adds host routes to remote, directly</span>
<span class="comment">   * connected hosts, see RFC 2328, 12.4.1.1, Option 1.</span>
<span class="comment">   * Such routes can just be ignored for the sake of tidyness.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (parent_is_root &amp;&amp; <a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;link_data.s_addr == 0xffffffff &amp;&amp;
      <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;link_id))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring host route %s/32 to self.&quot;</span>,
                    __func__, inet_ntoa (<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>-&gt;link_id));
      <span class="keywordflow">return</span>;
    }
  
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Lookup current routing table. */</span>
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *cur_or;

      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

      cur_or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): &quot;</span>
           <span class="stringliteral">&quot;another route to the same prefix found with cost %u&quot;</span>,
           cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);

      <span class="comment">/* Compare this distance to the current best cost to the stub</span>
<span class="comment">     network.  This is done by looking up the stub network&#39;s</span>
<span class="comment">     current routing table entry.  If the calculated distance D is</span>
<span class="comment">     larger, go on to examine the next stub network link in the</span>
<span class="comment">     LSA. */</span>
      <span class="keywordflow">if</span> (cost &gt; cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): old route is better, exit&quot;</span>);
      <span class="keywordflow">return</span>;
    }

      <span class="comment">/* (2) If this step is reached, the stub network&#39;s routing table</span>
<span class="comment">     entry must be updated.  Calculate the set of next hops that</span>
<span class="comment">     would result from using the stub network link.  This</span>
<span class="comment">     calculation is shown in Section 16.1.1; input to this</span>
<span class="comment">     calculation is the destination (the stub network) and the</span>
<span class="comment">     parent vertex (the router vertex). If the distance D is the</span>
<span class="comment">     same as the current routing table cost, simply add this set</span>
<span class="comment">     of next hops to the routing table entry&#39;s list of next hops.</span>
<span class="comment">     In this case, the routing table already has a Link State</span>
<span class="comment">     Origin.  If this Link State Origin is a router-LSA whose Link</span>
<span class="comment">     State ID is smaller than V&#39;s Router ID, reset the Link State</span>
<span class="comment">     Origin to V&#39;s router-LSA. */</span>

      <span class="keywordflow">if</span> (cost == cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): routes are equal, merge&quot;</span>);

      <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (cur_or, v);

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;lsa-&gt;<a class="code" href="structrouter__lsa.html#afc37126817cd34b89c19e03f0a6b0262">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>) &lt; 0)
        cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
      <span class="keywordflow">return</span>;
    }

      <span class="comment">/* Otherwise D is smaller than the routing table cost.</span>
<span class="comment">     Overwrite the current routing table entry by setting the</span>
<span class="comment">     routing table entry&#39;s cost to D, and by setting the entry&#39;s</span>
<span class="comment">     list of next hops to the newly calculated set.  Set the</span>
<span class="comment">     routing table entry&#39;s Link State Origin to V&#39;s router-LSA.</span>
<span class="comment">     Then go on to examine the next stub network link. */</span>

      <span class="keywordflow">if</span> (cost &lt; cur_or-&gt;cost)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): new route is better, set it&quot;</span>);

      cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = cost;

      <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (cur_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);

      <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (cur_or, v);

      cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;
      <span class="keywordflow">return</span>;
    }
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): installing new route&quot;</span>);

  or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();

  or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;area_id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;external_routing;
  or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
  or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = cost;
  or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;

  <span class="comment">/* Nexthop is depend on connection type. */</span>
  <span class="keywordflow">if</span> (v != <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;spf)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): this network is on remote router&quot;</span>);
      <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): this network is on this router&quot;</span>);

      <span class="keywordflow">if</span> ((oi = <a class="code" href="ospf__interface_8c.html#a9255c148dc6fdf178c585cf1be34782c">ospf_if_lookup_by_prefix</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;ospf, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): the interface is %s&quot;</span>,
               <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));

      path = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
      path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr = 0;
      path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, path);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_intra_add_stub(): where&#39;s the interface ?&quot;</span>);
    }
    }

  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = or;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;ospf_intra_add_stub(): Stop&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="acb6aef096e811d476a155bc943797de0"></a><!-- doxytag: member="ospf_route.h::ospf_intra_add_transit" ref="acb6aef096e811d476a155bc943797de0" args="(struct route_table *, struct vertex *, struct ospf_area *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_intra_add_transit </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00424">424</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *lsa;

  lsa = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a>*) v-&gt;lsa;

  <span class="comment">/* If the newly added vertex is a transit network, the routing table</span>
<span class="comment">     entry for the network is located.  The entry&#39;s Destination ID is</span>
<span class="comment">     the IP network number, which can be obtained by masking the</span>
<span class="comment">     Vertex ID (Link State ID) with its associated subnet mask (found</span>
<span class="comment">     in the body of the associated network-LSA). */</span>
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = v-&gt;id;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (lsa-&gt;<a class="code" href="structnetwork__lsa.html#a65a1f220899e8eb91f9b80a2f15d7d22">mask</a>);
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* If the routing table entry already exists (i.e., there is already</span>
<span class="comment">     an intra-area route to the destination installed in the routing</span>
<span class="comment">     table), multiple vertices have mapped to the same IP network.</span>
<span class="comment">     For example, this can occur when a new Designated Router is being</span>
<span class="comment">     established.  In this case, the current routing table entry</span>
<span class="comment">     should be overwritten if and only if the newly found path is just</span>
<span class="comment">     as short and the current routing table entry&#39;s Link State Origin</span>
<span class="comment">     has a smaller Link State ID than the newly added vertex&#39; LSA. */</span>
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *cur_or;

      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      cur_or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (v-&gt;distance &gt; cur_or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> ||
          <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;cur_or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;lsa-&gt;<a class="code" href="structnetwork__lsa.html#a3c43f76888785ba064b4f2bf20a9818f">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>) &gt; 0)
    <span class="keywordflow">return</span>;
      
      <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
    }

  or = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();

  or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = v-&gt;id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;area_id;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#aa065a2d82f3aecb17630a4e60a7fb043">external_routing</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;external_routing;
  or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> = <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>;
  or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> = v-&gt;distance;
  or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#ac4ae335ad5a7b40bf44c0b12cc03dd8f">origin</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa;

  <a class="code" href="ospf__route_8c.html#a39a54cf27329c90f5115eec1191f40b8">ospf_route_copy_nexthops_from_vertex</a> (or, v);
  
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = or;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a53cb935f05ae4282aa3063df79b29729"></a><!-- doxytag: member="ospf_route.h::ospf_path_free" ref="a53cb935f05ae4282aa3063df79b29729" args="(struct ospf_path *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_path_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__path.html">ospf_path</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00089">89</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4ca1dee1bc47bb6af075fc21e679b640">MTYPE_OSPF_PATH</a>, op);
}
</pre></div>
</div>
</div>
<a class="anchor" id="adcc96fdc143698d825bfbbd56b10a6e5"></a><!-- doxytag: member="ospf_route.h::ospf_path_lookup" ref="adcc96fdc143698d825bfbbd56b10a6e5" args="(struct list *, struct ospf_path *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__path.html">ospf_path</a>* ospf_path_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__path.html">ospf_path</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00827">827</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (plist, node, op))
  {
    <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;path-&gt;nexthop))
      <span class="keywordflow">continue</span>;
    <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a986b18fa4def90382139eaf1e6276a21">adv_router</a>, &amp;path-&gt;adv_router))
      <span class="keywordflow">continue</span>;
    <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> != path-&gt;ifindex)
      <span class="keywordflow">continue</span>;
    <span class="keywordflow">return</span> op;
  }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b785f31ebd99b3fc947d42a863246a1"></a><!-- doxytag: member="ospf_route.h::ospf_path_new" ref="a9b785f31ebd99b3fc947d42a863246a1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__path.html">ospf_path</a>* ospf_path_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00068">68</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4ca1dee1bc47bb6af075fc21e679b640">MTYPE_OSPF_PATH</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__path.html">ospf_path</a>));

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abad85225c2c54f113e6750a05785c929"></a><!-- doxytag: member="ospf_route.h::ospf_prune_unreachable_networks" ref="abad85225c2c54f113e6750a05785c929" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_prune_unreachable_networks </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00901">901</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *next;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning unreachable networks&quot;</span>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = next)
    {
      next = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>) == 0)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning route to %s/%d&quot;</span>,
               inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

          <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
          rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        }
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9584237960df23d9b3884fddba473f16"></a><!-- doxytag: member="ospf_route.h::ospf_prune_unreachable_routers" ref="a9584237960df23d9b3884fddba473f16" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_prune_unreachable_routers </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00930">930</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *next;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *paths;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning unreachable routers&quot;</span>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = next)
    {
      next = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
      <span class="keywordflow">if</span> ((paths = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (paths, node, nnode, or))
    {
      <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>) == 0)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning route to rtr %s&quot;</span>,
                 inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;               via area %s&quot;</span>,
                 inet_ntoa (or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>));
        }

          <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (paths, or);
          <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
        }
    }

      <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (paths) == 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Pruning router node %s&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));

      <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (paths);
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad09931c3bbc997167498b50b08adb687"></a><!-- doxytag: member="ospf_route.h::ospf_route_add" ref="ad09931c3bbc997167498b50b08adb687" args="(struct route_table *, struct prefix_ipv4 *, struct ospf_route *, struct ospf_route *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00880">880</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (new_or, over-&gt;paths);

  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_route_add(): something&#39;s wrong !&quot;</span>);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span>;
    }

  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = new_or;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acbf38276943fb3348be9cb6644129538"></a><!-- doxytag: member="ospf_route.h::ospf_route_cmp" ref="acbf38276943fb3348be9cb6644129538" args="(struct ospf *, struct ospf_route *, struct ospf_route *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_route_cmp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00741">741</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret = 0;

  <span class="comment">/* Path types of r1 and r2 are not the same. */</span>
  <span class="keywordflow">if</span> ((ret = (r1-&gt;path_type - r2-&gt;path_type)))
    <span class="keywordflow">return</span> ret;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[Compare]: Path types are the same.&quot;</span>);
  <span class="comment">/* Path types are the same, compare any cost. */</span>
  <span class="keywordflow">switch</span> (r1-&gt;path_type)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>:
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>:
      <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
    {
      ret = <a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">ospf_asbr_route_cmp</a> (<a class="code" href="structospf.html">ospf</a>, r1-&gt;u.ext.asbr, r2-&gt;u.ext.asbr);
      <span class="keywordflow">if</span> (ret != 0)
        <span class="keywordflow">return</span> ret;
    }
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>:
      <span class="keywordflow">if</span> ((ret = (r1-&gt;u.ext.type2_cost - r2-&gt;u.ext.type2_cost)))
    <span class="keywordflow">return</span> ret;

      <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
    {
      ret = <a class="code" href="ospf__route_8c.html#a1d14e6ddc65fc228a90278eae6592736">ospf_asbr_route_cmp</a> (<a class="code" href="structospf.html">ospf</a>, r1-&gt;u.ext.asbr, r2-&gt;u.ext.asbr);
      <span class="keywordflow">if</span> (ret != 0)
        <span class="keywordflow">return</span> ret;
    }
      <span class="keywordflow">break</span>;
    }      

  <span class="comment">/* Anyway, compare the costs. */</span>
  <span class="keywordflow">return</span> (r1-&gt;cost - r2-&gt;cost);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aad9966ebbcdcb1a2dfb456c0a67caaa6"></a><!-- doxytag: member="ospf_route.h::ospf_route_copy_nexthops" ref="aad9966ebbcdcb1a2dfb456c0a67caaa6" args="(struct ospf_route *, struct list *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_copy_nexthops </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00846">846</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (to-&gt;paths);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (from, node, nnode, path))
    <span class="comment">/* The same routes are just discarded. */</span>
    <span class="keywordflow">if</span> (!<a class="code" href="ospf__route_8c.html#a0ff9bff69b019f97b8d7b54041595bd7">ospf_path_lookup</a> (to-&gt;paths, path))
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (to-&gt;paths, <a class="code" href="ospf__route_8c.html#a0b27d3d8b6654d4f2129a1d9d1c52d24">ospf_path_dup</a> (path));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a922f59a3b6d0f9e669d7e5e31de56e05"></a><!-- doxytag: member="ospf_route.h::ospf_route_copy_nexthops_from_vertex" ref="a922f59a3b6d0f9e669d7e5e31de56e05" args="(struct ospf_route *, struct vertex *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_copy_nexthops_from_vertex </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00799">799</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
  <span class="keyword">struct </span><a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (to-&gt;paths);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;parents, node, vp))
    {
      nexthop = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>;
      
      <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
    {
      <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#ac9f486bd1eea8cce7bfa523e66400830">ospf_path_exist</a> (to-&gt;paths, nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>, nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>))
        {
          path = <a class="code" href="ospf__route_8c.html#a148758e06f1677c78b931996112febad">ospf_path_new</a> ();
          path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a> = nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
          path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> = nexthop-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
          <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (to-&gt;paths, path);
        }
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a087e74bf1d18b0046f5f217823c50274"></a><!-- doxytag: member="ospf_route.h::ospf_route_delete" ref="a087e74bf1d18b0046f5f217823c50274" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00095">95</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
      <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>,
                       or);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
      <a class="code" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac0c95551cba6241cc07c0ed4f0b4ca5d"></a><!-- doxytag: member="ospf_route.h::ospf_route_free" ref="ac0c95551cba6241cc07c0ed4f0b4ca5d" args="(struct ospf_route *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00059">59</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (or-&gt;paths)
      <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (or-&gt;paths);

  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6a252257efa68529873f79272dcac0cd">MTYPE_OSPF_ROUTE</a>, or);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2a1b3b854753dd893114849d54683417"></a><!-- doxytag: member="ospf_route.h::ospf_route_install" ref="a2a1b3b854753dd893114849d54683417" args="(struct ospf *, struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00239">239</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;

  <span class="comment">/* rt contains new routing table, new_table contains an old one.</span>
<span class="comment">     updating pointers */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>)
    <a class="code" href="ospf__route_8c.html#a1af9a7462973d18c31f1f610ff70e338">ospf_route_table_free</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>);

  <a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a> = <a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>;
  <a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a> = rt;

  <span class="comment">/* Delete old routes. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>)
    <a class="code" href="ospf__route_8c.html#a28f72bf6d366ad41b981f8040b3c8ea1">ospf_route_delete_uniq</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>, rt);
  <span class="keywordflow">if</span> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>)
    <a class="code" href="ospf__route_8c.html#a7e8b2e3968d2de53d4c13b5c7a0814ab">ospf_route_delete_same_ext</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>, rt);

  <span class="comment">/* Install new routes. */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
      {
        <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
          <a class="code" href="ospf__zebra_8c.html#a8045c2db458b9ad1e679863cf369e5be">ospf_zebra_add</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or);
      }
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a09ebe549088ee60073be68140c0f07a9">OSPF_DESTINATION_DISCARD</a>)
      <span class="keywordflow">if</span> (! <a class="code" href="ospf__route_8c.html#a55dfc5bf7e10244d1e3db76671001e2c">ospf_route_match_same</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a295e93ba4c3d5a63e31eabb04593c8fe">old_table</a>,
                       (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
        <a class="code" href="ospf__zebra_8c.html#a49ea785a614ca3ddf8878814cd58681a">ospf_zebra_add_discard</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aedcf15195b0c02c469a4182de9a8687b"></a><!-- doxytag: member="ospf_route.h::ospf_route_match_same" ref="aedcf15195b0c02c469a4182de9a8687b" args="(struct route_table *, struct prefix_ipv4 *, struct ospf_route *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_route_match_same </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00132">132</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *newop;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n2;

  <span class="keywordflow">if</span> (! rt || ! <a class="code" href="structprefix.html">prefix</a>)
    <span class="keywordflow">return</span> 0;

   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rt, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="structprefix.html">prefix</a>);
   <span class="keywordflow">if</span> (! rn || ! rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
     <span class="keywordflow">return</span> 0;
 
   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

   or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
   <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == newor-&gt;type &amp;&amp; or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> == newor-&gt;cost)
     {
       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
     {
       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != newor-&gt;paths-&gt;count)
         <span class="keywordflow">return</span> 0;

       <span class="comment">/* Check each path. */</span>
       <span class="keywordflow">for</span> (n1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>), n2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (newor-&gt;paths);
        n1 &amp;&amp; n2; n1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n1), n2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n2))
         { 
           op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n1);
           newop = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n2);

           <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;newop-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
         <span class="keywordflow">return</span> 0;
           <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> != newop-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>)
         <span class="keywordflow">return</span> 0;
         }
       <span class="keywordflow">return</span> 1;
     }
       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="structprefix.html">prefix</a>))
     <span class="keywordflow">return</span> 1;
     }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afef434770bdf4d8099d88849acea8796"></a><!-- doxytag: member="ospf_route.h::ospf_route_new" ref="afef434770bdf4d8099d88849acea8796" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__route.html">ospf_route</a>* ospf_route_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00044">44</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6a252257efa68529873f79272dcac0cd">MTYPE_OSPF_ROUTE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a>));

  <span class="keyword">new</span>-&gt;ctime = <a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keyword">new</span>-&gt;mtime = <span class="keyword">new</span>-&gt;ctime;
  <span class="keyword">new</span>-&gt;paths = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <span class="keyword">new</span>-&gt;paths-&gt;del = (void (*) (<span class="keywordtype">void</span> *))<a class="code" href="ospf__route_8c.html#af3dbe3b97b03134d267d14e78abe0717">ospf_path_free</a>;

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad15eddd3cfd05588023df4471e93bbfe"></a><!-- doxytag: member="ospf_route.h::ospf_route_subst" ref="ad15eddd3cfd05588023df4471e93bbfe" args="(struct route_node *, struct ospf_route *, struct ospf_route *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_subst </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00868">868</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
  <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (rn-&gt;info);

  <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (new_or, over-&gt;paths);
  rn-&gt;info = new_or;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a499b49456fe5858ca8f36ddb07d5a9c2"></a><!-- doxytag: member="ospf_route.h::ospf_route_subst_nexthops" ref="a499b49456fe5858ca8f36ddb07d5a9c2" args="(struct ospf_route *, struct list *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_subst_nexthops </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00860">860</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{

  <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (to-&gt;paths);
  <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (to, from);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a76197bb92a0e3a7c77ab6c1674b4c7e0"></a><!-- doxytag: member="ospf_route.h::ospf_route_table_dump" ref="a76197bb92a0e3a7c77ab6c1674b4c7e0" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_table_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00669">669</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keywordtype">char</span> buf1[BUFSIZ];
  <span class="keywordtype">char</span> buf2[BUFSIZ];
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *pnode;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type   Dest   Area   Path     Type    Cost   Next     Adv.&quot;</span>);
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;                 Hop(s)   Router(s)&quot;</span>);
<span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>

  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;========== OSPF routing table ==========&quot;</span>);
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a68c9cb8cb5a39fb9d8d2b0817731c75b">type</a> == <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>)
      {
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;N %s/%d\t%s\t%s\t%d&quot;</span>, 
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf1, BUFSIZ),
               rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>, buf2,
                  BUFSIZ),
               <a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">ospf_path_type_str</a>[or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>],
               or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
        <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, pnode, path))
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  -&gt; %s&quot;</span>, inet_ntoa (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>));
      }
        <span class="keywordflow">else</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;R %s\t%s\t%s\t%d&quot;</span>, 
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf1, BUFSIZ),
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>, buf2,
                BUFSIZ),
             <a class="code" href="ospf__route_8c.html#a34459cb4b5653bfc1b8bc9cbecd8668a">ospf_path_type_str</a>[or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>],
             or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
      }
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;========================================&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aee4a7971ef96274398a7346b3bdda59f"></a><!-- doxytag: member="ospf_route.h::ospf_route_table_free" ref="aee4a7971ef96274398a7346b3bdda59f" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_route_table_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__route_8c_source.html#l00112">112</a> of file <a class="el" href="ospf__route_8c_source.html">ospf_route.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);

    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      }

   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (rt);
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__route_8h.html">ospf_route.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:30 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
