<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/prefix.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('prefix_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/prefix.c</div>  </div>
</div>
<div class="contents">
<a href="prefix_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Prefix related functions.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98, 99 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">/* Maskbit. */</span>
<a name="l00032"></a><a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">00032</a> <span class="keyword">static</span> <span class="keyword">const</span> u_char <a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[] = {0x00, 0x80, 0xc0, 0xe0, 0xf0,
<a name="l00033"></a>00033                      0xf8, 0xfc, 0xfe, 0xff};
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">/* Number of bits in prefix type. */</span>
<a name="l00036"></a>00036 <span class="preprocessor">#ifndef PNBBY</span>
<a name="l00037"></a><a class="code" href="prefix_8c.html#a6f9a32b2fd315bf69360c883843e8699">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define PNBBY 8</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* PNBBY */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="prefix_8c.html#af3fe3362bcbca3196b184d9bd871544b">00040</a> <span class="preprocessor">#define MASKBIT(offset)  ((0xff &lt;&lt; (PNBBY - (offset))) &amp; 0xff)</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="comment">/* Address Famiy Identifier to Address Family converter. */</span>
<a name="l00043"></a>00043 <span class="keywordtype">int</span>
<a name="l00044"></a><a class="code" href="prefix_8h.html#ac65f6c2eb3775d9da42ed6fc38c54458">00044</a> <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (<span class="keywordtype">int</span> afi)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00047"></a>00047     <span class="keywordflow">return</span> AF_INET;
<a name="l00048"></a>00048 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00050"></a>00050     <span class="keywordflow">return</span> AF_INET6;
<a name="l00051"></a>00051 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00052"></a>00052   <span class="keywordflow">return</span> 0;
<a name="l00053"></a>00053 }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keywordtype">int</span>
<a name="l00056"></a><a class="code" href="prefix_8h.html#ac4de39a0f9819069a2348657629ff821">00056</a> <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (<span class="keywordtype">int</span> family)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058   <span class="keywordflow">if</span> (family == AF_INET)
<a name="l00059"></a>00059     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
<a name="l00060"></a>00060 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (family == AF_INET6)
<a name="l00062"></a>00062     <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>;
<a name="l00063"></a>00063 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00064"></a>00064   <span class="keywordflow">return</span> 0;
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">/* If n includes p prefix then return 1 else return 0. */</span>
<a name="l00068"></a>00068 <span class="keywordtype">int</span>
<a name="l00069"></a><a class="code" href="prefix_8h.html#a951ca22d390167cd3894a4af9f1e9844">00069</a> <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071   <span class="keywordtype">int</span> offset;
<a name="l00072"></a>00072   <span class="keywordtype">int</span> shift;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="comment">/* Set both prefix&#39;s head pointer. */</span>
<a name="l00075"></a>00075   <span class="keyword">const</span> u_char *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a> = (<span class="keyword">const</span> u_char *)&amp;n-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00076"></a>00076   <span class="keyword">const</span> u_char *pp = (<span class="keyword">const</span> u_char *)&amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="comment">/* If n&#39;s prefix is longer than p&#39;s one return 0. */</span>
<a name="l00079"></a>00079   <span class="keywordflow">if</span> (n-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00080"></a>00080     <span class="keywordflow">return</span> 0;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082   offset = n-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> / <a class="code" href="prefix_8c.html#a6f9a32b2fd315bf69360c883843e8699">PNBBY</a>;
<a name="l00083"></a>00083   shift =  n-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> % <a class="code" href="prefix_8c.html#a6f9a32b2fd315bf69360c883843e8699">PNBBY</a>;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="keywordflow">if</span> (shift)
<a name="l00086"></a>00086     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[shift] &amp; (np[offset] ^ pp[offset]))
<a name="l00087"></a>00087       <span class="keywordflow">return</span> 0;
<a name="l00088"></a>00088   
<a name="l00089"></a>00089   <span class="keywordflow">while</span> (offset--)
<a name="l00090"></a>00090     <span class="keywordflow">if</span> (np[offset] != pp[offset])
<a name="l00091"></a>00091       <span class="keywordflow">return</span> 0;
<a name="l00092"></a>00092   <span class="keywordflow">return</span> 1;
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">/* Copy prefix from src to dest. */</span>
<a name="l00096"></a>00096 <span class="keywordtype">void</span>
<a name="l00097"></a><a class="code" href="prefix_8h.html#abaad44d47b408d45484fdd729ab501b2">00097</a> <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *dest, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *src)
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099   dest-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = src-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>;
<a name="l00100"></a>00100   dest-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = src-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="keywordflow">if</span> (src-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00103"></a>00103     dest-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = src-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l00104"></a>00104 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (src-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00106"></a>00106     dest-&gt;u.prefix6 = src-&gt;u.prefix6;
<a name="l00107"></a>00107 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00108"></a>00108   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (src-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_UNSPEC)
<a name="l00109"></a>00109     {
<a name="l00110"></a>00110       dest-&gt;u.<a class="code" href="structprefix.html#a416d94ff668bb11283d8e2aee61cca72">lp</a>.id = src-&gt;u.<a class="code" href="structprefix.html#a416d94ff668bb11283d8e2aee61cca72">lp</a>.id;
<a name="l00111"></a>00111       dest-&gt;u.<a class="code" href="structprefix.html#a416d94ff668bb11283d8e2aee61cca72">lp</a>.adv_router = src-&gt;u.<a class="code" href="structprefix.html#a416d94ff668bb11283d8e2aee61cca72">lp</a>.adv_router;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113   <span class="keywordflow">else</span>
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;prefix_copy(): Unknown address family %d&quot;</span>,
<a name="l00116"></a>00116           src-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>);
<a name="l00117"></a>00117       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (0);
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="comment">/* </span>
<a name="l00122"></a>00122 <span class="comment"> * Return 1 if the address/netmask contained in the prefix structure</span>
<a name="l00123"></a>00123 <span class="comment"> * is the same, and else return 0.  For this routine, &#39;same&#39; requires</span>
<a name="l00124"></a>00124 <span class="comment"> * that not only the prefix length and the network part be the same,</span>
<a name="l00125"></a>00125 <span class="comment"> * but also the host part.  Thus, 10.0.0.1/8 and 10.0.0.2/8 are not</span>
<a name="l00126"></a>00126 <span class="comment"> * the same.  Note that this routine has the same return value sense</span>
<a name="l00127"></a>00127 <span class="comment"> * as &#39;==&#39; (which is different from prefix_cmp).</span>
<a name="l00128"></a>00128 <span class="comment"> */</span>
<a name="l00129"></a>00129 <span class="keywordtype">int</span>
<a name="l00130"></a><a class="code" href="prefix_8h.html#ac99ede75a1bff9198a4daebeb332d7b7">00130</a> <a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p1, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p2)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="keywordflow">if</span> (p1-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == p2-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> &amp;&amp; p1-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == p2-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134       <span class="keywordflow">if</span> (p1-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00135"></a>00135     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;p1-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, &amp;p2-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>))
<a name="l00136"></a>00136       <span class="keywordflow">return</span> 1;
<a name="l00137"></a>00137 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (p1-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 )
<a name="l00139"></a>00139     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;p1-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, &amp;p2-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>))
<a name="l00140"></a>00140       <span class="keywordflow">return</span> 1;
<a name="l00141"></a>00141 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143   <span class="keywordflow">return</span> 0;
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="comment">/*</span>
<a name="l00147"></a>00147 <span class="comment"> * Return 0 if the network prefixes represented by the struct prefix</span>
<a name="l00148"></a>00148 <span class="comment"> * arguments are the same prefix, and 1 otherwise.  Network prefixes</span>
<a name="l00149"></a>00149 <span class="comment"> * are considered the same if the prefix lengths are equal and the</span>
<a name="l00150"></a>00150 <span class="comment"> * network parts are the same.  Host bits (which are considered masked</span>
<a name="l00151"></a>00151 <span class="comment"> * by the prefix length) are not significant.  Thus, 10.0.0.1/8 and</span>
<a name="l00152"></a>00152 <span class="comment"> * 10.0.0.2/8 are considered equivalent by this routine.  Note that</span>
<a name="l00153"></a>00153 <span class="comment"> * this routine has the same return sense as strcmp (which is different</span>
<a name="l00154"></a>00154 <span class="comment"> * from prefix_same).</span>
<a name="l00155"></a>00155 <span class="comment"> */</span>
<a name="l00156"></a>00156 <span class="keywordtype">int</span>
<a name="l00157"></a><a class="code" href="prefix_8h.html#acd6fef1cce47c4acf254917901894e96">00157</a> <a class="code" href="prefix_8c.html#a203098ec44d398d5c8692082d8cae725">prefix_cmp</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p1, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p2)
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159   <span class="keywordtype">int</span> offset;
<a name="l00160"></a>00160   <span class="keywordtype">int</span> shift;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="comment">/* Set both prefix&#39;s head pointer. */</span>
<a name="l00163"></a>00163   <span class="keyword">const</span> u_char *pp1 = (<span class="keyword">const</span> u_char *)&amp;p1-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00164"></a>00164   <span class="keyword">const</span> u_char *pp2 = (<span class="keyword">const</span> u_char *)&amp;p2-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="keywordflow">if</span> (p1-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != p2-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> || p1-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != p2-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00167"></a>00167     <span class="keywordflow">return</span> 1;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   offset = p1-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> / 8;
<a name="l00170"></a>00170   shift = p1-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> % 8;
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   <span class="keywordflow">if</span> (shift)
<a name="l00173"></a>00173     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[shift] &amp; (pp1[offset] ^ pp2[offset]))
<a name="l00174"></a>00174       <span class="keywordflow">return</span> 1;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="keywordflow">while</span> (offset--)
<a name="l00177"></a>00177     <span class="keywordflow">if</span> (pp1[offset] != pp2[offset])
<a name="l00178"></a>00178       <span class="keywordflow">return</span> 1;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180   <span class="keywordflow">return</span> 0;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">/* Return prefix family type string. */</span>
<a name="l00184"></a>00184 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00185"></a><a class="code" href="prefix_8h.html#ae710c06755a2945ac62a08f32bb63731">00185</a> <a class="code" href="prefix_8c.html#a857a677dba88a14eab7a4090d0bcd3fe">prefix_family_str</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00186"></a>00186 {
<a name="l00187"></a>00187   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00188"></a>00188     <span class="keywordflow">return</span> <span class="stringliteral">&quot;inet&quot;</span>;
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00191"></a>00191     <span class="keywordflow">return</span> <span class="stringliteral">&quot;inet6&quot;</span>;
<a name="l00192"></a>00192 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00193"></a>00193   <span class="keywordflow">return</span> <span class="stringliteral">&quot;unspec&quot;</span>;
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">/* Allocate new prefix_ipv4 structure. */</span>
<a name="l00197"></a>00197 <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *
<a name="l00198"></a><a class="code" href="prefix_8h.html#a5e3deaec6e89929a639d0ef2662626d4">00198</a> <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ()
<a name="l00199"></a>00199 {
<a name="l00200"></a>00200   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   <span class="comment">/* Call prefix_new to allocate a full-size struct prefix to avoid problems</span>
<a name="l00203"></a>00203 <span class="comment">     where the struct prefix_ipv4 is cast to struct prefix and unallocated</span>
<a name="l00204"></a>00204 <span class="comment">     bytes were being referenced (e.g. in structure assignments). */</span>
<a name="l00205"></a>00205   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)<a class="code" href="prefix_8c.html#a334dfe0b68e0de68379895a8ff3057e7">prefix_new</a>();
<a name="l00206"></a>00206   p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00207"></a>00207   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="comment">/* Free prefix_ipv4 structure. */</span>
<a name="l00211"></a>00211 <span class="keywordtype">void</span>
<a name="l00212"></a><a class="code" href="prefix_8h.html#a41d10c09454545b63c7d05fb86bc7f30">00212</a> <a class="code" href="prefix_8c.html#a226bbb39f0a469263b369d16b58ab62f">prefix_ipv4_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00213"></a>00213 {
<a name="l00214"></a>00214   <a class="code" href="prefix_8c.html#a5d8a68bc25fb973c471e61aaeb76a015">prefix_free</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p);
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="comment">/* When string format is invalid return 0. */</span>
<a name="l00218"></a>00218 <span class="keywordtype">int</span>
<a name="l00219"></a><a class="code" href="prefix_8h.html#a5e0caf58f29c658e0716aae727128eba">00219</a> <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221   <span class="keywordtype">int</span> ret;
<a name="l00222"></a>00222   <span class="keywordtype">int</span> plen;
<a name="l00223"></a>00223   <span class="keywordtype">char</span> *pnt;
<a name="l00224"></a>00224   <span class="keywordtype">char</span> *cp;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   <span class="comment">/* Find slash inside string. */</span>
<a name="l00227"></a>00227   pnt = strchr (str, <span class="charliteral">&#39;/&#39;</span>);
<a name="l00228"></a>00228 
<a name="l00229"></a>00229   <span class="comment">/* String doesn&#39;t contail slash. */</span>
<a name="l00230"></a>00230   <span class="keywordflow">if</span> (pnt == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232       <span class="comment">/* Convert string to prefix. */</span>
<a name="l00233"></a>00233       ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (str, &amp;p-&gt;prefix);
<a name="l00234"></a>00234       <span class="keywordflow">if</span> (ret == 0)
<a name="l00235"></a>00235     <span class="keywordflow">return</span> 0;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237       <span class="comment">/* If address doesn&#39;t contain slash we assume it host address. */</span>
<a name="l00238"></a>00238       p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00239"></a>00239       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241       <span class="keywordflow">return</span> ret;
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243   <span class="keywordflow">else</span>
<a name="l00244"></a>00244     {
<a name="l00245"></a>00245       cp = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, (pnt - str) + 1);
<a name="l00246"></a>00246       strncpy (cp, str, pnt - str);
<a name="l00247"></a>00247       *(cp + (pnt - <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00248"></a>00248       ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (cp, &amp;p-&gt;prefix);
<a name="l00249"></a>00249       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, cp);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251       <span class="comment">/* Get prefix length. */</span>
<a name="l00252"></a>00252       plen = (u_char) atoi (++pnt);
<a name="l00253"></a>00253       <span class="keywordflow">if</span> (plen &gt; <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>)
<a name="l00254"></a>00254     <span class="keywordflow">return</span> 0;
<a name="l00255"></a>00255 
<a name="l00256"></a>00256       p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00257"></a>00257       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = plen;
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260   <span class="keywordflow">return</span> ret;
<a name="l00261"></a>00261 }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="comment">/* Convert masklen into IP address&#39;s netmask. */</span>
<a name="l00264"></a>00264 <span class="keywordtype">void</span>
<a name="l00265"></a><a class="code" href="prefix_8h.html#a363c1588cd88f6320097cb766b0251dd">00265</a> <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (<span class="keywordtype">int</span> masklen, <span class="keyword">struct</span> in_addr *netmask)
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267   u_char *pnt;
<a name="l00268"></a>00268   <span class="keywordtype">int</span> bit;
<a name="l00269"></a>00269   <span class="keywordtype">int</span> offset;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   memset (netmask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l00272"></a>00272   pnt = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) netmask;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   offset = masklen / 8;
<a name="l00275"></a>00275   bit = masklen % 8;
<a name="l00276"></a>00276   
<a name="l00277"></a>00277   <span class="keywordflow">while</span> (offset--)
<a name="l00278"></a>00278     *pnt++ = 0xff;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280   <span class="keywordflow">if</span> (bit)
<a name="l00281"></a>00281     *pnt = <a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[bit];
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">/* Convert IP address&#39;s netmask into integer. We assume netmask is</span>
<a name="l00285"></a>00285 <span class="comment">   sequential one. Argument netmask should be network byte order. */</span>
<a name="l00286"></a>00286 u_char
<a name="l00287"></a><a class="code" href="prefix_8h.html#a5a02555d617a8c65acee96aec0de709a">00287</a> <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (<span class="keyword">struct</span> in_addr netmask)
<a name="l00288"></a>00288 {
<a name="l00289"></a>00289   u_char len;
<a name="l00290"></a>00290   u_char *pnt;
<a name="l00291"></a>00291   u_char *end;
<a name="l00292"></a>00292   u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294   len = 0;
<a name="l00295"></a>00295   pnt = (u_char *) &amp;netmask;
<a name="l00296"></a>00296   end = pnt + 4;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="keywordflow">while</span> ((pnt &lt; end) &amp;&amp; (*pnt == 0xff))
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300       len+= 8;
<a name="l00301"></a>00301       pnt++;
<a name="l00302"></a>00302     } 
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="keywordflow">if</span> (pnt &lt; end)
<a name="l00305"></a>00305     {
<a name="l00306"></a>00306       val = *pnt;
<a name="l00307"></a>00307       <span class="keywordflow">while</span> (val)
<a name="l00308"></a>00308     {
<a name="l00309"></a>00309       len++;
<a name="l00310"></a>00310       val &lt;&lt;= 1;
<a name="l00311"></a>00311     }
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313   <span class="keywordflow">return</span> len;
<a name="l00314"></a>00314 }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 <span class="comment">/* Apply mask to IPv4 prefix. */</span>
<a name="l00317"></a>00317 <span class="keywordtype">void</span>
<a name="l00318"></a><a class="code" href="prefix_8h.html#aa7a3fcb833e93602c456c013374f9057">00318</a> <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00319"></a>00319 {
<a name="l00320"></a>00320   u_char *pnt;
<a name="l00321"></a>00321   <span class="keywordtype">int</span> index;
<a name="l00322"></a>00322   <span class="keywordtype">int</span> offset;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   index = p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> / 8;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   <span class="keywordflow">if</span> (index &lt; 4)
<a name="l00327"></a>00327     {
<a name="l00328"></a>00328       pnt = (u_char *) &amp;p-&gt;prefix;
<a name="l00329"></a>00329       offset = p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> % 8;
<a name="l00330"></a>00330 
<a name="l00331"></a>00331       pnt[index] &amp;= <a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[offset];
<a name="l00332"></a>00332       index++;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334       while (index &lt; 4)
<a name="l00335"></a>00335     pnt[index++] = 0;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="comment">/* If prefix is 0.0.0.0/0 then return 1 else return 0. */</span>
<a name="l00340"></a>00340 <span class="keywordtype">int</span>
<a name="l00341"></a><a class="code" href="prefix_8h.html#adcdb9f71008bd3fce97b4a5d5422c513">00341</a> <a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00342"></a>00342 {
<a name="l00343"></a>00343   <span class="keywordflow">return</span> (p-&gt;prefix.s_addr == 0 &amp;&amp; p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> == 0);
<a name="l00344"></a>00344 }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00347"></a>00347 <span class="preprocessor"></span>
<a name="l00348"></a>00348 <span class="comment">/* Allocate a new ip version 6 route */</span>
<a name="l00349"></a>00349 <span class="keyword">struct </span>prefix_ipv6 *
<a name="l00350"></a>00350 prefix_ipv6_new (<span class="keywordtype">void</span>)
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="comment">/* Allocate a full-size struct prefix to avoid problems with structure</span>
<a name="l00355"></a>00355 <span class="comment">     size mismatches. */</span>
<a name="l00356"></a>00356   p = (<span class="keyword">struct </span>prefix_ipv6 *)<a class="code" href="prefix_8c.html#a334dfe0b68e0de68379895a8ff3057e7">prefix_new</a>();
<a name="l00357"></a>00357   p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = AF_INET6;
<a name="l00358"></a>00358   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00359"></a>00359 }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="comment">/* Free prefix for IPv6. */</span>
<a name="l00362"></a>00362 <span class="keywordtype">void</span>
<a name="l00363"></a>00363 prefix_ipv6_free (<span class="keyword">struct</span> prefix_ipv6 *p)
<a name="l00364"></a>00364 {
<a name="l00365"></a>00365   <a class="code" href="prefix_8c.html#a5d8a68bc25fb973c471e61aaeb76a015">prefix_free</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p);
<a name="l00366"></a>00366 }
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 <span class="comment">/* If given string is valid return pin6 else return NULL */</span>
<a name="l00369"></a>00369 <span class="keywordtype">int</span>
<a name="l00370"></a>00370 str2prefix_ipv6 (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>, <span class="keyword">struct</span> prefix_ipv6 *p)
<a name="l00371"></a>00371 {
<a name="l00372"></a>00372   <span class="keywordtype">char</span> *pnt;
<a name="l00373"></a>00373   <span class="keywordtype">char</span> *cp;
<a name="l00374"></a>00374   <span class="keywordtype">int</span> ret;
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   pnt = strchr (str, <span class="charliteral">&#39;/&#39;</span>);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378   <span class="comment">/* If string doesn&#39;t contain `/&#39; treat it as host route. */</span>
<a name="l00379"></a>00379   <span class="keywordflow">if</span> (pnt == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00380"></a>00380     {
<a name="l00381"></a>00381       ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, str, &amp;p-&gt;prefix);
<a name="l00382"></a>00382       <span class="keywordflow">if</span> (ret == 0)
<a name="l00383"></a>00383     <span class="keywordflow">return</span> 0;
<a name="l00384"></a>00384       p-&gt;prefixlen = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386   <span class="keywordflow">else</span> 
<a name="l00387"></a>00387     {
<a name="l00388"></a>00388       <span class="keywordtype">int</span> plen;
<a name="l00389"></a>00389 
<a name="l00390"></a>00390       cp = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (0, (pnt - str) + 1);
<a name="l00391"></a>00391       strncpy (cp, str, pnt - str);
<a name="l00392"></a>00392       *(cp + (pnt - <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00393"></a>00393       ret = <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, cp, &amp;p-&gt;prefix);
<a name="l00394"></a>00394       free (cp);
<a name="l00395"></a>00395       <span class="keywordflow">if</span> (ret == 0)
<a name="l00396"></a>00396     <span class="keywordflow">return</span> 0;
<a name="l00397"></a>00397       plen = (u_char) atoi (++pnt);
<a name="l00398"></a>00398       <span class="keywordflow">if</span> (plen &gt; 128)
<a name="l00399"></a>00399     <span class="keywordflow">return</span> 0;
<a name="l00400"></a>00400       p-&gt;prefixlen = plen;
<a name="l00401"></a>00401     }
<a name="l00402"></a>00402   p-&gt;family = AF_INET6;
<a name="l00403"></a>00403 
<a name="l00404"></a>00404   <span class="keywordflow">return</span> ret;
<a name="l00405"></a>00405 }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 <span class="comment">/* Convert struct in6_addr netmask into integer.</span>
<a name="l00408"></a>00408 <span class="comment"> * FIXME return u_char as ip_maskleni() does. */</span>
<a name="l00409"></a>00409 <span class="keywordtype">int</span>
<a name="l00410"></a>00410 ip6_masklen (<span class="keyword">struct</span> in6_addr netmask)
<a name="l00411"></a>00411 {
<a name="l00412"></a>00412   <span class="keywordtype">int</span> len = 0;
<a name="l00413"></a>00413   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00414"></a>00414   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pnt;
<a name="l00415"></a>00415   
<a name="l00416"></a>00416   pnt = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) &amp; netmask;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   <span class="keywordflow">while</span> ((*pnt == 0xff) &amp;&amp; len &lt; 128) 
<a name="l00419"></a>00419     {
<a name="l00420"></a>00420       len += 8;
<a name="l00421"></a>00421       pnt++;
<a name="l00422"></a>00422     } 
<a name="l00423"></a>00423   
<a name="l00424"></a>00424   <span class="keywordflow">if</span> (len &lt; 128) 
<a name="l00425"></a>00425     {
<a name="l00426"></a>00426       val = *pnt;
<a name="l00427"></a>00427       <span class="keywordflow">while</span> (val) 
<a name="l00428"></a>00428     {
<a name="l00429"></a>00429       len++;
<a name="l00430"></a>00430       val &lt;&lt;= 1;
<a name="l00431"></a>00431     }
<a name="l00432"></a>00432     }
<a name="l00433"></a>00433   <span class="keywordflow">return</span> len;
<a name="l00434"></a>00434 }
<a name="l00435"></a>00435 
<a name="l00436"></a>00436 <span class="keywordtype">void</span>
<a name="l00437"></a>00437 masklen2ip6 (<span class="keywordtype">int</span> masklen, <span class="keyword">struct</span> in6_addr *netmask)
<a name="l00438"></a>00438 {
<a name="l00439"></a>00439   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pnt;
<a name="l00440"></a>00440   <span class="keywordtype">int</span> bit;
<a name="l00441"></a>00441   <span class="keywordtype">int</span> offset;
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   memset (netmask, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in6_addr));
<a name="l00444"></a>00444   pnt = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) netmask;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446   offset = masklen / 8;
<a name="l00447"></a>00447   bit = masklen % 8;
<a name="l00448"></a>00448 
<a name="l00449"></a>00449   <span class="keywordflow">while</span> (offset--)
<a name="l00450"></a>00450     *pnt++ = 0xff;
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (bit)
<a name="l00453"></a>00453     *pnt = <a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[bit];
<a name="l00454"></a>00454 }
<a name="l00455"></a>00455 
<a name="l00456"></a>00456 <span class="keywordtype">void</span>
<a name="l00457"></a>00457 apply_mask_ipv6 (<span class="keyword">struct</span> prefix_ipv6 *p)
<a name="l00458"></a>00458 {
<a name="l00459"></a>00459   u_char *pnt;
<a name="l00460"></a>00460   <span class="keywordtype">int</span> index;
<a name="l00461"></a>00461   <span class="keywordtype">int</span> offset;
<a name="l00462"></a>00462 
<a name="l00463"></a>00463   index = p-&gt;prefixlen / 8;
<a name="l00464"></a>00464 
<a name="l00465"></a>00465   <span class="keywordflow">if</span> (index &lt; 16)
<a name="l00466"></a>00466     {
<a name="l00467"></a>00467       pnt = (u_char *) &amp;p-&gt;prefix;
<a name="l00468"></a>00468       offset = p-&gt;prefixlen % 8;
<a name="l00469"></a>00469 
<a name="l00470"></a>00470       pnt[index] &amp;= <a class="code" href="prefix_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[offset];
<a name="l00471"></a>00471       index++;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       while (index &lt; 16)
<a name="l00474"></a>00474     pnt[index++] = 0;
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00478"></a>00478 <span class="keywordtype">void</span>
<a name="l00479"></a>00479 str2in6_addr (<span class="keyword">const</span> <span class="keywordtype">char</span> *str, <span class="keyword">struct</span> in6_addr *addr)
<a name="l00480"></a>00480 {
<a name="l00481"></a>00481   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00482"></a>00482   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>;
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="comment">/* %x must point to unsinged int */</span>
<a name="l00485"></a>00485   <span class="keywordflow">for</span> (i = 0; i &lt; 16; i++)
<a name="l00486"></a>00486     {
<a name="l00487"></a>00487       sscanf (str + (i * 2), <span class="stringliteral">&quot;%02x&quot;</span>, &amp;x);
<a name="l00488"></a>00488       addr-&gt;s6_addr[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = x &amp; 0xff;
<a name="l00489"></a>00489     }
<a name="l00490"></a>00490 }
<a name="l00491"></a>00491 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00492"></a>00492 
<a name="l00493"></a>00493 <span class="keywordtype">void</span>
<a name="l00494"></a><a class="code" href="prefix_8h.html#af532305eb46d25c6e903f8ba0c70a974">00494</a> <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00495"></a>00495 {
<a name="l00496"></a>00496   <span class="keywordflow">switch</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>)
<a name="l00497"></a>00497     {
<a name="l00498"></a>00498       <span class="keywordflow">case</span> AF_INET:
<a name="l00499"></a>00499         <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)p);
<a name="l00500"></a>00500         <span class="keywordflow">break</span>;
<a name="l00501"></a>00501 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00502"></a>00502 <span class="preprocessor"></span>      <span class="keywordflow">case</span> AF_INET6:
<a name="l00503"></a>00503         apply_mask_ipv6 ((<span class="keyword">struct</span> prefix_ipv6 *)p);
<a name="l00504"></a>00504         <span class="keywordflow">break</span>;
<a name="l00505"></a>00505 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00506"></a>00506       <span class="keywordflow">default</span>:
<a name="l00507"></a>00507         <span class="keywordflow">break</span>;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509   <span class="keywordflow">return</span>;
<a name="l00510"></a>00510 }
<a name="l00511"></a>00511 
<a name="l00512"></a>00512 <span class="comment">/* Utility function of convert between struct prefix &lt;=&gt; union sockunion.</span>
<a name="l00513"></a>00513 <span class="comment"> * FIXME This function isn&#39;t used anywhere. */</span>
<a name="l00514"></a>00514 <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *
<a name="l00515"></a><a class="code" href="prefix_8h.html#aec236431a98092b2c21d0ff8501e29ff">00515</a> <a class="code" href="prefix_8c.html#aec236431a98092b2c21d0ff8501e29ff">sockunion2prefix</a> (<span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *dest,
<a name="l00516"></a>00516           <span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *mask)
<a name="l00517"></a>00517 {
<a name="l00518"></a>00518   <span class="keywordflow">if</span> (dest-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00519"></a>00519     {
<a name="l00520"></a>00520       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00521"></a>00521 
<a name="l00522"></a>00522       p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
<a name="l00523"></a>00523       p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00524"></a>00524       p-&gt;prefix = dest-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
<a name="l00525"></a>00525       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
<a name="l00526"></a>00526       <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00529"></a>00529 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (dest-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00530"></a>00530     {
<a name="l00531"></a>00531       <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00532"></a>00532 
<a name="l00533"></a>00533       p = prefix_ipv6_new ();
<a name="l00534"></a>00534       p-&gt;family = AF_INET6;
<a name="l00535"></a>00535       p-&gt;prefixlen = ip6_masklen (mask-&gt;sin6.sin6_addr);
<a name="l00536"></a>00536       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p-&gt;prefix, &amp;dest-&gt;sin6.sin6_addr, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00537"></a>00537       <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00538"></a>00538     }
<a name="l00539"></a>00539 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00540"></a>00540   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00541"></a>00541 }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">/* Utility function of convert between struct prefix &lt;=&gt; union sockunion. */</span>
<a name="l00544"></a>00544 <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *
<a name="l00545"></a><a class="code" href="prefix_8h.html#a773aca373c0f6aaa9668402ec2fd899c">00545</a> <a class="code" href="prefix_8c.html#a7e9fdfe551fb280a2e9a149a7f742d87">sockunion2hostprefix</a> (<span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l00546"></a>00546 {
<a name="l00547"></a>00547   <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
<a name="l00548"></a>00548     {
<a name="l00549"></a>00549       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00550"></a>00550 
<a name="l00551"></a>00551       p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
<a name="l00552"></a>00552       p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00553"></a>00553       p-&gt;prefix = su-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
<a name="l00554"></a>00554       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00555"></a>00555       <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00556"></a>00556     }
<a name="l00557"></a>00557 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00558"></a>00558 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (su-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
<a name="l00559"></a>00559     {
<a name="l00560"></a>00560       <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562       p = prefix_ipv6_new ();
<a name="l00563"></a>00563       p-&gt;family = AF_INET6;
<a name="l00564"></a>00564       p-&gt;prefixlen = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l00565"></a>00565       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p-&gt;prefix, &amp;su-&gt;sin6.sin6_addr, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00566"></a>00566       <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00569"></a>00569   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00570"></a>00570 }
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="keywordtype">int</span>
<a name="l00573"></a><a class="code" href="prefix_8h.html#a26faede4fa0254eb3ae3f4ecda227b11">00573</a> <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00574"></a>00574 {
<a name="l00575"></a>00575   <span class="keywordflow">switch</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>) 
<a name="l00576"></a>00576     {
<a name="l00577"></a>00577     <span class="keywordflow">case</span> AF_INET:
<a name="l00578"></a>00578       <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">IPV4_MAX_BYTELEN</a>;
<a name="l00579"></a>00579       <span class="keywordflow">break</span>;
<a name="l00580"></a>00580 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00581"></a>00581 <span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
<a name="l00582"></a>00582       <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<a name="l00583"></a>00583       <span class="keywordflow">break</span>;
<a name="l00584"></a>00584 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00585"></a>00585     }
<a name="l00586"></a>00586   <span class="keywordflow">return</span> 0;
<a name="l00587"></a>00587 }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589 <span class="comment">/* Generic function for conversion string to struct prefix. */</span>
<a name="l00590"></a>00590 <span class="keywordtype">int</span>
<a name="l00591"></a><a class="code" href="prefix_8h.html#afb255a2fd6bd0123b3c28d84edc06b65">00591</a> <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *str, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00592"></a>00592 {
<a name="l00593"></a>00593   <span class="keywordtype">int</span> ret;
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   <span class="comment">/* First we try to convert string to struct prefix_ipv4. */</span>
<a name="l00596"></a>00596   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (str, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) p);
<a name="l00597"></a>00597   <span class="keywordflow">if</span> (ret)
<a name="l00598"></a>00598     <span class="keywordflow">return</span> ret;
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>  <span class="comment">/* Next we try to convert string to struct prefix_ipv6. */</span>
<a name="l00602"></a>00602   ret = str2prefix_ipv6 (str, (<span class="keyword">struct</span> prefix_ipv6 *) p);
<a name="l00603"></a>00603   <span class="keywordflow">if</span> (ret)
<a name="l00604"></a>00604     <span class="keywordflow">return</span> ret;
<a name="l00605"></a>00605 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00606"></a>00606 
<a name="l00607"></a>00607   <span class="keywordflow">return</span> 0;
<a name="l00608"></a>00608 }
<a name="l00609"></a>00609 
<a name="l00610"></a>00610 <span class="keywordtype">int</span>
<a name="l00611"></a><a class="code" href="prefix_8h.html#ad3a0083f4d69cb282c34cfe391ab64de">00611</a> <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p, <span class="keywordtype">char</span> *str, <span class="keywordtype">int</span> size)
<a name="l00612"></a>00612 {
<a name="l00613"></a>00613   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00614"></a>00614 
<a name="l00615"></a>00615   <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ);
<a name="l00616"></a>00616   <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (str, size, <span class="stringliteral">&quot;%s/%d&quot;</span>, buf, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00617"></a>00617   <span class="keywordflow">return</span> 0;
<a name="l00618"></a>00618 }
<a name="l00619"></a>00619 
<a name="l00620"></a>00620 <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *
<a name="l00621"></a><a class="code" href="prefix_8h.html#aa7b687cc910573f9048db1419c65cf71">00621</a> <a class="code" href="prefix_8c.html#a334dfe0b68e0de68379895a8ff3057e7">prefix_new</a> ()
<a name="l00622"></a>00622 {
<a name="l00623"></a>00623   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   p = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba00593e6e9d5a4e7185791c7a301cc53a">MTYPE_PREFIX</a>, <span class="keyword">sizeof</span> *p);
<a name="l00626"></a>00626   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00627"></a>00627 }
<a name="l00628"></a>00628 
<a name="l00629"></a>00629 <span class="comment">/* Free prefix structure. */</span>
<a name="l00630"></a>00630 <span class="keywordtype">void</span>
<a name="l00631"></a><a class="code" href="prefix_8h.html#a848b0f4b9eeeef6205405bc7b52f4cd8">00631</a> <a class="code" href="prefix_8c.html#a5d8a68bc25fb973c471e61aaeb76a015">prefix_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00632"></a>00632 {
<a name="l00633"></a>00633   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba00593e6e9d5a4e7185791c7a301cc53a">MTYPE_PREFIX</a>, p);
<a name="l00634"></a>00634 }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636 <span class="comment">/* Utility function.  Check the string only contains digit</span>
<a name="l00637"></a>00637 <span class="comment"> * character.</span>
<a name="l00638"></a>00638 <span class="comment"> * FIXME str.[c|h] would be better place for this function. */</span>
<a name="l00639"></a>00639 <span class="keywordtype">int</span>
<a name="l00640"></a><a class="code" href="prefix_8h.html#ad058c280dde1aa1b8e756472d8f07193">00640</a> <a class="code" href="prefix_8c.html#abca8c8e6c67ae2442bbdbb028e6b11c8">all_digit</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *str)
<a name="l00641"></a>00641 {
<a name="l00642"></a>00642   <span class="keywordflow">for</span> (; *str != <span class="charliteral">&#39;\0&#39;</span>; str++)
<a name="l00643"></a>00643     <span class="keywordflow">if</span> (!isdigit ((<span class="keywordtype">int</span>) *str))
<a name="l00644"></a>00644       <span class="keywordflow">return</span> 0;
<a name="l00645"></a>00645   <span class="keywordflow">return</span> 1;
<a name="l00646"></a>00646 }
<a name="l00647"></a>00647 
<a name="l00648"></a>00648 <span class="comment">/* Utility function to convert ipv4 prefixes to Classful prefixes */</span>
<a name="l00649"></a><a class="code" href="prefix_8h.html#af122f6e798624c0069f2ac2f4777bfde">00649</a> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *p)
<a name="l00650"></a>00650 {
<a name="l00651"></a>00651 
<a name="l00652"></a>00652   u_int32_t destination;
<a name="l00653"></a>00653   
<a name="l00654"></a>00654   destination = ntohl (p-&gt;prefix.s_addr);
<a name="l00655"></a>00655   
<a name="l00656"></a>00656   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> == <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>);
<a name="l00657"></a>00657   <span class="comment">/* do nothing for host routes */</span>
<a name="l00658"></a>00658   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSC (destination)) 
<a name="l00659"></a>00659     {
<a name="l00660"></a>00660       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>=24;
<a name="l00661"></a>00661       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a>(p);
<a name="l00662"></a>00662     }
<a name="l00663"></a>00663   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSB(destination)) 
<a name="l00664"></a>00664     {
<a name="l00665"></a>00665       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>=16;
<a name="l00666"></a>00666       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a>(p);
<a name="l00667"></a>00667     }
<a name="l00668"></a>00668   <span class="keywordflow">else</span> 
<a name="l00669"></a>00669     {
<a name="l00670"></a>00670       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>=8;
<a name="l00671"></a>00671       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a>(p);
<a name="l00672"></a>00672     }
<a name="l00673"></a>00673 }
<a name="l00674"></a>00674 
<a name="l00675"></a>00675 in_addr_t
<a name="l00676"></a><a class="code" href="prefix_8h.html#ab4067c206567a0757076aa3fb9f285ce">00676</a> <a class="code" href="prefix_8c.html#ab4067c206567a0757076aa3fb9f285ce">ipv4_network_addr</a> (in_addr_t hostaddr, <span class="keywordtype">int</span> masklen)
<a name="l00677"></a>00677 {
<a name="l00678"></a>00678   <span class="keyword">struct </span>in_addr mask;
<a name="l00679"></a>00679 
<a name="l00680"></a>00680   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (masklen, &amp;mask);
<a name="l00681"></a>00681   <span class="keywordflow">return</span> hostaddr &amp; mask.s_addr;
<a name="l00682"></a>00682 }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 in_addr_t
<a name="l00685"></a><a class="code" href="prefix_8h.html#a0416c71ab42c828a9ee8ee82ddda6a77">00685</a> <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a> (in_addr_t hostaddr, <span class="keywordtype">int</span> masklen)
<a name="l00686"></a>00686 {
<a name="l00687"></a>00687   <span class="keyword">struct </span>in_addr mask;
<a name="l00688"></a>00688 
<a name="l00689"></a>00689   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (masklen, &amp;mask);
<a name="l00690"></a>00690   <span class="keywordflow">return</span> (masklen != <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>-1) ?
<a name="l00691"></a>00691      <span class="comment">/* normal case */</span>
<a name="l00692"></a>00692          (hostaddr | ~mask.s_addr) :
<a name="l00693"></a>00693      <span class="comment">/* special case for /31 */</span>
<a name="l00694"></a>00694          (hostaddr ^ ~mask.s_addr);
<a name="l00695"></a>00695 }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 <span class="comment">/* Utility function to convert ipv4 netmask to prefixes </span>
<a name="l00698"></a>00698 <span class="comment">   ex.) &quot;1.1.0.0&quot; &quot;255.255.0.0&quot; =&gt; &quot;1.1.0.0/16&quot;</span>
<a name="l00699"></a>00699 <span class="comment">   ex.) &quot;1.0.0.0&quot; NULL =&gt; &quot;1.0.0.0/8&quot;                   */</span>
<a name="l00700"></a>00700 <span class="keywordtype">int</span>
<a name="l00701"></a><a class="code" href="prefix_8h.html#abca4a6936d31222cbb1fa9ea70f792d4">00701</a> <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *net_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *mask_str,
<a name="l00702"></a>00702             <span class="keywordtype">char</span> *prefix_str)
<a name="l00703"></a>00703 {
<a name="l00704"></a>00704   <span class="keyword">struct </span>in_addr network;
<a name="l00705"></a>00705   <span class="keyword">struct </span>in_addr mask;
<a name="l00706"></a>00706   u_char prefixlen;
<a name="l00707"></a>00707   u_int32_t destination;
<a name="l00708"></a>00708   <span class="keywordtype">int</span> ret;
<a name="l00709"></a>00709 
<a name="l00710"></a>00710   ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (net_str, &amp;network);
<a name="l00711"></a>00711   <span class="keywordflow">if</span> (! ret)
<a name="l00712"></a>00712     <span class="keywordflow">return</span> 0;
<a name="l00713"></a>00713 
<a name="l00714"></a>00714   <span class="keywordflow">if</span> (mask_str)
<a name="l00715"></a>00715     {
<a name="l00716"></a>00716       ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (mask_str, &amp;mask);
<a name="l00717"></a>00717       <span class="keywordflow">if</span> (! ret)
<a name="l00718"></a>00718         <span class="keywordflow">return</span> 0;
<a name="l00719"></a>00719 
<a name="l00720"></a>00720       prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask);
<a name="l00721"></a>00721     }
<a name="l00722"></a>00722   <span class="keywordflow">else</span> 
<a name="l00723"></a>00723     {
<a name="l00724"></a>00724       destination = ntohl (network.s_addr);
<a name="l00725"></a>00725 
<a name="l00726"></a>00726       <span class="keywordflow">if</span> (network.s_addr == 0)
<a name="l00727"></a>00727     prefixlen = 0;
<a name="l00728"></a>00728       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSC (destination))
<a name="l00729"></a>00729     prefixlen = 24;
<a name="l00730"></a>00730       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSB (destination))
<a name="l00731"></a>00731     prefixlen = 16;
<a name="l00732"></a>00732       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSA (destination))
<a name="l00733"></a>00733     prefixlen = 8;
<a name="l00734"></a>00734       <span class="keywordflow">else</span>
<a name="l00735"></a>00735     <span class="keywordflow">return</span> 0;
<a name="l00736"></a>00736     }
<a name="l00737"></a>00737 
<a name="l00738"></a>00738   sprintf (prefix_str, <span class="stringliteral">&quot;%s/%d&quot;</span>, net_str, prefixlen);
<a name="l00739"></a>00739 
<a name="l00740"></a>00740   <span class="keywordflow">return</span> 1;
<a name="l00741"></a>00741 }
<a name="l00742"></a>00742 
<a name="l00743"></a>00743 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00744"></a>00744 <span class="preprocessor"></span><span class="comment">/* Utility function for making IPv6 address string. */</span>
<a name="l00745"></a>00745 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00746"></a>00746 inet6_ntoa (<span class="keyword">struct</span> in6_addr addr)
<a name="l00747"></a>00747 {
<a name="l00748"></a>00748   <span class="keyword">static</span> <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;addr, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
<a name="l00751"></a>00751   <span class="keywordflow">return</span> buf;
<a name="l00752"></a>00752 }
<a name="l00753"></a>00753 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="prefix_8c.html">prefix.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
