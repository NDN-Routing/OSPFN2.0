<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/thread.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('thread_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/thread.c</div>  </div>
</div>
<div class="contents">
<a href="thread_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Thread management routine</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1998, 2000 Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/* #define DEBUG */</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="sigevent_8h.html">sigevent.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/* Recent absolute time of day */</span>
<a name="l00034"></a><a class="code" href="thread_8h.html#a9a54ae2e02ed1087c32ce72620a940c8">00034</a> <span class="keyword">struct </span>timeval <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
<a name="l00035"></a><a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">00035</a> <span class="keyword">static</span> <span class="keyword">struct </span>timeval <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a>;
<a name="l00036"></a>00036 <span class="comment">/* Relative time, since startup */</span>
<a name="l00037"></a><a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">00037</a> <span class="keyword">static</span> <span class="keyword">struct </span>timeval <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;
<a name="l00038"></a><a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">00038</a> <span class="keyword">static</span> <span class="keyword">struct </span>timeval <a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a>;
<a name="l00039"></a>00039 <span class="comment">/* init flag */</span>
<a name="l00040"></a><a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">00040</a> <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">00042</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="thread_8c.html#a1d43d0f6cd528b5623ce986867eb8c39">cpu_record</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* Struct timeval&#39;s tv_usec one second value.  */</span>
<a name="l00045"></a><a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">00045</a> <span class="preprocessor">#define TIMER_SECOND_MICRO 1000000L</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="comment">/* Adjust so that tv_usec is in the range [0,TIMER_SECOND_MICRO).</span>
<a name="l00048"></a>00048 <span class="comment">   And change negative values to 0. */</span>
<a name="l00049"></a>00049 <span class="keyword">static</span> <span class="keyword">struct </span>timeval
<a name="l00050"></a><a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">00050</a> <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (struct timeval <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>)
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052   <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &gt;= <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>)
<a name="l00053"></a>00053     {
<a name="l00054"></a>00054       <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec -= <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>;
<a name="l00055"></a>00055       <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec++;
<a name="l00056"></a>00056     }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &lt; 0)
<a name="l00059"></a>00059     {
<a name="l00060"></a>00060       <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec += <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>;
<a name="l00061"></a>00061       <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec--;
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="keywordflow">if</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec &lt; 0)
<a name="l00065"></a>00065       <span class="comment">/* Change negative timeouts to 0. */</span>
<a name="l00066"></a>00066       <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec = 0;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>;
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="keyword">static</span> <span class="keyword">struct </span>timeval
<a name="l00072"></a><a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">00072</a> <a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (struct timeval <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>, struct timeval <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="keyword">struct </span>timeval ret;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   ret.tv_usec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec;
<a name="l00077"></a>00077   ret.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (ret);
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">static</span> <span class="keywordtype">long</span>
<a name="l00083"></a><a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">00083</a> <a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (<span class="keyword">struct</span> timeval a, <span class="keyword">struct</span> timeval b)
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085   <span class="keywordflow">return</span> (a.tv_sec == b.tv_sec
<a name="l00086"></a>00086       ? a.tv_usec - b.tv_usec : a.tv_sec - b.tv_sec);
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00090"></a><a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">00090</a> <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (<span class="keyword">struct</span> timeval a, <span class="keyword">struct</span> timeval b)
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092   <span class="keywordflow">return</span> (((a.tv_sec - b.tv_sec) * <a class="code" href="thread_8c.html#a4a98ade79f532e91536ff397abdd2298">TIMER_SECOND_MICRO</a>)
<a name="l00093"></a>00093       + (a.tv_usec - b.tv_usec));
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="preprocessor">#ifndef HAVE_CLOCK_MONOTONIC</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00098"></a><a class="code" href="thread_8c.html#a1319aaaefbf9495c89fbab6897c658d9">00098</a> <a class="code" href="thread_8c.html#a1319aaaefbf9495c89fbab6897c658d9">quagga_gettimeofday_relative_adjust</a> (<span class="keywordtype">void</span>)
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100   <span class="keyword">struct </span>timeval diff;
<a name="l00101"></a>00101   <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a>) &lt; 0)
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103       <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec++;
<a name="l00104"></a>00104       <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec = 0;
<a name="l00105"></a>00105     }
<a name="l00106"></a>00106   <span class="keywordflow">else</span>
<a name="l00107"></a>00107     {
<a name="l00108"></a>00108       diff = <a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a>);
<a name="l00109"></a>00109       <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec += diff.tv_sec;
<a name="l00110"></a>00110       <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec += diff.tv_usec;
<a name="l00111"></a>00111       <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a> = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113   <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a> = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 <span class="preprocessor">#endif </span><span class="comment">/* !HAVE_CLOCK_MONOTONIC */</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">/* gettimeofday wrapper, to keep recent_time updated */</span>
<a name="l00118"></a>00118 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00119"></a><a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">00119</a> <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (<span class="keyword">struct</span> timeval *tv)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <span class="keywordtype">int</span> ret;
<a name="l00122"></a>00122   
<a name="l00123"></a>00123   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (tv);
<a name="l00124"></a>00124   
<a name="l00125"></a>00125   <span class="keywordflow">if</span> (!(ret = gettimeofday (&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)))
<a name="l00126"></a>00126     {
<a name="l00127"></a>00127       <span class="comment">/* init... */</span>
<a name="l00128"></a>00128       <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a>)
<a name="l00129"></a>00129         {
<a name="l00130"></a>00130           <a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a> = <a class="code" href="thread_8c.html#a6d7ee2ed7b87f5dc8bf0ae35869aa431">last_recent_time</a> = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
<a name="l00131"></a>00131           <a class="code" href="thread_8c.html#a9cf50498bdcd65b26e5d568f73afc2e7">timers_inited</a> = 1;
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133       <span class="comment">/* avoid copy if user passed recent_time pointer.. */</span>
<a name="l00134"></a>00134       <span class="keywordflow">if</span> (tv != &amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>)
<a name="l00135"></a>00135         *tv = <a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>;
<a name="l00136"></a>00136       <span class="keywordflow">return</span> 0;
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138   <span class="keywordflow">return</span> ret;
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00142"></a><a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">00142</a> <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<span class="keyword">struct</span> timeval *tv)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keywordtype">int</span> ret;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="preprocessor">#ifdef HAVE_CLOCK_MONOTONIC</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>  {
<a name="l00148"></a>00148     <span class="keyword">struct </span>timespec tp;
<a name="l00149"></a>00149     <span class="keywordflow">if</span> (!(ret = clock_gettime (CLOCK_MONOTONIC, &amp;tp)))
<a name="l00150"></a>00150       {
<a name="l00151"></a>00151         <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec = tp.tv_sec;
<a name="l00152"></a>00152         <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec = tp.tv_nsec / 1000;
<a name="l00153"></a>00153       }
<a name="l00154"></a>00154   }
<a name="l00155"></a>00155 <span class="preprocessor">#else </span><span class="comment">/* !HAVE_CLOCK_MONOTONIC */</span>
<a name="l00156"></a>00156   <span class="keywordflow">if</span> (!(ret = <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>)))
<a name="l00157"></a>00157     <a class="code" href="thread_8c.html#a1319aaaefbf9495c89fbab6897c658d9">quagga_gettimeofday_relative_adjust</a>();
<a name="l00158"></a>00158 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_CLOCK_MONOTONIC */</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160   <span class="keywordflow">if</span> (tv)
<a name="l00161"></a>00161     *tv = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   <span class="keywordflow">return</span> ret;
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="comment">/* Get absolute time stamp, but in terms of the internal timer</span>
<a name="l00167"></a>00167 <span class="comment"> * Could be wrong, but at least won&#39;t go back.</span>
<a name="l00168"></a>00168 <span class="comment"> */</span>
<a name="l00169"></a>00169 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00170"></a><a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">00170</a> <a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (<span class="keyword">struct</span> timeval *tv)
<a name="l00171"></a>00171 {
<a name="l00172"></a>00172   *tv = <a class="code" href="thread_8c.html#aebf7ed8781c4df73b58e4fa7a564b1da">relative_time_base</a>;
<a name="l00173"></a>00173   tv-&gt;tv_sec += <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec;
<a name="l00174"></a>00174   tv-&gt;tv_usec += <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec;
<a name="l00175"></a>00175   *tv = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a> (*tv);
<a name="l00176"></a>00176 }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="comment">/* Exported Quagga timestamp function.</span>
<a name="l00179"></a>00179 <span class="comment"> * Modelled on POSIX clock_gettime.</span>
<a name="l00180"></a>00180 <span class="comment"> */</span>
<a name="l00181"></a>00181 <span class="keywordtype">int</span>
<a name="l00182"></a><a class="code" href="thread_8h.html#a7046ff49f5ca0b750a6d5c935bc5de58">00182</a> <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<span class="keyword">enum</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33">quagga_clkid</a> clkid, <span class="keyword">struct</span> timeval *tv)
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184   <span class="keywordflow">switch</span> (clkid)
<a name="l00185"></a>00185     {
<a name="l00186"></a>00186       <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a67f083bc4380ca6005b181636ccfdb45">QUAGGA_CLK_REALTIME</a>:
<a name="l00187"></a>00187         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a> (tv);
<a name="l00188"></a>00188       <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>:
<a name="l00189"></a>00189         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (tv);
<a name="l00190"></a>00190       <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a85be371def155525e04e8bf87dc9e8c5">QUAGGA_CLK_REALTIME_STABILISED</a>:
<a name="l00191"></a>00191         <a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (tv);
<a name="l00192"></a>00192         <span class="keywordflow">return</span> 0;
<a name="l00193"></a>00193       <span class="keywordflow">default</span>:
<a name="l00194"></a>00194         errno = EINVAL;
<a name="l00195"></a>00195         <span class="keywordflow">return</span> -1;
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197 }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="comment">/* time_t value in terms of stabilised absolute time. </span>
<a name="l00200"></a>00200 <span class="comment"> * replacement for POSIX time()</span>
<a name="l00201"></a>00201 <span class="comment"> */</span>
<a name="l00202"></a>00202 time_t
<a name="l00203"></a><a class="code" href="thread_8h.html#a351c4c3fda17ce006c119a3cda49aa37">00203</a> <a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (time_t *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205   <span class="keyword">struct </span>timeval tv;
<a name="l00206"></a>00206   <a class="code" href="thread_8c.html#a7ca664cce78e66607cdcfebaf94ab986">quagga_real_stabilised</a> (&amp;tv);
<a name="l00207"></a>00207   <span class="keywordflow">if</span> (t)
<a name="l00208"></a>00208     *t = tv.tv_sec;
<a name="l00209"></a>00209   <span class="keywordflow">return</span> tv.tv_sec;
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">/* Public export of recent_relative_time by value */</span>
<a name="l00213"></a>00213 <span class="keyword">struct </span>timeval
<a name="l00214"></a><a class="code" href="thread_8h.html#a010d58e49a3c74ae856d5cd111f7eb62">00214</a> <a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (void)
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00220"></a><a class="code" href="thread_8c.html#a1fadceaba2d45cf9cf8430a6bea93a33">00220</a> <a class="code" href="thread_8c.html#a1fadceaba2d45cf9cf8430a6bea93a33">cpu_record_hash_key</a> (<span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *a)
<a name="l00221"></a>00221 {
<a name="l00222"></a>00222   <span class="keywordflow">return</span> (uintptr_t) a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
<a name="l00223"></a>00223 }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="keyword">static</span> <span class="keywordtype">int</span> 
<a name="l00226"></a><a class="code" href="thread_8c.html#a87716e67cf77adf4ff6aa44fa631719b">00226</a> <a class="code" href="thread_8c.html#a87716e67cf77adf4ff6aa44fa631719b">cpu_record_hash_cmp</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *a,
<a name="l00227"></a>00227              <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *b)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229   <span class="keywordflow">return</span> a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a> == b-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 <span class="keyword">static</span> <span class="keywordtype">void</span> *
<a name="l00233"></a><a class="code" href="thread_8c.html#a71b5dc1d90fa10bb18e354a8be3a1b6c">00233</a> <a class="code" href="thread_8c.html#a71b5dc1d90fa10bb18e354a8be3a1b6c">cpu_record_hash_alloc</a> (<span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *a)
<a name="l00234"></a>00234 {
<a name="l00235"></a>00235   <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *<span class="keyword">new</span>;
<a name="l00236"></a>00236   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0d23653ef6da8574a9b65f0719483548">MTYPE_THREAD_STATS</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a>));
<a name="l00237"></a>00237   <span class="keyword">new</span>-&gt;func = a-&gt;<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a>;
<a name="l00238"></a>00238   <span class="keyword">new</span>-&gt;funcname = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>);
<a name="l00239"></a>00239   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00243"></a><a class="code" href="thread_8c.html#a90a7bc07dba1edf14f35aa4d2587f2cd">00243</a> <a class="code" href="thread_8c.html#a90a7bc07dba1edf14f35aa4d2587f2cd">cpu_record_hash_free</a> (<span class="keywordtype">void</span> *a)
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245   <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *hist = a;
<a name="l00246"></a>00246  
<a name="l00247"></a>00247   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, hist-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>);
<a name="l00248"></a>00248   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0d23653ef6da8574a9b65f0719483548">MTYPE_THREAD_STATS</a>, hist);
<a name="l00249"></a>00249 }
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> 
<a name="l00252"></a><a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">00252</a> <a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a>(<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a>* <a class="code" href="structvty.html">vty</a>,
<a name="l00253"></a>00253                <span class="keyword">struct</span> <a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *a)
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%7ld.%03ld %9d %8ld %9ld %8ld %9ld&quot;</span>,
<a name="l00257"></a>00257       a-&gt;cpu.total/1000, a-&gt;cpu.total%1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>,
<a name="l00258"></a>00258       a-&gt;cpu.total/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;cpu.max,
<a name="l00259"></a>00259       a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>);
<a name="l00260"></a>00260 <span class="preprocessor">#else</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%7ld.%03ld %9d %8ld %9ld&quot;</span>,
<a name="l00262"></a>00262       a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>%1000, a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>,
<a name="l00263"></a>00263       a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>/a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>, a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>);
<a name="l00264"></a>00264 <span class="preprocessor">#endif</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; %c%c%c%c%c%c %s%s&quot;</span>,
<a name="l00266"></a>00266       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>) ? <span class="charliteral">&#39;R&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
<a name="l00267"></a>00267       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>) ? <span class="charliteral">&#39;W&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
<a name="l00268"></a>00268       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>) ? <span class="charliteral">&#39;T&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
<a name="l00269"></a>00269       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>) ? <span class="charliteral">&#39;E&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
<a name="l00270"></a>00270       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>) ? <span class="charliteral">&#39;X&#39;</span>:<span class="charliteral">&#39; &#39;</span>,
<a name="l00271"></a>00271       a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; (1 &lt;&lt; <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>) ? <span class="charliteral">&#39;B&#39;</span> : <span class="charliteral">&#39; &#39;</span>,
<a name="l00272"></a>00272       a-&gt;<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00276"></a><a class="code" href="thread_8c.html#a3c0df4b8c320c5c2fc7c1b36fc32e165">00276</a> <a class="code" href="thread_8c.html#a3c0df4b8c320c5c2fc7c1b36fc32e165">cpu_record_hash_print</a>(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *bucket, 
<a name="l00277"></a>00277               <span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[])
<a name="l00278"></a>00278 {
<a name="l00279"></a>00279   <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *totals = args[0];
<a name="l00280"></a>00280   <span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a> = args[1];
<a name="l00281"></a>00281   <a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> *<a class="code" href="structfilter.html">filter</a> = args[2];
<a name="l00282"></a>00282   <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> *<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a> = bucket-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00283"></a>00283   
<a name="l00284"></a>00284   a = bucket-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00285"></a>00285   <span class="keywordflow">if</span> ( !(a-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> &amp; *filter) )
<a name="l00286"></a>00286        <span class="keywordflow">return</span>;
<a name="l00287"></a>00287   <a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a>(vty,a);
<a name="l00288"></a>00288   totals-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a> += a-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>;
<a name="l00289"></a>00289   totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a> += a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a>;
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> &lt; a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>)
<a name="l00291"></a>00291     totals-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> = a-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a>;
<a name="l00292"></a>00292 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span>  totals-&gt;cpu.total += a-&gt;cpu.total;
<a name="l00294"></a>00294   <span class="keywordflow">if</span> (totals-&gt;cpu.max &lt; a-&gt;cpu.max)
<a name="l00295"></a>00295     totals-&gt;cpu.max = a-&gt;cpu.max;
<a name="l00296"></a>00296 <span class="preprocessor">#endif</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span>}
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00300"></a><a class="code" href="thread_8c.html#ac4a4bad105f2c8e0e2ddbb829623e63c">00300</a> <a class="code" href="thread_8c.html#ac4a4bad105f2c8e0e2ddbb829623e63c">cpu_record_print</a>(<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> <a class="code" href="structfilter.html">filter</a>)
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302   <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> tmp;
<a name="l00303"></a>00303   <span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[3] = {&amp;tmp, <a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>, &amp;filter};
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   memset(&amp;tmp, 0, <span class="keyword">sizeof</span> tmp);
<a name="l00306"></a>00306   tmp.<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a> = <span class="stringliteral">&quot;TOTAL&quot;</span>;
<a name="l00307"></a>00307   tmp.<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> = filter;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l00310"></a>00310 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;%21s %18s %18s%s&quot;</span>,
<a name="l00311"></a>00311       <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;CPU (user+system):&quot;</span>, <span class="stringliteral">&quot;Real (wall-clock):&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00312"></a>00312 <span class="preprocessor">#endif</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;Runtime(ms)   Invoked Avg uSec Max uSecs&quot;</span>);
<a name="l00314"></a>00314 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l00315"></a>00315 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; Avg uSec Max uSecs&quot;</span>);
<a name="l00316"></a>00316 <span class="preprocessor">#endif</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span>  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot;  Type  Thread%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00318"></a>00318   <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a>(cpu_record,
<a name="l00319"></a>00319            (<span class="keywordtype">void</span>(*)(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a>*,<span class="keywordtype">void</span>*))<a class="code" href="thread_8c.html#a3c0df4b8c320c5c2fc7c1b36fc32e165">cpu_record_hash_print</a>,
<a name="l00320"></a>00320            args);
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <span class="keywordflow">if</span> (tmp.<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a> &gt; 0)
<a name="l00323"></a>00323     <a class="code" href="thread_8c.html#a450c10ffe183712017ae34ccc8523c1d">vty_out_cpu_thread_history</a>(vty, &amp;tmp);
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 
<a name="l00326"></a><a class="code" href="thread_8c.html#a0411f639ba1a2c64ff00fca1da16fff5">00326</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a>(show_thread_cpu,
<a name="l00327"></a>00327       show_thread_cpu_cmd,
<a name="l00328"></a>00328       <span class="stringliteral">&quot;show thread cpu [FILTER]&quot;</span>,
<a name="l00329"></a>00329       <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00330"></a>00330       <span class="stringliteral">&quot;Thread information\n&quot;</span>
<a name="l00331"></a>00331       <span class="stringliteral">&quot;Thread CPU usage\n&quot;</span>
<a name="l00332"></a>00332       <span class="stringliteral">&quot;Display filter (rwtexb)\n&quot;</span>)
<a name="l00333"></a>00333 {
<a name="l00334"></a>00334   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0;
<a name="l00335"></a>00335   <a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a> <a class="code" href="structfilter.html">filter</a> = (<a class="code" href="thread_8h.html#a4389ae97209574331fc146cf4c4804a0">thread_type</a>) -1U;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="keywordflow">if</span> (argc &gt; 0)
<a name="l00338"></a>00338     {
<a name="l00339"></a>00339       filter = 0;
<a name="l00340"></a>00340       <span class="keywordflow">while</span> (argv[0][i] != <span class="charliteral">&#39;\0&#39;</span>)
<a name="l00341"></a>00341     {
<a name="l00342"></a>00342       <span class="keywordflow">switch</span> ( argv[0][i] )
<a name="l00343"></a>00343         {
<a name="l00344"></a>00344         <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:
<a name="l00345"></a>00345         <span class="keywordflow">case</span> <span class="charliteral">&#39;R&#39;</span>:
<a name="l00346"></a>00346           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>);
<a name="l00347"></a>00347           <span class="keywordflow">break</span>;
<a name="l00348"></a>00348         <span class="keywordflow">case</span> <span class="charliteral">&#39;w&#39;</span>:
<a name="l00349"></a>00349         <span class="keywordflow">case</span> <span class="charliteral">&#39;W&#39;</span>:
<a name="l00350"></a>00350           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>);
<a name="l00351"></a>00351           <span class="keywordflow">break</span>;
<a name="l00352"></a>00352         <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
<a name="l00353"></a>00353         <span class="keywordflow">case</span> <span class="charliteral">&#39;T&#39;</span>:
<a name="l00354"></a>00354           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>);
<a name="l00355"></a>00355           <span class="keywordflow">break</span>;
<a name="l00356"></a>00356         <span class="keywordflow">case</span> <span class="charliteral">&#39;e&#39;</span>:
<a name="l00357"></a>00357         <span class="keywordflow">case</span> <span class="charliteral">&#39;E&#39;</span>:
<a name="l00358"></a>00358           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>);
<a name="l00359"></a>00359           <span class="keywordflow">break</span>;
<a name="l00360"></a>00360         <span class="keywordflow">case</span> <span class="charliteral">&#39;x&#39;</span>:
<a name="l00361"></a>00361         <span class="keywordflow">case</span> <span class="charliteral">&#39;X&#39;</span>:
<a name="l00362"></a>00362           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>);
<a name="l00363"></a>00363           <span class="keywordflow">break</span>;
<a name="l00364"></a>00364         <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:
<a name="l00365"></a>00365         <span class="keywordflow">case</span> <span class="charliteral">&#39;B&#39;</span>:
<a name="l00366"></a>00366           filter |= (1 &lt;&lt; <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>);
<a name="l00367"></a>00367           <span class="keywordflow">break</span>;
<a name="l00368"></a>00368         <span class="keywordflow">default</span>:
<a name="l00369"></a>00369           <span class="keywordflow">break</span>;
<a name="l00370"></a>00370         }
<a name="l00371"></a>00371       ++<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00372"></a>00372     }
<a name="l00373"></a>00373       <span class="keywordflow">if</span> (filter == 0)
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid filter \&quot;%s\&quot; specified,&quot;</span>
<a name="l00376"></a>00376                   <span class="stringliteral">&quot; must contain at least one of &#39;RWTEXB&#39;%s&quot;</span>,
<a name="l00377"></a>00377           argv[0], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00378"></a>00378       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00379"></a>00379     }
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382   <a class="code" href="thread_8c.html#ac4a4bad105f2c8e0e2ddbb829623e63c">cpu_record_print</a>(<a class="code" href="structvty.html">vty</a>, filter);
<a name="l00383"></a>00383   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00384"></a>00384 }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 <span class="comment">/* List allocation and head/tail print out. */</span>
<a name="l00387"></a>00387 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00388"></a><a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">00388</a> <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>)
<a name="l00389"></a>00389 {
<a name="l00390"></a>00390   printf (<span class="stringliteral">&quot;count [%d] head [%p] tail [%p]\n&quot;</span>,
<a name="l00391"></a>00391       list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>, list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>, list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>);
<a name="l00392"></a>00392 }
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 <span class="comment">/* Debug print for thread_master. */</span>
<a name="l00395"></a><a class="code" href="thread_8c.html#a43c4623c2553d09a59385aabe971d75d">00395</a> <span class="keyword">static</span> <span class="keywordtype">void</span>  <a class="code" href="zebra_8h.html#a9d373a9b65ff25b2db84c07394e1c212">__attribute__</a> ((unused))
<a name="l00396"></a>00396 thread_master_debug (struct <a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>)
<a name="l00397"></a>00397 {
<a name="l00398"></a>00398   printf (<span class="stringliteral">&quot;-----------\n&quot;</span>);
<a name="l00399"></a>00399   printf (<span class="stringliteral">&quot;readlist  : &quot;</span>);
<a name="l00400"></a>00400   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;read);
<a name="l00401"></a>00401   printf (<span class="stringliteral">&quot;writelist : &quot;</span>);
<a name="l00402"></a>00402   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;write);
<a name="l00403"></a>00403   printf (<span class="stringliteral">&quot;timerlist : &quot;</span>);
<a name="l00404"></a>00404   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;timer);
<a name="l00405"></a>00405   printf (<span class="stringliteral">&quot;eventlist : &quot;</span>);
<a name="l00406"></a>00406   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;event);
<a name="l00407"></a>00407   printf (<span class="stringliteral">&quot;unuselist : &quot;</span>);
<a name="l00408"></a>00408   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;unuse);
<a name="l00409"></a>00409   printf (<span class="stringliteral">&quot;bgndlist : &quot;</span>);
<a name="l00410"></a>00410   <a class="code" href="thread_8c.html#ad8115cde4d813f0b66658700e3ba10b4">thread_list_debug</a> (&amp;m-&gt;background);
<a name="l00411"></a>00411   printf (<span class="stringliteral">&quot;total alloc: [%ld]\n&quot;</span>, m-&gt;alloc);
<a name="l00412"></a>00412   printf (<span class="stringliteral">&quot;-----------\n&quot;</span>);
<a name="l00413"></a>00413 }
<a name="l00414"></a>00414 
<a name="l00415"></a>00415 <span class="comment">/* Allocate new thread master.  */</span>
<a name="l00416"></a>00416 <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *
<a name="l00417"></a><a class="code" href="thread_8h.html#a2e57c17fcbd0a0717e8bbcf1d574ae95">00417</a> <a class="code" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ()
<a name="l00418"></a>00418 {
<a name="l00419"></a>00419   <span class="keywordflow">if</span> (cpu_record == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00420"></a>00420     cpu_record 
<a name="l00421"></a>00421       = <a class="code" href="hash_8c.html#a5a114f3e041a28afaf1acfa760728c24">hash_create_size</a> (1011, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> (*) (<span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a1fadceaba2d45cf9cf8430a6bea93a33">cpu_record_hash_key</a>, 
<a name="l00422"></a>00422                           (<span class="keywordtype">int</span> (*) (<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a87716e67cf77adf4ff6aa44fa631719b">cpu_record_hash_cmp</a>);
<a name="l00423"></a>00423     
<a name="l00424"></a>00424   <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *) <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6100532867b009792cd4bcee71cc3a9d">MTYPE_THREAD_MASTER</a>,
<a name="l00425"></a>00425                        <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a>));
<a name="l00426"></a>00426 }
<a name="l00427"></a>00427 
<a name="l00428"></a>00428 <span class="comment">/* Add a new thread to the list.  */</span>
<a name="l00429"></a>00429 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00430"></a><a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">00430</a> <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>, <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00431"></a>00431 {
<a name="l00432"></a>00432   thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00433"></a>00433   thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>;
<a name="l00434"></a>00434   <span class="keywordflow">if</span> (list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>)
<a name="l00435"></a>00435     list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread;
<a name="l00436"></a>00436   <span class="keywordflow">else</span>
<a name="l00437"></a>00437     list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread;
<a name="l00438"></a>00438   list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a> = thread;
<a name="l00439"></a>00439   list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>++;
<a name="l00440"></a>00440 }
<a name="l00441"></a>00441 
<a name="l00442"></a>00442 <span class="comment">/* Add a new thread just before the point.  */</span>
<a name="l00443"></a>00443 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00444"></a><a class="code" href="thread_8c.html#a60553a4df4e88a762c10cca9b7428ada">00444</a> <a class="code" href="thread_8c.html#a60553a4df4e88a762c10cca9b7428ada">thread_list_add_before</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>, 
<a name="l00445"></a>00445             <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *point, 
<a name="l00446"></a>00446             <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00447"></a>00447 {
<a name="l00448"></a>00448   thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = point;
<a name="l00449"></a>00449   thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
<a name="l00450"></a>00450   <span class="keywordflow">if</span> (point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>)
<a name="l00451"></a>00451     point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread;
<a name="l00452"></a>00452   <span class="keywordflow">else</span>
<a name="l00453"></a>00453     list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread;
<a name="l00454"></a>00454   point-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = thread;
<a name="l00455"></a>00455   list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>++;
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458 <span class="comment">/* Delete a thread from the list. */</span>
<a name="l00459"></a>00459 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00460"></a><a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">00460</a> <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>, <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00461"></a>00461 {
<a name="l00462"></a>00462   <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
<a name="l00463"></a>00463     thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
<a name="l00464"></a>00464   <span class="keywordflow">else</span>
<a name="l00465"></a>00465     list-&gt;<a class="code" href="structthread__list.html#a2abce32ec8d176a0c280b7ea3710163c">tail</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>;
<a name="l00466"></a>00466   <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>)
<a name="l00467"></a>00467     thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a>-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00468"></a>00468   <span class="keywordflow">else</span>
<a name="l00469"></a>00469     list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00470"></a>00470   thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> = thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00471"></a>00471   list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>--;
<a name="l00472"></a>00472   <span class="keywordflow">return</span> thread;
<a name="l00473"></a>00473 }
<a name="l00474"></a>00474 
<a name="l00475"></a>00475 <span class="comment">/* Move thread to unuse list. */</span>
<a name="l00476"></a>00476 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00477"></a><a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">00477</a> <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00478"></a>00478 {
<a name="l00479"></a>00479   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; thread != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00480"></a>00480   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00481"></a>00481   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#ab8469f977a471e4332ed1b7018da5777">prev</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00482"></a>00482   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> == <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>);
<a name="l00483"></a>00483   <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>, thread);
<a name="l00484"></a>00484   <span class="comment">/* XXX: Should we deallocate funcname here? */</span>
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487 <span class="comment">/* Free all unused thread. */</span>
<a name="l00488"></a>00488 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00489"></a><a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">00489</a> <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, <span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>)
<a name="l00490"></a>00490 {
<a name="l00491"></a>00491   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00492"></a>00492   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   <span class="keywordflow">for</span> (t = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; t; t = next)
<a name="l00495"></a>00495     {
<a name="l00496"></a>00496       next = t-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00497"></a>00497       <span class="keywordflow">if</span> (t-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00498"></a>00498         <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, t-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
<a name="l00499"></a>00499       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6c39f6b5fde04725a8f8a9b0539cb6b7">MTYPE_THREAD</a>, t);
<a name="l00500"></a>00500       list-&gt;<a class="code" href="structthread__list.html#a5fba7820a5d040fbd1be82eb12f225ff">count</a>--;
<a name="l00501"></a>00501       m-&gt;<a class="code" href="structthread__master.html#a0ab4cf8d3269a6a002532430fb8650ce">alloc</a>--;
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503 }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 <span class="comment">/* Stop thread scheduler. */</span>
<a name="l00506"></a>00506 <span class="keywordtype">void</span>
<a name="l00507"></a><a class="code" href="thread_8h.html#a87595d8b2da182b36abcf3909a50fc33">00507</a> <a class="code" href="thread_8c.html#ab76204bd6666fde15615963cf1321d7a">thread_master_free</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>)
<a name="l00508"></a>00508 {
<a name="l00509"></a>00509   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>);
<a name="l00510"></a>00510   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>);
<a name="l00511"></a>00511   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>);
<a name="l00512"></a>00512   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>);
<a name="l00513"></a>00513   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>);
<a name="l00514"></a>00514   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>);
<a name="l00515"></a>00515   <a class="code" href="thread_8c.html#abced1a0a9a7ebae157bba12a08d3cd9d">thread_list_free</a> (m, &amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>);
<a name="l00516"></a>00516   
<a name="l00517"></a>00517   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6100532867b009792cd4bcee71cc3a9d">MTYPE_THREAD_MASTER</a>, m);
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   <span class="keywordflow">if</span> (cpu_record)
<a name="l00520"></a>00520     {
<a name="l00521"></a>00521       <a class="code" href="hash_8c.html#aec49275a7c4ae924ed351163af53c8c4">hash_clean</a> (cpu_record, <a class="code" href="thread_8c.html#a90a7bc07dba1edf14f35aa4d2587f2cd">cpu_record_hash_free</a>);
<a name="l00522"></a>00522       <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (cpu_record);
<a name="l00523"></a>00523       cpu_record = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00524"></a>00524     }
<a name="l00525"></a>00525 }
<a name="l00526"></a>00526 
<a name="l00527"></a>00527 <span class="comment">/* Thread list is empty or not.  */</span>
<a name="l00528"></a>00528 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span>
<a name="l00529"></a><a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">00529</a> <a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>)
<a name="l00530"></a>00530 {
<a name="l00531"></a>00531   <span class="keywordflow">return</span>  list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a> ? 0 : 1;
<a name="l00532"></a>00532 }
<a name="l00533"></a>00533 
<a name="l00534"></a>00534 <span class="comment">/* Delete top of the list and return it. */</span>
<a name="l00535"></a>00535 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00536"></a><a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">00536</a> <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>)
<a name="l00537"></a>00537 {
<a name="l00538"></a>00538   <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (list))
<a name="l00539"></a>00539     <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>);
<a name="l00540"></a>00540   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00541"></a>00541 }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">/* Return remain time in second. */</span>
<a name="l00544"></a>00544 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00545"></a><a class="code" href="thread_8h.html#ad5d0195ce2891fec58253a5cbc35520e">00545</a> <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00546"></a>00546 {
<a name="l00547"></a>00547   <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00548"></a>00548   
<a name="l00549"></a>00549   <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>.tv_sec - <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec &gt; 0)
<a name="l00550"></a>00550     <span class="keywordflow">return</span> thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>.tv_sec - <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec;
<a name="l00551"></a>00551   <span class="keywordflow">else</span>
<a name="l00552"></a>00552     <span class="keywordflow">return</span> 0;
<a name="l00553"></a>00553 }
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 <span class="comment">/* Trim blankspace and &quot;()&quot;s */</span>
<a name="l00556"></a>00556 <span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00557"></a><a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">00557</a> <a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>) 
<a name="l00558"></a>00558 {
<a name="l00559"></a>00559   <span class="keywordtype">char</span> buff[100];
<a name="l00560"></a>00560   <span class="keywordtype">char</span> tmp, *ret, *e, *<a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a> = buff;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562   strncpy(buff, funcname, <span class="keyword">sizeof</span>(buff));
<a name="l00563"></a>00563   buff[ <span class="keyword">sizeof</span>(buff) -1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00564"></a>00564   e = buff +strlen(buff) -1;
<a name="l00565"></a>00565 
<a name="l00566"></a>00566   <span class="comment">/* Wont work for funcname ==  &quot;Word (explanation)&quot;  */</span>
<a name="l00567"></a>00567 
<a name="l00568"></a>00568   <span class="keywordflow">while</span> (*b == <span class="charliteral">&#39; &#39;</span> || *b == <span class="charliteral">&#39;(&#39;</span>)
<a name="l00569"></a>00569     ++b;
<a name="l00570"></a>00570   <span class="keywordflow">while</span> (*e == <span class="charliteral">&#39; &#39;</span> || *e == <span class="charliteral">&#39;)&#39;</span>)
<a name="l00571"></a>00571     --e;
<a name="l00572"></a>00572   e++;
<a name="l00573"></a>00573 
<a name="l00574"></a>00574   tmp = *e;
<a name="l00575"></a>00575   *e = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00576"></a>00576   ret  = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, b);
<a name="l00577"></a>00577   *e = tmp;
<a name="l00578"></a>00578 
<a name="l00579"></a>00579   <span class="keywordflow">return</span> ret;
<a name="l00580"></a>00580 }
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 <span class="comment">/* Get new thread.  */</span>
<a name="l00583"></a>00583 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00584"></a><a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">00584</a> <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
<a name="l00585"></a>00585         <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00586"></a>00586 {
<a name="l00587"></a>00587   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>))
<a name="l00590"></a>00590     {
<a name="l00591"></a>00591       thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#add37866c456f194a9e44e1e95f8416ae">unuse</a>);
<a name="l00592"></a>00592       <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00593"></a>00593         <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
<a name="l00594"></a>00594     }
<a name="l00595"></a>00595   <span class="keywordflow">else</span>
<a name="l00596"></a>00596     {
<a name="l00597"></a>00597       thread = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6c39f6b5fde04725a8f8a9b0539cb6b7">MTYPE_THREAD</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> thread));
<a name="l00598"></a>00598       m-&gt;<a class="code" href="structthread__master.html#a0ab4cf8d3269a6a002532430fb8650ce">alloc</a>++;
<a name="l00599"></a>00599     }
<a name="l00600"></a>00600   thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00601"></a>00601   thread-&gt;<a class="code" href="structthread.html#ab4c8d35109cfc7c65b19ad049928a60b">add_type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00602"></a>00602   thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a> = <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00603"></a>00603   thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l00604"></a>00604   thread-&gt;<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a> = <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>;
<a name="l00605"></a>00605   
<a name="l00606"></a>00606   thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a> = <a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a>(funcname);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="keywordflow">return</span> thread;
<a name="l00609"></a>00609 }
<a name="l00610"></a>00610 
<a name="l00611"></a>00611 <span class="comment">/* Add new read thread. */</span>
<a name="l00612"></a>00612 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00613"></a><a class="code" href="thread_8h.html#a30a940b047f6a90b8a2bfa9214c17c39">00613</a> <a class="code" href="thread_8c.html#a8041051eacf6bce5743488023bbe18fa">funcname_thread_add_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m, 
<a name="l00614"></a>00614          <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">int</span> <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00615"></a>00615 {
<a name="l00616"></a>00616   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00619"></a>00619 
<a name="l00620"></a>00620   <span class="keywordflow">if</span> (FD_ISSET (fd, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>))
<a name="l00621"></a>00621     {
<a name="l00622"></a>00622       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;There is already read fd [%d]&quot;</span>, fd);
<a name="l00623"></a>00623       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00624"></a>00624     }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626   thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, arg, funcname);
<a name="l00627"></a>00627   FD_SET (fd, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
<a name="l00628"></a>00628   thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a> = <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>;
<a name="l00629"></a>00629   <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>, thread);
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   <span class="keywordflow">return</span> thread;
<a name="l00632"></a>00632 }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634 <span class="comment">/* Add new write thread. */</span>
<a name="l00635"></a>00635 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00636"></a><a class="code" href="thread_8h.html#a188b2de6c009ef3ecf04171c3bde22ea">00636</a> <a class="code" href="thread_8c.html#a145fdb5cee329d701123fb3e4a60d168">funcname_thread_add_write</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00637"></a>00637          <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">int</span> <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00638"></a>00638 {
<a name="l00639"></a>00639   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00640"></a>00640 
<a name="l00641"></a>00641   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00642"></a>00642 
<a name="l00643"></a>00643   <span class="keywordflow">if</span> (FD_ISSET (fd, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>))
<a name="l00644"></a>00644     {
<a name="l00645"></a>00645       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;There is already write fd [%d]&quot;</span>, fd);
<a name="l00646"></a>00646       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00647"></a>00647     }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649   thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, arg, funcname);
<a name="l00650"></a>00650   FD_SET (fd, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
<a name="l00651"></a>00651   thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a> = <a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>;
<a name="l00652"></a>00652   <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>, thread);
<a name="l00653"></a>00653 
<a name="l00654"></a>00654   <span class="keywordflow">return</span> thread;
<a name="l00655"></a>00655 }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00658"></a><a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">00658</a> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00659"></a>00659                                    <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), 
<a name="l00660"></a>00660                                   <span class="keywordtype">int</span> type,
<a name="l00661"></a>00661                                   <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, 
<a name="l00662"></a>00662                                   <span class="keyword">struct</span> timeval *time_relative, 
<a name="l00663"></a>00663                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00664"></a>00664 {
<a name="l00665"></a>00665   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00666"></a>00666   <span class="keyword">struct </span><a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>;
<a name="l00667"></a>00667   <span class="keyword">struct </span>timeval alarm_time;
<a name="l00668"></a>00668   <span class="keyword">struct </span>thread *tt;
<a name="l00669"></a>00669 
<a name="l00670"></a>00670   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00671"></a>00671 
<a name="l00672"></a>00672   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type == <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a> || type == <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>);
<a name="l00673"></a>00673   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (time_relative);
<a name="l00674"></a>00674   
<a name="l00675"></a>00675   list = ((type == <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>) ? &amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a> : &amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>);
<a name="l00676"></a>00676   thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, type, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, arg, funcname);
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   <span class="comment">/* Do we need jitter here? */</span>
<a name="l00679"></a>00679   <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00680"></a>00680   alarm_time.tv_sec = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_sec + time_relative-&gt;tv_sec;
<a name="l00681"></a>00681   alarm_time.tv_usec = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>.tv_usec + time_relative-&gt;tv_usec;
<a name="l00682"></a>00682   thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a> = <a class="code" href="thread_8c.html#a09517c4217c981af6389ec7f45305cac">timeval_adjust</a>(alarm_time);
<a name="l00683"></a>00683 
<a name="l00684"></a>00684   <span class="comment">/* Sort by timeval. */</span>
<a name="l00685"></a>00685   <span class="keywordflow">for</span> (tt = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; tt; tt = tt-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
<a name="l00686"></a>00686     <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>, tt-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>) &lt;= 0)
<a name="l00687"></a>00687       <span class="keywordflow">break</span>;
<a name="l00688"></a>00688 
<a name="l00689"></a>00689   <span class="keywordflow">if</span> (tt)
<a name="l00690"></a>00690     <a class="code" href="thread_8c.html#a60553a4df4e88a762c10cca9b7428ada">thread_list_add_before</a> (list, tt, thread);
<a name="l00691"></a>00691   <span class="keywordflow">else</span>
<a name="l00692"></a>00692     <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (list, thread);
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   <span class="keywordflow">return</span> thread;
<a name="l00695"></a>00695 }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 <span class="comment">/* Add timer event thread. */</span>
<a name="l00699"></a>00699 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00700"></a><a class="code" href="thread_8h.html#afdc054494ac91b54f00357e7daff56e2">00700</a> <a class="code" href="thread_8c.html#a58d133b94acd384e3e17860bfd314952">funcname_thread_add_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00701"></a>00701                    <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), 
<a name="l00702"></a>00702                    <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">long</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00703"></a>00703 {
<a name="l00704"></a>00704   <span class="keyword">struct </span>timeval trel;
<a name="l00705"></a>00705 
<a name="l00706"></a>00706   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00707"></a>00707 
<a name="l00708"></a>00708   trel.tv_sec = <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>;
<a name="l00709"></a>00709   trel.tv_usec = 0;
<a name="l00710"></a>00710 
<a name="l00711"></a>00711   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>, arg, 
<a name="l00712"></a>00712                                             &amp;trel, funcname);
<a name="l00713"></a>00713 }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715 <span class="comment">/* Add timer event thread with &quot;millisecond&quot; resolution */</span>
<a name="l00716"></a>00716 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00717"></a><a class="code" href="thread_8h.html#a78c45d34e79277f01fcc52d2e12d6ccc">00717</a> <a class="code" href="thread_8c.html#ab9a4f18865ee316298c9897f2500c45d">funcname_thread_add_timer_msec</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00718"></a>00718                                 <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), 
<a name="l00719"></a>00719                                 <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">long</span> <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00720"></a>00720 {
<a name="l00721"></a>00721   <span class="keyword">struct </span>timeval trel;
<a name="l00722"></a>00722 
<a name="l00723"></a>00723   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00724"></a>00724 
<a name="l00725"></a>00725   trel.tv_sec = timer / 1000;
<a name="l00726"></a>00726   trel.tv_usec = 1000*(timer % 1000);
<a name="l00727"></a>00727 
<a name="l00728"></a>00728   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>, 
<a name="l00729"></a>00729                                             arg, &amp;trel, funcname);
<a name="l00730"></a>00730 }
<a name="l00731"></a>00731 
<a name="l00732"></a>00732 <span class="comment">/* Add a background thread, with an optional millisec delay */</span>
<a name="l00733"></a>00733 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00734"></a><a class="code" href="thread_8h.html#af4b0bc80af8195e723822c602c0871fe">00734</a> <a class="code" href="thread_8c.html#a5189a85a1556a30a429b7c49127f6775">funcname_thread_add_background</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00735"></a>00735                                 <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *),
<a name="l00736"></a>00736                                 <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">long</span> delay, 
<a name="l00737"></a>00737                                 <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00738"></a>00738 {
<a name="l00739"></a>00739   <span class="keyword">struct </span>timeval trel;
<a name="l00740"></a>00740   
<a name="l00741"></a>00741   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00742"></a>00742   
<a name="l00743"></a>00743   <span class="keywordflow">if</span> (delay)
<a name="l00744"></a>00744     {
<a name="l00745"></a>00745       trel.tv_sec = delay / 1000;
<a name="l00746"></a>00746       trel.tv_usec = 1000*(delay % 1000);
<a name="l00747"></a>00747     }
<a name="l00748"></a>00748   <span class="keywordflow">else</span>
<a name="l00749"></a>00749     {
<a name="l00750"></a>00750       trel.tv_sec = 0;
<a name="l00751"></a>00751       trel.tv_usec = 0;
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a33a0267163a9ed50a6b77946c1dd32ae">funcname_thread_add_timer_timeval</a> (m, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>,
<a name="l00755"></a>00755                                             arg, &amp;trel, funcname);
<a name="l00756"></a>00756 }
<a name="l00757"></a>00757 
<a name="l00758"></a>00758 <span class="comment">/* Add simple event thread. */</span>
<a name="l00759"></a>00759 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00760"></a><a class="code" href="thread_8h.html#a95b7ac363e84c154a278f89f96fd2065">00760</a> <a class="code" href="thread_8c.html#a7234c594f84d5448ab4e62a2c53cc952">funcname_thread_add_event</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l00761"></a>00761           <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>, <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>, <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l00762"></a>00762 {
<a name="l00763"></a>00763   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00764"></a>00764 
<a name="l00765"></a>00765   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (m != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00766"></a>00766 
<a name="l00767"></a>00767   thread = <a class="code" href="thread_8c.html#a697b2cd5a5e642a7dd8c057a1fbdd731">thread_get</a> (m, <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, arg, funcname);
<a name="l00768"></a>00768   thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a6227c63214eccba112bd640ebdde2753">val</a> = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00769"></a>00769   <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>, thread);
<a name="l00770"></a>00770 
<a name="l00771"></a>00771   <span class="keywordflow">return</span> thread;
<a name="l00772"></a>00772 }
<a name="l00773"></a>00773 
<a name="l00774"></a>00774 <span class="comment">/* Cancel thread from scheduler. */</span>
<a name="l00775"></a>00775 <span class="keywordtype">void</span>
<a name="l00776"></a><a class="code" href="thread_8h.html#a4cfb6c4bc801cd7d9f1080b883b6fd7b">00776</a> <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00777"></a>00777 {
<a name="l00778"></a>00778   <span class="keyword">struct </span><a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>;
<a name="l00779"></a>00779   
<a name="l00780"></a>00780   <span class="keywordflow">switch</span> (thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a>)
<a name="l00781"></a>00781     {
<a name="l00782"></a>00782     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#af8046342c963c1e68e91ffa96921849b">THREAD_READ</a>:
<a name="l00783"></a>00783       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>));
<a name="l00784"></a>00784       FD_CLR (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
<a name="l00785"></a>00785       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>;
<a name="l00786"></a>00786       <span class="keywordflow">break</span>;
<a name="l00787"></a>00787     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#ad41d2495b7d43e273ff1a457a3dbe796">THREAD_WRITE</a>:
<a name="l00788"></a>00788       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>));
<a name="l00789"></a>00789       FD_CLR (thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a5b5c1177fc28d6b42b27de2bc7559b34">fd</a>, &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
<a name="l00790"></a>00790       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>;
<a name="l00791"></a>00791       <span class="keywordflow">break</span>;
<a name="l00792"></a>00792     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a5bb13cc31455e697c8352a922110170c">THREAD_TIMER</a>:
<a name="l00793"></a>00793       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>;
<a name="l00794"></a>00794       <span class="keywordflow">break</span>;
<a name="l00795"></a>00795     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>:
<a name="l00796"></a>00796       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>;
<a name="l00797"></a>00797       <span class="keywordflow">break</span>;
<a name="l00798"></a>00798     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>:
<a name="l00799"></a>00799       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>;
<a name="l00800"></a>00800       <span class="keywordflow">break</span>;
<a name="l00801"></a>00801     <span class="keywordflow">case</span> <a class="code" href="thread_8h.html#a6fb1be054d6fa35a36b702d10f29e1d2">THREAD_BACKGROUND</a>:
<a name="l00802"></a>00802       list = &amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>;
<a name="l00803"></a>00803       <span class="keywordflow">break</span>;
<a name="l00804"></a>00804     <span class="keywordflow">default</span>:
<a name="l00805"></a>00805       <span class="keywordflow">return</span>;
<a name="l00806"></a>00806       <span class="keywordflow">break</span>;
<a name="l00807"></a>00807     }
<a name="l00808"></a>00808   <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
<a name="l00809"></a>00809   thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
<a name="l00810"></a>00810   <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>, thread);
<a name="l00811"></a>00811 }
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">/* Delete all events which has argument value arg. */</span>
<a name="l00814"></a>00814 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00815"></a><a class="code" href="thread_8h.html#a03c9913936520714f5a37897d9fb6ac8">00815</a> <a class="code" href="thread_8c.html#a97786b4a047014e5b642219f1013e066">thread_cancel_event</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m, <span class="keywordtype">void</span> *arg)
<a name="l00816"></a>00816 {
<a name="l00817"></a>00817   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ret = 0;
<a name="l00818"></a>00818   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   thread = m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>.<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>;
<a name="l00821"></a>00821   <span class="keywordflow">while</span> (thread)
<a name="l00822"></a>00822     {
<a name="l00823"></a>00823       <span class="keyword">struct </span>thread *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00824"></a>00824 
<a name="l00825"></a>00825       t = thread;
<a name="l00826"></a>00826       thread = t-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00827"></a>00827 
<a name="l00828"></a>00828       <span class="keywordflow">if</span> (t-&gt;<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a> == arg)
<a name="l00829"></a>00829         {
<a name="l00830"></a>00830           ret++;
<a name="l00831"></a>00831           <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>, t);
<a name="l00832"></a>00832           t-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
<a name="l00833"></a>00833           <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (m, t);
<a name="l00834"></a>00834         }
<a name="l00835"></a>00835     }
<a name="l00836"></a>00836   <span class="keywordflow">return</span> ret;
<a name="l00837"></a>00837 }
<a name="l00838"></a>00838 
<a name="l00839"></a>00839 <span class="keyword">static</span> <span class="keyword">struct </span>timeval *
<a name="l00840"></a><a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">00840</a> <a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *tlist, <span class="keyword">struct</span> timeval *timer_val)
<a name="l00841"></a>00841 {
<a name="l00842"></a>00842   <span class="keywordflow">if</span> (!<a class="code" href="thread_8c.html#ae55122d4c285e760264c32601cf1b5d4">thread_empty</a> (tlist))
<a name="l00843"></a>00843     {
<a name="l00844"></a>00844       *timer_val = <a class="code" href="thread_8c.html#a5617030f60e61f06b3bcdb5fcf6ba1c2">timeval_subtract</a> (tlist-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>, <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
<a name="l00845"></a>00845       <span class="keywordflow">return</span> timer_val;
<a name="l00846"></a>00846     }
<a name="l00847"></a>00847   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00848"></a>00848 }
<a name="l00849"></a>00849 
<a name="l00850"></a>00850 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00851"></a><a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">00851</a> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m, <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>,
<a name="l00852"></a>00852         <span class="keyword">struct</span> thread *fetch)
<a name="l00853"></a>00853 {
<a name="l00854"></a>00854   *fetch = *thread;
<a name="l00855"></a>00855   thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab0c59d8f607e983eb887017d604a80c9">THREAD_UNUSED</a>;
<a name="l00856"></a>00856   thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;  <span class="comment">/* thread_call will free fetch&#39;s copied pointer */</span>
<a name="l00857"></a>00857   <a class="code" href="thread_8c.html#ac63b1e96ac90f51c686ba3c442abb975">thread_add_unuse</a> (m, thread);
<a name="l00858"></a>00858   <span class="keywordflow">return</span> fetch;
<a name="l00859"></a>00859 }
<a name="l00860"></a>00860 
<a name="l00861"></a>00861 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00862"></a><a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">00862</a> <a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>, fd_set *fdset, fd_set *mfdset)
<a name="l00863"></a>00863 {
<a name="l00864"></a>00864   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00865"></a>00865   <span class="keyword">struct </span>thread *<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00866"></a>00866   <span class="keywordtype">int</span> ready = 0;
<a name="l00867"></a>00867   
<a name="l00868"></a>00868   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (list);
<a name="l00869"></a>00869   
<a name="l00870"></a>00870   <span class="keywordflow">for</span> (thread = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; thread; thread = next)
<a name="l00871"></a>00871     {
<a name="l00872"></a>00872       next = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>;
<a name="l00873"></a>00873 
<a name="l00874"></a>00874       <span class="keywordflow">if</span> (FD_ISSET (<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), fdset))
<a name="l00875"></a>00875         {
<a name="l00876"></a>00876           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (FD_ISSET (<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), mfdset));
<a name="l00877"></a>00877           FD_CLR(<a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread), mfdset);
<a name="l00878"></a>00878           <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
<a name="l00879"></a>00879           <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>, thread);
<a name="l00880"></a>00880           thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>;
<a name="l00881"></a>00881           ready++;
<a name="l00882"></a>00882         }
<a name="l00883"></a>00883     }
<a name="l00884"></a>00884   <span class="keywordflow">return</span> ready;
<a name="l00885"></a>00885 }
<a name="l00886"></a>00886 
<a name="l00887"></a>00887 <span class="comment">/* Add all timers that have popped to the ready list. */</span>
<a name="l00888"></a>00888 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00889"></a><a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">00889</a> <a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (<span class="keyword">struct</span> <a class="code" href="structthread__list.html">thread_list</a> *<a class="code" href="structlist.html">list</a>, <span class="keyword">struct</span> timeval *timenow)
<a name="l00890"></a>00890 {
<a name="l00891"></a>00891   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00892"></a>00892   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ready = 0;
<a name="l00893"></a>00893   
<a name="l00894"></a>00894   <span class="keywordflow">for</span> (thread = list-&gt;<a class="code" href="structthread__list.html#a0b680ff3ebf3174ef7c1992214408df3">head</a>; thread; thread = thread-&gt;<a class="code" href="structthread.html#aa67a172fbb025a2d6d93bf012d9883cc">next</a>)
<a name="l00895"></a>00895     {
<a name="l00896"></a>00896       <span class="keywordflow">if</span> (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (*timenow, thread-&gt;<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#aa2f8884c80d14c6a3be307dd1f08671a">sands</a>) &lt; 0)
<a name="l00897"></a>00897         <span class="keywordflow">return</span> ready;
<a name="l00898"></a>00898       <a class="code" href="thread_8c.html#ab7535e35cab29df426182082f6bf3092">thread_list_delete</a> (list, thread);
<a name="l00899"></a>00899       thread-&gt;<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#a0c4e66d753f8248311ba53a1d8ed49d3">THREAD_READY</a>;
<a name="l00900"></a>00900       <a class="code" href="thread_8c.html#a34a5369ec2363172d0e3ca1722c6af89">thread_list_add</a> (&amp;thread-&gt;<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a>-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>, thread);
<a name="l00901"></a>00901       ready++;
<a name="l00902"></a>00902     }
<a name="l00903"></a>00903   <span class="keywordflow">return</span> ready;
<a name="l00904"></a>00904 }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906 <span class="comment">/* Fetch next ready thread. */</span>
<a name="l00907"></a>00907 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l00908"></a><a class="code" href="thread_8h.html#a0a427e4c3c092149a1fb0d523fa49b16">00908</a> <a class="code" href="thread_8c.html#a1674b380ab1baf464b4f541c0a938656">thread_fetch</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m, <span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *fetch)
<a name="l00909"></a>00909 {
<a name="l00910"></a>00910   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l00911"></a>00911   fd_set readfd;
<a name="l00912"></a>00912   fd_set writefd;
<a name="l00913"></a>00913   fd_set exceptfd;
<a name="l00914"></a>00914   <span class="keyword">struct </span>timeval timer_val;
<a name="l00915"></a>00915   <span class="keyword">struct </span>timeval timer_val_bg;
<a name="l00916"></a>00916   <span class="keyword">struct </span>timeval *timer_wait;
<a name="l00917"></a>00917   <span class="keyword">struct </span>timeval *timer_wait_bg;
<a name="l00918"></a>00918 
<a name="l00919"></a>00919   <span class="keywordflow">while</span> (1)
<a name="l00920"></a>00920     {
<a name="l00921"></a>00921       <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a> = 0;
<a name="l00922"></a>00922       
<a name="l00923"></a>00923       <span class="comment">/* Signals are highest priority */</span>
<a name="l00924"></a>00924       <a class="code" href="sigevent_8c.html#ab6ff932a96b2e6e71c837feb570ec0b5">quagga_sigevent_process</a> ();
<a name="l00925"></a>00925        
<a name="l00926"></a>00926       <span class="comment">/* Normal event are the next highest priority.  */</span>
<a name="l00927"></a>00927       <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#adfcfea9f023609f5bd317fe64e9cb67f">event</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00928"></a>00928         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
<a name="l00929"></a>00929       
<a name="l00930"></a>00930       <span class="comment">/* If there are any ready threads from previous scheduler runs,</span>
<a name="l00931"></a>00931 <span class="comment">       * process top of them.  </span>
<a name="l00932"></a>00932 <span class="comment">       */</span>
<a name="l00933"></a>00933       <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00934"></a>00934         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
<a name="l00935"></a>00935       
<a name="l00936"></a>00936       <span class="comment">/* Structure copy.  */</span>
<a name="l00937"></a>00937       readfd = m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>;
<a name="l00938"></a>00938       writefd = m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>;
<a name="l00939"></a>00939       exceptfd = m-&gt;<a class="code" href="structthread__master.html#a917cad4df4dbddc7210cb26bc7e30c18">exceptfd</a>;
<a name="l00940"></a>00940       
<a name="l00941"></a>00941       <span class="comment">/* Calculate select wait timer if nothing else to do */</span>
<a name="l00942"></a>00942       <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00943"></a>00943       timer_wait = <a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>, &amp;timer_val);
<a name="l00944"></a>00944       timer_wait_bg = <a class="code" href="thread_8c.html#aa4c40f0b110e2eced017dca60bba55fb">thread_timer_wait</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>, &amp;timer_val_bg);
<a name="l00945"></a>00945       
<a name="l00946"></a>00946       <span class="keywordflow">if</span> (timer_wait_bg &amp;&amp;
<a name="l00947"></a>00947       (!timer_wait || (<a class="code" href="thread_8c.html#aa1ca10e55c5d63c146011c08645a758f">timeval_cmp</a> (*timer_wait, *timer_wait_bg) &gt; 0)))
<a name="l00948"></a>00948     timer_wait = timer_wait_bg;
<a name="l00949"></a>00949       
<a name="l00950"></a>00950       num = select (FD_SETSIZE, &amp;readfd, &amp;writefd, &amp;exceptfd, timer_wait);
<a name="l00951"></a>00951       
<a name="l00952"></a>00952       <span class="comment">/* Signals should get quick treatment */</span>
<a name="l00953"></a>00953       <span class="keywordflow">if</span> (num &lt; 0)
<a name="l00954"></a>00954         {
<a name="l00955"></a>00955           <span class="keywordflow">if</span> (errno == EINTR)
<a name="l00956"></a>00956             <span class="keywordflow">continue</span>; <span class="comment">/* signal received - process it */</span>
<a name="l00957"></a>00957           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;select() error: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00958"></a>00958             <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00959"></a>00959         }
<a name="l00960"></a>00960 
<a name="l00961"></a>00961       <span class="comment">/* Check foreground timers.  Historically, they have had higher</span>
<a name="l00962"></a>00962 <span class="comment">         priority than I/O threads, so let&#39;s push them onto the ready</span>
<a name="l00963"></a>00963 <span class="comment">     list in front of the I/O threads. */</span>
<a name="l00964"></a>00964       <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00965"></a>00965       <a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a35d4b90764702c33343c1f01dee5c46c">timer</a>, &amp;<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
<a name="l00966"></a>00966       
<a name="l00967"></a>00967       <span class="comment">/* Got IO, process it */</span>
<a name="l00968"></a>00968       <span class="keywordflow">if</span> (num &gt; 0)
<a name="l00969"></a>00969         {
<a name="l00970"></a>00970           <span class="comment">/* Normal priority read thead. */</span>
<a name="l00971"></a>00971           <a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a3b1f913f0b359bcb32e2b655ea131199">read</a>, &amp;readfd, &amp;m-&gt;<a class="code" href="structthread__master.html#a041945b4b8d00638874adf1c9f3586de">readfd</a>);
<a name="l00972"></a>00972           <span class="comment">/* Write thead. */</span>
<a name="l00973"></a>00973           <a class="code" href="thread_8c.html#ab82b84188675e0ad44ed5a2ab4b69b23">thread_process_fd</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a901421a159d593ead924d51b1b2aa357">write</a>, &amp;writefd, &amp;m-&gt;<a class="code" href="structthread__master.html#a61cfb81a258d2f6ae143748d9d6e12eb">writefd</a>);
<a name="l00974"></a>00974         }
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="preprocessor">#if 0</span>
<a name="l00977"></a>00977 <span class="preprocessor"></span>      <span class="comment">/* If any threads were made ready above (I/O or foreground timer),</span>
<a name="l00978"></a>00978 <span class="comment">         perhaps we should avoid adding background timers to the ready</span>
<a name="l00979"></a>00979 <span class="comment">     list at this time.  If this is code is uncommented, then background</span>
<a name="l00980"></a>00980 <span class="comment">     timer threads will not run unless there is nothing else to do. */</span>
<a name="l00981"></a>00981       <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00982"></a>00982         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
<a name="l00983"></a>00983 <span class="preprocessor">#endif</span>
<a name="l00984"></a>00984 <span class="preprocessor"></span>
<a name="l00985"></a>00985       <span class="comment">/* Background timer/events, lowest priority */</span>
<a name="l00986"></a>00986       <a class="code" href="thread_8c.html#a1bc5297ffd699c2e3c4e346e9d80746b">thread_timer_process</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a895cd6f34239c81a7d99b023d8fb6ccc">background</a>, &amp;<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>);
<a name="l00987"></a>00987       
<a name="l00988"></a>00988       <span class="keywordflow">if</span> ((thread = <a class="code" href="thread_8c.html#ace0fd9744c01d7c4f276a455ae274a5a">thread_trim_head</a> (&amp;m-&gt;<a class="code" href="structthread__master.html#a0d1d52d2b17ab5ab2c972a0a9b02f2fe">ready</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00989"></a>00989         <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#a72b9f9c754a9739bdf4344e9a014e7f9">thread_run</a> (m, thread, fetch);
<a name="l00990"></a>00990     }
<a name="l00991"></a>00991 }
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00994"></a><a class="code" href="thread_8h.html#ac8356a0c3709840382fe329e93aa23bd">00994</a> <a class="code" href="thread_8c.html#ac1c4b7776745c9e3a9c77f136123c753">thread_consumed_time</a> (<a class="code" href="thread_8h.html#ae80bba1eb296573455cd5885ba8a52ad">RUSAGE_T</a> *now, <a class="code" href="thread_8h.html#ae80bba1eb296573455cd5885ba8a52ad">RUSAGE_T</a> *start, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *cputime)
<a name="l00995"></a>00995 {
<a name="l00996"></a>00996 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l00997"></a>00997 <span class="preprocessor"></span>  <span class="comment">/* This is &#39;user + sys&#39; time.  */</span>
<a name="l00998"></a>00998   *cputime = <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;cpu.ru_utime, start-&gt;cpu.ru_utime) +
<a name="l00999"></a>00999          <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;cpu.ru_stime, start-&gt;cpu.ru_stime);
<a name="l01000"></a>01000 <span class="preprocessor">#else</span>
<a name="l01001"></a>01001 <span class="preprocessor"></span>  *cputime = 0;
<a name="l01002"></a>01002 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_RUSAGE */</span>
<a name="l01003"></a>01003   <span class="keywordflow">return</span> <a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a> (now-&gt;real, start-&gt;real);
<a name="l01004"></a>01004 }
<a name="l01005"></a>01005 
<a name="l01006"></a>01006 <span class="comment">/* We should aim to yield after THREAD_YIELD_TIME_SLOT milliseconds. </span>
<a name="l01007"></a>01007 <span class="comment">   Note: we are using real (wall clock) time for this calculation.</span>
<a name="l01008"></a>01008 <span class="comment">   It could be argued that CPU time may make more sense in certain</span>
<a name="l01009"></a>01009 <span class="comment">   contexts.  The things to consider are whether the thread may have</span>
<a name="l01010"></a>01010 <span class="comment">   blocked (in which case wall time increases, but CPU time does not),</span>
<a name="l01011"></a>01011 <span class="comment">   or whether the system is heavily loaded with other processes competing</span>
<a name="l01012"></a>01012 <span class="comment">   for CPU time.  On balance, wall clock time seems to make sense. </span>
<a name="l01013"></a>01013 <span class="comment">   Plus it has the added benefit that gettimeofday should be faster</span>
<a name="l01014"></a>01014 <span class="comment">   than calling getrusage. */</span>
<a name="l01015"></a>01015 <span class="keywordtype">int</span>
<a name="l01016"></a><a class="code" href="thread_8h.html#ac7baf880622757f0fb1b1a7bc5fc5cac">01016</a> <a class="code" href="thread_8c.html#a88220a6a17cb0a1dc2fda0f9ff9d7b01">thread_should_yield</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01017"></a>01017 {
<a name="l01018"></a>01018   <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01019"></a>01019   <span class="keywordflow">return</span> (<a class="code" href="thread_8c.html#af2615a326d45637b285f5f1e871f7cfb">timeval_elapsed</a>(<a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>, thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>.real) &gt;
<a name="l01020"></a>01020       <a class="code" href="thread_8h.html#aa5c27f37877fd023590e7c648a5115f5">THREAD_YIELD_TIME_SLOT</a>);
<a name="l01021"></a>01021 }
<a name="l01022"></a>01022 
<a name="l01023"></a>01023 <span class="keywordtype">void</span>
<a name="l01024"></a><a class="code" href="thread_8h.html#a476f884cc93ef2b19b42a8eea019bf3d">01024</a> <a class="code" href="thread_8c.html#a345a9ddc4b551d2a3e6c38cb5df4cca3">thread_getrusage</a> (<a class="code" href="thread_8h.html#ae80bba1eb296573455cd5885ba8a52ad">RUSAGE_T</a> *r)
<a name="l01025"></a>01025 {
<a name="l01026"></a>01026   <a class="code" href="thread_8c.html#a6162924e42c739da2dbd616d0f3e414a">quagga_get_relative</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01027"></a>01027 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l01028"></a>01028 <span class="preprocessor"></span>  getrusage(RUSAGE_SELF, &amp;(r-&gt;cpu));
<a name="l01029"></a>01029 <span class="preprocessor">#endif</span>
<a name="l01030"></a>01030 <span class="preprocessor"></span>  r-&gt;real = <a class="code" href="thread_8c.html#abda4476ec5465f81c34ecc0d4f9e713b">relative_time</a>;
<a name="l01031"></a>01031 
<a name="l01032"></a>01032 <span class="preprocessor">#ifdef HAVE_CLOCK_MONOTONIC</span>
<a name="l01033"></a>01033 <span class="preprocessor"></span>  <span class="comment">/* quagga_get_relative() only updates recent_time if gettimeofday</span>
<a name="l01034"></a>01034 <span class="comment">   * based, not when using CLOCK_MONOTONIC. As we export recent_time</span>
<a name="l01035"></a>01035 <span class="comment">   * and guarantee to update it before threads are run...</span>
<a name="l01036"></a>01036 <span class="comment">   */</span>
<a name="l01037"></a>01037   <a class="code" href="thread_8c.html#ad51eb53ab114e61bd4086ccafb31d624">quagga_gettimeofday</a>(&amp;<a class="code" href="thread_8c.html#a9a54ae2e02ed1087c32ce72620a940c8">recent_time</a>);
<a name="l01038"></a>01038 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_CLOCK_MONOTONIC */</span>
<a name="l01039"></a>01039 }
<a name="l01040"></a>01040 
<a name="l01041"></a>01041 <span class="comment">/* We check thread consumed time. If the system has getrusage, we&#39;ll</span>
<a name="l01042"></a>01042 <span class="comment">   use that to get in-depth stats on the performance of the thread in addition</span>
<a name="l01043"></a>01043 <span class="comment">   to wall clock time stats from gettimeofday. */</span>
<a name="l01044"></a>01044 <span class="keywordtype">void</span>
<a name="l01045"></a><a class="code" href="thread_8h.html#a7215c1965c3fa03c2eca7073e2b47a0b">01045</a> <a class="code" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01046"></a>01046 {
<a name="l01047"></a>01047   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> realtime, cputime;
<a name="l01048"></a>01048   <a class="code" href="thread_8h.html#ae80bba1eb296573455cd5885ba8a52ad">RUSAGE_T</a> ru;
<a name="l01049"></a>01049 
<a name="l01050"></a>01050  <span class="comment">/* Cache a pointer to the relevant cpu history thread, if the thread</span>
<a name="l01051"></a>01051 <span class="comment">  * does not have it yet.</span>
<a name="l01052"></a>01052 <span class="comment">  *</span>
<a name="l01053"></a>01053 <span class="comment">  * Callers submitting &#39;dummy threads&#39; hence must take care that</span>
<a name="l01054"></a>01054 <span class="comment">  * thread-&gt;cpu is NULL</span>
<a name="l01055"></a>01055 <span class="comment">  */</span>
<a name="l01056"></a>01056   <span class="keywordflow">if</span> (!thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>)
<a name="l01057"></a>01057     {
<a name="l01058"></a>01058       <span class="keyword">struct </span><a class="code" href="structcpu__thread__history.html">cpu_thread_history</a> tmp;
<a name="l01059"></a>01059       
<a name="l01060"></a>01060       tmp.<a class="code" href="structcpu__thread__history.html#a18dec9f26bd2312120405e531f1cda46">func</a> = thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>;
<a name="l01061"></a>01061       tmp.<a class="code" href="structcpu__thread__history.html#a4a39f4df182bc405adb92498e851baa1">funcname</a> = thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>;
<a name="l01062"></a>01062       
<a name="l01063"></a>01063       thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a> = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (cpu_record, &amp;tmp, 
<a name="l01064"></a>01064                     (<span class="keywordtype">void</span> * (*) (<span class="keywordtype">void</span> *))<a class="code" href="thread_8c.html#a71b5dc1d90fa10bb18e354a8be3a1b6c">cpu_record_hash_alloc</a>);
<a name="l01065"></a>01065     }
<a name="l01066"></a>01066 
<a name="l01067"></a>01067   <a class="code" href="thread_8h.html#a023e544a82cd098fc592b46066a7fa47">GETRUSAGE</a> (&amp;thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>);
<a name="l01068"></a>01068 
<a name="l01069"></a>01069   (*thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>) (thread);
<a name="l01070"></a>01070 
<a name="l01071"></a>01071   <a class="code" href="thread_8h.html#a023e544a82cd098fc592b46066a7fa47">GETRUSAGE</a> (&amp;ru);
<a name="l01072"></a>01072 
<a name="l01073"></a>01073   realtime = <a class="code" href="thread_8c.html#ac1c4b7776745c9e3a9c77f136123c753">thread_consumed_time</a> (&amp;ru, &amp;thread-&gt;<a class="code" href="structthread.html#ad456989e3d9aef00cea85cd189127572">ru</a>, &amp;cputime);
<a name="l01074"></a>01074   thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#a0dbf23378ec65468697175515e238c67">total</a> += realtime;
<a name="l01075"></a>01075   <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> &lt; realtime)
<a name="l01076"></a>01076     thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a12e1cc6906dd646458a8998a295f2af4">real</a>.<a class="code" href="structcpu__thread__history_1_1time__stats.html#af85150c5998c00f5697eeeb82eab31f3">max</a> = realtime;
<a name="l01077"></a>01077 <span class="preprocessor">#ifdef HAVE_RUSAGE</span>
<a name="l01078"></a>01078 <span class="preprocessor"></span>  thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.total += cputime;
<a name="l01079"></a>01079   <span class="keywordflow">if</span> (thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.max &lt; cputime)
<a name="l01080"></a>01080     thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;cpu.max = cputime;
<a name="l01081"></a>01081 <span class="preprocessor">#endif</span>
<a name="l01082"></a>01082 <span class="preprocessor"></span>
<a name="l01083"></a>01083   ++(thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a344e92c5b109df5214bcc1e0584f3380">total_calls</a>);
<a name="l01084"></a>01084   thread-&gt;<a class="code" href="structthread.html#a82b93bbb5529fdb1bd41cf9a3192f2df">hist</a>-&gt;<a class="code" href="structcpu__thread__history.html#a5ffd9ebcf11e157d0f16f37bf406d79f">types</a> |= (1 &lt;&lt; thread-&gt;<a class="code" href="structthread.html#ab4c8d35109cfc7c65b19ad049928a60b">add_type</a>);
<a name="l01085"></a>01085 
<a name="l01086"></a>01086 <span class="preprocessor">#ifdef CONSUMED_TIME_CHECK</span>
<a name="l01087"></a>01087 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (realtime &gt; CONSUMED_TIME_CHECK)
<a name="l01088"></a>01088     {
<a name="l01089"></a>01089       <span class="comment">/*</span>
<a name="l01090"></a>01090 <span class="comment">       * We have a CPU Hog on our hands.</span>
<a name="l01091"></a>01091 <span class="comment">       * Whinge about it now, so we&#39;re aware this is yet another task</span>
<a name="l01092"></a>01092 <span class="comment">       * to fix.</span>
<a name="l01093"></a>01093 <span class="comment">       */</span>
<a name="l01094"></a>01094       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SLOW THREAD: task %s (%lx) ran for %lums (cpu time %lums)&quot;</span>,
<a name="l01095"></a>01095          thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>,
<a name="l01096"></a>01096          (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) thread-&gt;<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a>,
<a name="l01097"></a>01097          realtime/1000, cputime/1000);
<a name="l01098"></a>01098     }
<a name="l01099"></a>01099 <span class="preprocessor">#endif </span><span class="comment">/* CONSUMED_TIME_CHECK */</span>
<a name="l01100"></a>01100 
<a name="l01101"></a>01101   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, thread-&gt;<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
<a name="l01102"></a>01102 }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="comment">/* Execute thread */</span>
<a name="l01105"></a>01105 <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *
<a name="l01106"></a><a class="code" href="thread_8h.html#af38ec38562af99fa9d986651f941a9e8">01106</a> <a class="code" href="thread_8c.html#ad394973cfd70bea11ea2d77b33e11b9c">funcname_thread_execute</a> (<span class="keyword">struct</span> <a class="code" href="structthread__master.html">thread_master</a> *m,
<a name="l01107"></a>01107                 <span class="keywordtype">int</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>)(<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *), 
<a name="l01108"></a>01108                 <span class="keywordtype">void</span> *<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>,
<a name="l01109"></a>01109                 <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>,
<a name="l01110"></a>01110         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>)
<a name="l01111"></a>01111 {
<a name="l01112"></a>01112   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> dummy; 
<a name="l01113"></a>01113 
<a name="l01114"></a>01114   memset (&amp;dummy, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a>));
<a name="l01115"></a>01115 
<a name="l01116"></a>01116   dummy.<a class="code" href="structthread.html#a320d2bbfb15389d992200373fd5941b6">type</a> = <a class="code" href="thread_8h.html#ab1afef4a6988a13eec3423a9f242981e">THREAD_EVENT</a>;
<a name="l01117"></a>01117   dummy.<a class="code" href="structthread.html#ab4c8d35109cfc7c65b19ad049928a60b">add_type</a> = <a class="code" href="thread_8h.html#ae1829dd93324485f92f05bab573e4ec3">THREAD_EXECUTE</a>;
<a name="l01118"></a>01118   dummy.<a class="code" href="structthread.html#a35927fd9bd70011aa35c263e55dfe3fb">master</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01119"></a>01119   dummy.<a class="code" href="structthread.html#ad581d44872a5a87a2d44169509a32527">func</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l01120"></a>01120   dummy.<a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a> = <a class="code" href="structthread.html#a7b848d8a51a51c7c499c4bd2caa78019">arg</a>;
<a name="l01121"></a>01121   dummy.<a class="code" href="structthread.html#abc1b9676415f5150d5b49e7654d4cb27">u</a>.<a class="code" href="structthread.html#a6227c63214eccba112bd640ebdde2753">val</a> = <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l01122"></a>01122   dummy.<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a> = <a class="code" href="thread_8c.html#a9f162b99efad06ceff2b0c53c0b4b8ed">strip_funcname</a> (funcname);
<a name="l01123"></a>01123   <a class="code" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (&amp;dummy);
<a name="l01124"></a>01124 
<a name="l01125"></a>01125   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1cac7507867f49bd0bd3615f09e74f59">MTYPE_THREAD_FUNCNAME</a>, dummy.<a class="code" href="structthread.html#a851c462ab2ca11691f7a75f0e55cb571">funcname</a>);
<a name="l01126"></a>01126 
<a name="l01127"></a>01127   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01128"></a>01128 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="thread_8c.html">thread.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
