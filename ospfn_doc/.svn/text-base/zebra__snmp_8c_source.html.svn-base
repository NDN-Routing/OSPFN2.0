<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/zebra_snmp.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('zebra__snmp_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/zebra_snmp.c</div>  </div>
</div>
<div class="contents">
<a href="zebra__snmp_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* FIB SNMP.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#ifdef HAVE_NETSNMP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net-snmp/net-snmp-config.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;net-snmp/net-snmp-includes.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#else</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;asn1.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;snmp.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;snmp_impl.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="smux_8h.html">smux.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#define IPFWMIB 1,3,6,1,2,1,4,24</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="comment">/* ipForwardTable */</span>
<a name="l00047"></a>00047 <span class="preprocessor">#define IPFORWARDDEST                         1</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMASK                         2</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDPOLICY                       3</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDNEXTHOP                      4</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDIFINDEX                      5</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDTYPE                         6</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDPROTO                        7</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDAGE                          8</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDINFO                         9</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDNEXTHOPAS                   10</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMETRIC1                     11</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMETRIC2                     12</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMETRIC3                     13</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMETRIC4                     14</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#define IPFORWARDMETRIC5                     15</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063 <span class="comment">/* ipCidrRouteTable */</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define IPCIDRROUTEDEST                       1</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMASK                       2</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTETOS                        3</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTENEXTHOP                    4</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEIFINDEX                    5</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTETYPE                       6</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEPROTO                      7</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEAGE                        8</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEINFO                       9</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTENEXTHOPAS                 10</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMETRIC1                   11</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMETRIC2                   12</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMETRIC3                   13</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMETRIC4                   14</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTEMETRIC5                   15</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#define IPCIDRROUTESTATUS                    16</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>
<a name="l00081"></a>00081 <span class="preprocessor">#define INTEGER32 ASN_INTEGER</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#define GAUGE32 ASN_GAUGE</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">#define ENUMERATION ASN_INTEGER</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#define ROWSTATUS ASN_INTEGER</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#define IPADDRESS ASN_IPADDRESS</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#define OBJECTIDENTIFIER ASN_OBJECT_ID</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 oid ipfw_oid [] = { IPFWMIB };
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">/* Hook functions. */</span>
<a name="l00093"></a>00093 <span class="keyword">static</span> u_char * ipFwNumber (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid [], <span class="keywordtype">size_t</span> *,
<a name="l00094"></a>00094              <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00095"></a>00095 <span class="keyword">static</span> u_char * ipFwTable (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid [], <span class="keywordtype">size_t</span> *,
<a name="l00096"></a>00096                <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00097"></a>00097 <span class="keyword">static</span> u_char * ipCidrNumber (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid [], <span class="keywordtype">size_t</span> *,
<a name="l00098"></a>00098                   <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00099"></a>00099 <span class="keyword">static</span> u_char * ipCidrTable (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid [], <span class="keywordtype">size_t</span> *,
<a name="l00100"></a>00100                  <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="keyword">struct </span><a class="code" href="structvariable.html">variable</a> zebra_variables[] = 
<a name="l00103"></a>00103   {
<a name="l00104"></a>00104     {0, GAUGE32, RONLY, ipFwNumber, 1, {1}},
<a name="l00105"></a>00105     {IPFORWARDDEST, IPADDRESS, RONLY, ipFwTable, 3, {2, 1, 1}},
<a name="l00106"></a>00106     {IPFORWARDMASK, IPADDRESS, RONLY, ipFwTable, 3, {2, 1, 2}},
<a name="l00107"></a>00107     {IPFORWARDPOLICY, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 3}},
<a name="l00108"></a>00108     {IPFORWARDNEXTHOP, IPADDRESS, RONLY, ipFwTable, 3, {2, 1, 4}},
<a name="l00109"></a>00109     {IPFORWARDIFINDEX, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 5}},
<a name="l00110"></a>00110     {IPFORWARDTYPE, ENUMERATION, RONLY, ipFwTable, 3, {2, 1, 6}},
<a name="l00111"></a>00111     {IPFORWARDPROTO, ENUMERATION, RONLY, ipFwTable, 3, {2, 1, 7}},
<a name="l00112"></a>00112     {IPFORWARDAGE, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 8}},
<a name="l00113"></a>00113     {IPFORWARDINFO, OBJECTIDENTIFIER, RONLY, ipFwTable, 3, {2, 1, 9}},
<a name="l00114"></a>00114     {IPFORWARDNEXTHOPAS, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 10}},
<a name="l00115"></a>00115     {IPFORWARDMETRIC1, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 11}},
<a name="l00116"></a>00116     {IPFORWARDMETRIC2, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 12}},
<a name="l00117"></a>00117     {IPFORWARDMETRIC3, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 13}},
<a name="l00118"></a>00118     {IPFORWARDMETRIC4, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 14}},
<a name="l00119"></a>00119     {IPFORWARDMETRIC5, INTEGER32, RONLY, ipFwTable, 3, {2, 1, 15}},
<a name="l00120"></a>00120     {0, GAUGE32, RONLY, ipCidrNumber, 1, {3}},
<a name="l00121"></a>00121     {IPCIDRROUTEDEST, IPADDRESS, RONLY, ipCidrTable, 3, {4, 1, 1}},
<a name="l00122"></a>00122     {IPCIDRROUTEMASK, IPADDRESS, RONLY, ipCidrTable, 3, {4, 1, 2}},
<a name="l00123"></a>00123     {IPCIDRROUTETOS, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 3}},
<a name="l00124"></a>00124     {IPCIDRROUTENEXTHOP, IPADDRESS, RONLY, ipCidrTable, 3, {4, 1, 4}},
<a name="l00125"></a>00125     {IPCIDRROUTEIFINDEX, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 5}},
<a name="l00126"></a>00126     {IPCIDRROUTETYPE, ENUMERATION, RONLY, ipCidrTable, 3, {4, 1, 6}},
<a name="l00127"></a>00127     {IPCIDRROUTEPROTO, ENUMERATION, RONLY, ipCidrTable, 3, {4, 1, 7}},
<a name="l00128"></a>00128     {IPCIDRROUTEAGE, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 8}},
<a name="l00129"></a>00129     {IPCIDRROUTEINFO, OBJECTIDENTIFIER, RONLY, ipCidrTable, 3, {4, 1, 9}},
<a name="l00130"></a>00130     {IPCIDRROUTENEXTHOPAS, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 10}},
<a name="l00131"></a>00131     {IPCIDRROUTEMETRIC1, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 11}},
<a name="l00132"></a>00132     {IPCIDRROUTEMETRIC2, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 12}},
<a name="l00133"></a>00133     {IPCIDRROUTEMETRIC3, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 13}},
<a name="l00134"></a>00134     {IPCIDRROUTEMETRIC4, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 14}},
<a name="l00135"></a>00135     {IPCIDRROUTEMETRIC5, INTEGER32, RONLY, ipCidrTable, 3, {4, 1, 15}},
<a name="l00136"></a>00136     {IPCIDRROUTESTATUS, ROWSTATUS, RONLY, ipCidrTable, 3, {4, 1, 16}}
<a name="l00137"></a>00137   };
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">static</span> u_char *
<a name="l00141"></a>00141 ipFwNumber (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid objid[], <span class="keywordtype">size_t</span> *objid_len,
<a name="l00142"></a>00142         <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *val_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keyword">static</span> <span class="keywordtype">int</span> result;
<a name="l00145"></a>00145   <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
<a name="l00146"></a>00146   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00147"></a>00147   <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
<a name="l00148"></a>00148 
<a name="l00149"></a>00149   <span class="keywordflow">if</span> (<a class="code" href="smux_8h.html#a15cc4f7bbc1b70b7fc5179e939073238">smux_header_generic</a>(v, objid, objid_len, exact, val_len, write_method) == <a class="code" href="smux_8h.html#ac8ad57fb87ae8e10684a7b910e92bba6">MATCH_FAILED</a>)
<a name="l00150"></a>00150     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (! table)
<a name="l00154"></a>00154     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">/* Return number of routing entries. */</span>
<a name="l00157"></a>00157   result = 0;
<a name="l00158"></a>00158   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00159"></a>00159     <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
<a name="l00160"></a>00160       result++;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00163"></a>00163 }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="keyword">static</span> u_char *
<a name="l00166"></a>00166 ipCidrNumber (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid objid[], <span class="keywordtype">size_t</span> *objid_len,
<a name="l00167"></a>00167           <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *val_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169   <span class="keyword">static</span> <span class="keywordtype">int</span> result;
<a name="l00170"></a>00170   <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
<a name="l00171"></a>00171   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00172"></a>00172   <span class="keyword">struct </span>rib *rib;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   <span class="keywordflow">if</span> (<a class="code" href="smux_8h.html#a15cc4f7bbc1b70b7fc5179e939073238">smux_header_generic</a>(v, objid, objid_len, exact, val_len, write_method) == <a class="code" href="smux_8h.html#ac8ad57fb87ae8e10684a7b910e92bba6">MATCH_FAILED</a>)
<a name="l00175"></a>00175     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
<a name="l00178"></a>00178   <span class="keywordflow">if</span> (! table)
<a name="l00179"></a>00179     <span class="keywordflow">return</span> 0;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   <span class="comment">/* Return number of routing entries. */</span>
<a name="l00182"></a>00182   result = 0;
<a name="l00183"></a>00183   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00184"></a>00184     <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
<a name="l00185"></a>00185       result++;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00191"></a>00191 in_addr_cmp(u_char *p1, u_char *p2)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   <span class="keywordflow">for</span> (i=0; i&lt;4; i++)
<a name="l00196"></a>00196     {
<a name="l00197"></a>00197       <span class="keywordflow">if</span> (*p1 &lt; *p2)
<a name="l00198"></a>00198         <span class="keywordflow">return</span> -1;
<a name="l00199"></a>00199       <span class="keywordflow">if</span> (*p1 &gt; *p2)
<a name="l00200"></a>00200         <span class="keywordflow">return</span> 1;
<a name="l00201"></a>00201       p1++; p2++;
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203   <span class="keywordflow">return</span> 0;
<a name="l00204"></a>00204 }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="keyword">static</span> <span class="keywordtype">int</span> 
<a name="l00207"></a>00207 in_addr_add(u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>)
<a name="l00208"></a>00208 {
<a name="l00209"></a>00209   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, ip0;
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   ip0 = *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00212"></a>00212   p += 4;
<a name="l00213"></a>00213   <span class="keywordflow">for</span> (i = 3; 0 &lt;= <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>; i--) {
<a name="l00214"></a>00214     p--;
<a name="l00215"></a>00215     <span class="keywordflow">if</span> (*p + num &gt; 255) {
<a name="l00216"></a>00216       *p += <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
<a name="l00217"></a>00217       num = 1;
<a name="l00218"></a>00218     } <span class="keywordflow">else</span> {
<a name="l00219"></a>00219       *p += <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
<a name="l00220"></a>00220       <span class="keywordflow">return</span> 1;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222   }
<a name="l00223"></a>00223   <span class="keywordflow">if</span> (ip0 &gt; *p) {
<a name="l00224"></a>00224     <span class="comment">/* ip + num &gt; 0xffffffff */</span>
<a name="l00225"></a>00225     <span class="keywordflow">return</span> 0;
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227   
<a name="l00228"></a>00228   <span class="keywordflow">return</span> 1;
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00232"></a>00232 proto_trans(<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00233"></a>00233 {
<a name="l00234"></a>00234   <span class="keywordflow">switch</span> (type)
<a name="l00235"></a>00235     {
<a name="l00236"></a>00236     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a650967617adbd419d14e5e05d9548108">ZEBRA_ROUTE_SYSTEM</a>:
<a name="l00237"></a>00237       <span class="keywordflow">return</span> 1; <span class="comment">/* other */</span>
<a name="l00238"></a>00238     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>:
<a name="l00239"></a>00239       <span class="keywordflow">return</span> 1; <span class="comment">/* other */</span>
<a name="l00240"></a>00240     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>:
<a name="l00241"></a>00241       <span class="keywordflow">return</span> 2; <span class="comment">/* local interface */</span>
<a name="l00242"></a>00242     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a>:
<a name="l00243"></a>00243       <span class="keywordflow">return</span> 3; <span class="comment">/* static route */</span>
<a name="l00244"></a>00244     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>:
<a name="l00245"></a>00245       <span class="keywordflow">return</span> 8; <span class="comment">/* rip */</span>
<a name="l00246"></a>00246     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>:
<a name="l00247"></a>00247       <span class="keywordflow">return</span> 1; <span class="comment">/* shouldn&#39;t happen */</span>
<a name="l00248"></a>00248     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>:
<a name="l00249"></a>00249       <span class="keywordflow">return</span> 13; <span class="comment">/* ospf */</span>
<a name="l00250"></a>00250     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ae05c36542e3fb1c5c7fd440ac322331f">ZEBRA_ROUTE_OSPF6</a>:
<a name="l00251"></a>00251       <span class="keywordflow">return</span> 1; <span class="comment">/* shouldn&#39;t happen */</span>
<a name="l00252"></a>00252     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>:
<a name="l00253"></a>00253       <span class="keywordflow">return</span> 14; <span class="comment">/* bgp */</span>
<a name="l00254"></a>00254     <span class="keywordflow">default</span>:
<a name="l00255"></a>00255       <span class="keywordflow">return</span> 1; <span class="comment">/* other */</span>
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00260"></a>00260 check_replace(<span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *np2, <span class="keyword">struct</span> rib *rib2, 
<a name="l00261"></a>00261               <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> **<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>, <span class="keyword">struct</span> rib **rib)
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263   <span class="keywordtype">int</span> proto, proto2;
<a name="l00264"></a>00264 
<a name="l00265"></a>00265   <span class="keywordflow">if</span> (!*np)
<a name="l00266"></a>00266     {
<a name="l00267"></a>00267       *np = np2;
<a name="l00268"></a>00268       *rib = rib2;
<a name="l00269"></a>00269       <span class="keywordflow">return</span>;
<a name="l00270"></a>00270     }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="keywordflow">if</span> (in_addr_cmp(&amp;(*np)-&gt;p.u.prefix, &amp;np2-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>) &lt; 0)
<a name="l00273"></a>00273     <span class="keywordflow">return</span>;
<a name="l00274"></a>00274   <span class="keywordflow">if</span> (in_addr_cmp(&amp;(*np)-&gt;p.u.prefix, &amp;np2-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>) &gt; 0)
<a name="l00275"></a>00275     {
<a name="l00276"></a>00276       *np = np2;
<a name="l00277"></a>00277       *rib = rib2;
<a name="l00278"></a>00278       <span class="keywordflow">return</span>;
<a name="l00279"></a>00279     }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   proto = proto_trans((*rib)-&gt;type);
<a name="l00282"></a>00282   proto2 = proto_trans(rib2-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   <span class="keywordflow">if</span> (proto2 &gt; proto)
<a name="l00285"></a>00285     <span class="keywordflow">return</span>;
<a name="l00286"></a>00286   <span class="keywordflow">if</span> (proto2 &lt; proto)
<a name="l00287"></a>00287     {
<a name="l00288"></a>00288       *np = np2;
<a name="l00289"></a>00289       *rib = rib2;
<a name="l00290"></a>00290       <span class="keywordflow">return</span>;
<a name="l00291"></a>00291     }
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="keywordflow">if</span> (in_addr_cmp((u_char *)&amp;(*rib)-&gt;nexthop-&gt;gate.ipv4, 
<a name="l00294"></a>00294                   (u_char *)&amp;rib2-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>) &lt;= 0)
<a name="l00295"></a>00295     <span class="keywordflow">return</span>;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   *np = np2;
<a name="l00298"></a>00298   *rib = rib2;
<a name="l00299"></a>00299   <span class="keywordflow">return</span>;
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00303"></a>00303 get_fwtable_route_node(<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid objid[], <span class="keywordtype">size_t</span> *objid_len, 
<a name="l00304"></a>00304                <span class="keywordtype">int</span> exact, <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> **np, <span class="keyword">struct</span> rib **rib)
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306   <span class="keyword">struct </span>in_addr dest;
<a name="l00307"></a>00307   <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
<a name="l00308"></a>00308   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *np2;
<a name="l00309"></a>00309   <span class="keyword">struct </span>rib *rib2;
<a name="l00310"></a>00310   <span class="keywordtype">int</span> proto;
<a name="l00311"></a>00311   <span class="keywordtype">int</span> policy;
<a name="l00312"></a>00312   <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00313"></a>00313   u_char *pnt;
<a name="l00314"></a>00314   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   <span class="comment">/* Init index variables */</span>
<a name="l00317"></a>00317 
<a name="l00318"></a>00318   pnt = (u_char *) &amp;dest;
<a name="l00319"></a>00319   <span class="keywordflow">for</span> (i = 0; i &lt; 4; i++)
<a name="l00320"></a>00320     *pnt++ = 0;
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   pnt = (u_char *) &amp;<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00323"></a>00323   <span class="keywordflow">for</span> (i = 0; i &lt; 4; i++)
<a name="l00324"></a>00324     *pnt++ = 0;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   proto = 0;
<a name="l00327"></a>00327   policy = 0;
<a name="l00328"></a>00328  
<a name="l00329"></a>00329   <span class="comment">/* Init return variables */</span>
<a name="l00330"></a>00330 
<a name="l00331"></a>00331   *np = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00332"></a>00332   *rib = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="comment">/* Short circuit exact matches of wrong length */</span>
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="keywordflow">if</span> (exact &amp;&amp; (*objid_len != (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 10))
<a name="l00337"></a>00337     <span class="keywordflow">return</span>;
<a name="l00338"></a>00338 
<a name="l00339"></a>00339   table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
<a name="l00340"></a>00340   <span class="keywordflow">if</span> (! table)
<a name="l00341"></a>00341     <span class="keywordflow">return</span>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="comment">/* Get INDEX information out of OID.</span>
<a name="l00344"></a>00344 <span class="comment">   * ipForwardDest, ipForwardProto, ipForwardPolicy, ipForwardNextHop</span>
<a name="l00345"></a>00345 <span class="comment">   */</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="keywordflow">if</span> (*objid_len &gt; (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>)
<a name="l00348"></a>00348     <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (objid + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(4, *objid_len - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>), &amp;dest);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350   <span class="keywordflow">if</span> (*objid_len &gt; (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 4)
<a name="l00351"></a>00351     proto = objid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 4];
<a name="l00352"></a>00352 
<a name="l00353"></a>00353   <span class="keywordflow">if</span> (*objid_len &gt; (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 5)
<a name="l00354"></a>00354     policy = objid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 5];
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <span class="keywordflow">if</span> (*objid_len &gt; (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 6)
<a name="l00357"></a>00357     <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (objid + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 6, <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(4, *objid_len - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> - 6),
<a name="l00358"></a>00358          &amp;<a class="code" href="structnexthop.html">nexthop</a>);
<a name="l00359"></a>00359 
<a name="l00360"></a>00360   <span class="comment">/* Apply GETNEXT on not exact search */</span>
<a name="l00361"></a>00361 
<a name="l00362"></a>00362   <span class="keywordflow">if</span> (!exact &amp;&amp; (*objid_len &gt;= (<span class="keywordtype">unsigned</span>) v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 10))
<a name="l00363"></a>00363     {
<a name="l00364"></a>00364       <span class="keywordflow">if</span> (! in_addr_add((u_char *) &amp;<a class="code" href="structnexthop.html">nexthop</a>, 1)) 
<a name="l00365"></a>00365         <span class="keywordflow">return</span>;
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="comment">/* For exact: search matching entry in rib table. */</span>
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="keywordflow">if</span> (exact)
<a name="l00371"></a>00371     {
<a name="l00372"></a>00372       <span class="keywordflow">if</span> (policy) <span class="comment">/* Not supported (yet?) */</span>
<a name="l00373"></a>00373         <span class="keywordflow">return</span>;
<a name="l00374"></a>00374       <span class="keywordflow">for</span> (*np = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>; *np = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (*np))
<a name="l00375"></a>00375     {
<a name="l00376"></a>00376       <span class="keywordflow">if</span> (!in_addr_cmp(&amp;(*np)-&gt;p.u.prefix, (u_char *)&amp;dest))
<a name="l00377"></a>00377         {
<a name="l00378"></a>00378           <span class="keywordflow">for</span> (*rib = (*np)-&gt;info; *rib; *rib = (*rib)-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
<a name="l00379"></a>00379             {
<a name="l00380"></a>00380           <span class="keywordflow">if</span> (!in_addr_cmp((u_char *)&amp;(*rib)-&gt;nexthop-&gt;gate.ipv4,
<a name="l00381"></a>00381                    (u_char *)&amp;<a class="code" href="structnexthop.html">nexthop</a>))
<a name="l00382"></a>00382             <span class="keywordflow">if</span> (proto == proto_trans((*rib)-&gt;type))
<a name="l00383"></a>00383               <span class="keywordflow">return</span>;
<a name="l00384"></a>00384         }
<a name="l00385"></a>00385         }
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387       <span class="keywordflow">return</span>;
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <span class="comment">/* Search next best entry */</span>
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="keywordflow">for</span> (np2 = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); np2; np2 = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (np2))
<a name="l00393"></a>00393     {
<a name="l00394"></a>00394 
<a name="l00395"></a>00395       <span class="comment">/* Check destination first */</span>
<a name="l00396"></a>00396       <span class="keywordflow">if</span> (in_addr_cmp(&amp;np2-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, (u_char *)&amp;dest) &gt; 0)
<a name="l00397"></a>00397         <span class="keywordflow">for</span> (rib2 = np2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib2; rib2 = rib2-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
<a name="l00398"></a>00398       check_replace(np2, rib2, np, rib);
<a name="l00399"></a>00399 
<a name="l00400"></a>00400       <span class="keywordflow">if</span> (in_addr_cmp(&amp;np2-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, (u_char *)&amp;dest) == 0)
<a name="l00401"></a>00401         { <span class="comment">/* have to look at each rib individually */</span>
<a name="l00402"></a>00402           <span class="keywordflow">for</span> (rib2 = np2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib2; rib2 = rib2-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
<a name="l00403"></a>00403         {
<a name="l00404"></a>00404           <span class="keywordtype">int</span> proto2, policy2;
<a name="l00405"></a>00405 
<a name="l00406"></a>00406           proto2 = proto_trans(rib2-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>);
<a name="l00407"></a>00407           policy2 = 0;
<a name="l00408"></a>00408 
<a name="l00409"></a>00409           <span class="keywordflow">if</span> ((policy &lt; policy2)
<a name="l00410"></a>00410           || ((policy == policy2) &amp;&amp; (proto &lt; proto2))
<a name="l00411"></a>00411           || ((policy == policy2) &amp;&amp; (proto == proto2)
<a name="l00412"></a>00412               &amp;&amp; (in_addr_cmp((u_char *)&amp;rib2-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>,
<a name="l00413"></a>00413                       (u_char *) &amp;<a class="code" href="structnexthop.html">nexthop</a>) &gt;= 0)
<a name="l00414"></a>00414               ))
<a name="l00415"></a>00415         check_replace(np2, rib2, np, rib);
<a name="l00416"></a>00416         }
<a name="l00417"></a>00417     }
<a name="l00418"></a>00418     }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420   <span class="keywordflow">if</span> (!*rib)
<a name="l00421"></a>00421     <span class="keywordflow">return</span>;
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   policy = 0;
<a name="l00424"></a>00424   proto = proto_trans((*rib)-&gt;type);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   *objid_len = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 10;
<a name="l00427"></a>00427   pnt = (u_char *) &amp;(*np)-&gt;p.u.prefix;
<a name="l00428"></a>00428   for (i = 0; i &lt; 4; i++)
<a name="l00429"></a>00429     objid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + i] = *pnt++;
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   objid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 4] = proto;
<a name="l00432"></a>00432   objid[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 5] = policy;
<a name="l00433"></a>00433 
<a name="l00434"></a>00434   {
<a name="l00435"></a>00435     <span class="keyword">struct</span> <a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     <a class="code" href="structnexthop.html">nexthop</a> = (*rib)-&gt;nexthop;
<a name="l00438"></a>00438     if (<a class="code" href="structnexthop.html">nexthop</a>)
<a name="l00439"></a>00439       {
<a name="l00440"></a>00440     pnt = (u_char *) &amp;<a class="code" href="structnexthop.html">nexthop</a>-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;
<a name="l00441"></a>00441     for (i = 0; i &lt; 4; i++)
<a name="l00442"></a>00442       objid[i + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 6] = *pnt++;
<a name="l00443"></a>00443       }
<a name="l00444"></a>00444   }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446   <span class="keywordflow">return</span>;
<a name="l00447"></a>00447 }
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 <span class="keyword">static</span> u_char *
<a name="l00450"></a>00450 ipFwTable (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid objid[], <span class="keywordtype">size_t</span> *objid_len,
<a name="l00451"></a>00451        <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *val_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00452"></a>00452 {
<a name="l00453"></a>00453   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>;
<a name="l00454"></a>00454   <span class="keyword">struct </span>rib *rib;
<a name="l00455"></a>00455   <span class="keyword">static</span> <span class="keywordtype">int</span> result;
<a name="l00456"></a>00456   <span class="keyword">static</span> <span class="keywordtype">int</span> resarr[2];
<a name="l00457"></a>00457   <span class="keyword">static</span> <span class="keyword">struct </span>in_addr netmask;
<a name="l00458"></a>00458   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460   get_fwtable_route_node(v, objid, objid_len, exact, &amp;np, &amp;rib);
<a name="l00461"></a>00461   <span class="keywordflow">if</span> (!np)
<a name="l00462"></a>00462     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>;
<a name="l00465"></a>00465   <span class="keywordflow">if</span> (! nexthop)
<a name="l00466"></a>00466     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>)
<a name="l00469"></a>00469     {
<a name="l00470"></a>00470     <span class="keywordflow">case</span> IPFORWARDDEST:
<a name="l00471"></a>00471       *val_len = 4;
<a name="l00472"></a>00472       <span class="keywordflow">return</span> &amp;np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00473"></a>00473       <span class="keywordflow">break</span>;
<a name="l00474"></a>00474     <span class="keywordflow">case</span> IPFORWARDMASK:
<a name="l00475"></a>00475       <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a>(np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;netmask);
<a name="l00476"></a>00476       *val_len = 4;
<a name="l00477"></a>00477       <span class="keywordflow">return</span> (u_char *)&amp;netmask;
<a name="l00478"></a>00478       <span class="keywordflow">break</span>;
<a name="l00479"></a>00479     <span class="keywordflow">case</span> IPFORWARDPOLICY:
<a name="l00480"></a>00480       result = 0;
<a name="l00481"></a>00481       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00482"></a>00482       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00483"></a>00483       <span class="keywordflow">break</span>;
<a name="l00484"></a>00484     <span class="keywordflow">case</span> IPFORWARDNEXTHOP:
<a name="l00485"></a>00485       *val_len = 4;
<a name="l00486"></a>00486       <span class="keywordflow">return</span> (u_char *)&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;
<a name="l00487"></a>00487       <span class="keywordflow">break</span>;
<a name="l00488"></a>00488     <span class="keywordflow">case</span> IPFORWARDIFINDEX:
<a name="l00489"></a>00489       *val_len = <span class="keyword">sizeof</span>(int);
<a name="l00490"></a>00490       <span class="keywordflow">return</span> (u_char *)&amp;nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
<a name="l00491"></a>00491       <span class="keywordflow">break</span>;
<a name="l00492"></a>00492     <span class="keywordflow">case</span> IPFORWARDTYPE:
<a name="l00493"></a>00493       <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
<a name="l00494"></a>00494       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
<a name="l00495"></a>00495         result = 3;
<a name="l00496"></a>00496       <span class="keywordflow">else</span>
<a name="l00497"></a>00497         result = 4;
<a name="l00498"></a>00498       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00499"></a>00499       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00500"></a>00500       <span class="keywordflow">break</span>;
<a name="l00501"></a>00501     <span class="keywordflow">case</span> IPFORWARDPROTO:
<a name="l00502"></a>00502       result = proto_trans(rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>);
<a name="l00503"></a>00503       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00504"></a>00504       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00505"></a>00505       <span class="keywordflow">break</span>;
<a name="l00506"></a>00506     <span class="keywordflow">case</span> IPFORWARDAGE:
<a name="l00507"></a>00507       result = 0;
<a name="l00508"></a>00508       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00509"></a>00509       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00510"></a>00510       <span class="keywordflow">break</span>;
<a name="l00511"></a>00511     <span class="keywordflow">case</span> IPFORWARDINFO:
<a name="l00512"></a>00512       resarr[0] = 0;
<a name="l00513"></a>00513       resarr[1] = 0;
<a name="l00514"></a>00514       *val_len  = 2 * <span class="keyword">sizeof</span>(int);
<a name="l00515"></a>00515       <span class="keywordflow">return</span> (u_char *)resarr;
<a name="l00516"></a>00516       <span class="keywordflow">break</span>;
<a name="l00517"></a>00517     <span class="keywordflow">case</span> IPFORWARDNEXTHOPAS:
<a name="l00518"></a>00518       result = -1;
<a name="l00519"></a>00519       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00520"></a>00520       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00521"></a>00521       <span class="keywordflow">break</span>;
<a name="l00522"></a>00522     <span class="keywordflow">case</span> IPFORWARDMETRIC1:
<a name="l00523"></a>00523       result = 0;
<a name="l00524"></a>00524       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00525"></a>00525       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00526"></a>00526       <span class="keywordflow">break</span>;
<a name="l00527"></a>00527     <span class="keywordflow">case</span> IPFORWARDMETRIC2:
<a name="l00528"></a>00528       result = 0;
<a name="l00529"></a>00529       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00530"></a>00530       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00531"></a>00531       <span class="keywordflow">break</span>;
<a name="l00532"></a>00532     <span class="keywordflow">case</span> IPFORWARDMETRIC3:
<a name="l00533"></a>00533       result = 0;
<a name="l00534"></a>00534       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00535"></a>00535       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00536"></a>00536       <span class="keywordflow">break</span>;
<a name="l00537"></a>00537     <span class="keywordflow">case</span> IPFORWARDMETRIC4:
<a name="l00538"></a>00538       result = 0;
<a name="l00539"></a>00539       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00540"></a>00540       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00541"></a>00541       <span class="keywordflow">break</span>;
<a name="l00542"></a>00542     <span class="keywordflow">case</span> IPFORWARDMETRIC5:
<a name="l00543"></a>00543       result = 0;
<a name="l00544"></a>00544       *val_len  = <span class="keyword">sizeof</span>(int);
<a name="l00545"></a>00545       <span class="keywordflow">return</span> (u_char *)&amp;result;
<a name="l00546"></a>00546       <span class="keywordflow">break</span>;
<a name="l00547"></a>00547     <span class="keywordflow">default</span>:
<a name="l00548"></a>00548       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00549"></a>00549       <span class="keywordflow">break</span>;
<a name="l00550"></a>00550     }  
<a name="l00551"></a>00551   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00552"></a>00552 }
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 <span class="keyword">static</span> u_char *
<a name="l00555"></a>00555 ipCidrTable (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid objid[], <span class="keywordtype">size_t</span> *objid_len,
<a name="l00556"></a>00556          <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *val_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00557"></a>00557 {
<a name="l00558"></a>00558   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>)
<a name="l00559"></a>00559     {
<a name="l00560"></a>00560     <span class="keywordflow">case</span> IPCIDRROUTEDEST:
<a name="l00561"></a>00561       <span class="keywordflow">break</span>;
<a name="l00562"></a>00562     <span class="keywordflow">default</span>:
<a name="l00563"></a>00563       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00564"></a>00564       <span class="keywordflow">break</span>;
<a name="l00565"></a>00565     }  
<a name="l00566"></a>00566   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00567"></a>00567 }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 <span class="keywordtype">void</span>
<a name="l00570"></a>00570 <a class="code" href="zserv_8h.html#ac7cee097086a03fe55c5a6a68f682c09">zebra_snmp_init</a> ()
<a name="l00571"></a>00571 {
<a name="l00572"></a>00572   <a class="code" href="smux_8h.html#a430d09d1e58132210a142a580cb8e6a8">smux_init</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>);
<a name="l00573"></a>00573   <a class="code" href="smux_8h.html#a41b4afdce9bd47a5d68ba0b0b966c8b0">REGISTER_MIB</a>(<span class="stringliteral">&quot;mibII/ipforward&quot;</span>, zebra_variables, <a class="code" href="structvariable.html">variable</a>, ipfw_oid);
<a name="l00574"></a>00574 }
<a name="l00575"></a>00575 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="zebra__snmp_8c.html">zebra_snmp.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
