<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_attr.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__attr_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_attr.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__attr_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP attributes management routines.</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1996, 97, 98, 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="vector_8h.html">vector.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="bgp__community_8h.html">bgpd/bgp_community.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="bgp__packet_8h.html">bgpd/bgp_packet.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="bgp__ecommunity_8h.html">bgpd/bgp_ecommunity.h</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">/* Attribute strings for logging. */</span>
<a name="l00042"></a><a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">00042</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a> [] = 
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044   { <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>,           <span class="stringliteral">&quot;ORIGIN&quot;</span> }, 
<a name="l00045"></a>00045   { <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>,          <span class="stringliteral">&quot;AS_PATH&quot;</span> }, 
<a name="l00046"></a>00046   { <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>,         <span class="stringliteral">&quot;NEXT_HOP&quot;</span> }, 
<a name="l00047"></a>00047   { <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>,  <span class="stringliteral">&quot;MULTI_EXIT_DISC&quot;</span> }, 
<a name="l00048"></a>00048   { <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>,       <span class="stringliteral">&quot;LOCAL_PREF&quot;</span> }, 
<a name="l00049"></a>00049   { <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>, <span class="stringliteral">&quot;ATOMIC_AGGREGATE&quot;</span> }, 
<a name="l00050"></a>00050   { <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>,       <span class="stringliteral">&quot;AGGREGATOR&quot;</span> }, 
<a name="l00051"></a>00051   { <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>,      <span class="stringliteral">&quot;COMMUNITY&quot;</span> }, 
<a name="l00052"></a>00052   { <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>,    <span class="stringliteral">&quot;ORIGINATOR_ID&quot;</span> },
<a name="l00053"></a>00053   { <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>,     <span class="stringliteral">&quot;CLUSTERLIST&quot;</span> }, 
<a name="l00054"></a>00054   { <a class="code" href="bgpd_8h.html#ad928747222cb296937e1236bd379f0dd">BGP_ATTR_DPA</a>,              <span class="stringliteral">&quot;DPA&quot;</span> },
<a name="l00055"></a>00055   { <a class="code" href="bgpd_8h.html#a46fd3dbc574337450a5fca44fc785d32">BGP_ATTR_ADVERTISER</a>,       <span class="stringliteral">&quot;ADVERTISER&quot;</span>} ,
<a name="l00056"></a>00056   { <a class="code" href="bgpd_8h.html#a5d59dc507561dc13c21cfec6b7b46e52">BGP_ATTR_RCID_PATH</a>,        <span class="stringliteral">&quot;RCID_PATH&quot;</span> },
<a name="l00057"></a>00057   { <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>,    <span class="stringliteral">&quot;MP_REACH_NLRI&quot;</span> },
<a name="l00058"></a>00058   { <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>,  <span class="stringliteral">&quot;MP_UNREACH_NLRI&quot;</span> },
<a name="l00059"></a>00059   { <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>,  <span class="stringliteral">&quot;EXT_COMMUNITIES&quot;</span> },
<a name="l00060"></a>00060   { <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>,         <span class="stringliteral">&quot;AS4_PATH&quot;</span> }, 
<a name="l00061"></a>00061   { <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>,   <span class="stringliteral">&quot;AS4_AGGREGATOR&quot;</span> }, 
<a name="l00062"></a>00062   { <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>,     <span class="stringliteral">&quot;AS_PATHLIMIT&quot;</span> },
<a name="l00063"></a>00063 };
<a name="l00064"></a><a class="code" href="bgp__attr_8c.html#a5c93897cae64d8a135b0abd7f4994b57">00064</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="bgp__attr_8c.html#a5c93897cae64d8a135b0abd7f4994b57">attr_str_max</a> = <span class="keyword">sizeof</span>(<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>)/<span class="keyword">sizeof</span>(attr_str[0]);
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">00066</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">static</span> <span class="keywordtype">void</span> *
<a name="l00069"></a><a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">00069</a> <a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = (<span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *) p;
<a name="l00072"></a>00072   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   cluster = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1c92e4c600b37dffa477ea9dab79354c">MTYPE_CLUSTER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a>));
<a name="l00075"></a>00075   cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> = val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079       cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba61ca28a5a4e9bbbf41836d06fd1e050f">MTYPE_CLUSTER_VAL</a>, val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
<a name="l00080"></a>00080       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, val-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082   <span class="keywordflow">else</span>
<a name="l00083"></a>00083     cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a> = 0;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordflow">return</span> cluster;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">/* Cluster list related functions. */</span>
<a name="l00091"></a>00091 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *
<a name="l00092"></a><a class="code" href="bgp__attr_8c.html#a18083a7910f116540140cefeec1767b2">00092</a> <a class="code" href="bgp__attr_8c.html#a18083a7910f116540140cefeec1767b2">cluster_parse</a> (<span class="keyword">struct</span> in_addr * pnt, <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> tmp;
<a name="l00095"></a>00095   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   tmp.<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00098"></a>00098   tmp.<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a> = pnt;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   cluster = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (cluster_hash, &amp;tmp, <a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a>);
<a name="l00101"></a>00101   cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
<a name="l00102"></a>00102   <span class="keywordflow">return</span> cluster;
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="keywordtype">int</span>
<a name="l00106"></a><a class="code" href="bgp__attr_8h.html#aa0d0f10149eb71be2d1f6a0547a7f5e6">00106</a> <a class="code" href="bgp__attr_8c.html#af224634d5d6d41781af26d88d9f3c85b">cluster_loop_check</a> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a> *cluster, <span class="keyword">struct</span> in_addr originator)
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00109"></a>00109     
<a name="l00110"></a>00110   <span class="keywordflow">for</span> (i = 0; i &lt; cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> / 4; i++)
<a name="l00111"></a>00111     <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>[i].s_addr == originator.s_addr)
<a name="l00112"></a>00112       <span class="keywordflow">return</span> 1;
<a name="l00113"></a>00113   <span class="keywordflow">return</span> 0;
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00117"></a><a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">00117</a> <a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster = (<span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *) p;
<a name="l00120"></a>00120   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;
<a name="l00121"></a>00121   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00122"></a>00122   caddr_t pnt;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   length = cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;
<a name="l00125"></a>00125   pnt = (caddr_t) cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>;
<a name="l00126"></a>00126   
<a name="l00127"></a>00127   while (length)
<a name="l00128"></a>00128     key += pnt[--<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>];
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00131"></a>00131 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00134"></a><a class="code" href="bgp__attr_8c.html#a50947dd6085f3f4faa6412c860de5986">00134</a> <a class="code" href="bgp__attr_8c.html#a50947dd6085f3f4faa6412c860de5986">cluster_hash_cmp</a> (<span class="keyword">const</span> <span class="keywordtype">void</span> *p1, <span class="keyword">const</span> <span class="keywordtype">void</span> *p2)
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster1 = p1;
<a name="l00137"></a>00137   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster2 = p2;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="keywordflow">return</span> (cluster1-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> == cluster2-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> &amp;&amp;
<a name="l00140"></a>00140       <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (cluster1-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, cluster2-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, cluster1-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>) == 0);
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00144"></a><a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">00144</a> <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a> *cluster)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>)
<a name="l00147"></a>00147     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba61ca28a5a4e9bbbf41836d06fd1e050f">MTYPE_CLUSTER_VAL</a>, cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>);
<a name="l00148"></a>00148   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1c92e4c600b37dffa477ea9dab79354c">MTYPE_CLUSTER</a>, cluster);
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="preprocessor">#if 0</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *
<a name="l00153"></a>00153 cluster_dup (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a> *cluster)
<a name="l00154"></a>00154 {
<a name="l00155"></a>00155   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *<span class="keyword">new</span>;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1c92e4c600b37dffa477ea9dab79354c">MTYPE_CLUSTER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a>));
<a name="l00158"></a>00158   <span class="keyword">new</span>-&gt;length = cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160   <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>)
<a name="l00161"></a>00161     {
<a name="l00162"></a>00162       <span class="keyword">new</span>-&gt;list = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba61ca28a5a4e9bbbf41836d06fd1e050f">MTYPE_CLUSTER_VAL</a>, cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
<a name="l00163"></a>00163       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;list, cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165   <span class="keywordflow">else</span>
<a name="l00166"></a>00166     <span class="keyword">new</span>-&gt;list = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00167"></a>00167   
<a name="l00168"></a>00168   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00169"></a>00169 }
<a name="l00170"></a>00170 <span class="preprocessor">#endif</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
<a name="l00172"></a>00172 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *
<a name="l00173"></a><a class="code" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">00173</a> <a class="code" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">cluster_intern</a> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a> *cluster)
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *find;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   find = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (cluster_hash, cluster, <a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a>);
<a name="l00178"></a>00178   find-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180   <span class="keywordflow">return</span> find;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="keywordtype">void</span>
<a name="l00184"></a><a class="code" href="bgp__attr_8h.html#a4693ff2be9beaf21bfe55fcde9880964">00184</a> <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a> *cluster)
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *ret;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
<a name="l00189"></a>00189     cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>--;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a> == 0)
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193       ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (cluster_hash, cluster);
<a name="l00194"></a>00194       <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (cluster);
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00199"></a><a class="code" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">00199</a> <a class="code" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">cluster_init</a> (<span class="keywordtype">void</span>)
<a name="l00200"></a>00200 {
<a name="l00201"></a>00201   cluster_hash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a>, <a class="code" href="bgp__attr_8c.html#a50947dd6085f3f4faa6412c860de5986">cluster_hash_cmp</a>);
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00205"></a><a class="code" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">00205</a> <a class="code" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">cluster_finish</a> (<span class="keywordtype">void</span>)
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207   <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (cluster_hash);
<a name="l00208"></a>00208   cluster_hash = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="comment">/* Unknown transit attribute. */</span>
<a name="l00212"></a><a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">00212</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00215"></a><a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">00215</a> <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (<span class="keyword">struct</span> <a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a>)
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217   <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>)
<a name="l00218"></a>00218     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>);
<a name="l00219"></a>00219   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa2ed4f19b85e0b74659b8131e34e83df">MTYPE_TRANSIT</a>, transit);
<a name="l00220"></a>00220 }
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 <span class="keyword">static</span> <span class="keywordtype">void</span> *
<a name="l00224"></a><a class="code" href="bgp__attr_8c.html#a182ab19c92782f43ccbfe5ff1d74bf79">00224</a> <a class="code" href="bgp__attr_8c.html#a182ab19c92782f43ccbfe5ff1d74bf79">transit_hash_alloc</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00225"></a>00225 {
<a name="l00226"></a>00226   <span class="comment">/* Transit structure is already allocated.  */</span>
<a name="l00227"></a>00227   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00228"></a>00228 }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *
<a name="l00231"></a><a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">00231</a> <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (<span class="keyword">struct</span> <a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a>)
<a name="l00232"></a>00232 {
<a name="l00233"></a>00233   <span class="keyword">struct </span>transit *find;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   find = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (transit_hash, transit, <a class="code" href="bgp__attr_8c.html#a182ab19c92782f43ccbfe5ff1d74bf79">transit_hash_alloc</a>);
<a name="l00236"></a>00236   <span class="keywordflow">if</span> (find != transit)
<a name="l00237"></a>00237     <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (transit);
<a name="l00238"></a>00238   find-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>++;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="keywordflow">return</span> find;
<a name="l00241"></a>00241 }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="keywordtype">void</span>
<a name="l00244"></a><a class="code" href="bgp__attr_8h.html#ab76373f263e6cfc84478d7e29a350360">00244</a> <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (<span class="keyword">struct</span> <a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a>)
<a name="l00245"></a>00245 {
<a name="l00246"></a>00246   <span class="keyword">struct </span>transit *ret;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248   <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
<a name="l00249"></a>00249     transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>--;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a> == 0)
<a name="l00252"></a>00252     {
<a name="l00253"></a>00253       ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (transit_hash, transit);
<a name="l00254"></a>00254       <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (transit);
<a name="l00255"></a>00255     }
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00259"></a><a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">00259</a> <a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261   <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * <a class="code" href="structtransit.html">transit</a> = (<span class="keyword">struct </span>transit *) p;
<a name="l00262"></a>00262   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;
<a name="l00263"></a>00263   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00264"></a>00264   caddr_t pnt;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   length = transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>;
<a name="l00267"></a>00267   pnt = (caddr_t) transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>;
<a name="l00268"></a>00268   
<a name="l00269"></a>00269   while (length)
<a name="l00270"></a>00270     key += pnt[--<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>];
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00276"></a><a class="code" href="bgp__attr_8c.html#af01f647e7433ef979c1956a7cd31cfbf">00276</a> <a class="code" href="bgp__attr_8c.html#af01f647e7433ef979c1956a7cd31cfbf">transit_hash_cmp</a> (<span class="keyword">const</span> <span class="keywordtype">void</span> *p1, <span class="keyword">const</span> <span class="keywordtype">void</span> *p2)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * transit1 = p1;
<a name="l00279"></a>00279   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * transit2 = p2;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="keywordflow">return</span> (transit1-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> == transit2-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> &amp;&amp;
<a name="l00282"></a>00282       <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (transit1-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, transit2-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, transit1-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>) == 0);
<a name="l00283"></a>00283 }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00286"></a><a class="code" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">00286</a> <a class="code" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">transit_init</a> (<span class="keywordtype">void</span>)
<a name="l00287"></a>00287 {
<a name="l00288"></a>00288   transit_hash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a>, <a class="code" href="bgp__attr_8c.html#af01f647e7433ef979c1956a7cd31cfbf">transit_hash_cmp</a>);
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00292"></a><a class="code" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">00292</a> <a class="code" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">transit_finish</a> (<span class="keywordtype">void</span>)
<a name="l00293"></a>00293 {
<a name="l00294"></a>00294   <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (transit_hash);
<a name="l00295"></a>00295   transit_hash = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 <span class="comment">/* Attribute hash routines. */</span>
<a name="l00299"></a><a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">00299</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *
<a name="l00302"></a><a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">00302</a> <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a> (<span class="keywordtype">void</span>)
<a name="l00303"></a>00303 {
<a name="l00304"></a>00304   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba71f75806fa247a292b0bb76e802dd55b">MTYPE_ATTR_EXTRA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr__extra.html">attr_extra</a>));
<a name="l00305"></a>00305 }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="keywordtype">void</span>
<a name="l00308"></a><a class="code" href="bgp__attr_8h.html#a6c2954236690cd890aa3b2bec5d2d28f">00308</a> <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00311"></a>00311     {
<a name="l00312"></a>00312       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba71f75806fa247a292b0bb76e802dd55b">MTYPE_ATTR_EXTRA</a>, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l00313"></a>00313       attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *
<a name="l00318"></a><a class="code" href="bgp__attr_8h.html#ae3de37d8f77124be30e5cede4bc12fe7">00318</a> <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00319"></a>00319 {
<a name="l00320"></a>00320   <span class="keywordflow">if</span> (!attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00321"></a>00321     attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
<a name="l00322"></a>00322   <span class="keywordflow">return</span> attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00323"></a>00323 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="comment">/* Shallow copy of an attribute</span>
<a name="l00326"></a>00326 <span class="comment"> * Though, not so shallow that it doesn&#39;t copy the contents</span>
<a name="l00327"></a>00327 <span class="comment"> * of the attr_extra pointed to by &#39;extra&#39;</span>
<a name="l00328"></a>00328 <span class="comment"> */</span>
<a name="l00329"></a>00329 <span class="keywordtype">void</span>
<a name="l00330"></a><a class="code" href="bgp__attr_8h.html#aacb4d7f2da9bcb3664e1b9bac63704c7">00330</a> <a class="code" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<span class="keyword">new</span>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *orig)
<a name="l00331"></a>00331 {
<a name="l00332"></a>00332   *<span class="keyword">new</span> = *orig;
<a name="l00333"></a>00333   <span class="keywordflow">if</span> (orig-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335       <span class="keyword">new</span>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
<a name="l00336"></a>00336       *<span class="keyword">new</span>-&gt;extra = *orig-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00337"></a>00337     }
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span>
<a name="l00341"></a><a class="code" href="bgp__attr_8h.html#abf6f340c9796631aa1b7bf14bcadd0f8">00341</a> <a class="code" href="bgp__attr_8c.html#abf6f340c9796631aa1b7bf14bcadd0f8">attr_count</a> (<span class="keywordtype">void</span>)
<a name="l00342"></a>00342 {
<a name="l00343"></a>00343   <span class="keywordflow">return</span> attrhash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
<a name="l00344"></a>00344 }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span>
<a name="l00347"></a><a class="code" href="bgp__attr_8h.html#a7802e598375cc4a09f11e175b70f32ae">00347</a> <a class="code" href="bgp__attr_8c.html#a7802e598375cc4a09f11e175b70f32ae">attr_unknown_count</a> (<span class="keywordtype">void</span>)
<a name="l00348"></a>00348 {
<a name="l00349"></a>00349   <span class="keywordflow">return</span> transit_hash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
<a name="l00350"></a>00350 }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00353"></a><a class="code" href="bgp__attr_8h.html#ae179c9d7478d3b6fabbb2e03dd00fb4f">00353</a> <a class="code" href="bgp__attr_8c.html#aef00519644383d0b101d93d5c58287e5">attrhash_key_make</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00354"></a>00354 {
<a name="l00355"></a>00355   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * <a class="code" href="structattr.html">attr</a> = (<span class="keyword">struct </span>attr *) p;
<a name="l00356"></a>00356   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   key += attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
<a name="l00359"></a>00359   key += attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr;
<a name="l00360"></a>00360   key += attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
<a name="l00361"></a>00361   key += attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>;
<a name="l00362"></a>00362   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
<a name="l00363"></a>00363     {
<a name="l00364"></a>00364       key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>;
<a name="l00365"></a>00365       key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367   
<a name="l00368"></a>00368   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00369"></a>00369     {
<a name="l00370"></a>00370       key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>;
<a name="l00371"></a>00371       key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr;
<a name="l00372"></a>00372       key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>;
<a name="l00373"></a>00373       key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>.s_addr;
<a name="l00374"></a>00374     }
<a name="l00375"></a>00375   
<a name="l00376"></a>00376   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l00377"></a>00377     key += <a class="code" href="bgp__aspath_8c.html#a0ff2c762b3aea1084db8500839a8d314">aspath_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l00379"></a>00379     key += <a class="code" href="bgp__community_8c.html#ad929d0c5734e5a2df900d29ab3c59921">community_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l00380"></a>00380   
<a name="l00381"></a>00381   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
<a name="l00384"></a>00384         key += <a class="code" href="bgp__ecommunity_8c.html#adb13cb51e62ac1f0e4a3cf6137748409">ecommunity_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
<a name="l00385"></a>00385       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
<a name="l00386"></a>00386         key += <a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
<a name="l00387"></a>00387       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l00388"></a>00388         key += <a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
<a name="l00389"></a>00389 
<a name="l00390"></a>00390 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span>      {
<a name="l00392"></a>00392         <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00393"></a>00393         
<a name="l00394"></a>00394         key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>;
<a name="l00395"></a>00395         <span class="keywordflow">for</span> (i = 0; i &lt; 16; i++)
<a name="l00396"></a>00396           key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global.s6_addr[i];
<a name="l00397"></a>00397         for (i = 0; i &lt; 16; i++)
<a name="l00398"></a>00398           key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local.s6_addr[i];
<a name="l00399"></a>00399       }
<a name="l00400"></a>00400 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00401"></a>00401     }
<a name="l00402"></a>00402 
<a name="l00403"></a>00403   <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00404"></a>00404 }
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="keywordtype">int</span>
<a name="l00407"></a><a class="code" href="bgp__attr_8h.html#a284795cc2efe70f13274d1b1a791f049">00407</a> <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (<span class="keyword">const</span> <span class="keywordtype">void</span> *p1, <span class="keyword">const</span> <span class="keywordtype">void</span> *p2)
<a name="l00408"></a>00408 {
<a name="l00409"></a>00409   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr1 = p1;
<a name="l00410"></a>00410   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr2 = p2;
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <span class="keywordflow">if</span> (attr1-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> == attr2-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>
<a name="l00413"></a>00413       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> == attr2-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>
<a name="l00414"></a>00414       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == attr2-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr
<a name="l00415"></a>00415       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> == attr2-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>
<a name="l00416"></a>00416       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> == attr2-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>
<a name="l00417"></a>00417       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> == attr2-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>
<a name="l00418"></a>00418       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> == attr2-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>
<a name="l00419"></a>00419       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>
<a name="l00420"></a>00420       &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
<a name="l00421"></a>00421     {
<a name="l00422"></a>00422       <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae1 = attr1-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00423"></a>00423       <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae2 = attr2-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00424"></a>00424       
<a name="l00425"></a>00425       <span class="keywordflow">if</span> (ae1 &amp;&amp; ae2
<a name="l00426"></a>00426           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>
<a name="l00427"></a>00427           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr == ae2-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr
<a name="l00428"></a>00428           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>
<a name="l00429"></a>00429 #ifdef HAVE_IPV6
<a name="l00430"></a>00430           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == ae2-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>
<a name="l00431"></a>00431           &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_global, &amp;ae2-&gt;mp_nexthop_global)
<a name="l00432"></a>00432           &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_local, &amp;ae2-&gt;mp_nexthop_local)
<a name="l00433"></a>00433 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l00434"></a>00434           &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;ae1-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, &amp;ae2-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>)
<a name="l00435"></a>00435           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>
<a name="l00436"></a>00436           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>
<a name="l00437"></a>00437           &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> == ae2-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l00438"></a>00438         <span class="keywordflow">return</span> 1;
<a name="l00439"></a>00439       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ae1 || ae2)
<a name="l00440"></a>00440         <span class="keywordflow">return</span> 0;
<a name="l00441"></a>00441       <span class="comment">/* neither attribute has extra attributes, so they&#39;re same */</span>
<a name="l00442"></a>00442       <span class="keywordflow">return</span> 1;
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444   <span class="keywordflow">else</span>
<a name="l00445"></a>00445     <span class="keywordflow">return</span> 0;
<a name="l00446"></a>00446 }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00449"></a><a class="code" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">00449</a> <a class="code" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">attrhash_init</a> (<span class="keywordtype">void</span>)
<a name="l00450"></a>00450 {
<a name="l00451"></a>00451   attrhash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#aef00519644383d0b101d93d5c58287e5">attrhash_key_make</a>, <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a>);
<a name="l00452"></a>00452 }
<a name="l00453"></a>00453 
<a name="l00454"></a>00454 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00455"></a><a class="code" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">00455</a> <a class="code" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">attrhash_finish</a> (<span class="keywordtype">void</span>)
<a name="l00456"></a>00456 {
<a name="l00457"></a>00457   <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (attrhash);
<a name="l00458"></a>00458   attrhash = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00459"></a>00459 }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00462"></a><a class="code" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">00462</a> <a class="code" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">attr_show_all_iterator</a> (<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *backet, <span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00463"></a>00463 {
<a name="l00464"></a>00464   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a> = backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;attr[%ld] nexthop %s%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>, 
<a name="l00467"></a>00467        inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00468"></a>00468 }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470 <span class="keywordtype">void</span>
<a name="l00471"></a><a class="code" href="bgp__attr_8h.html#aba29399774780ecd129ed9aca74f62e3">00471</a> <a class="code" href="bgp__attr_8c.html#ac5b48483843ddf098f1b39f25d174ae9">attr_show_all</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00472"></a>00472 {
<a name="l00473"></a>00473   <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a> (attrhash, 
<a name="l00474"></a>00474         (<span class="keywordtype">void</span> (*)(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *, <span class="keywordtype">void</span> *))
<a name="l00475"></a>00475         <a class="code" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">attr_show_all_iterator</a>,
<a name="l00476"></a>00476         vty);
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 <span class="keyword">static</span> <span class="keywordtype">void</span> *
<a name="l00480"></a><a class="code" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">00480</a> <a class="code" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">bgp_attr_hash_alloc</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00481"></a>00481 {
<a name="l00482"></a>00482   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = (<span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *) p;
<a name="l00483"></a>00483   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>;
<a name="l00484"></a>00484 
<a name="l00485"></a>00485   attr = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad7fb859bb30af87be51498b5f1417fc5">MTYPE_ATTR</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
<a name="l00486"></a>00486   *attr = *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00487"></a>00487   <span class="keywordflow">if</span> (val-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00488"></a>00488     {
<a name="l00489"></a>00489       attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a> ();
<a name="l00490"></a>00490       *attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = *val-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00491"></a>00491     }
<a name="l00492"></a>00492   attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a> = 0;
<a name="l00493"></a>00493   <span class="keywordflow">return</span> attr;
<a name="l00494"></a>00494 }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496 <span class="comment">/* Internet argument attribute. */</span>
<a name="l00497"></a>00497 <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *
<a name="l00498"></a><a class="code" href="bgp__attr_8h.html#a791a2194bc7791b769c6ce55ac37b387">00498</a> <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00499"></a>00499 {
<a name="l00500"></a>00500   <span class="keyword">struct </span>attr *find;
<a name="l00501"></a>00501 
<a name="l00502"></a>00502   <span class="comment">/* Intern referenced strucutre. */</span>
<a name="l00503"></a>00503   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l00504"></a>00504     {
<a name="l00505"></a>00505       <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
<a name="l00506"></a>00506     attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00507"></a>00507       <span class="keywordflow">else</span>
<a name="l00508"></a>00508     attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>++;
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l00511"></a>00511     {
<a name="l00512"></a>00512       <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
<a name="l00513"></a>00513     attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="bgp__community_8c.html#a13f3f19052ddd0201e67b155a5d55657">community_intern</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l00514"></a>00514       <span class="keywordflow">else</span>
<a name="l00515"></a>00515     attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>++;
<a name="l00516"></a>00516     }
<a name="l00517"></a>00517   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00518"></a>00518     {
<a name="l00519"></a>00519       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00520"></a>00520       
<a name="l00521"></a>00521       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
<a name="l00522"></a>00522         {
<a name="l00523"></a>00523           <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
<a name="l00524"></a>00524             attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> = <a class="code" href="bgp__ecommunity_8c.html#aef15f1927a9085dd8f1df7fa612794db">ecommunity_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
<a name="l00525"></a>00525           <span class="keywordflow">else</span>
<a name="l00526"></a>00526             attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>++;
<a name="l00527"></a>00527         }
<a name="l00528"></a>00528       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
<a name="l00529"></a>00529         {
<a name="l00530"></a>00530           <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
<a name="l00531"></a>00531             attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> = <a class="code" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">cluster_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
<a name="l00532"></a>00532           <span class="keywordflow">else</span>
<a name="l00533"></a>00533             attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
<a name="l00534"></a>00534         }
<a name="l00535"></a>00535       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l00536"></a>00536         {
<a name="l00537"></a>00537           <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
<a name="l00538"></a>00538             attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
<a name="l00539"></a>00539           <span class="keywordflow">else</span>
<a name="l00540"></a>00540             attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>++;
<a name="l00541"></a>00541         }
<a name="l00542"></a>00542     }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544   find = (<span class="keyword">struct </span>attr *) <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (attrhash, attr, <a class="code" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">bgp_attr_hash_alloc</a>);
<a name="l00545"></a>00545   find-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>++;
<a name="l00546"></a>00546 
<a name="l00547"></a>00547   <span class="keywordflow">return</span> find;
<a name="l00548"></a>00548 }
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 
<a name="l00551"></a>00551 <span class="comment">/* Make network statement&#39;s attribute. */</span>
<a name="l00552"></a>00552 <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *
<a name="l00553"></a><a class="code" href="bgp__attr_8h.html#ac536a0e705f5a7904d87a6eee2ee58d3">00553</a> <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char <a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l00554"></a>00554 {
<a name="l00555"></a>00555   memset (attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
<a name="l00556"></a>00556   <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr);
<a name="l00557"></a>00557   
<a name="l00558"></a>00558   attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = <a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
<a name="l00559"></a>00559   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
<a name="l00560"></a>00560   attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
<a name="l00561"></a>00561   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
<a name="l00562"></a>00562   attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
<a name="l00563"></a>00563   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<a name="l00564"></a>00564 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00565"></a>00565 <span class="preprocessor"></span>  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<a name="l00566"></a>00566 <span class="preprocessor">#endif</span>
<a name="l00567"></a>00567 <span class="preprocessor"></span>
<a name="l00568"></a>00568   <span class="keywordflow">return</span> attr;
<a name="l00569"></a>00569 }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="comment">/* Make network statement&#39;s attribute. */</span>
<a name="l00573"></a>00573 <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *
<a name="l00574"></a><a class="code" href="bgp__attr_8h.html#a7967bc97d4ef6d342e6ad5b88396aa57">00574</a> <a class="code" href="bgp__attr_8c.html#a975568591569d47a1a18abf72484138a">bgp_attr_default_intern</a> (u_char <a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>)
<a name="l00575"></a>00575 {
<a name="l00576"></a>00576   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr;
<a name="l00577"></a>00577   <span class="keyword">struct </span>attr *<span class="keyword">new</span>;
<a name="l00578"></a>00578   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;
<a name="l00579"></a>00579   
<a name="l00580"></a>00580   memset (&amp;attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
<a name="l00581"></a>00581   attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;attr);
<a name="l00582"></a>00582   
<a name="l00583"></a>00583   <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a>(&amp;attr, origin);
<a name="l00584"></a>00584 
<a name="l00585"></a>00585   <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr);
<a name="l00586"></a>00586   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l00587"></a>00587   
<a name="l00588"></a>00588   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
<a name="l00589"></a>00589   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00590"></a>00590 }
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *
<a name="l00593"></a><a class="code" href="bgp__attr_8h.html#a33e250750dda84a91bd844fde16ec3cf">00593</a> <a class="code" href="bgp__attr_8c.html#a70102643d18571653470b272db04c205">bgp_attr_aggregate_intern</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, u_char <a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>,
<a name="l00594"></a>00594                <span class="keyword">struct</span> <a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>,
<a name="l00595"></a>00595                <span class="keyword">struct</span> <a class="code" href="structcommunity.html">community</a> *<a class="code" href="structcommunity.html">community</a>, <span class="keywordtype">int</span> as_set)
<a name="l00596"></a>00596 {
<a name="l00597"></a>00597   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr;
<a name="l00598"></a>00598   <span class="keyword">struct </span>attr *<span class="keyword">new</span>;
<a name="l00599"></a>00599   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;
<a name="l00600"></a>00600 
<a name="l00601"></a>00601   memset (&amp;attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
<a name="l00602"></a>00602   attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;attr);
<a name="l00603"></a>00603   
<a name="l00604"></a>00604   <span class="comment">/* Origin attribute. */</span>
<a name="l00605"></a>00605   attr.<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = origin;
<a name="l00606"></a>00606   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="comment">/* AS path attribute. */</span>
<a name="l00609"></a>00609   <span class="keywordflow">if</span> (aspath)
<a name="l00610"></a>00610     attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (aspath);
<a name="l00611"></a>00611   <span class="keywordflow">else</span>
<a name="l00612"></a>00612     attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
<a name="l00613"></a>00613   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
<a name="l00614"></a>00614 
<a name="l00615"></a>00615   <span class="comment">/* Next hop attribute.  */</span>
<a name="l00616"></a>00616   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<a name="l00617"></a>00617 
<a name="l00618"></a>00618   <span class="keywordflow">if</span> (community)
<a name="l00619"></a>00619     {
<a name="l00620"></a>00620       attr.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = community;
<a name="l00621"></a>00621       attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l00622"></a>00622     }
<a name="l00623"></a>00623 
<a name="l00624"></a>00624   attre-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
<a name="l00625"></a>00625 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00626"></a>00626 <span class="preprocessor"></span>  attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<a name="l00627"></a>00627 <span class="preprocessor">#endif</span>
<a name="l00628"></a>00628 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (! as_set)
<a name="l00629"></a>00629     attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l00630"></a>00630   attr.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
<a name="l00631"></a>00631   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l00632"></a>00632     attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
<a name="l00633"></a>00633   <span class="keywordflow">else</span>
<a name="l00634"></a>00634     attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l00635"></a>00635   attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a> = bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;attr);
<a name="l00638"></a>00638   <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l00639"></a>00639   
<a name="l00640"></a>00640   <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
<a name="l00641"></a>00641   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00642"></a>00642 }
<a name="l00643"></a>00643 
<a name="l00644"></a>00644 <span class="comment">/* Free bgp attribute and aspath. */</span>
<a name="l00645"></a>00645 <span class="keywordtype">void</span>
<a name="l00646"></a><a class="code" href="bgp__attr_8h.html#a926e3fd006b9ff905738af811f683207">00646</a> <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00647"></a>00647 {
<a name="l00648"></a>00648   <span class="keyword">struct </span>attr *ret;
<a name="l00649"></a>00649   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
<a name="l00650"></a>00650   <span class="keyword">struct </span><a class="code" href="structcommunity.html">community</a> *<a class="code" href="structcommunity.html">community</a>;
<a name="l00651"></a>00651   <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<a class="code" href="structecommunity.html">ecommunity</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00652"></a>00652   <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00653"></a>00653   <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00654"></a>00654 
<a name="l00655"></a>00655   <span class="comment">/* Decrement attribute reference. */</span>
<a name="l00656"></a>00656   attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>--;
<a name="l00657"></a>00657   aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
<a name="l00658"></a>00658   community = attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>;
<a name="l00659"></a>00659   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00660"></a>00660     {
<a name="l00661"></a>00661       ecommunity = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>;
<a name="l00662"></a>00662       cluster = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>;
<a name="l00663"></a>00663       transit = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>;
<a name="l00664"></a>00664     }
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   <span class="comment">/* If reference becomes zero then free attribute object. */</span>
<a name="l00667"></a>00667   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a> == 0)
<a name="l00668"></a>00668     {    
<a name="l00669"></a>00669       ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (attrhash, attr);
<a name="l00670"></a>00670       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ret != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00671"></a>00671       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (attr);
<a name="l00672"></a>00672       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad7fb859bb30af87be51498b5f1417fc5">MTYPE_ATTR</a>, attr);
<a name="l00673"></a>00673     }
<a name="l00674"></a>00674 
<a name="l00675"></a>00675   <span class="comment">/* aspath refcount shoud be decrement. */</span>
<a name="l00676"></a>00676   <span class="keywordflow">if</span> (aspath)
<a name="l00677"></a>00677     <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (aspath);
<a name="l00678"></a>00678   <span class="keywordflow">if</span> (community)
<a name="l00679"></a>00679     <a class="code" href="bgp__community_8c.html#add62474cd8c7fed6877c64537b6c78a2">community_unintern</a> (community);
<a name="l00680"></a>00680   <span class="keywordflow">if</span> (ecommunity)
<a name="l00681"></a>00681     <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (ecommunity);
<a name="l00682"></a>00682   <span class="keywordflow">if</span> (cluster)
<a name="l00683"></a>00683     <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (cluster);
<a name="l00684"></a>00684   <span class="keywordflow">if</span> (transit)
<a name="l00685"></a>00685     <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (transit);
<a name="l00686"></a>00686 }
<a name="l00687"></a>00687 
<a name="l00688"></a>00688 <span class="keywordtype">void</span>
<a name="l00689"></a><a class="code" href="bgp__attr_8h.html#a2af32d5c1ce0c936047b00db0b8c9a0d">00689</a> <a class="code" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00690"></a>00690 {
<a name="l00691"></a>00691   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> &amp;&amp; ! attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
<a name="l00692"></a>00692     <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00693"></a>00693   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> &amp;&amp; ! attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
<a name="l00694"></a>00694     <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l00695"></a>00695   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l00696"></a>00696     {
<a name="l00697"></a>00697       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l00698"></a>00698       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
<a name="l00699"></a>00699         <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
<a name="l00700"></a>00700       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
<a name="l00701"></a>00701         <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
<a name="l00702"></a>00702       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
<a name="l00703"></a>00703         <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
<a name="l00704"></a>00704     }
<a name="l00705"></a>00705 }
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 <span class="comment">/* Parse AS_PATHLIMIT attribute in an UPDATE */</span>
<a name="l00708"></a>00708 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00709"></a><a class="code" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">00709</a> <a class="code" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">bgp_attr_aspathlimit</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
<a name="l00710"></a>00710                       <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag, u_char *startp)
<a name="l00711"></a>00711 {
<a name="l00712"></a>00712   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l00713"></a>00713   
<a name="l00714"></a>00714   total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l00715"></a>00715   
<a name="l00716"></a>00716   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)
<a name="l00717"></a>00717        || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>))
<a name="l00718"></a>00718     {
<a name="l00719"></a>00719       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00720"></a>00720         <span class="stringliteral">&quot;AS-Pathlimit attribute flag isn&#39;t transitive %d&quot;</span>, flag);
<a name="l00721"></a>00721       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00722"></a>00722                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00723"></a>00723                  <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
<a name="l00724"></a>00724                  startp, total);
<a name="l00725"></a>00725       <span class="keywordflow">return</span> -1;
<a name="l00726"></a>00726     }
<a name="l00727"></a>00727   
<a name="l00728"></a>00728   <span class="keywordflow">if</span> (length != 5)
<a name="l00729"></a>00729     {
<a name="l00730"></a>00730       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00731"></a>00731         <span class="stringliteral">&quot;AS-Pathlimit length, %u, is not 5&quot;</span>, length);
<a name="l00732"></a>00732       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00733"></a>00733                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00734"></a>00734                  <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
<a name="l00735"></a>00735                  startp, total);
<a name="l00736"></a>00736       <span class="keywordflow">return</span> -1;
<a name="l00737"></a>00737     }
<a name="l00738"></a>00738   
<a name="l00739"></a>00739   attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
<a name="l00740"></a>00740   attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
<a name="l00741"></a>00741   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
<a name="l00742"></a>00742   <span class="keywordflow">return</span> 0;
<a name="l00743"></a>00743 }
<a name="l00744"></a>00744 <span class="comment">/* Get origin attribute of the update message. */</span>
<a name="l00745"></a>00745 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00746"></a><a class="code" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">00746</a> <a class="code" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">bgp_attr_origin</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l00747"></a>00747          <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag, u_char *startp)
<a name="l00748"></a>00748 {
<a name="l00749"></a>00749   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="comment">/* total is entire attribute length include Attribute Flags (1),</span>
<a name="l00752"></a>00752 <span class="comment">     Attribute Type code (1) and Attribute length (1 or 2).  */</span>
<a name="l00753"></a>00753   total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l00754"></a>00754 
<a name="l00755"></a>00755   <span class="comment">/* If any recognized attribute has Attribute Flags that conflict</span>
<a name="l00756"></a>00756 <span class="comment">     with the Attribute Type Code, then the Error Subcode is set to</span>
<a name="l00757"></a>00757 <span class="comment">     Attribute Flags Error.  The Data field contains the erroneous</span>
<a name="l00758"></a>00758 <span class="comment">     attribute (type, length and value). */</span>
<a name="l00759"></a>00759   <span class="keywordflow">if</span> (flag != <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)
<a name="l00760"></a>00760     {
<a name="l00761"></a>00761       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00762"></a>00762         <span class="stringliteral">&quot;Origin attribute flag isn&#39;t transitive %d&quot;</span>, flag);
<a name="l00763"></a>00763       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00764"></a>00764                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00765"></a>00765                  <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
<a name="l00766"></a>00766                  startp, total);
<a name="l00767"></a>00767       <span class="keywordflow">return</span> -1;
<a name="l00768"></a>00768     }
<a name="l00769"></a>00769 
<a name="l00770"></a>00770   <span class="comment">/* If any recognized attribute has Attribute Length that conflicts</span>
<a name="l00771"></a>00771 <span class="comment">     with the expected length (based on the attribute type code), then</span>
<a name="l00772"></a>00772 <span class="comment">     the Error Subcode is set to Attribute Length Error.  The Data</span>
<a name="l00773"></a>00773 <span class="comment">     field contains the erroneous attribute (type, length and</span>
<a name="l00774"></a>00774 <span class="comment">     value). */</span>
<a name="l00775"></a>00775   <span class="keywordflow">if</span> (length != 1)
<a name="l00776"></a>00776     {
<a name="l00777"></a>00777       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Origin attribute length is not one %d&quot;</span>,
<a name="l00778"></a>00778         length);
<a name="l00779"></a>00779       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00780"></a>00780                  <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
<a name="l00781"></a>00781                  startp, total);
<a name="l00782"></a>00782       <span class="keywordflow">return</span> -1;
<a name="l00783"></a>00783     }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785   <span class="comment">/* Fetch origin attribute. */</span>
<a name="l00786"></a>00786   attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
<a name="l00787"></a>00787 
<a name="l00788"></a>00788   <span class="comment">/* If the ORIGIN attribute has an undefined value, then the Error</span>
<a name="l00789"></a>00789 <span class="comment">     Subcode is set to Invalid Origin Attribute.  The Data field</span>
<a name="l00790"></a>00790 <span class="comment">     contains the unrecognized attribute (type, length and value). */</span>
<a name="l00791"></a>00791   <span class="keywordflow">if</span> ((attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>)
<a name="l00792"></a>00792       &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#acac0be58fcc8e2a10a18254e0a272732">BGP_ORIGIN_EGP</a>)
<a name="l00793"></a>00793       &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#ab150461b04b7be7ff0068c004b732bb9">BGP_ORIGIN_INCOMPLETE</a>))
<a name="l00794"></a>00794     {
<a name="l00795"></a>00795       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Origin attribute value is invalid %d&quot;</span>,
<a name="l00796"></a>00796           attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);
<a name="l00797"></a>00797 
<a name="l00798"></a>00798       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00799"></a>00799                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00800"></a>00800                  <a class="code" href="bgpd_8h.html#a04d6c2468c21355ee9c5c1db6bb1cf01">BGP_NOTIFY_UPDATE_INVAL_ORIGIN</a>,
<a name="l00801"></a>00801                  startp, total);
<a name="l00802"></a>00802       <span class="keywordflow">return</span> -1;
<a name="l00803"></a>00803     }
<a name="l00804"></a>00804 
<a name="l00805"></a>00805   <span class="comment">/* Set oring attribute flag. */</span>
<a name="l00806"></a>00806   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="keywordflow">return</span> 0;
<a name="l00809"></a>00809 }
<a name="l00810"></a>00810 <span class="comment">/* Parse AS path information.  This function is wrapper of aspath_parse.</span>
<a name="l00811"></a>00811 <span class="comment"> *</span>
<a name="l00812"></a>00812 <span class="comment"> * Parses AS_PATH or AS4_PATH.</span>
<a name="l00813"></a>00813 <span class="comment"> *</span>
<a name="l00814"></a>00814 <span class="comment"> * Returns: if valid: address of struct aspath in the hash of known aspaths,</span>
<a name="l00815"></a>00815 <span class="comment"> *                    with reference count incremented.</span>
<a name="l00816"></a>00816 <span class="comment"> *              else: NULL</span>
<a name="l00817"></a>00817 <span class="comment"> *</span>
<a name="l00818"></a>00818 <span class="comment"> * NB: empty AS path (length == 0) is valid.  The returned struct aspath will</span>
<a name="l00819"></a>00819 <span class="comment"> *     have segments == NULL and str == zero length string (unique).</span>
<a name="l00820"></a>00820 <span class="comment"> */</span>
<a name="l00821"></a>00821 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *
<a name="l00822"></a><a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">00822</a> <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l00823"></a>00823          <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag, u_char *startp, <span class="keywordtype">int</span> as4_path)
<a name="l00824"></a>00824 {
<a name="l00825"></a>00825   u_char require ;
<a name="l00826"></a>00826   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *asp ;
<a name="l00827"></a>00827 
<a name="l00828"></a>00828   <span class="comment">/* Check the attribute flags                                          */</span>
<a name="l00829"></a>00829   require = as4_path ? <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a> | <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>
<a name="l00830"></a>00830                      :                          <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a> ;
<a name="l00831"></a>00831 
<a name="l00832"></a>00832   <span class="keywordflow">if</span> ((flag &amp; (<a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a> | <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)) != require)
<a name="l00833"></a>00833     {
<a name="l00834"></a>00834       <span class="keyword">const</span> <span class="keywordtype">char</span>* path_type ;
<a name="l00835"></a>00835       <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l00836"></a>00836 
<a name="l00837"></a>00837       path_type = as4_path ? <span class="stringliteral">&quot;AS4_PATH&quot;</span> : <span class="stringliteral">&quot;AS_PATH&quot;</span> ;
<a name="l00838"></a>00838 
<a name="l00839"></a>00839       <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
<a name="l00840"></a>00840       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00841"></a>00841             <span class="stringliteral">&quot;%s attribute flag isn&#39;t transitive %d&quot;</span>, path_type, flag) ;
<a name="l00842"></a>00842 
<a name="l00843"></a>00843       <span class="keywordflow">if</span> ((flag &amp; <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>) != (require &amp; BGP_ATTR_FLAG_OPTIONAL))
<a name="l00844"></a>00844         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR,
<a name="l00845"></a>00845             <span class="stringliteral">&quot;%s attribute flag must %sbe optional %d&quot;</span>, path_type,
<a name="l00846"></a>00846             (flag &amp; BGP_ATTR_FLAG_OPTIONAL) ? <span class="stringliteral">&quot;not &quot;</span> : <span class="stringliteral">&quot;&quot;</span>, flag) ;
<a name="l00847"></a>00847 
<a name="l00848"></a>00848       total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l00849"></a>00849 
<a name="l00850"></a>00850       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00851"></a>00851                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00852"></a>00852                  <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
<a name="l00853"></a>00853                  startp, total);
<a name="l00854"></a>00854 
<a name="l00855"></a>00855       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ;
<a name="l00856"></a>00856     } ;
<a name="l00857"></a>00857 
<a name="l00858"></a>00858   <span class="comment">/* Parse the AS_PATH/AS4_PATH body.</span>
<a name="l00859"></a>00859 <span class="comment">   *</span>
<a name="l00860"></a>00860 <span class="comment">   * For AS_PATH  peer with AS4 =&gt; 4Byte ASN otherwise 2Byte ASN</span>
<a name="l00861"></a>00861 <span class="comment">   *     AS4_PATH 4Byte ASN</span>
<a name="l00862"></a>00862 <span class="comment">   */</span>
<a name="l00863"></a>00863   asp = <a class="code" href="bgp__aspath_8c.html#ac9e8aff45338b803e560318286e3f2af">aspath_parse</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length,
<a name="l00864"></a>00864                as4_path || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>), as4_path) ;
<a name="l00865"></a>00865 
<a name="l00866"></a>00866   <span class="keywordflow">if</span> (asp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00867"></a>00867     {
<a name="l00868"></a>00868       attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (as4_path ? <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>
<a name="l00869"></a>00869                                             : <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>) ;
<a name="l00870"></a>00870     }
<a name="l00871"></a>00871   <span class="keywordflow">else</span>
<a name="l00872"></a>00872     {
<a name="l00873"></a>00873       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Malformed AS path length is %d&quot;</span>, length);
<a name="l00874"></a>00874 
<a name="l00875"></a>00875       <span class="comment">/* TODO: should BGP_NOTIFY_UPDATE_MAL_AS_PATH be sent for AS4_PATH ??  */</span>
<a name="l00876"></a>00876       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00877"></a>00877                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00878"></a>00878                <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
<a name="l00879"></a>00879     } ;
<a name="l00880"></a>00880 
<a name="l00881"></a>00881   <span class="keywordflow">return</span> asp ;
<a name="l00882"></a>00882 }
<a name="l00883"></a>00883 
<a name="l00884"></a><a class="code" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">00884</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">bgp_attr_aspath_check</a>( <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, 
<a name="l00885"></a>00885         <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00886"></a>00886 {
<a name="l00887"></a>00887   <span class="comment">/* These checks were part of bgp_attr_aspath, but with</span>
<a name="l00888"></a>00888 <span class="comment">   * as4 we should to check aspath things when</span>
<a name="l00889"></a>00889 <span class="comment">   * aspath synthesizing with as4_path has already taken place.</span>
<a name="l00890"></a>00890 <span class="comment">   * Otherwise we check ASPATH and use the synthesized thing, and that is</span>
<a name="l00891"></a>00891 <span class="comment">   * not right.</span>
<a name="l00892"></a>00892 <span class="comment">   * So do the checks later, i.e. here</span>
<a name="l00893"></a>00893 <span class="comment">   */</span>
<a name="l00894"></a>00894   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l00895"></a>00895   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
<a name="l00896"></a>00896 
<a name="l00897"></a>00897   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l00898"></a>00898     
<a name="l00899"></a>00899   <span class="comment">/* Confederation sanity check. */</span>
<a name="l00900"></a>00900   <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a> &amp;&amp; ! <a class="code" href="bgp__aspath_8c.html#a2ea3a3f15468d013b12a0ee4558026b5">aspath_left_confed_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)) ||
<a name="l00901"></a>00901      (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; <a class="code" href="bgp__aspath_8c.html#ab2915d467a13796ada52e009773a5776">aspath_confed_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)))
<a name="l00902"></a>00902     {
<a name="l00903"></a>00903       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Malformed AS path from %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00904"></a>00904       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l00905"></a>00905                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00906"></a>00906                <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
<a name="l00907"></a>00907       <span class="keywordflow">return</span> -1;
<a name="l00908"></a>00908     }
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   <span class="comment">/* First AS check for EBGP. */</span>
<a name="l00911"></a>00911   <span class="keywordflow">if</span> (bgp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abbc81a8ba88ca76497f8d2838ea81401">BGP_FLAG_ENFORCE_FIRST_AS</a>))
<a name="l00912"></a>00912     {
<a name="l00913"></a>00913       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
<a name="l00914"></a>00914       &amp;&amp; ! <a class="code" href="bgp__aspath_8c.html#a9ed7eb61027a6f70bb24f3ffc5cc399f">aspath_firstas_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
<a name="l00915"></a>00915     {
<a name="l00916"></a>00916       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR,
<a name="l00917"></a>00917         <span class="stringliteral">&quot;%s incorrect first AS (must be %u)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
<a name="l00918"></a>00918       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l00919"></a>00919                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
<a name="l00920"></a>00920                <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
<a name="l00921"></a>00921       <span class="keywordflow">return</span> -1;
<a name="l00922"></a>00922     }
<a name="l00923"></a>00923     }
<a name="l00924"></a>00924 
<a name="l00925"></a>00925   <span class="comment">/* local-as prepend */</span>
<a name="l00926"></a>00926   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> &amp;&amp;
<a name="l00927"></a>00927       ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>))
<a name="l00928"></a>00928     {
<a name="l00929"></a>00929       aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00930"></a>00930       aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>);
<a name="l00931"></a>00931       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l00932"></a>00932       attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (aspath);
<a name="l00933"></a>00933     }
<a name="l00934"></a>00934 
<a name="l00935"></a>00935   <span class="keywordflow">return</span> 0;
<a name="l00936"></a>00936 
<a name="l00937"></a>00937 }
<a name="l00938"></a>00938 
<a name="l00939"></a>00939 <span class="comment">/* Nexthop attribute. */</span>
<a name="l00940"></a>00940 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00941"></a><a class="code" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">00941</a> <a class="code" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">bgp_attr_nexthop</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l00942"></a>00942           <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag, u_char *startp)
<a name="l00943"></a>00943 {
<a name="l00944"></a>00944   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l00945"></a>00945 
<a name="l00946"></a>00946   total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l00947"></a>00947 
<a name="l00948"></a>00948   <span class="comment">/* Flag check. */</span>
<a name="l00949"></a>00949   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>)
<a name="l00950"></a>00950       || ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
<a name="l00951"></a>00951     {
<a name="l00952"></a>00952       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00953"></a>00953         <span class="stringliteral">&quot;Origin attribute flag isn&#39;t transitive %d&quot;</span>, flag);
<a name="l00954"></a>00954       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00955"></a>00955                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00956"></a>00956                  <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
<a name="l00957"></a>00957                  startp, total);
<a name="l00958"></a>00958       <span class="keywordflow">return</span> -1;
<a name="l00959"></a>00959     }
<a name="l00960"></a>00960 
<a name="l00961"></a>00961   <span class="comment">/* Check nexthop attribute length. */</span>
<a name="l00962"></a>00962   <span class="keywordflow">if</span> (length != 4)
<a name="l00963"></a>00963     {
<a name="l00964"></a>00964       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Nexthop attribute length isn&#39;t four [%d]&quot;</span>,
<a name="l00965"></a>00965           length);
<a name="l00966"></a>00966 
<a name="l00967"></a>00967       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00968"></a>00968                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00969"></a>00969                  <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
<a name="l00970"></a>00970                  startp, total);
<a name="l00971"></a>00971       <span class="keywordflow">return</span> -1;
<a name="l00972"></a>00972     }
<a name="l00973"></a>00973 
<a name="l00974"></a>00974   attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l00975"></a>00975   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<a name="l00976"></a>00976 
<a name="l00977"></a>00977   <span class="keywordflow">return</span> 0;
<a name="l00978"></a>00978 }
<a name="l00979"></a>00979 
<a name="l00980"></a>00980 <span class="comment">/* MED atrribute. */</span>
<a name="l00981"></a>00981 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00982"></a><a class="code" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">00982</a> <a class="code" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">bgp_attr_med</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l00983"></a>00983           <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag, u_char *startp)
<a name="l00984"></a>00984 {
<a name="l00985"></a>00985   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l00986"></a>00986 
<a name="l00987"></a>00987   total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l00988"></a>00988 
<a name="l00989"></a>00989   <span class="comment">/* Length check. */</span>
<a name="l00990"></a>00990   <span class="keywordflow">if</span> (length != 4)
<a name="l00991"></a>00991     {
<a name="l00992"></a>00992       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l00993"></a>00993         <span class="stringliteral">&quot;MED attribute length isn&#39;t four [%d]&quot;</span>, length);
<a name="l00994"></a>00994       
<a name="l00995"></a>00995       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l00996"></a>00996                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l00997"></a>00997                  <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
<a name="l00998"></a>00998                  startp, total);
<a name="l00999"></a>00999       <span class="keywordflow">return</span> -1;
<a name="l01000"></a>01000     }
<a name="l01001"></a>01001 
<a name="l01002"></a>01002   attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01003"></a>01003 
<a name="l01004"></a>01004   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l01005"></a>01005 
<a name="l01006"></a>01006   <span class="keywordflow">return</span> 0;
<a name="l01007"></a>01007 }
<a name="l01008"></a>01008 
<a name="l01009"></a>01009 <span class="comment">/* Local preference attribute. */</span>
<a name="l01010"></a>01010 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01011"></a><a class="code" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">01011</a> <a class="code" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">bgp_attr_local_pref</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01012"></a>01012              <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01013"></a>01013 {
<a name="l01014"></a>01014   <span class="comment">/* If it is contained in an UPDATE message that is received from an</span>
<a name="l01015"></a>01015 <span class="comment">     external peer, then this attribute MUST be ignored by the</span>
<a name="l01016"></a>01016 <span class="comment">     receiving speaker. */</span>
<a name="l01017"></a>01017   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l01018"></a>01018     {
<a name="l01019"></a>01019       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length);
<a name="l01020"></a>01020       <span class="keywordflow">return</span> 0;
<a name="l01021"></a>01021     }
<a name="l01022"></a>01022 
<a name="l01023"></a>01023   <span class="keywordflow">if</span> (length == 4) 
<a name="l01024"></a>01024     attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01025"></a>01025   <span class="keywordflow">else</span> 
<a name="l01026"></a>01026     attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = 0;
<a name="l01027"></a>01027 
<a name="l01028"></a>01028   <span class="comment">/* Set atomic aggregate flag. */</span>
<a name="l01029"></a>01029   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
<a name="l01030"></a>01030 
<a name="l01031"></a>01031   <span class="keywordflow">return</span> 0;
<a name="l01032"></a>01032 }
<a name="l01033"></a>01033 
<a name="l01034"></a>01034 <span class="comment">/* Atomic aggregate. */</span>
<a name="l01035"></a>01035 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01036"></a><a class="code" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">01036</a> <a class="code" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">bgp_attr_atomic</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01037"></a>01037          <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01038"></a>01038 {
<a name="l01039"></a>01039   <span class="keywordflow">if</span> (length != 0)
<a name="l01040"></a>01040     {
<a name="l01041"></a>01041       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad atomic aggregate length %d&quot;</span>, length);
<a name="l01042"></a>01042 
<a name="l01043"></a>01043       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01044"></a>01044                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01045"></a>01045                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01046"></a>01046       <span class="keywordflow">return</span> -1;
<a name="l01047"></a>01047     }
<a name="l01048"></a>01048 
<a name="l01049"></a>01049   <span class="comment">/* Set atomic aggregate flag. */</span>
<a name="l01050"></a>01050   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l01051"></a>01051 
<a name="l01052"></a>01052   <span class="keywordflow">return</span> 0;
<a name="l01053"></a>01053 }
<a name="l01054"></a>01054 
<a name="l01055"></a>01055 <span class="comment">/* Aggregator attribute */</span>
<a name="l01056"></a>01056 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01057"></a><a class="code" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">01057</a> <a class="code" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">bgp_attr_aggregator</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
<a name="l01058"></a>01058              <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01059"></a>01059 {
<a name="l01060"></a>01060   <span class="keywordtype">int</span> wantedlen = 6;
<a name="l01061"></a>01061   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr);
<a name="l01062"></a>01062   
<a name="l01063"></a>01063   <span class="comment">/* peer with AS4 will send 4 Byte AS, peer without will send 2 Byte */</span>
<a name="l01064"></a>01064   <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a> ) )
<a name="l01065"></a>01065     wantedlen = 8;
<a name="l01066"></a>01066   
<a name="l01067"></a>01067   <span class="keywordflow">if</span> (length != wantedlen)
<a name="l01068"></a>01068     {
<a name="l01069"></a>01069       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Aggregator length is not %d [%d]&quot;</span>, wantedlen, length);
<a name="l01070"></a>01070 
<a name="l01071"></a>01071       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l01072"></a>01072                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
<a name="l01073"></a>01073                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01074"></a>01074       <span class="keywordflow">return</span> -1;
<a name="l01075"></a>01075     }
<a name="l01076"></a>01076   
<a name="l01077"></a>01077   <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a> ) )
<a name="l01078"></a>01078     attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01079"></a>01079   <span class="keywordflow">else</span>
<a name="l01080"></a>01080     attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01081"></a>01081   attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01082"></a>01082 
<a name="l01083"></a>01083   <span class="comment">/* Set atomic aggregate flag. */</span>
<a name="l01084"></a>01084   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
<a name="l01085"></a>01085 
<a name="l01086"></a>01086   <span class="keywordflow">return</span> 0;
<a name="l01087"></a>01087 }
<a name="l01088"></a>01088 
<a name="l01089"></a>01089 <span class="comment">/* New Aggregator attribute */</span>
<a name="l01090"></a>01090 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01091"></a><a class="code" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">01091</a> <a class="code" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">bgp_attr_as4_aggregator</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
<a name="l01092"></a>01092              <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as4_aggregator_as,
<a name="l01093"></a>01093              <span class="keyword">struct</span> in_addr *as4_aggregator_addr)
<a name="l01094"></a>01094 {
<a name="l01095"></a>01095   <span class="keywordflow">if</span> (length != 8)
<a name="l01096"></a>01096     {
<a name="l01097"></a>01097       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;New Aggregator length is not 8 [%d]&quot;</span>, length);
<a name="l01098"></a>01098 
<a name="l01099"></a>01099       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l01100"></a>01100                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
<a name="l01101"></a>01101                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01102"></a>01102       <span class="keywordflow">return</span> -1;
<a name="l01103"></a>01103     }
<a name="l01104"></a>01104   *as4_aggregator_as = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01105"></a>01105   as4_aggregator_addr-&gt;s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01106"></a>01106 
<a name="l01107"></a>01107   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>);
<a name="l01108"></a>01108 
<a name="l01109"></a>01109   <span class="keywordflow">return</span> 0;
<a name="l01110"></a>01110 }
<a name="l01111"></a>01111 
<a name="l01112"></a>01112 <span class="comment">/* Munge Aggregator and New-Aggregator, AS_PATH and NEW_AS_PATH.</span>
<a name="l01113"></a>01113 <span class="comment"> */</span>
<a name="l01114"></a>01114 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01115"></a><a class="code" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">01115</a> <a class="code" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">bgp_attr_munge_as4_attrs</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l01116"></a>01116                           <span class="keyword">struct</span> <a class="code" href="structaspath.html">aspath</a> *as4_path, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4_aggregator,
<a name="l01117"></a>01117                           <span class="keyword">struct</span> in_addr *as4_aggregator_addr)
<a name="l01118"></a>01118 {
<a name="l01119"></a>01119   <span class="keywordtype">int</span> ignore_as4_path = 0;
<a name="l01120"></a>01120   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *newpath;
<a name="l01121"></a>01121   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l01122"></a>01122     
<a name="l01123"></a>01123   <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) )
<a name="l01124"></a>01124     {
<a name="l01125"></a>01125       <span class="comment">/* peer can do AS4, so we ignore AS4_PATH and AS4_AGGREGATOR</span>
<a name="l01126"></a>01126 <span class="comment">       * if given.</span>
<a name="l01127"></a>01127 <span class="comment">       * It is worth a warning though, because the peer really</span>
<a name="l01128"></a>01128 <span class="comment">       * should not send them</span>
<a name="l01129"></a>01129 <span class="comment">       */</span>
<a name="l01130"></a>01130       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
<a name="l01131"></a>01131         {
<a name="l01132"></a>01132           <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>)))
<a name="l01133"></a>01133             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s %s AS4_PATH&quot;</span>,
<a name="l01134"></a>01134                         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <span class="stringliteral">&quot;AS4 capable peer, yet it sent&quot;</span>);
<a name="l01135"></a>01135           
<a name="l01136"></a>01136           <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>)))
<a name="l01137"></a>01137             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s %s AS4_AGGREGATOR&quot;</span>,
<a name="l01138"></a>01138                         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <span class="stringliteral">&quot;AS4 capable peer, yet it sent&quot;</span>);
<a name="l01139"></a>01139         }
<a name="l01140"></a>01140       
<a name="l01141"></a>01141       <span class="keywordflow">return</span> 0;
<a name="l01142"></a>01142     }
<a name="l01143"></a>01143   
<a name="l01144"></a>01144   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>))
<a name="l01145"></a>01145       &amp;&amp; !(attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>))))
<a name="l01146"></a>01146     {
<a name="l01147"></a>01147       <span class="comment">/* Hu? This is not supposed to happen at all!</span>
<a name="l01148"></a>01148 <span class="comment">       * got as4_path and no aspath,</span>
<a name="l01149"></a>01149 <span class="comment">       *   This should already</span>
<a name="l01150"></a>01150 <span class="comment">       *   have been handled by &#39;well known attributes missing&#39;</span>
<a name="l01151"></a>01151 <span class="comment">       *   But... yeah, paranoia</span>
<a name="l01152"></a>01152 <span class="comment">       * Take this as a &quot;malformed attribute&quot;</span>
<a name="l01153"></a>01153 <span class="comment">       */</span>
<a name="l01154"></a>01154       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
<a name="l01155"></a>01155             <span class="stringliteral">&quot;%s BGP not AS4 capable peer sent AS4_PATH but&quot;</span>
<a name="l01156"></a>01156             <span class="stringliteral">&quot; no AS_PATH, cant do anything here&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01157"></a>01157       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01158"></a>01158                        <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01159"></a>01159                        <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01160"></a>01160       <span class="keywordflow">return</span> -1;
<a name="l01161"></a>01161     }
<a name="l01162"></a>01162 
<a name="l01163"></a>01163   <span class="comment">/* We have a asn16 peer.  First, look for AS4_AGGREGATOR</span>
<a name="l01164"></a>01164 <span class="comment">   * because that may override AS4_PATH</span>
<a name="l01165"></a>01165 <span class="comment">   */</span>
<a name="l01166"></a>01166   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>) ) )
<a name="l01167"></a>01167     {
<a name="l01168"></a>01168       <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>) ) )
<a name="l01169"></a>01169         {
<a name="l01170"></a>01170           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attre);
<a name="l01171"></a>01171           
<a name="l01172"></a>01172           <span class="comment">/* received both.</span>
<a name="l01173"></a>01173 <span class="comment">           * if the as_number in aggregator is not AS_TRANS,</span>
<a name="l01174"></a>01174 <span class="comment">           *  then AS4_AGGREGATOR and AS4_PATH shall be ignored</span>
<a name="l01175"></a>01175 <span class="comment">           *        and the Aggregator shall be taken as </span>
<a name="l01176"></a>01176 <span class="comment">           *        info on the aggregating node, and the AS_PATH</span>
<a name="l01177"></a>01177 <span class="comment">           *        shall be taken as the AS_PATH</span>
<a name="l01178"></a>01178 <span class="comment">           *  otherwise</span>
<a name="l01179"></a>01179 <span class="comment">           *        the Aggregator shall be ignored and the</span>
<a name="l01180"></a>01180 <span class="comment">           *        AS4_AGGREGATOR shall be taken as the</span>
<a name="l01181"></a>01181 <span class="comment">           *        Aggregating node and the AS_PATH is to be</span>
<a name="l01182"></a>01182 <span class="comment">           *        constructed &quot;as in all other cases&quot;</span>
<a name="l01183"></a>01183 <span class="comment">           */</span>
<a name="l01184"></a>01184           <span class="keywordflow">if</span> ( attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> != <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a> )
<a name="l01185"></a>01185             {
<a name="l01186"></a>01186               <span class="comment">/* ignore */</span>
<a name="l01187"></a>01187               <span class="keywordflow">if</span> ( <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
<a name="l01188"></a>01188                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s BGP not AS4 capable peer&quot;</span> 
<a name="l01189"></a>01189                             <span class="stringliteral">&quot; send AGGREGATOR != AS_TRANS and&quot;</span>
<a name="l01190"></a>01190                             <span class="stringliteral">&quot; AS4_AGGREGATOR, so ignore&quot;</span>
<a name="l01191"></a>01191                             <span class="stringliteral">&quot; AS4_AGGREGATOR and AS4_PATH&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01192"></a>01192               ignore_as4_path = 1;
<a name="l01193"></a>01193             }
<a name="l01194"></a>01194           <span class="keywordflow">else</span>
<a name="l01195"></a>01195             {
<a name="l01196"></a>01196               <span class="comment">/* &quot;New_aggregator shall be taken as aggregator&quot; */</span>
<a name="l01197"></a>01197               attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = as4_aggregator;
<a name="l01198"></a>01198               attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr = as4_aggregator_addr-&gt;s_addr;
<a name="l01199"></a>01199             }
<a name="l01200"></a>01200         }
<a name="l01201"></a>01201       <span class="keywordflow">else</span>
<a name="l01202"></a>01202         {
<a name="l01203"></a>01203           <span class="comment">/* We received a AS4_AGGREGATOR but no AGGREGATOR.</span>
<a name="l01204"></a>01204 <span class="comment">           * That is bogus - but reading the conditions</span>
<a name="l01205"></a>01205 <span class="comment">           * we have to handle AS4_AGGREGATOR as if it were</span>
<a name="l01206"></a>01206 <span class="comment">           * AGGREGATOR in that case</span>
<a name="l01207"></a>01207 <span class="comment">           */</span>
<a name="l01208"></a>01208           <span class="keywordflow">if</span> ( <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
<a name="l01209"></a>01209             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s BGP not AS4 capable peer send&quot;</span>
<a name="l01210"></a>01210                         <span class="stringliteral">&quot; AS4_AGGREGATOR but no AGGREGATOR, will take&quot;</span>
<a name="l01211"></a>01211                         <span class="stringliteral">&quot; it as if AGGREGATOR with AS_TRANS had been there&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01212"></a>01212           (attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = as4_aggregator;
<a name="l01213"></a>01213           <span class="comment">/* sweep it under the carpet and simulate a &quot;good&quot; AGGREGATOR */</span>
<a name="l01214"></a>01214           attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>));
<a name="l01215"></a>01215         }
<a name="l01216"></a>01216     }
<a name="l01217"></a>01217 
<a name="l01218"></a>01218   <span class="comment">/* need to reconcile NEW_AS_PATH and AS_PATH */</span>
<a name="l01219"></a>01219   <span class="keywordflow">if</span> ( !ignore_as4_path &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>))) )
<a name="l01220"></a>01220     {
<a name="l01221"></a>01221        newpath = <a class="code" href="bgp__aspath_8c.html#a1a485a8779fb5fcf0ac2efeb2bdc204d">aspath_reconcile_as4</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, as4_path);
<a name="l01222"></a>01222        <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l01223"></a>01223        attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (newpath);
<a name="l01224"></a>01224     }
<a name="l01225"></a>01225   <span class="keywordflow">return</span> 0;
<a name="l01226"></a>01226 }
<a name="l01227"></a>01227 
<a name="l01228"></a>01228 <span class="comment">/* Community attribute. */</span>
<a name="l01229"></a>01229 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01230"></a><a class="code" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">01230</a> <a class="code" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">bgp_attr_community</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01231"></a>01231             <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01232"></a>01232 {
<a name="l01233"></a>01233   <span class="keywordflow">if</span> (length == 0)
<a name="l01234"></a>01234     {
<a name="l01235"></a>01235       attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01236"></a>01236       <span class="keywordflow">return</span> 0;
<a name="l01237"></a>01237     }
<a name="l01238"></a>01238   <span class="keywordflow">else</span>
<a name="l01239"></a>01239     {
<a name="l01240"></a>01240       attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = 
<a name="l01241"></a>01241         <a class="code" href="bgp__community_8c.html#aa550dd7b846e8e409cece29583b6f7b5">community_parse</a> ((u_int32_t *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), length);
<a name="l01242"></a>01242       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length);
<a name="l01243"></a>01243     }
<a name="l01244"></a>01244 
<a name="l01245"></a>01245   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l01246"></a>01246 
<a name="l01247"></a>01247   <span class="keywordflow">return</span> 0;
<a name="l01248"></a>01248 }
<a name="l01249"></a>01249 
<a name="l01250"></a>01250 <span class="comment">/* Originator ID attribute. */</span>
<a name="l01251"></a>01251 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01252"></a><a class="code" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">01252</a> <a class="code" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">bgp_attr_originator_id</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01253"></a>01253             <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01254"></a>01254 {
<a name="l01255"></a>01255   <span class="keywordflow">if</span> (length != 4)
<a name="l01256"></a>01256     {
<a name="l01257"></a>01257       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad originator ID length %d&quot;</span>, length);
<a name="l01258"></a>01258 
<a name="l01259"></a>01259       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01260"></a>01260                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01261"></a>01261                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01262"></a>01262       <span class="keywordflow">return</span> -1;
<a name="l01263"></a>01263     }
<a name="l01264"></a>01264 
<a name="l01265"></a>01265   (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>.s_addr 
<a name="l01266"></a>01266     = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01267"></a>01267 
<a name="l01268"></a>01268   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>);
<a name="l01269"></a>01269 
<a name="l01270"></a>01270   <span class="keywordflow">return</span> 0;
<a name="l01271"></a>01271 }
<a name="l01272"></a>01272 
<a name="l01273"></a>01273 <span class="comment">/* Cluster list attribute. */</span>
<a name="l01274"></a>01274 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01275"></a><a class="code" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">01275</a> <a class="code" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">bgp_attr_cluster_list</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01276"></a>01276                <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01277"></a>01277 {
<a name="l01278"></a>01278   <span class="comment">/* Check length. */</span>
<a name="l01279"></a>01279   <span class="keywordflow">if</span> (length % 4)
<a name="l01280"></a>01280     {
<a name="l01281"></a>01281       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad cluster list length %d&quot;</span>, length);
<a name="l01282"></a>01282 
<a name="l01283"></a>01283       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01284"></a>01284                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01285"></a>01285                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01286"></a>01286       <span class="keywordflow">return</span> -1;
<a name="l01287"></a>01287     }
<a name="l01288"></a>01288 
<a name="l01289"></a>01289   (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;cluster 
<a name="l01290"></a>01290     = <a class="code" href="bgp__attr_8c.html#a18083a7910f116540140cefeec1767b2">cluster_parse</a> ((<span class="keyword">struct</span> in_addr *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
<a name="l01291"></a>01291 
<a name="l01292"></a>01292   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length);;
<a name="l01293"></a>01293 
<a name="l01294"></a>01294   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>);
<a name="l01295"></a>01295 
<a name="l01296"></a>01296   <span class="keywordflow">return</span> 0;
<a name="l01297"></a>01297 }
<a name="l01298"></a>01298 
<a name="l01299"></a>01299 <span class="comment">/* Multiprotocol reachability information parse. */</span>
<a name="l01300"></a>01300 <span class="keywordtype">int</span>
<a name="l01301"></a><a class="code" href="bgp__attr_8h.html#a4e538adcc3691e47618a243ea1190471">01301</a> <a class="code" href="bgp__attr_8c.html#a3d8c4bfcee360cc1aeb5b4c1b7033360">bgp_mp_reach_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l01302"></a>01302             <span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a> *mp_update)
<a name="l01303"></a>01303 {
<a name="l01304"></a>01304   u_int16_t afi;
<a name="l01305"></a>01305   u_char safi;
<a name="l01306"></a>01306   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> nlri_len;
<a name="l01307"></a>01307   <span class="keywordtype">size_t</span> start;
<a name="l01308"></a>01308   <span class="keywordtype">int</span> ret;
<a name="l01309"></a>01309   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01310"></a>01310   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a>(attr);
<a name="l01311"></a>01311   
<a name="l01312"></a>01312   <span class="comment">/* Set end of packet. */</span>
<a name="l01313"></a>01313   s = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer);
<a name="l01314"></a>01314   start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s);
<a name="l01315"></a>01315   
<a name="l01316"></a>01316   <span class="comment">/* safe to read statically sized header? */</span>
<a name="l01317"></a>01317 <span class="preprocessor">#define BGP_MP_REACH_MIN_SIZE 5</span>
<a name="l01318"></a>01318 <span class="preprocessor"></span><span class="preprocessor">#define LEN_LEFT    (length - (stream_get_getp(s) - start))</span>
<a name="l01319"></a>01319 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ((length &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (length &lt; <a class="code" href="bgp__attr_8c.html#a1dfef5b5f9a0ab08cc5cd190b5f1ab91">BGP_MP_REACH_MIN_SIZE</a>))
<a name="l01320"></a>01320     {
<a name="l01321"></a>01321       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s sent invalid length, %lu&quot;</span>, 
<a name="l01322"></a>01322          __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)length);
<a name="l01323"></a>01323       <span class="keywordflow">return</span> -1;
<a name="l01324"></a>01324     }
<a name="l01325"></a>01325   
<a name="l01326"></a>01326   <span class="comment">/* Load AFI, SAFI. */</span>
<a name="l01327"></a>01327   afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01328"></a>01328   safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01329"></a>01329 
<a name="l01330"></a>01330   <span class="comment">/* Get nexthop length. */</span>
<a name="l01331"></a>01331   attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01332"></a>01332   
<a name="l01333"></a>01333   <span class="keywordflow">if</span> (LEN_LEFT &lt; attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
<a name="l01334"></a>01334     {
<a name="l01335"></a>01335       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s, MP nexthop length, %u, goes past end of attribute&quot;</span>, 
<a name="l01336"></a>01336          __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
<a name="l01337"></a>01337       <span class="keywordflow">return</span> -1;
<a name="l01338"></a>01338     }
<a name="l01339"></a>01339   
<a name="l01340"></a>01340   <span class="comment">/* Nexthop length check. */</span>
<a name="l01341"></a>01341   <span class="keywordflow">switch</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
<a name="l01342"></a>01342     {
<a name="l01343"></a>01343     <span class="keywordflow">case</span> 4:
<a name="l01344"></a>01344       <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
<a name="l01345"></a>01345       <span class="comment">/* Probably needed for RFC 2283 */</span>
<a name="l01346"></a>01346       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
<a name="l01347"></a>01347         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr, &amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);
<a name="l01348"></a>01348       <span class="keywordflow">break</span>;
<a name="l01349"></a>01349     <span class="keywordflow">case</span> 12:
<a name="l01350"></a>01350       {
<a name="l01351"></a>01351     u_int32_t rd_high;
<a name="l01352"></a>01352     u_int32_t rd_low;
<a name="l01353"></a>01353 
<a name="l01354"></a>01354     rd_high = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l01355"></a>01355     rd_low = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l01356"></a>01356     <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
<a name="l01357"></a>01357       }
<a name="l01358"></a>01358       <span class="keywordflow">break</span>;
<a name="l01359"></a>01359 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01360"></a>01360 <span class="preprocessor"></span>    <span class="keywordflow">case</span> 16:
<a name="l01361"></a>01361       <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
<a name="l01362"></a>01362       <span class="keywordflow">break</span>;
<a name="l01363"></a>01363     <span class="keywordflow">case</span> 32:
<a name="l01364"></a>01364       <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
<a name="l01365"></a>01365       <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_local, s, 16);
<a name="l01366"></a>01366       <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL (&amp;attre-&gt;mp_nexthop_local))
<a name="l01367"></a>01367     {
<a name="l01368"></a>01368       <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l01369"></a>01369       <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l01370"></a>01370 
<a name="l01371"></a>01371       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01372"></a>01372         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s got two nexthop %s %s but second one is not a link-local nexthop&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01373"></a>01373                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_global,
<a name="l01374"></a>01374                   buf1, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
<a name="l01375"></a>01375                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_local,
<a name="l01376"></a>01376                   buf2, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>));
<a name="l01377"></a>01377 
<a name="l01378"></a>01378       attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
<a name="l01379"></a>01379     }
<a name="l01380"></a>01380       <span class="keywordflow">break</span>;
<a name="l01381"></a>01381 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01382"></a>01382     <span class="keywordflow">default</span>:
<a name="l01383"></a>01383       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Wrong multiprotocol next hop length: %d&quot;</span>, 
<a name="l01384"></a>01384          __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
<a name="l01385"></a>01385       <span class="keywordflow">return</span> -1;
<a name="l01386"></a>01386     }
<a name="l01387"></a>01387 
<a name="l01388"></a>01388   <span class="keywordflow">if</span> (!<a class="code" href="bgp__attr_8c.html#aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc">LEN_LEFT</a>)
<a name="l01389"></a>01389     {
<a name="l01390"></a>01390       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read SNPA and NLRI(s)&quot;</span>,
<a name="l01391"></a>01391                  __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01392"></a>01392       <span class="keywordflow">return</span> -1;
<a name="l01393"></a>01393     }
<a name="l01394"></a>01394   
<a name="l01395"></a>01395   {
<a name="l01396"></a>01396     u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>; 
<a name="l01397"></a>01397     <span class="keywordflow">if</span> ((val = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s)))
<a name="l01398"></a>01398     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s sent non-zero value, %u, for defunct SNPA-length field&quot;</span>,
<a name="l01399"></a>01399                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, val);
<a name="l01400"></a>01400   }
<a name="l01401"></a>01401   
<a name="l01402"></a>01402   <span class="comment">/* must have nrli_len, what is left of the attribute */</span>
<a name="l01403"></a>01403   nlri_len = <a class="code" href="bgp__attr_8c.html#aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc">LEN_LEFT</a>;
<a name="l01404"></a>01404   <span class="keywordflow">if</span> ((!nlri_len) || (nlri_len &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)))
<a name="l01405"></a>01405     {
<a name="l01406"></a>01406       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read NLRI&quot;</span>,
<a name="l01407"></a>01407                  __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01408"></a>01408       <span class="keywordflow">return</span> -1;
<a name="l01409"></a>01409     }
<a name="l01410"></a>01410  
<a name="l01411"></a>01411   <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l01412"></a>01412     {
<a name="l01413"></a>01413       ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), nlri_len);
<a name="l01414"></a>01414       <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l01415"></a>01415         {
<a name="l01416"></a>01416           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) NLRI doesn&#39;t pass sanity check&quot;</span>,
<a name="l01417"></a>01417                      __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01418"></a>01418       <span class="keywordflow">return</span> -1;
<a name="l01419"></a>01419     }
<a name="l01420"></a>01420     }
<a name="l01421"></a>01421 
<a name="l01422"></a>01422   mp_update-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = afi;
<a name="l01423"></a>01423   mp_update-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = safi;
<a name="l01424"></a>01424   mp_update-&gt;<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01425"></a>01425   mp_update-&gt;<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = nlri_len;
<a name="l01426"></a>01426 
<a name="l01427"></a>01427   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, nlri_len);
<a name="l01428"></a>01428 
<a name="l01429"></a>01429   <span class="keywordflow">return</span> 0;
<a name="l01430"></a>01430 <span class="preprocessor">#undef LEN_LEFT</span>
<a name="l01431"></a>01431 <span class="preprocessor"></span>}
<a name="l01432"></a>01432 
<a name="l01433"></a>01433 <span class="comment">/* Multiprotocol unreachable parse */</span>
<a name="l01434"></a>01434 <span class="keywordtype">int</span>
<a name="l01435"></a><a class="code" href="bgp__attr_8h.html#a1038aeffc20235a56ab777777f4bd2ef">01435</a> <a class="code" href="bgp__attr_8c.html#af99785d5e3ee803d5d4b7021e0b8448a">bgp_mp_unreach_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01436"></a>01436               <span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a> *mp_withdraw)
<a name="l01437"></a>01437 {
<a name="l01438"></a>01438   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01439"></a>01439   u_int16_t afi;
<a name="l01440"></a>01440   u_char safi;
<a name="l01441"></a>01441   u_int16_t withdraw_len;
<a name="l01442"></a>01442   <span class="keywordtype">int</span> ret;
<a name="l01443"></a>01443 
<a name="l01444"></a>01444   s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
<a name="l01445"></a>01445   
<a name="l01446"></a>01446 <span class="preprocessor">#define BGP_MP_UNREACH_MIN_SIZE 3</span>
<a name="l01447"></a>01447 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ((length &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (length &lt;  <a class="code" href="bgp__attr_8c.html#aa53b9e0198c876e6ba4251c44b707045">BGP_MP_UNREACH_MIN_SIZE</a>))
<a name="l01448"></a>01448     <span class="keywordflow">return</span> -1;
<a name="l01449"></a>01449   
<a name="l01450"></a>01450   afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01451"></a>01451   safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01452"></a>01452   
<a name="l01453"></a>01453   withdraw_len = length - <a class="code" href="bgp__attr_8c.html#aa53b9e0198c876e6ba4251c44b707045">BGP_MP_UNREACH_MIN_SIZE</a>;
<a name="l01454"></a>01454 
<a name="l01455"></a>01455   <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l01456"></a>01456     {
<a name="l01457"></a>01457       ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), withdraw_len);
<a name="l01458"></a>01458       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01459"></a>01459     <span class="keywordflow">return</span> -1;
<a name="l01460"></a>01460     }
<a name="l01461"></a>01461 
<a name="l01462"></a>01462   mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = afi;
<a name="l01463"></a>01463   mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = safi;
<a name="l01464"></a>01464   mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01465"></a>01465   mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = withdraw_len;
<a name="l01466"></a>01466 
<a name="l01467"></a>01467   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, withdraw_len);
<a name="l01468"></a>01468 
<a name="l01469"></a>01469   <span class="keywordflow">return</span> 0;
<a name="l01470"></a>01470 }
<a name="l01471"></a>01471 
<a name="l01472"></a>01472 <span class="comment">/* Extended Community attribute. */</span>
<a name="l01473"></a>01473 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01474"></a><a class="code" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">01474</a> <a class="code" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">bgp_attr_ext_communities</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, 
<a name="l01475"></a>01475               <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag)
<a name="l01476"></a>01476 {
<a name="l01477"></a>01477   <span class="keywordflow">if</span> (length == 0)
<a name="l01478"></a>01478     {
<a name="l01479"></a>01479       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l01480"></a>01480         attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01481"></a>01481     }
<a name="l01482"></a>01482   <span class="keywordflow">else</span>
<a name="l01483"></a>01483     {
<a name="l01484"></a>01484       (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structecommunity.html">ecommunity</a> = 
<a name="l01485"></a>01485         <a class="code" href="bgp__ecommunity_8c.html#a39113bc26f62bbd119fa0da3484f3f86">ecommunity_parse</a> ((u_int8_t *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
<a name="l01486"></a>01486       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length);
<a name="l01487"></a>01487     }
<a name="l01488"></a>01488   attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
<a name="l01489"></a>01489 
<a name="l01490"></a>01490   <span class="keywordflow">return</span> 0;
<a name="l01491"></a>01491 }
<a name="l01492"></a>01492 
<a name="l01493"></a>01493 <span class="comment">/* BGP unknown attribute treatment. */</span>
<a name="l01494"></a>01494 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01495"></a><a class="code" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">01495</a> <a class="code" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">bgp_attr_unknown</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, u_char flag,
<a name="l01496"></a>01496           u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, u_char *startp)
<a name="l01497"></a>01497 {
<a name="l01498"></a>01498   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
<a name="l01499"></a>01499   <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a>;
<a name="l01500"></a>01500   <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;
<a name="l01501"></a>01501 
<a name="l01502"></a>01502   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01503"></a>01503   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Unknown attribute is received (type %d, length %d)&quot;</span>,
<a name="l01504"></a>01504           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, length);
<a name="l01505"></a>01505   
<a name="l01506"></a>01506   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01507"></a>01507     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, 
<a name="l01508"></a>01508       <span class="stringliteral">&quot;Unknown attribute type %d length %d is received&quot;</span>, type, length);
<a name="l01509"></a>01509 
<a name="l01510"></a>01510   <span class="comment">/* Forward read pointer of input stream. */</span>
<a name="l01511"></a>01511   <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, length);
<a name="l01512"></a>01512 
<a name="l01513"></a>01513   <span class="comment">/* Adjest total length to include type and length. */</span>
<a name="l01514"></a>01514   total = length + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
<a name="l01515"></a>01515 
<a name="l01516"></a>01516   <span class="comment">/* If any of the mandatory well-known attributes are not recognized,</span>
<a name="l01517"></a>01517 <span class="comment">     then the Error Subcode is set to Unrecognized Well-known</span>
<a name="l01518"></a>01518 <span class="comment">     Attribute.  The Data field contains the unrecognized attribute</span>
<a name="l01519"></a>01519 <span class="comment">     (type, length and value). */</span>
<a name="l01520"></a>01520   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>))
<a name="l01521"></a>01521     {
<a name="l01522"></a>01522       <span class="comment">/* Adjust startp to do not include flag value. */</span>
<a name="l01523"></a>01523       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l01524"></a>01524                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01525"></a>01525                  <a class="code" href="bgpd_8h.html#a0d024c2a67a57b482ae156bb77329d89">BGP_NOTIFY_UPDATE_UNREC_ATTR</a>,
<a name="l01526"></a>01526                  startp, total);
<a name="l01527"></a>01527       <span class="keywordflow">return</span> -1;
<a name="l01528"></a>01528     }
<a name="l01529"></a>01529 
<a name="l01530"></a>01530   <span class="comment">/* Unrecognized non-transitive optional attributes must be quietly</span>
<a name="l01531"></a>01531 <span class="comment">     ignored and not passed along to other BGP peers. */</span>
<a name="l01532"></a>01532   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
<a name="l01533"></a>01533     <span class="keywordflow">return</span> 0;
<a name="l01534"></a>01534 
<a name="l01535"></a>01535   <span class="comment">/* If a path with recognized transitive optional attribute is</span>
<a name="l01536"></a>01536 <span class="comment">     accepted and passed along to other BGP peers and the Partial bit</span>
<a name="l01537"></a>01537 <span class="comment">     in the Attribute Flags octet is set to 1 by some previous AS, it</span>
<a name="l01538"></a>01538 <span class="comment">     is not set back to 0 by the current AS. */</span>
<a name="l01539"></a>01539   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (*startp, <a class="code" href="bgp__attr_8h.html#a53601906c8a028376cb7e4c2c691dc12">BGP_ATTR_FLAG_PARTIAL</a>);
<a name="l01540"></a>01540 
<a name="l01541"></a>01541   <span class="comment">/* Store transitive attribute to the end of attr-&gt;transit. */</span>
<a name="l01542"></a>01542   <span class="keywordflow">if</span> (! ((attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a>(attr))-&gt;transit) )
<a name="l01543"></a>01543       attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa2ed4f19b85e0b74659b8131e34e83df">MTYPE_TRANSIT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> transit));
<a name="l01544"></a>01544 
<a name="l01545"></a>01545   transit = attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>;
<a name="l01546"></a>01546 
<a name="l01547"></a>01547   <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>)
<a name="l01548"></a>01548     transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, 
<a name="l01549"></a>01549                  transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> + total);
<a name="l01550"></a>01550   <span class="keywordflow">else</span>
<a name="l01551"></a>01551     transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, total);
<a name="l01552"></a>01552 
<a name="l01553"></a>01553   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> + transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>, startp, total);
<a name="l01554"></a>01554   transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> += total;
<a name="l01555"></a>01555 
<a name="l01556"></a>01556   <span class="keywordflow">return</span> 0;
<a name="l01557"></a>01557 }
<a name="l01558"></a>01558 
<a name="l01559"></a>01559 <span class="comment">/* Read attribute of update packet.  This function is called from</span>
<a name="l01560"></a>01560 <span class="comment">   bgp_update() in bgpd.c.  */</span>
<a name="l01561"></a>01561 <span class="keywordtype">int</span>
<a name="l01562"></a><a class="code" href="bgp__attr_8h.html#aa3c3365e35f5c6373342410af931e4e5">01562</a> <a class="code" href="bgp__attr_8c.html#aa14660c4ba4237fe5afa5f0e7700479a">bgp_attr_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size,
<a name="l01563"></a>01563         <span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a> *mp_update, <span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a> *mp_withdraw)
<a name="l01564"></a>01564 {
<a name="l01565"></a>01565   <span class="keywordtype">int</span> ret;
<a name="l01566"></a>01566   u_char flag;
<a name="l01567"></a>01567   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
<a name="l01568"></a>01568   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01569"></a>01569   u_char *startp, *endp;
<a name="l01570"></a>01570   u_char *attr_endp;
<a name="l01571"></a>01571   u_char seen[<a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>];
<a name="l01572"></a>01572   <span class="comment">/* we need the as4_path only until we have synthesized the as_path with it */</span>
<a name="l01573"></a>01573   <span class="comment">/* same goes for as4_aggregator */</span>
<a name="l01574"></a>01574   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01575"></a>01575   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4_aggregator = 0;
<a name="l01576"></a>01576   <span class="keyword">struct </span>in_addr as4_aggregator_addr = { 0 };
<a name="l01577"></a>01577 
<a name="l01578"></a>01578   <span class="comment">/* Initialize bitmap. */</span>
<a name="l01579"></a>01579   memset (seen, 0, <a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>);
<a name="l01580"></a>01580 
<a name="l01581"></a>01581   <span class="comment">/* End pointer of BGP attribute. */</span>
<a name="l01582"></a>01582   endp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) + size;
<a name="l01583"></a>01583 
<a name="l01584"></a>01584   <span class="comment">/* Get attributes to the end of attribute length. */</span>
<a name="l01585"></a>01585   <span class="keywordflow">while</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) &lt; endp)
<a name="l01586"></a>01586     {
<a name="l01587"></a>01587       <span class="comment">/* Check remaining length check.*/</span>
<a name="l01588"></a>01588       <span class="keywordflow">if</span> (endp - <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) &lt; <a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a>)
<a name="l01589"></a>01589     {
<a name="l01590"></a>01590       <span class="comment">/* XXX warning: long int format, int arg (arg 5) */</span>
<a name="l01591"></a>01591       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01592"></a>01592         <span class="stringliteral">&quot;%s error BGP attribute length %lu is smaller than min len&quot;</span>,
<a name="l01593"></a>01593         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01594"></a>01594         (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer))));
<a name="l01595"></a>01595 
<a name="l01596"></a>01596       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01597"></a>01597                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01598"></a>01598                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01599"></a>01599       <span class="keywordflow">return</span> -1;
<a name="l01600"></a>01600     }
<a name="l01601"></a>01601 
<a name="l01602"></a>01602       <span class="comment">/* Fetch attribute flag and type. */</span>
<a name="l01603"></a>01603       startp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer);
<a name="l01604"></a>01604       flag = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
<a name="l01605"></a>01605       type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
<a name="l01606"></a>01606 
<a name="l01607"></a>01607       <span class="comment">/* Check whether Extended-Length applies and is in bounds */</span>
<a name="l01608"></a>01608       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>)
<a name="l01609"></a>01609           &amp;&amp; ((endp - startp) &lt; (<a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a> + 1)))
<a name="l01610"></a>01610     {
<a name="l01611"></a>01611       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01612"></a>01612         <span class="stringliteral">&quot;%s Extended length set, but just %lu bytes of attr header&quot;</span>,
<a name="l01613"></a>01613         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l01614"></a>01614         (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer))));
<a name="l01615"></a>01615 
<a name="l01616"></a>01616       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01617"></a>01617                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01618"></a>01618                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01619"></a>01619       <span class="keywordflow">return</span> -1;
<a name="l01620"></a>01620     }
<a name="l01621"></a>01621 
<a name="l01622"></a>01622       <span class="comment">/* Check extended attribue length bit. */</span>
<a name="l01623"></a>01623       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>))
<a name="l01624"></a>01624     length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
<a name="l01625"></a>01625       <span class="keywordflow">else</span>
<a name="l01626"></a>01626     length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
<a name="l01627"></a>01627       
<a name="l01628"></a>01628       <span class="comment">/* If any attribute appears more than once in the UPDATE</span>
<a name="l01629"></a>01629 <span class="comment">     message, then the Error Subcode is set to Malformed Attribute</span>
<a name="l01630"></a>01630 <span class="comment">     List. */</span>
<a name="l01631"></a>01631 
<a name="l01632"></a>01632       <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8h.html#aaef34cec810ea0c6b60279c16ffd8a20">CHECK_BITMAP</a> (seen, type))
<a name="l01633"></a>01633     {
<a name="l01634"></a>01634       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
<a name="l01635"></a>01635         <span class="stringliteral">&quot;%s error BGP attribute type %d appears twice in a message&quot;</span>,
<a name="l01636"></a>01636         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
<a name="l01637"></a>01637 
<a name="l01638"></a>01638       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01639"></a>01639                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01640"></a>01640                <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01641"></a>01641       <span class="keywordflow">return</span> -1;
<a name="l01642"></a>01642     }
<a name="l01643"></a>01643 
<a name="l01644"></a>01644       <span class="comment">/* Set type to bitmap to check duplicate attribute.  `type&#39; is</span>
<a name="l01645"></a>01645 <span class="comment">     unsigned char so it never overflow bitmap range. */</span>
<a name="l01646"></a>01646 
<a name="l01647"></a>01647       <a class="code" href="bgp__attr_8h.html#a06b1e413f17e880aa755637031050a20">SET_BITMAP</a> (seen, type);
<a name="l01648"></a>01648 
<a name="l01649"></a>01649       <span class="comment">/* Overflow check. */</span>
<a name="l01650"></a>01650       attr_endp =  <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01651"></a>01651 
<a name="l01652"></a>01652       <span class="keywordflow">if</span> (attr_endp &gt; endp)
<a name="l01653"></a>01653     {
<a name="l01654"></a>01654       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01655"></a>01655         <span class="stringliteral">&quot;%s BGP type %d length %d is too large, attribute total length is %d.  attr_endp is %p.  endp is %p&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, length, size, attr_endp, endp);
<a name="l01656"></a>01656       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01657"></a>01657                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01658"></a>01658                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01659"></a>01659       <span class="keywordflow">return</span> -1;
<a name="l01660"></a>01660     }
<a name="l01661"></a>01661 
<a name="l01662"></a>01662       <span class="comment">/* OK check attribute and store it&#39;s value. */</span>
<a name="l01663"></a>01663       <span class="keywordflow">switch</span> (type)
<a name="l01664"></a>01664     {
<a name="l01665"></a>01665     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>:
<a name="l01666"></a>01666       ret = <a class="code" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">bgp_attr_origin</a> (peer, length, attr, flag, startp);
<a name="l01667"></a>01667       <span class="keywordflow">break</span>;
<a name="l01668"></a>01668     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>:
<a name="l01669"></a>01669           attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (peer, length, attr, flag, startp, 0);
<a name="l01670"></a>01670           ret = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> ? 0 : -1 ;
<a name="l01671"></a>01671       <span class="keywordflow">break</span>;
<a name="l01672"></a>01672     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>:
<a name="l01673"></a>01673           as4_path = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (peer, length, attr, flag, startp, 1);
<a name="l01674"></a>01674           ret = as4_path  ? 0 : -1 ;
<a name="l01675"></a>01675       <span class="keywordflow">break</span>;
<a name="l01676"></a>01676     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>: 
<a name="l01677"></a>01677       ret = <a class="code" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">bgp_attr_nexthop</a> (peer, length, attr, flag, startp);
<a name="l01678"></a>01678       <span class="keywordflow">break</span>;
<a name="l01679"></a>01679     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>:
<a name="l01680"></a>01680       ret = <a class="code" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">bgp_attr_med</a> (peer, length, attr, flag, startp);
<a name="l01681"></a>01681       <span class="keywordflow">break</span>;
<a name="l01682"></a>01682     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>:
<a name="l01683"></a>01683       ret = <a class="code" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">bgp_attr_local_pref</a> (peer, length, attr, flag);
<a name="l01684"></a>01684       <span class="keywordflow">break</span>;
<a name="l01685"></a>01685     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>:
<a name="l01686"></a>01686       ret = <a class="code" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">bgp_attr_atomic</a> (peer, length, attr, flag);
<a name="l01687"></a>01687       <span class="keywordflow">break</span>;
<a name="l01688"></a>01688     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>:
<a name="l01689"></a>01689       ret = <a class="code" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">bgp_attr_aggregator</a> (peer, length, attr, flag);
<a name="l01690"></a>01690       <span class="keywordflow">break</span>;
<a name="l01691"></a>01691     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>:
<a name="l01692"></a>01692       ret = <a class="code" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">bgp_attr_as4_aggregator</a> (peer, length, attr, &amp;as4_aggregator, &amp;as4_aggregator_addr);
<a name="l01693"></a>01693       <span class="keywordflow">break</span>;
<a name="l01694"></a>01694     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>:
<a name="l01695"></a>01695       ret = <a class="code" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">bgp_attr_community</a> (peer, length, attr, flag);
<a name="l01696"></a>01696       <span class="keywordflow">break</span>;
<a name="l01697"></a>01697     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>:
<a name="l01698"></a>01698       ret = <a class="code" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">bgp_attr_originator_id</a> (peer, length, attr, flag);
<a name="l01699"></a>01699       <span class="keywordflow">break</span>;
<a name="l01700"></a>01700     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>:
<a name="l01701"></a>01701       ret = <a class="code" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">bgp_attr_cluster_list</a> (peer, length, attr, flag);
<a name="l01702"></a>01702       <span class="keywordflow">break</span>;
<a name="l01703"></a>01703     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>:
<a name="l01704"></a>01704       ret = <a class="code" href="bgp__attr_8c.html#a3d8c4bfcee360cc1aeb5b4c1b7033360">bgp_mp_reach_parse</a> (peer, length, attr, mp_update);
<a name="l01705"></a>01705       <span class="keywordflow">break</span>;
<a name="l01706"></a>01706     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>:
<a name="l01707"></a>01707       ret = <a class="code" href="bgp__attr_8c.html#af99785d5e3ee803d5d4b7021e0b8448a">bgp_mp_unreach_parse</a> (peer, length, mp_withdraw);
<a name="l01708"></a>01708       <span class="keywordflow">break</span>;
<a name="l01709"></a>01709     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>:
<a name="l01710"></a>01710       ret = <a class="code" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">bgp_attr_ext_communities</a> (peer, length, attr, flag);
<a name="l01711"></a>01711       <span class="keywordflow">break</span>;
<a name="l01712"></a>01712         <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>:
<a name="l01713"></a>01713           ret = <a class="code" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">bgp_attr_aspathlimit</a> (peer, length, attr, flag, startp);
<a name="l01714"></a>01714           <span class="keywordflow">break</span>;
<a name="l01715"></a>01715     <span class="keywordflow">default</span>:
<a name="l01716"></a>01716       ret = <a class="code" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">bgp_attr_unknown</a> (peer, attr, flag, type, length, startp);
<a name="l01717"></a>01717       <span class="keywordflow">break</span>;
<a name="l01718"></a>01718     }
<a name="l01719"></a>01719 
<a name="l01720"></a>01720       <span class="comment">/* If error occured immediately return to the caller. */</span>
<a name="l01721"></a>01721       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01722"></a>01722         {
<a name="l01723"></a>01723           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
<a name="l01724"></a>01724                 <span class="stringliteral">&quot;%s: Attribute %s, parse error&quot;</span>, 
<a name="l01725"></a>01725                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
<a name="l01726"></a>01726                 <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (attr_str, type));
<a name="l01727"></a>01727            <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01728"></a>01728                             <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
<a name="l01729"></a>01729                             <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01730"></a>01730            <span class="keywordflow">return</span> ret;
<a name="l01731"></a>01731         }
<a name="l01732"></a>01732 
<a name="l01733"></a>01733       <span class="comment">/* Check the fetched length. */</span>
<a name="l01734"></a>01734       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) != attr_endp)
<a name="l01735"></a>01735     {
<a name="l01736"></a>01736       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01737"></a>01737         <span class="stringliteral">&quot;%s: BGP attribute %s, fetch error&quot;</span>, 
<a name="l01738"></a>01738                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (attr_str, type));
<a name="l01739"></a>01739       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01740"></a>01740                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01741"></a>01741                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01742"></a>01742       <span class="keywordflow">return</span> -1;
<a name="l01743"></a>01743     }
<a name="l01744"></a>01744     }
<a name="l01745"></a>01745 
<a name="l01746"></a>01746   <span class="comment">/* Check final read pointer is same as end pointer. */</span>
<a name="l01747"></a>01747   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) != endp)
<a name="l01748"></a>01748     {
<a name="l01749"></a>01749       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01750"></a>01750         <span class="stringliteral">&quot;%s BGP attribute %s, length mismatch&quot;</span>,
<a name="l01751"></a>01751         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (attr_str, type));
<a name="l01752"></a>01752       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
<a name="l01753"></a>01753                <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01754"></a>01754                <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
<a name="l01755"></a>01755       <span class="keywordflow">return</span> -1;
<a name="l01756"></a>01756     }
<a name="l01757"></a>01757 
<a name="l01758"></a>01758   <span class="comment">/* </span>
<a name="l01759"></a>01759 <span class="comment">   * At this place we can see whether we got AS4_PATH and/or</span>
<a name="l01760"></a>01760 <span class="comment">   * AS4_AGGREGATOR from a 16Bit peer and act accordingly.</span>
<a name="l01761"></a>01761 <span class="comment">   * We can not do this before we&#39;ve read all attributes because</span>
<a name="l01762"></a>01762 <span class="comment">   * the as4 handling does not say whether AS4_PATH has to be sent</span>
<a name="l01763"></a>01763 <span class="comment">   * after AS_PATH or not - and when AS4_AGGREGATOR will be send</span>
<a name="l01764"></a>01764 <span class="comment">   * in relationship to AGGREGATOR.</span>
<a name="l01765"></a>01765 <span class="comment">   * So, to be defensive, we are not relying on any order and read</span>
<a name="l01766"></a>01766 <span class="comment">   * all attributes first, including these 32bit ones, and now,</span>
<a name="l01767"></a>01767 <span class="comment">   * afterwards, we look what and if something is to be done for as4.</span>
<a name="l01768"></a>01768 <span class="comment">   */</span>
<a name="l01769"></a>01769   <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">bgp_attr_munge_as4_attrs</a> (peer, attr, as4_path,
<a name="l01770"></a>01770                                 as4_aggregator, &amp;as4_aggregator_addr))
<a name="l01771"></a>01771     <span class="keywordflow">return</span> -1;
<a name="l01772"></a>01772 
<a name="l01773"></a>01773   <span class="comment">/* At this stage, we have done all fiddling with as4, and the</span>
<a name="l01774"></a>01774 <span class="comment">   * resulting info is in attr-&gt;aggregator resp. attr-&gt;aspath</span>
<a name="l01775"></a>01775 <span class="comment">   * so we can chuck as4_aggregator and as4_path alltogether in</span>
<a name="l01776"></a>01776 <span class="comment">   * order to save memory</span>
<a name="l01777"></a>01777 <span class="comment">   */</span>
<a name="l01778"></a>01778   <span class="keywordflow">if</span> ( as4_path )
<a name="l01779"></a>01779     {
<a name="l01780"></a>01780       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a>( as4_path ); <span class="comment">/* unintern - it is in the hash */</span>
<a name="l01781"></a>01781       as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01782"></a>01782       <span class="comment">/* The flag that we got this is still there, but that does not</span>
<a name="l01783"></a>01783 <span class="comment">       * do any trouble</span>
<a name="l01784"></a>01784 <span class="comment">       */</span>
<a name="l01785"></a>01785     }
<a name="l01786"></a>01786   <span class="comment">/*</span>
<a name="l01787"></a>01787 <span class="comment">   * The &quot;rest&quot; of the code does nothing with as4_aggregator.</span>
<a name="l01788"></a>01788 <span class="comment">   * there is no memory attached specifically which is not part</span>
<a name="l01789"></a>01789 <span class="comment">   * of the attr.</span>
<a name="l01790"></a>01790 <span class="comment">   * so ignoring just means do nothing.</span>
<a name="l01791"></a>01791 <span class="comment">   */</span>
<a name="l01792"></a>01792   <span class="comment">/*</span>
<a name="l01793"></a>01793 <span class="comment">   * Finally do the checks on the aspath we did not do yet</span>
<a name="l01794"></a>01794 <span class="comment">   * because we waited for a potentially synthesized aspath.</span>
<a name="l01795"></a>01795 <span class="comment">   */</span>
<a name="l01796"></a>01796   <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
<a name="l01797"></a>01797     {
<a name="l01798"></a>01798       ret = <a class="code" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">bgp_attr_aspath_check</a>( peer, attr );
<a name="l01799"></a>01799       <span class="keywordflow">if</span> ( ret &lt; 0 )
<a name="l01800"></a>01800     <span class="keywordflow">return</span> ret;
<a name="l01801"></a>01801     }
<a name="l01802"></a>01802 
<a name="l01803"></a>01803   <span class="comment">/* Finally intern unknown attribute. */</span>
<a name="l01804"></a>01804   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l01805"></a>01805     attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
<a name="l01806"></a>01806 
<a name="l01807"></a>01807   <span class="keywordflow">return</span> 0;
<a name="l01808"></a>01808 }
<a name="l01809"></a>01809 
<a name="l01810"></a>01810 <span class="comment">/* Well-known attribute check. */</span>
<a name="l01811"></a>01811 <span class="keywordtype">int</span>
<a name="l01812"></a><a class="code" href="bgp__attr_8h.html#a53cba2a60c5d3f7fac9d5d190fd1dadb">01812</a> <a class="code" href="bgp__attr_8c.html#a8a1ebdfc7d1986e7f14e9146c58915e4">bgp_attr_check</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l01813"></a>01813 {
<a name="l01814"></a>01814   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
<a name="l01815"></a>01815   
<a name="l01816"></a>01816   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>)))
<a name="l01817"></a>01817     type = <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>;
<a name="l01818"></a>01818 
<a name="l01819"></a>01819   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
<a name="l01820"></a>01820     type = <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>;
<a name="l01821"></a>01821 
<a name="l01822"></a>01822   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>)))
<a name="l01823"></a>01823     type = <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>;
<a name="l01824"></a>01824 
<a name="l01825"></a>01825   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
<a name="l01826"></a>01826       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>)))
<a name="l01827"></a>01827     type = <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>;
<a name="l01828"></a>01828 
<a name="l01829"></a>01829   <span class="keywordflow">if</span> (type)
<a name="l01830"></a>01830     {
<a name="l01831"></a>01831       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
<a name="l01832"></a>01832         <span class="stringliteral">&quot;%s Missing well-known attribute %d.&quot;</span>,
<a name="l01833"></a>01833         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
<a name="l01834"></a>01834       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l01835"></a>01835                  <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01836"></a>01836                  <a class="code" href="bgpd_8h.html#af452ed83988422b98f2ec9c8ee97c23a">BGP_NOTIFY_UPDATE_MISS_ATTR</a>,
<a name="l01837"></a>01837                  &amp;type, 1);
<a name="l01838"></a>01838       <span class="keywordflow">return</span> -1;
<a name="l01839"></a>01839     }
<a name="l01840"></a>01840   <span class="keywordflow">return</span> 0;
<a name="l01841"></a>01841 }
<a name="l01842"></a>01842 
<a name="l01843"></a>01843 <span class="keywordtype">int</span> <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l01844"></a>01844 
<a name="l01845"></a>01845 <span class="comment">/* Make attribute packet. */</span>
<a name="l01846"></a>01846 <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>
<a name="l01847"></a><a class="code" href="bgp__attr_8h.html#a9c8856cdecaca73aff9e0773fe1499a3">01847</a> <a class="code" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l01848"></a>01848               <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l01849"></a>01849               <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> peer *from,
<a name="l01850"></a>01850               <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)
<a name="l01851"></a>01851 {
<a name="l01852"></a>01852   <span class="keywordtype">size_t</span> cp;
<a name="l01853"></a>01853   <span class="keywordtype">size_t</span> aspath_sizep;
<a name="l01854"></a>01854   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
<a name="l01855"></a>01855   <span class="keywordtype">int</span> send_as4_path = 0;
<a name="l01856"></a>01856   <span class="keywordtype">int</span> send_as4_aggregator = 0;
<a name="l01857"></a>01857   <span class="keywordtype">int</span> use32bit = (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>)) ? 1 : 0;
<a name="l01858"></a>01858 
<a name="l01859"></a>01859   <span class="keywordflow">if</span> (! bgp)
<a name="l01860"></a>01860     bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l01861"></a>01861 
<a name="l01862"></a>01862   <span class="comment">/* Remember current pointer. */</span>
<a name="l01863"></a>01863   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l01864"></a>01864 
<a name="l01865"></a>01865   <span class="comment">/* Origin attribute. */</span>
<a name="l01866"></a>01866   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l01867"></a>01867   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
<a name="l01868"></a>01868   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);
<a name="l01869"></a>01869   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);
<a name="l01870"></a>01870 
<a name="l01871"></a>01871   <span class="comment">/* AS path attribute. */</span>
<a name="l01872"></a>01872 
<a name="l01873"></a>01873   <span class="comment">/* If remote-peer is EBGP */</span>
<a name="l01874"></a>01874   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l01875"></a>01875       &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
<a name="l01876"></a>01876       || attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#a142f9a26d6c89fa4f01050cec21aa4d4">segments</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01877"></a>01877       &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)))
<a name="l01878"></a>01878     {    
<a name="l01879"></a>01879       aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l01880"></a>01880 
<a name="l01881"></a>01881       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l01882"></a>01882     {
<a name="l01883"></a>01883       <span class="comment">/* Strip the confed info, and then stuff our path CONFED_ID</span>
<a name="l01884"></a>01884 <span class="comment">         on the front */</span>
<a name="l01885"></a>01885       aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);
<a name="l01886"></a>01886       aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>);
<a name="l01887"></a>01887     }
<a name="l01888"></a>01888       <span class="keywordflow">else</span>
<a name="l01889"></a>01889     {
<a name="l01890"></a>01890       aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
<a name="l01891"></a>01891       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l01892"></a>01892         aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>);
<a name="l01893"></a>01893     }
<a name="l01894"></a>01894     }
<a name="l01895"></a>01895   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l01896"></a>01896     {
<a name="l01897"></a>01897       <span class="comment">/* A confed member, so we need to do the AS_CONFED_SEQUENCE thing */</span>
<a name="l01898"></a>01898       aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l01899"></a>01899       aspath = <a class="code" href="bgp__aspath_8c.html#a601c9ef2ba7a75d8757e04d3f8585886">aspath_add_confed_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
<a name="l01900"></a>01900     }
<a name="l01901"></a>01901   <span class="keywordflow">else</span>
<a name="l01902"></a>01902     aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
<a name="l01903"></a>01903 
<a name="l01904"></a>01904   <span class="comment">/* If peer is not AS4 capable, then:</span>
<a name="l01905"></a>01905 <span class="comment">   * - send the created AS_PATH out as AS4_PATH (optional, transitive),</span>
<a name="l01906"></a>01906 <span class="comment">   *   but ensure that no AS_CONFED_SEQUENCE and AS_CONFED_SET path segment</span>
<a name="l01907"></a>01907 <span class="comment">   *   types are in it (i.e. exclude them if they are there)</span>
<a name="l01908"></a>01908 <span class="comment">   *   AND do this only if there is at least one asnum &gt; 65535 in the path!</span>
<a name="l01909"></a>01909 <span class="comment">   * - send an AS_PATH out, but put 16Bit ASnums in it, not 32bit, and change</span>
<a name="l01910"></a>01910 <span class="comment">   *   all ASnums &gt; 65535 to BGP_AS_TRANS</span>
<a name="l01911"></a>01911 <span class="comment">   */</span>
<a name="l01912"></a>01912 
<a name="l01913"></a>01913   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l01914"></a>01914   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
<a name="l01915"></a>01915   aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l01916"></a>01916   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l01917"></a>01917   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, use32bit));
<a name="l01918"></a>01918   
<a name="l01919"></a>01919   <span class="comment">/* OLD session may need NEW_AS_PATH sent, if there are 4-byte ASNs </span>
<a name="l01920"></a>01920 <span class="comment">   * in the path</span>
<a name="l01921"></a>01921 <span class="comment">   */</span>
<a name="l01922"></a>01922   <span class="keywordflow">if</span> (!use32bit &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a594fc069e213e63fc1a15af40d93b3d4">aspath_has_as4</a> (aspath))
<a name="l01923"></a>01923       send_as4_path = 1; <span class="comment">/* we&#39;ll do this later, at the correct place */</span>
<a name="l01924"></a>01924   
<a name="l01925"></a>01925   <span class="comment">/* Nexthop attribute. */</span>
<a name="l01926"></a>01926   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>) &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l01927"></a>01927     {
<a name="l01928"></a>01928       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l01929"></a>01929       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<a name="l01930"></a>01930       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l01931"></a>01931       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01932"></a>01932     {
<a name="l01933"></a>01933       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
<a name="l01934"></a>01934         <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>.s_addr);
<a name="l01935"></a>01935       <span class="keywordflow">else</span>
<a name="l01936"></a>01936         <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
<a name="l01937"></a>01937     }
<a name="l01938"></a>01938       <span class="keywordflow">else</span>
<a name="l01939"></a>01939     <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
<a name="l01940"></a>01940     }
<a name="l01941"></a>01941 
<a name="l01942"></a>01942   <span class="comment">/* MED attribute. */</span>
<a name="l01943"></a>01943   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l01944"></a>01944     {
<a name="l01945"></a>01945       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l01946"></a>01946       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l01947"></a>01947       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l01948"></a>01948       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
<a name="l01949"></a>01949     }
<a name="l01950"></a>01950 
<a name="l01951"></a>01951   <span class="comment">/* Local preference. */</span>
<a name="l01952"></a>01952   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ||
<a name="l01953"></a>01953       <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l01954"></a>01954     {
<a name="l01955"></a>01955       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l01956"></a>01956       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
<a name="l01957"></a>01957       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l01958"></a>01958       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
<a name="l01959"></a>01959     }
<a name="l01960"></a>01960 
<a name="l01961"></a>01961   <span class="comment">/* Atomic aggregate. */</span>
<a name="l01962"></a>01962   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
<a name="l01963"></a>01963     {
<a name="l01964"></a>01964       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l01965"></a>01965       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l01966"></a>01966       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l01967"></a>01967     }
<a name="l01968"></a>01968 
<a name="l01969"></a>01969   <span class="comment">/* Aggregator. */</span>
<a name="l01970"></a>01970   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
<a name="l01971"></a>01971     {
<a name="l01972"></a>01972       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l01973"></a>01973       
<a name="l01974"></a>01974       <span class="comment">/* Common to BGP_ATTR_AGGREGATOR, regardless of ASN size */</span>
<a name="l01975"></a>01975       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l01976"></a>01976       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
<a name="l01977"></a>01977       
<a name="l01978"></a>01978       <span class="keywordflow">if</span> (use32bit)
<a name="l01979"></a>01979         {
<a name="l01980"></a>01980           <span class="comment">/* AS4 capable peer */</span>
<a name="l01981"></a>01981           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
<a name="l01982"></a>01982           <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
<a name="l01983"></a>01983         }
<a name="l01984"></a>01984       <span class="keywordflow">else</span>
<a name="l01985"></a>01985         {
<a name="l01986"></a>01986           <span class="comment">/* 2-byte AS peer */</span>
<a name="l01987"></a>01987           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 6);
<a name="l01988"></a>01988           
<a name="l01989"></a>01989           <span class="comment">/* Is ASN representable in 2-bytes? Or must AS_TRANS be used? */</span>
<a name="l01990"></a>01990           <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> &gt; 65535 )
<a name="l01991"></a>01991             {
<a name="l01992"></a>01992               <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>);
<a name="l01993"></a>01993               
<a name="l01994"></a>01994               <span class="comment">/* we have to send AS4_AGGREGATOR, too.</span>
<a name="l01995"></a>01995 <span class="comment">               * we&#39;ll do that later in order to send attributes in ascending</span>
<a name="l01996"></a>01996 <span class="comment">               * order.</span>
<a name="l01997"></a>01997 <span class="comment">               */</span>
<a name="l01998"></a>01998               send_as4_aggregator = 1;
<a name="l01999"></a>01999             }
<a name="l02000"></a>02000           <span class="keywordflow">else</span>
<a name="l02001"></a>02001             <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, (u_int16_t) attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
<a name="l02002"></a>02002         }
<a name="l02003"></a>02003       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
<a name="l02004"></a>02004     }
<a name="l02005"></a>02005 
<a name="l02006"></a>02006   <span class="comment">/* Community attribute. */</span>
<a name="l02007"></a>02007   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>) 
<a name="l02008"></a>02008       &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>)))
<a name="l02009"></a>02009     {
<a name="l02010"></a>02010       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
<a name="l02011"></a>02011     {
<a name="l02012"></a>02012       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02013"></a>02013       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l02014"></a>02014       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02015"></a>02015     }
<a name="l02016"></a>02016       <span class="keywordflow">else</span>
<a name="l02017"></a>02017     {
<a name="l02018"></a>02018       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02019"></a>02019       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l02020"></a>02020       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02021"></a>02021     }
<a name="l02022"></a>02022       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02023"></a>02023     }
<a name="l02024"></a>02024 
<a name="l02025"></a>02025   <span class="comment">/* Route Reflector. */</span>
<a name="l02026"></a>02026   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
<a name="l02027"></a>02027       &amp;&amp; from
<a name="l02028"></a>02028       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02029"></a>02029     {
<a name="l02030"></a>02030       <span class="comment">/* Originator ID. */</span>
<a name="l02031"></a>02031       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02032"></a>02032       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>);
<a name="l02033"></a>02033       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02034"></a>02034 
<a name="l02035"></a>02035       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
<a name="l02036"></a>02036     <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>);
<a name="l02037"></a>02037       <span class="keywordflow">else</span> 
<a name="l02038"></a>02038         <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;from-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>);
<a name="l02039"></a>02039 
<a name="l02040"></a>02040       <span class="comment">/* Cluster list. */</span>
<a name="l02041"></a>02041       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02042"></a>02042       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>);
<a name="l02043"></a>02043       
<a name="l02044"></a>02044       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
<a name="l02045"></a>02045     {
<a name="l02046"></a>02046       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> + 4);
<a name="l02047"></a>02047       <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
<a name="l02048"></a>02048       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
<a name="l02049"></a>02049         <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
<a name="l02050"></a>02050       <span class="keywordflow">else</span>
<a name="l02051"></a>02051         <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
<a name="l02052"></a>02052       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, 
<a name="l02053"></a>02053                   attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
<a name="l02054"></a>02054     }
<a name="l02055"></a>02055       <span class="keywordflow">else</span>
<a name="l02056"></a>02056     {
<a name="l02057"></a>02057       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02058"></a>02058       <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
<a name="l02059"></a>02059       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
<a name="l02060"></a>02060         <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
<a name="l02061"></a>02061       <span class="keywordflow">else</span>
<a name="l02062"></a>02062         <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
<a name="l02063"></a>02063     }
<a name="l02064"></a>02064     }
<a name="l02065"></a>02065 
<a name="l02066"></a>02066 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02067"></a>02067 <span class="preprocessor"></span>  <span class="comment">/* If p is IPv6 address put it into attribute. */</span>
<a name="l02068"></a>02068   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l02069"></a>02069     {
<a name="l02070"></a>02070       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;
<a name="l02071"></a>02071       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l02072"></a>02072       
<a name="l02073"></a>02073       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l02074"></a>02074       
<a name="l02075"></a>02075       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02076"></a>02076       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
<a name="l02077"></a>02077       sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02078"></a>02078       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Marker: Attribute length. */</span>
<a name="l02079"></a>02079       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>); <span class="comment">/* AFI */</span>
<a name="l02080"></a>02080       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);    <span class="comment">/* SAFI */</span>
<a name="l02081"></a>02081 
<a name="l02082"></a>02082       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
<a name="l02083"></a>02083 
<a name="l02084"></a>02084       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
<a name="l02085"></a>02085     <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_global, 16);
<a name="l02086"></a>02086       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
<a name="l02087"></a>02087     {
<a name="l02088"></a>02088       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_global, 16);
<a name="l02089"></a>02089       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_local, 16);
<a name="l02090"></a>02090     }
<a name="l02091"></a>02091       
<a name="l02092"></a>02092       <span class="comment">/* SNPA */</span>
<a name="l02093"></a>02093       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l02094"></a>02094 
<a name="l02095"></a>02095       <span class="comment">/* Prefix write. */</span>
<a name="l02096"></a>02096       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
<a name="l02097"></a>02097 
<a name="l02098"></a>02098       <span class="comment">/* Set MP attribute length. */</span>
<a name="l02099"></a>02099       <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
<a name="l02100"></a>02100     }
<a name="l02101"></a>02101 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02102"></a>02102 
<a name="l02103"></a>02103   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l02104"></a>02104     {
<a name="l02105"></a>02105       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;
<a name="l02106"></a>02106 
<a name="l02107"></a>02107       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02108"></a>02108       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
<a name="l02109"></a>02109       sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02110"></a>02110       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Marker: Attribute Length. */</span>
<a name="l02111"></a>02111       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
<a name="l02112"></a>02112       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);  <span class="comment">/* SAFI */</span>
<a name="l02113"></a>02113 
<a name="l02114"></a>02114       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02115"></a>02115       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
<a name="l02116"></a>02116 
<a name="l02117"></a>02117       <span class="comment">/* SNPA */</span>
<a name="l02118"></a>02118       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l02119"></a>02119 
<a name="l02120"></a>02120       <span class="comment">/* Prefix write. */</span>
<a name="l02121"></a>02121       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
<a name="l02122"></a>02122 
<a name="l02123"></a>02123       <span class="comment">/* Set MP attribute length. */</span>
<a name="l02124"></a>02124       <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
<a name="l02125"></a>02125     }
<a name="l02126"></a>02126 
<a name="l02127"></a>02127   <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02128"></a>02128     {
<a name="l02129"></a>02129       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;
<a name="l02130"></a>02130 
<a name="l02131"></a>02131       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02132"></a>02132       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
<a name="l02133"></a>02133       sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02134"></a>02134       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Length of this attribute. */</span>
<a name="l02135"></a>02135       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
<a name="l02136"></a>02136       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);  <span class="comment">/* SAFI */</span>
<a name="l02137"></a>02137 
<a name="l02138"></a>02138       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 12);
<a name="l02139"></a>02139       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
<a name="l02140"></a>02140       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
<a name="l02141"></a>02141       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);
<a name="l02142"></a>02142 
<a name="l02143"></a>02143       <span class="comment">/* SNPA */</span>
<a name="l02144"></a>02144       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l02145"></a>02145 
<a name="l02146"></a>02146       <span class="comment">/* Tag, RD, Prefix write. */</span>
<a name="l02147"></a>02147       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> + 88);
<a name="l02148"></a>02148       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, tag, 3);
<a name="l02149"></a>02149       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, prd-&gt;val, 8);
<a name="l02150"></a>02150       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>));
<a name="l02151"></a>02151 
<a name="l02152"></a>02152       <span class="comment">/* Set MP attribute length. */</span>
<a name="l02153"></a>02153       <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
<a name="l02154"></a>02154     }
<a name="l02155"></a>02155 
<a name="l02156"></a>02156   <span class="comment">/* Extended Communities attribute. */</span>
<a name="l02157"></a>02157   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>) 
<a name="l02158"></a>02158       &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>)))
<a name="l02159"></a>02159     {
<a name="l02160"></a>02160       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l02161"></a>02161       
<a name="l02162"></a>02162       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attre);
<a name="l02163"></a>02163       
<a name="l02164"></a>02164       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
<a name="l02165"></a>02165           || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
<a name="l02166"></a>02166     {
<a name="l02167"></a>02167       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8 &gt; 255)
<a name="l02168"></a>02168         {
<a name="l02169"></a>02169           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02170"></a>02170           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
<a name="l02171"></a>02171           <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
<a name="l02172"></a>02172         }
<a name="l02173"></a>02173       <span class="keywordflow">else</span>
<a name="l02174"></a>02174         {
<a name="l02175"></a>02175           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02176"></a>02176           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
<a name="l02177"></a>02177           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
<a name="l02178"></a>02178         }
<a name="l02179"></a>02179       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
<a name="l02180"></a>02180     }
<a name="l02181"></a>02181       <span class="keywordflow">else</span>
<a name="l02182"></a>02182     {
<a name="l02183"></a>02183       u_int8_t *pnt;
<a name="l02184"></a>02184       <span class="keywordtype">int</span> tbit;
<a name="l02185"></a>02185       <span class="keywordtype">int</span> ecom_tr_size = 0;
<a name="l02186"></a>02186       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02187"></a>02187 
<a name="l02188"></a>02188       <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
<a name="l02189"></a>02189         {
<a name="l02190"></a>02190           pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
<a name="l02191"></a>02191           tbit = *pnt;
<a name="l02192"></a>02192 
<a name="l02193"></a>02193           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
<a name="l02194"></a>02194         <span class="keywordflow">continue</span>;
<a name="l02195"></a>02195 
<a name="l02196"></a>02196           ecom_tr_size++;
<a name="l02197"></a>02197         }
<a name="l02198"></a>02198 
<a name="l02199"></a>02199       <span class="keywordflow">if</span> (ecom_tr_size)
<a name="l02200"></a>02200         {
<a name="l02201"></a>02201           <span class="keywordflow">if</span> (ecom_tr_size * 8 &gt; 255)
<a name="l02202"></a>02202         {
<a name="l02203"></a>02203           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02204"></a>02204           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
<a name="l02205"></a>02205           <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, ecom_tr_size * 8);
<a name="l02206"></a>02206         }
<a name="l02207"></a>02207           <span class="keywordflow">else</span>
<a name="l02208"></a>02208         {
<a name="l02209"></a>02209           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02210"></a>02210           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
<a name="l02211"></a>02211           <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, ecom_tr_size * 8);
<a name="l02212"></a>02212         }
<a name="l02213"></a>02213 
<a name="l02214"></a>02214           <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
<a name="l02215"></a>02215         {
<a name="l02216"></a>02216           pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
<a name="l02217"></a>02217           tbit = *pnt;
<a name="l02218"></a>02218 
<a name="l02219"></a>02219           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
<a name="l02220"></a>02220             <span class="keywordflow">continue</span>;
<a name="l02221"></a>02221 
<a name="l02222"></a>02222           <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, pnt, 8);
<a name="l02223"></a>02223         }
<a name="l02224"></a>02224         }
<a name="l02225"></a>02225     }
<a name="l02226"></a>02226     }
<a name="l02227"></a>02227 
<a name="l02228"></a>02228   <span class="keywordflow">if</span> ( send_as4_path )
<a name="l02229"></a>02229     {
<a name="l02230"></a>02230       <span class="comment">/* If the peer is NOT As4 capable, AND */</span>
<a name="l02231"></a>02231       <span class="comment">/* there are ASnums &gt; 65535 in path  THEN</span>
<a name="l02232"></a>02232 <span class="comment">       * give out AS4_PATH */</span>
<a name="l02233"></a>02233 
<a name="l02234"></a>02234       <span class="comment">/* Get rid of all AS_CONFED_SEQUENCE and AS_CONFED_SET</span>
<a name="l02235"></a>02235 <span class="comment">       * path segments!</span>
<a name="l02236"></a>02236 <span class="comment">       * Hm, I wonder...  confederation things *should* only be at</span>
<a name="l02237"></a>02237 <span class="comment">       * the beginning of an aspath, right?  Then we should use</span>
<a name="l02238"></a>02238 <span class="comment">       * aspath_delete_confed_seq for this, because it is already</span>
<a name="l02239"></a>02239 <span class="comment">       * there! (JK) </span>
<a name="l02240"></a>02240 <span class="comment">       * Folks, talk to me: what is reasonable here!?</span>
<a name="l02241"></a>02241 <span class="comment">       */</span>
<a name="l02242"></a>02242       aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);
<a name="l02243"></a>02243 
<a name="l02244"></a>02244       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02245"></a>02245       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>);
<a name="l02246"></a>02246       aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02247"></a>02247       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02248"></a>02248       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, 1));
<a name="l02249"></a>02249     }
<a name="l02250"></a>02250 
<a name="l02251"></a>02251   <span class="keywordflow">if</span> (aspath != attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l02252"></a>02252     <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);
<a name="l02253"></a>02253 
<a name="l02254"></a>02254   <span class="keywordflow">if</span> ( send_as4_aggregator ) 
<a name="l02255"></a>02255     {
<a name="l02256"></a>02256       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l02257"></a>02257 
<a name="l02258"></a>02258       <span class="comment">/* send AS4_AGGREGATOR, at this place */</span>
<a name="l02259"></a>02259       <span class="comment">/* this section of code moved here in order to ensure the correct</span>
<a name="l02260"></a>02260 <span class="comment">       * *ascending* order of attributes</span>
<a name="l02261"></a>02261 <span class="comment">       */</span>
<a name="l02262"></a>02262       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02263"></a>02263       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>);
<a name="l02264"></a>02264       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
<a name="l02265"></a>02265       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
<a name="l02266"></a>02266       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
<a name="l02267"></a>02267     }
<a name="l02268"></a>02268   
<a name="l02269"></a>02269   <span class="comment">/* AS-Pathlimit */</span>
<a name="l02270"></a>02270   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>)
<a name="l02271"></a>02271     {
<a name="l02272"></a>02272       u_int32_t as = attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
<a name="l02273"></a>02273       
<a name="l02274"></a>02274       <span class="comment">/* should already have been done in announce_check(), </span>
<a name="l02275"></a>02275 <span class="comment">       * but just in case..</span>
<a name="l02276"></a>02276 <span class="comment">       */</span>
<a name="l02277"></a>02277       <span class="keywordflow">if</span> (!as)
<a name="l02278"></a>02278         as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l02279"></a>02279       
<a name="l02280"></a>02280       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02281"></a>02281       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
<a name="l02282"></a>02282       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 5);
<a name="l02283"></a>02283       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
<a name="l02284"></a>02284       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, as);
<a name="l02285"></a>02285     }
<a name="l02286"></a>02286   
<a name="l02287"></a>02287   <span class="comment">/* Unknown transit attribute. */</span>
<a name="l02288"></a>02288   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l02289"></a>02289     <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>);
<a name="l02290"></a>02290 
<a name="l02291"></a>02291   <span class="comment">/* Return total size of attribute. */</span>
<a name="l02292"></a>02292   <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp;
<a name="l02293"></a>02293 }
<a name="l02294"></a>02294 
<a name="l02295"></a>02295 <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>
<a name="l02296"></a><a class="code" href="bgp__attr_8h.html#acd92813362ab8e29a6095e64f1996fc0">02296</a> <a class="code" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l02297"></a>02297              <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> <a class="code" href="structprefix__rd.html">prefix_rd</a> *prd,
<a name="l02298"></a>02298              u_char *tag)
<a name="l02299"></a>02299 {
<a name="l02300"></a>02300   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
<a name="l02301"></a>02301   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> attrlen_pnt;
<a name="l02302"></a>02302   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size;
<a name="l02303"></a>02303 
<a name="l02304"></a>02304   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02305"></a>02305 
<a name="l02306"></a>02306   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02307"></a>02307   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>);
<a name="l02308"></a>02308 
<a name="l02309"></a>02309   attrlen_pnt = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02310"></a>02310   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Length of this attribute. */</span>
<a name="l02311"></a>02311 
<a name="l02312"></a>02312   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>));
<a name="l02313"></a>02313 
<a name="l02314"></a>02314   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l02315"></a>02315     {
<a name="l02316"></a>02316       <span class="comment">/* SAFI */</span>
<a name="l02317"></a>02317       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);
<a name="l02318"></a>02318 
<a name="l02319"></a>02319       <span class="comment">/* prefix. */</span>
<a name="l02320"></a>02320       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> + 88);
<a name="l02321"></a>02321       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, tag, 3);
<a name="l02322"></a>02322       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, prd-&gt;val, 8);
<a name="l02323"></a>02323       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>));
<a name="l02324"></a>02324     }
<a name="l02325"></a>02325   <span class="keywordflow">else</span>
<a name="l02326"></a>02326     {
<a name="l02327"></a>02327       <span class="comment">/* SAFI */</span>
<a name="l02328"></a>02328       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
<a name="l02329"></a>02329 
<a name="l02330"></a>02330       <span class="comment">/* prefix */</span>
<a name="l02331"></a>02331       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
<a name="l02332"></a>02332     }
<a name="l02333"></a>02333 
<a name="l02334"></a>02334   <span class="comment">/* Set MP attribute length. */</span>
<a name="l02335"></a>02335   size = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - attrlen_pnt - 1;
<a name="l02336"></a>02336   <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, attrlen_pnt, size);
<a name="l02337"></a>02337 
<a name="l02338"></a>02338   <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp;
<a name="l02339"></a>02339 }
<a name="l02340"></a>02340 
<a name="l02341"></a>02341 <span class="comment">/* Initialization of attribute. */</span>
<a name="l02342"></a>02342 <span class="keywordtype">void</span>
<a name="l02343"></a><a class="code" href="bgp__attr_8h.html#a9c65ea9c30a455a48fcc49820025780d">02343</a> <a class="code" href="bgp__attr_8c.html#a9c65ea9c30a455a48fcc49820025780d">bgp_attr_init</a> (<span class="keywordtype">void</span>)
<a name="l02344"></a>02344 {
<a name="l02345"></a>02345   <a class="code" href="bgp__aspath_8c.html#a34b9f56e53531a0e4ceedcb31d59e027">aspath_init</a> ();
<a name="l02346"></a>02346   <a class="code" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">attrhash_init</a> ();
<a name="l02347"></a>02347   <a class="code" href="bgp__community_8c.html#a24d2ec91020660700696ad24408b4768">community_init</a> ();
<a name="l02348"></a>02348   <a class="code" href="bgp__ecommunity_8c.html#a51951f652cd586d53176801edb217319">ecommunity_init</a> ();
<a name="l02349"></a>02349   <a class="code" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">cluster_init</a> ();
<a name="l02350"></a>02350   <a class="code" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">transit_init</a> ();
<a name="l02351"></a>02351 }
<a name="l02352"></a>02352 
<a name="l02353"></a>02353 <span class="keywordtype">void</span>
<a name="l02354"></a><a class="code" href="bgp__attr_8h.html#af16afab87ca745e1e019518a3f012cab">02354</a> <a class="code" href="bgp__attr_8c.html#af16afab87ca745e1e019518a3f012cab">bgp_attr_finish</a> (<span class="keywordtype">void</span>)
<a name="l02355"></a>02355 {
<a name="l02356"></a>02356   <a class="code" href="bgp__aspath_8c.html#ad12467085616732b130bd1edac9277fb">aspath_finish</a> ();
<a name="l02357"></a>02357   <a class="code" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">attrhash_finish</a> ();
<a name="l02358"></a>02358   <a class="code" href="bgp__community_8c.html#a29420c210e4ff289843eb117aed4350a">community_finish</a> ();
<a name="l02359"></a>02359   <a class="code" href="bgp__ecommunity_8c.html#a3909ede3d29a88faad854a2833ec9322">ecommunity_finish</a> ();
<a name="l02360"></a>02360   <a class="code" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">cluster_finish</a> ();
<a name="l02361"></a>02361   <a class="code" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">transit_finish</a> ();
<a name="l02362"></a>02362 }
<a name="l02363"></a>02363 
<a name="l02364"></a>02364 <span class="comment">/* Make attribute packet. */</span>
<a name="l02365"></a>02365 <span class="keywordtype">void</span>
<a name="l02366"></a><a class="code" href="bgp__attr_8h.html#ac0399b3aaff6a3b07b2ecda1b08aebd8">02366</a> <a class="code" href="bgp__attr_8c.html#a1a02efc1fa4f47e5fa5b9ee42edd6d57">bgp_dump_routes_attr</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>, 
<a name="l02367"></a>02367                       <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structprefix.html">prefix</a>)
<a name="l02368"></a>02368 {
<a name="l02369"></a>02369   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
<a name="l02370"></a>02370   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> len;
<a name="l02371"></a>02371   <span class="keywordtype">size_t</span> aspath_lenp;
<a name="l02372"></a>02372   <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
<a name="l02373"></a>02373 
<a name="l02374"></a>02374   <span class="comment">/* Remember current pointer. */</span>
<a name="l02375"></a>02375   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02376"></a>02376 
<a name="l02377"></a>02377   <span class="comment">/* Place holder of length. */</span>
<a name="l02378"></a>02378   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02379"></a>02379 
<a name="l02380"></a>02380   <span class="comment">/* Origin attribute. */</span>
<a name="l02381"></a>02381   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02382"></a>02382   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
<a name="l02383"></a>02383   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);
<a name="l02384"></a>02384   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);
<a name="l02385"></a>02385 
<a name="l02386"></a>02386   aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
<a name="l02387"></a>02387   
<a name="l02388"></a>02388   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02389"></a>02389   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
<a name="l02390"></a>02390   aspath_lenp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02391"></a>02391   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02392"></a>02392   
<a name="l02393"></a>02393   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_lenp, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, 1));
<a name="l02394"></a>02394 
<a name="l02395"></a>02395   <span class="comment">/* Nexthop attribute. */</span>
<a name="l02396"></a>02396   <span class="comment">/* If it&#39;s an IPv6 prefix, don&#39;t dump the IPv4 nexthop to save space */</span>
<a name="l02397"></a>02397   <span class="keywordflow">if</span>(prefix != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l02398"></a>02398 #ifdef HAVE_IPV6
<a name="l02399"></a>02399      &amp;&amp; prefix-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET6
<a name="l02400"></a>02400 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l02401"></a>02401      )
<a name="l02402"></a>02402     {
<a name="l02403"></a>02403       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02404"></a>02404       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<a name="l02405"></a>02405       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02406"></a>02406       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
<a name="l02407"></a>02407     }
<a name="l02408"></a>02408 
<a name="l02409"></a>02409   <span class="comment">/* MED attribute. */</span>
<a name="l02410"></a>02410   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
<a name="l02411"></a>02411     {
<a name="l02412"></a>02412       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02413"></a>02413       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
<a name="l02414"></a>02414       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02415"></a>02415       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
<a name="l02416"></a>02416     }
<a name="l02417"></a>02417 
<a name="l02418"></a>02418   <span class="comment">/* Local preference. */</span>
<a name="l02419"></a>02419   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
<a name="l02420"></a>02420     {
<a name="l02421"></a>02421       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02422"></a>02422       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
<a name="l02423"></a>02423       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
<a name="l02424"></a>02424       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
<a name="l02425"></a>02425     }
<a name="l02426"></a>02426 
<a name="l02427"></a>02427   <span class="comment">/* Atomic aggregate. */</span>
<a name="l02428"></a>02428   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
<a name="l02429"></a>02429     {
<a name="l02430"></a>02430       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02431"></a>02431       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
<a name="l02432"></a>02432       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l02433"></a>02433     }
<a name="l02434"></a>02434 
<a name="l02435"></a>02435   <span class="comment">/* Aggregator. */</span>
<a name="l02436"></a>02436   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
<a name="l02437"></a>02437     {
<a name="l02438"></a>02438       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
<a name="l02439"></a>02439       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02440"></a>02440       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
<a name="l02441"></a>02441       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
<a name="l02442"></a>02442       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
<a name="l02443"></a>02443       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
<a name="l02444"></a>02444     }
<a name="l02445"></a>02445 
<a name="l02446"></a>02446   <span class="comment">/* Community attribute. */</span>
<a name="l02447"></a>02447   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>))
<a name="l02448"></a>02448     {
<a name="l02449"></a>02449       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
<a name="l02450"></a>02450     {
<a name="l02451"></a>02451       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
<a name="l02452"></a>02452       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l02453"></a>02453       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02454"></a>02454     }
<a name="l02455"></a>02455       <span class="keywordflow">else</span>
<a name="l02456"></a>02456     {
<a name="l02457"></a>02457       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02458"></a>02458       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
<a name="l02459"></a>02459       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02460"></a>02460     }
<a name="l02461"></a>02461       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
<a name="l02462"></a>02462     }
<a name="l02463"></a>02463 
<a name="l02464"></a>02464 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02465"></a>02465 <span class="preprocessor"></span>  <span class="comment">/* Add a MP_NLRI attribute to dump the IPv6 next hop */</span>
<a name="l02466"></a>02466   <span class="keywordflow">if</span> (prefix != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; prefix-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp;
<a name="l02467"></a>02467      (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16 || attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32) )
<a name="l02468"></a>02468     {
<a name="l02469"></a>02469       <span class="keywordtype">int</span> sizep;
<a name="l02470"></a>02470       <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
<a name="l02471"></a>02471       
<a name="l02472"></a>02472       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l02473"></a>02473       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
<a name="l02474"></a>02474       sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l02475"></a>02475 
<a name="l02476"></a>02476       <span class="comment">/* MP header */</span>
<a name="l02477"></a>02477       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Marker: Attribute length. */</span>
<a name="l02478"></a>02478       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);      <span class="comment">/* AFI */</span>
<a name="l02479"></a>02479       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>); <span class="comment">/* SAFI */</span>
<a name="l02480"></a>02480 
<a name="l02481"></a>02481       <span class="comment">/* Next hop */</span>
<a name="l02482"></a>02482       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
<a name="l02483"></a>02483       <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(s, &amp;attre-&gt;mp_nexthop_global, 16);
<a name="l02484"></a>02484       <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
<a name="l02485"></a>02485         <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(s, &amp;attre-&gt;mp_nexthop_local, 16);
<a name="l02486"></a>02486 
<a name="l02487"></a>02487       <span class="comment">/* SNPA */</span>
<a name="l02488"></a>02488       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, 0);
<a name="l02489"></a>02489 
<a name="l02490"></a>02490       <span class="comment">/* Prefix */</span>
<a name="l02491"></a>02491       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a>(s, prefix);
<a name="l02492"></a>02492 
<a name="l02493"></a>02493       <span class="comment">/* Set MP attribute length. */</span>
<a name="l02494"></a>02494       <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
<a name="l02495"></a>02495     }
<a name="l02496"></a>02496 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02497"></a>02497 
<a name="l02498"></a>02498   <span class="comment">/* AS-Pathlimit */</span>
<a name="l02499"></a>02499   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>))
<a name="l02500"></a>02500     {
<a name="l02501"></a>02501       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
<a name="l02502"></a>02502       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
<a name="l02503"></a>02503       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 5);
<a name="l02504"></a>02504       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
<a name="l02505"></a>02505       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>);
<a name="l02506"></a>02506     }
<a name="l02507"></a>02507 
<a name="l02508"></a>02508   <span class="comment">/* Return total size of attribute. */</span>
<a name="l02509"></a>02509   len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 2;
<a name="l02510"></a>02510   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, cp, len);
<a name="l02511"></a>02511 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__attr_8c.html">bgp_attr.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:01 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
