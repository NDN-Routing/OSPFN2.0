<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_nexthop.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__nexthop_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_nexthop.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__nexthop_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP nexthop scan</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 2000 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="zclient_8h.html">zclient.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="network_8h.html">network.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="bgp__table_8h.html">bgpd/bgp_table.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="bgp__nexthop_8h.html">bgpd/bgp_nexthop.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="bgp__damp_8h.html">bgpd/bgp_damp.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>    <span class="comment">/* For ZEBRA_SERV_PATH. */</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *<a class="code" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">zlookup_query</a> (<span class="keyword">struct</span> in_addr);
<a name="l00043"></a>00043 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *zlookup_query_ipv6 (<span class="keyword">struct</span> in6_addr *);
<a name="l00045"></a>00045 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">/* Only one BGP scan thread are activated at the same time. */</span>
<a name="l00048"></a><a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">00048</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="bgp__nexthop_8c.html#ae1d26e6bb49112945dc9582df4b6b0fa">bgp_scan_thread</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">/* BGP import thread */</span>
<a name="l00051"></a><a class="code" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">00051</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="bgp__nexthop_8c.html#ab16648923ec4f40f271fbf780e43fe89">bgp_import_thread</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* BGP scan interval. */</span>
<a name="l00054"></a><a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">00054</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* BGP import interval. */</span>
<a name="l00057"></a><a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">00057</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a>;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">/* Route table for next-hop lookup cache. */</span>
<a name="l00060"></a><a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">00060</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="bgp__nexthop_8c.html#a1fb5002cf21081a398eb6cb4fda46d6e">bgp_nexthop_cache_table</a>[<a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>];
<a name="l00061"></a><a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">00061</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="bgp__nexthop_8c.html#acf30d144fb6ca45eb8ff9b581c29f560">cache1_table</a>[<a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>];
<a name="l00062"></a><a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">00062</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="bgp__nexthop_8c.html#a5b9d57ec69a5e4a98da6e0bbb9755ac1">cache2_table</a>[<a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>];
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/* Route table for connected route. */</span>
<a name="l00065"></a><a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">00065</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *<a class="code" href="bgp__nexthop_8c.html#a547cb094783f35603d0fca6edce60316">bgp_connected_table</a>[<a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>];
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">/* BGP nexthop lookup query client. */</span>
<a name="l00068"></a><a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">00068</a> <span class="keyword">struct </span><a class="code" href="structzclient.html">zclient</a> *<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">/* Add nexthop to the end of the list.  */</span>
<a name="l00071"></a>00071 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00072"></a><a class="code" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">00072</a> <a class="code" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">bnc_nexthop_add</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc, <span class="keyword">struct</span> <a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="keyword">struct </span>nexthop *last;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="keywordflow">for</span> (last = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>; last &amp;&amp; last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>; last = last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
<a name="l00077"></a>00077     ;
<a name="l00078"></a>00078   <span class="keywordflow">if</span> (last)
<a name="l00079"></a>00079     last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = nexthop;
<a name="l00080"></a>00080   <span class="keywordflow">else</span>
<a name="l00081"></a>00081     bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a> = nexthop;
<a name="l00082"></a>00082   nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a> = last;
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00086"></a><a class="code" href="bgp__nexthop_8c.html#a397ba73019439e8097b55be5273eb52d">00086</a> <a class="code" href="bgp__nexthop_8c.html#a397ba73019439e8097b55be5273eb52d">bnc_nexthop_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc)
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00089"></a>00089   <span class="keyword">struct </span>nexthop *<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091   <span class="keywordflow">for</span> (nexthop = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>; nexthop; nexthop = next)
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093       next = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
<a name="l00094"></a>00094       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, nexthop);
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *
<a name="l00099"></a><a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">00099</a> <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> (<span class="keywordtype">void</span>)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7bf2d1c64c43b52c3863cd505145194e">MTYPE_BGP_NEXTHOP_CACHE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a>));
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00105"></a><a class="code" href="bgp__nexthop_8c.html#a42c42dbd2aec4d87486bab6bd18f6392">00105</a> <a class="code" href="bgp__nexthop_8c.html#a42c42dbd2aec4d87486bab6bd18f6392">bnc_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107   <a class="code" href="bgp__nexthop_8c.html#a397ba73019439e8097b55be5273eb52d">bnc_nexthop_free</a> (bnc);
<a name="l00108"></a>00108   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7bf2d1c64c43b52c3863cd505145194e">MTYPE_BGP_NEXTHOP_CACHE</a>, bnc);
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00112"></a><a class="code" href="bgp__nexthop_8c.html#a07fc0d82b45d58bd0d74e01e49e66d11">00112</a> <a class="code" href="bgp__nexthop_8c.html#a07fc0d82b45d58bd0d74e01e49e66d11">bgp_nexthop_same</a> (<span class="keyword">struct</span> <a class="code" href="structnexthop.html">nexthop</a> *next1, <span class="keyword">struct</span> <a class="code" href="structnexthop.html">nexthop</a> *next2)
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114   <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> != next2-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
<a name="l00115"></a>00115     <span class="keywordflow">return</span> 0;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">switch</span> (next1-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
<a name="l00118"></a>00118     {
<a name="l00119"></a>00119     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>:
<a name="l00120"></a>00120       <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>))
<a name="l00121"></a>00121     <span class="keywordflow">return</span> 0;
<a name="l00122"></a>00122       <span class="keywordflow">break</span>;
<a name="l00123"></a>00123     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>:
<a name="l00124"></a>00124     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aa38b852f0e7c729f7db77cb0c99030a5">ZEBRA_NEXTHOP_IFNAME</a>:
<a name="l00125"></a>00125       <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> != next2-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
<a name="l00126"></a>00126     <span class="keywordflow">return</span> 0;
<a name="l00127"></a>00127       <span class="keywordflow">break</span>;
<a name="l00128"></a>00128 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aaeb29f4f9e313b846883f1d7462a43a7">ZEBRA_NEXTHOP_IPV6</a>:
<a name="l00130"></a>00130       <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6))
<a name="l00131"></a>00131     <span class="keywordflow">return</span> 0;
<a name="l00132"></a>00132       <span class="keywordflow">break</span>;
<a name="l00133"></a>00133     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a7e61d5eb03f7ca37e73025b64e63966b">ZEBRA_NEXTHOP_IPV6_IFINDEX</a>:
<a name="l00134"></a>00134     <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a11d0a5703feb53099a70ca066bdd22f5">ZEBRA_NEXTHOP_IPV6_IFNAME</a>:
<a name="l00135"></a>00135       <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;next1-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, &amp;next2-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6))
<a name="l00136"></a>00136     <span class="keywordflow">return</span> 0;
<a name="l00137"></a>00137       <span class="keywordflow">if</span> (next1-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> != next2-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
<a name="l00138"></a>00138     <span class="keywordflow">return</span> 0;
<a name="l00139"></a>00139       <span class="keywordflow">break</span>;
<a name="l00140"></a>00140 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00141"></a>00141     <span class="keywordflow">default</span>:
<a name="l00142"></a>00142       <span class="comment">/* do nothing */</span>
<a name="l00143"></a>00143       <span class="keywordflow">break</span>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145   <span class="keywordflow">return</span> 1;
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00149"></a><a class="code" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">00149</a> <a class="code" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">bgp_nexthop_cache_changed</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc1,
<a name="l00150"></a>00150                <span class="keyword">struct</span> <a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc2)
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00153"></a>00153   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *next1, *next2;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="keywordflow">if</span> (bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a> != bnc2-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>)
<a name="l00156"></a>00156     <span class="keywordflow">return</span> 1;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   next1 = bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>;
<a name="l00159"></a>00159   next2 = bnc2-&gt;<a class="code" href="structbgp__nexthop__cache.html#a2c0acec29e0606cf7cfd123fae6c9103">nexthop</a>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   <span class="keywordflow">for</span> (i = 0; i &lt; bnc1-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>; i++)
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163       <span class="keywordflow">if</span> (! <a class="code" href="bgp__nexthop_8c.html#a07fc0d82b45d58bd0d74e01e49e66d11">bgp_nexthop_same</a> (next1, next2))
<a name="l00164"></a>00164     <span class="keywordflow">return</span> 1;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166       next1 = next1-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
<a name="l00167"></a>00167       next2 = next2-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169   <span class="keywordflow">return</span> 0;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">/* If nexthop exists on connected network return 1. */</span>
<a name="l00173"></a>00173 <span class="keywordtype">int</span>
<a name="l00174"></a><a class="code" href="bgp__nexthop_8h.html#a5c7f7a7aa97f2d7f414b599f566f1a38">00174</a> <a class="code" href="bgp__nexthop_8c.html#a30cf2195d772dfb889c717a86cd19629">bgp_nexthop_check_ebgp</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>)
<a name="l00175"></a>00175 {
<a name="l00176"></a>00176   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   <span class="comment">/* If zebra is not enabled return */</span>
<a name="l00179"></a>00179   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00180"></a>00180     <span class="keywordflow">return</span> 1;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   <span class="comment">/* Lookup the address is onlink or not. */</span>
<a name="l00183"></a>00183   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00184"></a>00184     {
<a name="l00185"></a>00185       rn = <a class="code" href="bgp__table_8c.html#afb88ad2431e100f2a29c6af43a1d168e">bgp_node_match_ipv4</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>);
<a name="l00186"></a>00186       <span class="keywordflow">if</span> (rn)
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00189"></a>00189       <span class="keywordflow">return</span> 1;
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191     }
<a name="l00192"></a>00192 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00194"></a>00194     {
<a name="l00195"></a>00195       <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
<a name="l00196"></a>00196     <span class="keywordflow">return</span> 1;
<a name="l00197"></a>00197       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
<a name="l00200"></a>00200         <span class="keywordflow">return</span> 1;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202       rn = bgp_node_match_ipv6 (bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>],
<a name="l00203"></a>00203                       &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global);
<a name="l00204"></a>00204       <span class="keywordflow">if</span> (rn)
<a name="l00205"></a>00205         {
<a name="l00206"></a>00206           <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00207"></a>00207           <span class="keywordflow">return</span> 1;
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210     }
<a name="l00211"></a>00211 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00212"></a>00212   <span class="keywordflow">return</span> 0;
<a name="l00213"></a>00213 }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span><span class="comment">/* Check specified next-hop is reachable or not. */</span>
<a name="l00217"></a>00217 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00218"></a>00218 bgp_nexthop_lookup_ipv6 (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri, <span class="keywordtype">int</span> *changed,
<a name="l00219"></a>00219              <span class="keywordtype">int</span> *metricchanged)
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00222"></a>00222   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00223"></a>00223   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l00224"></a>00224   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   <span class="comment">/* If lookup is not enabled, return valid. */</span>
<a name="l00227"></a>00227   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00228"></a>00228     {
<a name="l00229"></a>00229       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00230"></a>00230         ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;
<a name="l00231"></a>00231       <span class="keywordflow">return</span> 1;
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">/* Only check IPv6 global address only nexthop. */</span>
<a name="l00235"></a>00235   attr = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> != 16 
<a name="l00238"></a>00238       || IN6_IS_ADDR_LINKLOCAL (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global))
<a name="l00239"></a>00239     <span class="keywordflow">return</span> 1;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l00242"></a>00242   <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;
<a name="l00243"></a>00243   <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l00244"></a>00244   <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.u.prefix6 = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="comment">/* IBGP or ebgp-multihop */</span>
<a name="l00247"></a>00247   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>], &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251       bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00252"></a>00252       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254   <span class="keywordflow">else</span>
<a name="l00255"></a>00255     {
<a name="l00256"></a>00256       bnc = zlookup_query_ipv6 (&amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global);
<a name="l00257"></a>00257       <span class="keywordflow">if</span> (bnc)
<a name="l00258"></a>00258     {
<a name="l00259"></a>00259       <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *old;
<a name="l00260"></a>00260       <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *oldrn;
<a name="l00261"></a>00261       <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *oldbnc;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263       <span class="keywordflow">if</span> (changed)
<a name="l00264"></a>00264         {
<a name="l00265"></a>00265           <span class="keywordflow">if</span> (bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] == cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>])
<a name="l00266"></a>00266         old = cache2_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>];
<a name="l00267"></a>00267           <span class="keywordflow">else</span>
<a name="l00268"></a>00268         old = cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>];
<a name="l00269"></a>00269 
<a name="l00270"></a>00270           oldrn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (old, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<a name="l00271"></a>00271           <span class="keywordflow">if</span> (oldrn)
<a name="l00272"></a>00272         {
<a name="l00273"></a>00273           oldbnc = oldrn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275           bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a> = <a class="code" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">bgp_nexthop_cache_changed</a> (bnc, oldbnc);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277           <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> != oldbnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
<a name="l00278"></a>00278             bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a> = 1;
<a name="l00279"></a>00279         }
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282       <span class="keywordflow">else</span>
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284       bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
<a name="l00285"></a>00285       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 0;
<a name="l00286"></a>00286     }
<a name="l00287"></a>00287       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bnc;
<a name="l00288"></a>00288     }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (changed)
<a name="l00291"></a>00291     *changed = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a>;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="keywordflow">if</span> (metricchanged)
<a name="l00294"></a>00294     *metricchanged = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a>;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> &amp;&amp; bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
<a name="l00297"></a>00297     (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (ri))-&gt;igpmetric = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
<a name="l00298"></a>00298   <span class="keywordflow">else</span> if (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00299"></a>00299     ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301   <span class="keywordflow">return</span> bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>;
<a name="l00302"></a>00302 }
<a name="l00303"></a>00303 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="comment">/* Check specified next-hop is reachable or not. */</span>
<a name="l00306"></a>00306 <span class="keywordtype">int</span>
<a name="l00307"></a><a class="code" href="bgp__nexthop_8h.html#aba665a975c0c2a3a14b4b9db79ac9fd7">00307</a> <a class="code" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> peer *peer, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *ri,
<a name="l00308"></a>00308             <span class="keywordtype">int</span> *changed, <span class="keywordtype">int</span> *metricchanged)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00311"></a>00311   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00312"></a>00312   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l00313"></a>00313   <span class="keyword">struct </span>in_addr addr;
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <span class="comment">/* If lookup is not enabled, return valid. */</span>
<a name="l00316"></a>00316   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00317"></a>00317     {
<a name="l00318"></a>00318       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00319"></a>00319         ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;
<a name="l00320"></a>00320       <span class="keywordflow">return</span> 1;
<a name="l00321"></a>00321     }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00325"></a>00325     <span class="keywordflow">return</span> bgp_nexthop_lookup_ipv6 (peer, ri, changed, metricchanged);
<a name="l00326"></a>00326 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   addr = ri-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l00331"></a>00331   p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = AF_INET;
<a name="l00332"></a>00332   p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00333"></a>00333   p.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = addr;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="comment">/* IBGP or ebgp-multihop */</span>
<a name="l00336"></a>00336   rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p);
<a name="l00337"></a>00337 
<a name="l00338"></a>00338   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l00339"></a>00339     {
<a name="l00340"></a>00340       bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00341"></a>00341       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343   <span class="keywordflow">else</span>
<a name="l00344"></a>00344     {
<a name="l00345"></a>00345       bnc = <a class="code" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">zlookup_query</a> (addr);
<a name="l00346"></a>00346       <span class="keywordflow">if</span> (bnc)
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348       <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *old;
<a name="l00349"></a>00349       <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *oldrn;
<a name="l00350"></a>00350       <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *oldbnc;
<a name="l00351"></a>00351 
<a name="l00352"></a>00352       <span class="keywordflow">if</span> (changed)
<a name="l00353"></a>00353         {
<a name="l00354"></a>00354           <span class="keywordflow">if</span> (bgp_nexthop_cache_table[AFI_IP] == cache1_table[AFI_IP])
<a name="l00355"></a>00355         old = cache2_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];
<a name="l00356"></a>00356           <span class="keywordflow">else</span>
<a name="l00357"></a>00357         old = cache1_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];
<a name="l00358"></a>00358 
<a name="l00359"></a>00359           oldrn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (old, &amp;p);
<a name="l00360"></a>00360           <span class="keywordflow">if</span> (oldrn)
<a name="l00361"></a>00361         {
<a name="l00362"></a>00362           oldbnc = oldrn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364           bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a> = <a class="code" href="bgp__nexthop_8c.html#a59e226e6a257f87d506e096946e9dcdf">bgp_nexthop_cache_changed</a> (bnc, oldbnc);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366           <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> != oldbnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
<a name="l00367"></a>00367             bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a> = 1;
<a name="l00368"></a>00368         }
<a name="l00369"></a>00369         }
<a name="l00370"></a>00370     }
<a name="l00371"></a>00371       <span class="keywordflow">else</span>
<a name="l00372"></a>00372     {
<a name="l00373"></a>00373       bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
<a name="l00374"></a>00374       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 0;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bnc;
<a name="l00377"></a>00377     }
<a name="l00378"></a>00378 
<a name="l00379"></a>00379   <span class="keywordflow">if</span> (changed)
<a name="l00380"></a>00380     *changed = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a7c9ff837cb5c18fc512a71aa7037992f">changed</a>;
<a name="l00381"></a>00381 
<a name="l00382"></a>00382   <span class="keywordflow">if</span> (metricchanged)
<a name="l00383"></a>00383     *metricchanged = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ae5acfaa91540ea3b40d22f24b8e57106">metricchanged</a>;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> &amp;&amp; bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>)
<a name="l00386"></a>00386     (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a>(ri))-&gt;igpmetric = bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
<a name="l00387"></a>00387   <span class="keywordflow">else</span> if (ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00388"></a>00388     ri-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#abe62396922b009507e82c29048bfb9a5">igpmetric</a> = 0;
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <span class="keywordflow">return</span> bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>;
<a name="l00391"></a>00391 }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="comment">/* Reset and free all BGP nexthop cache. */</span>
<a name="l00394"></a>00394 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00395"></a><a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">00395</a> <a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a> *table)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00398"></a>00398   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l00399"></a>00399 
<a name="l00400"></a>00400   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (table); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l00401"></a>00401     <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00402"></a>00402       {
<a name="l00403"></a>00403     <a class="code" href="bgp__nexthop_8c.html#a42c42dbd2aec4d87486bab6bd18f6392">bnc_free</a> (bnc);
<a name="l00404"></a>00404     rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00405"></a>00405     <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00406"></a>00406       }
<a name="l00407"></a>00407 }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00410"></a><a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">00410</a> <a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00411"></a>00411 {
<a name="l00412"></a>00412   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00413"></a>00413   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l00414"></a>00414   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *bi;
<a name="l00415"></a>00415   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l00416"></a>00416   <span class="keyword">struct </span>peer *peer;
<a name="l00417"></a>00417   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00418"></a>00418   <span class="keywordtype">int</span> valid;
<a name="l00419"></a>00419   <span class="keywordtype">int</span> current;
<a name="l00420"></a>00420   <span class="keywordtype">int</span> changed;
<a name="l00421"></a>00421   <span class="keywordtype">int</span> metricchanged;
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   <span class="comment">/* Change cache. */</span>
<a name="l00424"></a>00424   <span class="keywordflow">if</span> (bgp_nexthop_cache_table[afi] == cache1_table[afi])
<a name="l00425"></a>00425     bgp_nexthop_cache_table[afi] = cache2_table[afi];
<a name="l00426"></a>00426   <span class="keywordflow">else</span>
<a name="l00427"></a>00427     bgp_nexthop_cache_table[afi] = cache1_table[afi];
<a name="l00428"></a>00428 
<a name="l00429"></a>00429   <span class="comment">/* Get default bgp. */</span>
<a name="l00430"></a>00430   bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l00431"></a>00431   <span class="keywordflow">if</span> (bgp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00432"></a>00432     <span class="keywordflow">return</span>;
<a name="l00433"></a>00433 
<a name="l00434"></a>00434   <span class="comment">/* Maximum prefix check */</span>
<a name="l00435"></a>00435   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00436"></a>00436     {
<a name="l00437"></a>00437       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00438"></a>00438     <span class="keywordflow">continue</span>;
<a name="l00439"></a>00439 
<a name="l00440"></a>00440       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l00441"></a>00441     <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_UNICAST, 1);
<a name="l00442"></a>00442       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l00443"></a>00443     <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_MULTICAST, 1);
<a name="l00444"></a>00444       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
<a name="l00445"></a>00445     <a class="code" href="bgp__route_8c.html#ace201bd3f5b8b07afc5143b88a179c55">bgp_maximum_prefix_overflow</a> (peer, afi, SAFI_MPLS_VPN, 1);
<a name="l00446"></a>00446     }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]); rn;
<a name="l00449"></a>00449        rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l00450"></a>00450     {
<a name="l00451"></a>00451       <span class="keywordflow">for</span> (bi = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>; bi; bi = next)
<a name="l00452"></a>00452     {
<a name="l00453"></a>00453       next = bi-&gt;<a class="code" href="structbgp__info.html#a7a49886b20a2c95c08baa23149501a2a">next</a>;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455       <span class="keywordflow">if</span> (bi-&gt;<a class="code" href="structbgp__info.html#a7d70d35aa6ab6fa769c8e7d662288a35">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#a1126336f7eec606018fa96967a4e5bfb">sub_type</a> == <a class="code" href="bgp__route_8h.html#a4734a795191347f5279e59e64c75b7a3">BGP_ROUTE_NORMAL</a>)
<a name="l00456"></a>00456         {
<a name="l00457"></a>00457           changed = 0;
<a name="l00458"></a>00458           metricchanged = 0;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460           <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> == 1)
<a name="l00461"></a>00461         valid = <a class="code" href="bgp__nexthop_8c.html#a30cf2195d772dfb889c717a86cd19629">bgp_nexthop_check_ebgp</a> (afi, bi-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>);
<a name="l00462"></a>00462           <span class="keywordflow">else</span>
<a name="l00463"></a>00463         valid = <a class="code" href="bgp__nexthop_8c.html#add9ef5c38fe9bb5e1a0fd5d2975a1d36">bgp_nexthop_lookup</a> (afi, bi-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>, bi,
<a name="l00464"></a>00464                         &amp;changed, &amp;metricchanged);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466           current = <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>) ? 1 : 0;
<a name="l00467"></a>00467 
<a name="l00468"></a>00468           <span class="keywordflow">if</span> (changed)
<a name="l00469"></a>00469         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a364ac84609844c369deadc56ea2ab24f">BGP_INFO_IGP_CHANGED</a>);
<a name="l00470"></a>00470           <span class="keywordflow">else</span>
<a name="l00471"></a>00471         <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a364ac84609844c369deadc56ea2ab24f">BGP_INFO_IGP_CHANGED</a>);
<a name="l00472"></a>00472 
<a name="l00473"></a>00473           <span class="keywordflow">if</span> (valid != current)
<a name="l00474"></a>00474         {
<a name="l00475"></a>00475           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bi-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>))
<a name="l00476"></a>00476             {
<a name="l00477"></a>00477               <a class="code" href="bgp__route_8h.html#a91162dd024d89c577f51b3615b75496f">bgp_aggregate_decrement</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
<a name="l00478"></a>00478                            afi, SAFI_UNICAST);
<a name="l00479"></a>00479               <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, bi, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l00480"></a>00480             }
<a name="l00481"></a>00481           <span class="keywordflow">else</span>
<a name="l00482"></a>00482             {
<a name="l00483"></a>00483               <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, bi, <a class="code" href="bgp__route_8h.html#aa7f689448430856658d348cc8d84f27d">BGP_INFO_VALID</a>);
<a name="l00484"></a>00484               <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
<a name="l00485"></a>00485                            afi, SAFI_UNICAST);
<a name="l00486"></a>00486             }
<a name="l00487"></a>00487         }
<a name="l00488"></a>00488 
<a name="l00489"></a>00489               <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][SAFI_UNICAST],
<a name="l00490"></a>00490           <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>)
<a name="l00491"></a>00491                   &amp;&amp;  bi-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; bi-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a> )
<a name="l00492"></a>00492                 <span class="keywordflow">if</span> (<a class="code" href="bgp__damp_8c.html#a1cdac465054860376051b602d242b392">bgp_damp_scan</a> (bi, afi, SAFI_UNICAST))
<a name="l00493"></a>00493           <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bi,
<a name="l00494"></a>00494                        afi, SAFI_UNICAST);
<a name="l00495"></a>00495         }
<a name="l00496"></a>00496     }
<a name="l00497"></a>00497       <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, rn, afi, SAFI_UNICAST);
<a name="l00498"></a>00498     }
<a name="l00499"></a>00499 
<a name="l00500"></a>00500   <span class="comment">/* Flash old cache. */</span>
<a name="l00501"></a>00501   <span class="keywordflow">if</span> (bgp_nexthop_cache_table[afi] == cache1_table[afi])
<a name="l00502"></a>00502     <a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (cache2_table[afi]);
<a name="l00503"></a>00503   <span class="keywordflow">else</span>
<a name="l00504"></a>00504     <a class="code" href="bgp__nexthop_8c.html#accb79777a8fe406464c11e435c913500">bgp_nexthop_cache_reset</a> (cache1_table[afi]);
<a name="l00505"></a>00505 
<a name="l00506"></a>00506   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l00507"></a>00507     {
<a name="l00508"></a>00508       <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00509"></a>00509     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;scanning IPv4 Unicast routing tables&quot;</span>);
<a name="l00510"></a>00510       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00511"></a>00511     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;scanning IPv6 Unicast routing tables&quot;</span>);
<a name="l00512"></a>00512     }
<a name="l00513"></a>00513 }
<a name="l00514"></a>00514 
<a name="l00515"></a>00515 <span class="comment">/* BGP scan thread.  This thread check nexthop reachability. */</span>
<a name="l00516"></a>00516 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00517"></a><a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">00517</a> <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00518"></a>00518 {
<a name="l00519"></a>00519   bgp_scan_thread =
<a name="l00520"></a>00520     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
<a name="l00521"></a>00521 
<a name="l00522"></a>00522   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l00523"></a>00523     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Performing BGP general scanning&quot;</span>);
<a name="l00524"></a>00524 
<a name="l00525"></a>00525   <a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l00526"></a>00526 
<a name="l00527"></a>00527 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00528"></a>00528 <span class="preprocessor"></span>  <a class="code" href="bgp__nexthop_8c.html#a372361ddaba88df1087f72b2108b401f">bgp_scan</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l00529"></a>00529 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00530"></a>00530 
<a name="l00531"></a>00531   <span class="keywordflow">return</span> 0;
<a name="l00532"></a>00532 }
<a name="l00533"></a>00533 
<a name="l00534"></a><a class="code" href="structbgp__connected__ref.html">00534</a> <span class="keyword">struct </span><a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a>
<a name="l00535"></a>00535 {
<a name="l00536"></a><a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">00536</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>;
<a name="l00537"></a>00537 };
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 <span class="keywordtype">void</span>
<a name="l00540"></a><a class="code" href="bgp__nexthop_8h.html#a1b15452db62fa5ddbd2376db31660d30">00540</a> <a class="code" href="bgp__nexthop_8c.html#a460fcfcab9de444aa794ad7fe7524c6d">bgp_connected_add</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00541"></a>00541 {
<a name="l00542"></a>00542   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00543"></a>00543   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *addr;
<a name="l00544"></a>00544   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00545"></a>00545   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00546"></a>00546   <span class="keyword">struct </span><a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a> *bc;
<a name="l00547"></a>00547 
<a name="l00548"></a>00548   ifp = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;
<a name="l00549"></a>00549 
<a name="l00550"></a>00550   <span class="keywordflow">if</span> (! ifp)
<a name="l00551"></a>00551     <span class="keywordflow">return</span>;
<a name="l00552"></a>00552 
<a name="l00553"></a>00553   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00554"></a>00554     <span class="keywordflow">return</span>;
<a name="l00555"></a>00555 
<a name="l00556"></a>00556   addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00557"></a>00557 
<a name="l00558"></a>00558   <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00559"></a>00559     {
<a name="l00560"></a>00560       <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00561"></a>00561       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00562"></a>00562 
<a name="l00563"></a>00563       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p))
<a name="l00564"></a>00564     <span class="keywordflow">return</span>;
<a name="l00565"></a>00565 
<a name="l00566"></a>00566       rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00567"></a>00567       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l00568"></a>00568     {
<a name="l00569"></a>00569       bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00570"></a>00570       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>++;
<a name="l00571"></a>00571     }
<a name="l00572"></a>00572       <span class="keywordflow">else</span>
<a name="l00573"></a>00573     {
<a name="l00574"></a>00574       bc = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a>));
<a name="l00575"></a>00575       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> = 1;
<a name="l00576"></a>00576       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bc;
<a name="l00577"></a>00577     }
<a name="l00578"></a>00578     }
<a name="l00579"></a>00579 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00580"></a>00580 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00581"></a>00581     {
<a name="l00582"></a>00582       PREFIX_COPY_IPV6(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00583"></a>00583       apply_mask_ipv6 ((<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00584"></a>00584 
<a name="l00585"></a>00585       <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;p.u.prefix6))
<a name="l00586"></a>00586     <span class="keywordflow">return</span>;
<a name="l00587"></a>00587 
<a name="l00588"></a>00588       <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
<a name="l00589"></a>00589     <span class="keywordflow">return</span>;
<a name="l00590"></a>00590 
<a name="l00591"></a>00591       rn = <a class="code" href="bgp__table_8c.html#a81c9e9d48e2d66148c713e82968df389">bgp_node_get</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00592"></a>00592       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
<a name="l00593"></a>00593     {
<a name="l00594"></a>00594       bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00595"></a>00595       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>++;
<a name="l00596"></a>00596     }
<a name="l00597"></a>00597       <span class="keywordflow">else</span>
<a name="l00598"></a>00598     {
<a name="l00599"></a>00599       bc = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a>));
<a name="l00600"></a>00600       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> = 1;
<a name="l00601"></a>00601       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = bc;
<a name="l00602"></a>00602     }
<a name="l00603"></a>00603     }
<a name="l00604"></a>00604 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00605"></a>00605 }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607 <span class="keywordtype">void</span>
<a name="l00608"></a><a class="code" href="bgp__nexthop_8h.html#aa55205bdd4f5695e78f7b84029f8ba55">00608</a> <a class="code" href="bgp__nexthop_8c.html#a3379269447e15a3519cc24cc3ae0de14">bgp_connected_delete</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00609"></a>00609 {
<a name="l00610"></a>00610   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00611"></a>00611   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *addr;
<a name="l00612"></a>00612   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00613"></a>00613   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00614"></a>00614   <span class="keyword">struct </span><a class="code" href="structbgp__connected__ref.html">bgp_connected_ref</a> *bc;
<a name="l00615"></a>00615 
<a name="l00616"></a>00616   ifp = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00619"></a>00619     <span class="keywordflow">return</span>;
<a name="l00620"></a>00620 
<a name="l00621"></a>00621   addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00622"></a>00622 
<a name="l00623"></a>00623   <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00624"></a>00624     {
<a name="l00625"></a>00625       <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00626"></a>00626       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00627"></a>00627 
<a name="l00628"></a>00628       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p))
<a name="l00629"></a>00629     <span class="keywordflow">return</span>;
<a name="l00630"></a>00630 
<a name="l00631"></a>00631       rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p);
<a name="l00632"></a>00632       <span class="keywordflow">if</span> (! rn)
<a name="l00633"></a>00633     <span class="keywordflow">return</span>;
<a name="l00634"></a>00634 
<a name="l00635"></a>00635       bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00636"></a>00636       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>--;
<a name="l00637"></a>00637       <span class="keywordflow">if</span> (bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> == 0)
<a name="l00638"></a>00638     {
<a name="l00639"></a>00639       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, bc);
<a name="l00640"></a>00640       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00641"></a>00641     }
<a name="l00642"></a>00642       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00643"></a>00643       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00644"></a>00644     }
<a name="l00645"></a>00645 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00646"></a>00646 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (addr-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
<a name="l00647"></a>00647     {
<a name="l00648"></a>00648       PREFIX_COPY_IPV6(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00649"></a>00649       apply_mask_ipv6 ((<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00650"></a>00650 
<a name="l00651"></a>00651       <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;p.u.prefix6))
<a name="l00652"></a>00652     <span class="keywordflow">return</span>;
<a name="l00653"></a>00653 
<a name="l00654"></a>00654       <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;p.u.prefix6))
<a name="l00655"></a>00655     <span class="keywordflow">return</span>;
<a name="l00656"></a>00656 
<a name="l00657"></a>00657       rn = <a class="code" href="bgp__table_8c.html#aa67a654ce220da27fb3f02757fcb0bdc">bgp_node_lookup</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>], (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00658"></a>00658       <span class="keywordflow">if</span> (! rn)
<a name="l00659"></a>00659     <span class="keywordflow">return</span>;
<a name="l00660"></a>00660 
<a name="l00661"></a>00661       bc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>;
<a name="l00662"></a>00662       bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a>--;
<a name="l00663"></a>00663       <span class="keywordflow">if</span> (bc-&gt;<a class="code" href="structbgp__connected__ref.html#ab67371da05bc39d71a3397a90742843d">refcnt</a> == 0)
<a name="l00664"></a>00664     {
<a name="l00665"></a>00665       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, bc);
<a name="l00666"></a>00666       rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00667"></a>00667     }
<a name="l00668"></a>00668       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00669"></a>00669       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00670"></a>00670     }
<a name="l00671"></a>00671 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00672"></a>00672 }
<a name="l00673"></a>00673 
<a name="l00674"></a>00674 <span class="keywordtype">int</span>
<a name="l00675"></a><a class="code" href="bgp__nexthop_8h.html#a338fffa78e07b8706beeb6a2d1bd2932">00675</a> <a class="code" href="bgp__nexthop_8c.html#af096de71945dda80bbb7dbb1df574c90">bgp_nexthop_self</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> attr *attr)
<a name="l00676"></a>00676 {
<a name="l00677"></a>00677   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00678"></a>00678   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2;
<a name="l00679"></a>00679   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00680"></a>00680   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00681"></a>00681   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00682"></a>00682 
<a name="l00683"></a>00683   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
<a name="l00684"></a>00684     {
<a name="l00685"></a>00685       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node2, ifc))
<a name="l00686"></a>00686     {
<a name="l00687"></a>00687       p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00688"></a>00688 
<a name="l00689"></a>00689       <span class="keywordflow">if</span> (p &amp;&amp; p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET 
<a name="l00690"></a>00690           &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>))
<a name="l00691"></a>00691         <span class="keywordflow">return</span> 1;
<a name="l00692"></a>00692     }
<a name="l00693"></a>00693     }
<a name="l00694"></a>00694   <span class="keywordflow">return</span> 0;
<a name="l00695"></a>00695 }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *
<a name="l00698"></a><a class="code" href="bgp__nexthop_8c.html#a9a04a71252f2a9600023e71ffa8652d3">00698</a> <a class="code" href="bgp__nexthop_8c.html#a9a04a71252f2a9600023e71ffa8652d3">zlookup_read</a> (<span class="keywordtype">void</span>)
<a name="l00699"></a>00699 {
<a name="l00700"></a>00700   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00701"></a>00701   uint16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00702"></a>00702   u_char marker;
<a name="l00703"></a>00703   u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l00704"></a>00704   uint16_t command;
<a name="l00705"></a>00705   <span class="keywordtype">int</span> nbytes;
<a name="l00706"></a>00706   <span class="keyword">struct </span>in_addr raddr;
<a name="l00707"></a>00707   uint32_t <a class="code" href="structmetric.html">metric</a>;
<a name="l00708"></a>00708   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00709"></a>00709   u_char nexthop_num;
<a name="l00710"></a>00710   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00711"></a>00711   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l00712"></a>00712 
<a name="l00713"></a>00713   s = zlookup-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
<a name="l00714"></a>00714   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00715"></a>00715 
<a name="l00716"></a>00716   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, 2);
<a name="l00717"></a>00717   length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00718"></a>00718 
<a name="l00719"></a>00719   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, length - 2);
<a name="l00720"></a>00720   marker = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00721"></a>00721   version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00722"></a>00722   
<a name="l00723"></a>00723   <span class="keywordflow">if</span> (version != <a class="code" href="zclient_8h.html#a353879f7a2fe9365a57041c8870e8dec">ZSERV_VERSION</a> || marker != <a class="code" href="zebra_8h.html#a95ca8e88db92c66ea0c8bbb62cea622d">ZEBRA_HEADER_MARKER</a>)
<a name="l00724"></a>00724     {
<a name="l00725"></a>00725       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: socket %d version mismatch, marker %d, version %d&quot;</span>,
<a name="l00726"></a>00726                __func__, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, marker, version);
<a name="l00727"></a>00727       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00728"></a>00728     }
<a name="l00729"></a>00729     
<a name="l00730"></a>00730   command = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00731"></a>00731   
<a name="l00732"></a>00732   raddr.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l00733"></a>00733   metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00734"></a>00734   nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00735"></a>00735 
<a name="l00736"></a>00736   <span class="keywordflow">if</span> (nexthop_num)
<a name="l00737"></a>00737     {
<a name="l00738"></a>00738       bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
<a name="l00739"></a>00739       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 1;
<a name="l00740"></a>00740       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> = <a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
<a name="l00741"></a>00741       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a> = <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>;
<a name="l00742"></a>00742 
<a name="l00743"></a>00743       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>; i++)
<a name="l00744"></a>00744     {
<a name="l00745"></a>00745       nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
<a name="l00746"></a>00746       nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00747"></a>00747       <span class="keywordflow">switch</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
<a name="l00748"></a>00748         {
<a name="l00749"></a>00749         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>:
<a name="l00750"></a>00750           nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l00751"></a>00751           <span class="keywordflow">break</span>;
<a name="l00752"></a>00752         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>:
<a name="l00753"></a>00753         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aa38b852f0e7c729f7db77cb0c99030a5">ZEBRA_NEXTHOP_IFNAME</a>:
<a name="l00754"></a>00754           nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00755"></a>00755           <span class="keywordflow">break</span>;
<a name="l00756"></a>00756             <span class="keywordflow">default</span>:
<a name="l00757"></a>00757               <span class="comment">/* do nothing */</span>
<a name="l00758"></a>00758               <span class="keywordflow">break</span>;
<a name="l00759"></a>00759         }
<a name="l00760"></a>00760       <a class="code" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">bnc_nexthop_add</a> (bnc, nexthop);
<a name="l00761"></a>00761     }
<a name="l00762"></a>00762     }
<a name="l00763"></a>00763   <span class="keywordflow">else</span>
<a name="l00764"></a>00764     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00765"></a>00765 
<a name="l00766"></a>00766   <span class="keywordflow">return</span> bnc;
<a name="l00767"></a>00767 }
<a name="l00768"></a>00768 
<a name="l00769"></a>00769 <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *
<a name="l00770"></a><a class="code" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">00770</a> <a class="code" href="bgp__nexthop_8c.html#ab1ee1637836dee8282d73ba50a5cf603">zlookup_query</a> (<span class="keyword">struct</span> in_addr addr)
<a name="l00771"></a>00771 {
<a name="l00772"></a>00772   <span class="keywordtype">int</span> ret;
<a name="l00773"></a>00773   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775   <span class="comment">/* Check socket. */</span>
<a name="l00776"></a>00776   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00777"></a>00777     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   s = zlookup-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
<a name="l00780"></a>00780   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00781"></a>00781   <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#a7ed7741500eb4f178369418725aef502">ZEBRA_IPV4_NEXTHOP_LOOKUP</a>);
<a name="l00782"></a>00782   <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;addr);
<a name="l00783"></a>00783   
<a name="l00784"></a>00784   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00785"></a>00785   
<a name="l00786"></a>00786   ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00787"></a>00787   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00788"></a>00788     {
<a name="l00789"></a>00789       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;can&#39;t write to zlookup-&gt;sock&quot;</span>);
<a name="l00790"></a>00790       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00791"></a>00791       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00792"></a>00792       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794   <span class="keywordflow">if</span> (ret == 0)
<a name="l00795"></a>00795     {
<a name="l00796"></a>00796       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;zlookup-&gt;sock connection closed&quot;</span>);
<a name="l00797"></a>00797       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00798"></a>00798       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00799"></a>00799       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00800"></a>00800     }
<a name="l00801"></a>00801 
<a name="l00802"></a>00802   <span class="keywordflow">return</span> <a class="code" href="bgp__nexthop_8c.html#a9a04a71252f2a9600023e71ffa8652d3">zlookup_read</a> ();
<a name="l00803"></a>00803 }
<a name="l00804"></a>00804 
<a name="l00805"></a>00805 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00806"></a>00806 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *
<a name="l00807"></a>00807 zlookup_read_ipv6 (<span class="keywordtype">void</span>)
<a name="l00808"></a>00808 {
<a name="l00809"></a>00809   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00810"></a>00810   uint16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00811"></a>00811   u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, marker;
<a name="l00812"></a>00812   uint16_t  command;
<a name="l00813"></a>00813   <span class="keywordtype">int</span> nbytes;
<a name="l00814"></a>00814   <span class="keyword">struct </span>in6_addr raddr;
<a name="l00815"></a>00815   uint32_t <a class="code" href="structmetric.html">metric</a>;
<a name="l00816"></a>00816   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00817"></a>00817   u_char nexthop_num;
<a name="l00818"></a>00818   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00819"></a>00819   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l00820"></a>00820 
<a name="l00821"></a>00821   s = zlookup-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
<a name="l00822"></a>00822   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00823"></a>00823 
<a name="l00824"></a>00824   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, 2);
<a name="l00825"></a>00825   length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00826"></a>00826 
<a name="l00827"></a>00827   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, length - 2);
<a name="l00828"></a>00828   marker = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00829"></a>00829   version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00830"></a>00830   
<a name="l00831"></a>00831   <span class="keywordflow">if</span> (version != <a class="code" href="zclient_8h.html#a353879f7a2fe9365a57041c8870e8dec">ZSERV_VERSION</a> || marker != <a class="code" href="zebra_8h.html#a95ca8e88db92c66ea0c8bbb62cea622d">ZEBRA_HEADER_MARKER</a>)
<a name="l00832"></a>00832     {
<a name="l00833"></a>00833       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: socket %d version mismatch, marker %d, version %d&quot;</span>,
<a name="l00834"></a>00834                __func__, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, marker, version);
<a name="l00835"></a>00835       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00836"></a>00836     }
<a name="l00837"></a>00837     
<a name="l00838"></a>00838   command = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00839"></a>00839   
<a name="l00840"></a>00840   <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;raddr, s, 16);
<a name="l00841"></a>00841 
<a name="l00842"></a>00842   metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00843"></a>00843   nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00844"></a>00844 
<a name="l00845"></a>00845   <span class="keywordflow">if</span> (nexthop_num)
<a name="l00846"></a>00846     {
<a name="l00847"></a>00847       bnc = <a class="code" href="bgp__nexthop_8c.html#acddb6967ad84d4d77ec26746a7655dfa">bnc_new</a> ();
<a name="l00848"></a>00848       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a> = 1;
<a name="l00849"></a>00849       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a> = <a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>;
<a name="l00850"></a>00850       bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a> = <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>;
<a name="l00851"></a>00851 
<a name="l00852"></a>00852       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structbgp__nexthop__cache.html#af96b8b6c052d23622addf2687649dc11">nexthop_num</a>; i++)
<a name="l00853"></a>00853     {
<a name="l00854"></a>00854       nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
<a name="l00855"></a>00855       nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00856"></a>00856       <span class="keywordflow">switch</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
<a name="l00857"></a>00857         {
<a name="l00858"></a>00858         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aaeb29f4f9e313b846883f1d7462a43a7">ZEBRA_NEXTHOP_IPV6</a>:
<a name="l00859"></a>00859           <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, s, 16);
<a name="l00860"></a>00860           <span class="keywordflow">break</span>;
<a name="l00861"></a>00861         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a7e61d5eb03f7ca37e73025b64e63966b">ZEBRA_NEXTHOP_IPV6_IFINDEX</a>:
<a name="l00862"></a>00862         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a11d0a5703feb53099a70ca066bdd22f5">ZEBRA_NEXTHOP_IPV6_IFNAME</a>:
<a name="l00863"></a>00863           <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, s, 16);
<a name="l00864"></a>00864           nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00865"></a>00865           <span class="keywordflow">break</span>;
<a name="l00866"></a>00866         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>:
<a name="l00867"></a>00867         <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aa38b852f0e7c729f7db77cb0c99030a5">ZEBRA_NEXTHOP_IFNAME</a>:
<a name="l00868"></a>00868           nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00869"></a>00869           <span class="keywordflow">break</span>;
<a name="l00870"></a>00870         <span class="keywordflow">default</span>:
<a name="l00871"></a>00871           <span class="comment">/* do nothing */</span>
<a name="l00872"></a>00872           <span class="keywordflow">break</span>;
<a name="l00873"></a>00873         }
<a name="l00874"></a>00874       <a class="code" href="bgp__nexthop_8c.html#ac8b2b42ce1359f2d6f4f855cb9af7f74">bnc_nexthop_add</a> (bnc, nexthop);
<a name="l00875"></a>00875     }
<a name="l00876"></a>00876     }
<a name="l00877"></a>00877   <span class="keywordflow">else</span>
<a name="l00878"></a>00878     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00879"></a>00879 
<a name="l00880"></a>00880   <span class="keywordflow">return</span> bnc;
<a name="l00881"></a>00881 }
<a name="l00882"></a>00882 
<a name="l00883"></a>00883 <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *
<a name="l00884"></a>00884 zlookup_query_ipv6 (<span class="keyword">struct</span> in6_addr *addr)
<a name="l00885"></a>00885 {
<a name="l00886"></a>00886   <span class="keywordtype">int</span> ret;
<a name="l00887"></a>00887   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00888"></a>00888 
<a name="l00889"></a>00889   <span class="comment">/* Check socket. */</span>
<a name="l00890"></a>00890   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00891"></a>00891     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00892"></a>00892 
<a name="l00893"></a>00893   s = zlookup-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
<a name="l00894"></a>00894   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00895"></a>00895   <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#aa08e113e5a8c6e41bf4e89ee1100221d">ZEBRA_IPV6_NEXTHOP_LOOKUP</a>);
<a name="l00896"></a>00896   <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, addr, 16);
<a name="l00897"></a>00897   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00898"></a>00898   
<a name="l00899"></a>00899   ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00900"></a>00900   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;can&#39;t write to zlookup-&gt;sock&quot;</span>);
<a name="l00903"></a>00903       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00904"></a>00904       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00905"></a>00905       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00906"></a>00906     }
<a name="l00907"></a>00907   <span class="keywordflow">if</span> (ret == 0)
<a name="l00908"></a>00908     {
<a name="l00909"></a>00909       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;zlookup-&gt;sock connection closed&quot;</span>);
<a name="l00910"></a>00910       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00911"></a>00911       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00912"></a>00912       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00913"></a>00913     }
<a name="l00914"></a>00914 
<a name="l00915"></a>00915   <span class="keywordflow">return</span> zlookup_read_ipv6 ();
<a name="l00916"></a>00916 }
<a name="l00917"></a>00917 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00918"></a>00918 
<a name="l00919"></a>00919 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00920"></a><a class="code" href="bgp__nexthop_8c.html#ade1fd78c93fe2d088aaace62cd5015f4">00920</a> <a class="code" href="bgp__nexthop_8c.html#ade1fd78c93fe2d088aaace62cd5015f4">bgp_import_check</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t *igpmetric,
<a name="l00921"></a>00921                   <span class="keyword">struct</span> in_addr *igpnexthop)
<a name="l00922"></a>00922 {
<a name="l00923"></a>00923   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00924"></a>00924   <span class="keywordtype">int</span> ret;
<a name="l00925"></a>00925   u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, command;
<a name="l00926"></a>00926   u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, marker;
<a name="l00927"></a>00927   <span class="keywordtype">int</span> nbytes;
<a name="l00928"></a>00928   <span class="keyword">struct </span>in_addr addr;
<a name="l00929"></a>00929   <span class="keyword">struct </span>in_addr nexthop;
<a name="l00930"></a>00930   u_int32_t metric = 0;
<a name="l00931"></a>00931   u_char nexthop_num;
<a name="l00932"></a>00932   u_char nexthop_type;
<a name="l00933"></a>00933 
<a name="l00934"></a>00934   <span class="comment">/* If lookup connection is not available return valid. */</span>
<a name="l00935"></a>00935   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l00936"></a>00936     {
<a name="l00937"></a>00937       <span class="keywordflow">if</span> (igpmetric)
<a name="l00938"></a>00938     *igpmetric = 0;
<a name="l00939"></a>00939       <span class="keywordflow">return</span> 1;
<a name="l00940"></a>00940     }
<a name="l00941"></a>00941 
<a name="l00942"></a>00942   <span class="comment">/* Send query to the lookup connection */</span>
<a name="l00943"></a>00943   s = zlookup-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
<a name="l00944"></a>00944   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00945"></a>00945   <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#ae2f9ecf7e0fa5362e68e4853506695bf">ZEBRA_IPV4_IMPORT_LOOKUP</a>);
<a name="l00946"></a>00946   
<a name="l00947"></a>00947   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00948"></a>00948   <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l00949"></a>00949   
<a name="l00950"></a>00950   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00951"></a>00951   
<a name="l00952"></a>00952   <span class="comment">/* Write the packet. */</span>
<a name="l00953"></a>00953   ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00954"></a>00954 
<a name="l00955"></a>00955   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00956"></a>00956     {
<a name="l00957"></a>00957       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;can&#39;t write to zlookup-&gt;sock&quot;</span>);
<a name="l00958"></a>00958       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00959"></a>00959       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00960"></a>00960       <span class="keywordflow">return</span> 1;
<a name="l00961"></a>00961     }
<a name="l00962"></a>00962   <span class="keywordflow">if</span> (ret == 0)
<a name="l00963"></a>00963     {
<a name="l00964"></a>00964       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;zlookup-&gt;sock connection closed&quot;</span>);
<a name="l00965"></a>00965       close (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>);
<a name="l00966"></a>00966       zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l00967"></a>00967       <span class="keywordflow">return</span> 1;
<a name="l00968"></a>00968     }
<a name="l00969"></a>00969 
<a name="l00970"></a>00970   <span class="comment">/* Get result. */</span>
<a name="l00971"></a>00971   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00972"></a>00972 
<a name="l00973"></a>00973   <span class="comment">/* Fetch length. */</span>
<a name="l00974"></a>00974   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, 2);
<a name="l00975"></a>00975   length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00976"></a>00976 
<a name="l00977"></a>00977   <span class="comment">/* Fetch whole data. */</span>
<a name="l00978"></a>00978   nbytes = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (s, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, length - 2);
<a name="l00979"></a>00979   marker = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00980"></a>00980   version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00981"></a>00981 
<a name="l00982"></a>00982   <span class="keywordflow">if</span> (version != <a class="code" href="zclient_8h.html#a353879f7a2fe9365a57041c8870e8dec">ZSERV_VERSION</a> || marker != <a class="code" href="zebra_8h.html#a95ca8e88db92c66ea0c8bbb62cea622d">ZEBRA_HEADER_MARKER</a>)
<a name="l00983"></a>00983     {
<a name="l00984"></a>00984       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: socket %d version mismatch, marker %d, version %d&quot;</span>,
<a name="l00985"></a>00985                __func__, zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a>, marker, version);
<a name="l00986"></a>00986       <span class="keywordflow">return</span> 0;
<a name="l00987"></a>00987     }
<a name="l00988"></a>00988     
<a name="l00989"></a>00989   command = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l00990"></a>00990   
<a name="l00991"></a>00991   addr.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l00992"></a>00992   metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
<a name="l00993"></a>00993   nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00994"></a>00994 
<a name="l00995"></a>00995   <span class="comment">/* Set IGP metric value. */</span>
<a name="l00996"></a>00996   <span class="keywordflow">if</span> (igpmetric)
<a name="l00997"></a>00997     *igpmetric = metric;
<a name="l00998"></a>00998 
<a name="l00999"></a>00999   <span class="comment">/* If there is nexthop then this is active route. */</span>
<a name="l01000"></a>01000   <span class="keywordflow">if</span> (nexthop_num)
<a name="l01001"></a>01001     {
<a name="l01002"></a>01002       nexthop.s_addr = 0;
<a name="l01003"></a>01003       nexthop_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01004"></a>01004       <span class="keywordflow">if</span> (nexthop_type == <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>)
<a name="l01005"></a>01005     {
<a name="l01006"></a>01006       nexthop.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
<a name="l01007"></a>01007       <span class="keywordflow">if</span> (igpnexthop)
<a name="l01008"></a>01008         *igpnexthop = nexthop;
<a name="l01009"></a>01009     }
<a name="l01010"></a>01010       <span class="keywordflow">else</span>
<a name="l01011"></a>01011     *igpnexthop = nexthop;
<a name="l01012"></a>01012 
<a name="l01013"></a>01013       <span class="keywordflow">return</span> 1;
<a name="l01014"></a>01014     }
<a name="l01015"></a>01015   <span class="keywordflow">else</span>
<a name="l01016"></a>01016     <span class="keywordflow">return</span> 0;
<a name="l01017"></a>01017 }
<a name="l01018"></a>01018 
<a name="l01019"></a>01019 <span class="comment">/* Scan all configured BGP route then check the route exists in IGP or</span>
<a name="l01020"></a>01020 <span class="comment">   not. */</span>
<a name="l01021"></a>01021 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01022"></a><a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">01022</a> <a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l01023"></a>01023 {
<a name="l01024"></a>01024   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01025"></a>01025   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l01026"></a>01026   <span class="keyword">struct </span><a class="code" href="structbgp__static.html">bgp_static</a> *<a class="code" href="structbgp__static.html">bgp_static</a>;
<a name="l01027"></a>01027   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01028"></a>01028   <span class="keywordtype">int</span> valid;
<a name="l01029"></a>01029   u_int32_t metric;
<a name="l01030"></a>01030   <span class="keyword">struct </span>in_addr nexthop;
<a name="l01031"></a>01031   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l01032"></a>01032   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l01033"></a>01033 
<a name="l01034"></a>01034   bgp_import_thread = 
<a name="l01035"></a>01035     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a>);
<a name="l01036"></a>01036 
<a name="l01037"></a>01037   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01038"></a>01038     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Import timer expired.&quot;</span>);
<a name="l01039"></a>01039 
<a name="l01040"></a>01040   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l01041"></a>01041     {
<a name="l01042"></a>01042       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l01043"></a>01043     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>; safi++)
<a name="l01044"></a>01044       <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]); rn;
<a name="l01045"></a>01045            rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l01046"></a>01046         <span class="keywordflow">if</span> ((bgp_static = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01047"></a>01047           {
<a name="l01048"></a>01048         <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a53fefa678c3bddce6ce9b49876423ace">backdoor</a>)
<a name="l01049"></a>01049           <span class="keywordflow">continue</span>;
<a name="l01050"></a>01050 
<a name="l01051"></a>01051         valid = bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>;
<a name="l01052"></a>01052         metric = bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>;
<a name="l01053"></a>01053         nexthop = bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>;
<a name="l01054"></a>01054 
<a name="l01055"></a>01055         <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a6bc6dc724e29fd024f008b87f02e4b54">BGP_FLAG_IMPORT_CHECK</a>)
<a name="l01056"></a>01056             &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l01057"></a>01057           bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = <a class="code" href="bgp__nexthop_8c.html#ade1fd78c93fe2d088aaace62cd5015f4">bgp_import_check</a> (&amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, &amp;bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a>,
<a name="l01058"></a>01058                                 &amp;bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>);
<a name="l01059"></a>01059         <span class="keywordflow">else</span>
<a name="l01060"></a>01060           {
<a name="l01061"></a>01061             bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> = 1;
<a name="l01062"></a>01062             bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a> = 0;
<a name="l01063"></a>01063             bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>.s_addr = 0;
<a name="l01064"></a>01064           }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066         <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a> != valid)
<a name="l01067"></a>01067           {
<a name="l01068"></a>01068             <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>)
<a name="l01069"></a>01069               <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bgp_static, afi, safi);
<a name="l01070"></a>01070             <span class="keywordflow">else</span>
<a name="l01071"></a>01071               <a class="code" href="bgp__route_8c.html#a14bde9043b6db15a3327081054b54dbe">bgp_static_withdraw</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi);
<a name="l01072"></a>01072           }
<a name="l01073"></a>01073         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#a8f8a0cfbc3624f0232c41f95a178c80c">valid</a>)
<a name="l01074"></a>01074           {
<a name="l01075"></a>01075             <span class="keywordflow">if</span> (bgp_static-&gt;<a class="code" href="structbgp__static.html#ab33ff97c3d3849126cf93af1ad2da41f">igpmetric</a> != metric
<a name="l01076"></a>01076             || bgp_static-&gt;<a class="code" href="structbgp__static.html#aa8f62625fb60ace77000a35d31b0e97b">igpnexthop</a>.s_addr != nexthop.s_addr
<a name="l01077"></a>01077             || bgp_static-&gt;<a class="code" href="structbgp__static.html#acd6110748ccb4b1b26d292f02ede2a16">rmap</a>.<a class="code" href="structbgp__static.html#ad76c828cf9c061f483a3ed7220649b51">name</a>)
<a name="l01078"></a>01078               <a class="code" href="bgp__route_8c.html#abbcc2b564375f6ab82f7622042f4c69f">bgp_static_update</a> (bgp, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bgp_static, afi, safi);
<a name="l01079"></a>01079           }
<a name="l01080"></a>01080           }
<a name="l01081"></a>01081     }
<a name="l01082"></a>01082   <span class="keywordflow">return</span> 0;
<a name="l01083"></a>01083 }
<a name="l01084"></a>01084 
<a name="l01085"></a>01085 <span class="comment">/* Connect to zebra for nexthop lookup. */</span>
<a name="l01086"></a>01086 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01087"></a><a class="code" href="bgp__nexthop_8c.html#abaca2350e2be77bb6c40fcb05381511f">01087</a> <a class="code" href="bgp__nexthop_8c.html#abaca2350e2be77bb6c40fcb05381511f">zlookup_connect</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l01088"></a>01088 {
<a name="l01089"></a>01089   <span class="keyword">struct </span><a class="code" href="structzclient.html">zclient</a> *<a class="code" href="bgp__nexthop_8c.html#aa54c664e987a917b6cb9fa2510cf8f15">zlookup</a>;
<a name="l01090"></a>01090 
<a name="l01091"></a>01091   zlookup = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01092"></a>01092   zlookup-&gt;<a class="code" href="structzclient.html#acf3591fb899408dc58cfe71cb2035571">t_connect</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01093"></a>01093 
<a name="l01094"></a>01094   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> != -1)
<a name="l01095"></a>01095     <span class="keywordflow">return</span> 0;
<a name="l01096"></a>01096 
<a name="l01097"></a>01097 <span class="preprocessor">#ifdef HAVE_TCP_ZEBRA</span>
<a name="l01098"></a>01098 <span class="preprocessor"></span>  zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = <a class="code" href="zclient_8c.html#ac937966a23dbff10b311175341da2d57">zclient_socket</a> ();
<a name="l01099"></a>01099 <span class="preprocessor">#else</span>
<a name="l01100"></a>01100 <span class="preprocessor"></span>  zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = <a class="code" href="zclient_8c.html#a1a87f3eaa2f08161b64feebfda6bf3fd">zclient_socket_un</a> (ZEBRA_SERV_PATH);
<a name="l01101"></a>01101 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_TCP_ZEBRA */</span>
<a name="l01102"></a>01102   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l01103"></a>01103     <span class="keywordflow">return</span> -1;
<a name="l01104"></a>01104 
<a name="l01105"></a>01105   <span class="keywordflow">return</span> 0;
<a name="l01106"></a>01106 }
<a name="l01107"></a>01107 
<a name="l01108"></a>01108 <span class="comment">/* Check specified multiaccess next-hop. */</span>
<a name="l01109"></a>01109 <span class="keywordtype">int</span>
<a name="l01110"></a><a class="code" href="bgp__nexthop_8h.html#a760e4d0da0306b58d3f2c0d40545d62b">01110</a> <a class="code" href="bgp__nexthop_8c.html#a40288c74e1b34a270e8b017b5ee1cc02">bgp_multiaccess_check_v4</a> (<span class="keyword">struct</span> in_addr nexthop, <span class="keywordtype">char</span> *peer)
<a name="l01111"></a>01111 {
<a name="l01112"></a>01112   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn1;
<a name="l01113"></a>01113   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn2;
<a name="l01114"></a>01114   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p1;
<a name="l01115"></a>01115   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p2;
<a name="l01116"></a>01116   <span class="keyword">struct </span>in_addr addr;
<a name="l01117"></a>01117   <span class="keywordtype">int</span> ret;
<a name="l01118"></a>01118 
<a name="l01119"></a>01119   ret = <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (peer, &amp;addr);
<a name="l01120"></a>01120   <span class="keywordflow">if</span> (! ret)
<a name="l01121"></a>01121     <span class="keywordflow">return</span> 0;
<a name="l01122"></a>01122 
<a name="l01123"></a>01123   memset (&amp;p1, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l01124"></a>01124   p1.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = AF_INET;
<a name="l01125"></a>01125   p1.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l01126"></a>01126   p1.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = nexthop;
<a name="l01127"></a>01127   memset (&amp;p2, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l01128"></a>01128   p2.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = AF_INET;
<a name="l01129"></a>01129   p2.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l01130"></a>01130   p2.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = addr;
<a name="l01131"></a>01131 
<a name="l01132"></a>01132   <span class="comment">/* If bgp scan is not enabled, return invalid. */</span>
<a name="l01133"></a>01133   <span class="keywordflow">if</span> (zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
<a name="l01134"></a>01134     <span class="keywordflow">return</span> 0;
<a name="l01135"></a>01135 
<a name="l01136"></a>01136   rn1 = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>], &amp;p1);
<a name="l01137"></a>01137   <span class="keywordflow">if</span> (! rn1)
<a name="l01138"></a>01138     <span class="keywordflow">return</span> 0;
<a name="l01139"></a>01139   
<a name="l01140"></a>01140   rn2 = <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (bgp_connected_table[AFI_IP], &amp;p2);
<a name="l01141"></a>01141   <span class="keywordflow">if</span> (! rn2)
<a name="l01142"></a>01142     <span class="keywordflow">return</span> 0;
<a name="l01143"></a>01143 
<a name="l01144"></a>01144   <span class="keywordflow">if</span> (rn1 == rn2)
<a name="l01145"></a>01145     <span class="keywordflow">return</span> 1;
<a name="l01146"></a>01146 
<a name="l01147"></a>01147   <span class="keywordflow">return</span> 0;
<a name="l01148"></a>01148 }
<a name="l01149"></a>01149 
<a name="l01150"></a><a class="code" href="bgp__nexthop_8c.html#ab10c459a9b6c4026808c3b94ae595905">01150</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (bgp_scan_time,
<a name="l01151"></a>01151        bgp_scan_time_cmd,
<a name="l01152"></a>01152        <span class="stringliteral">&quot;bgp scan-time &lt;5-60&gt;&quot;</span>,
<a name="l01153"></a>01153        <span class="stringliteral">&quot;BGP specific commands\n&quot;</span>
<a name="l01154"></a>01154        <span class="stringliteral">&quot;Configure background scanner interval\n&quot;</span>
<a name="l01155"></a>01155        <span class="stringliteral">&quot;Scanner interval (seconds)\n&quot;</span>)
<a name="l01156"></a>01156 {
<a name="l01157"></a>01157   <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = atoi (argv[0]);
<a name="l01158"></a>01158 
<a name="l01159"></a>01159   <span class="keywordflow">if</span> (bgp_scan_thread)
<a name="l01160"></a>01160     {
<a name="l01161"></a>01161       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (bgp_scan_thread);
<a name="l01162"></a>01162       bgp_scan_thread = 
<a name="l01163"></a>01163     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
<a name="l01164"></a>01164     }
<a name="l01165"></a>01165 
<a name="l01166"></a>01166   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01167"></a>01167 }
<a name="l01168"></a>01168 
<a name="l01169"></a><a class="code" href="bgp__nexthop_8c.html#a57a879bc86dd7cd4877ccf0aed297fb3">01169</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_bgp_scan_time,
<a name="l01170"></a>01170        no_bgp_scan_time_cmd,
<a name="l01171"></a>01171        <span class="stringliteral">&quot;no bgp scan-time&quot;</span>,
<a name="l01172"></a>01172        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01173"></a>01173        <span class="stringliteral">&quot;BGP specific commands\n&quot;</span>
<a name="l01174"></a>01174        <span class="stringliteral">&quot;Configure background scanner interval\n&quot;</span>)
<a name="l01175"></a>01175 {
<a name="l01176"></a>01176   <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>;
<a name="l01177"></a>01177 
<a name="l01178"></a>01178   <span class="keywordflow">if</span> (bgp_scan_thread)
<a name="l01179"></a>01179     {
<a name="l01180"></a>01180       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (bgp_scan_thread);
<a name="l01181"></a>01181       bgp_scan_thread = 
<a name="l01182"></a>01182     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
<a name="l01183"></a>01183     }
<a name="l01184"></a>01184 
<a name="l01185"></a>01185   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01186"></a>01186 }
<a name="l01187"></a>01187 
<a name="l01188"></a><a class="code" href="bgp__nexthop_8c.html#ad3990760b1496b5768a38591fa424269">01188</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_bgp_scan_time,
<a name="l01189"></a>01189        no_bgp_scan_time_val_cmd,
<a name="l01190"></a>01190        <span class="stringliteral">&quot;no bgp scan-time &lt;5-60&gt;&quot;</span>,
<a name="l01191"></a>01191        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01192"></a>01192        <span class="stringliteral">&quot;BGP specific commands\n&quot;</span>
<a name="l01193"></a>01193        <span class="stringliteral">&quot;Configure background scanner interval\n&quot;</span>
<a name="l01194"></a>01194        <span class="stringliteral">&quot;Scanner interval (seconds)\n&quot;</span>)
<a name="l01195"></a>01195 
<a name="l01196"></a>01196 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_bgp_scan,
<a name="l01197"></a>01197        show_ip_bgp_scan_cmd,
<a name="l01198"></a>01198        &quot;show <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> <a class="code" href="structbgp.html">bgp</a> scan&quot;,
<a name="l01199"></a>01199        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01200"></a>01200        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01201"></a>01201        <a class="code" href="command_8h.html#a44a223791487ad235e39f42a47d60005">BGP_STR</a>
<a name="l01202"></a>01202        &quot;BGP scan status\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01203"></a>01203 {
<a name="l01204"></a>01204   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l01205"></a>01205   <span class="keyword">struct </span><a class="code" href="structbgp__nexthop__cache.html">bgp_nexthop_cache</a> *bnc;
<a name="l01206"></a>01206 
<a name="l01207"></a>01207   <span class="keywordflow">if</span> (bgp_scan_thread)
<a name="l01208"></a>01208     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan is running%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01209"></a>01209   <span class="keywordflow">else</span>
<a name="l01210"></a>01210     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan is not running%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01211"></a>01211   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP scan interval is %d%s&quot;</span>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01212"></a>01212 
<a name="l01213"></a>01213   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Current BGP nexthop cache:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01214"></a>01214   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]); rn; rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l01215"></a>01215     <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01216"></a>01216       {
<a name="l01217"></a>01217     <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>)
<a name="l01218"></a>01218       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s valid [IGP metric %d]%s&quot;</span>,
<a name="l01219"></a>01219            inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01220"></a>01220     <span class="keywordflow">else</span>
<a name="l01221"></a>01221       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s invalid%s&quot;</span>,
<a name="l01222"></a>01222            inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01223"></a>01223       }
<a name="l01224"></a>01224 
<a name="l01225"></a>01225 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01226"></a>01226 <span class="preprocessor"></span>  {
<a name="l01227"></a>01227     <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l01228"></a>01228     <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]); 
<a name="l01229"></a>01229          rn; 
<a name="l01230"></a>01230          rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l01231"></a>01231       <span class="keywordflow">if</span> ((bnc = rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01232"></a>01232     {
<a name="l01233"></a>01233       <span class="keywordflow">if</span> (bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#ac352ddb91ff35df18dd7c308b2c705e5">valid</a>)
<a name="l01234"></a>01234         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s valid [IGP metric %d]%s&quot;</span>,
<a name="l01235"></a>01235              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
<a name="l01236"></a>01236              bnc-&gt;<a class="code" href="structbgp__nexthop__cache.html#a9af9ea28d3f14dc5d5437acb2d0be214">metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01237"></a>01237       <span class="keywordflow">else</span>
<a name="l01238"></a>01238         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s invalid%s&quot;</span>,
<a name="l01239"></a>01239              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
<a name="l01240"></a>01240              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01241"></a>01241     }
<a name="l01242"></a>01242   }
<a name="l01243"></a>01243 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01244"></a>01244 
<a name="l01245"></a>01245   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;BGP connected route:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01246"></a>01246   <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp_connected_table[AFI_IP]); 
<a name="l01247"></a>01247        rn; 
<a name="l01248"></a>01248        rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l01249"></a>01249     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01250"></a>01250       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s/%d%s&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l01251"></a>01251            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01252"></a>01252 
<a name="l01253"></a>01253 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01254"></a>01254 <span class="preprocessor"></span>  {
<a name="l01255"></a>01255     <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l01256"></a>01256 
<a name="l01257"></a>01257     <span class="keywordflow">for</span> (rn = <a class="code" href="bgp__table_8c.html#af8ce42494729d03a8c7ca41ded487bb2">bgp_table_top</a> (bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]); 
<a name="l01258"></a>01258          rn; 
<a name="l01259"></a>01259          rn = <a class="code" href="bgp__table_8c.html#abdeced48b9b4aad614c88dc63ea0a4cf">bgp_route_next</a> (rn))
<a name="l01260"></a>01260       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01261"></a>01261     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %s/%d%s&quot;</span>,
<a name="l01262"></a>01262          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.prefix6, buf, BUFSIZ),
<a name="l01263"></a>01263          rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l01264"></a>01264          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01265"></a>01265   }
<a name="l01266"></a>01266 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01267"></a>01267 
<a name="l01268"></a>01268   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01269"></a>01269 }
<a name="l01270"></a>01270 
<a name="l01271"></a>01271 <span class="keywordtype">int</span>
<a name="l01272"></a><a class="code" href="bgp__nexthop_8h.html#a425a6bab67fe58b85e175eb78fb1155a">01272</a> <a class="code" href="bgp__nexthop_8c.html#abe56d4b0257e33694939ac6dd6ea41c9">bgp_config_write_scan_time</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l01273"></a>01273 {
<a name="l01274"></a>01274   <span class="keywordflow">if</span> (<a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> != <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>)
<a name="l01275"></a>01275     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp scan-time %d%s&quot;</span>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01276"></a>01276   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01277"></a>01277 }
<a name="l01278"></a>01278 
<a name="l01279"></a>01279 <span class="keywordtype">void</span>
<a name="l01280"></a><a class="code" href="bgp__nexthop_8h.html#ada667668bb4d77f673ace223f4303a2c">01280</a> <a class="code" href="bgp__nexthop_8c.html#ada667668bb4d77f673ace223f4303a2c">bgp_scan_init</a> (<span class="keywordtype">void</span>)
<a name="l01281"></a>01281 {
<a name="l01282"></a>01282   zlookup = <a class="code" href="zclient_8c.html#aa521f2a71596b1dc50f76fcb57dff30b">zclient_new</a> ();
<a name="l01283"></a>01283   zlookup-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> = -1;
<a name="l01284"></a>01284   zlookup-&gt;<a class="code" href="structzclient.html#acf3591fb899408dc58cfe71cb2035571">t_connect</a> = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#abaca2350e2be77bb6c40fcb05381511f">zlookup_connect</a>, zlookup, 0);
<a name="l01285"></a>01285 
<a name="l01286"></a>01286   <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a83ac62d3cb8c71e0986c00868ce482aa">BGP_SCAN_INTERVAL_DEFAULT</a>;
<a name="l01287"></a>01287   <a class="code" href="bgp__nexthop_8c.html#a7b58397e9876cf8c9b7428864aa69806">bgp_import_interval</a> = <a class="code" href="bgp__nexthop_8h.html#a945d7320968bd182871ceb02991c4be5">BGP_IMPORT_INTERVAL_DEFAULT</a>;
<a name="l01288"></a>01288 
<a name="l01289"></a>01289   cache1_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01290"></a>01290   cache2_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01291"></a>01291   bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = cache1_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>];
<a name="l01292"></a>01292 
<a name="l01293"></a>01293   bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01294"></a>01294 
<a name="l01295"></a>01295 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01296"></a>01296 <span class="preprocessor"></span>  cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01297"></a>01297   cache2_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01298"></a>01298   bgp_nexthop_cache_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>];
<a name="l01299"></a>01299   bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>);
<a name="l01300"></a>01300 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01301"></a>01301 
<a name="l01302"></a>01302   <span class="comment">/* Make BGP scan thread. */</span>
<a name="l01303"></a>01303   bgp_scan_thread = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#aa5d17c798eec3207571cfd644288360b">bgp_scan_timer</a>, 
<a name="l01304"></a>01304                                       <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__nexthop_8c.html#a323a8785a2a7c1df4e2cfd5841bc5758">bgp_scan_interval</a>);
<a name="l01305"></a>01305   <span class="comment">/* Make BGP import there. */</span>
<a name="l01306"></a>01306   bgp_import_thread = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__nexthop_8c.html#ad912ef0b18906df145ca0d90099add5e">bgp_import</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l01307"></a>01307 
<a name="l01308"></a>01308   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;bgp_scan_time_cmd);
<a name="l01309"></a>01309   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_scan_time_cmd);
<a name="l01310"></a>01310   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a7493d9d6392a7010c13aa962093436a7">BGP_NODE</a>, &amp;no_bgp_scan_time_val_cmd);
<a name="l01311"></a>01311   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_bgp_scan_cmd);
<a name="l01312"></a>01312   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_ip_bgp_scan_cmd);
<a name="l01313"></a>01313   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_bgp_scan_cmd);
<a name="l01314"></a>01314 }
<a name="l01315"></a>01315 
<a name="l01316"></a>01316 <span class="keywordtype">void</span>
<a name="l01317"></a><a class="code" href="bgp__nexthop_8h.html#a6d4fc316fc1a9524f2550776f6aa2405">01317</a> <a class="code" href="bgp__nexthop_8c.html#a6d4fc316fc1a9524f2550776f6aa2405">bgp_scan_finish</a> (<span class="keywordtype">void</span>)
<a name="l01318"></a>01318 {
<a name="l01319"></a>01319   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (cache1_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>]);
<a name="l01320"></a>01320   cache1_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01321"></a>01321 
<a name="l01322"></a>01322   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (cache2_table[AFI_IP]);
<a name="l01323"></a>01323   cache2_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01324"></a>01324 
<a name="l01325"></a>01325   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (bgp_connected_table[AFI_IP]);
<a name="l01326"></a>01326   bgp_connected_table[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01327"></a>01327 
<a name="l01328"></a>01328 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01329"></a>01329 <span class="preprocessor"></span>  <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>]);
<a name="l01330"></a>01330   cache1_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01331"></a>01331 
<a name="l01332"></a>01332   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (cache2_table[AFI_IP6]);
<a name="l01333"></a>01333   cache2_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01334"></a>01334 
<a name="l01335"></a>01335   <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a> (bgp_connected_table[AFI_IP6]);
<a name="l01336"></a>01336   bgp_connected_table[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01337"></a>01337 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01338"></a>01338 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__nexthop_8c.html">bgp_nexthop.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
