<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_spf.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__spf_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_spf.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__spf_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* OSPF SPF calculation.</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1999, 2000 Kunihiro Ishiguro, Toshiaki Takada</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>          <span class="comment">/* for inet_ntop () */</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="pqueue_8h.html">pqueue.h</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ospf__route_8h.html">ospfd/ospf_route.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ia_8h.html">ospfd/ospf_ia.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ase_8h.html">ospfd/ospf_ase.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__abr_8h.html">ospfd/ospf_abr.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ospf__spf_8c.html#a1ea44a6fc9fca346086f90b6af653325">ospf_vertex_free</a> (<span class="keywordtype">void</span> *);
<a name="l00050"></a>00050 <span class="comment">/* List of allocated vertices, to simplify cleanup of SPF.</span>
<a name="l00051"></a>00051 <span class="comment"> * Not thread-safe obviously. If it ever needs to be, it&#39;d have to be</span>
<a name="l00052"></a>00052 <span class="comment"> * dynamically allocated at begin of ospf_spf_calculate</span>
<a name="l00053"></a>00053 <span class="comment"> */</span>
<a name="l00054"></a><a class="code" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">00054</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> <a class="code" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">vertex_list</a> = { .<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a> = <a class="code" href="ospf__spf_8c.html#a1ea44a6fc9fca346086f90b6af653325">ospf_vertex_free</a> };
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* Heap related functions, for the managment of the candidates, to</span>
<a name="l00057"></a>00057 <span class="comment"> * be used with pqueue. */</span>
<a name="l00058"></a>00058 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00059"></a><a class="code" href="ospf__spf_8c.html#aea544039058f177b3d5698fbaa84cfb0">00059</a> <a class="code" href="ospf__spf_8c.html#aea544039058f177b3d5698fbaa84cfb0">cmp</a> (<span class="keywordtype">void</span> * node1 , <span class="keywordtype">void</span> * node2)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> * v1 = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) node1;
<a name="l00062"></a>00062   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> * v2 = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) node2;
<a name="l00063"></a>00063   <span class="keywordflow">if</span> (v1 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; v2 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065       <span class="comment">/* network vertices must be chosen before router vertices of same</span>
<a name="l00066"></a>00066 <span class="comment">       * cost in order to find all shortest paths</span>
<a name="l00067"></a>00067 <span class="comment">       */</span>
<a name="l00068"></a>00068       <span class="keywordflow">if</span> ( ((v1-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> - v2-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>) == 0)
<a name="l00069"></a>00069           &amp;&amp; (v1-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> != v2-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a>))
<a name="l00070"></a>00070         {
<a name="l00071"></a>00071           <span class="keywordflow">switch</span> (v1-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a>)
<a name="l00072"></a>00072             {
<a name="l00073"></a>00073               <span class="keywordflow">case</span> <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>:
<a name="l00074"></a>00074                 <span class="keywordflow">return</span> -1;
<a name="l00075"></a>00075               <span class="keywordflow">case</span> <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>:
<a name="l00076"></a>00076                 <span class="keywordflow">return</span> 1;
<a name="l00077"></a>00077             }
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079       <span class="keywordflow">else</span>
<a name="l00080"></a>00080         <span class="keywordflow">return</span> (v1-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> - v2-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>);
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082   <span class="keywordflow">return</span> 0;
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00086"></a><a class="code" href="ospf__spf_8c.html#a7e106bb3265dae7fb42f6484bf208dbe">00086</a> <a class="code" href="ospf__spf_8c.html#a7e106bb3265dae7fb42f6484bf208dbe">update_stat</a> (<span class="keywordtype">void</span> *node , <span class="keywordtype">int</span> position)
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v = node;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="comment">/* Set the status of the vertex, when its position changes. */</span>
<a name="l00091"></a>00091   *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = position;
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *
<a name="l00095"></a><a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">00095</a> <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> (<span class="keywordtype">void</span>)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0754a11797569ce40975185bdc0c17ae">MTYPE_OSPF_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex__nexthop.html">vertex_nexthop</a>));
<a name="l00098"></a>00098 }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00101"></a><a class="code" href="ospf__spf_8c.html#a1663c4ab7996b65fe11a81a238ed33b4">00101</a> <a class="code" href="ospf__spf_8c.html#a1663c4ab7996b65fe11a81a238ed33b4">vertex_nexthop_free</a> (<span class="keyword">struct</span> <a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *nh)
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0754a11797569ce40975185bdc0c17ae">MTYPE_OSPF_NEXTHOP</a>, nh);
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">/* Free the canonical nexthop objects for an area, ie the nexthop objects</span>
<a name="l00107"></a>00107 <span class="comment"> * attached to the first-hop router vertices, and any intervening network</span>
<a name="l00108"></a>00108 <span class="comment"> * vertices.</span>
<a name="l00109"></a>00109 <span class="comment"> */</span>
<a name="l00110"></a>00110 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00111"></a><a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">00111</a> <a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *root)
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00114"></a>00114   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *child;
<a name="l00115"></a>00115   
<a name="l00116"></a>00116   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (root-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, node, nnode, child))
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n2, *nn2;
<a name="l00119"></a>00119       <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00120"></a>00120       
<a name="l00121"></a>00121       <span class="comment">/* router vertices through an attached network each</span>
<a name="l00122"></a>00122 <span class="comment">       * have a distinct (canonical / not inherited) nexthop</span>
<a name="l00123"></a>00123 <span class="comment">       * which must be freed.</span>
<a name="l00124"></a>00124 <span class="comment">       *</span>
<a name="l00125"></a>00125 <span class="comment">       * A network vertex can only have router vertices as its</span>
<a name="l00126"></a>00126 <span class="comment">       * children, so only one level of recursion is possible.</span>
<a name="l00127"></a>00127 <span class="comment">       */</span>
<a name="l00128"></a>00128       <span class="keywordflow">if</span> (child-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>)
<a name="l00129"></a>00129         <a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (child);
<a name="l00130"></a>00130       
<a name="l00131"></a>00131       <span class="comment">/* Free child nexthops pointing back to this root vertex */</span>
<a name="l00132"></a>00132       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (child-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, n2, nn2, vp))
<a name="l00133"></a>00133         <span class="keywordflow">if</span> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> == root &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>)
<a name="l00134"></a>00134           <a class="code" href="ospf__spf_8c.html#a1663c4ab7996b65fe11a81a238ed33b4">vertex_nexthop_free</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>);
<a name="l00135"></a>00135     }
<a name="l00136"></a>00136 }      
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">/* TODO: Parent list should be excised, in favour of maintaining only</span>
<a name="l00139"></a>00139 <span class="comment"> * vertex_nexthop, with refcounts.</span>
<a name="l00140"></a>00140 <span class="comment"> */</span>
<a name="l00141"></a>00141 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *
<a name="l00142"></a><a class="code" href="ospf__spf_8c.html#a3c58442d769f8c4ec9bb88b1a7f67d84">00142</a> <a class="code" href="ospf__spf_8c.html#a3c58442d769f8c4ec9bb88b1a7f67d84">vertex_parent_new</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keywordtype">int</span> <a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>, <span class="keyword">struct</span> <a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *<a class="code" href="structhop.html">hop</a>)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *<span class="keyword">new</span>;
<a name="l00145"></a>00145   
<a name="l00146"></a>00146   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa5f6cbe61d28b5d1cd965cf46dd110a7">MTYPE_OSPF_VERTEX_PARENT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex__parent.html">vertex_parent</a>));
<a name="l00147"></a>00147   
<a name="l00148"></a>00148   <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00149"></a>00149     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00150"></a>00150   
<a name="l00151"></a>00151   <span class="keyword">new</span>-&gt;parent = v;
<a name="l00152"></a>00152   <span class="keyword">new</span>-&gt;backlink = <a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>;
<a name="l00153"></a>00153   <span class="keyword">new</span>-&gt;nexthop = hop;
<a name="l00154"></a>00154   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00158"></a><a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">00158</a> <a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a> (<span class="keywordtype">void</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa5f6cbe61d28b5d1cd965cf46dd110a7">MTYPE_OSPF_VERTEX_PARENT</a>, p);
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *
<a name="l00164"></a><a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">00164</a> <a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *<span class="keyword">new</span>;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a>));
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="keyword">new</span>-&gt;flags = 0;
<a name="l00171"></a>00171   <span class="keyword">new</span>-&gt;stat = &amp;(lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>);
<a name="l00172"></a>00172   <span class="keyword">new</span>-&gt;type = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>;
<a name="l00173"></a>00173   <span class="keyword">new</span>-&gt;id = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
<a name="l00174"></a>00174   <span class="keyword">new</span>-&gt;lsa = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l00175"></a>00175   <span class="keyword">new</span>-&gt;children = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00176"></a>00176   <span class="keyword">new</span>-&gt;parents = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00177"></a>00177   <span class="keyword">new</span>-&gt;parents-&gt;del = <a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a>;
<a name="l00178"></a>00178   
<a name="l00179"></a>00179   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (&amp;vertex_list, <span class="keyword">new</span>);
<a name="l00180"></a>00180   
<a name="l00181"></a>00181   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00182"></a>00182     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Created %s vertex %s&quot;</span>, __func__,
<a name="l00183"></a>00183                 new-&gt;type == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
<a name="l00184"></a>00184                 inet_ntoa (new-&gt;lsa-&gt;id));
<a name="l00185"></a>00185   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00189"></a><a class="code" href="ospf__spf_8c.html#a1ea44a6fc9fca346086f90b6af653325">00189</a> <a class="code" href="ospf__spf_8c.html#a1ea44a6fc9fca346086f90b6af653325">ospf_vertex_free</a> (<span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l00192"></a>00192   
<a name="l00193"></a>00193   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00194"></a>00194     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Free %s vertex %s&quot;</span>, __func__,
<a name="l00195"></a>00195                 v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
<a name="l00196"></a>00196                 inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00197"></a>00197   
<a name="l00198"></a>00198   <span class="comment">/* There should be no parents potentially holding references to this vertex</span>
<a name="l00199"></a>00199 <span class="comment">   * Children however may still be there, but presumably referenced by other</span>
<a name="l00200"></a>00200 <span class="comment">   * vertices</span>
<a name="l00201"></a>00201 <span class="comment">   */</span>
<a name="l00202"></a>00202   <span class="comment">//assert (listcount (v-&gt;parents) == 0);</span>
<a name="l00203"></a>00203   
<a name="l00204"></a>00204   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>)
<a name="l00205"></a>00205     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>);
<a name="l00206"></a>00206   v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00207"></a>00207   
<a name="l00208"></a>00208   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>)
<a name="l00209"></a>00209     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>);
<a name="l00210"></a>00210   v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00211"></a>00211   
<a name="l00212"></a>00212   v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00213"></a>00213   
<a name="l00214"></a>00214   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>, v);
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00218"></a><a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">00218</a> <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structmsg.html">msg</a>, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00219"></a>00219          <span class="keywordtype">int</span> print_parents, <span class="keywordtype">int</span> print_children)
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221   <span class="keywordflow">if</span> ( ! <a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00222"></a>00222     <span class="keywordflow">return</span>;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;%s %s vertex %s  distance %u flags %u&quot;</span>,
<a name="l00225"></a>00225             msg,
<a name="l00226"></a>00226         v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
<a name="l00227"></a>00227         inet_ntoa(v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
<a name="l00228"></a>00228         v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>,
<a name="l00229"></a>00229         (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)v-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231   <span class="keywordflow">if</span> (print_parents)
<a name="l00232"></a>00232     {
<a name="l00233"></a>00233       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00234"></a>00234       <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00235"></a>00235       
<a name="l00236"></a>00236       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
<a name="l00237"></a>00237         {
<a name="l00238"></a>00238       <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l00239"></a>00239       
<a name="l00240"></a>00240       <span class="keywordflow">if</span> (vp)
<a name="l00241"></a>00241         {
<a name="l00242"></a>00242           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;parent %s backlink %d nexthop %s  interface %s&quot;</span>,
<a name="l00243"></a>00243                      inet_ntoa(vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>,
<a name="l00244"></a>00244              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>, buf1, BUFSIZ),
<a name="l00245"></a>00245              vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> ? <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>) : <span class="stringliteral">&quot;NULL&quot;</span>);
<a name="l00246"></a>00246         }
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   <span class="keywordflow">if</span> (print_children)
<a name="l00251"></a>00251     {
<a name="l00252"></a>00252       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
<a name="l00253"></a>00253       <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *cv;
<a name="l00254"></a>00254       
<a name="l00255"></a>00255       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, cv))
<a name="l00256"></a>00256         <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot; child:&quot;</span>, cv, 0, 0);
<a name="l00257"></a>00257     }
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 <span class="comment">/* Add a vertex to the list of children in each of its parents. */</span>
<a name="l00262"></a>00262 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00263"></a><a class="code" href="ospf__spf_8c.html#a1a532b38c2d329151809815e36a95c94">00263</a> <a class="code" href="ospf__spf_8c.html#a1a532b38c2d329151809815e36a95c94">ospf_vertex_add_parent</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v)
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00266"></a>00266   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00267"></a>00267   
<a name="l00268"></a>00268   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (v &amp;&amp; v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>);
<a name="l00269"></a>00269   
<a name="l00270"></a>00270   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
<a name="l00271"></a>00271     {
<a name="l00272"></a>00272       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>);
<a name="l00273"></a>00273       
<a name="l00274"></a>00274       <span class="comment">/* No need to add two links from the same parent. */</span>
<a name="l00275"></a>00275       <span class="keywordflow">if</span> (<a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, v) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00276"></a>00276         <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, v);
<a name="l00277"></a>00277     }
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00281"></a><a class="code" href="ospf__spf_8c.html#a5a606956341e2c6c29d662d36d626d06">00281</a> <a class="code" href="ospf__spf_8c.html#a5a606956341e2c6c29d662d36d626d06">ospf_spf_init</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00282"></a>00282 {
<a name="l00283"></a>00283   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v;
<a name="l00284"></a>00284   
<a name="l00285"></a>00285   <span class="comment">/* Create root node. */</span>
<a name="l00286"></a>00286   v = <a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
<a name="l00287"></a>00287   
<a name="l00288"></a>00288   area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a> = v;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   <span class="comment">/* Reset ABR and ASBR router counts. */</span>
<a name="l00291"></a>00291   area-&gt;<a class="code" href="structospf__area.html#a467c1a5bf34511b0520f0b13948ece72">abr_count</a> = 0;
<a name="l00292"></a>00292   area-&gt;<a class="code" href="structospf__area.html#ad46b2710280032eab16991e2369fab32">asbr_count</a> = 0;
<a name="l00293"></a>00293 }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="comment">/* return index of link back to V from W, or -1 if no link found */</span>
<a name="l00296"></a>00296 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00297"></a><a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">00297</a> <a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *w, <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *v)
<a name="l00298"></a>00298 {
<a name="l00299"></a>00299   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00300"></a>00300   <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rl;
<a name="l00301"></a>00301   <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *nl;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303   <span class="comment">/* In case of W is Network LSA. */</span>
<a name="l00304"></a>00304   <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
<a name="l00305"></a>00305     {
<a name="l00306"></a>00306       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
<a name="l00307"></a>00307         <span class="keywordflow">return</span> -1;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309       nl = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *) w;
<a name="l00310"></a>00310       length = (ntohs (w-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> - 4) / 4;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>; i++)
<a name="l00313"></a>00313         <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nl-&gt;<a class="code" href="structnetwork__lsa.html#afc394e67b4028155fa618b6f7d0e3bf6">routers</a>[i], &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
<a name="l00314"></a>00314           <span class="keywordflow">return</span> i;
<a name="l00315"></a>00315       <span class="keywordflow">return</span> -1;
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317 
<a name="l00318"></a>00318   <span class="comment">/* In case of W is Router LSA. */</span>
<a name="l00319"></a>00319   <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
<a name="l00320"></a>00320     {
<a name="l00321"></a>00321       rl = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) w;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323       length = ntohs (w-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00324"></a>00324 
<a name="l00325"></a>00325       <span class="keywordflow">for</span> (i = 0;
<a name="l00326"></a>00326            i &lt; ntohs (rl-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>) &amp;&amp; length &gt;= <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a>);
<a name="l00327"></a>00327            i++, length -= 12)
<a name="l00328"></a>00328         {
<a name="l00329"></a>00329           <span class="keywordflow">switch</span> (rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#aa730ac0aec994e853bcd4d52ff285a9e">type</a>)
<a name="l00330"></a>00330             {
<a name="l00331"></a>00331             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
<a name="l00332"></a>00332             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
<a name="l00333"></a>00333               <span class="comment">/* Router LSA ID. */</span>
<a name="l00334"></a>00334               <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a> &amp;&amp;
<a name="l00335"></a>00335                   <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#af784ecdeabee7aaf7889657212023f45">link_id</a>, &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
<a name="l00336"></a>00336                 {
<a name="l00337"></a>00337                   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00338"></a>00338                 }
<a name="l00339"></a>00339               <span class="keywordflow">break</span>;
<a name="l00340"></a>00340             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
<a name="l00341"></a>00341               <span class="comment">/* Network LSA ID. */</span>
<a name="l00342"></a>00342               <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a> &amp;&amp;
<a name="l00343"></a>00343                   <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#af784ecdeabee7aaf7889657212023f45">link_id</a>, &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
<a name="l00344"></a>00344                 {
<a name="l00345"></a>00345                   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00346"></a>00346                 }
<a name="l00347"></a>00347               <span class="keywordflow">break</span>;
<a name="l00348"></a>00348             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>:
<a name="l00349"></a>00349               <span class="comment">/* Stub can&#39;t lead anywhere, carry on */</span>
<a name="l00350"></a>00350               <span class="keywordflow">continue</span>;
<a name="l00351"></a>00351             <span class="keywordflow">default</span>:
<a name="l00352"></a>00352               <span class="keywordflow">break</span>;
<a name="l00353"></a>00353             }
<a name="l00354"></a>00354         }
<a name="l00355"></a>00355     }
<a name="l00356"></a>00356   <span class="keywordflow">return</span> -1;
<a name="l00357"></a>00357 }
<a name="l00358"></a>00358 
<a name="l00359"></a><a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">00359</a> <span class="preprocessor">#define ROUTER_LSA_MIN_SIZE 12</span>
<a name="l00360"></a><a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">00360</a> <span class="preprocessor"></span><span class="preprocessor">#define ROUTER_LSA_TOS_SIZE 4</span>
<a name="l00361"></a>00361 <span class="preprocessor"></span>
<a name="l00362"></a>00362 <span class="comment">/* Find the next link after prev_link from v to w.  If prev_link is</span>
<a name="l00363"></a>00363 <span class="comment"> * NULL, return the first link from v to w.  Ignore stub and virtual links;</span>
<a name="l00364"></a>00364 <span class="comment"> * these link types will never be returned.</span>
<a name="l00365"></a>00365 <span class="comment"> */</span>
<a name="l00366"></a>00366 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *
<a name="l00367"></a><a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">00367</a> <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *w,
<a name="l00368"></a>00368                     <span class="keyword">struct</span> <a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *prev_link)
<a name="l00369"></a>00369 {
<a name="l00370"></a>00370   u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00371"></a>00371   u_char *lim;
<a name="l00372"></a>00372   u_char lsa_type =  <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>;
<a name="l00373"></a>00373   <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00376"></a>00376     lsa_type = <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378   <span class="keywordflow">if</span> (prev_link == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00379"></a>00379     p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
<a name="l00380"></a>00380   <span class="keywordflow">else</span>
<a name="l00381"></a>00381     {
<a name="l00382"></a>00382       p = (u_char *) prev_link;
<a name="l00383"></a>00383       p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
<a name="l00384"></a>00384             (prev_link-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="keywordflow">while</span> (p &lt; lim)
<a name="l00390"></a>00390     {
<a name="l00391"></a>00391       l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;
<a name="l00392"></a>00392 
<a name="l00393"></a>00393       p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> + (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));
<a name="l00394"></a>00394 
<a name="l00395"></a>00395       <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> != lsa_type)
<a name="l00396"></a>00396         <span class="keywordflow">continue</span>;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>, &amp;w-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>))
<a name="l00399"></a>00399         <span class="keywordflow">return</span> l;
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00406"></a><a class="code" href="ospf__spf_8c.html#a9ddd128c4d4645a921bae9f8d2b22db4">00406</a> <a class="code" href="ospf__spf_8c.html#a9ddd128c4d4645a921bae9f8d2b22db4">ospf_spf_flush_parents</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *w)
<a name="l00407"></a>00407 {
<a name="l00408"></a>00408   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00409"></a>00409   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln, *nn;
<a name="l00410"></a>00410   
<a name="l00411"></a>00411   <span class="comment">/* delete the existing nexthops */</span>
<a name="l00412"></a>00412   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, ln, nn, vp))
<a name="l00413"></a>00413     {
<a name="l00414"></a>00414       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, ln);
<a name="l00415"></a>00415       <a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a> (vp);
<a name="l00416"></a>00416     }
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 <span class="comment">/* </span>
<a name="l00420"></a>00420 <span class="comment"> * Consider supplied next-hop for inclusion to the supplied list of</span>
<a name="l00421"></a>00421 <span class="comment"> * equal-cost next-hops, adjust list as neccessary.  </span>
<a name="l00422"></a>00422 <span class="comment"> */</span>
<a name="l00423"></a>00423 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00424"></a><a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">00424</a> <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *w,
<a name="l00425"></a>00425                      <span class="keyword">struct</span> <a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *newhop,
<a name="l00426"></a>00426                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)
<a name="l00427"></a>00427 {
<a name="l00428"></a>00428   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00429"></a>00429     
<a name="l00430"></a>00430   <span class="comment">/* we must have a newhop, and a distance */</span>
<a name="l00431"></a>00431   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (v &amp;&amp; w &amp;&amp; newhop);
<a name="l00432"></a>00432   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (distance);
<a name="l00433"></a>00433   
<a name="l00434"></a>00434   <span class="comment">/* IFF w has already been assigned a distance, then we shouldn&#39;t get here</span>
<a name="l00435"></a>00435 <span class="comment">   * unless callers have determined V(l)-&gt;W is shortest / equal-shortest</span>
<a name="l00436"></a>00436 <span class="comment">   * path (0 is a special case distance (no distance yet assigned)).</span>
<a name="l00437"></a>00437 <span class="comment">   */</span>
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>)
<a name="l00439"></a>00439     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (distance &lt;= w-&gt;distance);
<a name="l00440"></a>00440   <span class="keywordflow">else</span>
<a name="l00441"></a>00441     w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l00442"></a>00442   
<a name="l00443"></a>00443   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00444"></a>00444     {
<a name="l00445"></a>00445       <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00446"></a>00446       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Adding %s as parent of %s&quot;</span>,
<a name="l00447"></a>00447                 __func__,
<a name="l00448"></a>00448                 <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l00449"></a>00449                 <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;w-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, buf[1], <span class="keyword">sizeof</span>(buf[1])));
<a name="l00450"></a>00450     }           
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <span class="comment">/* Adding parent for a new, better path: flush existing parents from W. */</span>
<a name="l00453"></a>00453   <span class="keywordflow">if</span> (distance &lt; w-&gt;distance)
<a name="l00454"></a>00454     {
<a name="l00455"></a>00455       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00456"></a>00456         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: distance %d better than %d, flushing existing parents&quot;</span>,
<a name="l00457"></a>00457                     __func__, distance, w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>);
<a name="l00458"></a>00458       <a class="code" href="ospf__spf_8c.html#a9ddd128c4d4645a921bae9f8d2b22db4">ospf_spf_flush_parents</a> (w);
<a name="l00459"></a>00459       w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l00460"></a>00460     }
<a name="l00461"></a>00461   
<a name="l00462"></a>00462   <span class="comment">/* new parent is &lt;= existing parents, add it to parent list */</span>  
<a name="l00463"></a>00463   vp = <a class="code" href="ospf__spf_8c.html#a3c58442d769f8c4ec9bb88b1a7f67d84">vertex_parent_new</a> (v, <a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (w-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>, v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>), newhop);
<a name="l00464"></a>00464   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, vp);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <span class="keywordflow">return</span>;
<a name="l00467"></a>00467 }
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="comment">/* 16.1.1.  Calculate nexthop from root through V (parent) to</span>
<a name="l00470"></a>00470 <span class="comment"> * vertex W (destination), with given distance from root-&gt;W.</span>
<a name="l00471"></a>00471 <span class="comment"> *</span>
<a name="l00472"></a>00472 <span class="comment"> * The link must be supplied if V is the root vertex. In all other cases</span>
<a name="l00473"></a>00473 <span class="comment"> * it may be NULL.</span>
<a name="l00474"></a>00474 <span class="comment"> *</span>
<a name="l00475"></a>00475 <span class="comment"> * Note that this function may fail, hence the state of the destination</span>
<a name="l00476"></a>00476 <span class="comment"> * vertex, W, should /not/ be modified in a dependent manner until</span>
<a name="l00477"></a>00477 <span class="comment"> * this function returns. This function will update the W vertex with the</span>
<a name="l00478"></a>00478 <span class="comment"> * provided distance as appropriate.</span>
<a name="l00479"></a>00479 <span class="comment"> */</span>
<a name="l00480"></a>00480 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00481"></a><a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">00481</a> <a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00482"></a>00482                           <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *w, <span class="keyword">struct</span> <a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>,
<a name="l00483"></a>00483                           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)
<a name="l00484"></a>00484 {
<a name="l00485"></a>00485   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00486"></a>00486   <span class="keyword">struct </span><a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *nh;
<a name="l00487"></a>00487   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
<a name="l00488"></a>00488   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00489"></a>00489   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> added = 0;
<a name="l00490"></a>00490 
<a name="l00491"></a>00491   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00492"></a>00492     {
<a name="l00493"></a>00493       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_nexthop_calculation(): Start&quot;</span>);
<a name="l00494"></a>00494       <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;V (parent):&quot;</span>, v, 1, 1);
<a name="l00495"></a>00495       <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;W (dest)  :&quot;</span>, w, 1, 1);
<a name="l00496"></a>00496       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;V-&gt;W distance: %d&quot;</span>, distance);
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499   <span class="keywordflow">if</span> (v == area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>)
<a name="l00500"></a>00500     {      
<a name="l00501"></a>00501       <span class="comment">/* 16.1.1 para 4.  In the first case, the parent vertex (V) is the</span>
<a name="l00502"></a>00502 <span class="comment">     root (the calculating router itself).  This means that the </span>
<a name="l00503"></a>00503 <span class="comment">     destination is either a directly connected network or directly</span>
<a name="l00504"></a>00504 <span class="comment">     connected router.  The outgoing interface in this case is simply </span>
<a name="l00505"></a>00505 <span class="comment">         the OSPF interface connecting to the destination network/router.</span>
<a name="l00506"></a>00506 <span class="comment">      */</span>
<a name="l00507"></a>00507 
<a name="l00508"></a>00508       <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00509"></a>00509         {
<a name="l00510"></a>00510           <span class="comment">/* l  is a link from v to w</span>
<a name="l00511"></a>00511 <span class="comment">           * l2 will be link from w to v</span>
<a name="l00512"></a>00512 <span class="comment">           */</span>
<a name="l00513"></a>00513           <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *l2 = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00514"></a>00514           
<a name="l00515"></a>00515           <span class="comment">/* we *must* be supplied with the link data */</span>
<a name="l00516"></a>00516           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00517"></a>00517           
<a name="l00518"></a>00518           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00519"></a>00519             {
<a name="l00520"></a>00520               <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l00521"></a>00521               <span class="keywordtype">char</span> buf2[BUFSIZ];
<a name="l00522"></a>00522               
<a name="l00523"></a>00523               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): considering link &quot;</span>
<a name="l00524"></a>00524                         <span class="stringliteral">&quot;type %d link_id %s link_data %s&quot;</span>,
<a name="l00525"></a>00525                         l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a>,
<a name="l00526"></a>00526                         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>, buf1, BUFSIZ),
<a name="l00527"></a>00527                         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>, buf2, BUFSIZ));
<a name="l00528"></a>00528             }
<a name="l00529"></a>00529 
<a name="l00530"></a>00530           <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>)
<a name="l00531"></a>00531             {
<a name="l00532"></a>00532               <span class="comment">/* If the destination is a router which connects to</span>
<a name="l00533"></a>00533 <span class="comment">                 the calculating router via a Point-to-MultiPoint</span>
<a name="l00534"></a>00534 <span class="comment">                 network, the destination&#39;s next hop IP address(es)</span>
<a name="l00535"></a>00535 <span class="comment">                 can be determined by examining the destination&#39;s</span>
<a name="l00536"></a>00536 <span class="comment">                 router-LSA: each link pointing back to the</span>
<a name="l00537"></a>00537 <span class="comment">                 calculating router and having a Link Data field</span>
<a name="l00538"></a>00538 <span class="comment">                 belonging to the Point-to-MultiPoint network</span>
<a name="l00539"></a>00539 <span class="comment">                 provides an IP address of the next hop router.</span>
<a name="l00540"></a>00540 <span class="comment"></span>
<a name="l00541"></a>00541 <span class="comment">                 At this point l is a link from V to W, and V is the</span>
<a name="l00542"></a>00542 <span class="comment">                 root (&quot;us&quot;).  Find the local interface associated </span>
<a name="l00543"></a>00543 <span class="comment">                 with l (its address is in l-&gt;link_data).  If it</span>
<a name="l00544"></a>00544 <span class="comment">                 is a point-to-multipoint interface, then look through</span>
<a name="l00545"></a>00545 <span class="comment">                 the links in the opposite direction (W to V).  If</span>
<a name="l00546"></a>00546 <span class="comment">                 any of them have an address that lands within the</span>
<a name="l00547"></a>00547 <span class="comment">                 subnet declared by the PtMP link, then that link</span>
<a name="l00548"></a>00548 <span class="comment">                 is a constituent of the PtMP link, and its address is </span>
<a name="l00549"></a>00549 <span class="comment">                 a nexthop address for V.</span>
<a name="l00550"></a>00550 <span class="comment">              */</span>
<a name="l00551"></a>00551               oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>);
<a name="l00552"></a>00552               <span class="keywordflow">if</span> (oi &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#aa65cd67781b9573131ead326b8976194">OSPF_IFTYPE_POINTOMULTIPOINT</a>)
<a name="l00553"></a>00553                 {
<a name="l00554"></a>00554                   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> la;
<a name="l00555"></a>00555 
<a name="l00556"></a>00556                   la.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00557"></a>00557                   la.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00558"></a>00558 
<a name="l00559"></a>00559                   <span class="comment">/* V links to W on PtMP interface</span>
<a name="l00560"></a>00560 <span class="comment">                     - find the interface address on W */</span>
<a name="l00561"></a>00561                   <span class="keywordflow">while</span> ((l2 = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l2)))
<a name="l00562"></a>00562                     {
<a name="l00563"></a>00563                       la.prefix = l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;
<a name="l00564"></a>00564 
<a name="l00565"></a>00565                       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a203098ec44d398d5c8692082d8cae725">prefix_cmp</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;la,
<a name="l00566"></a>00566                                       oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>) == 0)
<a name="l00567"></a>00567                         <span class="comment">/* link_data is on our PtMP network */</span>
<a name="l00568"></a>00568                         <span class="keywordflow">break</span>;
<a name="l00569"></a>00569                     }
<a name="l00570"></a>00570                 } <span class="comment">/* end l is on point-to-multipoint link */</span>
<a name="l00571"></a>00571               <span class="keywordflow">else</span>
<a name="l00572"></a>00572                 {
<a name="l00573"></a>00573                   <span class="comment">/* l is a regular point-to-point link.</span>
<a name="l00574"></a>00574 <span class="comment">                     Look for a link from W to V.</span>
<a name="l00575"></a>00575 <span class="comment">                   */</span>
<a name="l00576"></a>00576                   <span class="keywordflow">while</span> ((l2 = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l2)))
<a name="l00577"></a>00577                     {
<a name="l00578"></a>00578                       oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>,
<a name="l00579"></a>00579                                                   &amp;(l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>));
<a name="l00580"></a>00580 
<a name="l00581"></a>00581                       <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00582"></a>00582                         <span class="keywordflow">continue</span>;
<a name="l00583"></a>00583 
<a name="l00584"></a>00584                       <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
<a name="l00585"></a>00585                                            &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>))
<a name="l00586"></a>00586                         <span class="keywordflow">continue</span>;
<a name="l00587"></a>00587 
<a name="l00588"></a>00588                       <span class="keywordflow">break</span>;
<a name="l00589"></a>00589                     }
<a name="l00590"></a>00590                 }
<a name="l00591"></a>00591 
<a name="l00592"></a>00592               <span class="keywordflow">if</span> (oi &amp;&amp; l2)
<a name="l00593"></a>00593                 {
<a name="l00594"></a>00594                   <span class="comment">/* found all necessary info to build nexthop */</span>
<a name="l00595"></a>00595                   nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
<a name="l00596"></a>00596                   nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = oi;
<a name="l00597"></a>00597                   nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;
<a name="l00598"></a>00598                   <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, distance);
<a name="l00599"></a>00599                   <span class="keywordflow">return</span> 1;
<a name="l00600"></a>00600                 }
<a name="l00601"></a>00601               <span class="keywordflow">else</span>
<a name="l00602"></a>00602                 <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
<a name="l00603"></a>00603                           <span class="stringliteral">&quot;could not determine nexthop for link&quot;</span>);
<a name="l00604"></a>00604             } <span class="comment">/* end point-to-point link from V to W */</span>
<a name="l00605"></a>00605           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>)
<a name="l00606"></a>00606             {
<a name="l00607"></a>00607               <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l00608"></a>00608               
<a name="l00609"></a>00609               <span class="comment">/* VLink implementation limitations: </span>
<a name="l00610"></a>00610 <span class="comment">               * a) vl_data can only reference one nexthop, so no ECMP</span>
<a name="l00611"></a>00611 <span class="comment">               *    to backbone through VLinks. Though transit-area </span>
<a name="l00612"></a>00612 <span class="comment">               *    summaries may be considered, and those can be ECMP.</span>
<a name="l00613"></a>00613 <span class="comment">               * b) We can only use /one/ VLink, even if multiple ones</span>
<a name="l00614"></a>00614 <span class="comment">               *    exist this router through multiple transit-areas.</span>
<a name="l00615"></a>00615 <span class="comment">               */</span>
<a name="l00616"></a>00616               vl_data = <a class="code" href="ospf__interface_8c.html#a2c499a47d45e763d71f9b8ff41456156">ospf_vl_lookup</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
<a name="l00617"></a>00617               
<a name="l00618"></a>00618               <span class="keywordflow">if</span> (vl_data 
<a name="l00619"></a>00619                   &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>))
<a name="l00620"></a>00620                 {
<a name="l00621"></a>00621                   nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
<a name="l00622"></a>00622                   nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
<a name="l00623"></a>00623                   nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
<a name="l00624"></a>00624                   <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, distance);
<a name="l00625"></a>00625                   <span class="keywordflow">return</span> 1;
<a name="l00626"></a>00626                 }
<a name="l00627"></a>00627               <span class="keywordflow">else</span>
<a name="l00628"></a>00628                   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
<a name="l00629"></a>00629                             <span class="stringliteral">&quot;vl_data for VL link not found&quot;</span>);
<a name="l00630"></a>00630             } <span class="comment">/* end virtual-link from V to W */</span>
<a name="l00631"></a>00631           <span class="keywordflow">return</span> 0;
<a name="l00632"></a>00632         } <span class="comment">/* end W is a Router vertex */</span>
<a name="l00633"></a>00633       <span class="keywordflow">else</span>
<a name="l00634"></a>00634         {
<a name="l00635"></a>00635           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>);
<a name="l00636"></a>00636           oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, &amp;(l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>));
<a name="l00637"></a>00637           <span class="keywordflow">if</span> (oi)
<a name="l00638"></a>00638             {
<a name="l00639"></a>00639               nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
<a name="l00640"></a>00640               nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = oi;
<a name="l00641"></a>00641               nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>.s_addr = 0;
<a name="l00642"></a>00642               <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, distance);
<a name="l00643"></a>00643               <span class="keywordflow">return</span> 1;
<a name="l00644"></a>00644             }
<a name="l00645"></a>00645         }
<a name="l00646"></a>00646       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
<a name="l00647"></a>00647                 <span class="stringliteral">&quot;Unknown attached link&quot;</span>);
<a name="l00648"></a>00648       <span class="keywordflow">return</span> 0;
<a name="l00649"></a>00649     } <span class="comment">/* end V is the root */</span>
<a name="l00650"></a>00650   <span class="comment">/* Check if W&#39;s parent is a network connected to root. */</span>
<a name="l00651"></a>00651   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>)
<a name="l00652"></a>00652     {
<a name="l00653"></a>00653       <span class="comment">/* See if any of V&#39;s parents are the root. */</span>
<a name="l00654"></a>00654       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, nnode, vp))
<a name="l00655"></a>00655         {
<a name="l00656"></a>00656           <span class="keywordflow">if</span> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> == area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>) <span class="comment">/* connects to root? */</span>
<a name="l00657"></a>00657         {
<a name="l00658"></a>00658           <span class="comment">/* 16.1.1 para 5. ...the parent vertex is a network that</span>
<a name="l00659"></a>00659 <span class="comment">           * directly connects the calculating router to the destination</span>
<a name="l00660"></a>00660 <span class="comment">           * router.  The list of next hops is then determined by</span>
<a name="l00661"></a>00661 <span class="comment">           * examining the destination&#39;s router-LSA...</span>
<a name="l00662"></a>00662 <span class="comment">           */</span>
<a name="l00663"></a>00663 
<a name="l00664"></a>00664           <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>);
<a name="l00665"></a>00665               <span class="keywordflow">while</span> ((l = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l)))
<a name="l00666"></a>00666                 {
<a name="l00667"></a>00667           <span class="comment">/* ...For each link in the router-LSA that points back to the</span>
<a name="l00668"></a>00668 <span class="comment">           * parent network, the link&#39;s Link Data field provides the IP</span>
<a name="l00669"></a>00669 <span class="comment">           * address of a next hop router.  The outgoing interface to</span>
<a name="l00670"></a>00670 <span class="comment">           * use can then be derived from the next hop IP address (or </span>
<a name="l00671"></a>00671 <span class="comment">           * it can be inherited from the parent network).</span>
<a name="l00672"></a>00672 <span class="comment">           */</span>
<a name="l00673"></a>00673           nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
<a name="l00674"></a>00674           nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
<a name="l00675"></a>00675           nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;
<a name="l00676"></a>00676           added = 1;
<a name="l00677"></a>00677                   <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, distance);
<a name="l00678"></a>00678                 }
<a name="l00679"></a>00679             }
<a name="l00680"></a>00680         }
<a name="l00681"></a>00681       <span class="comment">/* NB: This code is non-trivial.</span>
<a name="l00682"></a>00682 <span class="comment">       * </span>
<a name="l00683"></a>00683 <span class="comment">       * E.g. it is not enough to know that V connects to the root. It is</span>
<a name="l00684"></a>00684 <span class="comment">       * also important that the while above, looping through all links from</span>
<a name="l00685"></a>00685 <span class="comment">       * W-&gt;V found at least one link, so that we know there is</span>
<a name="l00686"></a>00686 <span class="comment">       * bi-directional connectivity between V and W.  Otherwise, if we</span>
<a name="l00687"></a>00687 <span class="comment">       * /always/ return here, but don&#39;t check that W-&gt;V exists then we</span>
<a name="l00688"></a>00688 <span class="comment">       * we will prevent SPF from finding/using higher cost paths..</span>
<a name="l00689"></a>00689 <span class="comment">       *</span>
<a name="l00690"></a>00690 <span class="comment">       * See also bug #330, and also:</span>
<a name="l00691"></a>00691 <span class="comment">       *</span>
<a name="l00692"></a>00692 <span class="comment">       * http://blogs.sun.com/paulj/entry/the_difference_a_line_makes</span>
<a name="l00693"></a>00693 <span class="comment">       */</span>
<a name="l00694"></a>00694       <span class="keywordflow">if</span> (added)
<a name="l00695"></a>00695         <span class="keywordflow">return</span> added;
<a name="l00696"></a>00696     }
<a name="l00697"></a>00697 
<a name="l00698"></a>00698   <span class="comment">/* 16.1.1 para 4.  If there is at least one intervening router in the</span>
<a name="l00699"></a>00699 <span class="comment">   * current shortest path between the destination and the root, the</span>
<a name="l00700"></a>00700 <span class="comment">   * destination simply inherits the set of next hops from the</span>
<a name="l00701"></a>00701 <span class="comment">   * parent.</span>
<a name="l00702"></a>00702 <span class="comment">   */</span>
<a name="l00703"></a>00703   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00704"></a>00704     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Intervening routers, adding parent(s)&quot;</span>, __func__);
<a name="l00705"></a>00705 
<a name="l00706"></a>00706   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, nnode, vp))
<a name="l00707"></a>00707     {
<a name="l00708"></a>00708       added = 1;
<a name="l00709"></a>00709       <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>, distance);
<a name="l00710"></a>00710     }
<a name="l00711"></a>00711   
<a name="l00712"></a>00712   <span class="keywordflow">return</span> added;
<a name="l00713"></a>00713 }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715 <span class="comment">/* RFC2328 Section 16.1 (2).</span>
<a name="l00716"></a>00716 <span class="comment"> * v is on the SPF tree.  Examine the links in v&#39;s LSA.  Update the list</span>
<a name="l00717"></a>00717 <span class="comment"> * of candidates with any vertices not already on the list.  If a lower-cost</span>
<a name="l00718"></a>00718 <span class="comment"> * path is found to a vertex already on the candidate list, store the new cost.</span>
<a name="l00719"></a>00719 <span class="comment"> */</span>
<a name="l00720"></a>00720 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00721"></a><a class="code" href="ospf__spf_8c.html#abc11a92f3cd8b5f9a086362350c338fa">00721</a> <a class="code" href="ospf__spf_8c.html#abc11a92f3cd8b5f9a086362350c338fa">ospf_spf_next</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00722"></a>00722            <span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> * candidate)
<a name="l00723"></a>00723 {
<a name="l00724"></a>00724   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *w_lsa = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00725"></a>00725   u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00726"></a>00726   u_char *lim;
<a name="l00727"></a>00727   <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00728"></a>00728   <span class="keyword">struct </span>in_addr *r;
<a name="l00729"></a>00729   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
<a name="l00730"></a>00730 
<a name="l00731"></a>00731   <span class="comment">/* If this is a router-LSA, and bit V of the router-LSA (see Section</span>
<a name="l00732"></a>00732 <span class="comment">     A.4.2:RFC2328) is set, set Area A&#39;s TransitCapability to TRUE.  */</span>
<a name="l00733"></a>00733   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a73de61aacb8ece81398674acfc6fc583">IS_ROUTER_LSA_VIRTUAL</a> ((<span class="keyword">struct</span> <a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>))
<a name="l00736"></a>00736         area-&gt;<a class="code" href="structospf__area.html#a2c84e7800bc78b5dbd66e75faf09350b">transit</a> = <a class="code" href="ospfd_8h.html#a70fe6c34f6415b47c7eacdb16e586103">OSPF_TRANSIT_TRUE</a>;
<a name="l00737"></a>00737     }
<a name="l00738"></a>00738   
<a name="l00739"></a>00739   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00740"></a>00740     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Next vertex of %s vertex %s&quot;</span>,
<a name="l00741"></a>00741                 __func__, 
<a name="l00742"></a>00742                 v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
<a name="l00743"></a>00743                 inet_ntoa(v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00744"></a>00744   
<a name="l00745"></a>00745   p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
<a name="l00746"></a>00746   lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00747"></a>00747 
<a name="l00748"></a>00748   <span class="keywordflow">while</span> (p &lt; lim)
<a name="l00749"></a>00749     {
<a name="l00750"></a>00750       <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *w;
<a name="l00751"></a>00751       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l00752"></a>00752       
<a name="l00753"></a>00753       <span class="comment">/* In case of V is Router-LSA. */</span>
<a name="l00754"></a>00754       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
<a name="l00755"></a>00755         {
<a name="l00756"></a>00756           l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;
<a name="l00757"></a>00757 
<a name="l00758"></a>00758           p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
<a name="l00759"></a>00759                 (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));
<a name="l00760"></a>00760 
<a name="l00761"></a>00761           <span class="comment">/* (a) If this is a link to a stub network, examine the next</span>
<a name="l00762"></a>00762 <span class="comment">             link in V&#39;s LSA.  Links to stub networks will be</span>
<a name="l00763"></a>00763 <span class="comment">             considered in the second stage of the shortest path</span>
<a name="l00764"></a>00764 <span class="comment">             calculation. */</span>
<a name="l00765"></a>00765           <span class="keywordflow">if</span> ((type = l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a>) == <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>)
<a name="l00766"></a>00766             <span class="keywordflow">continue</span>;
<a name="l00767"></a>00767           
<a name="l00768"></a>00768           <span class="comment">/* Infinite distance links shouldn&#39;t be followed, except</span>
<a name="l00769"></a>00769 <span class="comment">           * for local links (a stub-routed router still wants to</span>
<a name="l00770"></a>00770 <span class="comment">           * calculate tree, so must follow its own links).</span>
<a name="l00771"></a>00771 <span class="comment">           */</span>
<a name="l00772"></a>00772           <span class="keywordflow">if</span> ((v != area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>) &amp;&amp; l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a> &gt;= <a class="code" href="ospfd_8h.html#a79eb766203fe4ecce14c1b90b135a69d">OSPF_OUTPUT_COST_INFINITE</a>)
<a name="l00773"></a>00773             <span class="keywordflow">continue</span>;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775           <span class="comment">/* (b) Otherwise, W is a transit vertex (router or transit</span>
<a name="l00776"></a>00776 <span class="comment">             network).  Look up the vertex W&#39;s LSA (router-LSA or</span>
<a name="l00777"></a>00777 <span class="comment">             network-LSA) in Area A&#39;s link state database. */</span>
<a name="l00778"></a>00778           <span class="keywordflow">switch</span> (type)
<a name="l00779"></a>00779             {
<a name="l00780"></a>00780             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
<a name="l00781"></a>00781             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
<a name="l00782"></a>00782               <span class="keywordflow">if</span> (type == <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>)
<a name="l00783"></a>00783                 {
<a name="l00784"></a>00784                   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00785"></a>00785                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;looking up LSA through VL: %s&quot;</span>,
<a name="l00786"></a>00786                                inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
<a name="l00787"></a>00787                 }
<a name="l00788"></a>00788 
<a name="l00789"></a>00789               w_lsa = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (area, <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>, l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>,
<a name="l00790"></a>00790                                        l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
<a name="l00791"></a>00791               <span class="keywordflow">if</span> (w_lsa)
<a name="l00792"></a>00792                 {
<a name="l00793"></a>00793                   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00794"></a>00794                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found Router LSA %s&quot;</span>, inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
<a name="l00795"></a>00795                 }
<a name="l00796"></a>00796               <span class="keywordflow">break</span>;
<a name="l00797"></a>00797             <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
<a name="l00798"></a>00798               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00799"></a>00799                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Looking up Network LSA, ID: %s&quot;</span>,
<a name="l00800"></a>00800                            inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
<a name="l00801"></a>00801               w_lsa = <a class="code" href="ospf__lsa_8c.html#ad8b31f978f44bc48a1b915183bcd04c1">ospf_lsa_lookup_by_id</a> (area, <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>,
<a name="l00802"></a>00802                                              l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
<a name="l00803"></a>00803               <span class="keywordflow">if</span> (w_lsa)
<a name="l00804"></a>00804                 <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00805"></a>00805                   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found the LSA&quot;</span>);
<a name="l00806"></a>00806               <span class="keywordflow">break</span>;
<a name="l00807"></a>00807             <span class="keywordflow">default</span>:
<a name="l00808"></a>00808               <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid LSA link type %d&quot;</span>, type);
<a name="l00809"></a>00809               <span class="keywordflow">continue</span>;
<a name="l00810"></a>00810             }
<a name="l00811"></a>00811         }
<a name="l00812"></a>00812       <span class="keywordflow">else</span>
<a name="l00813"></a>00813         {
<a name="l00814"></a>00814           <span class="comment">/* In case of V is Network-LSA. */</span>
<a name="l00815"></a>00815           r = (<span class="keyword">struct </span>in_addr *) p;
<a name="l00816"></a>00816           p += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in_addr);
<a name="l00817"></a>00817 
<a name="l00818"></a>00818           <span class="comment">/* Lookup the vertex W&#39;s LSA. */</span>
<a name="l00819"></a>00819           w_lsa = <a class="code" href="ospf__lsa_8c.html#ad8b31f978f44bc48a1b915183bcd04c1">ospf_lsa_lookup_by_id</a> (area, <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>, *r);
<a name="l00820"></a>00820           <span class="keywordflow">if</span> (w_lsa)
<a name="l00821"></a>00821             {
<a name="l00822"></a>00822               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00823"></a>00823                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found Router LSA %s&quot;</span>, inet_ntoa (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00824"></a>00824             }
<a name="l00825"></a>00825         }
<a name="l00826"></a>00826 
<a name="l00827"></a>00827       <span class="comment">/* (b cont.) If the LSA does not exist, or its LS age is equal</span>
<a name="l00828"></a>00828 <span class="comment">         to MaxAge, or it does not have a link back to vertex V,</span>
<a name="l00829"></a>00829 <span class="comment">         examine the next link in V&#39;s LSA.[23] */</span>
<a name="l00830"></a>00830       <span class="keywordflow">if</span> (w_lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00831"></a>00831         {
<a name="l00832"></a>00832           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00833"></a>00833             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;No LSA found&quot;</span>);
<a name="l00834"></a>00834           <span class="keywordflow">continue</span>;
<a name="l00835"></a>00835         }
<a name="l00836"></a>00836 
<a name="l00837"></a>00837       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (w_lsa))
<a name="l00838"></a>00838         {
<a name="l00839"></a>00839           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00840"></a>00840             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA is MaxAge&quot;</span>);
<a name="l00841"></a>00841           <span class="keywordflow">continue</span>;
<a name="l00842"></a>00842         }
<a name="l00843"></a>00843 
<a name="l00844"></a>00844       <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) &lt; 0 )
<a name="l00845"></a>00845         {
<a name="l00846"></a>00846           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00847"></a>00847             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;The LSA doesn&#39;t have a link back&quot;</span>);
<a name="l00848"></a>00848           <span class="keywordflow">continue</span>;
<a name="l00849"></a>00849         }
<a name="l00850"></a>00850 
<a name="l00851"></a>00851       <span class="comment">/* (c) If vertex W is already on the shortest-path tree, examine</span>
<a name="l00852"></a>00852 <span class="comment">         the next link in the LSA. */</span>
<a name="l00853"></a>00853       <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> == <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>)
<a name="l00854"></a>00854     {
<a name="l00855"></a>00855       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00856"></a>00856         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;The LSA is already in SPF&quot;</span>);
<a name="l00857"></a>00857       <span class="keywordflow">continue</span>;
<a name="l00858"></a>00858     }
<a name="l00859"></a>00859 
<a name="l00860"></a>00860       <span class="comment">/* (d) Calculate the link state cost D of the resulting path</span>
<a name="l00861"></a>00861 <span class="comment">         from the root to vertex W.  D is equal to the sum of the link</span>
<a name="l00862"></a>00862 <span class="comment">         state cost of the (already calculated) shortest path to</span>
<a name="l00863"></a>00863 <span class="comment">         vertex V and the advertised cost of the link between vertices</span>
<a name="l00864"></a>00864 <span class="comment">         V and W.  If D is: */</span>
<a name="l00865"></a>00865 
<a name="l00866"></a>00866       <span class="comment">/* calculate link cost D. */</span>
<a name="l00867"></a>00867       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
<a name="l00868"></a>00868     distance = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> + ntohs (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a>);
<a name="l00869"></a>00869       <span class="keywordflow">else</span> <span class="comment">/* v is not a Router-LSA */</span>
<a name="l00870"></a>00870     distance = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
<a name="l00871"></a>00871 
<a name="l00872"></a>00872       <span class="comment">/* Is there already vertex W in candidate list? */</span>
<a name="l00873"></a>00873       <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> == <a class="code" href="ospf__lsa_8h.html#a3e6d46b027ed03c318fdeae73c1fe73f">LSA_SPF_NOT_EXPLORED</a>)
<a name="l00874"></a>00874     {
<a name="l00875"></a>00875           <span class="comment">/* prepare vertex W. */</span>
<a name="l00876"></a>00876           w = <a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (w_lsa);
<a name="l00877"></a>00877 
<a name="l00878"></a>00878           <span class="comment">/* Calculate nexthop to W. */</span>
<a name="l00879"></a>00879           <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance))
<a name="l00880"></a>00880             <a class="code" href="pqueue_8c.html#af8c7960d1e3ce1edf2b78dfc4873d321">pqueue_enqueue</a> (w, candidate);
<a name="l00881"></a>00881           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00882"></a>00882             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Nexthop Calc failed&quot;</span>);
<a name="l00883"></a>00883     }
<a name="l00884"></a>00884       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> &gt;= 0)
<a name="l00885"></a>00885     {
<a name="l00886"></a>00886       <span class="comment">/* Get the vertex from candidates. */</span>
<a name="l00887"></a>00887       w = candidate-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>];
<a name="l00888"></a>00888 
<a name="l00889"></a>00889       <span class="comment">/* if D is greater than. */</span>  
<a name="l00890"></a>00890       <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> &lt; distance)
<a name="l00891"></a>00891             {
<a name="l00892"></a>00892               <span class="keywordflow">continue</span>;
<a name="l00893"></a>00893             }
<a name="l00894"></a>00894           <span class="comment">/* equal to. */</span>
<a name="l00895"></a>00895       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> == distance)
<a name="l00896"></a>00896             {
<a name="l00897"></a>00897           <span class="comment">/* Found an equal-cost path to W.  </span>
<a name="l00898"></a>00898 <span class="comment">               * Calculate nexthop of to W from V. */</span>
<a name="l00899"></a>00899               <a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance);
<a name="l00900"></a>00900             }
<a name="l00901"></a>00901            <span class="comment">/* less than. */</span>
<a name="l00902"></a>00902       <span class="keywordflow">else</span>
<a name="l00903"></a>00903             {
<a name="l00904"></a>00904               <span class="comment">/* Found a lower-cost path to W.</span>
<a name="l00905"></a>00905 <span class="comment">               * nexthop_calculation is conditional, if it finds</span>
<a name="l00906"></a>00906 <span class="comment">               * valid nexthop it will call spf_add_parents, which</span>
<a name="l00907"></a>00907 <span class="comment">               * will flush the old parents</span>
<a name="l00908"></a>00908 <span class="comment">               */</span>
<a name="l00909"></a>00909               <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance))
<a name="l00910"></a>00910                 <span class="comment">/* Decrease the key of the node in the heap.</span>
<a name="l00911"></a>00911 <span class="comment">                 * trickle-sort it up towards root, just in case this</span>
<a name="l00912"></a>00912 <span class="comment">                 * node should now be the new root due the cost change. </span>
<a name="l00913"></a>00913 <span class="comment">                 * (next pqueu_{de,en}queue will fully re-heap the queue).</span>
<a name="l00914"></a>00914 <span class="comment">                 */</span>
<a name="l00915"></a>00915                 <a class="code" href="pqueue_8c.html#ab8caec03e5beeef534a0dd7258a2abe5">trickle_up</a> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>, candidate);
<a name="l00916"></a>00916             }
<a name="l00917"></a>00917         } <span class="comment">/* end W is already on the candidate list */</span>
<a name="l00918"></a>00918     } <span class="comment">/* end loop over the links in V&#39;s LSA */</span>
<a name="l00919"></a>00919 }
<a name="l00920"></a>00920 
<a name="l00921"></a>00921 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00922"></a><a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">00922</a> <a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v, <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>)
<a name="l00923"></a>00923 {
<a name="l00924"></a>00924   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
<a name="l00925"></a>00925   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nnode;
<a name="l00926"></a>00926   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *<a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a>;
<a name="l00927"></a>00927 
<a name="l00928"></a>00928   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00929"></a>00929     {
<a name="l00930"></a>00930       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00931"></a>00931         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF Result: %d [R] %s&quot;</span>, i, inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00932"></a>00932     }
<a name="l00933"></a>00933   <span class="keywordflow">else</span>
<a name="l00934"></a>00934     {
<a name="l00935"></a>00935       <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *lsa = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00936"></a>00936       if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00937"></a>00937         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF Result: %d [N] %s/%d&quot;</span>, i, inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
<a name="l00938"></a>00938                    <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (lsa-&gt;<a class="code" href="structnetwork__lsa.html#a65a1f220899e8eb91f9b80a2f15d7d22">mask</a>));
<a name="l00939"></a>00939     }
<a name="l00940"></a>00940 
<a name="l00941"></a>00941   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00942"></a>00942     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, nnode, parent))
<a name="l00943"></a>00943       {
<a name="l00944"></a>00944         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot; nexthop %p %s %s&quot;</span>, 
<a name="l00945"></a>00945                     parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>,
<a name="l00946"></a>00946                     inet_ntoa (parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>),
<a name="l00947"></a>00947                     parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> ? <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>)
<a name="l00948"></a>00948                                         : <span class="stringliteral">&quot;NULL&quot;</span>);
<a name="l00949"></a>00949       }
<a name="l00950"></a>00950 
<a name="l00951"></a>00951   i++;
<a name="l00952"></a>00952 
<a name="l00953"></a>00953   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, v))
<a name="l00954"></a>00954     <a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (v, i);
<a name="l00955"></a>00955 }
<a name="l00956"></a>00956 
<a name="l00957"></a>00957 <span class="comment">/* Second stage of SPF calculation. */</span>
<a name="l00958"></a>00958 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00959"></a><a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">00959</a> <a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v,
<a name="l00960"></a>00960                         <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rt,
<a name="l00961"></a>00961                         <span class="keywordtype">int</span> parent_is_root)
<a name="l00962"></a>00962 {
<a name="l00963"></a>00963   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode, *cnnode;
<a name="l00964"></a>00964   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *child;
<a name="l00965"></a>00965 
<a name="l00966"></a>00966   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00967"></a>00967     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stub():processing stubs for area %s&quot;</span>,
<a name="l00968"></a>00968                inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l00969"></a>00969   <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l00970"></a>00970     {
<a name="l00971"></a>00971       u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00972"></a>00972       u_char *lim;
<a name="l00973"></a>00973       <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
<a name="l00974"></a>00974       <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rlsa;
<a name="l00975"></a>00975 
<a name="l00976"></a>00976       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00977"></a>00977         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stubs():processing router LSA, id: %s&quot;</span>,
<a name="l00978"></a>00978                    inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l00979"></a>00979       rlsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 
<a name="l00982"></a>00982       if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00983"></a>00983         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stubs(): we have %d links to process&quot;</span>,
<a name="l00984"></a>00984                    ntohs (rlsa-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>));
<a name="l00985"></a>00985       p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
<a name="l00986"></a>00986       lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00987"></a>00987 
<a name="l00988"></a>00988       <span class="keywordflow">while</span> (p &lt; lim)
<a name="l00989"></a>00989         {
<a name="l00990"></a>00990           l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;
<a name="l00991"></a>00991 
<a name="l00992"></a>00992           p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
<a name="l00993"></a>00993                 (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));
<a name="l00994"></a>00994 
<a name="l00995"></a>00995           <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>)
<a name="l00996"></a>00996             <a class="code" href="ospf__route_8c.html#ae57967d6e78f08454bec423455f89048">ospf_intra_add_stub</a> (rt, l, v, area, parent_is_root);
<a name="l00997"></a>00997         }
<a name="l00998"></a>00998     }
<a name="l00999"></a>00999 
<a name="l01000"></a>01000   <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;ospf_process_stubs(): after examining links: &quot;</span>, v, 1, 1);
<a name="l01001"></a>01001 
<a name="l01002"></a>01002   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, cnnode, child))
<a name="l01003"></a>01003     {
<a name="l01004"></a>01004       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (child-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>, <a class="code" href="ospf__spf_8h.html#a00ab4c1bac6131947aec6bd7e27178ff">OSPF_VERTEX_PROCESSED</a>))
<a name="l01005"></a>01005         <span class="keywordflow">continue</span>;
<a name="l01006"></a>01006       
<a name="l01007"></a>01007       <span class="comment">/* the first level of routers connected to the root</span>
<a name="l01008"></a>01008 <span class="comment">       * should have &#39;parent_is_root&#39; set, including those </span>
<a name="l01009"></a>01009 <span class="comment">       * connected via a network vertex.</span>
<a name="l01010"></a>01010 <span class="comment">       */</span>
<a name="l01011"></a>01011       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a> == v)
<a name="l01012"></a>01012         parent_is_root = 1;
<a name="l01013"></a>01013       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l01014"></a>01014         parent_is_root = 0;
<a name="l01015"></a>01015         
<a name="l01016"></a>01016       <a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (area, child, rt, parent_is_root);
<a name="l01017"></a>01017 
<a name="l01018"></a>01018       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (child-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>, <a class="code" href="ospf__spf_8h.html#a00ab4c1bac6131947aec6bd7e27178ff">OSPF_VERTEX_PROCESSED</a>);
<a name="l01019"></a>01019     }
<a name="l01020"></a>01020 }
<a name="l01021"></a>01021 
<a name="l01022"></a>01022 <span class="keywordtype">void</span>
<a name="l01023"></a><a class="code" href="ospf__spf_8h.html#a66b02dd322844e1878bd15a908209f96">01023</a> <a class="code" href="ospf__spf_8c.html#a5861f43a374234df3d96fc31e6697387">ospf_rtrs_free</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rtrs)
<a name="l01024"></a>01024 {
<a name="l01025"></a>01025   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01026"></a>01026   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *or_list;
<a name="l01027"></a>01027   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l01028"></a>01028   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01029"></a>01029 
<a name="l01030"></a>01030   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01031"></a>01031     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route: Router Routing Table free&quot;</span>);
<a name="l01032"></a>01032 
<a name="l01033"></a>01033   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l01034"></a>01034     <span class="keywordflow">if</span> ((or_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01035"></a>01035       {
<a name="l01036"></a>01036         <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (or_list, node, nnode, or))
<a name="l01037"></a>01037           <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);
<a name="l01038"></a>01038 
<a name="l01039"></a>01039         <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (or_list);
<a name="l01040"></a>01040 
<a name="l01041"></a>01041         <span class="comment">/* Unlock the node. */</span>
<a name="l01042"></a>01042         rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01043"></a>01043         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01044"></a>01044       }
<a name="l01045"></a>01045   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (rtrs);
<a name="l01046"></a>01046 }
<a name="l01047"></a>01047 
<a name="l01048"></a>01048 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01049"></a><a class="code" href="ospf__spf_8c.html#a7126d2afe3964cc82e545f0bb4a336ca">01049</a> <a class="code" href="ospf__spf_8c.html#a7126d2afe3964cc82e545f0bb4a336ca">ospf_rtrs_print</a> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *rtrs)
<a name="l01050"></a>01050 {
<a name="l01051"></a>01051   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01052"></a>01052   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *or_list;
<a name="l01053"></a>01053   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln;
<a name="l01054"></a>01054   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *pnode;
<a name="l01055"></a>01055   <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
<a name="l01056"></a>01056   <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
<a name="l01057"></a>01057   <span class="keywordtype">char</span> buf1[BUFSIZ];
<a name="l01058"></a>01058   <span class="keywordtype">char</span> buf2[BUFSIZ];
<a name="l01059"></a>01059 
<a name="l01060"></a>01060   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01061"></a>01061     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_rtrs_print() start&quot;</span>);
<a name="l01062"></a>01062 
<a name="l01063"></a>01063   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l01064"></a>01064     <span class="keywordflow">if</span> ((or_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01065"></a>01065       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or_list, ln, or))
<a name="l01066"></a>01066         {
<a name="l01067"></a>01067           <span class="keywordflow">switch</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)
<a name="l01068"></a>01068             {
<a name="l01069"></a>01069             <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>:
<a name="l01070"></a>01070               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01071"></a>01071                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s   [%d] area: %s&quot;</span>,
<a name="l01072"></a>01072                            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>, buf1, BUFSIZ),
<a name="l01073"></a>01073                            or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>,
<a name="l01074"></a>01074                                                 buf2, BUFSIZ));
<a name="l01075"></a>01075               <span class="keywordflow">break</span>;
<a name="l01076"></a>01076             <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>:
<a name="l01077"></a>01077               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01078"></a>01078                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s IA [%d] area: %s&quot;</span>,
<a name="l01079"></a>01079                            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>, buf1, BUFSIZ),
<a name="l01080"></a>01080                            or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>,
<a name="l01081"></a>01081                                                 buf2, BUFSIZ));
<a name="l01082"></a>01082               <span class="keywordflow">break</span>;
<a name="l01083"></a>01083             <span class="keywordflow">default</span>:
<a name="l01084"></a>01084               <span class="keywordflow">break</span>;
<a name="l01085"></a>01085             }
<a name="l01086"></a>01086 
<a name="l01087"></a>01087           <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, pnode, path))
<a name="l01088"></a>01088             {
<a name="l01089"></a>01089               <span class="keywordflow">if</span> (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr == 0)
<a name="l01090"></a>01090                 {
<a name="l01091"></a>01091                   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01092"></a>01092                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   directly attached to %s\r\n&quot;</span>,
<a name="l01093"></a>01093                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a> (path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>));
<a name="l01094"></a>01094                 }
<a name="l01095"></a>01095               <span class="keywordflow">else</span>
<a name="l01096"></a>01096                 {
<a name="l01097"></a>01097                   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01098"></a>01098                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   via %s, %s\r\n&quot;</span>,
<a name="l01099"></a>01099                 inet_ntoa (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>),
<a name="l01100"></a>01100                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a> (path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>));
<a name="l01101"></a>01101                 }
<a name="l01102"></a>01102             }
<a name="l01103"></a>01103         }
<a name="l01104"></a>01104 
<a name="l01105"></a>01105   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_rtrs_print() end&quot;</span>);
<a name="l01106"></a>01106 }
<a name="l01107"></a>01107 
<a name="l01108"></a>01108 <span class="comment">/* Calculating the shortest-path tree for an area. */</span>
<a name="l01109"></a>01109 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01110"></a><a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">01110</a> <a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *new_table,
<a name="l01111"></a>01111                     <span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *new_rtrs)
<a name="l01112"></a>01112 {
<a name="l01113"></a>01113   <span class="keyword">struct </span><a class="code" href="structpqueue.html">pqueue</a> *candidate;
<a name="l01114"></a>01114   <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v;
<a name="l01115"></a>01115   
<a name="l01116"></a>01116   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01117"></a>01117     {
<a name="l01118"></a>01118       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: Start&quot;</span>);
<a name="l01119"></a>01119       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: running Dijkstra for area %s&quot;</span>,
<a name="l01120"></a>01120                  inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01121"></a>01121     }
<a name="l01122"></a>01122 
<a name="l01123"></a>01123   <span class="comment">/* Check router-lsa-self.  If self-router-lsa is not yet allocated,</span>
<a name="l01124"></a>01124 <span class="comment">     return this area&#39;s calculation. */</span>
<a name="l01125"></a>01125   <span class="keywordflow">if</span> (!area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>)
<a name="l01126"></a>01126     {
<a name="l01127"></a>01127       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01128"></a>01128         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: &quot;</span>
<a name="l01129"></a>01129                    <span class="stringliteral">&quot;Skip area %s&#39;s calculation due to empty router_lsa_self&quot;</span>,
<a name="l01130"></a>01130                    inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01131"></a>01131       <span class="keywordflow">return</span>;
<a name="l01132"></a>01132     }
<a name="l01133"></a>01133 
<a name="l01134"></a>01134   <span class="comment">/* RFC2328 16.1. (1). */</span>
<a name="l01135"></a>01135   <span class="comment">/* Initialize the algorithm&#39;s data structures. */</span>
<a name="l01136"></a>01136   
<a name="l01137"></a>01137   <span class="comment">/* This function scans all the LSA database and set the stat field to</span>
<a name="l01138"></a>01138 <span class="comment">   * LSA_SPF_NOT_EXPLORED. */</span>
<a name="l01139"></a>01139   <a class="code" href="ospf__lsdb_8c.html#a720ea0bd2265ad23981060a65decdd49">ospf_lsdb_clean_stat</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>);
<a name="l01140"></a>01140   <span class="comment">/* Create a new heap for the candidates. */</span> 
<a name="l01141"></a>01141   candidate = <a class="code" href="pqueue_8c.html#a2579024e6715cbdb92af477dcdd1bb31">pqueue_create</a>();
<a name="l01142"></a>01142   candidate-&gt;<a class="code" href="structpqueue.html#ab07da518da86aacef25a3b94404bec09">cmp</a> = <a class="code" href="ospf__spf_8c.html#aea544039058f177b3d5698fbaa84cfb0">cmp</a>;
<a name="l01143"></a>01143   candidate-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> = <a class="code" href="ospf__spf_8c.html#a7e106bb3265dae7fb42f6484bf208dbe">update_stat</a>;
<a name="l01144"></a>01144 
<a name="l01145"></a>01145   <span class="comment">/* Initialize the shortest-path tree to only the root (which is the</span>
<a name="l01146"></a>01146 <span class="comment">     router doing the calculation). */</span>
<a name="l01147"></a>01147   <a class="code" href="ospf__spf_8c.html#a5a606956341e2c6c29d662d36d626d06">ospf_spf_init</a> (area);
<a name="l01148"></a>01148   v = area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>;
<a name="l01149"></a>01149   <span class="comment">/* Set LSA position to LSA_SPF_IN_SPFTREE. This vertex is the root of the</span>
<a name="l01150"></a>01150 <span class="comment">   * spanning tree. */</span>
<a name="l01151"></a>01151   *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>;
<a name="l01152"></a>01152 
<a name="l01153"></a>01153   <span class="comment">/* Set Area A&#39;s TransitCapability to FALSE. */</span>
<a name="l01154"></a>01154   area-&gt;<a class="code" href="structospf__area.html#a2c84e7800bc78b5dbd66e75faf09350b">transit</a> = <a class="code" href="ospfd_8h.html#ad7cf7fce04199d045574d4cf511f3296">OSPF_TRANSIT_FALSE</a>;
<a name="l01155"></a>01155   area-&gt;<a class="code" href="structospf__area.html#a46f9caf873a09f0ebe364907b08639d2">shortcut_capability</a> = 1;
<a name="l01156"></a>01156   
<a name="l01157"></a>01157   <span class="keywordflow">for</span> (;;)
<a name="l01158"></a>01158     {
<a name="l01159"></a>01159       <span class="comment">/* RFC2328 16.1. (2). */</span>
<a name="l01160"></a>01160       <a class="code" href="ospf__spf_8c.html#abc11a92f3cd8b5f9a086362350c338fa">ospf_spf_next</a> (v, area, candidate);
<a name="l01161"></a>01161 
<a name="l01162"></a>01162       <span class="comment">/* RFC2328 16.1. (3). */</span>
<a name="l01163"></a>01163       <span class="comment">/* If at this step the candidate list is empty, the shortest-</span>
<a name="l01164"></a>01164 <span class="comment">         path tree (of transit vertices) has been completely built and</span>
<a name="l01165"></a>01165 <span class="comment">         this stage of the procedure terminates. */</span>
<a name="l01166"></a>01166       <span class="keywordflow">if</span> (candidate-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a> == 0)
<a name="l01167"></a>01167         <span class="keywordflow">break</span>;
<a name="l01168"></a>01168 
<a name="l01169"></a>01169       <span class="comment">/* Otherwise, choose the vertex belonging to the candidate list</span>
<a name="l01170"></a>01170 <span class="comment">         that is closest to the root, and add it to the shortest-path</span>
<a name="l01171"></a>01171 <span class="comment">         tree (removing it from the candidate list in the</span>
<a name="l01172"></a>01172 <span class="comment">         process). */</span>
<a name="l01173"></a>01173       <span class="comment">/* Extract from the candidates the node with the lower key. */</span>
<a name="l01174"></a>01174       v = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) <a class="code" href="pqueue_8c.html#a1c1a1203050a22dcd10966a857a26505">pqueue_dequeue</a> (candidate);
<a name="l01175"></a>01175       <span class="comment">/* Update stat field in vertex. */</span>
<a name="l01176"></a>01176       *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>;
<a name="l01177"></a>01177 
<a name="l01178"></a>01178       <a class="code" href="ospf__spf_8c.html#a1a532b38c2d329151809815e36a95c94">ospf_vertex_add_parent</a> (v);
<a name="l01179"></a>01179 
<a name="l01180"></a>01180       <span class="comment">/* RFC2328 16.1. (4). */</span>
<a name="l01181"></a>01181       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
<a name="l01182"></a>01182         <a class="code" href="ospf__route_8c.html#ae3f51a8346ea35a7a697c35db4c578c1">ospf_intra_add_router</a> (new_rtrs, v, area);
<a name="l01183"></a>01183       <span class="keywordflow">else</span>
<a name="l01184"></a>01184         <a class="code" href="ospf__route_8c.html#ac4b754a414528b3d20a477d821ed07dd">ospf_intra_add_transit</a> (new_table, v, area);
<a name="l01185"></a>01185 
<a name="l01186"></a>01186       <span class="comment">/* RFC2328 16.1. (5). */</span>
<a name="l01187"></a>01187       <span class="comment">/* Iterate the algorithm by returning to Step 2. */</span>
<a name="l01188"></a>01188 
<a name="l01189"></a>01189     } <span class="comment">/* end loop until no more candidate vertices */</span>
<a name="l01190"></a>01190 
<a name="l01191"></a>01191   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01192"></a>01192     {
<a name="l01193"></a>01193       <a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, 0);
<a name="l01194"></a>01194       <a class="code" href="ospf__route_8c.html#a9396efc189379cb3ebbd9948e2a3a46c">ospf_route_table_dump</a> (new_table);
<a name="l01195"></a>01195     }
<a name="l01196"></a>01196 
<a name="l01197"></a>01197   <span class="comment">/* Second stage of SPF calculation procedure&#39;s  */</span>
<a name="l01198"></a>01198   <a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (area, area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, new_table, 0);
<a name="l01199"></a>01199 
<a name="l01200"></a>01200   <span class="comment">/* Free candidate queue. */</span>
<a name="l01201"></a>01201   <a class="code" href="pqueue_8c.html#ad0099423e65490faf86a429bab2e7059">pqueue_delete</a> (candidate);
<a name="l01202"></a>01202   
<a name="l01203"></a>01203   <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a> (__func__, area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, 0, 1);
<a name="l01204"></a>01204   <span class="comment">/* Free nexthop information, canonical versions of which are attached</span>
<a name="l01205"></a>01205 <span class="comment">   * the first level of router vertices attached to the root vertex, see</span>
<a name="l01206"></a>01206 <span class="comment">   * ospf_nexthop_calculation.</span>
<a name="l01207"></a>01207 <span class="comment">   */</span>
<a name="l01208"></a>01208   <a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>);
<a name="l01209"></a>01209   
<a name="l01210"></a>01210   <span class="comment">/* Free SPF vertices, but not the list. List has ospf_vertex_free</span>
<a name="l01211"></a>01211 <span class="comment">   * as deconstructor.</span>
<a name="l01212"></a>01212 <span class="comment">   */</span>
<a name="l01213"></a>01213   <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (&amp;vertex_list);
<a name="l01214"></a>01214   
<a name="l01215"></a>01215   <span class="comment">/* Increment SPF Calculation Counter. */</span>
<a name="l01216"></a>01216   area-&gt;<a class="code" href="structospf__area.html#a67be77edde21cd34756ee2c0a990d8bb">spf_calculation</a>++;
<a name="l01217"></a>01217 
<a name="l01218"></a>01218   <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a736a40f4598cffc8238e1650a08b2ff9">ts_spf</a>);
<a name="l01219"></a>01219 
<a name="l01220"></a>01220   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01221"></a>01221     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: Stop. %ld vertices&quot;</span>,
<a name="l01222"></a>01222                 <a class="code" href="memory_8c.html#a8f242036e581a1a447b79199d9a130ba">mtype_stats_alloc</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>));
<a name="l01223"></a>01223 }
<a name="l01224"></a>01224 
<a name="l01225"></a>01225 <span class="comment">/* </span>
<a name="l01226"></a>01226 <span class="comment"> * 08/24/2011 yic+</span>
<a name="l01227"></a>01227 <span class="comment"> * returns 1 if route nodes are the same, 0 otherwise </span>
<a name="l01228"></a>01228 <span class="comment"> */</span>
<a name="l01229"></a><a class="code" href="ospf__spf_8c.html#a82280bfb6f11de00fb0295aee57b48e1">01229</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="ospf__spf_8c.html#a82280bfb6f11de00fb0295aee57b48e1">router_routing_table_same_node</a>(<span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *old_rn, <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *new_rn)
<a name="l01230"></a>01230 {
<a name="l01231"></a>01231     <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *old_rl, *new_rl;
<a name="l01232"></a>01232     <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *old_or, *new_or;
<a name="l01233"></a>01233     <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *old_op, *new_op;
<a name="l01234"></a>01234     <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1, *n2, *pn1, *pn2;
<a name="l01235"></a>01235 
<a name="l01236"></a>01236     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(old_rn &amp;&amp; old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l01237"></a>01237     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(new_rn &amp;&amp; new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l01238"></a>01238 
<a name="l01239"></a>01239     old_rl = old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01240"></a>01240     new_rl = new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01241"></a>01241 
<a name="l01242"></a>01242     <span class="keywordflow">if</span> (old_rl-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != new_rl-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
<a name="l01243"></a>01243         <span class="keywordflow">return</span> 0;
<a name="l01244"></a>01244 
<a name="l01245"></a>01245     <span class="keywordflow">for</span> (n1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(old_rl), n2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(new_rl);
<a name="l01246"></a>01246             n1 &amp;&amp; n2; n1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(n1), n2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(n2))
<a name="l01247"></a>01247     {
<a name="l01248"></a>01248         old_or = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(n1);
<a name="l01249"></a>01249         new_or = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(n2);
<a name="l01250"></a>01250 
<a name="l01251"></a>01251         <span class="keywordflow">if</span> (old_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != new_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
<a name="l01252"></a>01252             <span class="keywordflow">return</span> 0;
<a name="l01253"></a>01253 
<a name="l01254"></a>01254         <span class="keywordflow">for</span> (pn1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(old_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>), pn2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(new_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
<a name="l01255"></a>01255                 pn1 &amp;&amp; pn2; pn1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(pn1), pn2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(pn2))
<a name="l01256"></a>01256         { 
<a name="l01257"></a>01257             old_op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(pn1);
<a name="l01258"></a>01258             new_op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(pn2);
<a name="l01259"></a>01259 
<a name="l01260"></a>01260             <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;old_op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;new_op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
<a name="l01261"></a>01261                 <span class="keywordflow">return</span> 0;
<a name="l01262"></a>01262         }
<a name="l01263"></a>01263     }
<a name="l01264"></a>01264 
<a name="l01265"></a>01265     <span class="keywordflow">return</span> 1;
<a name="l01266"></a>01266 }
<a name="l01267"></a>01267 
<a name="l01268"></a>01268 <span class="comment">/*</span>
<a name="l01269"></a>01269 <span class="comment"> * 08/24/2011 yic+</span>
<a name="l01270"></a>01270 <span class="comment"> * detect next hop changes in router routing table, notify ospf client</span>
<a name="l01271"></a>01271 <span class="comment"> */</span>
<a name="l01272"></a><a class="code" href="ospf__spf_8c.html#a654b5180936ba11d471f99923eb50a95">01272</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ospf__spf_8c.html#a654b5180936ba11d471f99923eb50a95">get_router_routing_table_changes</a>(<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>)
<a name="l01273"></a>01273 {
<a name="l01274"></a>01274     <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *old_rtrs, *new_rtrs;
<a name="l01275"></a>01275     <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *old_rn, *new_rn;
<a name="l01276"></a>01276 
<a name="l01277"></a>01277     old_rtrs = ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>;
<a name="l01278"></a>01278     new_rtrs = ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>;
<a name="l01279"></a>01279 
<a name="l01280"></a>01280 
<a name="l01281"></a>01281     <span class="keywordflow">if</span> (old_rtrs) {
<a name="l01282"></a>01282         <span class="comment">/* get deleted or updated entries */</span>
<a name="l01283"></a>01283         <span class="keywordflow">for</span> (old_rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a>(old_rtrs); old_rn; old_rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a>(old_rn))
<a name="l01284"></a>01284         {
<a name="l01285"></a>01285             <span class="keywordflow">if</span> (old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01286"></a>01286             {
<a name="l01287"></a>01287                 <span class="comment">//lookup old prefix(router ID) in new router routing table</span>
<a name="l01288"></a>01288                 new_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a>(new_rtrs, &amp;old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l01289"></a>01289 
<a name="l01290"></a>01290                 <span class="comment">//prefix still exists in new router routing table</span>
<a name="l01291"></a>01291                 <span class="keywordflow">if</span> (new_rn &amp;&amp; new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01292"></a>01292                 {
<a name="l01293"></a>01293                     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(new_rn);
<a name="l01294"></a>01294 
<a name="l01295"></a>01295                     <span class="keywordflow">if</span> (!<a class="code" href="ospf__spf_8c.html#a82280bfb6f11de00fb0295aee57b48e1">router_routing_table_same_node</a>(old_rn, new_rn))
<a name="l01296"></a>01296                     {
<a name="l01297"></a>01297                         <span class="comment">//notify update</span>
<a name="l01298"></a>01298                         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s updated&quot;</span>, inet_ntoa(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l01299"></a>01299                         <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, new_rn);
<a name="l01300"></a>01300                     }
<a name="l01301"></a>01301                 }
<a name="l01302"></a>01302                 <span class="comment">//prefix not found: deleted from new router routing table</span>
<a name="l01303"></a>01303                 <span class="keywordflow">else</span>
<a name="l01304"></a>01304                 {
<a name="l01305"></a>01305                     <span class="comment">//notify delete</span>
<a name="l01306"></a>01306                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s deleted&quot;</span>, inet_ntoa(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l01307"></a>01307                     <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01308"></a>01308                 }
<a name="l01309"></a>01309             }
<a name="l01310"></a>01310         }
<a name="l01311"></a>01311 
<a name="l01312"></a>01312         <span class="comment">/* get new entries */</span>
<a name="l01313"></a>01313         <span class="keywordflow">for</span> (new_rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a>(new_rtrs); new_rn; new_rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a>(new_rn))
<a name="l01314"></a>01314         {
<a name="l01315"></a>01315             <span class="keywordflow">if</span> (new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01316"></a>01316             {
<a name="l01317"></a>01317                 <span class="comment">//lookup new prefix(router ID) in old router routing table</span>
<a name="l01318"></a>01318                 old_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a>(old_rtrs, &amp;new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);
<a name="l01319"></a>01319 
<a name="l01320"></a>01320                 <span class="comment">//prefix not found: new prefix</span>
<a name="l01321"></a>01321                 <span class="keywordflow">if</span> (!old_rn || !old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01322"></a>01322                 {
<a name="l01323"></a>01323                     <span class="comment">//notify add</span>
<a name="l01324"></a>01324                     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s added&quot;</span>, inet_ntoa(new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
<a name="l01325"></a>01325                     <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, new_rn);
<a name="l01326"></a>01326                 }
<a name="l01327"></a>01327                 <span class="keywordflow">else</span>
<a name="l01328"></a>01328                     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(old_rn);
<a name="l01329"></a>01329             }
<a name="l01330"></a>01330         }
<a name="l01331"></a>01331     }
<a name="l01332"></a>01332 }
<a name="l01333"></a>01333 
<a name="l01334"></a>01334 
<a name="l01335"></a>01335 <span class="comment">/* Timer for SPF calculation. */</span>
<a name="l01336"></a>01336 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01337"></a><a class="code" href="ospf__spf_8c.html#a9fc4f69e7687f05c00c99b7b4c32309e">01337</a> <a class="code" href="ospf__spf_8c.html#a9fc4f69e7687f05c00c99b7b4c32309e">ospf_spf_calculate_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01338"></a>01338 {
<a name="l01339"></a>01339   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l01340"></a>01340   <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *new_table, *new_rtrs;
<a name="l01341"></a>01341   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01342"></a>01342   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01343"></a>01343 
<a name="l01344"></a>01344   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01345"></a>01345     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: Timer (SPF calculation expire)&quot;</span>);
<a name="l01346"></a>01346 
<a name="l01347"></a>01347   ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01348"></a>01348 
<a name="l01349"></a>01349   <span class="comment">/* Allocate new table tree. */</span>
<a name="l01350"></a>01350   new_table = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l01351"></a>01351   new_rtrs = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l01352"></a>01352 
<a name="l01353"></a>01353   <a class="code" href="ospf__interface_8c.html#af796502c793492cfea95fc844a1fc9ec">ospf_vl_unapprove</a> (ospf);
<a name="l01354"></a>01354 
<a name="l01355"></a>01355   <span class="comment">/* Calculate SPF for each area. */</span>
<a name="l01356"></a>01356   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
<a name="l01357"></a>01357     {
<a name="l01358"></a>01358       <span class="comment">/* Do backbone last, so as to first discover intra-area paths</span>
<a name="l01359"></a>01359 <span class="comment">       * for any back-bone virtual-links</span>
<a name="l01360"></a>01360 <span class="comment">       */</span>
<a name="l01361"></a>01361       <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a> &amp;&amp; ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a> == area)
<a name="l01362"></a>01362         <span class="keywordflow">continue</span>;
<a name="l01363"></a>01363       
<a name="l01364"></a>01364       <a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (area, new_table, new_rtrs);
<a name="l01365"></a>01365     }
<a name="l01366"></a>01366   
<a name="l01367"></a>01367   <span class="comment">/* SPF for backbone, if required */</span>
<a name="l01368"></a>01368   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>)
<a name="l01369"></a>01369     <a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>, new_table, new_rtrs);
<a name="l01370"></a>01370   
<a name="l01371"></a>01371   <a class="code" href="ospf__interface_8c.html#ab511d3358207a7a075edbdf2492000ce">ospf_vl_shut_unapproved</a> (ospf);
<a name="l01372"></a>01372 
<a name="l01373"></a>01373   <a class="code" href="ospf__ia_8c.html#ae97c055c52bf0ea6a36fc5bec82e33b8">ospf_ia_routing</a> (ospf, new_table, new_rtrs);
<a name="l01374"></a>01374 
<a name="l01375"></a>01375   <a class="code" href="ospf__route_8c.html#a664b20a2a9ead67d9c8daf9194e971c2">ospf_prune_unreachable_networks</a> (new_table);
<a name="l01376"></a>01376   <a class="code" href="ospf__route_8c.html#a8a234f1fccc982181a97e59ce18e62a7">ospf_prune_unreachable_routers</a> (new_rtrs);
<a name="l01377"></a>01377 
<a name="l01378"></a>01378   <span class="comment">/* AS-external-LSA calculation should not be performed here. */</span>
<a name="l01379"></a>01379 
<a name="l01380"></a>01380   <span class="comment">/* If new Router Route is installed,</span>
<a name="l01381"></a>01381 <span class="comment">     then schedule re-calculate External routes. */</span>
<a name="l01382"></a>01382   <span class="keywordflow">if</span> (1)
<a name="l01383"></a>01383     <a class="code" href="ospf__ase_8c.html#a8e097f55230eec4539a22f5eda781d90">ospf_ase_calculate_schedule</a> (ospf);
<a name="l01384"></a>01384 
<a name="l01385"></a>01385   <a class="code" href="ospf__ase_8c.html#a1a8e03352bf6bfefef4dbc963822a8e6">ospf_ase_calculate_timer_add</a> (ospf);
<a name="l01386"></a>01386 
<a name="l01387"></a>01387   <span class="comment">/* Update routing table. */</span>
<a name="l01388"></a>01388   <a class="code" href="ospf__route_8c.html#a92f9b15b23de4eb92b0d2afa5bb65664">ospf_route_install</a> (ospf, new_table);
<a name="l01389"></a>01389 
<a name="l01390"></a>01390   <span class="comment">/* Update ABR/ASBR routing table */</span>
<a name="l01391"></a>01391   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>)
<a name="l01392"></a>01392     {
<a name="l01393"></a>01393       <span class="comment">/* old_rtrs&#39;s node holds linked list of ospf_route. --kunihiro. */</span>
<a name="l01394"></a>01394       <span class="comment">/* ospf_route_delete (ospf-&gt;old_rtrs); */</span>
<a name="l01395"></a>01395       <a class="code" href="ospf__spf_8c.html#a5861f43a374234df3d96fc31e6697387">ospf_rtrs_free</a> (ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>);
<a name="l01396"></a>01396     }
<a name="l01397"></a>01397 
<a name="l01398"></a>01398   ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a> = ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>;
<a name="l01399"></a>01399   ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a> = new_rtrs;
<a name="l01400"></a>01400 
<a name="l01401"></a>01401     <span class="comment">/* 08/13/2011 yic +3 */</span>
<a name="l01402"></a>01402 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l01403"></a>01403 <span class="preprocessor"></span>    <a class="code" href="ospf__spf_8c.html#a654b5180936ba11d471f99923eb50a95">get_router_routing_table_changes</a>(ospf);
<a name="l01404"></a>01404 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l01405"></a>01405 
<a name="l01406"></a>01406   <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (ospf))
<a name="l01407"></a>01407     <a class="code" href="ospf__abr_8c.html#a6542439707b08efb93c2cc58103b92cc">ospf_abr_task</a> (ospf);
<a name="l01408"></a>01408 
<a name="l01409"></a>01409   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01410"></a>01410     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation complete&quot;</span>);
<a name="l01411"></a>01411 
<a name="l01412"></a>01412   <span class="keywordflow">return</span> 0;
<a name="l01413"></a>01413 }
<a name="l01414"></a>01414 
<a name="l01415"></a>01415 <span class="comment">/* Add schedule for SPF calculation.  To avoid frequenst SPF calc, we</span>
<a name="l01416"></a>01416 <span class="comment">   set timer for SPF calc. */</span>
<a name="l01417"></a>01417 <span class="keywordtype">void</span>
<a name="l01418"></a><a class="code" href="ospf__spf_8h.html#ac9e6c5c9930c5b2eaf08a2af571e961a">01418</a> <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>)
<a name="l01419"></a>01419 {
<a name="l01420"></a>01420   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delay, elapsed, ht;
<a name="l01421"></a>01421   <span class="keyword">struct </span>timeval result;
<a name="l01422"></a>01422 
<a name="l01423"></a>01423   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01424"></a>01424     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer scheduled&quot;</span>);
<a name="l01425"></a>01425 
<a name="l01426"></a>01426   <span class="comment">/* OSPF instance does not exist. */</span>
<a name="l01427"></a>01427   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01428"></a>01428     <span class="keywordflow">return</span>;
<a name="l01429"></a>01429   
<a name="l01430"></a>01430   <span class="comment">/* SPF calculation timer is already scheduled. */</span>
<a name="l01431"></a>01431   <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a>)
<a name="l01432"></a>01432     {
<a name="l01433"></a>01433       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01434"></a>01434         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer is already scheduled: %p&quot;</span>,
<a name="l01435"></a>01435                    ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a>);
<a name="l01436"></a>01436       <span class="keywordflow">return</span>;
<a name="l01437"></a>01437     }
<a name="l01438"></a>01438   
<a name="l01439"></a>01439   <span class="comment">/* XXX Monotic timers: we only care about relative time here. */</span>
<a name="l01440"></a>01440   result = <a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), ospf-&gt;<a class="code" href="structospf.html#a736a40f4598cffc8238e1650a08b2ff9">ts_spf</a>);
<a name="l01441"></a>01441   
<a name="l01442"></a>01442   elapsed = (result.tv_sec * 1000) + (result.tv_usec / 1000);
<a name="l01443"></a>01443   ht = ospf-&gt;<a class="code" href="structospf.html#aa971ad725002ed2b0086e3fff01773af">spf_holdtime</a> * ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a>;
<a name="l01444"></a>01444   
<a name="l01445"></a>01445   <span class="keywordflow">if</span> (ht &gt; ospf-&gt;<a class="code" href="structospf.html#a684befebc44a8a5012dc713a79fa4c44">spf_max_holdtime</a>)
<a name="l01446"></a>01446     ht = ospf-&gt;<a class="code" href="structospf.html#a684befebc44a8a5012dc713a79fa4c44">spf_max_holdtime</a>;
<a name="l01447"></a>01447   
<a name="l01448"></a>01448   <span class="comment">/* Get SPF calculation delay time. */</span>
<a name="l01449"></a>01449   <span class="keywordflow">if</span> (elapsed &lt; ht)
<a name="l01450"></a>01450     {
<a name="l01451"></a>01451       <span class="comment">/* Got an event within the hold time of last SPF. We need to</span>
<a name="l01452"></a>01452 <span class="comment">       * increase the hold_multiplier, if it&#39;s not already at/past</span>
<a name="l01453"></a>01453 <span class="comment">       * maximum value, and wasn&#39;t already increased..</span>
<a name="l01454"></a>01454 <span class="comment">       */</span>
<a name="l01455"></a>01455       <span class="keywordflow">if</span> (ht &lt; ospf-&gt;spf_max_holdtime)
<a name="l01456"></a>01456         ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a>++;
<a name="l01457"></a>01457       
<a name="l01458"></a>01458       <span class="comment">/* always honour the SPF initial delay */</span>
<a name="l01459"></a>01459       <span class="keywordflow">if</span> ( (ht - elapsed) &lt; ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>)
<a name="l01460"></a>01460         delay = ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>;
<a name="l01461"></a>01461       <span class="keywordflow">else</span>
<a name="l01462"></a>01462         delay = ht - elapsed;
<a name="l01463"></a>01463     }
<a name="l01464"></a>01464   <span class="keywordflow">else</span>
<a name="l01465"></a>01465     {
<a name="l01466"></a>01466       <span class="comment">/* Event is past required hold-time of last SPF */</span>
<a name="l01467"></a>01467       delay = ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>;
<a name="l01468"></a>01468       ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a> = 1;
<a name="l01469"></a>01469     }
<a name="l01470"></a>01470   
<a name="l01471"></a>01471   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01472"></a>01472     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer delay = %ld&quot;</span>, delay);
<a name="l01473"></a>01473 
<a name="l01474"></a>01474   ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a> =
<a name="l01475"></a>01475     <a class="code" href="thread_8h.html#a9231be4b08f04f6ebc1bea080443ba74">thread_add_timer_msec</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__spf_8c.html#a9fc4f69e7687f05c00c99b7b4c32309e">ospf_spf_calculate_timer</a>, ospf, delay);
<a name="l01476"></a>01476 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__spf_8c.html">ospf_spf.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
