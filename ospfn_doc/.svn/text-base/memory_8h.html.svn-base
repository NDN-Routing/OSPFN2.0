<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/memory.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('memory_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">lib/memory.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="memtypes_8h_source.html">lib/memtypes.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for memory.h:</div>
<div class="dyncontent">
<div class="center"><img src="memory_8h__incl.png" border="0" usemap="#lib_2memory_8h" alt=""/></div>
<map name="lib_2memory_8h" id="lib_2memory_8h">
<area shape="rect" id="node3" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="5,80,120,107"/></map>
</div>
</div>
<p><a href="memory_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmemory__list.html">memory_list</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmlist.html">mlist</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a>(mtype, size)&#160;&#160;&#160;zmalloc ((mtype), (size))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a>(mtype, size)&#160;&#160;&#160;zcalloc ((mtype), (size))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a>(mtype, ptr, size)&#160;&#160;&#160;zrealloc ((mtype), (ptr), (size))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(mtype, ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a>(mtype, <a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)&#160;&#160;&#160;zstrdup ((mtype), (<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>&#160;&#160;&#160;20</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ae9ef273b7d106df41a60841b39fa05ed">zmalloc</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a073aba15d97cebfdb6f92bc72e82ad8d">zcalloc</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#af1da103c3db99ab17c5cbf524d83ce85">zrealloc</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *ptr, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ac383faa9d2f7922fd0140725ec1ec231">zfree</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ae1cf7d80fe0331451c22a9227525c82c">zstrdup</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a1669707dff7c686d7a03716a50b7665d">mtype_zmalloc</a> (const char *file, int line, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ac1323396c8d1aa2bd9eb71cbd8d6e659">mtype_zcalloc</a> (const char *file, int line, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a86c386976d00dcd4c08826cde3cd0bd2">mtype_zrealloc</a> (const char *file, int line, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *ptr, size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#aa5dd6a3b0f02d62fc62acde85bb4d1e3">mtype_zfree</a> (const char *file, int line, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ab67c1b6120c30a3f3fd0769c7ded870f">mtype_zstrdup</a> (const char *file, int line, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a34f25b1ca1556d0890274a971d46af10">memory_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ab5e08c9af79cb32285fd8ac6e52ffa2c">log_memstats_stderr</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a3ac17d2c59b3dbd0f140033d5ace467f">mtype_stats_alloc</a> (int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#a4ec69871f9e3020752d61b275e0c33cf">mtype_memstr</a> (char *, size_t, unsigned long)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structmlist.html">mlist</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a> []</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a1b8329be4ab9837147ad7f6d37194045"></a><!-- doxytag: member="memory.h::MTYPE_MEMSTR_LEN" ref="a1b8329be4ab9837147ad7f6d37194045" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MTYPE_MEMSTR_LEN&#160;&#160;&#160;20</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8h_source.html#l00092">92</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7826e4ed1d152cad0666dcf43f11f663"></a><!-- doxytag: member="memory.h::XCALLOC" ref="a7826e4ed1d152cad0666dcf43f11f663" args="(mtype, size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XCALLOC</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">mtype, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;zcalloc ((mtype), (size))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8h_source.html#l00057">57</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<a class="anchor" id="a29f1ce2c850a3163cd6b1b0bd460705d"></a><!-- doxytag: member="memory.h::XFREE" ref="a29f1ce2c850a3163cd6b1b0bd460705d" args="(mtype, ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XFREE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">mtype, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> { \
                                     zfree ((mtype), (ptr)); \
                                     ptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; } \
                                   while (0)
</pre></div>
<p>Definition at line <a class="el" href="memory_8h_source.html#l00059">59</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6491adf46c1d769b529a8f2f7d75f2fe"></a><!-- doxytag: member="memory.h::XMALLOC" ref="a6491adf46c1d769b529a8f2f7d75f2fe" args="(mtype, size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XMALLOC</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">mtype, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;zmalloc ((mtype), (size))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8h_source.html#l00056">56</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad9ab7c99da79ca966328c35e9185cc57"></a><!-- doxytag: member="memory.h::XREALLOC" ref="ad9ab7c99da79ca966328c35e9185cc57" args="(mtype, ptr, size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XREALLOC</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">mtype, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">ptr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;zrealloc ((mtype), (ptr), (size))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8h_source.html#l00058">58</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa7c561b5824edc16351f22b8df155c0e"></a><!-- doxytag: member="memory.h::XSTRDUP" ref="aa7c561b5824edc16351f22b8df155c0e" args="(mtype, str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XSTRDUP</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">mtype, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;zstrdup ((mtype), (<a class="el" href="ripng__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8h_source.html#l00063">63</a> of file <a class="el" href="memory_8h_source.html">memory.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ab5e08c9af79cb32285fd8ac6e52ffa2c"></a><!-- doxytag: member="memory.h::log_memstats_stderr" ref="ab5e08c9af79cb32285fd8ac6e52ffa2c" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void log_memstats_stderr </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00257">257</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> *ml;
  <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a> = 0;

  <span class="keywordflow">for</span> (ml = mlists; ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; ml++)
    {
      i = 0;

      <span class="keywordflow">for</span> (m = ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &gt;= 0; m++)
        <span class="keywordflow">if</span> (m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &amp;&amp; <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc)
          {
            <span class="keywordflow">if</span> (!i)
              fprintf (stderr,
                       <span class="stringliteral">&quot;%s: memstats: Current memory utilization in module %s:\n&quot;</span>,
                       <a class="code" href="structprefix.html">prefix</a>,
                       ml-&gt;<a class="code" href="structmlist.html#a0228a09dd67fb303f0731f67e02f1910">name</a>);
            fprintf (stderr,
                     <span class="stringliteral">&quot;%s: memstats:  %-30s: %10ld%s\n&quot;</span>,
                     <a class="code" href="structprefix.html">prefix</a>,
                     m-&gt;<a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">format</a>,
                     <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc,
                     <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc &lt; 0 ? <span class="stringliteral">&quot; (REPORT THIS BUG!)&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
            i = j = 1;
          }
    }

  <span class="keywordflow">if</span> (j)
    fprintf (stderr,
             <span class="stringliteral">&quot;%s: memstats: NOTE: If configuration exists, utilization may be &quot;</span>
             <span class="stringliteral">&quot;expected.\n&quot;</span>,
             <a class="code" href="structprefix.html">prefix</a>);
  <span class="keywordflow">else</span>
    fprintf (stderr,
             <span class="stringliteral">&quot;%s: memstats: No remaining tracked memory utilization.\n&quot;</span>,
             <a class="code" href="structprefix.html">prefix</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a34f25b1ca1556d0890274a971d46af10"></a><!-- doxytag: member="memory.h::memory_init" ref="a34f25b1ca1556d0890274a971d46af10" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void memory_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00486">486</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_all_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_lib_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_bgp_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ospf_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ospf6_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_isis_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_all_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_lib_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_bgp_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ospf_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ospf6_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_isis_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_all_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_lib_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_zebra_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_bgp_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ospf_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ospf6_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_isis_cmd);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4ec69871f9e3020752d61b275e0c33cf"></a><!-- doxytag: member="memory.h::mtype_memstr" ref="a4ec69871f9e3020752d61b275e0c33cf" args="(char *, size_t, unsigned long)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* mtype_memstr </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>long</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00529">529</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>, <a class="code" href="bgp__route_8c.html#a7ffdcd98fe58cb9d89e7f6aa804288e1">g</a>, <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, <a class="code" href="spgrid_8c.html#a166d56cfd4c4c4d27db0bd3cd0fe81d9">k</a>;
  
  <span class="comment">/* easy cases */</span>
  <span class="keywordflow">if</span> (!bytes)
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;0 bytes&quot;</span>;
  <span class="keywordflow">if</span> (bytes == 1)
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;1 byte&quot;</span>;
    
  <span class="keywordflow">if</span> (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) &gt;= 8)
    <span class="comment">/* Hacked to make it not warn on ILP32 machines</span>
<span class="comment">     * Shift will always be 40 at runtime. See below too */</span>
    t = bytes &gt;&gt; (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> long) &gt;= 8 ? 40 : 0);
  <span class="keywordflow">else</span>
    t = 0;
  g = bytes &gt;&gt; 30;
  m = bytes &gt;&gt; 20;
  k = bytes &gt;&gt; 10;
  
  <span class="keywordflow">if</span> (t &gt; 10)
    {
      <span class="comment">/* The shift will always be 39 at runtime.</span>
<span class="comment">       * Just hacked to make it not warn on &#39;smaller&#39; machines. </span>
<span class="comment">       * Static compiler analysis should mean no extra code</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (bytes &amp; (1UL &lt;&lt; (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) &gt;= 8 ? 39 : 0)))
        t++;
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%4d TiB&quot;</span>, t);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (g &gt; 10)
    {
      <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 29))
        g++;
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d GiB&quot;</span>, g);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m &gt; 10)
    {
      <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 19))
        m++;
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d MiB&quot;</span>, m);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (k &gt; 10)
    {
      <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 9))
        k++;
      <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d KiB&quot;</span>, k);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%ld bytes&quot;</span>, bytes);
  
  <span class="keywordflow">return</span> buf;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ac17d2c59b3dbd0f140033d5ace467f"></a><!-- doxytag: member="memory.h::mtype_stats_alloc" ref="a3ac17d2c59b3dbd0f140033d5ace467f" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long mtype_stats_alloc </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00584">584</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].alloc;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac1323396c8d1aa2bd9eb71cbd8d6e659"></a><!-- doxytag: member="memory.h::mtype_zcalloc" ref="ac1323396c8d1aa2bd9eb71cbd8d6e659" args="(const char *file, int line, int type, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* mtype_zcalloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa5dd6a3b0f02d62fc62acde85bb4d1e3"></a><!-- doxytag: member="memory.h::mtype_zfree" ref="aa5dd6a3b0f02d62fc62acde85bb4d1e3" args="(const char *file, int line, int type, void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mtype_zfree </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1669707dff7c686d7a03716a50b7665d"></a><!-- doxytag: member="memory.h::mtype_zmalloc" ref="a1669707dff7c686d7a03716a50b7665d" args="(const char *file, int line, int type, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* mtype_zmalloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a86c386976d00dcd4c08826cde3cd0bd2"></a><!-- doxytag: member="memory.h::mtype_zrealloc" ref="a86c386976d00dcd4c08826cde3cd0bd2" args="(const char *file, int line, int type, void *ptr, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* mtype_zrealloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab67c1b6120c30a3f3fd0769c7ded870f"></a><!-- doxytag: member="memory.h::mtype_zstrdup" ref="ab67c1b6120c30a3f3fd0769c7ded870f" args="(const char *file, int line, int type, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* mtype_zstrdup </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a073aba15d97cebfdb6f92bc72e82ad8d"></a><!-- doxytag: member="memory.h::zcalloc" ref="a073aba15d97cebfdb6f92bc72e82ad8d" args="(int type, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* zcalloc </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00079">79</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;

  memory = calloc (1, size);

  <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    zerror (<span class="stringliteral">&quot;calloc&quot;</span>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, size);

  <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac383faa9d2f7922fd0140725ec1ec231"></a><!-- doxytag: member="memory.h::zfree" ref="ac383faa9d2f7922fd0140725ec1ec231" args="(int type, void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void zfree </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00107">107</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8c.html#a1d8857f6747de5e55a3a2612867955be">alloc_dec</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
  free (ptr);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae9ef273b7d106df41a60841b39fa05ed"></a><!-- doxytag: member="memory.h::zmalloc" ref="ae9ef273b7d106df41a60841b39fa05ed" args="(int type, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* zmalloc </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00063">63</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;

  memory = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (size);

  <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    zerror (<span class="stringliteral">&quot;malloc&quot;</span>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, size);

  <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1da103c3db99ab17c5cbf524d83ce85"></a><!-- doxytag: member="memory.h::zrealloc" ref="af1da103c3db99ab17c5cbf524d83ce85" args="(int type, void *ptr, size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* zrealloc </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00095">95</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;

  memory = <a class="code" href="regex_8c.html#a3d4d6185d412b00bc3def2b58b2898cc">realloc</a> (ptr, size);
  <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    zerror (<span class="stringliteral">&quot;realloc&quot;</span>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, size);
  <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1cf7d80fe0331451c22a9227525c82c"></a><!-- doxytag: member="memory.h::zstrdup" ref="ae1cf7d80fe0331451c22a9227525c82c" args="(int type, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* zstrdup </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="memory_8c_source.html#l00115">115</a> of file <a class="el" href="memory_8c_source.html">memory.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">void</span> *dup;

  dup = strdup (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>);
  <span class="keywordflow">if</span> (dup == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    zerror (<span class="stringliteral">&quot;strdup&quot;</span>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, strlen (<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>));
  <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
  <span class="keywordflow">return</span> dup;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="ad8486c18ebccfc422dff41b65019c764"></a><!-- doxytag: member="memory.h::mlists" ref="ad8486c18ebccfc422dff41b65019c764" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmlist.html">mlist</a> <a class="el" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a>[]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="memory_8h.html">memory.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:22 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
