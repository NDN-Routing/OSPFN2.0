<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_spf.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__spf_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_spf.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="pqueue_8h_source.html">pqueue.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__interface_8h_source.html">ospfd/ospf_interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ism_8h_source.html">ospfd/ospf_ism.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsdb_8h_source.html">ospfd/ospf_lsdb.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__neighbor_8h_source.html">ospfd/ospf_neighbor.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__nsm_8h_source.html">ospfd/ospf_nsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__spf_8h_source.html">ospfd/ospf_spf.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__route_8h_source.html">ospfd/ospf_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ia_8h_source.html">ospfd/ospf_ia.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ase_8h_source.html">ospfd/ospf_ase.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__abr_8h_source.html">ospfd/ospf_abr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospf_spf.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__spf_8c__incl.png" border="0" usemap="#ospfd_2ospf__spf_8c" alt=""/></div>
<map name="ospfd_2ospf__spf_8c" id="ospfd_2ospf__spf_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1137,155,1204,181"/><area shape="rect" id="node53" href="thread_8h.html" title="thread.h" alt="" coords="661,80,733,107"/><area shape="rect" id="node55" href="memory_8h.html" title="memory.h" alt="" coords="757,80,840,107"/><area shape="rect" id="node57" href="hash_8h.html" title="hash.h" alt="" coords="864,80,925,107"/><area shape="rect" id="node59" href="linklist_8h.html" title="linklist.h" alt="" coords="737,155,807,181"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="1065,80,1132,107"/><area shape="rect" id="node63" href="sockunion_8h.html" title="sockunion.h" alt="" coords="1000,155,1093,181"/><area shape="rect" id="node65" href="if_8h.html" title="if.h" alt="" coords="949,80,989,107"/><area shape="rect" id="node68" href="table_8h.html" title="table.h" alt="" coords="1208,80,1272,107"/><area shape="rect" id="node70" href="log_8h.html" title="log.h" alt="" coords="1518,155,1569,181"/><area shape="rect" id="node74" href="pqueue_8h.html" title="pqueue.h" alt="" coords="1427,80,1505,107"/><area shape="rect" id="node76" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="1296,80,1403,107"/><area shape="rect" id="node80" href="ospf__interface_8h.html" title="ospfd/ospf_interface.h" alt="" coords="1633,80,1791,107"/><area shape="rect" id="node82" href="ospf__spf_8h.html" title="ospfd/ospf_spf.h" alt="" coords="1622,155,1745,181"/><area shape="rect" id="node84" href="ospf__ism_8h.html" title="ospfd/ospf_ism.h" alt="" coords="1815,80,1941,107"/><area shape="rect" id="node86" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="1967,80,2097,107"/><area shape="rect" id="node88" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="2121,80,2244,107"/><area shape="rect" id="node90" href="ospf__lsdb_8h.html" title="ospfd/ospf_lsdb.h" alt="" coords="2268,80,2399,107"/><area shape="rect" id="node92" href="ospf__neighbor_8h.html" title="ospfd/ospf_neighbor.h" alt="" coords="2423,80,2581,107"/><area shape="rect" id="node94" href="ospf__nsm_8h.html" title="ospfd/ospf_nsm.h" alt="" coords="2607,80,2737,107"/><area shape="rect" id="node97" href="ospf__route_8h.html" title="ospfd/ospf_route.h" alt="" coords="2762,80,2899,107"/><area shape="rect" id="node99" href="ospf__ia_8h.html" title="ospfd/ospf_ia.h" alt="" coords="2924,80,3039,107"/><area shape="rect" id="node101" href="ospf__ase_8h.html" title="ospfd/ospf_ase.h" alt="" coords="3063,80,3189,107"/><area shape="rect" id="node103" href="ospf__abr_8h.html" title="ospfd/ospf_abr.h" alt="" coords="3214,80,3337,107"/><area shape="rect" id="node105" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="3363,80,3501,107"/></map>
</div>
</div>
<p><a href="ospf__spf_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a>&#160;&#160;&#160;12</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>&#160;&#160;&#160;4</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a1ea44a6fc9fca346086f90b6af653325">ospf_vertex_free</a> (void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#aea544039058f177b3d5698fbaa84cfb0">cmp</a> (void *node1, void *node2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a7e106bb3265dae7fb42f6484bf208dbe">update_stat</a> (void *node, int position)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a1663c4ab7996b65fe11a81a238ed33b4">vertex_nexthop_free</a> (struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *nh)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (struct <a class="el" href="structvertex.html">vertex</a> *root)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structvertex__parent.html">vertex_parent</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a3c58442d769f8c4ec9bb88b1a7f67d84">vertex_parent_new</a> (struct <a class="el" href="structvertex.html">vertex</a> *v, int backlink, struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *<a class="el" href="structhop.html">hop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a> (const char *<a class="el" href="structmsg.html">msg</a>, struct <a class="el" href="structvertex.html">vertex</a> *v, int print_parents, int print_children)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a1a532b38c2d329151809815e36a95c94">ospf_vertex_add_parent</a> (struct <a class="el" href="structvertex.html">vertex</a> *v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a5a606956341e2c6c29d662d36d626d06">ospf_spf_init</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (struct <a class="el" href="structlsa__header.html">lsa_header</a> *w, struct <a class="el" href="structlsa__header.html">lsa_header</a> *v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (struct <a class="el" href="structvertex.html">vertex</a> *v, struct <a class="el" href="structvertex.html">vertex</a> *w, struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *prev_link)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a9ddd128c4d4645a921bae9f8d2b22db4">ospf_spf_flush_parents</a> (struct <a class="el" href="structvertex.html">vertex</a> *w)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (struct <a class="el" href="structvertex.html">vertex</a> *v, struct <a class="el" href="structvertex.html">vertex</a> *w, struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *newhop, unsigned int <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structvertex.html">vertex</a> *v, struct <a class="el" href="structvertex.html">vertex</a> *w, struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="el" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>, unsigned int <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#abc11a92f3cd8b5f9a086362350c338fa">ospf_spf_next</a> (struct <a class="el" href="structvertex.html">vertex</a> *v, struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structpqueue.html">pqueue</a> *candidate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (struct <a class="el" href="structvertex.html">vertex</a> *v, int <a class="el" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structvertex.html">vertex</a> *v, struct <a class="el" href="structroute__table.html">route_table</a> *rt, int parent_is_root)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a5861f43a374234df3d96fc31e6697387">ospf_rtrs_free</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rtrs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a7126d2afe3964cc82e545f0bb4a336ca">ospf_rtrs_print</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rtrs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structroute__table.html">route_table</a> *new_table, struct <a class="el" href="structroute__table.html">route_table</a> *new_rtrs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a82280bfb6f11de00fb0295aee57b48e1">router_routing_table_same_node</a> (struct <a class="el" href="structroute__node.html">route_node</a> *old_rn, struct <a class="el" href="structroute__node.html">route_node</a> *new_rn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a654b5180936ba11d471f99923eb50a95">get_router_routing_table_changes</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a9fc4f69e7687f05c00c99b7b4c32309e">ospf_spf_calculate_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structlist.html">list</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">vertex_list</a> = { .del = ospf_vertex_free }</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a22bcbf082e875540f44e45e655b59425"></a><!-- doxytag: member="ospf_spf.c::ROUTER_LSA_MIN_SIZE" ref="a22bcbf082e875540f44e45e655b59425" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ROUTER_LSA_MIN_SIZE&#160;&#160;&#160;12</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00359">359</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0ea8f3c91b851621e903b37c345c6575"></a><!-- doxytag: member="ospf_spf.c::ROUTER_LSA_TOS_SIZE" ref="a0ea8f3c91b851621e903b37c345c6575" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ROUTER_LSA_TOS_SIZE&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00360">360</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aea544039058f177b3d5698fbaa84cfb0"></a><!-- doxytag: member="ospf_spf.c::cmp" ref="aea544039058f177b3d5698fbaa84cfb0" args="(void *node1, void *node2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int cmp </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>node1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>node2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00059">59</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> * v1 = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) node1;
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> * v2 = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) node2;
  <span class="keywordflow">if</span> (v1 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; v2 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
    {
      <span class="comment">/* network vertices must be chosen before router vertices of same</span>
<span class="comment">       * cost in order to find all shortest paths</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> ( ((v1-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> - v2-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>) == 0)
          &amp;&amp; (v1-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> != v2-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a>))
        {
          <span class="keywordflow">switch</span> (v1-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a>)
            {
              <span class="keywordflow">case</span> <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>:
                <span class="keywordflow">return</span> -1;
              <span class="keywordflow">case</span> <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>:
                <span class="keywordflow">return</span> 1;
            }
        }
      <span class="keywordflow">else</span>
        <span class="keywordflow">return</span> (v1-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> - v2-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a654b5180936ba11d471f99923eb50a95"></a><!-- doxytag: member="ospf_spf.c::get_router_routing_table_changes" ref="a654b5180936ba11d471f99923eb50a95" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void get_router_routing_table_changes </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01272">1272</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *old_rtrs, *new_rtrs;
    <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *old_rn, *new_rn;

    old_rtrs = ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>;
    new_rtrs = ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>;


    <span class="keywordflow">if</span> (old_rtrs) {
        <span class="comment">/* get deleted or updated entries */</span>
        <span class="keywordflow">for</span> (old_rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a>(old_rtrs); old_rn; old_rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a>(old_rn))
        {
            <span class="keywordflow">if</span> (old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
            {
                <span class="comment">//lookup old prefix(router ID) in new router routing table</span>
                new_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a>(new_rtrs, &amp;old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);

                <span class="comment">//prefix still exists in new router routing table</span>
                <span class="keywordflow">if</span> (new_rn &amp;&amp; new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
                {
                    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(new_rn);

                    <span class="keywordflow">if</span> (!<a class="code" href="ospf__spf_8c.html#a82280bfb6f11de00fb0295aee57b48e1">router_routing_table_same_node</a>(old_rn, new_rn))
                    {
                        <span class="comment">//notify update</span>
                        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s updated&quot;</span>, inet_ntoa(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
                        <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, new_rn);
                    }
                }
                <span class="comment">//prefix not found: deleted from new router routing table</span>
                <span class="keywordflow">else</span>
                {
                    <span class="comment">//notify delete</span>
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s deleted&quot;</span>, inet_ntoa(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
                    <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(old_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
                }
            }
        }

        <span class="comment">/* get new entries */</span>
        <span class="keywordflow">for</span> (new_rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a>(new_rtrs); new_rn; new_rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a>(new_rn))
        {
            <span class="keywordflow">if</span> (new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
            {
                <span class="comment">//lookup new prefix(router ID) in old router routing table</span>
                old_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a>(old_rtrs, &amp;new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>);

                <span class="comment">//prefix not found: new prefix</span>
                <span class="keywordflow">if</span> (!old_rn || !old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
                {
                    <span class="comment">//notify add</span>
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Router routing table for %24s added&quot;</span>, inet_ntoa(new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
                    <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(new_rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, new_rn);
                }
                <span class="keywordflow">else</span>
                    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(old_rn);
            }
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4308d510a27e929dc96f4bf0cebfa053"></a><!-- doxytag: member="ospf_spf.c::ospf_canonical_nexthops_free" ref="a4308d510a27e929dc96f4bf0cebfa053" args="(struct vertex *root)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_canonical_nexthops_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00111">111</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *child;
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (root-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, node, nnode, child))
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n2, *nn2;
      <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
      
      <span class="comment">/* router vertices through an attached network each</span>
<span class="comment">       * have a distinct (canonical / not inherited) nexthop</span>
<span class="comment">       * which must be freed.</span>
<span class="comment">       *</span>
<span class="comment">       * A network vertex can only have router vertices as its</span>
<span class="comment">       * children, so only one level of recursion is possible.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (child-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>)
        <a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (child);
      
      <span class="comment">/* Free child nexthops pointing back to this root vertex */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (child-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, n2, nn2, vp))
        <span class="keywordflow">if</span> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> == root &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>)
          <a class="code" href="ospf__spf_8c.html#a1663c4ab7996b65fe11a81a238ed33b4">vertex_nexthop_free</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>);
    }
}      
</pre></div>
</div>
</div>
<a class="anchor" id="a7f64a1358f95c81f69827b9d646b49a1"></a><!-- doxytag: member="ospf_spf.c::ospf_get_next_link" ref="a7f64a1358f95c81f69827b9d646b49a1" args="(struct vertex *v, struct vertex *w, struct router_lsa_link *prev_link)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a>* ospf_get_next_link </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *&#160;</td>
          <td class="paramname"><em>prev_link</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00367">367</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char *lim;
  u_char lsa_type =  <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;

  <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
    lsa_type = <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>;

  <span class="keywordflow">if</span> (prev_link == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
  <span class="keywordflow">else</span>
    {
      p = (u_char *) prev_link;
      p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
            (prev_link-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));
    }

  lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);

  <span class="keywordflow">while</span> (p &lt; lim)
    {
      l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;

      p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> + (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));

      <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> != lsa_type)
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>, &amp;w-&gt;<a class="code" href="structvertex.html#aac4fe4e8f28dfb3e189739f7db5ac2fa">id</a>))
        <span class="keywordflow">return</span> l;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b22d232c978a4b58849a75b0090aafc"></a><!-- doxytag: member="ospf_spf.c::ospf_lsa_has_link" ref="a7b22d232c978a4b58849a75b0090aafc" args="(struct lsa_header *w, struct lsa_header *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_lsa_has_link </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00297">297</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rl;
  <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *nl;

  <span class="comment">/* In case of W is Network LSA. */</span>
  <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
    {
      <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
        <span class="keywordflow">return</span> -1;

      nl = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *) w;
      length = (ntohs (w-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> - 4) / 4;

      <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>; i++)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nl-&gt;<a class="code" href="structnetwork__lsa.html#afc394e67b4028155fa618b6f7d0e3bf6">routers</a>[i], &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
          <span class="keywordflow">return</span> i;
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* In case of W is Router LSA. */</span>
  <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
    {
      rl = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) w;

      length = ntohs (w-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);

      <span class="keywordflow">for</span> (i = 0;
           i &lt; ntohs (rl-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>) &amp;&amp; length &gt;= <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a>);
           i++, length -= 12)
        {
          <span class="keywordflow">switch</span> (rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#aa730ac0aec994e853bcd4d52ff285a9e">type</a>)
            {
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
              <span class="comment">/* Router LSA ID. */</span>
              <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a> &amp;&amp;
                  <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#af784ecdeabee7aaf7889657212023f45">link_id</a>, &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
                {
                  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
                }
              <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
              <span class="comment">/* Network LSA ID. */</span>
              <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a> &amp;&amp;
                  <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#af784ecdeabee7aaf7889657212023f45">link_id</a>, &amp;v-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>))
                {
                  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
                }
              <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>:
              <span class="comment">/* Stub can&#39;t lead anywhere, carry on */</span>
              <span class="keywordflow">continue</span>;
            <span class="keywordflow">default</span>:
              <span class="keywordflow">break</span>;
            }
        }
    }
  <span class="keywordflow">return</span> -1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a40d1cfafed99424787802a239c522202"></a><!-- doxytag: member="ospf_spf.c::ospf_nexthop_calculation" ref="a40d1cfafed99424787802a239c522202" args="(struct ospf_area *area, struct vertex *v, struct vertex *w, struct router_lsa_link *l, unsigned int distance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int ospf_nexthop_calculation </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrouter__lsa__link.html">router_lsa_link</a> *&#160;</td>
          <td class="paramname"><em>l</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>distance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00481">481</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structvertex__nexthop.html">vertex_nexthop</a> *nh;
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> added = 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_nexthop_calculation(): Start&quot;</span>);
      <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;V (parent):&quot;</span>, v, 1, 1);
      <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;W (dest)  :&quot;</span>, w, 1, 1);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;V-&gt;W distance: %d&quot;</span>, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
    }

  <span class="keywordflow">if</span> (v == area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>)
    {      
      <span class="comment">/* 16.1.1 para 4.  In the first case, the parent vertex (V) is the</span>
<span class="comment">     root (the calculating router itself).  This means that the </span>
<span class="comment">     destination is either a directly connected network or directly</span>
<span class="comment">     connected router.  The outgoing interface in this case is simply </span>
<span class="comment">         the OSPF interface connecting to the destination network/router.</span>
<span class="comment">      */</span>

      <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
        {
          <span class="comment">/* l  is a link from v to w</span>
<span class="comment">           * l2 will be link from w to v</span>
<span class="comment">           */</span>
          <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *l2 = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          
          <span class="comment">/* we *must* be supplied with the link data */</span>
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
          
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            {
              <span class="keywordtype">char</span> buf1[BUFSIZ];
              <span class="keywordtype">char</span> buf2[BUFSIZ];
              
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): considering link &quot;</span>
                        <span class="stringliteral">&quot;type %d link_id %s link_data %s&quot;</span>,
                        l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a>,
                        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>, buf1, BUFSIZ),
                        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>, buf2, BUFSIZ));
            }

          <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>)
            {
              <span class="comment">/* If the destination is a router which connects to</span>
<span class="comment">                 the calculating router via a Point-to-MultiPoint</span>
<span class="comment">                 network, the destination&#39;s next hop IP address(es)</span>
<span class="comment">                 can be determined by examining the destination&#39;s</span>
<span class="comment">                 router-LSA: each link pointing back to the</span>
<span class="comment">                 calculating router and having a Link Data field</span>
<span class="comment">                 belonging to the Point-to-MultiPoint network</span>
<span class="comment">                 provides an IP address of the next hop router.</span>
<span class="comment"></span>
<span class="comment">                 At this point l is a link from V to W, and V is the</span>
<span class="comment">                 root (&quot;us&quot;).  Find the local interface associated </span>
<span class="comment">                 with l (its address is in l-&gt;link_data).  If it</span>
<span class="comment">                 is a point-to-multipoint interface, then look through</span>
<span class="comment">                 the links in the opposite direction (W to V).  If</span>
<span class="comment">                 any of them have an address that lands within the</span>
<span class="comment">                 subnet declared by the PtMP link, then that link</span>
<span class="comment">                 is a constituent of the PtMP link, and its address is </span>
<span class="comment">                 a nexthop address for V.</span>
<span class="comment">              */</span>
              oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>);
              <span class="keywordflow">if</span> (oi &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#aa65cd67781b9573131ead326b8976194">OSPF_IFTYPE_POINTOMULTIPOINT</a>)
                {
                  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> la;

                  la.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
                  la.prefixlen = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;

                  <span class="comment">/* V links to W on PtMP interface</span>
<span class="comment">                     - find the interface address on W */</span>
                  <span class="keywordflow">while</span> ((l2 = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l2)))
                    {
                      la.prefix = l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;

                      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a203098ec44d398d5c8692082d8cae725">prefix_cmp</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;la,
                                      oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>) == 0)
                        <span class="comment">/* link_data is on our PtMP network */</span>
                        <span class="keywordflow">break</span>;
                    }
                } <span class="comment">/* end l is on point-to-multipoint link */</span>
              <span class="keywordflow">else</span>
                {
                  <span class="comment">/* l is a regular point-to-point link.</span>
<span class="comment">                     Look for a link from W to V.</span>
<span class="comment">                   */</span>
                  <span class="keywordflow">while</span> ((l2 = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l2)))
                    {
                      oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>,
                                                  &amp;(l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>));

                      <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
                        <span class="keywordflow">continue</span>;

                      <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                                           &amp;l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>))
                        <span class="keywordflow">continue</span>;

                      <span class="keywordflow">break</span>;
                    }
                }

              <span class="keywordflow">if</span> (oi &amp;&amp; l2)
                {
                  <span class="comment">/* found all necessary info to build nexthop */</span>
                  nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
                  nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = oi;
                  nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = l2-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;
                  <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
                  <span class="keywordflow">return</span> 1;
                }
              <span class="keywordflow">else</span>
                <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
                          <span class="stringliteral">&quot;could not determine nexthop for link&quot;</span>);
            } <span class="comment">/* end point-to-point link from V to W */</span>
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>)
            {
              <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
              
              <span class="comment">/* VLink implementation limitations: </span>
<span class="comment">               * a) vl_data can only reference one nexthop, so no ECMP</span>
<span class="comment">               *    to backbone through VLinks. Though transit-area </span>
<span class="comment">               *    summaries may be considered, and those can be ECMP.</span>
<span class="comment">               * b) We can only use /one/ VLink, even if multiple ones</span>
<span class="comment">               *    exist this router through multiple transit-areas.</span>
<span class="comment">               */</span>
              vl_data = <a class="code" href="ospf__interface_8c.html#a2c499a47d45e763d71f9b8ff41456156">ospf_vl_lookup</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
              
              <span class="keywordflow">if</span> (vl_data 
                  &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>))
                {
                  nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
                  nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
                  nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
                  <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
                  <span class="keywordflow">return</span> 1;
                }
              <span class="keywordflow">else</span>
                  <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
                            <span class="stringliteral">&quot;vl_data for VL link not found&quot;</span>);
            } <span class="comment">/* end virtual-link from V to W */</span>
          <span class="keywordflow">return</span> 0;
        } <span class="comment">/* end W is a Router vertex */</span>
      <span class="keywordflow">else</span>
        {
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>);
          oi = <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, &amp;(l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>));
          <span class="keywordflow">if</span> (oi)
            {
              nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
              nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = oi;
              nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>.s_addr = 0;
              <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
              <span class="keywordflow">return</span> 1;
            }
        }
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>(<span class="stringliteral">&quot;ospf_nexthop_calculation(): &quot;</span>
                <span class="stringliteral">&quot;Unknown attached link&quot;</span>);
      <span class="keywordflow">return</span> 0;
    } <span class="comment">/* end V is the root */</span>
  <span class="comment">/* Check if W&#39;s parent is a network connected to root. */</span>
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#aead4acddee1a81432562430a44406e6a">OSPF_VERTEX_NETWORK</a>)
    {
      <span class="comment">/* See if any of V&#39;s parents are the root. */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, nnode, vp))
        {
          <span class="keywordflow">if</span> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> == area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>) <span class="comment">/* connects to root? */</span>
        {
          <span class="comment">/* 16.1.1 para 5. ...the parent vertex is a network that</span>
<span class="comment">           * directly connects the calculating router to the destination</span>
<span class="comment">           * router.  The list of next hops is then determined by</span>
<span class="comment">           * examining the destination&#39;s router-LSA...</span>
<span class="comment">           */</span>

          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(w-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>);
              <span class="keywordflow">while</span> ((l = <a class="code" href="ospf__spf_8c.html#a7f64a1358f95c81f69827b9d646b49a1">ospf_get_next_link</a> (w, v, l)))
                {
          <span class="comment">/* ...For each link in the router-LSA that points back to the</span>
<span class="comment">           * parent network, the link&#39;s Link Data field provides the IP</span>
<span class="comment">           * address of a next hop router.  The outgoing interface to</span>
<span class="comment">           * use can then be derived from the next hop IP address (or </span>
<span class="comment">           * it can be inherited from the parent network).</span>
<span class="comment">           */</span>
          nh = <a class="code" href="ospf__spf_8c.html#ac96a76738563243d3851a0ee25bbf8cb">vertex_nexthop_new</a> ();
          nh-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
          nh-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = l-&gt;<a class="code" href="structrouter__lsa__link.html#a1707a34e681aaa2e7c75cae233606174">link_data</a>;
          added = 1;
                  <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, nh, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
                }
            }
        }
      <span class="comment">/* NB: This code is non-trivial.</span>
<span class="comment">       * </span>
<span class="comment">       * E.g. it is not enough to know that V connects to the root. It is</span>
<span class="comment">       * also important that the while above, looping through all links from</span>
<span class="comment">       * W-&gt;V found at least one link, so that we know there is</span>
<span class="comment">       * bi-directional connectivity between V and W.  Otherwise, if we</span>
<span class="comment">       * /always/ return here, but don&#39;t check that W-&gt;V exists then we</span>
<span class="comment">       * we will prevent SPF from finding/using higher cost paths..</span>
<span class="comment">       *</span>
<span class="comment">       * See also bug #330, and also:</span>
<span class="comment">       *</span>
<span class="comment">       * http://blogs.sun.com/paulj/entry/the_difference_a_line_makes</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (added)
        <span class="keywordflow">return</span> added;
    }

  <span class="comment">/* 16.1.1 para 4.  If there is at least one intervening router in the</span>
<span class="comment">   * current shortest path between the destination and the root, the</span>
<span class="comment">   * destination simply inherits the set of next hops from the</span>
<span class="comment">   * parent.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Intervening routers, adding parent(s)&quot;</span>, __func__);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, nnode, vp))
    {
      added = 1;
      <a class="code" href="ospf__spf_8c.html#ab68d641ed0f0cc6fc72e3c08e142344b">ospf_spf_add_parent</a> (v, w, vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>, <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
    }
  
  <span class="keywordflow">return</span> added;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5861f43a374234df3d96fc31e6697387"></a><!-- doxytag: member="ospf_spf.c::ospf_rtrs_free" ref="a5861f43a374234df3d96fc31e6697387" args="(struct route_table *rtrs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_rtrs_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rtrs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01023">1023</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *or_list;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route: Router Routing Table free&quot;</span>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (or_list, node, nnode, or))
          <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (or);

        <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (or_list);

        <span class="comment">/* Unlock the node. */</span>
        rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      }
  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (rtrs);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7126d2afe3964cc82e545f0bb4a336ca"></a><!-- doxytag: member="ospf_spf.c::ospf_rtrs_print" ref="a7126d2afe3964cc82e545f0bb4a336ca" args="(struct route_table *rtrs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_rtrs_print </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rtrs</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01049">1049</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *or_list;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *pnode;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
  <span class="keywordtype">char</span> buf1[BUFSIZ];
  <span class="keywordtype">char</span> buf2[BUFSIZ];

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_rtrs_print() start&quot;</span>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rtrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or_list, ln, or))
        {
          <span class="keywordflow">switch</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)
            {
            <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>:
              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s   [%d] area: %s&quot;</span>,
                           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>, buf1, BUFSIZ),
                           or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>,
                                                buf2, BUFSIZ));
              <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>:
              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s IA [%d] area: %s&quot;</span>,
                           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a>, buf1, BUFSIZ),
                           or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>,
                                                buf2, BUFSIZ));
              <span class="keywordflow">break</span>;
            <span class="keywordflow">default</span>:
              <span class="keywordflow">break</span>;
            }

          <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, pnode, path))
            {
              <span class="keywordflow">if</span> (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr == 0)
                {
                  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   directly attached to %s\r\n&quot;</span>,
                <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a> (path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>));
                }
              <span class="keywordflow">else</span>
                {
                  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   via %s, %s\r\n&quot;</span>,
                inet_ntoa (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>),
                <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a> (path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>));
                }
            }
        }

  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_rtrs_print() end&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab68d641ed0f0cc6fc72e3c08e142344b"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_add_parent" ref="ab68d641ed0f0cc6fc72e3c08e142344b" args="(struct vertex *v, struct vertex *w, struct vertex_nexthop *newhop, unsigned int distance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_add_parent </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *&#160;</td>
          <td class="paramname"><em>newhop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>distance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00424">424</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
    
  <span class="comment">/* we must have a newhop, and a distance */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (v &amp;&amp; w &amp;&amp; newhop);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
  
  <span class="comment">/* IFF w has already been assigned a distance, then we shouldn&#39;t get here</span>
<span class="comment">   * unless callers have determined V(l)-&gt;W is shortest / equal-shortest</span>
<span class="comment">   * path (0 is a special case distance (no distance yet assigned)).</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>)
    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (distance &lt;= w-&gt;<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>);
  <span class="keywordflow">else</span>
    w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Adding %s as parent of %s&quot;</span>,
                __func__,
                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, buf[0], <span class="keyword">sizeof</span>(buf[0])),
                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;w-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, buf[1], <span class="keyword">sizeof</span>(buf[1])));
    }           

  <span class="comment">/* Adding parent for a new, better path: flush existing parents from W. */</span>
  <span class="keywordflow">if</span> (distance &lt; w-&gt;<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: distance %d better than %d, flushing existing parents&quot;</span>,
                    __func__, distance, w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>);
      <a class="code" href="ospf__spf_8c.html#a9ddd128c4d4645a921bae9f8d2b22db4">ospf_spf_flush_parents</a> (w);
      w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
    }
  
  <span class="comment">/* new parent is &lt;= existing parents, add it to parent list */</span>  
  vp = <a class="code" href="ospf__spf_8c.html#a3c58442d769f8c4ec9bb88b1a7f67d84">vertex_parent_new</a> (v, <a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (w-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>, v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>), newhop);
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, vp);

  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a45d994cf8b0b3d8f0d758f0a5b303fdd"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_calculate" ref="a45d994cf8b0b3d8f0d758f0a5b303fdd" args="(struct ospf_area *area, struct route_table *new_table, struct route_table *new_rtrs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_calculate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>new_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>new_rtrs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01110">1110</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpqueue.html">pqueue</a> *candidate;
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: Start&quot;</span>);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: running Dijkstra for area %s&quot;</span>,
                 inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
    }

  <span class="comment">/* Check router-lsa-self.  If self-router-lsa is not yet allocated,</span>
<span class="comment">     return this area&#39;s calculation. */</span>
  <span class="keywordflow">if</span> (!area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: &quot;</span>
                   <span class="stringliteral">&quot;Skip area %s&#39;s calculation due to empty router_lsa_self&quot;</span>,
                   inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* RFC2328 16.1. (1). */</span>
  <span class="comment">/* Initialize the algorithm&#39;s data structures. */</span>
  
  <span class="comment">/* This function scans all the LSA database and set the stat field to</span>
<span class="comment">   * LSA_SPF_NOT_EXPLORED. */</span>
  <a class="code" href="ospf__lsdb_8c.html#a720ea0bd2265ad23981060a65decdd49">ospf_lsdb_clean_stat</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>);
  <span class="comment">/* Create a new heap for the candidates. */</span> 
  candidate = <a class="code" href="pqueue_8c.html#a2579024e6715cbdb92af477dcdd1bb31">pqueue_create</a>();
  candidate-&gt;<a class="code" href="structpqueue.html#ab07da518da86aacef25a3b94404bec09">cmp</a> = <a class="code" href="ospf__spf_8c.html#aea544039058f177b3d5698fbaa84cfb0">cmp</a>;
  candidate-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> = <a class="code" href="ospf__spf_8c.html#a7e106bb3265dae7fb42f6484bf208dbe">update_stat</a>;

  <span class="comment">/* Initialize the shortest-path tree to only the root (which is the</span>
<span class="comment">     router doing the calculation). */</span>
  <a class="code" href="ospf__spf_8c.html#a5a606956341e2c6c29d662d36d626d06">ospf_spf_init</a> (area);
  v = area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>;
  <span class="comment">/* Set LSA position to LSA_SPF_IN_SPFTREE. This vertex is the root of the</span>
<span class="comment">   * spanning tree. */</span>
  *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>;

  <span class="comment">/* Set Area A&#39;s TransitCapability to FALSE. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a2c84e7800bc78b5dbd66e75faf09350b">transit</a> = <a class="code" href="ospfd_8h.html#ad7cf7fce04199d045574d4cf511f3296">OSPF_TRANSIT_FALSE</a>;
  area-&gt;<a class="code" href="structospf__area.html#a46f9caf873a09f0ebe364907b08639d2">shortcut_capability</a> = 1;
  
  <span class="keywordflow">for</span> (;;)
    {
      <span class="comment">/* RFC2328 16.1. (2). */</span>
      <a class="code" href="ospf__spf_8c.html#abc11a92f3cd8b5f9a086362350c338fa">ospf_spf_next</a> (v, area, candidate);

      <span class="comment">/* RFC2328 16.1. (3). */</span>
      <span class="comment">/* If at this step the candidate list is empty, the shortest-</span>
<span class="comment">         path tree (of transit vertices) has been completely built and</span>
<span class="comment">         this stage of the procedure terminates. */</span>
      <span class="keywordflow">if</span> (candidate-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a> == 0)
        <span class="keywordflow">break</span>;

      <span class="comment">/* Otherwise, choose the vertex belonging to the candidate list</span>
<span class="comment">         that is closest to the root, and add it to the shortest-path</span>
<span class="comment">         tree (removing it from the candidate list in the</span>
<span class="comment">         process). */</span>
      <span class="comment">/* Extract from the candidates the node with the lower key. */</span>
      v = (<span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *) <a class="code" href="pqueue_8c.html#a1c1a1203050a22dcd10966a857a26505">pqueue_dequeue</a> (candidate);
      <span class="comment">/* Update stat field in vertex. */</span>
      *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>;

      <a class="code" href="ospf__spf_8c.html#a1a532b38c2d329151809815e36a95c94">ospf_vertex_add_parent</a> (v);

      <span class="comment">/* RFC2328 16.1. (4). */</span>
      <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
        <a class="code" href="ospf__route_8c.html#ae3f51a8346ea35a7a697c35db4c578c1">ospf_intra_add_router</a> (new_rtrs, v, area);
      <span class="keywordflow">else</span>
        <a class="code" href="ospf__route_8c.html#ac4b754a414528b3d20a477d821ed07dd">ospf_intra_add_transit</a> (new_table, v, area);

      <span class="comment">/* RFC2328 16.1. (5). */</span>
      <span class="comment">/* Iterate the algorithm by returning to Step 2. */</span>

    } <span class="comment">/* end loop until no more candidate vertices */</span>

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, 0);
      <a class="code" href="ospf__route_8c.html#a9396efc189379cb3ebbd9948e2a3a46c">ospf_route_table_dump</a> (new_table);
    }

  <span class="comment">/* Second stage of SPF calculation procedure&#39;s  */</span>
  <a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (area, area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, new_table, 0);

  <span class="comment">/* Free candidate queue. */</span>
  <a class="code" href="pqueue_8c.html#ad0099423e65490faf86a429bab2e7059">pqueue_delete</a> (candidate);
  
  <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a> (__func__, area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>, 0, 1);
  <span class="comment">/* Free nexthop information, canonical versions of which are attached</span>
<span class="comment">   * the first level of router vertices attached to the root vertex, see</span>
<span class="comment">   * ospf_nexthop_calculation.</span>
<span class="comment">   */</span>
  <a class="code" href="ospf__spf_8c.html#a4308d510a27e929dc96f4bf0cebfa053">ospf_canonical_nexthops_free</a> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>);
  
  <span class="comment">/* Free SPF vertices, but not the list. List has ospf_vertex_free</span>
<span class="comment">   * as deconstructor.</span>
<span class="comment">   */</span>
  <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (&amp;<a class="code" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">vertex_list</a>);
  
  <span class="comment">/* Increment SPF Calculation Counter. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a67be77edde21cd34756ee2c0a990d8bb">spf_calculation</a>++;

  <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a736a40f4598cffc8238e1650a08b2ff9">ts_spf</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_spf_calculate: Stop. %ld vertices&quot;</span>,
                <a class="code" href="memory_8c.html#a8f242036e581a1a447b79199d9a130ba">mtype_stats_alloc</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3422ebf3062fac786ecdb7b419c22cf1"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_calculate_schedule" ref="a3422ebf3062fac786ecdb7b419c22cf1" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_spf_calculate_schedule </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01418">1418</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> delay, elapsed, ht;
  <span class="keyword">struct </span>timeval result;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer scheduled&quot;</span>);

  <span class="comment">/* OSPF instance does not exist. */</span>
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;
  
  <span class="comment">/* SPF calculation timer is already scheduled. */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer is already scheduled: %p&quot;</span>,
                   ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a>);
      <span class="keywordflow">return</span>;
    }
  
  <span class="comment">/* XXX Monotic timers: we only care about relative time here. */</span>
  result = <a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), ospf-&gt;<a class="code" href="structospf.html#a736a40f4598cffc8238e1650a08b2ff9">ts_spf</a>);
  
  elapsed = (result.tv_sec * 1000) + (result.tv_usec / 1000);
  ht = ospf-&gt;<a class="code" href="structospf.html#aa971ad725002ed2b0086e3fff01773af">spf_holdtime</a> * ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a>;
  
  <span class="keywordflow">if</span> (ht &gt; ospf-&gt;<a class="code" href="structospf.html#a684befebc44a8a5012dc713a79fa4c44">spf_max_holdtime</a>)
    ht = ospf-&gt;<a class="code" href="structospf.html#a684befebc44a8a5012dc713a79fa4c44">spf_max_holdtime</a>;
  
  <span class="comment">/* Get SPF calculation delay time. */</span>
  <span class="keywordflow">if</span> (elapsed &lt; ht)
    {
      <span class="comment">/* Got an event within the hold time of last SPF. We need to</span>
<span class="comment">       * increase the hold_multiplier, if it&#39;s not already at/past</span>
<span class="comment">       * maximum value, and wasn&#39;t already increased..</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (ht &lt; ospf-&gt;spf_max_holdtime)
        ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a>++;
      
      <span class="comment">/* always honour the SPF initial delay */</span>
      <span class="keywordflow">if</span> ( (ht - elapsed) &lt; ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>)
        delay = ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>;
      <span class="keywordflow">else</span>
        delay = ht - elapsed;
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Event is past required hold-time of last SPF */</span>
      delay = ospf-&gt;<a class="code" href="structospf.html#a1bbe1ea24e804213d2d1fcffcc9db3bf">spf_delay</a>;
      ospf-&gt;<a class="code" href="structospf.html#a7b8b5bbddce54e0a6072360765e0cf6c">spf_hold_multiplier</a> = 1;
    }
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation timer delay = %ld&quot;</span>, delay);

  ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a> =
    <a class="code" href="thread_8h.html#a9231be4b08f04f6ebc1bea080443ba74">thread_add_timer_msec</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__spf_8c.html#a9fc4f69e7687f05c00c99b7b4c32309e">ospf_spf_calculate_timer</a>, ospf, delay);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9fc4f69e7687f05c00c99b7b4c32309e"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_calculate_timer" ref="a9fc4f69e7687f05c00c99b7b4c32309e" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_spf_calculate_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01337">1337</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *new_table, *new_rtrs;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: Timer (SPF calculation expire)&quot;</span>);

  ospf-&gt;<a class="code" href="structospf.html#a7275a30b5634c98437fad833eee61a48">t_spf_calc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Allocate new table tree. */</span>
  new_table = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  new_rtrs = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();

  <a class="code" href="ospf__interface_8c.html#af796502c793492cfea95fc844a1fc9ec">ospf_vl_unapprove</a> (ospf);

  <span class="comment">/* Calculate SPF for each area. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
    {
      <span class="comment">/* Do backbone last, so as to first discover intra-area paths</span>
<span class="comment">       * for any back-bone virtual-links</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a> &amp;&amp; ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a> == area)
        <span class="keywordflow">continue</span>;
      
      <a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (area, new_table, new_rtrs);
    }
  
  <span class="comment">/* SPF for backbone, if required */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>)
    <a class="code" href="ospf__spf_8c.html#a45d994cf8b0b3d8f0d758f0a5b303fdd">ospf_spf_calculate</a> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>, new_table, new_rtrs);
  
  <a class="code" href="ospf__interface_8c.html#ab511d3358207a7a075edbdf2492000ce">ospf_vl_shut_unapproved</a> (ospf);

  <a class="code" href="ospf__ia_8c.html#ae97c055c52bf0ea6a36fc5bec82e33b8">ospf_ia_routing</a> (ospf, new_table, new_rtrs);

  <a class="code" href="ospf__route_8c.html#a664b20a2a9ead67d9c8daf9194e971c2">ospf_prune_unreachable_networks</a> (new_table);
  <a class="code" href="ospf__route_8c.html#a8a234f1fccc982181a97e59ce18e62a7">ospf_prune_unreachable_routers</a> (new_rtrs);

  <span class="comment">/* AS-external-LSA calculation should not be performed here. */</span>

  <span class="comment">/* If new Router Route is installed,</span>
<span class="comment">     then schedule re-calculate External routes. */</span>
  <span class="keywordflow">if</span> (1)
    <a class="code" href="ospf__ase_8c.html#a8e097f55230eec4539a22f5eda781d90">ospf_ase_calculate_schedule</a> (ospf);

  <a class="code" href="ospf__ase_8c.html#a1a8e03352bf6bfefef4dbc963822a8e6">ospf_ase_calculate_timer_add</a> (ospf);

  <span class="comment">/* Update routing table. */</span>
  <a class="code" href="ospf__route_8c.html#a92f9b15b23de4eb92b0d2afa5bb65664">ospf_route_install</a> (ospf, new_table);

  <span class="comment">/* Update ABR/ASBR routing table */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>)
    {
      <span class="comment">/* old_rtrs&#39;s node holds linked list of ospf_route. --kunihiro. */</span>
      <span class="comment">/* ospf_route_delete (ospf-&gt;old_rtrs); */</span>
      <a class="code" href="ospf__spf_8c.html#a5861f43a374234df3d96fc31e6697387">ospf_rtrs_free</a> (ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a>);
    }

  ospf-&gt;<a class="code" href="structospf.html#a03ee35eed9de19693cd4aa1cfcd59daf">old_rtrs</a> = ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>;
  ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a> = new_rtrs;

    <span class="comment">/* 08/13/2011 yic +3 */</span>
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <a class="code" href="ospf__spf_8c.html#a654b5180936ba11d471f99923eb50a95">get_router_routing_table_changes</a>(ospf);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (ospf))
    <a class="code" href="ospf__abr_8c.html#a6542439707b08efb93c2cc58103b92cc">ospf_abr_task</a> (ospf);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF: calculation complete&quot;</span>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae8e28c6d19f55a8b2dc2972c963389d7"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_dump" ref="ae8e28c6d19f55a8b2dc2972c963389d7" args="(struct vertex *v, int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00922">922</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nnode;
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *<a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a>;

  <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF Result: %d [R] %s&quot;</span>, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
    }
  <span class="keywordflow">else</span>
    {
      <span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *lsa = (<span class="keyword">struct </span><a class="code" href="structnetwork__lsa.html">network_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
      if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SPF Result: %d [N] %s/%d&quot;</span>, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
                   <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (lsa-&gt;<a class="code" href="structnetwork__lsa.html#a65a1f220899e8eb91f9b80a2f15d7d22">mask</a>));
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, nnode, parent))
      {
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot; nexthop %p %s %s&quot;</span>, 
                    parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>,
                    inet_ntoa (parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>),
                    parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> ? <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(parent-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>)
                                        : <span class="stringliteral">&quot;NULL&quot;</span>);
      }

  <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>++;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, v))
    <a class="code" href="ospf__spf_8c.html#ae8e28c6d19f55a8b2dc2972c963389d7">ospf_spf_dump</a> (v, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ddd128c4d4645a921bae9f8d2b22db4"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_flush_parents" ref="a9ddd128c4d4645a921bae9f8d2b22db4" args="(struct vertex *w)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_flush_parents </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>w</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00406">406</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln, *nn;
  
  <span class="comment">/* delete the existing nexthops */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, ln, nn, vp))
    {
      <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (w-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, ln);
      <a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a> (vp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5a606956341e2c6c29d662d36d626d06"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_init" ref="a5a606956341e2c6c29d662d36d626d06" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_init </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00281">281</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v;
  
  <span class="comment">/* Create root node. */</span>
  v = <a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
  
  area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a> = v;

  <span class="comment">/* Reset ABR and ASBR router counts. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a467c1a5bf34511b0520f0b13948ece72">abr_count</a> = 0;
  area-&gt;<a class="code" href="structospf__area.html#ad46b2710280032eab16991e2369fab32">asbr_count</a> = 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abc11a92f3cd8b5f9a086362350c338fa"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_next" ref="abc11a92f3cd8b5f9a086362350c338fa" args="(struct vertex *v, struct ospf_area *area, struct pqueue *candidate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_next </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpqueue.html">pqueue</a> *&#160;</td>
          <td class="paramname"><em>candidate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00721">721</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *w_lsa = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char *lim;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>in_addr *r;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;

  <span class="comment">/* If this is a router-LSA, and bit V of the router-LSA (see Section</span>
<span class="comment">     A.4.2:RFC2328) is set, set Area A&#39;s TransitCapability to TRUE.  */</span>
  <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a73de61aacb8ece81398674acfc6fc583">IS_ROUTER_LSA_VIRTUAL</a> ((<span class="keyword">struct</span> <a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>))
        area-&gt;<a class="code" href="structospf__area.html#a2c84e7800bc78b5dbd66e75faf09350b">transit</a> = <a class="code" href="ospfd_8h.html#a70fe6c34f6415b47c7eacdb16e586103">OSPF_TRANSIT_TRUE</a>;
    }
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Next vertex of %s vertex %s&quot;</span>,
                __func__, 
                v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
                inet_ntoa(v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
  
  p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
  lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);

  <span class="keywordflow">while</span> (p &lt; lim)
    {
      <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *w;
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
      
      <span class="comment">/* In case of V is Router-LSA. */</span>
      <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
        {
          l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;

          p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
                (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));

          <span class="comment">/* (a) If this is a link to a stub network, examine the next</span>
<span class="comment">             link in V&#39;s LSA.  Links to stub networks will be</span>
<span class="comment">             considered in the second stage of the shortest path</span>
<span class="comment">             calculation. */</span>
          <span class="keywordflow">if</span> ((type = l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a>) == <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>)
            <span class="keywordflow">continue</span>;
          
          <span class="comment">/* Infinite distance links shouldn&#39;t be followed, except</span>
<span class="comment">           * for local links (a stub-routed router still wants to</span>
<span class="comment">           * calculate tree, so must follow its own links).</span>
<span class="comment">           */</span>
          <span class="keywordflow">if</span> ((v != area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a>) &amp;&amp; l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a> &gt;= <a class="code" href="ospfd_8h.html#a79eb766203fe4ecce14c1b90b135a69d">OSPF_OUTPUT_COST_INFINITE</a>)
            <span class="keywordflow">continue</span>;

          <span class="comment">/* (b) Otherwise, W is a transit vertex (router or transit</span>
<span class="comment">             network).  Look up the vertex W&#39;s LSA (router-LSA or</span>
<span class="comment">             network-LSA) in Area A&#39;s link state database. */</span>
          <span class="keywordflow">switch</span> (type)
            {
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
              <span class="keywordflow">if</span> (type == <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>)
                {
                  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;looking up LSA through VL: %s&quot;</span>,
                               inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
                }

              w_lsa = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (area, <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>, l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>,
                                       l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
              <span class="keywordflow">if</span> (w_lsa)
                {
                  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found Router LSA %s&quot;</span>, inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
                }
              <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Looking up Network LSA, ID: %s&quot;</span>,
                           inet_ntoa (l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>));
              w_lsa = <a class="code" href="ospf__lsa_8c.html#ad8b31f978f44bc48a1b915183bcd04c1">ospf_lsa_lookup_by_id</a> (area, <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>,
                                             l-&gt;<a class="code" href="structrouter__lsa__link.html#ae89b447777926152f3495a6ec8f43999">link_id</a>);
              <span class="keywordflow">if</span> (w_lsa)
                <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found the LSA&quot;</span>);
              <span class="keywordflow">break</span>;
            <span class="keywordflow">default</span>:
              <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid LSA link type %d&quot;</span>, type);
              <span class="keywordflow">continue</span>;
            }
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* In case of V is Network-LSA. */</span>
          r = (<span class="keyword">struct </span>in_addr *) p;
          p += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in_addr);

          <span class="comment">/* Lookup the vertex W&#39;s LSA. */</span>
          w_lsa = <a class="code" href="ospf__lsa_8c.html#ad8b31f978f44bc48a1b915183bcd04c1">ospf_lsa_lookup_by_id</a> (area, <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>, *r);
          <span class="keywordflow">if</span> (w_lsa)
            {
              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found Router LSA %s&quot;</span>, inet_ntoa (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
            }
        }

      <span class="comment">/* (b cont.) If the LSA does not exist, or its LS age is equal</span>
<span class="comment">         to MaxAge, or it does not have a link back to vertex V,</span>
<span class="comment">         examine the next link in V&#39;s LSA.[23] */</span>
      <span class="keywordflow">if</span> (w_lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;No LSA found&quot;</span>);
          <span class="keywordflow">continue</span>;
        }

      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (w_lsa))
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA is MaxAge&quot;</span>);
          <span class="keywordflow">continue</span>;
        }

      <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a7b22d232c978a4b58849a75b0090aafc">ospf_lsa_has_link</a> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>, v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) &lt; 0 )
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;The LSA doesn&#39;t have a link back&quot;</span>);
          <span class="keywordflow">continue</span>;
        }

      <span class="comment">/* (c) If vertex W is already on the shortest-path tree, examine</span>
<span class="comment">         the next link in the LSA. */</span>
      <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> == <a class="code" href="ospf__lsa_8h.html#a7015c96fff68b5041b7c15cbd471e5c0">LSA_SPF_IN_SPFTREE</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;The LSA is already in SPF&quot;</span>);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* (d) Calculate the link state cost D of the resulting path</span>
<span class="comment">         from the root to vertex W.  D is equal to the sum of the link</span>
<span class="comment">         state cost of the (already calculated) shortest path to</span>
<span class="comment">         vertex V and the advertised cost of the link between vertices</span>
<span class="comment">         V and W.  If D is: */</span>

      <span class="comment">/* calculate link cost D. */</span>
      <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
    distance = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> + ntohs (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a63a9b91924a1fe4c87d674a8c3bd6c87">metric</a>);
      <span class="keywordflow">else</span> <span class="comment">/* v is not a Router-LSA */</span>
    distance = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;

      <span class="comment">/* Is there already vertex W in candidate list? */</span>
      <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> == <a class="code" href="ospf__lsa_8h.html#a3e6d46b027ed03c318fdeae73c1fe73f">LSA_SPF_NOT_EXPLORED</a>)
    {
          <span class="comment">/* prepare vertex W. */</span>
          w = <a class="code" href="ospf__spf_8c.html#a7351d83284d98ef4de715b053a41d00a">ospf_vertex_new</a> (w_lsa);

          <span class="comment">/* Calculate nexthop to W. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance))
            <a class="code" href="pqueue_8c.html#af8c7960d1e3ce1edf2b78dfc4873d321">pqueue_enqueue</a> (w, candidate);
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Nexthop Calc failed&quot;</span>);
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a> &gt;= 0)
    {
      <span class="comment">/* Get the vertex from candidates. */</span>
      w = candidate-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>];

      <span class="comment">/* if D is greater than. */</span>  
      <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> &lt; distance)
            {
              <span class="keywordflow">continue</span>;
            }
          <span class="comment">/* equal to. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (w-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a> == distance)
            {
          <span class="comment">/* Found an equal-cost path to W.  </span>
<span class="comment">               * Calculate nexthop of to W from V. */</span>
              <a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance);
            }
           <span class="comment">/* less than. */</span>
      <span class="keywordflow">else</span>
            {
              <span class="comment">/* Found a lower-cost path to W.</span>
<span class="comment">               * nexthop_calculation is conditional, if it finds</span>
<span class="comment">               * valid nexthop it will call spf_add_parents, which</span>
<span class="comment">               * will flush the old parents</span>
<span class="comment">               */</span>
              <span class="keywordflow">if</span> (<a class="code" href="ospf__spf_8c.html#a40d1cfafed99424787802a239c522202">ospf_nexthop_calculation</a> (area, v, w, l, distance))
                <span class="comment">/* Decrease the key of the node in the heap.</span>
<span class="comment">                 * trickle-sort it up towards root, just in case this</span>
<span class="comment">                 * node should now be the new root due the cost change. </span>
<span class="comment">                 * (next pqueu_{de,en}queue will fully re-heap the queue).</span>
<span class="comment">                 */</span>
                <a class="code" href="pqueue_8c.html#ab8caec03e5beeef534a0dd7258a2abe5">trickle_up</a> (w_lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>, candidate);
            }
        } <span class="comment">/* end W is already on the candidate list */</span>
    } <span class="comment">/* end loop over the links in V&#39;s LSA */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a89a889b454d865321b8f80247a9a19d2"></a><!-- doxytag: member="ospf_spf.c::ospf_spf_process_stubs" ref="a89a889b454d865321b8f80247a9a19d2" args="(struct ospf_area *area, struct vertex *v, struct route_table *rt, int parent_is_root)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_spf_process_stubs </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>parent_is_root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00959">959</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode, *cnnode;
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *child;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stub():processing stubs for area %s&quot;</span>,
               inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
  <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
    {
      u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
      u_char *lim;
      <span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *<a class="code" href="spgrid_8c.html#a92119ef27b84f1e2e15792d7ea360ba4">l</a>;
      <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rlsa;

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stubs():processing router LSA, id: %s&quot;</span>,
                   inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      rlsa = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;


      if (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_process_stubs(): we have %d links to process&quot;</span>,
                   ntohs (rlsa-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>));
      p = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a> + 4;
      lim = ((u_char *) v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>) + ntohs (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);

      <span class="keywordflow">while</span> (p &lt; lim)
        {
          l = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa__link.html">router_lsa_link</a> *) p;

          p += (<a class="code" href="ospf__spf_8c.html#a22bcbf082e875540f44e45e655b59425">ROUTER_LSA_MIN_SIZE</a> +
                (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#a8226c270b80980363c7f2c9e6bbcdc68">tos_count</a> * <a class="code" href="ospf__spf_8c.html#a0ea8f3c91b851621e903b37c345c6575">ROUTER_LSA_TOS_SIZE</a>));

          <span class="keywordflow">if</span> (l-&gt;<a class="code" href="structrouter__lsa__link.html#ab35bb24b1bee7377905174db8ff6c421">m</a>[0].<a class="code" href="structrouter__lsa__link.html#ad396af1f0c0ef3ee10a98928a9da0b5e">type</a> == <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>)
            <a class="code" href="ospf__route_8c.html#ae57967d6e78f08454bec423455f89048">ospf_intra_add_stub</a> (rt, l, v, area, parent_is_root);
        }
    }

  <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot;ospf_process_stubs(): after examining links: &quot;</span>, v, 1, 1);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, cnnode, child))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (child-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>, <a class="code" href="ospf__spf_8h.html#a00ab4c1bac6131947aec6bd7e27178ff">OSPF_VERTEX_PROCESSED</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="comment">/* the first level of routers connected to the root</span>
<span class="comment">       * should have &#39;parent_is_root&#39; set, including those </span>
<span class="comment">       * connected via a network vertex.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ab887a9adef59c020d62b66f9e6d47af3">spf</a> == v)
        parent_is_root = 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a>)
        parent_is_root = 0;
        
      <a class="code" href="ospf__spf_8c.html#a89a889b454d865321b8f80247a9a19d2">ospf_spf_process_stubs</a> (area, child, rt, parent_is_root);

      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (child-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>, <a class="code" href="ospf__spf_8h.html#a00ab4c1bac6131947aec6bd7e27178ff">OSPF_VERTEX_PROCESSED</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a532b38c2d329151809815e36a95c94"></a><!-- doxytag: member="ospf_spf.c::ospf_vertex_add_parent" ref="a1a532b38c2d329151809815e36a95c94" args="(struct vertex *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_vertex_add_parent </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00263">263</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (v &amp;&amp; v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>);
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a> &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>);
      
      <span class="comment">/* No need to add two links from the same parent. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, v) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, v);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab49f70dc521fe070a58dbc928b0eeeb7"></a><!-- doxytag: member="ospf_spf.c::ospf_vertex_dump" ref="ab49f70dc521fe070a58dbc928b0eeeb7" args="(const char *msg, struct vertex *v, int print_parents, int print_children)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_vertex_dump </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>print_parents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>print_children</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00218">218</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> ( ! <a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <span class="keywordflow">return</span>;

  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;%s %s vertex %s  distance %u flags %u&quot;</span>,
            <a class="code" href="structmsg.html">msg</a>,
        v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
        inet_ntoa(v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>),
        v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>,
        (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)v-&gt;<a class="code" href="structvertex.html#ad86a8b81fbf6b2e678d5075444d1e230">flags</a>);

  <span class="keywordflow">if</span> (print_parents)
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
      <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp;
      
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
        {
      <span class="keywordtype">char</span> buf1[BUFSIZ];
      
      <span class="keywordflow">if</span> (vp)
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;parent %s backlink %d nexthop %s  interface %s&quot;</span>,
                     inet_ntoa(vp-&gt;<a class="code" href="structvertex__parent.html#ae25ffce21eed655e370ccbc7511b21c4">parent</a>-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>, buf1, BUFSIZ),
             vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> ? <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a>(vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>) : <span class="stringliteral">&quot;NULL&quot;</span>);
        }
    }
    }

  <span class="keywordflow">if</span> (print_children)
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
      <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *cv;
      
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>, cnode, cv))
        <a class="code" href="ospf__spf_8c.html#ab49f70dc521fe070a58dbc928b0eeeb7">ospf_vertex_dump</a>(<span class="stringliteral">&quot; child:&quot;</span>, cv, 0, 0);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1ea44a6fc9fca346086f90b6af653325"></a><!-- doxytag: member="ospf_spf.c::ospf_vertex_free" ref="a1ea44a6fc9fca346086f90b6af653325" args="(void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_vertex_free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00189">189</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Free %s vertex %s&quot;</span>, __func__,
                v-&gt;<a class="code" href="structvertex.html#a7d43684a984edd81f54be70430b4fa38">type</a> == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
                inet_ntoa (v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
  
  <span class="comment">/* There should be no parents potentially holding references to this vertex</span>
<span class="comment">   * Children however may still be there, but presumably referenced by other</span>
<span class="comment">   * vertices</span>
<span class="comment">   */</span>
  <span class="comment">//assert (listcount (v-&gt;parents) == 0);</span>
  
  <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>)
    <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a>);
  v-&gt;<a class="code" href="structvertex.html#a7b8b1f3ced6ee4512f58be98fe8a1658">children</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>)
    <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>);
  v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>, v);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7351d83284d98ef4de715b053a41d00a"></a><!-- doxytag: member="ospf_spf.c::ospf_vertex_new" ref="a7351d83284d98ef4de715b053a41d00a" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structvertex.html">vertex</a>* ospf_vertex_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00164">164</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba11909f261247cf74ea590cd2fdac8ddf">MTYPE_OSPF_VERTEX</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a>));

  <span class="keyword">new</span>-&gt;flags = 0;
  <span class="keyword">new</span>-&gt;stat = &amp;(lsa-&gt;<a class="code" href="structospf__lsa.html#a15c5409fac2a200bbbd2fbce7930fa6b">stat</a>);
  <span class="keyword">new</span>-&gt;type = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>;
  <span class="keyword">new</span>-&gt;id = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <span class="keyword">new</span>-&gt;lsa = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <span class="keyword">new</span>-&gt;children = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <span class="keyword">new</span>-&gt;parents = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  <span class="keyword">new</span>-&gt;parents-&gt;del = <a class="code" href="ospf__spf_8c.html#af3e91b39071c3c3ad708c7da4f1fc7ae">vertex_parent_free</a>;
  
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (&amp;<a class="code" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">vertex_list</a>, <span class="keyword">new</span>);
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Created %s vertex %s&quot;</span>, __func__,
                new-&gt;type == <a class="code" href="ospf__spf_8h.html#ac43353ddd66a259a45403071a30e9a51">OSPF_VERTEX_ROUTER</a> ? <span class="stringliteral">&quot;Router&quot;</span> : <span class="stringliteral">&quot;Network&quot;</span>,
                inet_ntoa (new-&gt;lsa-&gt;id));
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a82280bfb6f11de00fb0295aee57b48e1"></a><!-- doxytag: member="ospf_spf.c::router_routing_table_same_node" ref="a82280bfb6f11de00fb0295aee57b48e1" args="(struct route_node *old_rn, struct route_node *new_rn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int router_routing_table_same_node </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>old_rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>new_rn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l01229">1229</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *old_rl, *new_rl;
    <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *old_or, *new_or;
    <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *old_op, *new_op;
    <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1, *n2, *pn1, *pn2;

    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(old_rn &amp;&amp; old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(new_rn &amp;&amp; new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);

    old_rl = old_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
    new_rl = new_rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

    <span class="keywordflow">if</span> (old_rl-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != new_rl-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
        <span class="keywordflow">return</span> 0;

    <span class="keywordflow">for</span> (n1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(old_rl), n2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(new_rl);
            n1 &amp;&amp; n2; n1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(n1), n2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(n2))
    {
        old_or = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(n1);
        new_or = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(n2);

        <span class="keywordflow">if</span> (old_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != new_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
            <span class="keywordflow">return</span> 0;

        <span class="keywordflow">for</span> (pn1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(old_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>), pn2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a>(new_or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
                pn1 &amp;&amp; pn2; pn1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(pn1), pn2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a>(pn2))
        { 
            old_op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(pn1);
            new_op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a>(pn2);

            <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;old_op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;new_op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
                <span class="keywordflow">return</span> 0;
        }
    }

    <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7e106bb3265dae7fb42f6484bf208dbe"></a><!-- doxytag: member="ospf_spf.c::update_stat" ref="a7e106bb3265dae7fb42f6484bf208dbe" args="(void *node, int position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void update_stat </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00086">86</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex.html">vertex</a> *v = node;

  <span class="comment">/* Set the status of the vertex, when its position changes. */</span>
  *(v-&gt;<a class="code" href="structvertex.html#a813d38df4026680e6c7bf2a0bb03ca7b">stat</a>) = position;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1663c4ab7996b65fe11a81a238ed33b4"></a><!-- doxytag: member="ospf_spf.c::vertex_nexthop_free" ref="a1663c4ab7996b65fe11a81a238ed33b4" args="(struct vertex_nexthop *nh)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void vertex_nexthop_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *&#160;</td>
          <td class="paramname"><em>nh</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00101">101</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0754a11797569ce40975185bdc0c17ae">MTYPE_OSPF_NEXTHOP</a>, nh);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac96a76738563243d3851a0ee25bbf8cb"></a><!-- doxytag: member="ospf_spf.c::vertex_nexthop_new" ref="ac96a76738563243d3851a0ee25bbf8cb" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a>* vertex_nexthop_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00095">95</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0754a11797569ce40975185bdc0c17ae">MTYPE_OSPF_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex__nexthop.html">vertex_nexthop</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="af3e91b39071c3c3ad708c7da4f1fc7ae"></a><!-- doxytag: member="ospf_spf.c::vertex_parent_free" ref="af3e91b39071c3c3ad708c7da4f1fc7ae" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void vertex_parent_free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00158">158</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa5f6cbe61d28b5d1cd965cf46dd110a7">MTYPE_OSPF_VERTEX_PARENT</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c58442d769f8c4ec9bb88b1a7f67d84"></a><!-- doxytag: member="ospf_spf.c::vertex_parent_new" ref="a3c58442d769f8c4ec9bb88b1a7f67d84" args="(struct vertex *v, int backlink, struct vertex_nexthop *hop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structvertex__parent.html">vertex_parent</a>* vertex_parent_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>backlink</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex__nexthop.html">vertex_nexthop</a> *&#160;</td>
          <td class="paramname"><em>hop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00142">142</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *<span class="keyword">new</span>;
  
  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa5f6cbe61d28b5d1cd965cf46dd110a7">MTYPE_OSPF_VERTEX_PARENT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structvertex__parent.html">vertex_parent</a>));
  
  <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="keyword">new</span>-&gt;parent = v;
  <span class="keyword">new</span>-&gt;backlink = <a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>;
  <span class="keyword">new</span>-&gt;nexthop = hop;
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a9fe110f90582c53b71617b4e3a2c2f37"></a><!-- doxytag: member="ospf_spf.c::vertex_list" ref="a9fe110f90582c53b71617b4e3a2c2f37" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structlist.html">list</a> <a class="el" href="ospf__spf_8c.html#a9fe110f90582c53b71617b4e3a2c2f37">vertex_list</a> = { .del = ospf_vertex_free }<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__spf_8c_source.html#l00054">54</a> of file <a class="el" href="ospf__spf_8c_source.html">ospf_spf.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__spf_8c.html">ospf_spf.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:30 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
