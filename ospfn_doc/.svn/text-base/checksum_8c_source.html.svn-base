<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/checksum.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('checksum_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/checksum.c</div>  </div>
</div>
<div class="contents">
<a href="checksum_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Checksum routine for Internet Protocol family headers (C Version).</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Refer to &quot;Computing the Internet Checksum&quot; by R. Braden, D. Borman and</span>
<a name="l00005"></a>00005 <span class="comment"> * C. Partridge, Computer Communication Review, Vol. 19, No. 2, April 1989,</span>
<a name="l00006"></a>00006 <span class="comment"> * pp. 86-101, for additional details on computing this checksum.</span>
<a name="l00007"></a>00007 <span class="comment"> */</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;<a class="code" href="checksum_8h.html">checksum.h</a>&quot;</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="keywordtype">int</span>         <span class="comment">/* return checksum in low-order 16 bits */</span>
<a name="l00013"></a><a class="code" href="checksum_8h.html#a83dc5cd39bc430492ed285427b9c1718">00013</a> <a class="code" href="checksum_8c.html#afd7d8e31fdd7d500d89ee477149e95fd">in_cksum</a>(<span class="keywordtype">void</span> *parg, <span class="keywordtype">int</span> nbytes)
<a name="l00014"></a>00014 {
<a name="l00015"></a>00015     u_short *ptr = parg;
<a name="l00016"></a>00016     <span class="keyword">register</span> <span class="keywordtype">long</span>       sum;        <span class="comment">/* assumes long == 32 bits */</span>
<a name="l00017"></a>00017     u_short         oddbyte;
<a name="l00018"></a>00018     <span class="keyword">register</span> u_short    answer;     <span class="comment">/* assumes u_short == 16 bits */</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020     <span class="comment">/*</span>
<a name="l00021"></a>00021 <span class="comment">     * Our algorithm is simple, using a 32-bit accumulator (sum),</span>
<a name="l00022"></a>00022 <span class="comment">     * we add sequential 16-bit words to it, and at the end, fold back</span>
<a name="l00023"></a>00023 <span class="comment">     * all the carry bits from the top 16 bits into the lower 16 bits.</span>
<a name="l00024"></a>00024 <span class="comment">     */</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026     sum = 0;
<a name="l00027"></a>00027     <span class="keywordflow">while</span> (nbytes &gt; 1)  {
<a name="l00028"></a>00028         sum += *ptr++;
<a name="l00029"></a>00029         nbytes -= 2;
<a name="l00030"></a>00030     }
<a name="l00031"></a>00031 
<a name="l00032"></a>00032                 <span class="comment">/* mop up an odd byte, if necessary */</span>
<a name="l00033"></a>00033     <span class="keywordflow">if</span> (nbytes == 1) {
<a name="l00034"></a>00034         oddbyte = 0;        <span class="comment">/* make sure top half is zero */</span>
<a name="l00035"></a>00035         *((u_char *) &amp;oddbyte) = *(u_char *)ptr;   <span class="comment">/* one byte only */</span>
<a name="l00036"></a>00036         sum += oddbyte;
<a name="l00037"></a>00037     }
<a name="l00038"></a>00038 
<a name="l00039"></a>00039     <span class="comment">/*</span>
<a name="l00040"></a>00040 <span class="comment">     * Add back carry outs from top 16 bits to low 16 bits.</span>
<a name="l00041"></a>00041 <span class="comment">     */</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     sum  = (sum &gt;&gt; 16) + (sum &amp; 0xffff);    <span class="comment">/* add high-16 to low-16 */</span>
<a name="l00044"></a>00044     sum += (sum &gt;&gt; 16);         <span class="comment">/* add carry */</span>
<a name="l00045"></a>00045     answer = ~sum;      <span class="comment">/* ones-complement, then truncate to 16 bits */</span>
<a name="l00046"></a>00046     <span class="keywordflow">return</span>(answer);
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">/* Fletcher Checksum -- Refer to RFC1008. */</span>
<a name="l00050"></a><a class="code" href="checksum_8c.html#a11e929bea3766df0637b90580e8865fc">00050</a> <span class="preprocessor">#define MODX                 4102   </span><span class="comment">/* 5802 should be fine */</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/* To be consistent, offset is 0-based index, rather than the 1-based </span>
<a name="l00053"></a>00053 <span class="comment">   index required in the specification ISO 8473, Annex C.1 */</span>
<a name="l00054"></a>00054 u_int16_t
<a name="l00055"></a><a class="code" href="checksum_8h.html#adb5c685152b2e30c115d145e4a7db265">00055</a> <a class="code" href="checksum_8c.html#a097fa5404eb654e8e112bb954bf4ef15">fletcher_checksum</a>(u_char * <a class="code" href="structbuffer.html">buffer</a>, <span class="keyword">const</span> <span class="keywordtype">size_t</span> len, <span class="keyword">const</span> uint16_t offset)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057   u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00058"></a>00058   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>, <a class="code" href="spgrid_8c.html#a04ee6b20e6d3476ab1f51397993cfeef">y</a>, <a class="code" href="test-checksum_8c.html#ac18b3d0edccb2b9062a09d00b0d8b83b">c0</a>, <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
<a name="l00059"></a>00059   u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
<a name="l00060"></a>00060   u_int16_t *csum;
<a name="l00061"></a>00061   <span class="keywordtype">size_t</span> partial_len, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="dict_8c.html#a428f8207615465afdfcf1d31547ffef3">left</a> = len;
<a name="l00062"></a>00062   
<a name="l00063"></a>00063   checksum = 0;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (offset &lt; len);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067   <span class="comment">/*</span>
<a name="l00068"></a>00068 <span class="comment">   * Zero the csum in the packet.</span>
<a name="l00069"></a>00069 <span class="comment">   */</span>
<a name="l00070"></a>00070   csum = (u_int16_t *) (buffer + offset);
<a name="l00071"></a>00071   *(csum) = 0;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   p = buffer;
<a name="l00074"></a>00074   c0 = 0;
<a name="l00075"></a>00075   c1 = 0;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="keywordflow">while</span> (left != 0)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079       partial_len = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(left, <a class="code" href="checksum_8c.html#a11e929bea3766df0637b90580e8865fc">MODX</a>);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081       <span class="keywordflow">for</span> (i = 0; i &lt; partial_len; i++)
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083       c0 = c0 + *(p++);
<a name="l00084"></a>00084       c1 += c0;
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       c0 = c0 % 255;
<a name="l00088"></a>00088       c1 = c1 % 255;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090       left -= partial_len;
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092   
<a name="l00093"></a>00093   <span class="comment">/* The cast is important, to ensure the mod is taken as a signed value. */</span>
<a name="l00094"></a>00094   x = (int)((len - offset - 1) * c0 - c1) % 255;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="keywordflow">if</span> (x &lt;= 0)
<a name="l00097"></a>00097     x += 255;
<a name="l00098"></a>00098   y = 510 - c0 - <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>;
<a name="l00099"></a>00099   <span class="keywordflow">if</span> (y &gt; 255)  
<a name="l00100"></a>00100     y -= 255;
<a name="l00101"></a>00101   
<a name="l00102"></a>00102   <span class="comment">/*</span>
<a name="l00103"></a>00103 <span class="comment">   * Now we write this to the packet.</span>
<a name="l00104"></a>00104 <span class="comment">   * We could skip this step too, since the checksum returned would</span>
<a name="l00105"></a>00105 <span class="comment">   * be stored into the checksum field by the caller.</span>
<a name="l00106"></a>00106 <span class="comment">   */</span>
<a name="l00107"></a>00107   buffer[offset] = <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>;
<a name="l00108"></a>00108   buffer[offset + 1] = <a class="code" href="spgrid_8c.html#a04ee6b20e6d3476ab1f51397993cfeef">y</a>;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="comment">/* Take care of the endian issue */</span>
<a name="l00111"></a>00111   checksum = htons((x &lt;&lt; 8) | (y &amp; 0xFF));
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
<a name="l00114"></a>00114 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="checksum_8c.html">checksum.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
