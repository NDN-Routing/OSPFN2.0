<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/memory.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('memory_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/memory.h</div>  </div>
</div>
<div class="contents">
<a href="memory_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Memory management routine</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1998 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef _ZEBRA_MEMORY_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define _ZEBRA_MEMORY_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="comment">/* For pretty printing of memory allocate information. */</span>
<a name="l00025"></a><a class="code" href="structmemory__list.html">00025</a> <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a>
<a name="l00026"></a>00026 {
<a name="l00027"></a><a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">00027</a>   <span class="keywordtype">int</span> <a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>;
<a name="l00028"></a><a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">00028</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">format</a>;
<a name="l00029"></a>00029 };
<a name="l00030"></a>00030 
<a name="l00031"></a><a class="code" href="structmlist.html">00031</a> <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> {
<a name="l00032"></a><a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">00032</a>   <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>;
<a name="l00033"></a><a class="code" href="structmlist.html#a0228a09dd67fb303f0731f67e02f1910">00033</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structmlist.html#a0228a09dd67fb303f0731f67e02f1910">name</a>;
<a name="l00034"></a>00034 };
<a name="l00035"></a>00035  
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="memtypes_8h.html">lib/memtypes.h</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> <a class="code" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a>[];
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">/* #define MEMORY_LOG */</span>
<a name="l00041"></a>00041 <span class="preprocessor">#ifdef MEMORY_LOG</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define XMALLOC(mtype, size) \</span>
<a name="l00043"></a>00043 <span class="preprocessor">  mtype_zmalloc (__FILE__, __LINE__, (mtype), (size))</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#define XCALLOC(mtype, size) \</span>
<a name="l00045"></a>00045 <span class="preprocessor">  mtype_zcalloc (__FILE__, __LINE__, (mtype), (size))</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#define XREALLOC(mtype, ptr, size)  \</span>
<a name="l00047"></a>00047 <span class="preprocessor">  mtype_zrealloc (__FILE__, __LINE__, (mtype), (ptr), (size))</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define XFREE(mtype, ptr) \</span>
<a name="l00049"></a>00049 <span class="preprocessor">  do { \</span>
<a name="l00050"></a>00050 <span class="preprocessor">    mtype_zfree (__FILE__, __LINE__, (mtype), (ptr)); \</span>
<a name="l00051"></a>00051 <span class="preprocessor">    ptr = NULL; } \</span>
<a name="l00052"></a>00052 <span class="preprocessor">  while (0)</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#define XSTRDUP(mtype, str) \</span>
<a name="l00054"></a>00054 <span class="preprocessor">  mtype_zstrdup (__FILE__, __LINE__, (mtype), (str))</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00056"></a><a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">00056</a> <span class="preprocessor"></span><span class="preprocessor">#define XMALLOC(mtype, size)       zmalloc ((mtype), (size))</span>
<a name="l00057"></a><a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">00057</a> <span class="preprocessor"></span><span class="preprocessor">#define XCALLOC(mtype, size)       zcalloc ((mtype), (size))</span>
<a name="l00058"></a><a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">00058</a> <span class="preprocessor"></span><span class="preprocessor">#define XREALLOC(mtype, ptr, size) zrealloc ((mtype), (ptr), (size))</span>
<a name="l00059"></a><a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">00059</a> <span class="preprocessor"></span><span class="preprocessor">#define XFREE(mtype, ptr)          do { \</span>
<a name="l00060"></a>00060 <span class="preprocessor">                                     zfree ((mtype), (ptr)); \</span>
<a name="l00061"></a>00061 <span class="preprocessor">                                     ptr = NULL; } \</span>
<a name="l00062"></a>00062 <span class="preprocessor">                                   while (0)</span>
<a name="l00063"></a><a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">00063</a> <span class="preprocessor"></span><span class="preprocessor">#define XSTRDUP(mtype, str)        zstrdup ((mtype), (str))</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* MEMORY_LOG */</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">/* Prototypes of memory function. */</span>
<a name="l00067"></a>00067 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8c.html#ae9ef273b7d106df41a60841b39fa05ed">zmalloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size);
<a name="l00068"></a>00068 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8c.html#a073aba15d97cebfdb6f92bc72e82ad8d">zcalloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size);
<a name="l00069"></a>00069 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8c.html#af1da103c3db99ab17c5cbf524d83ce85">zrealloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *ptr, <span class="keywordtype">size_t</span> size);
<a name="l00070"></a>00070 <span class="keyword">extern</span> <span class="keywordtype">void</span>  <a class="code" href="memory_8c.html#ac383faa9d2f7922fd0140725ec1ec231">zfree</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *ptr);
<a name="l00071"></a>00071 <span class="keyword">extern</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#ae1cf7d80fe0331451c22a9227525c82c">zstrdup</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8h.html#a1669707dff7c686d7a03716a50b7665d">mtype_zmalloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size);
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8h.html#ac1323396c8d1aa2bd9eb71cbd8d6e659">mtype_zcalloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size);
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keyword">extern</span> <span class="keywordtype">void</span> *<a class="code" href="memory_8h.html#a86c386976d00dcd4c08826cde3cd0bd2">mtype_zrealloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *ptr,
<a name="l00078"></a>00078                      <span class="keywordtype">size_t</span> size);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="memory_8h.html#aa5dd6a3b0f02d62fc62acde85bb4d1e3">mtype_zfree</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
<a name="l00081"></a>00081                  <span class="keywordtype">void</span> *ptr);
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">extern</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8h.html#ab67c1b6120c30a3f3fd0769c7ded870f">mtype_zstrdup</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
<a name="l00084"></a>00084                     <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>);
<a name="l00085"></a>00085 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="memory_8c.html#a34f25b1ca1556d0890274a971d46af10">memory_init</a> (<span class="keywordtype">void</span>);
<a name="l00086"></a>00086 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="memory_8c.html#a135bc21220ef77fdd44df1da49313ac9">log_memstats_stderr</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">/* return number of allocations outstanding for the type */</span>
<a name="l00089"></a>00089 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="memory_8c.html#a8f242036e581a1a447b79199d9a130ba">mtype_stats_alloc</a> (<span class="keywordtype">int</span>);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="comment">/* Human friendly string for given byte count */</span>
<a name="l00092"></a><a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">00092</a> <span class="preprocessor">#define MTYPE_MEMSTR_LEN 20</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (<span class="keywordtype">char</span> *, <span class="keywordtype">size_t</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>);
<a name="l00094"></a>00094 <span class="preprocessor">#endif </span><span class="comment">/* _ZEBRA_MEMORY_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="memory_8h.html">memory.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
