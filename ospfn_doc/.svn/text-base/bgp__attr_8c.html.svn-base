<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_attr.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__attr_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_attr.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="vector_8h_source.html">vector.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="vty_8h_source.html">vty.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__aspath_8h_source.html">bgpd/bgp_aspath.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__community_8h_source.html">bgpd/bgp_community.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__packet_8h_source.html">bgpd/bgp_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__ecommunity_8h_source.html">bgpd/bgp_ecommunity.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_attr.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__attr_8c__incl.png" border="0" usemap="#bgpd_2bgp__attr_8c" alt=""/></div>
<map name="bgpd_2bgp__attr_8c" id="bgpd_2bgp__attr_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1433,80,1500,107"/><area shape="rect" id="node61" href="linklist_8h.html" title="linklist.h" alt="" coords="2697,80,2767,107"/><area shape="rect" id="node63" href="prefix_8h.html" title="prefix.h" alt="" coords="3250,155,3317,181"/><area shape="rect" id="node67" href="memory_8h.html" title="memory.h" alt="" coords="2792,80,2875,107"/><area shape="rect" id="node71" href="vector_8h.html" title="vector.h" alt="" coords="2949,80,3021,107"/><area shape="rect" id="node73" href="vty_8h.html" title="vty.h" alt="" coords="3046,80,3097,107"/><area shape="rect" id="node77" href="log_8h.html" title="log.h" alt="" coords="2938,155,2989,181"/><area shape="rect" id="node80" href="stream_8h.html" title="stream.h" alt="" coords="3247,80,3321,107"/><area shape="rect" id="node84" href="hash_8h.html" title="hash.h" alt="" coords="3345,80,3407,107"/><area shape="rect" id="node86" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3122,80,3221,107"/><area shape="rect" id="node89" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="3876,155,3996,181"/><area shape="rect" id="node91" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="3481,80,3612,107"/><area shape="rect" id="node95" href="bgp__aspath_8h.html" title="bgpd/bgp_aspath.h" alt="" coords="3799,80,3939,107"/><area shape="rect" id="node97" href="bgp__community_8h.html" title="bgpd/bgp_community.h" alt="" coords="3964,80,4129,107"/><area shape="rect" id="node99" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="3636,80,3775,107"/><area shape="rect" id="node102" href="bgp__packet_8h.html" title="bgpd/bgp_packet.h" alt="" coords="4205,80,4344,107"/><area shape="rect" id="node104" href="bgp__ecommunity_8h.html" title="bgpd/bgp_ecommunity.h" alt="" coords="4369,80,4543,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1992,155,2069,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2094,155,2143,181"/><area shape="rect" id="node65" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3191,229,3284,256"/><area shape="rect" id="node69" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="2799,155,2913,181"/><area shape="rect" id="node75" href="thread_8h.html" title="thread.h" alt="" coords="3036,155,3108,181"/><area shape="rect" id="node93" href="bgp__table_8h.html" title="bgp_table.h" alt="" coords="3499,155,3593,181"/></map>
</div>
</div>
<p><a href="bgp__attr_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a1dfef5b5f9a0ab08cc5cd190b5f1ab91">BGP_MP_REACH_MIN_SIZE</a>&#160;&#160;&#160;5</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc">LEN_LEFT</a>&#160;&#160;&#160;(<a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> - (stream_get_getp(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - start))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aa53b9e0198c876e6ba4251c44b707045">BGP_MP_UNREACH_MIN_SIZE</a>&#160;&#160;&#160;3</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a18083a7910f116540140cefeec1767b2">cluster_parse</a> (struct in_addr *pnt, int <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#af224634d5d6d41781af26d88d9f3c85b">cluster_loop_check</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *cluster, struct in_addr originator)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a50947dd6085f3f4faa6412c860de5986">cluster_hash_cmp</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *cluster)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">cluster_intern</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *cluster)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *cluster)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">cluster_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">cluster_finish</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (struct <a class="el" href="structtransit.html">transit</a> *<a class="el" href="structtransit.html">transit</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a182ab19c92782f43ccbfe5ff1d74bf79">transit_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structtransit.html">transit</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (struct <a class="el" href="structtransit.html">transit</a> *<a class="el" href="structtransit.html">transit</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (struct <a class="el" href="structtransit.html">transit</a> *<a class="el" href="structtransit.html">transit</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#af01f647e7433ef979c1956a7cd31cfbf">transit_hash_cmp</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">transit_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">transit_finish</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structattr__extra.html">attr_extra</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr__extra.html">attr_extra</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a39f33acb3fdd3ade629a9b7d66e74ea9">bgp_attr_dup</a> (struct <a class="el" href="structattr.html">attr</a> *new, struct <a class="el" href="structattr.html">attr</a> *orig)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#abf6f340c9796631aa1b7bf14bcadd0f8">attr_count</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a7802e598375cc4a09f11e175b70f32ae">attr_unknown_count</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aef00519644383d0b101d93d5c58287e5">attrhash_key_make</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">attrhash_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">attrhash_finish</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">attr_show_all_iterator</a> (struct <a class="el" href="structhash__backet.html">hash_backet</a> *backet, struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ac5b48483843ddf098f1b39f25d174ae9">attr_show_all</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">bgp_attr_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char origin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a975568591569d47a1a18abf72484138a">bgp_attr_default_intern</a> (u_char origin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a70102643d18571653470b272db04c205">bgp_attr_aggregate_intern</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, u_char origin, struct <a class="el" href="structaspath.html">aspath</a> *<a class="el" href="structaspath.html">aspath</a>, struct <a class="el" href="structcommunity.html">community</a> *<a class="el" href="structcommunity.html">community</a>, int as_set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a3ea9ed94bcd0236f8f83310615e7c022">bgp_attr_flush</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">bgp_attr_aspathlimit</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char *startp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">bgp_attr_origin</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char *startp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structaspath.html">aspath</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char *startp, int as4_path)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">bgp_attr_aspath_check</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">bgp_attr_nexthop</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char *startp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">bgp_attr_med</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char *startp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">bgp_attr_local_pref</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">bgp_attr_atomic</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">bgp_attr_aggregator</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">bgp_attr_as4_aggregator</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as4_aggregator_as, struct in_addr *as4_aggregator_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">bgp_attr_munge_as4_attrs</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, struct <a class="el" href="structaspath.html">aspath</a> *as4_path, <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4_aggregator, struct in_addr *as4_aggregator_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">bgp_attr_community</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">bgp_attr_originator_id</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">bgp_attr_cluster_list</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a3d8c4bfcee360cc1aeb5b4c1b7033360">bgp_mp_reach_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *mp_update)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#af99785d5e3ee803d5d4b7021e0b8448a">bgp_mp_unreach_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *mp_withdraw)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">bgp_attr_ext_communities</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">bgp_attr_unknown</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char flag, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, u_char *startp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#aa14660c4ba4237fe5afa5f0e7700479a">bgp_attr_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *mp_update, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *mp_withdraw)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a8a1ebdfc7d1986e7f14e9146c58915e4">bgp_attr_check</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, struct <a class="el" href="structpeer.html">peer</a> *from, struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *prd, u_char *tag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a9c65ea9c30a455a48fcc49820025780d">bgp_attr_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#af16afab87ca745e1e019518a3f012cab">bgp_attr_finish</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a1a02efc1fa4f47e5fa5b9ee42edd6d57">bgp_dump_routes_attr</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="structprefix.html">prefix</a>)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a5c93897cae64d8a135b0abd7f4994b57">attr_str_max</a> = sizeof(<a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>)/sizeof(<a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>[0])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a1dfef5b5f9a0ab08cc5cd190b5f1ab91"></a><!-- doxytag: member="bgp_attr.c::BGP_MP_REACH_MIN_SIZE" ref="a1dfef5b5f9a0ab08cc5cd190b5f1ab91" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_MP_REACH_MIN_SIZE&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa53b9e0198c876e6ba4251c44b707045"></a><!-- doxytag: member="bgp_attr.c::BGP_MP_UNREACH_MIN_SIZE" ref="aa53b9e0198c876e6ba4251c44b707045" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_MP_UNREACH_MIN_SIZE&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc"></a><!-- doxytag: member="bgp_attr.c::LEN_LEFT" ref="aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LEN_LEFT&#160;&#160;&#160;(<a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> - (stream_get_getp(<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - start))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="abf6f340c9796631aa1b7bf14bcadd0f8"></a><!-- doxytag: member="bgp_attr.c::attr_count" ref="abf6f340c9796631aa1b7bf14bcadd0f8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int attr_count </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00341">341</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5b48483843ddf098f1b39f25d174ae9"></a><!-- doxytag: member="bgp_attr.c::attr_show_all" ref="ac5b48483843ddf098f1b39f25d174ae9" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void attr_show_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00471">471</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, 
        (<span class="keywordtype">void</span> (*)(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *, <span class="keywordtype">void</span> *))
        <a class="code" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">attr_show_all_iterator</a>,
        vty);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a14730c63513b5bf81ff42d4588f62920"></a><!-- doxytag: member="bgp_attr.c::attr_show_all_iterator" ref="a14730c63513b5bf81ff42d4588f62920" args="(struct hash_backet *backet, struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void attr_show_all_iterator </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash__backet.html">hash_backet</a> *&#160;</td>
          <td class="paramname"><em>backet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00462">462</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a> = backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;attr[%ld] nexthop %s%s&quot;</span>, attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>, 
       inet_ntoa (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7802e598375cc4a09f11e175b70f32ae"></a><!-- doxytag: member="bgp_attr.c::attr_unknown_count" ref="a7802e598375cc4a09f11e175b70f32ae" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int attr_unknown_count </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00347">347</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a95c1ea9ce12032797eb35c31ad20180d"></a><!-- doxytag: member="bgp_attr.c::attrhash_cmp" ref="a95c1ea9ce12032797eb35c31ad20180d" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int attrhash_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00407">407</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr1 = p1;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr2 = p2;

  <span class="keywordflow">if</span> (attr1-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> == attr2-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> == attr2-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == attr2-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> == attr2-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> == attr2-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> == attr2-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> == attr2-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
    {
      <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae1 = attr1-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae2 = attr2-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <span class="keywordflow">if</span> (ae1 &amp;&amp; ae2
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr == ae2-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>
#ifdef HAVE_IPV6
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == ae2-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>
          &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_global, &amp;ae2-&gt;mp_nexthop_global)
          &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_local, &amp;ae2-&gt;mp_nexthop_local)
#endif <span class="comment">/* HAVE_IPV6 */</span>
          &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;ae1-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, &amp;ae2-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>)
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> == ae2-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        <span class="keywordflow">return</span> 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ae1 || ae2)
        <span class="keywordflow">return</span> 0;
      <span class="comment">/* neither attribute has extra attributes, so they&#39;re same */</span>
      <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2dd32c1c32bc66e0991f4317908b1e7f"></a><!-- doxytag: member="bgp_attr.c::attrhash_finish" ref="a2dd32c1c32bc66e0991f4317908b1e7f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void attrhash_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00455">455</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>);
  <a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3cab087c33c2777f3b95a66efcd2c723"></a><!-- doxytag: member="bgp_attr.c::attrhash_init" ref="a3cab087c33c2777f3b95a66efcd2c723" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void attrhash_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00449">449</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a> = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#aef00519644383d0b101d93d5c58287e5">attrhash_key_make</a>, <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aef00519644383d0b101d93d5c58287e5"></a><!-- doxytag: member="bgp_attr.c::attrhash_key_make" ref="aef00519644383d0b101d93d5c58287e5" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int attrhash_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00353">353</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * <a class="code" href="structattr.html">attr</a> = (<span class="keyword">struct </span>attr *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;

  key += attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
  key += attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr;
  key += attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
  key += attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>;
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
    {
      key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
    }
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>.s_addr;
    }
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    key += <a class="code" href="bgp__aspath_8c.html#a0ff2c762b3aea1084db8500839a8d314">aspath_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
    key += <a class="code" href="bgp__community_8c.html#ad929d0c5734e5a2df900d29ab3c59921">community_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
        key += <a class="code" href="bgp__ecommunity_8c.html#adb13cb51e62ac1f0e4a3cf6137748409">ecommunity_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
        key += <a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        key += <a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      {
        <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
        
        key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>;
        <span class="keywordflow">for</span> (i = 0; i &lt; 16; i++)
          key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global.s6_addr[i];
        for (i = 0; i &lt; 16; i++)
          key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local.s6_addr[i];
      }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }

  <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70102643d18571653470b272db04c205"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_aggregate_intern" ref="a70102643d18571653470b272db04c205" args="(struct bgp *bgp, u_char origin, struct aspath *aspath, struct community *community, int as_set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_aggregate_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structaspath.html">aspath</a> *&#160;</td>
          <td class="paramname"><em>aspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcommunity.html">community</a> *&#160;</td>
          <td class="paramname"><em>community</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>as_set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00593">593</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;

  memset (&amp;<a class="code" href="structattr.html">attr</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a>));
  attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = origin;
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);

  <span class="comment">/* AS path attribute. */</span>
  <span class="keywordflow">if</span> (aspath)
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (aspath);
  <span class="keywordflow">else</span>
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);

  <span class="comment">/* Next hop attribute.  */</span>
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);

  <span class="keywordflow">if</span> (community)
    {
      <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = community;
      <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
    }

  attre-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (! as_set)
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
  <span class="keywordflow">else</span>
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
  attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a> = bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;

  <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aec3a552b65cbb441a514cf718c70ab0b"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_aggregator" ref="aec3a552b65cbb441a514cf718c70ab0b" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_aggregator </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01057">1057</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> wantedlen = 6;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr);
  
  <span class="comment">/* peer with AS4 will send 4 Byte AS, peer without will send 2 Byte */</span>
  <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a> ) )
    wantedlen = 8;
  
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != wantedlen)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Aggregator length is not %d [%d]&quot;</span>, wantedlen, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a> ) )
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <span class="keywordflow">else</span>
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  <span class="comment">/* Set atomic aggregate flag. */</span>
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afea6c898d8c3fc0033930e5f7673c68d"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_as4_aggregator" ref="afea6c898d8c3fc0033930e5f7673c68d" args="(struct peer *peer, bgp_size_t length, struct attr *attr, as_t *as4_aggregator_as, struct in_addr *as4_aggregator_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_as4_aggregator </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *&#160;</td>
          <td class="paramname"><em>as4_aggregator_as</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>as4_aggregator_addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01091">1091</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 8)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;New Aggregator length is not 8 [%d]&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }
  *as4_aggregator_as = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  as4_aggregator_addr-&gt;s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9d565c4d45753ff5b98ca6cafae517cf"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_aspath" ref="a9d565c4d45753ff5b98ca6cafae517cf" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag, u_char *startp, int as4_path)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structaspath.html">aspath</a>* bgp_attr_aspath </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>as4_path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00822">822</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char require ;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *asp ;

  <span class="comment">/* Check the attribute flags                                          */</span>
  require = as4_path ? <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a> | <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>
                     :                          <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a> ;

  <span class="keywordflow">if</span> ((flag &amp; (<a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a> | <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)) != require)
    {
      <span class="keyword">const</span> <span class="keywordtype">char</span>* path_type ;
      <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;

      path_type = as4_path ? <span class="stringliteral">&quot;AS4_PATH&quot;</span> : <span class="stringliteral">&quot;AS_PATH&quot;</span> ;

      <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
            <span class="stringliteral">&quot;%s attribute flag isn&#39;t transitive %d&quot;</span>, path_type, flag) ;

      <span class="keywordflow">if</span> ((flag &amp; <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>) != (require &amp; BGP_ATTR_FLAG_OPTIONAL))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR,
            <span class="stringliteral">&quot;%s attribute flag must %sbe optional %d&quot;</span>, path_type,
            (flag &amp; BGP_ATTR_FLAG_OPTIONAL) ? <span class="stringliteral">&quot;not &quot;</span> : <span class="stringliteral">&quot;&quot;</span>, flag) ;

      total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);

      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
                 startp, total);

      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ;
    } ;

  <span class="comment">/* Parse the AS_PATH/AS4_PATH body.</span>
<span class="comment">   *</span>
<span class="comment">   * For AS_PATH  peer with AS4 =&gt; 4Byte ASN otherwise 2Byte ASN</span>
<span class="comment">   *     AS4_PATH 4Byte ASN</span>
<span class="comment">   */</span>
  asp = <a class="code" href="bgp__aspath_8c.html#ac9e8aff45338b803e560318286e3f2af">aspath_parse</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
               as4_path || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>), as4_path) ;

  <span class="keywordflow">if</span> (asp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (as4_path ? <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>
                                            : <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>) ;
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Malformed AS path length is %d&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <span class="comment">/* TODO: should BGP_NOTIFY_UPDATE_MAL_AS_PATH be sent for AS4_PATH ??  */</span>
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
    } ;

  <span class="keywordflow">return</span> asp ;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5fe31069dae03e5a79cb15b05870d5c"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_aspath_check" ref="ac5fe31069dae03e5a79cb15b05870d5c" args="(struct peer *peer, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_aspath_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00884">884</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* These checks were part of bgp_attr_aspath, but with</span>
<span class="comment">   * as4 we should to check aspath things when</span>
<span class="comment">   * aspath synthesizing with as4_path has already taken place.</span>
<span class="comment">   * Otherwise we check ASPATH and use the synthesized thing, and that is</span>
<span class="comment">   * not right.</span>
<span class="comment">   * So do the checks later, i.e. here</span>
<span class="comment">   */</span>
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;

  bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
    
  <span class="comment">/* Confederation sanity check. */</span>
  <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a> &amp;&amp; ! <a class="code" href="bgp__aspath_8c.html#a2ea3a3f15468d013b12a0ee4558026b5">aspath_left_confed_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)) ||
     (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; <a class="code" href="bgp__aspath_8c.html#ab2915d467a13796ada52e009773a5776">aspath_confed_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Malformed AS path from %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* First AS check for EBGP. */</span>
  <span class="keywordflow">if</span> (bgp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abbc81a8ba88ca76497f8d2838ea81401">BGP_FLAG_ENFORCE_FIRST_AS</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> 
      &amp;&amp; ! <a class="code" href="bgp__aspath_8c.html#a9ed7eb61027a6f70bb24f3ffc5cc399f">aspath_firstas_check</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR,
        <span class="stringliteral">&quot;%s incorrect first AS (must be %u)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
               <a class="code" href="bgpd_8h.html#a5af0f9968a9bcbff5a85b0fd86e29e2a">BGP_NOTIFY_UPDATE_MAL_AS_PATH</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* local-as prepend */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> &amp;&amp;
      ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>))
    {
      aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>);
      <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (aspath);
    }

  <span class="keywordflow">return</span> 0;

}
</pre></div>
</div>
</div>
<a class="anchor" id="acd627446e5d7faa1c37f2cf45da1decf"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_aspathlimit" ref="acd627446e5d7faa1c37f2cf45da1decf" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag, u_char *startp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_aspathlimit </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00709">709</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
  
  total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);
  
  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)
       || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
        <span class="stringliteral">&quot;AS-Pathlimit attribute flag isn&#39;t transitive %d&quot;</span>, flag);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 5)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
        <span class="stringliteral">&quot;AS-Pathlimit length, %u, is not 5&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }
  
  attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
  attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5c49f0535902aeda2399ccb7bb016a1f"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_atomic" ref="a5c49f0535902aeda2399ccb7bb016a1f" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_atomic </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01036">1036</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad atomic aggregate length %d&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Set atomic aggregate flag. */</span>
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a1ebdfc7d1986e7f14e9146c58915e4"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_check" ref="a8a1ebdfc7d1986e7f14e9146c58915e4" args="(struct peer *peer, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_attr_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01812">1812</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>)))
    type = <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
    type = <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>)))
    type = <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
      &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>)))
    type = <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>;

  <span class="keywordflow">if</span> (type)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s Missing well-known attribute %d.&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#af452ed83988422b98f2ec9c8ee97c23a">BGP_NOTIFY_UPDATE_MISS_ATTR</a>,
                 &amp;type, 1);
      <span class="keywordflow">return</span> -1;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a21736af0634e478b2082cc415066128d"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_cluster_list" ref="a21736af0634e478b2082cc415066128d" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_cluster_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01275">1275</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Check length. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> % 4)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad cluster list length %d&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

  (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;cluster 
    = <a class="code" href="bgp__attr_8c.html#a18083a7910f116540140cefeec1767b2">cluster_parse</a> ((<span class="keyword">struct</span> in_addr *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);;

  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7288e6a11e328af4566a2461e695b463"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_community" ref="a7288e6a11e328af4566a2461e695b463" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_community </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01230">1230</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> == 0)
    {
      attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">else</span>
    {
      attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = 
        <a class="code" href="bgp__community_8c.html#aa550dd7b846e8e409cece29583b6f7b5">community_parse</a> ((u_int32_t *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
    }

  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a975568591569d47a1a18abf72484138a"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_default_intern" ref="a975568591569d47a1a18abf72484138a" args="(u_char origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_default_intern </td>
          <td>(</td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>origin</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00574">574</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;
  
  memset (&amp;<a class="code" href="structattr.html">attr</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a>));
  attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a>(&amp;<a class="code" href="structattr.html">attr</a>, origin);

  <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afe11e9b57f736617eca855aceae26f28"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_default_set" ref="afe11e9b57f736617eca855aceae26f28" args="(struct attr *attr, u_char origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_default_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>origin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00553">553</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  memset (attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
  <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr);
  
  attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = origin;
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">return</span> attr;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a39f33acb3fdd3ade629a9b7d66e74ea9"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_dup" ref="a39f33acb3fdd3ade629a9b7d66e74ea9" args="(struct attr *new, struct attr *orig)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_dup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>orig</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00330">330</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  *<span class="keyword">new</span> = *orig;
  <span class="keywordflow">if</span> (orig-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keyword">new</span>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
      *<span class="keyword">new</span>-&gt;extra = *orig-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a525e1542dfd0fc2d8073734ecc465e64"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_ext_communities" ref="a525e1542dfd0fc2d8073734ecc465e64" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_ext_communities </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01474">1474</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> == 0)
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
        attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    {
      (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structecommunity.html">ecommunity</a> = 
        <a class="code" href="bgp__ecommunity_8c.html#a39113bc26f62bbd119fa0da3484f3f86">ecommunity_parse</a> ((u_int8_t *)<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
    }
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad1dd9bb1bf877185bbf32226438a03b0"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_extra_free" ref="ad1dd9bb1bf877185bbf32226438a03b0" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_extra_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00308">308</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba71f75806fa247a292b0bb76e802dd55b">MTYPE_ATTR_EXTRA</a>, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a31ef3828cd7a1375f7b7dfe02aab705f"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_extra_get" ref="a31ef3828cd7a1375f7b7dfe02aab705f" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr__extra.html">attr_extra</a>* bgp_attr_extra_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00318">318</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
  <span class="keywordflow">return</span> attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a72ac23a2be479814bcfd0d5d8ec00b53"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_extra_new" ref="a72ac23a2be479814bcfd0d5d8ec00b53" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structattr__extra.html">attr_extra</a>* bgp_attr_extra_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00302">302</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba71f75806fa247a292b0bb76e802dd55b">MTYPE_ATTR_EXTRA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr__extra.html">attr_extra</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="af16afab87ca745e1e019518a3f012cab"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_finish" ref="af16afab87ca745e1e019518a3f012cab" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02354">2354</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__aspath_8c.html#ad12467085616732b130bd1edac9277fb">aspath_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">attrhash_finish</a> ();
  <a class="code" href="bgp__community_8c.html#a29420c210e4ff289843eb117aed4350a">community_finish</a> ();
  <a class="code" href="bgp__ecommunity_8c.html#a3909ede3d29a88faad854a2833ec9322">ecommunity_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">cluster_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">transit_finish</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ea9ed94bcd0236f8f83310615e7c022"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_flush" ref="a3ea9ed94bcd0236f8f83310615e7c022" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_flush </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00689">689</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> &amp;&amp; ! attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
    <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> &amp;&amp; ! attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
    <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
        <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
        <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
        <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a734ed33a51d052caf6f1e013cba29d2c"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_hash_alloc" ref="a734ed33a51d052caf6f1e013cba29d2c" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* bgp_attr_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00480">480</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = (<span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>;

  attr = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad7fb859bb30af87be51498b5f1417fc5">MTYPE_ATTR</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
  *attr = *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
  <span class="keywordflow">if</span> (val-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a> ();
      *attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = *val-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
    }
  attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a> = 0;
  <span class="keywordflow">return</span> attr;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c65ea9c30a455a48fcc49820025780d"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_init" ref="a9c65ea9c30a455a48fcc49820025780d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02343">2343</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__aspath_8c.html#a34b9f56e53531a0e4ceedcb31d59e027">aspath_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">attrhash_init</a> ();
  <a class="code" href="bgp__community_8c.html#a24d2ec91020660700696ad24408b4768">community_init</a> ();
  <a class="code" href="bgp__ecommunity_8c.html#a51951f652cd586d53176801edb217319">ecommunity_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">cluster_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">transit_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a791a2194bc7791b769c6ce55ac37b387"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_intern" ref="a791a2194bc7791b769c6ce55ac37b387" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00498">498</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>attr *find;

  <span class="comment">/* Intern referenced strucutre. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    {
      <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
    attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      <span class="keywordflow">else</span>
    attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>++;
    }
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
    {
      <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
    attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="bgp__community_8c.html#a13f3f19052ddd0201e67b155a5d55657">community_intern</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
      <span class="keywordflow">else</span>
    attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>++;
    }
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> = <a class="code" href="bgp__ecommunity_8c.html#aef15f1927a9085dd8f1df7fa612794db">ecommunity_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>++;
        }
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> = <a class="code" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">cluster_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
        }
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>++;
        }
    }

  find = (<span class="keyword">struct </span>attr *) <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, attr, <a class="code" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">bgp_attr_hash_alloc</a>);
  find-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>++;

  <span class="keywordflow">return</span> find;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0e96dcc0def137493651c69fc9fa6d9b"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_local_pref" ref="a0e96dcc0def137493651c69fc9fa6d9b" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_local_pref </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01011">1011</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* If it is contained in an UPDATE message that is received from an</span>
<span class="comment">     external peer, then this attribute MUST be ignored by the</span>
<span class="comment">     receiving speaker. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
    {
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> == 4) 
    attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <span class="keywordflow">else</span> 
    attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> = 0;

  <span class="comment">/* Set atomic aggregate flag. */</span>
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad327c6ba90bb846259c8104944c1e5cc"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_med" ref="ad327c6ba90bb846259c8104944c1e5cc" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag, u_char *startp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_med </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00982">982</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;

  total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);

  <span class="comment">/* Length check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 4)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
        <span class="stringliteral">&quot;MED attribute length isn&#39;t four [%d]&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acfacad7a018c40edab53239c8e45e34a"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_munge_as4_attrs" ref="acfacad7a018c40edab53239c8e45e34a" args="(struct peer *peer, struct attr *attr, struct aspath *as4_path, as_t as4_aggregator, struct in_addr *as4_aggregator_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_munge_as4_attrs </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structaspath.html">aspath</a> *&#160;</td>
          <td class="paramname"><em>as4_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td>
          <td class="paramname"><em>as4_aggregator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>as4_aggregator_addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01115">1115</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ignore_as4_path = 0;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *newpath;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
    
  <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) )
    {
      <span class="comment">/* peer can do AS4, so we ignore AS4_PATH and AS4_AGGREGATOR</span>
<span class="comment">       * if given.</span>
<span class="comment">       * It is worth a warning though, because the peer really</span>
<span class="comment">       * should not send them</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
        {
          <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>)))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s %s AS4_PATH&quot;</span>,
                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <span class="stringliteral">&quot;AS4 capable peer, yet it sent&quot;</span>);
          
          <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>)))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s %s AS4_AGGREGATOR&quot;</span>,
                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <span class="stringliteral">&quot;AS4 capable peer, yet it sent&quot;</span>);
        }
      
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>))
      &amp;&amp; !(attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>))))
    {
      <span class="comment">/* Hu? This is not supposed to happen at all!</span>
<span class="comment">       * got as4_path and no aspath,</span>
<span class="comment">       *   This should already</span>
<span class="comment">       *   have been handled by &#39;well known attributes missing&#39;</span>
<span class="comment">       *   But... yeah, paranoia</span>
<span class="comment">       * Take this as a &quot;malformed attribute&quot;</span>
<span class="comment">       */</span>
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
            <span class="stringliteral">&quot;%s BGP not AS4 capable peer sent AS4_PATH but&quot;</span>
            <span class="stringliteral">&quot; no AS_PATH, cant do anything here&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
                       <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                       <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* We have a asn16 peer.  First, look for AS4_AGGREGATOR</span>
<span class="comment">   * because that may override AS4_PATH</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>) ) )
    {
      <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>) ) )
        {
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attre);
          
          <span class="comment">/* received both.</span>
<span class="comment">           * if the as_number in aggregator is not AS_TRANS,</span>
<span class="comment">           *  then AS4_AGGREGATOR and AS4_PATH shall be ignored</span>
<span class="comment">           *        and the Aggregator shall be taken as </span>
<span class="comment">           *        info on the aggregating node, and the AS_PATH</span>
<span class="comment">           *        shall be taken as the AS_PATH</span>
<span class="comment">           *  otherwise</span>
<span class="comment">           *        the Aggregator shall be ignored and the</span>
<span class="comment">           *        AS4_AGGREGATOR shall be taken as the</span>
<span class="comment">           *        Aggregating node and the AS_PATH is to be</span>
<span class="comment">           *        constructed &quot;as in all other cases&quot;</span>
<span class="comment">           */</span>
          <span class="keywordflow">if</span> ( attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> != <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a> )
            {
              <span class="comment">/* ignore */</span>
              <span class="keywordflow">if</span> ( <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s BGP not AS4 capable peer&quot;</span> 
                            <span class="stringliteral">&quot; send AGGREGATOR != AS_TRANS and&quot;</span>
                            <span class="stringliteral">&quot; AS4_AGGREGATOR, so ignore&quot;</span>
                            <span class="stringliteral">&quot; AS4_AGGREGATOR and AS4_PATH&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
              ignore_as4_path = 1;
            }
          <span class="keywordflow">else</span>
            {
              <span class="comment">/* &quot;New_aggregator shall be taken as aggregator&quot; */</span>
              attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = as4_aggregator;
              attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr = as4_aggregator_addr-&gt;s_addr;
            }
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* We received a AS4_AGGREGATOR but no AGGREGATOR.</span>
<span class="comment">           * That is bogus - but reading the conditions</span>
<span class="comment">           * we have to handle AS4_AGGREGATOR as if it were</span>
<span class="comment">           * AGGREGATOR in that case</span>
<span class="comment">           */</span>
          <span class="keywordflow">if</span> ( <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(as4, AS4))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;[AS4] %s BGP not AS4 capable peer send&quot;</span>
                        <span class="stringliteral">&quot; AS4_AGGREGATOR but no AGGREGATOR, will take&quot;</span>
                        <span class="stringliteral">&quot; it as if AGGREGATOR with AS_TRANS had been there&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
          (attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = as4_aggregator;
          <span class="comment">/* sweep it under the carpet and simulate a &quot;good&quot; AGGREGATOR */</span>
          attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= (<a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>));
        }
    }

  <span class="comment">/* need to reconcile NEW_AS_PATH and AS_PATH */</span>
  <span class="keywordflow">if</span> ( !ignore_as4_path &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>))) )
    {
       newpath = <a class="code" href="bgp__aspath_8c.html#a1a485a8779fb5fcf0ac2efeb2bdc204d">aspath_reconcile_as4</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>, as4_path);
       <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
       attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (newpath);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1d06b9e08112fe7e22c31e2c9d7e7c2"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_nexthop" ref="ae1d06b9e08112fe7e22c31e2c9d7e7c2" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag, u_char *startp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_nexthop </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00941">941</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;

  total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);

  <span class="comment">/* Flag check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>)
      || ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
        <span class="stringliteral">&quot;Origin attribute flag isn&#39;t transitive %d&quot;</span>, flag);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Check nexthop attribute length. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 4)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Nexthop attribute length isn&#39;t four [%d]&quot;</span>,
          <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaf7a2fdc3b1a0a7a224ffb267ed4c4a5"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_origin" ref="aaf7a2fdc3b1a0a7a224ffb267ed4c4a5" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag, u_char *startp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_origin </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00746">746</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;

  <span class="comment">/* total is entire attribute length include Attribute Flags (1),</span>
<span class="comment">     Attribute Type code (1) and Attribute length (1 or 2).  */</span>
  total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);

  <span class="comment">/* If any recognized attribute has Attribute Flags that conflict</span>
<span class="comment">     with the Attribute Type Code, then the Error Subcode is set to</span>
<span class="comment">     Attribute Flags Error.  The Data field contains the erroneous</span>
<span class="comment">     attribute (type, length and value). */</span>
  <span class="keywordflow">if</span> (flag != <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, 
        <span class="stringliteral">&quot;Origin attribute flag isn&#39;t transitive %d&quot;</span>, flag);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#afa7bc7004c7ad468b0b924f7e8b2d549">BGP_NOTIFY_UPDATE_ATTR_FLAG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* If any recognized attribute has Attribute Length that conflicts</span>
<span class="comment">     with the expected length (based on the attribute type code), then</span>
<span class="comment">     the Error Subcode is set to Attribute Length Error.  The Data</span>
<span class="comment">     field contains the erroneous attribute (type, length and</span>
<span class="comment">     value). */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 1)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Origin attribute length is not one %d&quot;</span>,
        <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Fetch origin attribute. */</span>
  attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));

  <span class="comment">/* If the ORIGIN attribute has an undefined value, then the Error</span>
<span class="comment">     Subcode is set to Invalid Origin Attribute.  The Data field</span>
<span class="comment">     contains the unrecognized attribute (type, length and value). */</span>
  <span class="keywordflow">if</span> ((attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#a23e729207777c4691b94d476003c6ac9">BGP_ORIGIN_IGP</a>)
      &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#acac0be58fcc8e2a10a18254e0a272732">BGP_ORIGIN_EGP</a>)
      &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> != <a class="code" href="bgpd_8h.html#ab150461b04b7be7ff0068c004b732bb9">BGP_ORIGIN_INCOMPLETE</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Origin attribute value is invalid %d&quot;</span>,
          attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);

      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a04d6c2468c21355ee9c5c1db6bb1cf01">BGP_NOTIFY_UPDATE_INVAL_ORIGIN</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Set oring attribute flag. */</span>
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4a6e3969ed3b0c6c65d5d9543fe7396a"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_originator_id" ref="a4a6e3969ed3b0c6c65d5d9543fe7396a" args="(struct peer *peer, bgp_size_t length, struct attr *attr, u_char flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_originator_id </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01252">1252</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> != 4)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_ERR, <span class="stringliteral">&quot;Bad originator ID length %d&quot;</span>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

  (<a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr))-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>.s_addr 
    = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa14660c4ba4237fe5afa5f0e7700479a"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_parse" ref="aa14660c4ba4237fe5afa5f0e7700479a" args="(struct peer *peer, struct attr *attr, bgp_size_t size, struct bgp_nlri *mp_update, struct bgp_nlri *mp_withdraw)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_attr_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname"><em>mp_update</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname"><em>mp_withdraw</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01562">1562</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char flag;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  u_char *startp, *endp;
  u_char *attr_endp;
  u_char seen[<a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>];
  <span class="comment">/* we need the as4_path only until we have synthesized the as_path with it */</span>
  <span class="comment">/* same goes for as4_aggregator */</span>
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4_aggregator = 0;
  <span class="keyword">struct </span>in_addr as4_aggregator_addr = { 0 };

  <span class="comment">/* Initialize bitmap. */</span>
  memset (seen, 0, <a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>);

  <span class="comment">/* End pointer of BGP attribute. */</span>
  endp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) + size;

  <span class="comment">/* Get attributes to the end of attribute length. */</span>
  <span class="keywordflow">while</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) &lt; endp)
    {
      <span class="comment">/* Check remaining length check.*/</span>
      <span class="keywordflow">if</span> (endp - <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) &lt; <a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a>)
    {
      <span class="comment">/* XXX warning: long int format, int arg (arg 5) */</span>
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s error BGP attribute length %lu is smaller than min len&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
        (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer))));

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Fetch attribute flag and type. */</span>
      startp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer);
      flag = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
      type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));

      <span class="comment">/* Check whether Extended-Length applies and is in bounds */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>)
          &amp;&amp; ((endp - startp) &lt; (<a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a> + 1)))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s Extended length set, but just %lu bytes of attr header&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
        (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer))));

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Check extended attribue length bit. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>))
    length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
      <span class="keywordflow">else</span>
    length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer));
      
      <span class="comment">/* If any attribute appears more than once in the UPDATE</span>
<span class="comment">     message, then the Error Subcode is set to Malformed Attribute</span>
<span class="comment">     List. */</span>

      <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8h.html#aaef34cec810ea0c6b60279c16ffd8a20">CHECK_BITMAP</a> (seen, type))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
        <span class="stringliteral">&quot;%s error BGP attribute type %d appears twice in a message&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Set type to bitmap to check duplicate attribute.  `type&#39; is</span>
<span class="comment">     unsigned char so it never overflow bitmap range. */</span>

      <a class="code" href="bgp__attr_8h.html#a06b1e413f17e880aa755637031050a20">SET_BITMAP</a> (seen, type);

      <span class="comment">/* Overflow check. */</span>
      attr_endp =  <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

      <span class="keywordflow">if</span> (attr_endp &gt; endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s BGP type %d length %d is too large, attribute total length is %d.  attr_endp is %p.  endp is %p&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, length, size, attr_endp, endp);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* OK check attribute and store it&#39;s value. */</span>
      <span class="keywordflow">switch</span> (type)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>:
      ret = <a class="code" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">bgp_attr_origin</a> (peer, length, attr, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>:
          attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (peer, length, attr, flag, startp, 0);
          ret = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> ? 0 : -1 ;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>:
          as4_path = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (peer, length, attr, flag, startp, 1);
          ret = as4_path  ? 0 : -1 ;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>: 
      ret = <a class="code" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">bgp_attr_nexthop</a> (peer, length, attr, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>:
      ret = <a class="code" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">bgp_attr_med</a> (peer, length, attr, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">bgp_attr_local_pref</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">bgp_attr_atomic</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>:
      ret = <a class="code" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">bgp_attr_aggregator</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>:
      ret = <a class="code" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">bgp_attr_as4_aggregator</a> (peer, length, attr, &amp;as4_aggregator, &amp;as4_aggregator_addr);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">bgp_attr_community</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">bgp_attr_originator_id</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">bgp_attr_cluster_list</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a3d8c4bfcee360cc1aeb5b4c1b7033360">bgp_mp_reach_parse</a> (peer, length, attr, mp_update);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>:
      ret = <a class="code" href="bgp__attr_8c.html#af99785d5e3ee803d5d4b7021e0b8448a">bgp_mp_unreach_parse</a> (peer, length, mp_withdraw);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">bgp_attr_ext_communities</a> (peer, length, attr, flag);
      <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>:
          ret = <a class="code" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">bgp_attr_aspathlimit</a> (peer, length, attr, flag, startp);
          <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      ret = <a class="code" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">bgp_attr_unknown</a> (peer, attr, flag, type, length, startp);
      <span class="keywordflow">break</span>;
    }

      <span class="comment">/* If error occured immediately return to the caller. */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
                <span class="stringliteral">&quot;%s: Attribute %s, parse error&quot;</span>, 
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
                <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
                            <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
                            <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
           <span class="keywordflow">return</span> ret;
        }

      <span class="comment">/* Check the fetched length. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) != attr_endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s: BGP attribute %s, fetch error&quot;</span>, 
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* Check final read pointer is same as end pointer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (peer) != endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s BGP attribute %s, length mismatch&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* </span>
<span class="comment">   * At this place we can see whether we got AS4_PATH and/or</span>
<span class="comment">   * AS4_AGGREGATOR from a 16Bit peer and act accordingly.</span>
<span class="comment">   * We can not do this before we&#39;ve read all attributes because</span>
<span class="comment">   * the as4 handling does not say whether AS4_PATH has to be sent</span>
<span class="comment">   * after AS_PATH or not - and when AS4_AGGREGATOR will be send</span>
<span class="comment">   * in relationship to AGGREGATOR.</span>
<span class="comment">   * So, to be defensive, we are not relying on any order and read</span>
<span class="comment">   * all attributes first, including these 32bit ones, and now,</span>
<span class="comment">   * afterwards, we look what and if something is to be done for as4.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">bgp_attr_munge_as4_attrs</a> (peer, attr, as4_path,
                                as4_aggregator, &amp;as4_aggregator_addr))
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* At this stage, we have done all fiddling with as4, and the</span>
<span class="comment">   * resulting info is in attr-&gt;aggregator resp. attr-&gt;aspath</span>
<span class="comment">   * so we can chuck as4_aggregator and as4_path alltogether in</span>
<span class="comment">   * order to save memory</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( as4_path )
    {
      <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a>( as4_path ); <span class="comment">/* unintern - it is in the hash */</span>
      as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="comment">/* The flag that we got this is still there, but that does not</span>
<span class="comment">       * do any trouble</span>
<span class="comment">       */</span>
    }
  <span class="comment">/*</span>
<span class="comment">   * The &quot;rest&quot; of the code does nothing with as4_aggregator.</span>
<span class="comment">   * there is no memory attached specifically which is not part</span>
<span class="comment">   * of the attr.</span>
<span class="comment">   * so ignoring just means do nothing.</span>
<span class="comment">   */</span>
  <span class="comment">/*</span>
<span class="comment">   * Finally do the checks on the aspath we did not do yet</span>
<span class="comment">   * because we waited for a potentially synthesized aspath.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
    {
      ret = <a class="code" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">bgp_attr_aspath_check</a>( peer, attr );
      <span class="keywordflow">if</span> ( ret &lt; 0 )
    <span class="keywordflow">return</span> ret;
    }

  <span class="comment">/* Finally intern unknown attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
    attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6b097d8a087a66ad0f7497cb355ef864"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_unintern" ref="a6b097d8a087a66ad0f7497cb355ef864" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00646">646</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>attr *ret;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
  <span class="keyword">struct </span><a class="code" href="structcommunity.html">community</a> *<a class="code" href="structcommunity.html">community</a>;
  <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<a class="code" href="structecommunity.html">ecommunity</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Decrement attribute reference. */</span>
  attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>--;
  aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
  community = attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>;
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      ecommunity = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>;
      cluster = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>;
      transit = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>;
    }

  <span class="comment">/* If reference becomes zero then free attribute object. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a> == 0)
    {    
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, attr);
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ret != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (attr);
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad7fb859bb30af87be51498b5f1417fc5">MTYPE_ATTR</a>, attr);
    }

  <span class="comment">/* aspath refcount shoud be decrement. */</span>
  <span class="keywordflow">if</span> (aspath)
    <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (aspath);
  <span class="keywordflow">if</span> (community)
    <a class="code" href="bgp__community_8c.html#add62474cd8c7fed6877c64537b6c78a2">community_unintern</a> (community);
  <span class="keywordflow">if</span> (ecommunity)
    <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (ecommunity);
  <span class="keywordflow">if</span> (cluster)
    <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (cluster);
  <span class="keywordflow">if</span> (transit)
    <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (transit);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c2459415859f92304cc452f583f3fce"></a><!-- doxytag: member="bgp_attr.c::bgp_attr_unknown" ref="a9c2459415859f92304cc452f583f3fce" args="(struct peer *peer, struct attr *attr, u_char flag, u_char type, bgp_size_t length, u_char *startp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_attr_unknown </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>startp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01495">1495</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total;
  <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Unknown attribute is received (type %d, length %d)&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, 
      <span class="stringliteral">&quot;Unknown attribute type %d length %d is received&quot;</span>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

  <span class="comment">/* Forward read pointer of input stream. */</span>
  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);

  <span class="comment">/* Adjest total length to include type and length. */</span>
  total = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> + (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>) ? 4 : 3);

  <span class="comment">/* If any of the mandatory well-known attributes are not recognized,</span>
<span class="comment">     then the Error Subcode is set to Unrecognized Well-known</span>
<span class="comment">     Attribute.  The Data field contains the unrecognized attribute</span>
<span class="comment">     (type, length and value). */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>))
    {
      <span class="comment">/* Adjust startp to do not include flag value. */</span>
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a0d024c2a67a57b482ae156bb77329d89">BGP_NOTIFY_UPDATE_UNREC_ATTR</a>,
                 startp, total);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Unrecognized non-transitive optional attributes must be quietly</span>
<span class="comment">     ignored and not passed along to other BGP peers. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* If a path with recognized transitive optional attribute is</span>
<span class="comment">     accepted and passed along to other BGP peers and the Partial bit</span>
<span class="comment">     in the Attribute Flags octet is set to 1 by some previous AS, it</span>
<span class="comment">     is not set back to 0 by the current AS. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (*startp, <a class="code" href="bgp__attr_8h.html#a53601906c8a028376cb7e4c2c691dc12">BGP_ATTR_FLAG_PARTIAL</a>);

  <span class="comment">/* Store transitive attribute to the end of attr-&gt;transit. */</span>
  <span class="keywordflow">if</span> (! ((attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a>(attr))-&gt;transit) )
      attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa2ed4f19b85e0b74659b8131e34e83df">MTYPE_TRANSIT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> transit));

  transit = attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>;

  <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>)
    transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, 
                 transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> + total);
  <span class="keywordflow">else</span>
    transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, total);

  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a> + transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>, startp, total);
  transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> += total;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a02efc1fa4f47e5fa5b9ee42edd6d57"></a><!-- doxytag: member="bgp_attr.c::bgp_dump_routes_attr" ref="a1a02efc1fa4f47e5fa5b9ee42edd6d57" args="(struct stream *s, struct attr *attr, struct prefix *prefix)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_routes_attr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02366">2366</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> len;
  <span class="keywordtype">size_t</span> aspath_lenp;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;

  <span class="comment">/* Remember current pointer. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

  <span class="comment">/* Place holder of length. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);

  aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  aspath_lenp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
  
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_lenp, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, 1));

  <span class="comment">/* Nexthop attribute. */</span>
  <span class="comment">/* If it&#39;s an IPv6 prefix, don&#39;t dump the IPv4 nexthop to save space */</span>
  <span class="keywordflow">if</span>(prefix != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
#ifdef HAVE_IPV6
     &amp;&amp; prefix-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET6
#endif <span class="comment">/* HAVE_IPV6 */</span>
     )
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }

  <span class="comment">/* MED attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
    }

  <span class="comment">/* Local preference. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
    }

  <span class="comment">/* Atomic aggregate. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
    }

  <span class="comment">/* Aggregator. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }

  <span class="comment">/* Community attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>))
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* Add a MP_NLRI attribute to dump the IPv6 next hop */</span>
  <span class="keywordflow">if</span> (prefix != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; prefix-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp;
     (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16 || attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32) )
    {
      <span class="keywordtype">int</span> sizep;
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

      <span class="comment">/* MP header */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Marker: Attribute length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);      <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>); <span class="comment">/* SAFI */</span>

      <span class="comment">/* Next hop */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(s, &amp;attre-&gt;mp_nexthop_global, 16);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
        <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(s, &amp;attre-&gt;mp_nexthop_local, 16);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(s, 0);

      <span class="comment">/* Prefix */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a>(s, prefix);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* AS-Pathlimit */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 5);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>);
    }

  <span class="comment">/* Return total size of attribute. */</span>
  len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 2;
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, cp, len);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d8c4bfcee360cc1aeb5b4c1b7033360"></a><!-- doxytag: member="bgp_attr.c::bgp_mp_reach_parse" ref="a3d8c4bfcee360cc1aeb5b4c1b7033360" args="(struct peer *peer, bgp_size_t length, struct attr *attr, struct bgp_nlri *mp_update)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_mp_reach_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname"><em>mp_update</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01301">1301</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int16_t afi;
  u_char safi;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> nlri_len;
  <span class="keywordtype">size_t</span> start;
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a>(attr);
  
  <span class="comment">/* Set end of packet. */</span>
  s = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer);
  start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s);
  
  <span class="comment">/* safe to read statically sized header? */</span>
<span class="preprocessor">#define BGP_MP_REACH_MIN_SIZE 5</span>
<span class="preprocessor"></span><span class="preprocessor">#define LEN_LEFT    (length - (stream_get_getp(s) - start))</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> ((<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &lt; BGP_MP_REACH_MIN_SIZE))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s sent invalid length, %lu&quot;</span>, 
         __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* Load AFI, SAFI. */</span>
  afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="comment">/* Get nexthop length. */</span>
  attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  
  <span class="keywordflow">if</span> (LEN_LEFT &lt; attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s, MP nexthop length, %u, goes past end of attribute&quot;</span>, 
         __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* Nexthop length check. */</span>
  <span class="keywordflow">switch</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
    {
    <span class="keywordflow">case</span> 4:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
      <span class="comment">/* Probably needed for RFC 2283 */</span>
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr, &amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 12:
      {
    u_int32_t rd_high;
    u_int32_t rd_low;

    rd_high = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    rd_low = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
      }
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> 16:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 32:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_local, s, 16);
      <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL (&amp;attre-&gt;mp_nexthop_local))
    {
      <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s got two nexthop %s %s but second one is not a link-local nexthop&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_global,
                  buf1, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_local,
                  buf2, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>));

      attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
    }
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    <span class="keywordflow">default</span>:
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Wrong multiprotocol next hop length: %d&quot;</span>, 
         __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">if</span> (!LEN_LEFT)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read SNPA and NLRI(s)&quot;</span>,
                 __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  {
    u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>; 
    <span class="keywordflow">if</span> ((val = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s)))
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s sent non-zero value, %u, for defunct SNPA-length field&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, val);
  }
  
  <span class="comment">/* must have nrli_len, what is left of the attribute */</span>
  nlri_len = <a class="code" href="bgp__attr_8c.html#aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc">LEN_LEFT</a>;
  <span class="keywordflow">if</span> ((!nlri_len) || (nlri_len &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read NLRI&quot;</span>,
                 __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
 
  <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    {
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), nlri_len);
      <span class="keywordflow">if</span> (ret &lt; 0) 
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) NLRI doesn&#39;t pass sanity check&quot;</span>,
                     __func__, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  mp_update-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = afi;
  mp_update-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = safi;
  mp_update-&gt;<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
  mp_update-&gt;<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = nlri_len;

  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, nlri_len);

  <span class="keywordflow">return</span> 0;
<span class="preprocessor">#undef LEN_LEFT</span>
<span class="preprocessor"></span>}
</pre></div>
</div>
</div>
<a class="anchor" id="af99785d5e3ee803d5d4b7021e0b8448a"></a><!-- doxytag: member="bgp_attr.c::bgp_mp_unreach_parse" ref="af99785d5e3ee803d5d4b7021e0b8448a" args="(struct peer *peer, bgp_size_t length, struct bgp_nlri *mp_withdraw)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_mp_unreach_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname"><em>mp_withdraw</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01435">1435</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  u_int16_t afi;
  u_char safi;
  u_int16_t withdraw_len;
  <span class="keywordtype">int</span> ret;

  s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
  
<span class="preprocessor">#define BGP_MP_UNREACH_MIN_SIZE 3</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> ((<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &lt;  BGP_MP_UNREACH_MIN_SIZE))
    <span class="keywordflow">return</span> -1;
  
  afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  
  withdraw_len = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> - <a class="code" href="bgp__attr_8c.html#aa53b9e0198c876e6ba4251c44b707045">BGP_MP_UNREACH_MIN_SIZE</a>;

  <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    {
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), withdraw_len);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;
    }

  mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = afi;
  mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = safi;
  mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
  mp_withdraw-&gt;<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = withdraw_len;

  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, withdraw_len);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afa6f3d227d043fc17b75503ec1b840f6"></a><!-- doxytag: member="bgp_attr.c::bgp_packet_attribute" ref="afa6f3d227d043fc17b75503ec1b840f6" args="(struct bgp *bgp, struct peer *peer, struct stream *s, struct attr *attr, struct prefix *p, afi_t afi, safi_t safi, struct peer *from, struct prefix_rd *prd, u_char *tag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> bgp_packet_attribute </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *&#160;</td>
          <td class="paramname"><em>prd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>tag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01847">1847</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> cp;
  <span class="keywordtype">size_t</span> aspath_sizep;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
  <span class="keywordtype">int</span> send_as4_path = 0;
  <span class="keywordtype">int</span> send_as4_aggregator = 0;
  <span class="keywordtype">int</span> use32bit = (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>)) ? 1 : 0;

  <span class="keywordflow">if</span> (! bgp)
    bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();

  <span class="comment">/* Remember current pointer. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);

  <span class="comment">/* AS path attribute. */</span>

  <span class="comment">/* If remote-peer is EBGP */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
      &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
      || attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#a142f9a26d6c89fa4f01050cec21aa4d4">segments</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)))
    {    
      aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    {
      <span class="comment">/* Strip the confed info, and then stuff our path CONFED_ID</span>
<span class="comment">         on the front */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);
      aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>);
    }
      <span class="keywordflow">else</span>
    {
      aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
        aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>);
    }
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <span class="comment">/* A confed member, so we need to do the AS_CONFED_SEQUENCE thing */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      aspath = <a class="code" href="bgp__aspath_8c.html#a601c9ef2ba7a75d8757e04d3f8585886">aspath_add_confed_seq</a> (aspath, peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
    }
  <span class="keywordflow">else</span>
    aspath = attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;

  <span class="comment">/* If peer is not AS4 capable, then:</span>
<span class="comment">   * - send the created AS_PATH out as AS4_PATH (optional, transitive),</span>
<span class="comment">   *   but ensure that no AS_CONFED_SEQUENCE and AS_CONFED_SET path segment</span>
<span class="comment">   *   types are in it (i.e. exclude them if they are there)</span>
<span class="comment">   *   AND do this only if there is at least one asnum &gt; 65535 in the path!</span>
<span class="comment">   * - send an AS_PATH out, but put 16Bit ASnums in it, not 32bit, and change</span>
<span class="comment">   *   all ASnums &gt; 65535 to BGP_AS_TRANS</span>
<span class="comment">   */</span>

  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, use32bit));
  
  <span class="comment">/* OLD session may need NEW_AS_PATH sent, if there are 4-byte ASNs </span>
<span class="comment">   * in the path</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (!use32bit &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a594fc069e213e63fc1a15af40d93b3d4">aspath_has_as4</a> (aspath))
      send_as4_path = 1; <span class="comment">/* we&#39;ll do this later, at the correct place */</span>
  
  <span class="comment">/* Nexthop attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>) &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
        <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, peer-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>.s_addr);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }
      <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }

  <span class="comment">/* MED attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
    }

  <span class="comment">/* Local preference. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ||
      <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
    }

  <span class="comment">/* Atomic aggregate. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
    }

  <span class="comment">/* Aggregator. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      <span class="comment">/* Common to BGP_ATTR_AGGREGATOR, regardless of ASN size */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
      
      <span class="keywordflow">if</span> (use32bit)
        {
          <span class="comment">/* AS4 capable peer */</span>
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
          <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* 2-byte AS peer */</span>
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 6);
          
          <span class="comment">/* Is ASN representable in 2-bytes? Or must AS_TRANS be used? */</span>
          <span class="keywordflow">if</span> ( attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> &gt; 65535 )
            {
              <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>);
              
              <span class="comment">/* we have to send AS4_AGGREGATOR, too.</span>
<span class="comment">               * we&#39;ll do that later in order to send attributes in ascending</span>
<span class="comment">               * order.</span>
<span class="comment">               */</span>
              send_as4_aggregator = 1;
            }
          <span class="keywordflow">else</span>
            <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, (u_int16_t) attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
        }
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }

  <span class="comment">/* Community attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>) 
      &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>)))
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }

  <span class="comment">/* Route Reflector. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
      &amp;&amp; from
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      <span class="comment">/* Originator ID. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);

      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
    <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>);
      <span class="keywordflow">else</span> 
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;from-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>);

      <span class="comment">/* Cluster list. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>);
      
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> + 4);
      <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, 
                  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
    }
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* If p is IPv6 address put it into attribute. */</span>
  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Marker: Attribute length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>); <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);    <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);

      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_global, 16);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
    {
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_global, 16);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attre-&gt;mp_nexthop_local, 16);
    }
      
      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);

      <span class="comment">/* Prefix write. */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Marker: Attribute Length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);  <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 4);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);

      <span class="comment">/* Prefix write. */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
    }

  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);   <span class="comment">/* Length of this attribute. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);  <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 12);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);

      <span class="comment">/* Tag, RD, Prefix write. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> + 88);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, tag, 3);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, prd-&gt;val, 8);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>));

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - sizep) - 1);
    }

  <span class="comment">/* Extended Communities attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>) 
      &amp;&amp; (attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>)))
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attre);
      
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
          || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8 &gt; 255)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
        }
      <span class="keywordflow">else</span>
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
        }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
    }
      <span class="keywordflow">else</span>
    {
      u_int8_t *pnt;
      <span class="keywordtype">int</span> tbit;
      <span class="keywordtype">int</span> ecom_tr_size = 0;
      <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

      <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
        {
          pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
          tbit = *pnt;

          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
        <span class="keywordflow">continue</span>;

          ecom_tr_size++;
        }

      <span class="keywordflow">if</span> (ecom_tr_size)
        {
          <span class="keywordflow">if</span> (ecom_tr_size * 8 &gt; 255)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, ecom_tr_size * 8);
        }
          <span class="keywordflow">else</span>
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, ecom_tr_size * 8);
        }

          <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
        {
          pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
          tbit = *pnt;

          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
            <span class="keywordflow">continue</span>;

          <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, pnt, 8);
        }
        }
    }
    }

  <span class="keywordflow">if</span> ( send_as4_path )
    {
      <span class="comment">/* If the peer is NOT As4 capable, AND */</span>
      <span class="comment">/* there are ASnums &gt; 65535 in path  THEN</span>
<span class="comment">       * give out AS4_PATH */</span>

      <span class="comment">/* Get rid of all AS_CONFED_SEQUENCE and AS_CONFED_SET</span>
<span class="comment">       * path segments!</span>
<span class="comment">       * Hm, I wonder...  confederation things *should* only be at</span>
<span class="comment">       * the beginning of an aspath, right?  Then we should use</span>
<span class="comment">       * aspath_delete_confed_seq for this, because it is already</span>
<span class="comment">       * there! (JK) </span>
<span class="comment">       * Folks, talk to me: what is reasonable here!?</span>
<span class="comment">       */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>);
      aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (s, aspath, 1));
    }

  <span class="keywordflow">if</span> (aspath != attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);

  <span class="keywordflow">if</span> ( send_as4_aggregator ) 
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);

      <span class="comment">/* send AS4_AGGREGATOR, at this place */</span>
      <span class="comment">/* this section of code moved here in order to ensure the correct</span>
<span class="comment">       * *ascending* order of attributes</span>
<span class="comment">       */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 8);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }
  
  <span class="comment">/* AS-Pathlimit */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>)
    {
      u_int32_t as = attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
      
      <span class="comment">/* should already have been done in announce_check(), </span>
<span class="comment">       * but just in case..</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (!as)
        as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 5);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, as);
    }
  
  <span class="comment">/* Unknown transit attribute. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>);

  <span class="comment">/* Return total size of attribute. */</span>
  <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a307ab4e45f577239562b43a73ef8f3a3"></a><!-- doxytag: member="bgp_attr.c::bgp_packet_withdraw" ref="a307ab4e45f577239562b43a73ef8f3a3" args="(struct peer *peer, struct stream *s, struct prefix *p, afi_t afi, safi_t safi, struct prefix_rd *prd, u_char *tag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> bgp_packet_withdraw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *&#160;</td>
          <td class="paramname"><em>prd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>tag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02296">2296</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> attrlen_pnt;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size;

  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>);

  attrlen_pnt = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Length of this attribute. */</span>

  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>));

  <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="comment">/* SAFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);

      <span class="comment">/* prefix. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> + 88);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, tag, 3);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, prd-&gt;val, 8);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>));
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* SAFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);

      <span class="comment">/* prefix */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
    }

  <span class="comment">/* Set MP attribute length. */</span>
  size = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - attrlen_pnt - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, attrlen_pnt, size);

  <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a697b54368062dcd4c02cdcfe72de7a0e"></a><!-- doxytag: member="bgp_attr.c::cluster_finish" ref="a697b54368062dcd4c02cdcfe72de7a0e" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cluster_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00205">205</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>);
  <a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aec913b18daf1b78f2b8e08f4e26b2ae9"></a><!-- doxytag: member="bgp_attr.c::cluster_free" ref="aec913b18daf1b78f2b8e08f4e26b2ae9" args="(struct cluster_list *cluster)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cluster_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname"><em>cluster</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00144">144</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba61ca28a5a4e9bbbf41836d06fd1e050f">MTYPE_CLUSTER_VAL</a>, cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1c92e4c600b37dffa477ea9dab79354c">MTYPE_CLUSTER</a>, cluster);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2e5d073c3993b7a813bb977fb25fb26f"></a><!-- doxytag: member="bgp_attr.c::cluster_hash_alloc" ref="a2e5d073c3993b7a813bb977fb25fb26f" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* cluster_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00069">69</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = (<span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster;

  cluster = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1c92e4c600b37dffa477ea9dab79354c">MTYPE_CLUSTER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcluster__list.html">cluster_list</a>));
  cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> = val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;

  <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>)
    {
      cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba61ca28a5a4e9bbbf41836d06fd1e050f">MTYPE_CLUSTER_VAL</a>, val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, val-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, val-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
    }
  <span class="keywordflow">else</span>
    cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a> = 0;

  <span class="keywordflow">return</span> cluster;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a50947dd6085f3f4faa6412c860de5986"></a><!-- doxytag: member="bgp_attr.c::cluster_hash_cmp" ref="a50947dd6085f3f4faa6412c860de5986" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int cluster_hash_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00134">134</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster1 = p1;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster2 = p2;

  <span class="keywordflow">return</span> (cluster1-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> == cluster2-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> &amp;&amp;
      <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (cluster1-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, cluster2-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, cluster1-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>) == 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88170c36e4bef12d6b3d421901075a24"></a><!-- doxytag: member="bgp_attr.c::cluster_hash_key_make" ref="a88170c36e4bef12d6b3d421901075a24" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int cluster_hash_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00117">117</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> * cluster = (<span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  caddr_t pnt;

  length = cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>;
  pnt = (caddr_t) cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>;
  
  while (length)
    key += pnt[--<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>];

  <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a32b687ae280c00df56b2a62c0600376d"></a><!-- doxytag: member="bgp_attr.c::cluster_init" ref="a32b687ae280c00df56b2a62c0600376d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void cluster_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00199">199</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a> = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a>, <a class="code" href="bgp__attr_8c.html#a50947dd6085f3f4faa6412c860de5986">cluster_hash_cmp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d834a28996e8a1003fc97a8c1b185d3"></a><!-- doxytag: member="bgp_attr.c::cluster_intern" ref="a3d834a28996e8a1003fc97a8c1b185d3" args="(struct cluster_list *cluster)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structcluster__list.html">cluster_list</a>* cluster_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname"><em>cluster</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00173">173</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *find;

  find = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>, cluster, <a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a>);
  find-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;

  <span class="keywordflow">return</span> find;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af224634d5d6d41781af26d88d9f3c85b"></a><!-- doxytag: member="bgp_attr.c::cluster_loop_check" ref="af224634d5d6d41781af26d88d9f3c85b" args="(struct cluster_list *cluster, struct in_addr originator)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cluster_loop_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname"><em>cluster</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>originator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00106">106</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    
  <span class="keywordflow">for</span> (i = 0; i &lt; cluster-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> / 4; i++)
    <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>[i].s_addr == originator.s_addr)
      <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a18083a7910f116540140cefeec1767b2"></a><!-- doxytag: member="bgp_attr.c::cluster_parse" ref="a18083a7910f116540140cefeec1767b2" args="(struct in_addr *pnt, int length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structcluster__list.html">cluster_list</a>* cluster_parse </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>pnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00092">92</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> tmp;
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster;

  tmp.<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  tmp.list = pnt;

  cluster = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>, &amp;tmp, <a class="code" href="bgp__attr_8c.html#a2e5d073c3993b7a813bb977fb25fb26f">cluster_hash_alloc</a>);
  cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
  <span class="keywordflow">return</span> cluster;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ebf5b6e2c65cef7624b6b1e88e61bc6"></a><!-- doxytag: member="bgp_attr.c::cluster_unintern" ref="a3ebf5b6e2c65cef7624b6b1e88e61bc6" args="(struct cluster_list *cluster)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cluster_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname"><em>cluster</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00184">184</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *ret;

  <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
    cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>--;

  <span class="keywordflow">if</span> (cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a> == 0)
    {
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>, cluster);
      <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (cluster);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a003809094eb7833898bd97bf6da16d3b"></a><!-- doxytag: member="bgp_attr.c::stream_put_prefix" ref="a003809094eb7833898bd97bf6da16d3b" args="(struct stream *, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_put_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00671">671</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> psize;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; psize)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, psize);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += psize;
  
  <span class="keywordflow">return</span> psize;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a439f9087cba24cd9ab148b6f2910596c"></a><!-- doxytag: member="bgp_attr.c::transit_finish" ref="a439f9087cba24cd9ab148b6f2910596c" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void transit_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00292">292</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>);
  <a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a999728aeac2632f5bd90893dd380b59e"></a><!-- doxytag: member="bgp_attr.c::transit_free" ref="a999728aeac2632f5bd90893dd380b59e" args="(struct transit *transit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void transit_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structtransit.html">transit</a> *&#160;</td>
          <td class="paramname"><em>transit</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00215">215</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5762eec04480b24d6ddb2a86704b639f">MTYPE_TRANSIT_VAL</a>, transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baa2ed4f19b85e0b74659b8131e34e83df">MTYPE_TRANSIT</a>, transit);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a182ab19c92782f43ccbfe5ff1d74bf79"></a><!-- doxytag: member="bgp_attr.c::transit_hash_alloc" ref="a182ab19c92782f43ccbfe5ff1d74bf79" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* transit_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00224">224</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Transit structure is already allocated.  */</span>
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af01f647e7433ef979c1956a7cd31cfbf"></a><!-- doxytag: member="bgp_attr.c::transit_hash_cmp" ref="af01f647e7433ef979c1956a7cd31cfbf" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int transit_hash_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00276">276</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * transit1 = p1;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * transit2 = p2;

  <span class="keywordflow">return</span> (transit1-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> == transit2-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a> &amp;&amp;
      <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (transit1-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, transit2-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, transit1-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>) == 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42b9d753ec4e078aca5ef97359c3241b"></a><!-- doxytag: member="bgp_attr.c::transit_hash_key_make" ref="a42b9d753ec4e078aca5ef97359c3241b" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int transit_hash_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00259">259</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> * <a class="code" href="structtransit.html">transit</a> = (<span class="keyword">struct </span>transit *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  caddr_t pnt;

  length = transit-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>;
  pnt = (caddr_t) transit-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>;
  
  while (length)
    key += pnt[--<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>];

  <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a17e35fe6b13cafa2f3f54efe216e0f21"></a><!-- doxytag: member="bgp_attr.c::transit_init" ref="a17e35fe6b13cafa2f3f54efe216e0f21" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void transit_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00286">286</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a> = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a>, <a class="code" href="bgp__attr_8c.html#af01f647e7433ef979c1956a7cd31cfbf">transit_hash_cmp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7493a41550711ef529ebd324e6ba2f28"></a><!-- doxytag: member="bgp_attr.c::transit_intern" ref="a7493a41550711ef529ebd324e6ba2f28" args="(struct transit *transit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structtransit.html">transit</a>* transit_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structtransit.html">transit</a> *&#160;</td>
          <td class="paramname"><em>transit</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00231">231</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>transit *find;

  find = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>, transit, <a class="code" href="bgp__attr_8c.html#a182ab19c92782f43ccbfe5ff1d74bf79">transit_hash_alloc</a>);
  <span class="keywordflow">if</span> (find != transit)
    <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (transit);
  find-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>++;

  <span class="keywordflow">return</span> find;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b8a411861d16f67929a3359ef7c51a4"></a><!-- doxytag: member="bgp_attr.c::transit_unintern" ref="a9b8a411861d16f67929a3359ef7c51a4" args="(struct transit *transit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void transit_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structtransit.html">transit</a> *&#160;</td>
          <td class="paramname"><em>transit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00244">244</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>transit *ret;

  <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
    transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>--;

  <span class="keywordflow">if</span> (transit-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a> == 0)
    {
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>, transit);
      <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (transit);
    }
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a9271676268b8a059b024fcced41fd9a4"></a><!-- doxytag: member="bgp_attr.c::attr_str" ref="a9271676268b8a059b024fcced41fd9a4" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> 
{
  { <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>,           <span class="stringliteral">&quot;ORIGIN&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>,          <span class="stringliteral">&quot;AS_PATH&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>,         <span class="stringliteral">&quot;NEXT_HOP&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>,  <span class="stringliteral">&quot;MULTI_EXIT_DISC&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>,       <span class="stringliteral">&quot;LOCAL_PREF&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>, <span class="stringliteral">&quot;ATOMIC_AGGREGATE&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>,       <span class="stringliteral">&quot;AGGREGATOR&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>,      <span class="stringliteral">&quot;COMMUNITY&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>,    <span class="stringliteral">&quot;ORIGINATOR_ID&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>,     <span class="stringliteral">&quot;CLUSTERLIST&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#ad928747222cb296937e1236bd379f0dd">BGP_ATTR_DPA</a>,              <span class="stringliteral">&quot;DPA&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a46fd3dbc574337450a5fca44fc785d32">BGP_ATTR_ADVERTISER</a>,       <span class="stringliteral">&quot;ADVERTISER&quot;</span>} ,
  { <a class="code" href="bgpd_8h.html#a5d59dc507561dc13c21cfec6b7b46e52">BGP_ATTR_RCID_PATH</a>,        <span class="stringliteral">&quot;RCID_PATH&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>,    <span class="stringliteral">&quot;MP_REACH_NLRI&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>,  <span class="stringliteral">&quot;MP_UNREACH_NLRI&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>,  <span class="stringliteral">&quot;EXT_COMMUNITIES&quot;</span> },
  { <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>,         <span class="stringliteral">&quot;AS4_PATH&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>,   <span class="stringliteral">&quot;AS4_AGGREGATOR&quot;</span> }, 
  { <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>,     <span class="stringliteral">&quot;AS_PATHLIMIT&quot;</span> },
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00042">42</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5c93897cae64d8a135b0abd7f4994b57"></a><!-- doxytag: member="bgp_attr.c::attr_str_max" ref="a5c93897cae64d8a135b0abd7f4994b57" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="bgp__attr_8c.html#a5c93897cae64d8a135b0abd7f4994b57">attr_str_max</a> = sizeof(<a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>)/sizeof(<a class="el" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>[0])<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00064">64</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>

</div>
</div>
<a class="anchor" id="a604725bd45d7893885d8887bc2701d69"></a><!-- doxytag: member="bgp_attr.c::attrhash" ref="a604725bd45d7893885d8887bc2701d69" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* <a class="el" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00299">299</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>

</div>
</div>
<a class="anchor" id="a1eb546b3c422618f3749dc048a9b24c7"></a><!-- doxytag: member="bgp_attr.c::cluster_hash" ref="a1eb546b3c422618f3749dc048a9b24c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* <a class="el" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00066">66</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>

</div>
</div>
<a class="anchor" id="ad9c0fbca22b0f438ad4448dc3d15d26b"></a><!-- doxytag: member="bgp_attr.c::transit_hash" ref="ad9c0fbca22b0f438ad4448dc3d15d26b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* <a class="el" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00212">212</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__attr_8c.html">bgp_attr.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:10 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
