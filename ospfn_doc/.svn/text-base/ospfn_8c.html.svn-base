<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfn/ospfn.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospfn_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ospfn/ospfn.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="privs_8h_source.html">privs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &lt;ctype.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;signal.h&gt;</code><br/>
<code>#include &lt;unistd.h&gt;</code><br/>
<code>#include &lt;sys/types.h&gt;</code><br/>
<code>#include &lt;sys/stat.h&gt;</code><br/>
<code>#include &lt;sys/time.h&gt;</code><br/>
<code>#include &lt;sys/socket.h&gt;</code><br/>
<code>#include &lt;netinet/in.h&gt;</code><br/>
<code>#include &lt;arpa/inet.h&gt;</code><br/>
<code>#include &lt;fcntl.h&gt;</code><br/>
<code>#include &lt;netdb.h&gt;</code><br/>
<code>#include &lt;sys/un.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="getopt_8h_source.html">getopt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">lib/table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfn__opaque__lsa_8h_source.html">ospfn_opaque_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="utility_8h_source.html">utility.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfn_8h_source.html">ospfn.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__opaque_8h_source.html">ospfd/ospf_opaque.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__api_8h_source.html">ospfd/ospf_api.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__apiclient_8h_source.html">ospfclient/ospf_apiclient.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">lib/stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__zebra_8h_source.html">ospfd/ospf_zebra.h</a>&quot;</code><br/>
<code>#include &lt;ccn/ccn.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospfn.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospfn_8c__incl.png" border="0" usemap="#ospfn_2ospfn_8c" alt=""/></div>
<map name="ospfn_2ospfn_8c" id="ospfn_2ospfn_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1135,229,1201,256"/><area shape="rect" id="node55" href="prefix_8h.html" title="prefix.h" alt="" coords="2583,304,2651,331"/><area shape="rect" id="node57" href="privs_8h.html" title="privs.h" alt="" coords="2057,80,2119,107"/><area shape="rect" id="node59" href="log_8h.html" title="log.h" alt="" coords="1405,229,1456,256"/><area shape="rect" id="node81" href="getopt_8h.html" title="getopt.h" alt="" coords="2555,80,2629,107"/><area shape="rect" id="node83" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="1377,155,1484,181"/><area shape="rect" id="node87" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="1559,155,1689,181"/><area shape="rect" id="node89" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="1940,155,2063,181"/><area shape="rect" id="node91" href="stream_8h.html" title="stream.h" alt="" coords="2039,229,2113,256"/><area shape="rect" id="node94" href="table_8h.html" title="lib/table.h" alt="" coords="2654,80,2735,107"/><area shape="rect" id="node96" href="ospfn__opaque__lsa_8h.html" title="ospfn_opaque_lsa.h" alt="" coords="1635,80,1779,107"/><area shape="rect" id="node101" href="ospf__opaque_8h.html" title="ospfd/ospf_opaque.h" alt="" coords="1714,155,1864,181"/><area shape="rect" id="node103" href="utility_8h.html" title="utility.h" alt="" coords="2760,80,2827,107"/><area shape="rect" id="node105" href="ospfn_8h.html" title="ospfn.h" alt="" coords="2901,80,2968,107"/><area shape="rect" id="node107" href="thread_8h.html" title="thread.h" alt="" coords="2823,155,2895,181"/><area shape="rect" id="node109" href="ospf__apiclient_8h.html" title="ospfclient/ospf_apiclient.h" alt="" coords="2919,155,3100,181"/><area shape="rect" id="node112" href="ospf__api_8h.html" title="ospfd/ospf_api.h" alt="" coords="3043,80,3165,107"/><area shape="rect" id="node116" href="ospf__zebra_8h.html" title="ospfd/ospf_zebra.h" alt="" coords="3189,80,3328,107"/><area shape="rect" id="node120" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="3456,80,3595,107"/></map>
</div>
</div>
<p><a href="ospfn_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a2858154e2009b0e6e616f313177762bc">init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a6c2d0abc3487f3d7cc33b635b8098e05">ospfn_stop_signal_handler</a> (int sig)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a1f511d9757b5d8f9ca3ceef41ef20d51">pid_create</a> (pid_t <a class="el" href="zserv_8h.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#af1008b326a92cd2f646f5c5a5b7daf5b">usage</a> (char *<a class="el" href="vtysh__main_8c.html#ab9e1449fd00c98428516f0b41eddcb10">progname</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a8a770abf2df0826398857d02b1447571">process_command_ccnname</a> (char *command)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#ab5e1112232fc2485e5f280ea9a4b412e">process_command_logdir</a> (char *command)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#afb3fe99ddd133a8a33ff4cde4f74b4ef">process_command_ccnnametype</a> (char *command)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a77da863f4342fb3260ea474063868df4">process_command_multipath_order</a> (char *command)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#acc5880817878e92c0fab845112aac99f">process_conf_command</a> (char *command, int isLogOnlyProcessing)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a13e04cbba48afdbe5ecd0455e1f738f5">readConfigFile</a> (const char *filename, int isLogOnlyProcessing)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a56016c767f4dfeb0473109c1c0f4fe78">add_nexthop</a> (struct in_addr address, unsigned int pref_order)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a7152a885fda88f17214c423892f280bc">display_nexthop</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a60602d3928887dde138c9ca08a00cb1d">no_nexthop</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34">pop_nexthop_from_position</a> (unsigned int pos)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a1c5ccb303cbc550a6fefe7d2518d2918">pop_nexthop</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a934aea54f5f3f116ebe68bb03388ecf1">free_all_nexthop</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a9ce07a695e675b6b320ac3d132cb5966">is_nexthop</a> (char *address)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a6f2b7c919644798e75c8a2540a9c43c5">lsa_read</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#aad428d9875745fcef716aca47fb333a9">lsa_update_callback</a> (struct in_addr ifaddr, struct in_addr area_id, u_char is_self_originated, struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a38a3a5ae77b409561e53c4e835457abf">lsa_delete_callback</a> (struct in_addr ifaddr, struct in_addr area_id, u_char is_self_originated, struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#ab8e40e3d32e8c43ded4e8c49d72361eb">ready_callback</a> (u_char lsa_type, u_char opaque_type, struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a6fb050176efa11bed6399362d3b60bb2">new_if_callback</a> (struct in_addr ifaddr, struct in_addr area_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a7688afd440d4917dcebc81844b40b024">del_if_callback</a> (struct in_addr ifaddr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a16e580b288ae51e09148d44d1d075cbf">ism_change_callback</a> (struct in_addr ifaddr, struct in_addr area_id, u_char state)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#aaa137818c721bed4e592a1cd947884c2">nsm_change_callback</a> (struct in_addr ifaddr, struct in_addr nbraddr, struct in_addr router_id, u_char state)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#ad30132c9f494fedfe122b6e55028ce1a">nexthop_change_callback</a> (struct in_addr router_id, int nexthop_count, struct in_addr *nexthops)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#ad5f5adef30cc65b6dd730b50e528b55e">inject_name_opaque_lsa</a> (struct <a class="el" href="structname__prefix.html">name_prefix</a> *<a class="el" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>, unsigned int op_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a4820d49966add503e096cf3eaa59df8d">init_ospfn</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a98d4a63d037cb8c579f44baa2f9801a2">ospfd_privs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structoption.html">option</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospfn_8c.html#a94965649155359a4c4eb047af782bf22">longopts</a> []</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>OSPFN program designed for dynamic FIB manipulation for CCND. </p>
<dl class="author"><dt><b>Author:</b></dt><dd>A K M Mahmudul Hoque </dd></dl>

<p>Definition in file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a56016c767f4dfeb0473109c1c0f4fe78"></a><!-- doxytag: member="ospfn.c::add_nexthop" ref="a56016c767f4dfeb0473109c1c0f4fe78" args="(struct in_addr address, unsigned int pref_order)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_nexthop </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pref_order</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add next hop in multipath order list. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00434">434</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *current;  
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *tmp = (<span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structmultipath.html">multipath</a>));
    tmp-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#ad4cfe2b29aed545499513a32776f244f">address</a>=address;
    tmp-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#a7c6e3d68aa221d4f7a2643e2c0293845">pref_order</a>=pref_order;

    <span class="keywordflow">if</span>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || pref_order &lt; ospfn-&gt;mp-&gt;nexthop.pref_order)
    {
        tmp-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a> = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a> = tmp;    
    }
    <span class="keywordflow">else</span>
    {
        current = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
        
        <span class="keywordflow">while</span> ( current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#a7c6e3d68aa221d4f7a2643e2c0293845">pref_order</a> &lt;= pref_order)
            current = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        
        tmp-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a> = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a> = tmp;
    }
}   
</pre></div>
</div>
</div>
<a class="anchor" id="a7688afd440d4917dcebc81844b40b024"></a><!-- doxytag: member="ospfn.c::del_if_callback" ref="a7688afd440d4917dcebc81844b40b024" args="(struct in_addr ifaddr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void del_if_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Interface Delete call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00754">754</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;new_if_callback: ifaddr: %s\n &quot;</span>, inet_ntoa (ifaddr));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7152a885fda88f17214c423892f280bc"></a><!-- doxytag: member="ospfn.c::display_nexthop" ref="a7152a885fda88f17214c423892f280bc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void display_nexthop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print Multipath order list. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00465">465</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *current;

    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Display Queued Item: \n&quot;</span>);

    current = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
    <span class="keywordflow">if</span> (  current == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Empty Queue @display_nexthop \n&quot;</span>);
    }
    <span class="keywordflow">else</span>
    {
        <span class="keywordflow">while</span> ( current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
            <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Item: Address :%s   Pref_order:  %d \n&quot;</span>,inet_ntoa(current-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#ad4cfe2b29aed545499513a32776f244f">address</a>), current-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#a7c6e3d68aa221d4f7a2643e2c0293845">pref_order</a> );
            current = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a934aea54f5f3f116ebe68bb03388ecf1"></a><!-- doxytag: member="ospfn.c::free_all_nexthop" ref="a934aea54f5f3f116ebe68bb03388ecf1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void free_all_nexthop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Free all allocated memory for multipath orders. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00571">571</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    <span class="keywordtype">int</span> no_element=<a class="code" href="ospfn_8c.html#a60602d3928887dde138c9ca08a00cb1d" title="Return number of multipath configured.">no_nexthop</a>();

    <span class="keywordflow">for</span>(i=1; i&lt;=no_element; i++)
        <a class="code" href="ospfn_8c.html#a1c5ccb303cbc550a6fefe7d2518d2918" title="Pop a nexthop from multipath.">pop_nexthop</a>();

    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; All memory freed \n&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2858154e2009b0e6e616f313177762bc"></a><!-- doxytag: member="ospfn.c::init" ref="a2858154e2009b0e6e616f313177762bc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>initialize signal handler for ospfn program </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00112">112</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (signal(SIGQUIT, <a class="code" href="ospfn_8c.html#a6c2d0abc3487f3d7cc33b635b8098e05" title="ospfn program&#39;s signal handler function">ospfn_stop_signal_handler</a> ) == SIG_ERR) 
    {
        perror(<span class="stringliteral">&quot;SIGQUIT install error\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
    }
    <span class="keywordflow">if</span> (signal(SIGTERM, <a class="code" href="ospfn_8c.html#a6c2d0abc3487f3d7cc33b635b8098e05" title="ospfn program&#39;s signal handler function">ospfn_stop_signal_handler</a> ) == SIG_ERR) 
    {
        perror(<span class="stringliteral">&quot;SIGTERM install error\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
        }
    <span class="keywordflow">if</span> (signal(SIGINT, <a class="code" href="ospfn_8c.html#a6c2d0abc3487f3d7cc33b635b8098e05" title="ospfn program&#39;s signal handler function">ospfn_stop_signal_handler</a> ) == SIG_ERR)
    {
        perror(<span class="stringliteral">&quot;SIGTERM install error\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
    }   
    <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#adeb9e347d1d783bdc0ff3ae0e6d3eb85">CCN_NAME_TYPE</a>=<a class="code" href="ospfn_8h.html#a9dd88b880b2b8fbcb00c48b0eb7a4884">CCN_NAME_FORMAT_URI</a>;
    <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4820d49966add503e096cf3eaa59df8d"></a><!-- doxytag: member="ospfn.c::init_ospfn" ref="a4820d49966add503e096cf3eaa59df8d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init_ospfn </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize ospfn. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00865">865</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{

    <a class="code" href="structospfn.html">ospfn</a>=(<span class="keyword">struct </span><a class="code" href="structospfn.html">ospfn</a> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structospfn.html">ospfn</a>));

    <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a6b98842a2bfca74f6ce1777be4c90807">OSPFN_DEFAULT_CONFIG_FILE</a>=(<span class="keywordtype">char</span> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(strlen(<span class="stringliteral">&quot;ospfn.conf&quot;</span>)+1);
    <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#acc23aa4a5fd60737211d45af2b9bde17">OSPFN_LOCAL_HOST</a>=(<span class="keywordtype">char</span> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(strlen(<span class="stringliteral">&quot;127.0.0.1&quot;</span>)+1);  
    <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a6b98842a2bfca74f6ce1777be4c90807">OSPFN_DEFAULT_CONFIG_FILE</a>,<span class="stringliteral">&quot;ospfn.conf&quot;</span>,10);
    <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#acc23aa4a5fd60737211d45af2b9bde17">OSPFN_LOCAL_HOST</a>,<span class="stringliteral">&quot;127.0.0.1&quot;</span>,9);

        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a882146eca277081aad6e758b678a35d3">origin_table</a> = <a class="code" href="tables_8c.html#add6c0fe390d5f97c17cfc9e92748b131">origin_hash_create</a>();
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a5fcbebd95f37c54c3ff5e0455adcd819">prefix_table</a> = <a class="code" href="tables_8c.html#a3c9c026f80f12156cd635307ed718fd2">prefix_hash_create</a>();
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad5f5adef30cc65b6dd730b50e528b55e"></a><!-- doxytag: member="ospfn.c::inject_name_opaque_lsa" ref="ad5f5adef30cc65b6dd730b50e528b55e" args="(struct name_prefix *np, unsigned int op_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void inject_name_opaque_lsa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>op_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>inject Name OLSA in ospfd </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00825">825</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="spgrid_8c.html#a6dd5c44547ae6870b695e43bc05c9a24">cl</a>;
        <span class="keyword">struct </span>in_addr ifaddr;
        <span class="keyword">struct </span>in_addr area_id;
        u_char lsa_type;
        u_char opaque_type;
        <span class="keywordtype">int</span> rc;

        cl=<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>;
        <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<span class="stringliteral">&quot;127.0.0.1&quot;</span>, &amp;ifaddr);    
    <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<span class="stringliteral">&quot;0&quot;</span>, &amp;area_id);
        lsa_type = 10;
        opaque_type = 235;

        <span class="keyword">struct </span><a class="code" href="structname__opaque__body.html">name_opaque_body</a> *nob= (<span class="keyword">struct </span><a class="code" href="structname__opaque__body.html">name_opaque_body</a> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>( <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structname__opaque__body.html">name_opaque_body</a>) + np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>);
    nob-&gt;<a class="code" href="structname__opaque__body.html#aa23e0bc227156679aacab72c3b1e5159">name_length</a>=np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>;
        nob-&gt;<a class="code" href="structname__opaque__body.html#a2e29ccf9b3838a29421113212385a25d">name_type</a>=<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#adeb9e347d1d783bdc0ff3ae0e6d3eb85">CCN_NAME_TYPE</a>;
    np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>=<a class="code" href="utility_8c.html#ace8dc64a0447a563cb013be9c17660ce" title="align character to 4 bytes by padding character at end of string">align_data</a>(np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>,0);
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(nob-&gt;<a class="code" href="structname__opaque__body.html#aec55545ef6304460097e186e83e140d5">name_data</a>,np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>,np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Originating/updating Name Opaque LSA... &quot;</span>);
        <span class="comment">/*injecting name opaque lsa here */</span>
        rc = <a class="code" href="ospf__apiclient_8c.html#a0bddf5cada0954167e7361d59fcf8a97">ospf_apiclient_lsa_originate</a>(cl, ifaddr, area_id,
            lsa_type,
            opaque_type, op_id,
            (<span class="keywordtype">void</span> *)nob, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structname__opaque__body.html">name_opaque_body</a>) + np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>  );

        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Done, return code is %d\n&quot;</span>, rc);

    free(nob);

}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ce07a695e675b6b320ac3d132cb5966"></a><!-- doxytag: member="ospfn.c::is_nexthop" ref="a9ce07a695e675b6b320ac3d132cb5966" args="(char *address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int is_nexthop </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check existence of address in multipath nexthop. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00589">589</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *current;
    <span class="keywordtype">int</span> exists=0;

    current = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
    <span class="keywordflow">if</span> (  current == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__, <span class="stringliteral">&quot; Empty Queue @ is_nexthop \n&quot;</span>);
    }
    <span class="keywordflow">else</span>
    {
        <span class="keywordflow">while</span> ( current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
            <span class="keywordflow">if</span>(inet_addr(inet_ntoa(current-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#ad4cfe2b29aed545499513a32776f244f">address</a>)) == inet_addr(address))    
                exists=1;           
            current = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        }
    }

    <span class="keywordflow">return</span> exists;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a16e580b288ae51e09148d44d1d075cbf"></a><!-- doxytag: member="ospfn.c::ism_change_callback" ref="a16e580b288ae51e09148d44d1d075cbf" args="(struct in_addr ifaddr, struct in_addr area_id, u_char state)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ism_change_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>area_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Interface state machine change call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00765">765</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;ism_change: ifaddr: %s \n&quot;</span>, inet_ntoa (ifaddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;area_id: %s\n&quot;</span>, inet_ntoa (area_id));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;state: %d [%s]\n&quot;</span>, state, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#ae4c65baac757ab6ffaaf05421dd53b3a">ospf_ism_state_msg</a>, state));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38a3a5ae77b409561e53c4e835457abf"></a><!-- doxytag: member="ospfn.c::lsa_delete_callback" ref="a38a3a5ae77b409561e53c4e835457abf" args="(struct in_addr ifaddr, struct in_addr area_id, u_char is_self_originated, struct lsa_header *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void lsa_delete_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>area_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>is_self_originated</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>LSA Delete call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00698">698</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;lsa_delete_callback: \n&quot;</span>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;ifaddr: %s \n&quot;</span>, inet_ntoa (ifaddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;area: %s\n&quot;</span>, inet_ntoa (area_id));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;is_self_origin: %u\n&quot;</span>, is_self_originated);
    
        <a class="code" href="ospfn__opaque__lsa_8c.html#aa9b91becdfc52d3833d342420f25411e" title="print LSA header information">ccnx_lsa_header_dump</a> (lsa);

        <span class="keywordflow">if</span>(lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 9 || lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 10 || lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 11)
    {
        <a class="code" href="ospfn__opaque__lsa_8c.html#a5dfa62ab078fb777258f5e6ecf717076" title="delete operation for OLSA is carried out">delete_opaque_lsa</a>((<span class="keyword">struct</span> <a class="code" href="structccnx__opaque__lsa.html">ccnx_opaque_lsa</a> *) lsa);
        }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6f2b7c919644798e75c8a2540a9c43c5"></a><!-- doxytag: member="ospfn.c::lsa_read" ref="a6f2b7c919644798e75c8a2540a9c43c5" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This thread handles asynchronous messages coming in from the OSPF API server. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00623">623</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>;
        <span class="keywordtype">int</span> fd;
        <span class="keywordtype">int</span> ret;

        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;lsa_read called\n&quot;</span>);
        oclient = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
        fd = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);

        <span class="comment">/* Handle asynchronous message */</span>
        ret = <a class="code" href="ospf__apiclient_8c.html#ac20dd71e28279edb1dcaa72837f44ee8">ospf_apiclient_handle_async</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>);
        <span class="keywordflow">if</span> (ret &lt; 0) 
        {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; OSPFD Connection closed, exiting...\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(0);
        }

        <span class="comment">/* Reschedule read thread */</span>
        <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospfn_8c.html#a6f2b7c919644798e75c8a2540a9c43c5" title="This thread handles asynchronous messages coming in from the OSPF API server.">lsa_read</a>, <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>, fd);
        <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aad428d9875745fcef716aca47fb333a9"></a><!-- doxytag: member="ospfn.c::lsa_update_callback" ref="aad428d9875745fcef716aca47fb333a9" args="(struct in_addr ifaddr, struct in_addr area_id, u_char is_self_originated, struct lsa_header *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void lsa_update_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>area_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>is_self_originated</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>LSA Update call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00657">657</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;lsa_update_callback: \n&quot;</span>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;ifaddr: %s \n&quot;</span>, inet_ntoa (ifaddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;area: %s\n&quot;</span>, inet_ntoa (area_id));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;is_self_origin: %u\n&quot;</span>, is_self_originated);
    <span class="comment">/* It is important to note that lsa_header does indeed include the</span>
<span class="comment">       header and the LSA payload. To access the payload, first check</span>
<span class="comment">       the LSA type and then typecast lsa into the corresponding type,</span>
<span class="comment">       e.g.:</span>
<span class="comment"></span>
<span class="comment">       if (lsa-&gt;type == OSPF_ROUTER_LSA) {</span>
<span class="comment">       struct router_lsa *rl = (struct router_lsa) lsa;</span>
<span class="comment">       ...</span>
<span class="comment">       u_int16_t links = rl-&gt;links;</span>
<span class="comment">       ...</span>
<span class="comment">       }</span>
<span class="comment">       */</span>

        <a class="code" href="ospfn__opaque__lsa_8c.html#aa9b91becdfc52d3833d342420f25411e" title="print LSA header information">ccnx_lsa_header_dump</a> (lsa);

        <span class="keywordflow">if</span>(lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>)
    {    
        <a class="code" href="ospfn__opaque__lsa_8c.html#a4fef0e784dd40ef3d1423331acd508e4" title="print out router LSA">ospf_router_lsa_print</a>((<span class="keyword">struct</span> <a class="code" href="structrouter__lsa.html">router_lsa</a> *) lsa, lsa-&gt;length);
        } 
    
    <span class="keywordflow">if</span>(lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 9 || lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 10 || lsa-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == 11)
    {
        <a class="code" href="ospfn__opaque__lsa_8c.html#a83350c3438bd1589e3e6644157844472" title="Updates are carried out for OLSA.">update_opaque_lsa</a>((<span class="keyword">struct</span> <a class="code" href="structccnx__opaque__lsa.html">ccnx_opaque_lsa</a> *) lsa);
        <a class="code" href="ospfn__opaque__lsa_8c.html#ac0cad3ee264d3eb1b852166f2c74b333" title="print opaque lsa content">ccnx_opaque_lsa_print</a>((<span class="keyword">struct</span> <a class="code" href="structccnx__opaque__lsa.html">ccnx_opaque_lsa</a> *) lsa);
        }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="ospfn.c::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int main </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00886">886</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{   
        <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> main_thread;
        <span class="keywordtype">int</span> res;
        <span class="keywordtype">int</span> <a class="code" href="isis__main_8c.html#a4255d3efd1474d8e9d267e4b1559c1f9">daemon_mode</a> = 0;
        <span class="keywordtype">int</span> isLoggingEnabled = 1;
        <span class="keywordtype">char</span> *<a class="code" href="bgp__main_8c.html#ac269be8b91ae4b24df48de5d8ad7e7a7">config_file</a> ;
    
    <a class="code" href="ospfn_8c.html#a4820d49966add503e096cf3eaa59df8d" title="Initialize ospfn.">init_ospfn</a>();   
    config_file=<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a6b98842a2bfca74f6ce1777be4c90807">OSPFN_DEFAULT_CONFIG_FILE</a>;
    
    <span class="keywordflow">while</span> ((res = <a class="code" href="getopt_8h.html#a8616b8a74ae6c01a7ad95ad2876226ec">getopt_long</a>(argc, argv, <span class="stringliteral">&quot;df:hn&quot;</span>, <a class="code" href="bgp__main_8c.html#a94965649155359a4c4eb047af782bf22">longopts</a>, 0)) != -1) 
    {
            <span class="keywordflow">switch</span> (res) 
        {
            <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
                daemon_mode = 1;
                <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <span class="charliteral">&#39;f&#39;</span>:
                config_file = <a class="code" href="getopt_8c.html#adb50a0eab9fed92fc3bfc7dfa4f2c410">optarg</a>;
                <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:
                isLoggingEnabled = 0;
                <span class="keywordflow">break</span>;
            <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>:
            <span class="keywordflow">default</span>:
                <a class="code" href="bgp__main_8c.html#ab24f62159230cf265fc4d7ddc4c91872">usage</a>(argv[0]);
        }
        }

        <span class="comment">/* Initialization */</span>
        <a class="code" href="privs_8c.html#ac6082c5377fb94942a842809eb508682">zprivs_init</a> (&amp;<a class="code" href="ospfclient_8c.html#a98d4a63d037cb8c579f44baa2f9801a2">ospfd_privs</a>);
        <a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a> = <a class="code" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ();

        <a class="code" href="ospfn_8c.html#a2858154e2009b0e6e616f313177762bc" title="initialize signal handler for ospfn program">init</a>(); 
        <a class="code" href="ospfn_8c.html#a1f511d9757b5d8f9ca3ceef41ef20d51" title="pid file creation function">pid_create</a>(getpid()); 
    <a class="code" href="ospfn_8c.html#a13e04cbba48afdbe5ecd0455e1f738f5" title="read configuration line by line and processes command from it">readConfigFile</a>(config_file,1);

        <span class="keywordflow">if</span>(isLoggingEnabled)
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>=<a class="code" href="utility_8c.html#a9edf77cd3b6145a1568b3c082a97797a" title="Check whether the loggingDir exists Otherwise creates LoggingDir in default location and creates log ...">startLogging</a>( <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a492427a002fda236a0d9748102eaa6a8">loggingDir</a> );
    
        <a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a> = ccn_create();
        res = ccn_connect(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>); 
        <span class="keywordflow">if</span> (res &lt; 0) 
    {
        ccn_perror(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, <span class="stringliteral">&quot;Cannot connect to ccnd.&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
        }

        <span class="comment">/* Open connection to OSPF daemon */</span>
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Connecting to OSPF daemon ............\n&quot;</span>);
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a> = <a class="code" href="ospf__apiclient_8c.html#aca9f7a18d0d50ced1ce00f268fbfd1e3">ospf_apiclient_connect</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#acc23aa4a5fd60737211d45af2b9bde17">OSPFN_LOCAL_HOST</a>, <a class="code" href="ospfclient_8c.html#a75d633bf6407c737d016e0690bcb2d3a">ASYNCPORT</a>);
        <span class="keywordflow">if</span> (!<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>)
    {
        printf (<span class="stringliteral">&quot;Connecting to OSPF daemon on 127.0.0.1 failed!\n&quot;</span>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__, <span class="stringliteral">&quot;Connecting to OSPF daemon on host: 127.0.0.1 failed!!\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
        }
    <span class="keywordflow">else</span> 
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Connection to OSPF established. \n&quot;</span>);

        <span class="comment">/* Register callback functions. */</span>
        <a class="code" href="ospf__apiclient_8c.html#a919781dff26dbaf91b9da60dc8b47f49">ospf_apiclient_register_callback</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>,
            <a class="code" href="ospfn_8c.html#ab8e40e3d32e8c43ded4e8c49d72361eb" title="LSA Ready call back function.">ready_callback</a>,
            <a class="code" href="ospfn_8c.html#a6fb050176efa11bed6399362d3b60bb2" title="new interface call back function">new_if_callback</a>,
            <a class="code" href="ospfn_8c.html#a7688afd440d4917dcebc81844b40b024" title="Interface Delete call back function.">del_if_callback</a>,
            <a class="code" href="ospfn_8c.html#a16e580b288ae51e09148d44d1d075cbf" title="Interface state machine change call back function.">ism_change_callback</a>,
            <a class="code" href="ospfn_8c.html#aaa137818c721bed4e592a1cd947884c2" title="Neighbor State Machine change call back function.">nsm_change_callback</a>,
            <a class="code" href="ospfn_8c.html#aad428d9875745fcef716aca47fb333a9" title="LSA Update call back function.">lsa_update_callback</a>,
            <a class="code" href="ospfn_8c.html#a38a3a5ae77b409561e53c4e835457abf" title="LSA Delete call back function.">lsa_delete_callback</a>,
            <a class="code" href="ospfn_8c.html#ad30132c9f494fedfe122b6e55028ce1a" title="Nexthop Change call back function.">nexthop_change_callback</a>);

        <span class="comment">/* Register LSA type and opaque type. */</span>
    <span class="comment">// registering adjacency opaque lsa</span>
        <a class="code" href="ospf__apiclient_8c.html#aa095649109dd104d2c652c18ceae8cc9">ospf_apiclient_register_opaque_type</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>, 10, <a class="code" href="ospfn__opaque__lsa_8h.html#a8ca581d3400eb115408c6abfe371e27f">ADJ_OPAQUE_LSA</a>); 
    <span class="comment">// registering name opaque lsa</span>
        <a class="code" href="ospf__apiclient_8c.html#aa095649109dd104d2c652c18ceae8cc9">ospf_apiclient_register_opaque_type</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>, 10, <a class="code" href="ospfn__opaque__lsa_8h.html#a5ba5ad7f111ca8c4b0861da0609aebf5">NAME_OPAQUE_LSA</a>); 

        <span class="comment">/* Synchronize database with OSPF daemon. */</span>
        <a class="code" href="ospf__apiclient_8c.html#a30571f833f72d7e4c05021d0821477ea">ospf_apiclient_sync_lsdb</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>);

        <a class="code" href="ospfn_8c.html#a13e04cbba48afdbe5ecd0455e1f738f5" title="read configuration line by line and processes command from it">readConfigFile</a>(config_file,0);  
        <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospfn_8c.html#a6f2b7c919644798e75c8a2540a9c43c5" title="This thread handles asynchronous messages coming in from the OSPF API server.">lsa_read</a>, <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>, <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>-&gt;<a class="code" href="structospf__apiclient.html#ae3a5f4d039db64a899c30196b35ecfaa">fd_async</a>);
    
        <span class="keywordflow">if</span> (daemon_mode)
            <a class="code" href="daemon_8c.html#af298996def620cbda4cd529988218cb0">daemon</a>(0, 0);

        <span class="keywordflow">while</span> (1)
    {
        <a class="code" href="thread_8c.html#a1674b380ab1baf464b4f541c0a938656">thread_fetch</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, &amp;main_thread);
        <a class="code" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (&amp;main_thread);
        }

    <span class="keywordflow">return</span> 0;       
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6fb050176efa11bed6399362d3b60bb2"></a><!-- doxytag: member="ospfn.c::new_if_callback" ref="a6fb050176efa11bed6399362d3b60bb2" args="(struct in_addr ifaddr, struct in_addr area_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void new_if_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>area_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>new interface call back function </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00742">742</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;new_if_callback: ifaddr: %s \n&quot;</span>, inet_ntoa (ifaddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;area_id: %s\n&quot;</span>, inet_ntoa (area_id));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad30132c9f494fedfe122b6e55028ce1a"></a><!-- doxytag: member="ospfn.c::nexthop_change_callback" ref="ad30132c9f494fedfe122b6e55028ce1a" args="(struct in_addr router_id, int nexthop_count, struct in_addr *nexthops)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void nexthop_change_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>router_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nexthop_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>nexthops</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Nexthop Change call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00796">796</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe;
        <span class="keyword">struct </span><a class="code" href="structnameprefix__entry.html">nameprefix_entry</a> *ne;
        <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe;

    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Next Hop Change Callback Called \n&quot;</span>);

        oe = <a class="code" href="tables_8c.html#a9280c0dda73eb6928b5d642613a8606e">origin_hash_get</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a882146eca277081aad6e758b678a35d3">origin_table</a>, &amp;router_id);

        <a class="code" href="tables_8c.html#a54a573422a4af5227710ed6e52a3301c">update_origin_nexthop_list</a>(oe, nexthop_count, nexthops);

        ne = oe-&gt;<a class="code" href="structorigintable__entry.html#a5e8d3d0ead4dc2aa2e4c11c110f163e2">nameprefix_list</a>;
        <span class="keywordflow">while</span> (ne)
    {
        fe = <a class="code" href="tables_8c.html#a0f103ceb397b188297a6e6ccc9bbe508">prefix_hash_get</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a5fcbebd95f37c54c3ff5e0455adcd819">prefix_table</a>, ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>);
        <a class="code" href="tables_8c.html#a0fe3362bd7ab51d6746ff0b674445e46">update_name_prefix_nexthop_list</a>(fe, <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a882146eca277081aad6e758b678a35d3">origin_table</a>);
        ne = ne-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a>;
        }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a60602d3928887dde138c9ca08a00cb1d"></a><!-- doxytag: member="ospfn.c::no_nexthop" ref="a60602d3928887dde138c9ca08a00cb1d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int no_nexthop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return number of multipath configured. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00491">491</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *current;
    <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a> = 0;

    current = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
    <span class="keywordflow">if</span> (  current == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Empty Queue @no_nexthop \n&quot;</span>);
    }
    <span class="keywordflow">else</span>
    {
        <span class="keywordflow">while</span> ( current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
            current = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
            count++;
        }
    }

    <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaa137818c721bed4e592a1cd947884c2"></a><!-- doxytag: member="ospfn.c::nsm_change_callback" ref="aaa137818c721bed4e592a1cd947884c2" args="(struct in_addr ifaddr, struct in_addr nbraddr, struct in_addr router_id, u_char state)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void nsm_change_callback </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>ifaddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>nbraddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>router_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Neighbor State Machine change call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00779">779</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;nsm_change: ifaddr: %s \n&quot;</span>, inet_ntoa (ifaddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;nbraddr: %s\n&quot;</span>, inet_ntoa (nbraddr));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;router_id: %s\n&quot;</span>, inet_ntoa (router_id));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;state: %d [%s]\n&quot;</span>, state, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, state));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6c2d0abc3487f3d7cc33b635b8098e05"></a><!-- doxytag: member="ospfn.c::ospfn_stop_signal_handler" ref="a6c2d0abc3487f3d7cc33b635b8098e05" args="(int sig)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospfn_stop_signal_handler </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sig</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ospfn program's signal handler function </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00140">140</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    signal(sig, SIG_IGN);
    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Signal for ospfn stop\n&quot;</span>);
    <a class="code" href="tables_8c.html#ae588e397cd2770893df9ce89de74a575" title="delete ccnd fib entry for every name prefix entry in name prefix table">hash_iterate_delete_npt</a> (<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a5fcbebd95f37c54c3ff5e0455adcd819">prefix_table</a>);
        ccn_destroy(&amp;<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>);   
        <a class="code" href="ospf__apiclient_8c.html#a0eef974ec77db8ea8f14c3566738be52">ospf_apiclient_close</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a8fd91d317acf9d25e5c3cfa1f295252d">oclient</a>);   
    <a class="code" href="ospfn_8c.html#a934aea54f5f3f116ebe68bb03388ecf1" title="Free all allocated memory for multipath orders.">free_all_nexthop</a>(); 
    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Exiting ospfn...\n&quot;</span>);  
    <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1f511d9757b5d8f9ca3ceef41ef20d51"></a><!-- doxytag: member="ospfn.c::pid_create" ref="a1f511d9757b5d8f9ca3ceef41ef20d51" args="(pid_t pid)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pid_create </td>
          <td>(</td>
          <td class="paramtype">pid_t&#160;</td>
          <td class="paramname"><em>pid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>pid file creation function </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00158">158</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    FILE *fp;
    fp=fopen(PATH_OSPFN_PID,<span class="stringliteral">&quot;w&quot;</span>);
    <span class="keywordflow">if</span>(fp!=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        fprintf(fp,<span class="stringliteral">&quot;%d\n&quot;</span>,<a class="code" href="zebra_2main_8c.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>+1);
        fclose(fp); 
    }
    <span class="keywordflow">else</span> 
    {
        fprintf (stderr, <span class="stringliteral">&quot;pid create: can not create pid file in %s directory\n&quot;</span>, PATH_OSPFN_PID);  
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
    }   
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1c5ccb303cbc550a6fefe7d2518d2918"></a><!-- doxytag: member="ospfn.c::pop_nexthop" ref="a1c5ccb303cbc550a6fefe7d2518d2918" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pop_nexthop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pop a nexthop from multipath. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00550">550</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *tmp;
    <span class="keywordflow">if</span> ( <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Empty Queue@pop_nexthop \n&quot;</span>);
    <span class="keywordflow">else</span>
    {
        tmp = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Deleted item: Address :%s   Pref_order:  %d \n&quot;</span>,inet_ntoa(tmp-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#ad4cfe2b29aed545499513a32776f244f">address</a>), tmp-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#a7c6e3d68aa221d4f7a2643e2c0293845">pref_order</a> );
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a> = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        free ( tmp );
    } 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8fc6479763cc8f9d5f1253e3aa1baf34"></a><!-- doxytag: member="ospfn.c::pop_nexthop_from_position" ref="a8fc6479763cc8f9d5f1253e3aa1baf34" args="(unsigned int pos)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr pop_nexthop_from_position </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return nexthop from multipath from a position. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00520">520</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structmultipath.html">multipath</a> *current;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a>=1;
    <span class="keywordflow">if</span> ( <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> )
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Empty Queue@pop_nexthop_from_position \n&quot;</span>);   
    <span class="keywordflow">else</span>
    {
        current = <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a4ff1e8c01aec571b460d1d802b15c90d">mp</a>;
        
        <span class="keywordflow">while</span> ( current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; count&lt;pos)
        {
            count++;
            current = current-&gt;<a class="code" href="structmultipath.html#ad065f2c5c38fa3acf5812cb7beaf273a">next</a>;
        }

        <span class="keywordflow">if</span> ( current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            <span class="keywordflow">return</span> current-&gt;<a class="code" href="structmultipath.html#a5c65d7084f72d0731a9cd7872221f43c">nexthop</a>.<a class="code" href="structhop.html#ad4cfe2b29aed545499513a32776f244f">address</a>;
    } 

    <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a770abf2df0826398857d02b1447571"></a><!-- doxytag: member="ospfn.c::process_command_ccnname" ref="a8a770abf2df0826398857d02b1447571" args="(char *command)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void process_command_ccnname </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>command</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>process ccnname commands and call for name OLS injection </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00203">203</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span>(command==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id]\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    
    <span class="keywordtype">char</span> *rem;
    <span class="keyword">const</span> <span class="keywordtype">char</span> *sep=<span class="stringliteral">&quot; \t\n&quot;</span>;
    <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>; 
    <span class="keywordtype">char</span> *opId;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> op_id;
    <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>=(<span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *)<a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structname__prefix.html">name_prefix</a>));

    <span class="comment">/* procesing of ccn name commands here */</span>
    name=strtok_r(command,sep,&amp;rem);
    <span class="keywordflow">if</span>(name==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    
    opId=strtok_r(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,sep,&amp;rem);
    <span class="keywordflow">if</span>(opId==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    op_id=atoi(opId);
    np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>=strlen(name)+1;
    np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>=(u_char *)name;    
    np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>[np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>]=<span class="charliteral">&#39;\0&#39;</span>;
    <a class="code" href="ospfn_8c.html#ad5f5adef30cc65b6dd730b50e528b55e" title="inject Name OLSA in ospfd">inject_name_opaque_lsa</a>(np,op_id);   
    free(np);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb3fe99ddd133a8a33ff4cde4f74b4ef"></a><!-- doxytag: member="ospfn.c::process_command_ccnnametype" ref="afb3fe99ddd133a8a33ff4cde4f74b4ef" args="(char *command)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void process_command_ccnnametype </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>command</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>process ccnnametype command and set nametype uri/ccnb </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00274">274</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span>(command==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Wrong Command Format ( ccnnametype uri/ccnb\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    <span class="keywordtype">char</span> *rem;
    <span class="keyword">const</span> <span class="keywordtype">char</span> *sep=<span class="stringliteral">&quot; \t\n&quot;</span>;
    <span class="keywordtype">char</span> *nametype;

    nametype=strtok_r(command,sep,&amp;rem);
    <span class="keywordflow">if</span>(nametype==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Wrong Command Format ( ccnnametype uri/ccnb )\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    <span class="keywordflow">if</span>(!strcmp(<a class="code" href="utility_8c.html#a8f2b4594f8766fbe985dd991d0cc777e" title="return lowercase of a string">strToLower</a>(nametype),<span class="stringliteral">&quot;uri&quot;</span>))
    {
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#adeb9e347d1d783bdc0ff3ae0e6d3eb85">CCN_NAME_TYPE</a>=<a class="code" href="ospfn_8h.html#a9dd88b880b2b8fbcb00c48b0eb7a4884">CCN_NAME_FORMAT_URI</a>;
    }
    <span class="keywordflow">if</span>(!strcmp(<a class="code" href="utility_8c.html#a8f2b4594f8766fbe985dd991d0cc777e" title="return lowercase of a string">strToLower</a>(nametype),<span class="stringliteral">&quot;ccnb&quot;</span>))
    {
        <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#adeb9e347d1d783bdc0ff3ae0e6d3eb85">CCN_NAME_TYPE</a>=<a class="code" href="ospfn_8h.html#af6b70054cb4021160a5f1b0d86226e38">CCN_NAME_FORMAT_CCNB</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab5e1112232fc2485e5f280ea9a4b412e"></a><!-- doxytag: member="ospfn.c::process_command_logdir" ref="ab5e1112232fc2485e5f280ea9a4b412e" args="(char *command)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void process_command_logdir </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>command</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>process logdir command and set the logdirectory </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00247">247</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span>(command==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Wrong Command Format ( logdir /path/to/logdir )\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    <span class="keywordtype">char</span> *rem;
    <span class="keyword">const</span> <span class="keywordtype">char</span> *sep=<span class="stringliteral">&quot; \t\n&quot;</span>;
    <span class="keywordtype">char</span> *dir;

    dir=strtok_r(command,sep,&amp;rem);
    <span class="keywordflow">if</span>(dir==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Wrong Command Format ( logdir /path/to/logdir/ )\n&quot;</span>);
        <span class="keywordflow">return</span>;
    }
    <a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a492427a002fda236a0d9748102eaa6a8">loggingDir</a>=strdup(dir);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a77da863f4342fb3260ea474063868df4"></a><!-- doxytag: member="ospfn.c::process_command_multipath_order" ref="a77da863f4342fb3260ea474063868df4" args="(char *command)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void process_command_multipath_order </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>command</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>process multipath-order command </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00309">309</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span>(command==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
                <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id]\n&quot;</span>);
                <span class="keywordflow">return</span>;
        }

        <span class="keywordtype">char</span> *rem;
        <span class="keyword">const</span> <span class="keywordtype">char</span> *sep=<span class="stringliteral">&quot; \t\n&quot;</span>;
        <span class="keywordtype">char</span> *addr;    
        <span class="keywordtype">char</span> *po;
        <span class="keyword">struct </span>in_addr address; 
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pref_order;

        <span class="comment">/* procesing of ccn name commands here */</span>
        addr=strtok_r(command,sep,&amp;rem);
        <span class="keywordflow">if</span>(addr==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
                <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id\n&quot;</span>);
                <span class="keywordflow">return</span>;
        }
    <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a>(addr,&amp;address);

        po=strtok_r(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,sep,&amp;rem);
        <span class="keywordflow">if</span>(po==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
                <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong Command Format [ ccnname /name/prefix opaque_id\n&quot;</span>);
                <span class="keywordflow">return</span>;
        }
        pref_order=atoi(po);
    
    <a class="code" href="ospfn_8c.html#a56016c767f4dfeb0473109c1c0f4fe78" title="Add next hop in multipath order list.">add_nexthop</a>(address, pref_order);   
    <a class="code" href="ospfn_8c.html#a7152a885fda88f17214c423892f280bc" title="Print Multipath order list.">display_nexthop</a>();
}
</pre></div>
</div>
</div>
<a class="anchor" id="acc5880817878e92c0fab845112aac99f"></a><!-- doxytag: member="ospfn.c::process_conf_command" ref="acc5880817878e92c0fab845112aac99f" args="(char *command, int isLogOnlyProcessing)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void process_conf_command </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>isLogOnlyProcessing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>process all configurations command and call each individual command processing sub routine </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00354">354</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">const</span> <span class="keywordtype">char</span> *separators=<span class="stringliteral">&quot; \t\n&quot;</span>;
    <span class="keywordtype">char</span> *remainder=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    <span class="keywordtype">char</span> *cmd_type=<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

    <span class="keywordflow">if</span>(command==<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || strlen(command)==0)
        <span class="keywordflow">return</span>; 

    cmd_type=strtok_r(command,separators,&amp;remainder);

    <span class="keywordflow">if</span>(!strcmp(cmd_type,<span class="stringliteral">&quot;ccnname&quot;</span>) )
    {
        <span class="keywordflow">if</span> (isLogOnlyProcessing == 0)
            <a class="code" href="ospfn_8c.html#a8a770abf2df0826398857d02b1447571" title="process ccnname commands and call for name OLS injection">process_command_ccnname</a>(remainder);
    }
    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!strcmp(cmd_type,<span class="stringliteral">&quot;ccnnametype&quot;</span>) )
    {
        <span class="keywordflow">if</span> (isLogOnlyProcessing == 0)
            <a class="code" href="ospfn_8c.html#afb3fe99ddd133a8a33ff4cde4f74b4ef" title="process ccnnametype command and set nametype uri/ccnb">process_command_ccnnametype</a>(remainder);
    } 
    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!strcmp(cmd_type,<span class="stringliteral">&quot;multipath-order&quot;</span>) )
        {
                <span class="keywordflow">if</span> (isLogOnlyProcessing == 0)
                        <a class="code" href="ospfn_8c.html#a77da863f4342fb3260ea474063868df4" title="process multipath-order command">process_command_multipath_order</a>(remainder);
    }
    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!strcmp(cmd_type,<span class="stringliteral">&quot;logdir&quot;</span>) )
    {
        <span class="keywordflow">if</span> (isLogOnlyProcessing == 1)
            <a class="code" href="ospfn_8c.html#ab5e1112232fc2485e5f280ea9a4b412e" title="process logdir command and set the logdirectory">process_command_logdir</a>(remainder);
    }
    <span class="keywordflow">else</span>
    {
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Wrong configuration command\n&quot;</span>);
        printf(<span class="stringliteral">&quot;Wrong configuration Command %s \n&quot;</span>,cmd_type);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a13e04cbba48afdbe5ecd0455e1f738f5"></a><!-- doxytag: member="ospfn.c::readConfigFile" ref="a13e04cbba48afdbe5ecd0455e1f738f5" args="(const char *filename, int isLogOnlyProcessing)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int readConfigFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>isLogOnlyProcessing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>read configuration line by line and processes command from it </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00399">399</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    FILE *cfg;
    <span class="keywordtype">char</span> buf[1024];
    <span class="keywordtype">int</span> len;

    cfg=fopen(filename, <span class="stringliteral">&quot;r&quot;</span>);

    <span class="keywordflow">if</span>(cfg == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        printf(<span class="stringliteral">&quot;\nConfiguration File does not exists\n&quot;</span>);
        <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);    
    }

    <span class="keywordflow">while</span>(fgets((<span class="keywordtype">char</span> *)buf, <span class="keyword">sizeof</span>(buf), cfg))
    {
        len=strlen(buf);
        <span class="keywordflow">if</span>(buf[len-1] == <span class="charliteral">&#39;\n&#39;</span>)
        buf[len-1]=<span class="charliteral">&#39;\0&#39;</span>;        
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__FILE__,<span class="stringliteral">&quot;%s\n&quot;</span>,buf);
        <a class="code" href="ospfn_8c.html#acc5880817878e92c0fab845112aac99f" title="process all configurations command and call each individual command processing sub routine...">process_conf_command</a>(buf,isLogOnlyProcessing);  
    }

    fclose(cfg);

    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8e40e3d32e8c43ded4e8c49d72361eb"></a><!-- doxytag: member="ospfn.c::ready_callback" ref="ab8e40e3d32e8c43ded4e8c49d72361eb" args="(u_char lsa_type, u_char opaque_type, struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ready_callback </td>
          <td>(</td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>lsa_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>opaque_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>LSA Ready call back function. </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00722">722</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;ready_callback: lsa_type: %d opaque_type: %d addr=%s\n&quot;</span>,lsa_type, opaque_type, inet_ntoa (addr));
        
    <span class="comment">/* Schedule opaque LSA originate in 5 secs */</span>
        <span class="comment">//thread_add_timer (master, lsa_inject, oclient, 5);</span>

        <span class="comment">/* Schedule opaque LSA update with new value */</span>
        <span class="comment">//thread_add_timer (master, lsa_inject, oclient, 10);</span>

        <span class="comment">/* Schedule delete */</span>
        <span class="comment">//thread_add_timer (master, lsa_delete, oclient, 30);</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1008b326a92cd2f646f5c5a5b7daf5b"></a><!-- doxytag: member="ospfn.c::usage" ref="af1008b326a92cd2f646f5c5a5b7daf5b" args="(char *progname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int usage </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>progname</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>print usage information </p>

<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00184">184</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>
<div class="fragment"><pre class="fragment">{

    printf(<span class="stringliteral">&quot;Usage: %s [OPTIONS...]\n\</span>
<span class="stringliteral">    Announces name prefix LSAs and modifies ccnd FIB.\n\n\</span>
<span class="stringliteral">    -d, --daemon        Run in daemon mode\n\</span>
<span class="stringliteral">    -f, --config_file   Specify configuration file name\n\</span>
<span class="stringliteral">    -h, --help          Display this help message\n&quot;</span>, <a class="code" href="isis__main_8c.html#ab9e1449fd00c98428516f0b41eddcb10">progname</a>);

    <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a94965649155359a4c4eb047af782bf22"></a><!-- doxytag: member="ospfn.c::longopts" ref="a94965649155359a4c4eb047af782bf22" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structoption.html">option</a> <a class="el" href="test__main_8c.html#a94965649155359a4c4eb047af782bf22">longopts</a>[]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
    { <span class="stringliteral">&quot;daemon&quot;</span>,      <a class="code" href="getopt_8h.html#a3bc1d5f667b5b4ca4b4abb685dc874ce">no_argument</a>,       <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="charliteral">&#39;d&#39;</span>},
    { <span class="stringliteral">&quot;config_file&quot;</span>, <a class="code" href="getopt_8h.html#a6ece8d8dfa8378778f7290fdaba5b8bc">required_argument</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="charliteral">&#39;f&#39;</span>},
    { <span class="stringliteral">&quot;help&quot;</span>,        <a class="code" href="getopt_8h.html#a3bc1d5f667b5b4ca4b4abb685dc874ce">no_argument</a>,       <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="charliteral">&#39;h&#39;</span>},
    { <span class="stringliteral">&quot;log&quot;</span>,         <a class="code" href="getopt_8h.html#a3bc1d5f667b5b4ca4b4abb685dc874ce">no_argument</a>,       <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="charliteral">&#39;n&#39;</span>},
    { 0 }
}
</pre></div>
<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00080">80</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>

</div>
</div>
<a class="anchor" id="a98d4a63d037cb8c579f44baa2f9801a2"></a><!-- doxytag: member="ospfn.c::ospfd_privs" ref="a98d4a63d037cb8c579f44baa2f9801a2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="el" href="ospfn_8c.html#a98d4a63d037cb8c579f44baa2f9801a2">ospfd_privs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
    .user = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
    .group = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
    .cap_num_p = 0,
    .cap_num_i = 0
}
</pre></div>
<p>Definition at line <a class="el" href="ospfn_8c_source.html#l00072">72</a> of file <a class="el" href="ospfn_8c_source.html">ospfn.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospfn_8c.html">ospfn.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:34 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
