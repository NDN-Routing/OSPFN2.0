<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/zebra_rib.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('zebra__rib_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">zebra/zebra_rib.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="str_8h_source.html">str.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="workqueue_8h_source.html">workqueue.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rib_8h_source.html">zebra/rib.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rt_8h_source.html">zebra/rt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zserv_8h_source.html">zebra/zserv.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="redistribute_8h_source.html">zebra/redistribute.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="debug_8h_source.html">zebra/debug.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for zebra_rib.c:</div>
<div class="dyncontent">
<div class="center"><img src="zebra__rib_8c__incl.png" border="0" usemap="#zebra_2zebra__rib_8c" alt=""/></div>
<map name="zebra_2zebra__rib_8c" id="zebra_2zebra__rib_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1419,80,1485,107"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2726,155,2775,181"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="3295,304,3363,331"/><area shape="rect" id="node63" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3236,379,3329,405"/><area shape="rect" id="node65" href="table_8h.html" title="table.h" alt="" coords="3667,155,3731,181"/><area shape="rect" id="node67" href="memory_8h.html" title="memory.h" alt="" coords="3861,80,3944,107"/><area shape="rect" id="node72" href="command_8h.html" title="command.h" alt="" coords="3017,80,3108,107"/><area shape="rect" id="node78" href="thread_8h.html" title="thread.h" alt="" coords="3059,229,3131,256"/><area shape="rect" id="node80" href="log_8h.html" title="log.h" alt="" coords="2787,229,2839,256"/><area shape="rect" id="node85" href="if_8h.html" title="if.h" alt="" coords="3531,229,3571,256"/><area shape="rect" id="node87" href="linklist_8h.html" title="linklist.h" alt="" coords="3651,304,3721,331"/><area shape="rect" id="node93" href="workqueue_8h.html" title="workqueue.h" alt="" coords="3641,229,3740,256"/><area shape="rect" id="node95" href="routemap_8h.html" title="routemap.h" alt="" coords="3968,80,4059,107"/><area shape="rect" id="node97" href="rib_8h.html" title="zebra/rib.h" alt="" coords="3393,229,3476,256"/><area shape="rect" id="node100" href="rt_8h.html" title="zebra/rt.h" alt="" coords="3325,155,3403,181"/><area shape="rect" id="node105" href="zserv_8h.html" title="zebra/zserv.h" alt="" coords="3529,155,3631,181"/><area shape="rect" id="node110" href="redistribute_8h.html" title="zebra/redistribute.h" alt="" coords="3547,80,3685,107"/><area shape="rect" id="node114" href="debug_8h.html" title="zebra/debug.h" alt="" coords="4083,80,4191,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="597,155,675,181"/><area shape="rect" id="node69" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3861,155,3976,181"/><area shape="rect" id="node74" href="vector_8h.html" title="vector.h" alt="" coords="3076,155,3148,181"/><area shape="rect" id="node76" href="vty_8h.html" title="vty.h" alt="" coords="2999,155,3051,181"/><area shape="rect" id="node83" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="2851,155,2975,181"/></map>
</div>
</div>
<p><a href="zebra__rib_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a>(R)&#160;&#160;&#160;((R)-&gt;<a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a> == ZEBRA_ROUTE_KERNEL || (R)-&gt;<a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a> == ZEBRA_ROUTE_CONNECT)</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structvrf.html">vrf</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ab63834e5cc03c12b2746e3f9e83badeb">vrf_alloc</a> (const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structvrf.html">vrf</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a4d74094cc2e3b3e2dd4e519e13ee566f">vrf_lookup</a> (u_int32_t <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a2d01ff33ddb6cea2d5535584ebacbee2">vrf_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a4cce6ca1f3039045a7a5f4c671b933de">nexthop_delete</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ae0403785ad0a712c3158f5c1fcf3ed4b">nexthop_free</a> (struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#af1ea7aee8aa1a72495d9b4160500a995">nexthop_ifindex_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, unsigned int ifindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a12d2cc6c172de14cbc62c6431455c539">nexthop_ifname_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, char *ifname)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a51dfffcb806bfed27d959ec18ec72a94">nexthop_ipv4_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct in_addr *ipv4, struct in_addr *src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a5285f34431a774eac5345224a7899d17">nexthop_ipv4_ifindex_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct in_addr *ipv4, struct in_addr *src, unsigned int ifindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ab30d3704490eac283f7e60424d233fe4">nexthop_blackhole_add</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ab9a922658d6fe561c58c30a78659f9db">nexthop_active_ipv4</a> (struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>, int set, struct <a class="el" href="structroute__node.html">route_node</a> *top)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structrib.html">rib</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a3761ffce379681c36c7e7e018d8c7b74">rib_match_ipv4</a> (struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structrib.html">rib</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ad78c15af8ced4136cdd125fc260b8663">rib_lookup_ipv4</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a1be6163864ec8c76cdd1e365dec8bb0c">rib_lookup_ipv4_route</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, union <a class="el" href="unionsockunion.html">sockunion</a> *qgate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a56d103e3e3c1b7b6f2fdfa5c3569afa3">nexthop_active_check</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>, int set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#afea4c2d2b2099dc0beb02b6082245438">nexthop_active_update</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, int set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a8ffc07c90e9bf3d4e674703a5ca78b98">rib_install_kernel</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a77c7b21fcae7ee4ec9a07b09b6dd26cf">rib_uninstall</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a1b3958610afc2f7c0776317189f05d32">rib_unlink</a> (struct <a class="el" href="structroute__node.html">route_node</a> *, struct <a class="el" href="structrib.html">rib</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a9d9ef41fa9fcf0350be14ec91baf32ef">rib_process</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ae12a1f2368fe68f768494caefcb7c73f">process_subq</a> (struct <a class="el" href="structlist.html">list</a> *subq, u_char qindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#af2795de694ab5843af7ea1f81d0f1e20">meta_queue_process</a> (struct <a class="el" href="structwork__queue.html">work_queue</a> *dummy, void *data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a4f33e2a201e0dc759b0384e09ededb79">rib_meta_queue_add</a> (struct <a class="el" href="structmeta__queue.html">meta_queue</a> *mq, struct <a class="el" href="structroute__node.html">route_node</a> *rn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (struct <a class="el" href="structzebra__t.html">zebra_t</a> *<a class="el" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, struct <a class="el" href="structroute__node.html">route_node</a> *rn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmeta__queue.html">meta_queue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#aa0898e8785fa395363362095e9315d17">meta_queue_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a7b63a78591841b39e864a07e69aeadc2">rib_queue_init</a> (struct <a class="el" href="structzebra__t.html">zebra_t</a> *<a class="el" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#abbffe32b40e6a7c18d41b6e319453bab">rib_link</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (struct <a class="el" href="structroute__node.html">route_node</a> *rn, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a2709f7bf34c9fad0ee4d213d3d0d423c">rib_add_ipv4</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int <a class="el" href="structflags.html">flags</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, struct in_addr *src, unsigned int ifindex, u_int32_t vrf_id, u_int32_t <a class="el" href="structmetric.html">metric</a>, u_char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a9b3facab897deacdc858803e105d4886">rib_dump</a> (const char *<a class="el" href="ospf__nsm_8c.html#a03307f8a561731a5c5657834da57ab11">func</a>, const struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, const struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a72961e15a7c19013fe132485ff5aee55">rib_lookup_and_dump</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a3a83bd8a29ddbf02c33ed1cb8293c26d">rib_lookup_and_pushup</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ae22d7702e1796148663522c0c8c1ccec">rib_add_ipv4_multipath</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#af20b0f5a801984d46636efb288405ad0">rib_delete_ipv4</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int <a class="el" href="structflags.html">flags</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, unsigned int ifindex, u_int32_t vrf_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ae02411f015001b6addfd7cbfead751d0">static_install_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *si)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a8bfce1b34c7e402c6995b059a334831c">static_ipv4_nexthop_same</a> (struct <a class="el" href="structnexthop.html">nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>, struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *si)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a9965ea283d5bd9090e1fcecd6b7a2027">static_uninstall_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *si)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a44bb955baa5782ba016fbc81c9810927">static_add_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, const char *ifname, u_char <a class="el" href="structflags.html">flags</a>, u_char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>, u_int32_t vrf_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a680270ecb5a14879953840c281d92fe8">static_delete_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, const char *ifname, u_char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>, u_int32_t vrf_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a1f2ff3ce6a7ce144247b726a3c257507">rib_weed_table</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a6f66a4098fb6d18a02fa91e62e395169">rib_weed_tables</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#aea35d63ca4a7a3244a35d571b406dd12">rib_sweep_table</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a75571cb0f6ed48267739d55e20c6722f">rib_sweep_route</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#acb47ec38e01628d3758e94836e68aba9">rib_close_table</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a2017dc3c35367f4cf655b8d6ea238c3d">rib_close</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a986c298135d292e5c66e02a12a9419ae">rib_init</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__t.html">zebra_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a17c83b62e41494ac2fa5196697abebb6">rib_process_hold_time</a> = 10</td></tr>
<tr><td class="memItemLeft" >struct {</td></tr>
<tr><td class="memItemLeft" >&#160;&#160;&#160;int&#160;&#160;&#160;<a class="el" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a></td></tr>
<tr><td class="memItemLeft" >&#160;&#160;&#160;int&#160;&#160;&#160;<a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a></td></tr>
<tr><td class="memItemLeft" valign="top">}&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="vector_8h.html#a7fe85bb4f5ec8665f4ef33dab2fdc2db">vector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="zebra__rib_8c.html#ac4cfeddb68cad65242468129557bc189">meta_queue_map</a> [ZEBRA_ROUTE_MAX]</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ac5581c6a3603e9d6e8219549c0acf31e"></a><!-- doxytag: member="zebra_rib.c::RIB_SYSTEM_ROUTE" ref="ac5581c6a3603e9d6e8219549c0acf31e" args="(R)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RIB_SYSTEM_ROUTE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">R</td><td>)</td>
          <td>&#160;&#160;&#160;((R)-&gt;<a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a> == ZEBRA_ROUTE_KERNEL || (R)-&gt;<a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a> == ZEBRA_ROUTE_CONNECT)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00758">758</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aa0898e8785fa395363362095e9315d17"></a><!-- doxytag: member="zebra_rib.c::meta_queue_new" ref="aa0898e8785fa395363362095e9315d17" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structmeta__queue.html">meta_queue</a>* meta_queue_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01302">1302</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structmeta__queue.html">meta_queue</a> *<span class="keyword">new</span>;
  <span class="keywordtype">unsigned</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4afb71edb3d48305829a2dba60f7c353">MTYPE_WORK_QUEUE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structmeta__queue.html">meta_queue</a>));
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(<span class="keyword">new</span>);

  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="rib_8h.html#a75e6d7c7e954860072172f01abb2212c">MQ_SIZE</a>; i++)
    {
      <span class="keyword">new</span>-&gt;subq[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(new-&gt;subq[i]);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af2795de694ab5843af7ea1f81d0f1e20"></a><!-- doxytag: member="zebra_rib.c::meta_queue_process" ref="af2795de694ab5843af7ea1f81d0f1e20" args="(struct work_queue *dummy, void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885">wq_item_status</a> meta_queue_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structwork__queue.html">work_queue</a> *&#160;</td>
          <td class="paramname"><em>dummy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01205">1205</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structmeta__queue.html">meta_queue</a> * mq = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
  <span class="keywordtype">unsigned</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="rib_8h.html#a75e6d7c7e954860072172f01abb2212c">MQ_SIZE</a>; i++)
    <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#ae12a1f2368fe68f768494caefcb7c73f">process_subq</a> (mq-&gt;<a class="code" href="structmeta__queue.html#a80cf384a723b46a12a1611fd3eac6228">subq</a>[i], i))
      {
    mq-&gt;<a class="code" href="structmeta__queue.html#a4fba41b491a353254145bdd829f1188a">size</a>--;
    <span class="keywordflow">break</span>;
      }
  <span class="keywordflow">return</span> mq-&gt;<a class="code" href="structmeta__queue.html#a4fba41b491a353254145bdd829f1188a">size</a> ? <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ab06b16439cb8333f720a08a237c36836">WQ_REQUEUE</a> : <a class="code" href="workqueue_8h.html#a0e78d42489413cdb20b75485932a3885ac62ec0649e33ec9d6e0836fab0dec7fc">WQ_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a56d103e3e3c1b7b6f2fdfa5c3569afa3"></a><!-- doxytag: member="zebra_rib.c::nexthop_active_check" ref="a56d103e3e3c1b7b6f2fdfa5c3569afa3" args="(struct route_node *rn, struct rib *rib, struct nexthop *nexthop, int set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned nexthop_active_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00772">772</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516">route_map_result_t</a> ret = <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516acce76d634db613fd27f63c57d4438e3f">RMAP_MATCH</a>;
  <span class="keyword">extern</span> <span class="keywordtype">char</span> *<a class="code" href="zebra__vty_8c.html#a1388dc5e81bc1dc56d866075f8702c7a">proto_rm</a>[<a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>][<a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>+1];
  <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *<a class="code" href="structrmap.html">rmap</a>;
  <span class="keywordtype">int</span> family;

  family = 0;
  <span class="keywordflow">switch</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>:
      ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">if</span> (ifp &amp;&amp; <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a>(ifp))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>:
      family = <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>;
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>:
      ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>);
      <span class="keywordflow">if</span> (ifp &amp;&amp; <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a>(ifp))
    {
      <span class="keywordflow">if</span> (<span class="keyword">set</span>)
        nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<span class="keyword">set</span>)
        nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = 0;
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
    }
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>:
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>:
      family = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#ab9a922658d6fe561c58c30a78659f9db">nexthop_active_ipv4</a> (rib, nexthop, <span class="keyword">set</span>, rn))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>:
      family = <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>;
      <span class="keywordflow">if</span> (nexthop_active_ipv6 (rib, nexthop, <span class="keyword">set</span>, rn))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>:
      family = <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>;
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6))
    {
      ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">if</span> (ifp &amp;&amp; <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a>(ifp))
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (nexthop_active_ipv6 (rib, nexthop, <span class="keyword">set</span>, rn))
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
    }
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>:
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a>(rib) ||
      (family == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET) ||
      (family == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET6))
    <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);

  rmap = 0;
  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> &gt;= 0 &amp;&amp; rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a> &amp;&amp;
            proto_rm[family][rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>])
    rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (proto_rm[family][rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>]);
  <span class="keywordflow">if</span> (!rmap &amp;&amp; proto_rm[family][<a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>])
    rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (proto_rm[family][ZEBRA_ROUTE_MAX]);
  <span class="keywordflow">if</span> (rmap) {
      ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a>(rmap, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370aed5a3d6c0f7329ba83c52473152a65ad">RMAP_ZEBRA</a>, nexthop);
  }

  <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab9a922658d6fe561c58c30a78659f9db"></a><!-- doxytag: member="zebra_rib.c::nexthop_active_ipv4" ref="ab9a922658d6fe561c58c30a78659f9db" args="(struct rib *rib, struct nexthop *nexthop, int set, struct route_node *top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int nexthop_active_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>set</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00311">311</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rib *match;
  <span class="keyword">struct </span>nexthop *newhop;

  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = 0;

  <span class="keywordflow">if</span> (<span class="keyword">set</span>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>);

  <span class="comment">/* Make lookup prefix. */</span>
  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">while</span> (rn)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      
      <span class="comment">/* If lookup self prefix return immediately. */</span>
      <span class="keywordflow">if</span> (rn == top)
    <span class="keywordflow">return</span> 0;

      <span class="comment">/* Pick up selected route. */</span>
      <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
        <span class="keywordflow">break</span>;
    }

      <span class="comment">/* If there is no selected route or matched route is EGP, go up</span>
<span class="comment">         tree. */</span>
      <span class="keywordflow">if</span> (! match 
      || match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    {
      <span class="keywordflow">do</span> {
        rn = rn-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;
      } <span class="keywordflow">while</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <span class="keywordflow">if</span> (rn)
        <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        {
          <span class="comment">/* Directly point connected route. */</span>
          newhop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>;
          <span class="keywordflow">if</span> (newhop &amp;&amp; nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>)
        nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = newhop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
          
          <span class="keywordflow">return</span> 1;
        }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>))
        {
          <span class="keywordflow">for</span> (newhop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; newhop; newhop = newhop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (newhop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)
            &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (newhop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
          {
            <span class="keywordflow">if</span> (<span class="keyword">set</span>)
              {
            <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>);
            nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> = newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>;
            <span class="keywordflow">if</span> (newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a> ||
                newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
              nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = newhop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>;
            <span class="keywordflow">if</span> (newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
                || newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
                || newhop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
              nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a> = newhop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
              }
            <span class="keywordflow">return</span> 1;
          }
          <span class="keywordflow">return</span> 0;
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">return</span> 0;
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afea4c2d2b2099dc0beb02b6082245438"></a><!-- doxytag: member="zebra_rib.c::nexthop_active_update" ref="afea4c2d2b2099dc0beb02b6082245438" args="(struct route_node *rn, struct rib *rib, int set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int nexthop_active_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00882">882</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> prev_active, prev_index, new_active;

  rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a> = 0;
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ae92287e5a53a5cf905371c0af99e5661">ZEBRA_FLAG_CHANGED</a>);

  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
  {
    prev_active = <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>);
    prev_index = nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
    <span class="keywordflow">if</span> ((new_active = <a class="code" href="zebra__rib_8c.html#a56d103e3e3c1b7b6f2fdfa5c3569afa3">nexthop_active_check</a> (rn, rib, nexthop, <span class="keyword">set</span>)))
      rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a>++;
    <span class="keywordflow">if</span> (prev_active != new_active ||
    prev_index != nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ae92287e5a53a5cf905371c0af99e5661">ZEBRA_FLAG_CHANGED</a>);
  }
  <span class="keywordflow">return</span> rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a99f2fc0d1d8343989db03b5d06072070"></a><!-- doxytag: member="zebra_rib.c::nexthop_add" ref="a99f2fc0d1d8343989db03b5d06072070" args="(struct rib *rib, struct nexthop *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void nexthop_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00147">147</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>nexthop *last;

  <span class="keywordflow">for</span> (last = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; last &amp;&amp; last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>; last = last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    ;
  <span class="keywordflow">if</span> (last)
    last-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = nexthop;
  <span class="keywordflow">else</span>
    rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a> = nexthop;
  nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a> = last;

  rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab30d3704490eac283f7e60424d233fe4"></a><!-- doxytag: member="zebra_rib.c::nexthop_blackhole_add" ref="ab30d3704490eac283f7e60424d233fe4" args="(struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_blackhole_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00295">295</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>);

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (rib, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4cce6ca1f3039045a7a5f4c671b933de"></a><!-- doxytag: member="zebra_rib.c::nexthop_delete" ref="a4cce6ca1f3039045a7a5f4c671b933de" args="(struct rib *rib, struct nexthop *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void nexthop_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00164">164</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a> = nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a>;
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#aacf99eeee66548b6a284155bdcd1ffc6">prev</a>-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a> = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
  <span class="keywordflow">else</span>
    rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a> = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
  rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a>--;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae0403785ad0a712c3158f5c1fcf3ed4b"></a><!-- doxytag: member="zebra_rib.c::nexthop_free" ref="ae0403785ad0a712c3158f5c1fcf3ed4b" args="(struct nexthop *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void nexthop_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00177">177</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, nexthop);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1ea7aee8aa1a72495d9b4160500a995"></a><!-- doxytag: member="zebra_rib.c::nexthop_ifindex_add" ref="af1ea7aee8aa1a72495d9b4160500a995" args="(struct rib *rib, unsigned int ifindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ifindex_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00185">185</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (rib, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a12d2cc6c172de14cbc62c6431455c539"></a><!-- doxytag: member="zebra_rib.c::nexthop_ifname_add" ref="a12d2cc6c172de14cbc62c6431455c539" args="(struct rib *rib, char *ifname)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ifname_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ifname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00199">199</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (0, <a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>);

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (rib, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a51dfffcb806bfed27d959ec18ec72a94"></a><!-- doxytag: member="zebra_rib.c::nexthop_ipv4_add" ref="a51dfffcb806bfed27d959ec18ec72a94" args="(struct rib *rib, struct in_addr *ipv4, struct in_addr *src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ipv4_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>ipv4</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00213">213</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *ipv4;
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (rib, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5285f34431a774eac5345224a7899d17"></a><!-- doxytag: member="zebra_rib.c::nexthop_ipv4_ifindex_add" ref="a5285f34431a774eac5345224a7899d17" args="(struct rib *rib, struct in_addr *ipv4, struct in_addr *src, unsigned int ifindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ipv4_ifindex_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>ipv4</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00229">229</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *ipv4;
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (rib, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae12a1f2368fe68f768494caefcb7c73f"></a><!-- doxytag: member="zebra_rib.c::process_subq" ref="ae12a1f2368fe68f768494caefcb7c73f" args="(struct list *subq, u_char qindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int process_subq </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname"><em>subq</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>qindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01174">1174</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *lnode  = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (subq);
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rnode;

  <span class="keywordflow">if</span> (!lnode)
    <span class="keywordflow">return</span> 0;

  rnode = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (lnode);
  <a class="code" href="zebra__rib_8c.html#a9d9ef41fa9fcf0350be14ec91baf32ef">rib_process</a> (rnode);

  <span class="keywordflow">if</span> (rnode-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) <span class="comment">/* The first RIB record is holding the flags bitmask. */</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (((<span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *)rnode-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)-&gt;rn_status, <a class="code" href="rib_8h.html#aea31606e81f9791653c985b725c53c87">RIB_ROUTE_QUEUED</a>(qindex));
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span>
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: called for route_node (%p, %d) with no ribs&quot;</span>,
                  __func__, rnode, rnode-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a>);
      <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a>(LOG_DEBUG);
    }
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rnode);
  <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (subq, lnode);
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2709f7bf34c9fad0ee4d213d3d0d423c"></a><!-- doxytag: member="zebra_rib.c::rib_add_ipv4" ref="a2709f7bf34c9fad0ee4d213d3d0d423c" args="(int type, int flags, struct prefix_ipv4 *p, struct in_addr *gate, struct in_addr *src, unsigned int ifindex, u_int32_t vrf_id, u_int32_t metric, u_char distance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>distance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01492">1492</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *same = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Make it sure prefixlen is applied to the prefix. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (p);

  <span class="comment">/* Set default distance by route type. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> == 0)
    {
      <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> = <a class="code" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].distance;

      <span class="comment">/* iBGP distance is 200. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structflags.html">flags</a>, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>))
    <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> = 200;
    }

  <span class="comment">/* Lookup route node.*/</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* If same type of route are installed, treat it as a implicit</span>
<span class="comment">     withdraw. */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        {
          same = rib;
          <span class="keywordflow">break</span>;
        }
      <span class="comment">/* Duplicate connected route comes in. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
           nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> &amp;&amp;
           nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> == <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> &amp;&amp;
           !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    {
      rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>++;
      <span class="keywordflow">return</span> 0 ;
    }
    }

  <span class="comment">/* Allocate new rib structure. */</span>
  rib = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0ef14e77de1f08268d0d2c19603d1d67">MTYPE_RIB</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rib));
  rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> = <a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>;
  rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a> = <a class="code" href="structmetric.html">metric</a>;
  rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> = vrf_id;
  rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a> = 0;
  rib-&gt;<a class="code" href="structrib.html#ac4bc4479d273ecf626dfee778825bc5b">uptime</a> = time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* Nexthop settings. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    <a class="code" href="zebra__rib_8c.html#a5285f34431a774eac5345224a7899d17">nexthop_ipv4_ifindex_add</a> (rib, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, <a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>, <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="rib_8h.html#a66650034d36f49d2e5ca51bf9557fae5">nexthop_ipv4_add</a> (rib, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, <a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="rib_8h.html#a353881daf608ea5c55ea9282db8400a7">nexthop_ifindex_add</a> (rib, <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

  <span class="comment">/* If this route is kernel route, set FIB flag to the route. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a> || <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

  <span class="comment">/* Link new rib to node.*/</span>
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_addnode (%p, %p)&quot;</span>, __func__, rn, rib);
  <a class="code" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (rn, rib);
  
  <span class="comment">/* Free implicit route.*/</span>
  <span class="keywordflow">if</span> (same)
  {
    <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_delnode (%p, %p)&quot;</span>, __func__, rn, rib);
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  }
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae22d7702e1796148663522c0c8c1ccec"></a><!-- doxytag: member="zebra_rib.c::rib_add_ipv4_multipath" ref="ae22d7702e1796148663522c0c8c1ccec" args="(struct prefix_ipv4 *p, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_add_ipv4_multipath </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01750">1750</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rib *same;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  
  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;
  <span class="comment">/* Make it sure prefixlen is applied to the prefix. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (p);

  <span class="comment">/* Set default distance by route type. */</span>
  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> == 0)
    {
      rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = <a class="code" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a>[rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>].distance;

      <span class="comment">/* iBGP distance is 200. */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> 
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>))
    rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = 200;
    }

  <span class="comment">/* Lookup route node.*/</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* If same type of route are installed, treat it as a implicit</span>
<span class="comment">     withdraw. */</span>
  <span class="keywordflow">for</span> (same = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; same; same = same-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (same-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (same-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> &amp;&amp; same-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> == rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>
      &amp;&amp; same-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        <span class="keywordflow">break</span>;
    }
  
  <span class="comment">/* If this route is kernel route, set FIB flag to the route. */</span>
  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a> || rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

  <span class="comment">/* Link new rib to node.*/</span>
  <a class="code" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (rn, rib);
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: called rib_addnode (%p, %p) on new RIB entry&quot;</span>,
      __func__, rn, rib);
    <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, p, rib);
  }

  <span class="comment">/* Free implicit route.*/</span>
  <span class="keywordflow">if</span> (same)
  {
    <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_delnode (%p, %p) on existing RIB entry&quot;</span>,
        __func__, rn, same);
      <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, p, same);
    }
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  }
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa75c775e24cbb0c37df92dad710aae70"></a><!-- doxytag: member="zebra_rib.c::rib_addnode" ref="aa75c775e24cbb0c37df92dad710aae70" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_addnode </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01413">1413</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* RIB node has been un-removed before route-node is processed. </span>
<span class="comment">   * route_node must hence already be on the queue for processing.. </span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
      {
        <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, un-removed rib %p&quot;</span>,
                    __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
      }
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>);
      <span class="keywordflow">return</span>;
    }
  <a class="code" href="zebra__rib_8c.html#abbffe32b40e6a7c18d41b6e319453bab">rib_link</a> (rn, rib);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2017dc3c35367f4cf655b8d6ea238c3d"></a><!-- doxytag: member="zebra_rib.c::rib_close" ref="a2017dc3c35367f4cf655b8d6ea238c3d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_close </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02900">2900</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#acb47ec38e01628d3758e94836e68aba9">rib_close_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#acb47ec38e01628d3758e94836e68aba9">rib_close_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="acb47ec38e01628d3758e94836e68aba9"></a><!-- doxytag: member="zebra_rib.c::rib_close_table" ref="acb47ec38e01628d3758e94836e68aba9" args="(struct route_table *table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_close_table </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02883">2883</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;

  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
        {
          <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (rib)
          &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
            <a class="code" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (rn, rib);
        }
}
</pre></div>
</div>
</div>
<a class="anchor" id="af20b0f5a801984d46636efb288405ad0"></a><!-- doxytag: member="zebra_rib.c::rib_delete_ipv4" ref="af20b0f5a801984d46636efb288405ad0" args="(int type, int flags, struct prefix_ipv4 *p, struct in_addr *gate, unsigned int ifindex, u_int32_t vrf_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01822">1822</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *fib = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>rib *same = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
  <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Apply mask. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (p);

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a> &amp;&amp; <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;rib_delete_ipv4(): route delete %s/%d via %s ifindex %d&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, 
               inet_ntoa (*<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>), 
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

  <span class="comment">/* Lookup route node. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
  <span class="keywordflow">if</span> (! rn)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d via %s ifindex %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, buf2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d ifindex %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
    }
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a58dc80805c425ed7b6b46364b2d84fac">ZEBRA_ERR_RTNOEXIST</a>;
    }

  <span class="comment">/* Lookup same type route. */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    fib = rib;

      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp; (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
      nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> &amp;&amp; nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> == <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    {
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>)
        {
          rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>--;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <span class="keywordflow">return</span> 0;
        }
      same = rib;
      <span class="keywordflow">break</span>;
    }
      <span class="comment">/* Make sure that the route found has the same gateway. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ||
           ((nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
            (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>) ||
         <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)))) 
        {
      same = rib;
      <span class="keywordflow">break</span>;
    }
    }

  <span class="comment">/* If same type of route can&#39;t be found and this message is from</span>
<span class="comment">     kernel. */</span>
  <span class="keywordflow">if</span> (! same)
    {
      <span class="keywordflow">if</span> (fib &amp;&amp; <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>)
    {
      <span class="comment">/* Unset flags. */</span>
      <span class="keywordflow">for</span> (nexthop = fib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (fib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d via %s ifindex %d type %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, buf2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>,
               <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
          <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d ifindex %d type %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>,
               <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
        }
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a58dc80805c425ed7b6b46364b2d84fac">ZEBRA_ERR_RTNOEXIST</a>;
    }
    }
  
  <span class="keywordflow">if</span> (same)
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3342004bfa0237318b3c7856b922c804"></a><!-- doxytag: member="zebra_rib.c::rib_delnode" ref="a3342004bfa0237318b3c7856b922c804" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_delnode </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01478">1478</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
  {
    <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, rib %p, removing&quot;</span>, __func__,
      buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
  }
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>);
  <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b3facab897deacdc858803e105d4886"></a><!-- doxytag: member="zebra_rib.c::rib_dump" ref="a9b3facab897deacdc858803e105d4886" args="(const char *func, const struct prefix_ipv4 *p, const struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_dump </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01597">1597</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> straddr1[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], straddr2[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, straddr1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: dumping RIB entry %p for %s/%d&quot;</span>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, rib, straddr1, p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: refcnt == %lu, uptime == %lu, type == %u, table == %d&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>,
    (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) rib-&gt;<a class="code" href="structrib.html#ac4bc4479d273ecf626dfee778825bc5b">uptime</a>,
    rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>,
    rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>
  );
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: metric == %u, distance == %u, flags == %u, status == %u&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>,
    rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a>,
    rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>,
    rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>
  );
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: nexthop_num == %u, nexthop_active_num == %u, nexthop_fib_num == %u&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a>,
    rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a>,
    rib-&gt;<a class="code" href="structrib.html#ab756a619c83f5bba3d0ebb4a54685621">nexthop_fib_num</a>
  );
  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
  {
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, straddr1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, straddr2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
    (
      <span class="stringliteral">&quot;%s: NH %s (%s) with flags %s%s%s&quot;</span>,
      <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
      straddr1,
      straddr2,
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>) ? <span class="stringliteral">&quot;ACTIVE &quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>) ? <span class="stringliteral">&quot;FIB &quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>) ? <span class="stringliteral">&quot;RECURSIVE&quot;</span> : <span class="stringliteral">&quot;&quot;</span>)
    );
  }
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: dump complete&quot;</span>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a986c298135d292e5c66e02a12a9419ae"></a><!-- doxytag: member="zebra_rib.c::rib_init" ref="a986c298135d292e5c66e02a12a9419ae" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02908">2908</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#a7b63a78591841b39e864a07e69aeadc2">rib_queue_init</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>);
  <span class="comment">/* VRF initialization.  */</span>
  <a class="code" href="zebra__rib_8c.html#a2d01ff33ddb6cea2d5535584ebacbee2">vrf_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8ffc07c90e9bf3d4e674703a5ca78b98"></a><!-- doxytag: member="zebra_rib.c::rib_install_kernel" ref="a8ffc07c90e9bf3d4e674703a5ca78b98" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_install_kernel </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00906">906</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret = 0;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="keywordflow">switch</span> (<a class="code" href="prefix_8h.html#a936de9ce96dcf8ebdfd5942c08425663">PREFIX_FAMILY</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>))
    {
    <span class="keywordflow">case</span> AF_INET:
      ret = <a class="code" href="kernel__null_8c.html#aa6feda059b2e43a10fff6c3517a0cc58">kernel_add_ipv4</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
      ret = <a class="code" href="kernel__null_8c.html#af67f65b3b9fcc4137ba7c2df10f1e3f9">kernel_add_ipv6</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }

  <span class="comment">/* This condition is never met, if we are using rt_socket.c */</span>
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="abbffe32b40e6a7c18d41b6e319453bab"></a><!-- doxytag: member="zebra_rib.c::rib_link" ref="abbffe32b40e6a7c18d41b6e319453bab" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_link </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01381">1381</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>rib *head;
  <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rib &amp;&amp; rn);
  
  <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn); <span class="comment">/* rn route table reference */</span>

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
  {
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, rib %p&quot;</span>, __func__,
      buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
  }

  head = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
  <span class="keywordflow">if</span> (head)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: new head, rn_status copied over&quot;</span>, __func__,
          buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      head-&gt;<a class="code" href="structrib.html#a1e348bc3d535ac392cb480139315cef6">prev</a> = rib;
      <span class="comment">/* Transfer the rn status flags to the new head RIB */</span>
      rib-&gt;<a class="code" href="structrib.html#a480d57410c6aa686b396e71f1b1ad667">rn_status</a> = head-&gt;<a class="code" href="structrib.html#a480d57410c6aa686b396e71f1b1ad667">rn_status</a>;
    }
  rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a> = head;
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rib;
  <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a72961e15a7c19013fe132485ff5aee55"></a><!-- doxytag: member="zebra_rib.c::rib_lookup_and_dump" ref="a72961e15a7c19013fe132485ff5aee55" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_lookup_and_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01652">1652</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keywordtype">char</span> prefix_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
  {
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: vrf_table() returned NULL&quot;</span>, __func__);
    <span class="keywordflow">return</span>;
  }

  <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix.s_addr, prefix_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
  <span class="comment">/* Scan the RIB table for exactly matching RIB entry. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: lookup failed for %s/%d&quot;</span>, __func__, prefix_buf, p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
    <span class="keywordflow">return</span>;
  }

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* let&#39;s go */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
    (
      <span class="stringliteral">&quot;%s: rn %p, rib %p: %s, %s&quot;</span>,
      __func__,
      rn,
      rib,
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>) ? <span class="stringliteral">&quot;removed&quot;</span> : <span class="stringliteral">&quot;NOT removed&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>) ? <span class="stringliteral">&quot;selected&quot;</span> : <span class="stringliteral">&quot;NOT selected&quot;</span>)
    );
    <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, p, rib);
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3a83bd8a29ddbf02c33ed1cb8293c26d"></a><!-- doxytag: member="zebra_rib.c::rib_lookup_and_pushup" ref="a3a83bd8a29ddbf02c33ed1cb8293c26d" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_lookup_and_pushup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01702">1702</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keywordtype">unsigned</span> changed = 0;

  <span class="keywordflow">if</span> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> == (table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0)))
  {
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: vrf_table() returned NULL&quot;</span>, __func__);
    <span class="keywordflow">return</span>;
  }

  <span class="comment">/* No matches would be the simplest case. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> == (rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p)))
    <span class="keywordflow">return</span>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* Check all RIB entries. In case any changes have to be done, requeue</span>
<span class="comment">   * the RN into RIBQ head. If the routing message about the new connected</span>
<span class="comment">   * route (generated by the IP address we are going to assign very soon)</span>
<span class="comment">   * comes before the RIBQ is processed, the new RIB entry will join</span>
<span class="comment">   * RIBQ record already on head. This is necessary for proper revalidation</span>
<span class="comment">   * of the rest of the RIB.</span>
<span class="comment">   */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
  {
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>) &amp;&amp;
      ! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (rib))
    {
      changed = 1;
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
      {
        <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: freeing way for connected prefix %s/%d&quot;</span>, __func__, buf, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
        <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      }
      <a class="code" href="zebra__rib_8c.html#a77c7b21fcae7ee4ec9a07b09b6dd26cf">rib_uninstall</a> (rn, rib);
    }
  }
  <span class="keywordflow">if</span> (changed)
    <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad78c15af8ced4136cdd125fc260b8663"></a><!-- doxytag: member="zebra_rib.c::rib_lookup_ipv4" ref="ad78c15af8ced4136cdd125fc260b8663" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structrib.html">rib</a>* rib_lookup_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00576">576</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! match || match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">return</span> match;
  
  <span class="keywordflow">for</span> (nexthop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
      <span class="keywordflow">return</span> match;

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1be6163864ec8c76cdd1e365dec8bb0c"></a><!-- doxytag: member="zebra_rib.c::rib_lookup_ipv4_route" ref="a1be6163864ec8c76cdd1e365dec8bb0c" args="(struct prefix_ipv4 *p, union sockunion *qgate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_lookup_ipv4_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>qgate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00631">631</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a6e154a5f58f1f82beb1d5d4872f61176">ZEBRA_RIB_LOOKUP_ERROR</a>;

  <span class="comment">/* Scan the RIB table for exactly matching RIB entry. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* Find out if a &quot;selected&quot; RR for the discovered RIB entry exists ever. */</span>
  <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    <span class="keywordflow">break</span>;
    }

  <span class="comment">/* None such found :( */</span>
  <span class="keywordflow">if</span> (!match)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;

  <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a290672d06c3ac72507581e01b0355f54">ZEBRA_RIB_FOUND_CONNECTED</a>;
  
  <span class="comment">/* Ok, we have a cood candidate, let&#39;s check it&#39;s nexthop list... */</span>
  <span class="keywordflow">for</span> (nexthop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
    {
      <span class="comment">/* We are happy with either direct or recursive hexthop */</span>
      <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr == qgate-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr ||
          nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr == qgate-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr)
        <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a3a4f094d5db63d16353294cac5ce2939">ZEBRA_RIB_FOUND_EXACT</a>;
      <span class="keywordflow">else</span>
      {
        <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        {
          <span class="keywordtype">char</span> gate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], rgate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], qgate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, gate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, rgate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;qgate-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr.s_addr, qgate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: qgate == %s, gate == %s, rgate == %s&quot;</span>, __func__, qgate_buf, gate_buf, rgate_buf);
        }
        <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a7dca43fe20de4c7ec983e753a2770eca">ZEBRA_RIB_FOUND_NOGATE</a>;
      }
    }

  <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3761ffce379681c36c7e7e018d8c7b74"></a><!-- doxytag: member="zebra_rib.c::rib_match_ipv4" ref="a3761ffce379681c36c7e7e018d8c7b74" args="(struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structrib.html">rib</a>* rib_match_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00514">514</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *newhop;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = addr;

  rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">while</span> (rn)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      
      <span class="comment">/* Pick up selected route. */</span>
      <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
        <span class="keywordflow">break</span>;
    }

      <span class="comment">/* If there is no selected route or matched route is EGP, go up</span>
<span class="comment">         tree. */</span>
      <span class="keywordflow">if</span> (! match 
      || match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    {
      <span class="keywordflow">do</span> {
        rn = rn-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;
      } <span class="keywordflow">while</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <span class="keywordflow">if</span> (rn)
        <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        <span class="comment">/* Directly point connected route. */</span>
        <span class="keywordflow">return</span> match;
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">for</span> (newhop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; newhop; newhop = newhop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (newhop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
          <span class="keywordflow">return</span> match;
          <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f33e2a201e0dc759b0384e09ededb79"></a><!-- doxytag: member="zebra_rib.c::rib_meta_queue_add" ref="a4f33e2a201e0dc759b0384e09ededb79" args="(struct meta_queue *mq, struct route_node *rn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_meta_queue_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structmeta__queue.html">meta_queue</a> *&#160;</td>
          <td class="paramname"><em>mq</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01238">1238</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);

  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      u_char qindex = <a class="code" href="zebra__rib_8c.html#ac4cfeddb68cad65242468129557bc189">meta_queue_map</a>[rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>];

      <span class="comment">/* Invariant: at this point we always have rn-&gt;info set. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (((<span class="keyword">struct</span> rib *)rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)-&gt;rn_status, <a class="code" href="rib_8h.html#aea31606e81f9791653c985b725c53c87">RIB_ROUTE_QUEUED</a>(qindex)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p is already queued in sub-queue %u&quot;</span>,
            __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, qindex);
      <span class="keywordflow">continue</span>;
    }

      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (((<span class="keyword">struct</span> rib *)rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)-&gt;rn_status, <a class="code" href="rib_8h.html#aea31606e81f9791653c985b725c53c87">RIB_ROUTE_QUEUED</a>(qindex));
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (mq-&gt;<a class="code" href="structmeta__queue.html#a80cf384a723b46a12a1611fd3eac6228">subq</a>[qindex], rn);
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
      mq-&gt;<a class="code" href="structmeta__queue.html#a4fba41b491a353254145bdd829f1188a">size</a>++;

      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: queued rn %p into sub-queue %u&quot;</span>,
            __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, qindex);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9d9ef41fa9fcf0350be14ec91baf32ef"></a><!-- doxytag: member="zebra_rib.c::rib_process" ref="a9d9ef41fa9fcf0350be14ec91baf32ef" args="(struct route_node *rn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00973">973</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;
  <span class="keyword">struct </span>rib *fib = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>rib *select = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>rib *del = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">int</span> installed = 0;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn);
  
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a> || <a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);

  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = next)
    {
      <span class="comment">/* The next pointer is saved, because current pointer</span>
<span class="comment">       * may be passed to rib_unlink() in the middle of iteration.</span>
<span class="comment">       */</span>
      next = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;
      
      <span class="comment">/* Currently installed rib. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
        {
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (fib == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
          fib = rib;
        }
      
      <span class="comment">/* Unlock removed routes, so they&#39;ll be freed, bar the FIB entry,</span>
<span class="comment">       * which we need to do do further work with below.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        {
          <span class="keywordflow">if</span> (rib != fib)
            {
              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, removing rib %p&quot;</span>, __func__,
                  buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
                <a class="code" href="zebra__rib_8c.html#a1b3958610afc2f7c0776317189f05d32">rib_unlink</a> (rn, rib);
            }
          <span class="keywordflow">else</span>
            del = rib;
          
          <span class="keywordflow">continue</span>;
        }
      
      <span class="comment">/* Skip unreachable nexthop. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#afea4c2d2b2099dc0beb02b6082245438">nexthop_active_update</a> (rn, rib, 0))
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Infinit distance. */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> == <a class="code" href="rib_8h.html#af53fc226f7c81662b2e161657cb2dc00">DISTANCE_INFINITY</a>)
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Newly selected rib, the common case. */</span>
      <span class="keywordflow">if</span> (!select)
        {
          select = rib;
          <span class="keywordflow">continue</span>;
        }
      
      <span class="comment">/* filter route selection in following order:</span>
<span class="comment">       * - connected beats other types</span>
<span class="comment">       * - lower distance beats higher</span>
<span class="comment">       * - lower metric beats higher for equal distance</span>
<span class="comment">       * - last, hence oldest, route wins tie break.</span>
<span class="comment">       */</span>
      
      <span class="comment">/* Connected routes. Pick the last connected</span>
<span class="comment">       * route of the set of lowest metric connected routes.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        {
          <span class="keywordflow">if</span> (select-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>
              || rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a> &lt;= select-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>)
            select = rib;
          <span class="keywordflow">continue</span>;
        }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (select-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        <span class="keywordflow">continue</span>;
      
      <span class="comment">/* higher distance loses */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> &gt; select-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a>)
        <span class="keywordflow">continue</span>;
      
      <span class="comment">/* lower wins */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> &lt; select-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a>)
        {
          select = rib;
          <span class="keywordflow">continue</span>;
        }
      
      <span class="comment">/* metric tie-breaks equal distance */</span>
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a> &lt;= select-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>)
        select = rib;
    } <span class="comment">/* for (rib = rn-&gt;info; rib; rib = next) */</span>

  <span class="comment">/* After the cycle is finished, the following pointers will be set:</span>
<span class="comment">   * select --- the winner RIB entry, if any was found, otherwise NULL</span>
<span class="comment">   * fib    --- the SELECTED RIB entry, if any, otherwise NULL</span>
<span class="comment">   * del    --- equal to fib, if fib is queued for deletion, NULL otherwise</span>
<span class="comment">   * rib    --- NULL</span>
<span class="comment">   */</span>

  <span class="comment">/* Same RIB entry is selected. Update FIB and finish. */</span>
  <span class="keywordflow">if</span> (select &amp;&amp; select == fib)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: Updating existing route, select %p, fib %p&quot;</span>,
                     __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, select, fib);
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (select-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ae92287e5a53a5cf905371c0af99e5661">ZEBRA_FLAG_CHANGED</a>))
        {
          <a class="code" href="redistribute_8c.html#ab39e6aa3b4f7e34cdc53e188ddfa3aa6">redistribute_delete</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, select);
          <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (select))
            <a class="code" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (rn, select);

          <span class="comment">/* Set real nexthop. */</span>
          <a class="code" href="zebra__rib_8c.html#afea4c2d2b2099dc0beb02b6082245438">nexthop_active_update</a> (rn, select, 1);
  
          <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (select))
            <a class="code" href="zebra__rib_8c.html#a8ffc07c90e9bf3d4e674703a5ca78b98">rib_install_kernel</a> (rn, select);
          <a class="code" href="redistribute_8c.html#a1f3f6268a338cebfa673266ddc3c9648">redistribute_add</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, select);
        }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (select))
        {
          <span class="comment">/* Housekeeping code to deal with </span>
<span class="comment">             race conditions in kernel with linux</span>
<span class="comment">             netlink reporting interface up before IPv4 or IPv6 protocol</span>
<span class="comment">             is ready to add routes.</span>
<span class="comment">             This makes sure the routes are IN the kernel.</span>
<span class="comment">           */</span>

          <span class="keywordflow">for</span> (nexthop = select-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
            <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
            {
              installed = 1;
              <span class="keywordflow">break</span>;
            }
          <span class="keywordflow">if</span> (! installed) 
            <a class="code" href="zebra__rib_8c.html#a8ffc07c90e9bf3d4e674703a5ca78b98">rib_install_kernel</a> (rn, select);
        }
      <span class="keywordflow">goto</span> end;
    }

  <span class="comment">/* At this point we either haven&#39;t found the best RIB entry or it is</span>
<span class="comment">   * different from what we currently intend to flag with SELECTED. In both</span>
<span class="comment">   * cases, if a RIB block is present in FIB, it should be withdrawn.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (fib)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: Removing existing route, fib %p&quot;</span>, __func__,
          buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, fib);
      <a class="code" href="redistribute_8c.html#ab39e6aa3b4f7e34cdc53e188ddfa3aa6">redistribute_delete</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, fib);
      <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (fib))
    <a class="code" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (rn, fib);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (fib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>);

      <span class="comment">/* Set real nexthop. */</span>
      <a class="code" href="zebra__rib_8c.html#afea4c2d2b2099dc0beb02b6082245438">nexthop_active_update</a> (rn, fib, 1);
    }

  <span class="comment">/* Regardless of some RIB entry being SELECTED or not before, now we can</span>
<span class="comment">   * tell, that if a new winner exists, FIB is still not updated with this</span>
<span class="comment">   * data, but ready to be.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (select)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: Adding route, select %p&quot;</span>, __func__, buf,
          rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, select);
      <span class="comment">/* Set real nexthop. */</span>
      <a class="code" href="zebra__rib_8c.html#afea4c2d2b2099dc0beb02b6082245438">nexthop_active_update</a> (rn, select, 1);

      <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (select))
        <a class="code" href="zebra__rib_8c.html#a8ffc07c90e9bf3d4e674703a5ca78b98">rib_install_kernel</a> (rn, select);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (select-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>);
      <a class="code" href="redistribute_8c.html#a1f3f6268a338cebfa673266ddc3c9648">redistribute_add</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, select);
    }

  <span class="comment">/* FIB route was removed, should be deleted */</span>
  <span class="keywordflow">if</span> (del)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: Deleting fib %p, rn %p&quot;</span>, __func__, buf,
          rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, del, rn);
      <a class="code" href="zebra__rib_8c.html#a1b3958610afc2f7c0776317189f05d32">rib_unlink</a> (rn, del);
    }

end:
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p dequeued&quot;</span>, __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8db8e4d9932aa91e4cde4c6d2c25061a"></a><!-- doxytag: member="zebra_rib.c::rib_queue_add" ref="a8db8e4d9932aa91e4cde4c6d2c25061a" args="(struct zebra_t *zebra, struct route_node *rn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_queue_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structzebra__t.html">zebra_t</a> *&#160;</td>
          <td class="paramname"><em>zebra</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01272">1272</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a096beb697176c96e937ead9950546ba4">IS_ZEBRA_DEBUG_RIB_Q</a>)
    {
      <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];

      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s/%d: work queue added&quot;</span>, __func__,
         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
         rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
    }

  <span class="comment">/*</span>
<span class="comment">   * The RIB queue should normally be either empty or holding the only</span>
<span class="comment">   * work_queue_item element. In the latter case this element would</span>
<span class="comment">   * hold a pointer to the meta queue structure, which must be used to</span>
<span class="comment">   * actually queue the route nodes to process. So create the MQ</span>
<span class="comment">   * holder, if necessary, then push the work into it in any case.</span>
<span class="comment">   * This semantics was introduced after 0.99.9 release.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (!zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>-&gt;<a class="code" href="structwork__queue.html#a563ee1f1f6983b2a7a6dfb6624fd4942">items</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
    <a class="code" href="workqueue_8c.html#a193fb769a4d04f3c160c623fd07dfb21">work_queue_add</a> (zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>, zebra-&gt;<a class="code" href="structzebra__t.html#a458232531f09e0e244d4be2bcbd70f96">mq</a>);

  <a class="code" href="zebra__rib_8c.html#a4f33e2a201e0dc759b0384e09ededb79">rib_meta_queue_add</a> (zebra-&gt;<a class="code" href="structzebra__t.html#a458232531f09e0e244d4be2bcbd70f96">mq</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b63a78591841b39e864a07e69aeadc2"></a><!-- doxytag: member="zebra_rib.c::rib_queue_init" ref="a7b63a78591841b39e864a07e69aeadc2" args="(struct zebra_t *zebra)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_queue_init </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structzebra__t.html">zebra_t</a> *&#160;</td>
          <td class="paramname"><em>zebra</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01321">1321</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! (zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a> = <a class="code" href="workqueue_8c.html#a8b50511bbc60426f371822c0c7aee5cc">work_queue_new</a> (zebra-&gt;<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, 
                                       <span class="stringliteral">&quot;route_node processing&quot;</span>)))
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not initialise work queue!&quot;</span>, __func__);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* fill in the work queue spec */</span>
  zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#aabcb370748f886f6a167ea3b13a6d372">workfunc</a> = &amp;<a class="code" href="zebra__rib_8c.html#af2795de694ab5843af7ea1f81d0f1e20">meta_queue_process</a>;
  zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a4defd4b1c7ea708f3d30881057c26f61">errorfunc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="comment">/* XXX: TODO: These should be runtime configurable via vty */</span>
  zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a74334af11b2e664ed8cd47fa13a76881">max_retries</a> = 3;
  zebra-&gt;<a class="code" href="structzebra__t.html#a328b26d4452b02f6ad345207eb0a7f8c">ribq</a>-&gt;<a class="code" href="structwork__queue.html#ae9c11795e9b293839422dd2c6ebfa493">spec</a>.<a class="code" href="structwork__queue.html#a6f998e18d62286e5b77844faf7c3ded2">hold</a> = <a class="code" href="test__main_8c.html#a17c83b62e41494ac2fa5196697abebb6">rib_process_hold_time</a>;
  
  <span class="keywordflow">if</span> (!(zebra-&gt;<a class="code" href="structzebra__t.html#a458232531f09e0e244d4be2bcbd70f96">mq</a> = <a class="code" href="zebra__rib_8c.html#aa0898e8785fa395363362095e9315d17">meta_queue_new</a> ()))
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not initialise meta queue!&quot;</span>, __func__);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a75571cb0f6ed48267739d55e20c6722f"></a><!-- doxytag: member="zebra_rib.c::rib_sweep_route" ref="a75571cb0f6ed48267739d55e20c6722f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_sweep_route </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02875">2875</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#aea35d63ca4a7a3244a35d571b406dd12">rib_sweep_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#aea35d63ca4a7a3244a35d571b406dd12">rib_sweep_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="aea35d63ca4a7a3244a35d571b406dd12"></a><!-- doxytag: member="zebra_rib.c::rib_sweep_table" ref="aea35d63ca4a7a3244a35d571b406dd12" args="(struct route_table *table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_sweep_table </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02847">2847</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;
  <span class="keywordtype">int</span> ret = 0;

  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = next)
    {
      next = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a> &amp;&amp; 
          <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>))
        {
          ret = <a class="code" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (rn, rib);
          <span class="keywordflow">if</span> (! ret)
                <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, rib);
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a77c7b21fcae7ee4ec9a07b09b6dd26cf"></a><!-- doxytag: member="zebra_rib.c::rib_uninstall" ref="a77c7b21fcae7ee4ec9a07b09b6dd26cf" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_uninstall </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00958">958</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    {
      <a class="code" href="redistribute_8c.html#ab39e6aa3b4f7e34cdc53e188ddfa3aa6">redistribute_delete</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      <span class="keywordflow">if</span> (! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (rib))
    <a class="code" href="zebra__rib_8c.html#ad8f04babe887e7c6af3162ccbc7359eb">rib_uninstall_kernel</a> (rn, rib);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad8f04babe887e7c6af3162ccbc7359eb"></a><!-- doxytag: member="zebra_rib.c::rib_uninstall_kernel" ref="ad8f04babe887e7c6af3162ccbc7359eb" args="(struct route_node *rn, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rib_uninstall_kernel </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00933">933</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret = 0;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="keywordflow">switch</span> (<a class="code" href="prefix_8h.html#a936de9ce96dcf8ebdfd5942c08425663">PREFIX_FAMILY</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>))
    {
    <span class="keywordflow">case</span> AF_INET:
      ret = <a class="code" href="rt_8h.html#a971b1b9939895652d58c065d2a3493cc">kernel_delete_ipv4</a> (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> AF_INET6:
      ret = kernel_delete_ipv6 (&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }

  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1b3958610afc2f7c0776317189f05d32"></a><!-- doxytag: member="zebra_rib.c::rib_unlink" ref="a1b3958610afc2f7c0776317189f05d32" args="(struct route_node *, struct rib *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_unlink </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01434">1434</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>, *<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
  <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn &amp;&amp; rib);

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
  {
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, rib %p&quot;</span>,
                __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
  }

  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>-&gt;<a class="code" href="structrib.html#a1e348bc3d535ac392cb480139315cef6">prev</a> = rib-&gt;<a class="code" href="structrib.html#a1e348bc3d535ac392cb480139315cef6">prev</a>;

  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a1e348bc3d535ac392cb480139315cef6">prev</a>)
    rib-&gt;<a class="code" href="structrib.html#a1e348bc3d535ac392cb480139315cef6">prev</a>-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a> = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;
  <span class="keywordflow">else</span>
    {
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;
      
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s/%d: rn %p, rib %p, new head copy&quot;</span>,
                        __func__, buf, rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, rn, rib);
          rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>-&gt;<a class="code" href="structrib.html#a480d57410c6aa686b396e71f1b1ad667">rn_status</a> = rib-&gt;<a class="code" href="structrib.html#a480d57410c6aa686b396e71f1b1ad667">rn_status</a>;
        }
    }

  <span class="comment">/* free RIB and nexthops */</span>
  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = next)
    {
      next = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>;
      <a class="code" href="zebra__rib_8c.html#ae0403785ad0a712c3158f5c1fcf3ed4b">nexthop_free</a> (nexthop);
    }
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0ef14e77de1f08268d0d2c19603d1d67">MTYPE_RIB</a>, rib);

  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn); <span class="comment">/* rn route table reference */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab5320729fbebc97fbb79a214f5d370d8"></a><!-- doxytag: member="zebra_rib.c::rib_update" ref="ab5320729fbebc97fbb79a214f5d370d8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_update </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02795">2795</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
        <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);

  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
        <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1f2ff3ce6a7ce144247b726a3c257507"></a><!-- doxytag: member="zebra_rib.c::rib_weed_table" ref="a1f2ff3ce6a7ce144247b726a3c257507" args="(struct route_table *table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rib_weed_table </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02816">2816</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;

  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = next)
    {
      next = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>;

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> != <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a5cde5668ed28c239047f536ad2b9d1c6">rtm_table_default</a> &amp;&amp;
          rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> != <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a>)
            <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, rib);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6f66a4098fb6d18a02fa91e62e395169"></a><!-- doxytag: member="zebra_rib.c::rib_weed_tables" ref="a6f66a4098fb6d18a02fa91e62e395169" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_weed_tables </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02839">2839</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#a1f2ff3ce6a7ce144247b726a3c257507">rib_weed_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#a1f2ff3ce6a7ce144247b726a3c257507">rib_weed_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a44bb955baa5782ba016fbc81c9810927"></a><!-- doxytag: member="zebra_rib.c::static_add_ipv4" ref="a44bb955baa5782ba016fbc81c9810927" args="(struct prefix *p, struct in_addr *gate, const char *ifname, u_char flags, u_char distance, u_int32_t vrf_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int static_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ifname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02101">2101</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *si;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *pp;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *cp;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *update = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *stable;

  <span class="comment">/* Lookup table.  */</span>
  stable = <a class="code" href="rib_8h.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, vrf_id);
  <span class="keywordflow">if</span> (! stable)
    <span class="keywordflow">return</span> -1;
  
  <span class="comment">/* Lookup static route prefix. */</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (stable, p);

  <span class="comment">/* Make flags. */</span>
  <span class="keywordflow">if</span> (gate)
    type = <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifname)
    type = <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>;
  <span class="keywordflow">else</span>
    type = <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>;

  <span class="comment">/* Do nothing if there is a same static route.  */</span>
  <span class="keywordflow">for</span> (si = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; si; si = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    {
      <span class="keywordflow">if</span> (type == si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>
      &amp;&amp; (! gate || <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (gate, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>))
      &amp;&amp; (! ifname || strcmp (ifname, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>) == 0))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> == si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
        {
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <span class="keywordflow">return</span> 0;
        }
      <span class="keywordflow">else</span>
        update = si;
    }
    }

  <span class="comment">/* Distance changed.  */</span>
  <span class="keywordflow">if</span> (update)
    <a class="code" href="rib_8h.html#a680270ecb5a14879953840c281d92fe8">static_delete_ipv4</a> (p, gate, ifname, update-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>, vrf_id);

  <span class="comment">/* Make new static route structure. */</span>
  si = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5b3f3545ac186697f074b49624327e52">MTYPE_STATIC_IPV4</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structstatic__ipv4.html">static_ipv4</a>));

  si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a60d70c2e23a2f895ad0a926f2573c6d6">flags</a> = <a class="code" href="structflags.html">flags</a>;

  <span class="keywordflow">if</span> (gate)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a> = *gate;
  <span class="keywordflow">if</span> (ifname)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (0, ifname);

  <span class="comment">/* Add new static route information to the tree with sort by</span>
<span class="comment">     distance value and gateway address. */</span>
  <span class="keywordflow">for</span> (pp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, cp = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; cp; pp = cp, cp = cp-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    {
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> &lt; cp-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
    <span class="keywordflow">break</span>;
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> &gt; cp-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a> &amp;&amp; cp-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>)
    {
      <span class="keywordflow">if</span> (ntohl (si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr) &lt; ntohl (cp-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr))
        <span class="keywordflow">break</span>;
      <span class="keywordflow">if</span> (ntohl (si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr) &gt; ntohl (cp-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr))
        <span class="keywordflow">continue</span>;
    }
    }

  <span class="comment">/* Make linked list. */</span>
  <span class="keywordflow">if</span> (pp)
    pp-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = si;
  <span class="keywordflow">else</span>
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = si;
  <span class="keywordflow">if</span> (cp)
    cp-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = si;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = pp;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = cp;

  <span class="comment">/* Install into rib. */</span>
  <a class="code" href="zebra__rib_8c.html#ae02411f015001b6addfd7cbfead751d0">static_install_ipv4</a> (p, si);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a680270ecb5a14879953840c281d92fe8"></a><!-- doxytag: member="zebra_rib.c::static_delete_ipv4" ref="a680270ecb5a14879953840c281d92fe8" args="(struct prefix *p, struct in_addr *gate, const char *ifname, u_char distance, u_int32_t vrf_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int static_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ifname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02196">2196</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *si;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *stable;

  <span class="comment">/* Lookup table.  */</span>
  stable = <a class="code" href="rib_8h.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, vrf_id);
  <span class="keywordflow">if</span> (! stable)
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* Lookup static route prefix. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (stable, p);
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Make flags. */</span>
  <span class="keywordflow">if</span> (gate)
    type = <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifname)
    type = <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>;
  <span class="keywordflow">else</span>
    type = <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>;

  <span class="comment">/* Find same static route is the tree */</span>
  <span class="keywordflow">for</span> (si = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; si; si = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    <span class="keywordflow">if</span> (type == si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>
    &amp;&amp; (! gate || <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (gate, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>))
    &amp;&amp; (! ifname || strcmp (ifname, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>) == 0))
      <span class="keywordflow">break</span>;

  <span class="comment">/* Can&#39;t find static route. */</span>
  <span class="keywordflow">if</span> (! si)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Install into rib. */</span>
  <a class="code" href="zebra__rib_8c.html#a9965ea283d5bd9090e1fcecd6b7a2027">static_uninstall_ipv4</a> (p, si);

  <span class="comment">/* Unlink static route from linked list. */</span>
  <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>;
  <span class="keywordflow">else</span>
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>;
  <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  
  <span class="comment">/* Free static route configuration. */</span>
  <span class="keywordflow">if</span> (ifname)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5b3f3545ac186697f074b49624327e52">MTYPE_STATIC_IPV4</a>, si);

  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae02411f015001b6addfd7cbfead751d0"></a><!-- doxytag: member="zebra_rib.c::static_install_ipv4" ref="ae02411f015001b6addfd7cbfead751d0" args="(struct prefix *p, struct static_ipv4 *si)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void static_install_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *&#160;</td>
          <td class="paramname"><em>si</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01949">1949</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Lookup existing route */</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (table, p);
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
         <span class="keywordflow">continue</span>;
        
       <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a> &amp;&amp; rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> == si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
         <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (rib)
    {
      <span class="comment">/* Same distance static route is there.  Update it with new</span>
<span class="comment">         nexthop. */</span>
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">switch</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>)
        {
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>:
            <a class="code" href="rib_8h.html#a66650034d36f49d2e5ca51bf9557fae5">nexthop_ipv4_add</a> (rib, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>:
            <a class="code" href="rib_8h.html#a1bd34e462c0b31150dd8b182ff88f29c">nexthop_ifname_add</a> (rib, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>:
            <a class="code" href="rib_8h.html#af0dfa3aee7ea3fbc982a713e3fe2bdca">nexthop_blackhole_add</a> (rib);
            <span class="keywordflow">break</span>;
        }
      <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* This is new static route. */</span>
      rib = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0ef14e77de1f08268d0d2c19603d1d67">MTYPE_RIB</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rib));
      
      rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> = <a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a>;
      rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>;
      rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a> = 0;
      rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a> = 0;

      <span class="keywordflow">switch</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>)
        {
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>:
            <a class="code" href="rib_8h.html#a66650034d36f49d2e5ca51bf9557fae5">nexthop_ipv4_add</a> (rib, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>:
            <a class="code" href="rib_8h.html#a1bd34e462c0b31150dd8b182ff88f29c">nexthop_ifname_add</a> (rib, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>:
            <a class="code" href="rib_8h.html#af0dfa3aee7ea3fbc982a713e3fe2bdca">nexthop_blackhole_add</a> (rib);
            <span class="keywordflow">break</span>;
        }

      <span class="comment">/* Save the flags of this static routes (reject, blackhole) */</span>
      rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a60d70c2e23a2f895ad0a926f2573c6d6">flags</a>;

      <span class="comment">/* Link this rib to the tree. */</span>
      <a class="code" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (rn, rib);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8bfce1b34c7e402c6995b059a334831c"></a><!-- doxytag: member="zebra_rib.c::static_ipv4_nexthop_same" ref="a8bfce1b34c7e402c6995b059a334831c" args="(struct nexthop *nexthop, struct static_ipv4 *si)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int static_ipv4_nexthop_same </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *&#160;</td>
          <td class="paramname"><em>si</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02022">2022</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
      &amp;&amp; si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>
      &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>))
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
      &amp;&amp; si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>
      &amp;&amp; strcmp (nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>) == 0)
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>
      &amp;&amp; si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>)
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9965ea283d5bd9090e1fcecd6b7a2027"></a><!-- doxytag: member="zebra_rib.c::static_uninstall_ipv4" ref="a9965ea283d5bd9090e1fcecd6b7a2027" args="(struct prefix *p, struct static_ipv4 *si)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void static_uninstall_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstatic__ipv4.html">static_ipv4</a> *&#160;</td>
          <td class="paramname"><em>si</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02040">2040</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span>;
  
  <span class="comment">/* Lookup existing route with type and distance. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, p);
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a> &amp;&amp; rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> == si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
        <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! rib)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Lookup nexthop. */</span>
  <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#a8bfce1b34c7e402c6995b059a334831c">static_ipv4_nexthop_same</a> (nexthop, si))
      <span class="keywordflow">break</span>;

  <span class="comment">/* Can&#39;t find nexthop. */</span>
  <span class="keywordflow">if</span> (! nexthop)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span>;
    }
  
  <span class="comment">/* Check nexthop. */</span>
  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a> == 1)
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, rib);
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
        <a class="code" href="zebra__rib_8c.html#a77c7b21fcae7ee4ec9a07b09b6dd26cf">rib_uninstall</a> (rn, rib);
      <a class="code" href="zebra__rib_8c.html#a4cce6ca1f3039045a7a5f4c671b933de">nexthop_delete</a> (rib, nexthop);
      <a class="code" href="zebra__rib_8c.html#ae0403785ad0a712c3158f5c1fcf3ed4b">nexthop_free</a> (nexthop);
      <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
    }
  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab63834e5cc03c12b2746e3f9e83badeb"></a><!-- doxytag: member="zebra_rib.c::vrf_alloc" ref="ab63834e5cc03c12b2746e3f9e83badeb" args="(const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structvrf.html">vrf</a>* vrf_alloc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00077">77</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *<a class="code" href="structvrf.html">vrf</a>;

  vrf = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba147f1e0985e718abe918f1bd5f2a3baa">MTYPE_VRF</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> vrf));

  <span class="comment">/* Put name.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
    vrf-&gt;<a class="code" href="structvrf.html#a23de53364ffc0fa6dc5340e003df2106">name</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baaad9ba4e2ec29002fd6cc096da9ff385">MTYPE_VRF_NAME</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="comment">/* Allocate routing table and static table.  */</span>
  vrf-&gt;<a class="code" href="structvrf.html#a4dc21a999c55d29f1495786a47926e3f">table</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  vrf-&gt;<a class="code" href="structvrf.html#a4dc21a999c55d29f1495786a47926e3f">table</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  vrf-&gt;<a class="code" href="structvrf.html#a816cca07520c3c7d454f46fba9fa55f2">stable</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  vrf-&gt;<a class="code" href="structvrf.html#a816cca07520c3c7d454f46fba9fa55f2">stable</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();

  <span class="keywordflow">return</span> vrf;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2d01ff33ddb6cea2d5535584ebacbee2"></a><!-- doxytag: member="zebra_rib.c::vrf_init" ref="a2d01ff33ddb6cea2d5535584ebacbee2" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void vrf_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00105">105</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *default_table;

  <span class="comment">/* Allocate VRF vector.  */</span>
  <a class="code" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a> = <a class="code" href="vector_8c.html#ae6a929ac3530de06eee1df3629d15247">vector_init</a> (1);

  <span class="comment">/* Allocate default main table.  */</span>
  default_table = <a class="code" href="zebra__rib_8c.html#ab63834e5cc03c12b2746e3f9e83badeb">vrf_alloc</a> (<span class="stringliteral">&quot;Default-IP-Routing-Table&quot;</span>);

  <span class="comment">/* Default table index must be 0.  */</span>
  <a class="code" href="vector_8c.html#a4ab15201b63a93279459a6d3d90600e5">vector_set_index</a> (<a class="code" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a>, 0, default_table);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4d74094cc2e3b3e2dd4e519e13ee566f"></a><!-- doxytag: member="zebra_rib.c::vrf_lookup" ref="a4d74094cc2e3b3e2dd4e519e13ee566f" args="(u_int32_t id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structvrf.html">vrf</a>* vrf_lookup </td>
          <td>(</td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00098">98</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="vector_8c.html#a5308a959053a5b67010213f09ade8e20">vector_lookup</a> (<a class="code" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a>, <span class="keywordtype">id</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b4cfde2cd5b67f8c8b63f566352e2aa"></a><!-- doxytag: member="zebra_rib.c::vrf_static_table" ref="a9b4cfde2cd5b67f8c8b63f566352e2aa" args="(afi_t afi, safi_t safi, u_int32_t id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* vrf_static_table </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00134">134</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *<a class="code" href="structvrf.html">vrf</a>;

  vrf = <a class="code" href="rib_8h.html#a16a6947a4bdd7614efaae35900ebf07c">vrf_lookup</a> (<span class="keywordtype">id</span>);
  <span class="keywordflow">if</span> (! vrf)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> vrf-&gt;<a class="code" href="structvrf.html#a816cca07520c3c7d454f46fba9fa55f2">stable</a>[afi][safi];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a385088f166bf61154f646c86e6830c21"></a><!-- doxytag: member="zebra_rib.c::vrf_table" ref="a385088f166bf61154f646c86e6830c21" args="(afi_t afi, safi_t safi, u_int32_t id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* vrf_table </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00121">121</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *<a class="code" href="structvrf.html">vrf</a>;

  vrf = <a class="code" href="rib_8h.html#a16a6947a4bdd7614efaae35900ebf07c">vrf_lookup</a> (<span class="keywordtype">id</span>);
  <span class="keywordflow">if</span> (! vrf)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> vrf-&gt;<a class="code" href="structvrf.html#a4dc21a999c55d29f1495786a47926e3f">table</a>[afi][safi];
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="afb9412686cd344ad61757c1c19ba8a87"></a><!-- doxytag: member="zebra_rib.c::distance" ref="afb9412686cd344ad61757c1c19ba8a87" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00057">57</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<a class="anchor" id="a35af0be900467fedbb610bd6ea65ed78"></a><!-- doxytag: member="zebra_rib.c::key" ref="a35af0be900467fedbb610bd6ea65ed78" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="structkey.html">key</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00056">56</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<a class="anchor" id="ac4cfeddb68cad65242468129557bc189"></a><!-- doxytag: member="zebra_rib.c::meta_queue_map" ref="ac4cfeddb68cad65242468129557bc189" args="[ZEBRA_ROUTE_MAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const u_char <a class="el" href="zebra__rib_8c.html#ac4cfeddb68cad65242468129557bc189">meta_queue_map</a>[ZEBRA_ROUTE_MAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  [<a class="code" href="zebra_8h.html#a650967617adbd419d14e5e05d9548108">ZEBRA_ROUTE_SYSTEM</a>]  = 4,
  [<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>]  = 0,
  [<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>] = 0,
  [<a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a>]  = 1,
  [<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>]     = 2,
  [<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>]   = 2,
  [<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>]    = 2,
  [<a class="code" href="zebra_8h.html#ae05c36542e3fb1c5c7fd440ac322331f">ZEBRA_ROUTE_OSPF6</a>]   = 2,
  [<a class="code" href="zebra_8h.html#a87ef34bfb648351225e8dd877f073401">ZEBRA_ROUTE_ISIS</a>]    = 2,
  [<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>]     = 3,
  [<a class="code" href="zebra_8h.html#a511d4b8dcbf5a87a19c695e382165a4d">ZEBRA_ROUTE_HSLS</a>]    = 4,
}
</pre></div>
<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01220">1220</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<a class="anchor" id="a17c83b62e41494ac2fa5196697abebb6"></a><!-- doxytag: member="zebra_rib.c::rib_process_hold_time" ref="a17c83b62e41494ac2fa5196697abebb6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="zebra__rib_8c.html#a17c83b62e41494ac2fa5196697abebb6">rib_process_hold_time</a> = 10</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00051">51</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<a class="anchor" id="a2cb61c6ddc0de037d5a1fda1d8e55bd9"></a><!-- doxytag: member="zebra_rib.c::route_info" ref="a2cb61c6ddc0de037d5a1fda1d8e55bd9" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct { ... }   <a class="el" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afe4f2e3deedbf90284062376af11d6d3"></a><!-- doxytag: member="zebra_rib.c::vrf_vector" ref="afe4f2e3deedbf90284062376af11d6d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="vector_8h.html#a7fe85bb4f5ec8665f4ef33dab2fdc2db">vector</a> <a class="el" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00073">73</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5a844f9c9c891ff5dfe28610da9b56ce"></a><!-- doxytag: member="zebra_rib.c::zebrad" ref="a5a844f9c9c891ff5dfe28610da9b56ce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__t.html">zebra_t</a> <a class="el" href="zserv_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra_2main_8c_source.html#l00044">44</a> of file <a class="el" href="zebra_2main_8c_source.html">main.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="zebra__rib_8c.html">zebra_rib.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:38 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
