<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_interface.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__interface_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_interface.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__spf_8h_source.html">ospfd/ospf_spf.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__interface_8h_source.html">ospfd/ospf_interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ism_8h_source.html">ospfd/ospf_ism.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsdb_8h_source.html">ospfd/ospf_lsdb.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__neighbor_8h_source.html">ospfd/ospf_neighbor.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__nsm_8h_source.html">ospfd/ospf_nsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__packet_8h_source.html">ospfd/ospf_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__abr_8h_source.html">ospfd/ospf_abr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__network_8h_source.html">ospfd/ospf_network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospf_interface.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__interface_8c__incl.png" border="0" usemap="#ospfd_2ospf__interface_8c" alt=""/></div>
<map name="ospfd_2ospf__interface_8c" id="ospfd_2ospf__interface_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1259,155,1325,181"/><area shape="rect" id="node57" href="thread_8h.html" title="thread.h" alt="" coords="1119,80,1191,107"/><area shape="rect" id="node59" href="linklist_8h.html" title="linklist.h" alt="" coords="1105,155,1175,181"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="2801,229,2868,256"/><area shape="rect" id="node63" href="if_8h.html" title="if.h" alt="" coords="1215,80,1255,107"/><area shape="rect" id="node66" href="table_8h.html" title="table.h" alt="" coords="1460,80,1524,107"/><area shape="rect" id="node68" href="memory_8h.html" title="memory.h" alt="" coords="1548,80,1631,107"/><area shape="rect" id="node70" href="command_8h.html" title="command.h" alt="" coords="1655,80,1747,107"/><area shape="rect" id="node72" href="stream_8h.html" title="stream.h" alt="" coords="1945,155,2020,181"/><area shape="rect" id="node75" href="log_8h.html" title="log.h" alt="" coords="1759,155,1811,181"/><area shape="rect" id="node78" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="1329,80,1436,107"/><area shape="rect" id="node82" href="ospf__spf_8h.html" title="ospfd/ospf_spf.h" alt="" coords="2045,155,2168,181"/><area shape="rect" id="node84" href="ospf__interface_8h.html" title="ospfd/ospf_interface.h" alt="" coords="2071,80,2229,107"/><area shape="rect" id="node86" href="ospf__packet_8h.html" title="ospfd/ospf_packet.h" alt="" coords="2195,155,2341,181"/><area shape="rect" id="node89" href="ospf__ism_8h.html" title="ospfd/ospf_ism.h" alt="" coords="2306,80,2432,107"/><area shape="rect" id="node91" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="2457,80,2588,107"/><area shape="rect" id="node93" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="1823,80,1945,107"/><area shape="rect" id="node96" href="ospf__lsdb_8h.html" title="ospfd/ospf_lsdb.h" alt="" coords="2796,80,2927,107"/><area shape="rect" id="node98" href="ospf__neighbor_8h.html" title="ospfd/ospf_neighbor.h" alt="" coords="2613,80,2771,107"/><area shape="rect" id="node101" href="ospf__nsm_8h.html" title="ospfd/ospf_nsm.h" alt="" coords="3001,80,3132,107"/><area shape="rect" id="node104" href="ospf__abr_8h.html" title="ospfd/ospf_abr.h" alt="" coords="3157,80,3280,107"/><area shape="rect" id="node106" href="ospf__network_8h.html" title="ospfd/ospf_network.h" alt="" coords="3305,80,3460,107"/><area shape="rect" id="node108" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="3484,80,3623,107"/></map>
</div>
</div>
<p><a href="ospf__interface_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a0f57568dea03dc11f50fdb7bc9bf02f4">ospf_if_get_output_cost</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a7b1ed4ce1af4c1513f7bd6c6fcc817a3">ospf_if_recalculate_output_cost</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ac5faa00cb6266621add9342300b4fdd8">ospf_if_reset</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a3636bdf093aec32997e31cab06a9f08b">ospf_if_reset_variables</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ae53618182688ad96bfa2fa6813617d57">ospf_if_table_lookup</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="structprefix.html">prefix</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ae9af41b7a30c1ae8dc3493dd4e79f115">ospf_add_to_if</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af97d48615a56dcc2c801d1af73c70987">ospf_delete_from_if</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af4a1a23e75bb79a0feaa1c26b0b989e5">ospf_if_new</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ac85cde0449107c57705e459658486dd5">ospf_if_cleanup</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct in_addr *address)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ad3b316be3796bf94c8d30efea994e7ad">ospf_if_is_up</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a80e9dc6cfe3bb82ac90490a33cf2c092">ospf_if_exists</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oic)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in_addr address)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a9255c148dc6fdf178c585cf1be34782c">ospf_if_lookup_by_prefix</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a4e3a74bf97746313364b81e1a272e028">ospf_if_lookup_recv_if</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct in_addr src, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aa284a85ae987e8d59126a36ed88a9839">ospf_if_stream_unset</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__if__params.html">ospf_if_params</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (struct <a class="el" href="structospf__if__params.html">ospf_if_params</a> *oip)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a5df9e932e668dd8f93bcde7ae60e19f9">ospf_free_if_params</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__if__params.html">ospf_if_params</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aa68e0e7a3491e05febe18ed5a1e3d8c6">ospf_lookup_if_params</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__if__params.html">ospf_if_params</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a161621ef4965c5d3b490b3d309fe96f0">ospf_get_if_params</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aecbf8217609db5051d31b4b68f3576d5">ospf_if_update_params</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ad9d89626b50dcfa18d1e920ccdf8b9d7">ospf_if_new_hook</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aad0efbd0f519ad2fb403b065fe29ae4b">ospf_if_delete_hook</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a4d1ed1c93fa9a91e2461470344b8a977">ospf_if_set_multicast</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a5a63d5d3af1629d69c380eb09f3e8b7b">ospf_if_up</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a82bbc770f1fe3cb13b52f7df3f13468f">ospf_vl_data_new</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct in_addr vl_peer)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aaf492b692845df0821f43b0ea0c1508f">ospf_vl_data_free</a> (struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#afe5e7c099f462aecba1c82c27385e47d">ospf_vl_new</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a55878ad33471c4c2965cc97cd313c988">ospf_vl_if_delete</a> (struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a2c499a47d45e763d71f9b8ff41456156">ospf_vl_lookup</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct in_addr vl_peer)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a17311e1f9bbc8227373e311db39c76be">ospf_vl_add</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a9feb69dbfbf6c28344a5920b2e21e5ff">ospf_vl_delete</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a995bc245cdccadc6a217fb7d3dafef6f">ospf_vl_set_params</a> (struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data, struct <a class="el" href="structvertex.html">vertex</a> *v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a5a24594a44bf465fefe438b02f077a20">ospf_vl_up_check</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct in_addr rid, struct <a class="el" href="structvertex.html">vertex</a> *v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af796502c793492cfea95fc844a1fc9ec">ospf_vl_unapprove</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ab511d3358207a7a075edbdf2492000ce">ospf_vl_shut_unapproved</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a93d2e8b88095d3bf655211da23f5069f">ospf_full_virtual_nbrs</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a71915e6d4228b82e78728176c3414089">ospf_vls_in_area</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcrypt__key.html">crypt_key</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#ab0505d7e03282ccab5b510c2eaa7bccf">ospf_crypt_key_new</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#aef64395be396457bcb2d0cb27aca42b1">ospf_crypt_key_add</a> (struct <a class="el" href="structlist.html">list</a> *crypt, struct <a class="el" href="structcrypt__key.html">crypt_key</a> *ck)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structcrypt__key.html">crypt_key</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a5abbe51d3d37c21a4ff6ede7a4253beb">ospf_crypt_key_lookup</a> (struct <a class="el" href="structlist.html">list</a> *auth_crypt, u_char key_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af5d27209a1f6bc949897a8de7c00c424">ospf_crypt_key_delete</a> (struct <a class="el" href="structlist.html">list</a> *auth_crypt, u_char key_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a492149baf1a156aaeb909b62384fc7ef">ospf_default_iftype</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#a75e87dac29a042efb9a7a699ad209fd6">ospf_if_init</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a> = 0</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae9af41b7a30c1ae8dc3493dd4e79f115"></a><!-- doxytag: member="ospf_interface.c::ospf_add_to_if" ref="ae9af41b7a30c1ae8dc3493dd4e79f115" args="(struct interface *ifp, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_add_to_if </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00169">169</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = *oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>;
  p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp), &amp;p);
  <span class="comment">/* rn-&gt;info should either be NULL or equal to this oi</span>
<span class="comment">   * as route_node_get may return an existing node</span>
<span class="comment">   */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (!rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> || rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == oi);
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = oi;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aef64395be396457bcb2d0cb27aca42b1"></a><!-- doxytag: member="ospf_interface.c::ospf_crypt_key_add" ref="aef64395be396457bcb2d0cb27aca42b1" args="(struct list *crypt, struct crypt_key *ck)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_crypt_key_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname"><em>crypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcrypt__key.html">crypt_key</a> *&#160;</td>
          <td class="paramname"><em>ck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01189">1189</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (crypt, ck);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af5d27209a1f6bc949897a8de7c00c424"></a><!-- doxytag: member="ospf_interface.c::ospf_crypt_key_delete" ref="af5d27209a1f6bc949897a8de7c00c424" args="(struct list *auth_crypt, u_char key_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_crypt_key_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname"><em>auth_crypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>key_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01208">1208</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (auth_crypt, node, nnode, ck))
    {
      <span class="keywordflow">if</span> (ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a> == <a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a>)
        {
          <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (auth_crypt, ck);
          <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba918b6239f3955fd79b57d779548e321f">MTYPE_OSPF_CRYPT_KEY</a>, ck);
          <span class="keywordflow">return</span> 1;
        }
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5abbe51d3d37c21a4ff6ede7a4253beb"></a><!-- doxytag: member="ospf_interface.c::ospf_crypt_key_lookup" ref="a5abbe51d3d37c21a4ff6ede7a4253beb" args="(struct list *auth_crypt, u_char key_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcrypt__key.html">crypt_key</a>* ospf_crypt_key_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlist.html">list</a> *&#160;</td>
          <td class="paramname"><em>auth_crypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>key_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01195">1195</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (auth_crypt, node, ck))
    <span class="keywordflow">if</span> (ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a> == <a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a>)
      <span class="keywordflow">return</span> ck;

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab0505d7e03282ccab5b510c2eaa7bccf"></a><!-- doxytag: member="ospf_interface.c::ospf_crypt_key_new" ref="ab0505d7e03282ccab5b510c2eaa7bccf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcrypt__key.html">crypt_key</a>* ospf_crypt_key_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01183">1183</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba918b6239f3955fd79b57d779548e321f">MTYPE_OSPF_CRYPT_KEY</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcrypt__key.html">crypt_key</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a492149baf1a156aaeb909b62384fc7ef"></a><!-- doxytag: member="ospf_interface.c::ospf_default_iftype" ref="a492149baf1a156aaeb909b62384fc7ef" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char ospf_default_iftype </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01227">1227</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (ifp))
    <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
    <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>;
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a80ac3b85c25c26fda311449418aa30a5"></a><!-- doxytag: member="ospf_interface.c::ospf_del_if_params" ref="a80ac3b85c25c26fda311449418aa30a5" args="(struct ospf_if_params *oip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_del_if_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__if__params.html">ospf_if_params</a> *&#160;</td>
          <td class="paramname"><em>oip</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00541">541</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (oip-&gt;auth_crypt);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1b7d5f092604ac746f743bcd405d0f09">MTYPE_OSPF_IF_PARAMS</a>, oip);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af97d48615a56dcc2c801d1af73c70987"></a><!-- doxytag: member="ospf_interface.c::ospf_delete_from_if" ref="af97d48615a56dcc2c801d1af73c70987" args="(struct interface *ifp, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_delete_from_if </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00186">186</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = *oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>;
  p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>), &amp;p);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5df9e932e668dd8f93bcde7ae60e19f9"></a><!-- doxytag: member="ospf_interface.c::ospf_free_if_params" ref="a5df9e932e668dd8f93bcde7ae60e19f9" args="(struct interface *ifp, struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_free_if_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00548">548</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *oip;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = addr;
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (!rn || !rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    <span class="keywordflow">return</span>;

  oip = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  
  <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, output_cost_cmd) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, transmit_delay) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, retransmit_interval) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, passive_interface) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, v_hello) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, fast_hello) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, v_wait) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, priority) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, auth_simple) &amp;&amp;
      !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, auth_type) &amp;&amp;
      <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oip-&gt;auth_crypt) == 0)
    {
      <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (oip);
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a93d2e8b88095d3bf655211da23f5069f"></a><!-- doxytag: member="ospf_interface.c::ospf_full_virtual_nbrs" ref="a93d2e8b88095d3bf655211da23f5069f" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_full_virtual_nbrs </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01155">1155</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;counting fully adjacent virtual neighbors in area %s&quot;</span>,
         inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;there are %d of them&quot;</span>, area-&gt;<a class="code" href="structospf__area.html#ab13a3eb52aec5fe41243fa7bef238fbc">full_vls</a>);
    }

  <span class="keywordflow">return</span> area-&gt;<a class="code" href="structospf__area.html#ab13a3eb52aec5fe41243fa7bef238fbc">full_vls</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a161621ef4965c5d3b490b3d309fe96f0"></a><!-- doxytag: member="ospf_interface.c::ospf_get_if_params" ref="a161621ef4965c5d3b490b3d309fe96f0" args="(struct interface *ifp, struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__if__params.html">ospf_if_params</a>* ospf_get_if_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00605">605</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = addr;

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> ();
  <span class="keywordflow">else</span>
    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  
  <span class="keywordflow">return</span> rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac85cde0449107c57705e459658486dd5"></a><!-- doxytag: member="ospf_interface.c::ospf_if_cleanup" ref="ac85cde0449107c57705e459658486dd5" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_cleanup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00259">259</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
  <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;

  <span class="comment">/* oi-&gt;nbrs and oi-&gt;nbr_nbma should be deleted on InterfaceDown event */</span>
  <span class="comment">/* delete all static neighbors attached to this interface */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>, node, nnode, nbr_nbma))
    {
      <a class="code" href="ospfd_8h.html#a00739e4ae75021e7e134dc6b292a9f2b">OSPF_POLL_TIMER_OFF</a> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a9aa6dd806f5903f6a4ded3ee4ca26e29">t_poll</a>);

      <span class="keywordflow">if</span> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a>)
    {
      nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a>-&gt;<a class="code" href="structospf__neighbor.html#a68b82493dd68fd0a271db2e168c36617">nbr_nbma</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a501752990df8f83d0efae32fbb9dead9">oi</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>, nbr_nbma);
    }

  <span class="comment">/* send Neighbor event KillNbr to all associated neighbors. */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">if</span> (nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>)
    <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a4b7fc48119800998da7fa068062edb40">NSM_KillNbr</a>);

  <span class="comment">/* Cleanup Link State Acknowlegdment list. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, node, nnode, lsa))
    <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* oi-&gt;ls_ack */</span>
  <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);

  oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = 0;
  
  <span class="comment">/* Empty link state update queue */</span>
  <a class="code" href="ospfd_8c.html#a057b2c243b1406f27f8de8ddc5a48ade">ospf_ls_upd_queue_empty</a> (oi);
  
  <span class="comment">/* Reset pseudo neighbor. */</span>
  <a class="code" href="ospf__neighbor_8c.html#ace111af37bf8e7a8c058a55866b4cc08">ospf_nbr_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>);
  oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> = <a class="code" href="ospf__neighbor_8c.html#a77d8efb26eb88abdd8a3c0de59b1d12a">ospf_nbr_new</a> (oi);
  <a class="code" href="ospf__neighbor_8c.html#a4260a90c3eb41e2af0d60b4d2ecb3d85">ospf_nbr_add_self</a> (oi);
  
  <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>);
  oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aad0efbd0f519ad2fb403b065fe29ae4b"></a><!-- doxytag: member="ospf_interface.c::ospf_if_delete_hook" ref="aad0efbd0f519ad2fb403b065fe29ae4b" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_if_delete_hook </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00685">685</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> rc = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  rc = <a class="code" href="ospf__opaque_8h.html#af51358fa8ab4c4ec7ad70a124a7d403c">ospf_opaque_del_if</a> (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp));

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
      <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp));

  <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> ((<span class="keyword">struct</span> <a class="code" href="structospf__if__params.html">ospf_if_params</a> *) <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp));
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4737fd8a64667c56cf4033b1d60579c6">MTYPE_OSPF_IF_INFO</a>, ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>);
  ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> rc;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac40adc9d92baa831a8ea1cde67defbb2"></a><!-- doxytag: member="ospf_interface.c::ospf_if_down" ref="ac40adc9d92baa831a8ea1cde67defbb2" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_down </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00800">800</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a> (oi, <a class="code" href="ospf__ism_8h.html#a97b345bfc32a7b6ad1fd6ff1257a7b90">ISM_InterfaceDown</a>);
  <span class="comment">/* Shutdown packet reception and sending */</span>
  <a class="code" href="ospf__interface_8c.html#aa284a85ae987e8d59126a36ed88a9839">ospf_if_stream_unset</a> (oi);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a80e9dc6cfe3bb82ac90490a33cf2c092"></a><!-- doxytag: member="ospf_interface.c::ospf_if_exists" ref="a80e9dc6cfe3bb82ac90490a33cf2c092" args="(struct ospf_interface *oic)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_exists </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oic</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00384">384</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{ 
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">if</span> ((ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ()) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
    <span class="keywordflow">if</span> (oi == oic)
      <span class="keywordflow">return</span> oi;

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa06699fd3d9034f239d51f2ea6098b3b"></a><!-- doxytag: member="ospf_interface.c::ospf_if_free" ref="aa06699fd3d9034f239d51f2ea6098b3b" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00311">311</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a> (oi);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>);

<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__opaque_8h.html#a5ea00e524339f12f53f7427f3608c4a6">ospf_opaque_type9_lsa_term</a> (oi);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

  <span class="comment">/* Free Pseudo Neighbour */</span>
  <a class="code" href="ospf__neighbor_8c.html#ace111af37bf8e7a8c058a55866b4cc08">ospf_nbr_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>);
  
  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>);
  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a>);
  
  <span class="comment">/* Free any lists that should be freed */</span>
  <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>);
  
  <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);
  <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);
  
  <a class="code" href="ospf__interface_8c.html#af97d48615a56dcc2c801d1af73c70987">ospf_delete_from_if</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, oi);

  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, oi);
  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, oi);

  memset (oi, 0, <span class="keyword">sizeof</span> (*oi));
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8d516e6360bb388d51329c3ef2759141">MTYPE_OSPF_IF</a>, oi);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0f57568dea03dc11f50fdb7bc9bf02f4"></a><!-- doxytag: member="ospf_interface.c::ospf_if_get_output_cost" ref="a0f57568dea03dc11f50fdb7bc9bf02f4" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_get_output_cost </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00054">54</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* If all else fails, use default OSPF cost */</span>
  u_int32_t cost;
  u_int32_t bw, refbw;

  bw = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a> ? oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a> : <a class="code" href="ospfd_8h.html#a5e84e655faf82da7a2acd6d67c7cecb4">OSPF_DEFAULT_BANDWIDTH</a>;
  refbw = oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#ae0c9ec1374c543f0db486cb3faf271c8">ref_bandwidth</a>;

  <span class="comment">/* A specifed ip ospf cost overrides a calculated one. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>), output_cost_cmd) ||
      <a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oi-&gt;<a class="code" href="structospf__interface.html#abe19d62cc037130ba97d644980a90e58">params</a>, output_cost_cmd))
    cost = <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, output_cost_cmd);
  <span class="comment">/* See if a cost can be calculated from the zebra processes</span>
<span class="comment">     interface bandwidth field. */</span>
  <span class="keywordflow">else</span>
    {
      cost = (u_int32_t) ((<span class="keywordtype">double</span>)refbw / (double)bw + (<span class="keywordtype">double</span>)0.5);
      <span class="keywordflow">if</span> (cost &lt; 1)
    cost = 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cost &gt; 65535)
    cost = 65535;
    }

  <span class="keywordflow">return</span> cost;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a75e87dac29a042efb9a7a699ad209fd6"></a><!-- doxytag: member="ospf_interface.c::ospf_if_init" ref="a75e87dac29a042efb9a7a699ad209fd6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01238">1238</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Initialize Zebra interface data structure. */</span>
  <a class="code" href="if_8c.html#ac78cad8082fa880e50b2c945f8a3c33d">if_init</a> ();
  <a class="code" href="ospfd_8c.html#a00fd6054739908ab616f0bacdc6d0f64">om</a>-&gt;<a class="code" href="structospf__master.html#a03ff051ede9d089f9ca6cfc6262a5634">iflist</a> = <a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>;
  <a class="code" href="if_8c.html#af0a4090e849fe0dff798e976d8fa2482">if_add_hook</a> (<a class="code" href="if_8h.html#a4185c142d0c9619a6cab25061dfd50f3">IF_NEW_HOOK</a>, <a class="code" href="ospf__interface_8c.html#ad9d89626b50dcfa18d1e920ccdf8b9d7">ospf_if_new_hook</a>);
  <a class="code" href="if_8c.html#af0a4090e849fe0dff798e976d8fa2482">if_add_hook</a> (<a class="code" href="if_8h.html#afa0a12fa62fd3fd8b5fb9a1b917f3afa">IF_DELETE_HOOK</a>, <a class="code" href="ospf__interface_8c.html#aad0efbd0f519ad2fb403b065fe29ae4b">ospf_if_delete_hook</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af2d46b8d8d5e620e564a68257d080643"></a><!-- doxytag: member="ospf_interface.c::ospf_if_is_configured" ref="af2d46b8d8d5e620e564a68257d080643" args="(struct ospf *ospf, struct in_addr *address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_is_configured </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>address</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00348">348</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> addr;

  addr.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
  addr.prefix = *address;
  addr.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
    <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
      {
        <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>)
      {
        <span class="comment">/* special leniency: match if addr is anywhere on peer subnet */</span>
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>(<a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>),
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;addr))
          <span class="keywordflow">return</span> oi;
      }
        <span class="keywordflow">else</span>
      {
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (address, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
          <span class="keywordflow">return</span> oi;
      }
      }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a25678bf88909391ee05583a4e73a838d"></a><!-- doxytag: member="ospf_interface.c::ospf_if_is_enable" ref="a25678bf88909391ee05583a4e73a838d" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_is_enable </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00708">708</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
    <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad3b316be3796bf94c8d30efea994e7ad"></a><!-- doxytag: member="ospf_interface.c::ospf_if_is_up" ref="ad3b316be3796bf94c8d30efea994e7ad" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_is_up </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00378">378</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab6de66b3bd1fb23d3469ecf70210d280"></a><!-- doxytag: member="ospf_interface.c::ospf_if_lookup_by_local_addr" ref="ab6de66b3bd1fb23d3469ecf70210d280" args="(struct ospf *ospf, struct interface *ifp, struct in_addr address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_lookup_by_local_addr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>address</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00401">401</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
    <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
      {
    <span class="keywordflow">if</span> (ifp &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> != ifp)
      <span class="keywordflow">continue</span>;
    
    <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
      <span class="keywordflow">return</span> oi;
      }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9255c148dc6fdf178c585cf1be34782c"></a><!-- doxytag: member="ospf_interface.c::ospf_if_lookup_by_prefix" ref="a9255c148dc6fdf178c585cf1be34782c" args="(struct ospf *ospf, struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_lookup_by_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00421">421</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  
  <span class="comment">/* Check each Interface. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
    {
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> ptmp;

      <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (&amp;ptmp, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>));
      <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;ptmp);
      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;ptmp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p))
        <span class="keywordflow">return</span> oi;
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4e3a74bf97746313364b81e1a272e028"></a><!-- doxytag: member="ospf_interface.c::ospf_if_lookup_recv_if" ref="a4e3a74bf97746313364b81e1a272e028" args="(struct ospf *ospf, struct in_addr src, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_lookup_recv_if </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00444">444</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> addr;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi, *match;

  addr.family = AF_INET;
  addr.prefix = src;
  addr.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

  match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    {
      oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (!oi) <span class="comment">/* oi can be NULL for PtP aliases */</span>
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (<a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>),
                (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;addr))
    {
      <span class="keywordflow">if</span> ( (match == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) || 
           (match-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
         )
        match = oi;
    }
    }

  <span class="keywordflow">return</span> match;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af4a1a23e75bb79a0feaa1c26b0b989e5"></a><!-- doxytag: member="ospf_interface.c::ospf_if_new" ref="af4a1a23e75bb79a0feaa1c26b0b989e5" args="(struct ospf *ospf, struct interface *ifp, struct prefix *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00203">203</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">if</span> ((oi = <a class="code" href="ospf__interface_8c.html#ae53618182688ad96bfa2fa6813617d57">ospf_if_table_lookup</a> (ifp, p)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      oi = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8d516e6360bb388d51329c3ef2759141">MTYPE_OSPF_IF</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a>));
      memset (oi, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a>));
    }
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> oi;
    
  <span class="comment">/* Set zebra interface pointer. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> = <a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>;
  oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a> = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  
  <a class="code" href="ospf__interface_8c.html#ae9af41b7a30c1ae8dc3493dd4e79f115">ospf_add_to_if</a> (ifp, oi);
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, oi);
  
  <span class="comment">/* Clear self-originated network-LSA. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Initialize neighbor list. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();

  <span class="comment">/* Initialize static neighbor list. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();

  <span class="comment">/* Initialize Link State Acknowledgment list. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();

  <span class="comment">/* Set default values. */</span>
  <a class="code" href="ospf__interface_8c.html#a3636bdf093aec32997e31cab06a9f08b">ospf_if_reset_variables</a> (oi);

  <span class="comment">/* Add pseudo neighbor. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> = <a class="code" href="ospf__neighbor_8c.html#a77d8efb26eb88abdd8a3c0de59b1d12a">ospf_nbr_new</a> (oi);

  oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  oi-&gt;<a class="code" href="structospf__interface.html#a1fef0480466c761ca2921c55748b9d53">t_ls_ack_direct</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__opaque_8h.html#ac17f05a1ebf3fccea3febad454f66a13">ospf_opaque_type9_lsa_init</a> (oi);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

  oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a> = <a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>;
  
  <span class="keywordflow">return</span> oi;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad9d89626b50dcfa18d1e920ccdf8b9d7"></a><!-- doxytag: member="ospf_interface.c::ospf_if_new_hook" ref="ad9d89626b50dcfa18d1e920ccdf8b9d7" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_new_hook </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00641">641</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> rc = 0;

  ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4737fd8a64667c56cf4033b1d60579c6">MTYPE_OSPF_IF_INFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__if__info.html">ospf_if_info</a>));
  
  <a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp) = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  <a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp) = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp) = <a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> ();
  
  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), transmit_delay);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;transmit_delay = <a class="code" href="ospfd_8h.html#a001a3e3ba627504b9ea467e28e128c98">OSPF_TRANSMIT_DELAY_DEFAULT</a>;
  
  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), retransmit_interval);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;retransmit_interval = <a class="code" href="ospfd_8h.html#a4f4163a470d237f35753299adc418ba9">OSPF_RETRANSMIT_INTERVAL_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), priority);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;priority = <a class="code" href="ospfd_8h.html#a8357052c03fdd0b83bc58a5ab3dc567a">OSPF_ROUTER_PRIORITY_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;mtu_ignore = <a class="code" href="ospfd_8h.html#a5a487fab47cc5cf1abb55d3c6aa1be3a">OSPF_MTU_IGNORE_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), v_hello);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;v_hello = <a class="code" href="ospfd_8h.html#a5837d8ac5cfe0c0e32c2f8687f1ba294">OSPF_HELLO_INTERVAL_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), fast_hello);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;fast_hello = <a class="code" href="ospfd_8h.html#abfbe9c7bb57a203ed24130216fe5e5a5">OSPF_FAST_HELLO_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), v_wait);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;v_wait = <a class="code" href="ospfd_8h.html#af631a311bfefa954c886f7fa3e82dda0">OSPF_ROUTER_DEAD_INTERVAL_DEFAULT</a>;

  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), auth_simple);
  memset (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;auth_simple, 0, <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>);
  
  <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), auth_type);
  <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;auth_type = <a class="code" href="ospfd_8h.html#a24fc895f9bfaee75505b77666b656931">OSPF_AUTH_NOTSET</a>;
  
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  rc = <a class="code" href="ospf__opaque_8h.html#a815a52d8eba68484eac70aa5c63e41fa">ospf_opaque_new_if</a> (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
  <span class="keywordflow">return</span> rc;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b1ed4ce1af4c1513f7bd6c6fcc817a3"></a><!-- doxytag: member="ospf_interface.c::ospf_if_recalculate_output_cost" ref="a7b1ed4ce1af4c1513f7bd6c6fcc817a3" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_recalculate_output_cost </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00082">82</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t newcost;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    {
      <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
      
      <span class="keywordflow">if</span> ( (oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">continue</span>;

      newcost = <a class="code" href="ospf__interface_8c.html#a0f57568dea03dc11f50fdb7bc9bf02f4">ospf_if_get_output_cost</a> (oi);

      <span class="comment">/* Is actual output cost changed? */</span>
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> != newcost)
    {
      oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> = newcost;
      <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5faa00cb6266621add9342300b4fdd8"></a><!-- doxytag: member="ospf_interface.c::ospf_if_reset" ref="ac5faa00cb6266621add9342300b4fdd8" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00108">108</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    {
      <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
      
      <span class="keywordflow">if</span> ( (oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">continue</span>;

      <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a>(oi);
      <a class="code" href="ospf__interface_8c.html#a5a63d5d3af1629d69c380eb09f3e8b7b">ospf_if_up</a>(oi);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3636bdf093aec32997e31cab06a9f08b"></a><!-- doxytag: member="ospf_interface.c::ospf_if_reset_variables" ref="a3636bdf093aec32997e31cab06a9f08b" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_reset_variables </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00125">125</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set default values. */</span>
  <span class="comment">/* don&#39;t clear this flag.  oi-&gt;flag = OSPF_IF_DISABLE; */</span>

  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>)
    oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>;
  <span class="keywordflow">else</span> 
  <span class="comment">/* preserve network-type */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
    oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>;

  oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> = <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>;

  oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = 0;

  <span class="comment">/* This must be short, (less than RxmtInterval) </span>
<span class="comment">     - RFC 2328 Section 13.5 para 3.  Set to 1 second to avoid Acks being</span>
<span class="comment">       held back for too long - MAG */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#ab715712eda2750aa107ca2457f234a9c">v_ls_ack</a> = 1;  
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4d1ed1c93fa9a91e2461470344b8a977"></a><!-- doxytag: member="ospf_interface.c::ospf_if_set_multicast" ref="a4d1ed1c93fa9a91e2461470344b8a977" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_set_multicast </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00718">718</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> ((oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> &gt; <a class="code" href="ospf__ism_8h.html#ad5bbcdc6e422bf33064865a4aac0a172">ISM_Loopback</a>) &amp;&amp;
      (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>) &amp;&amp;
      (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>) &amp;&amp;
      (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a>(oi) == <a class="code" href="ospf__interface_8h.html#aa8ac4964fabc3508563c253b72158fad">OSPF_IF_ACTIVE</a>))
    {
      <span class="comment">/* The interface should belong to the OSPF-all-routers group. */</span>
      <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>) &amp;&amp;
      (<a class="code" href="ospf__network_8c.html#a474df6c741c2635fd9a6acd599516475">ospf_if_add_allspfrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
                     oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) &gt;= 0))
      <span class="comment">/* Set the flag only if the system call to join succeeded. */</span>
      <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* The interface should NOT belong to the OSPF-all-routers group. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>))
        {
          <span class="comment">/* Only actually drop if this is the last reference */</span>
          <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a036d7ff75d00837601d3092b6eeb58ea">OI_MEMBER_COUNT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>) == 1)
        <a class="code" href="ospf__network_8c.html#a621131b5917c5e3de50cd232c1da04ee">ospf_if_drop_allspfrouters</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
                                    oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
      <span class="comment">/* Unset the flag regardless of whether the system call to leave</span>
<span class="comment">         the group succeeded, since it&#39;s much safer to assume that</span>
<span class="comment">         we are not a member. */</span>
          <a class="code" href="ospf__interface_8h.html#adfe6ede0f8fd3d4a4e42e4b8b4c4a582">OI_MEMBER_LEFT</a>(oi,<a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
        }
    }

  <span class="keywordflow">if</span> (((oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>) ||
       (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>)) &amp;&amp;
      ((oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a>) || (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)) &amp;&amp;
      (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a>(oi) == <a class="code" href="ospf__interface_8h.html#aa8ac4964fabc3508563c253b72158fad">OSPF_IF_ACTIVE</a>))
    {
      <span class="comment">/* The interface should belong to the OSPF-designated-routers group. */</span>
      <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>) &amp;&amp;
      (<a class="code" href="ospf__network_8c.html#aaa4e4123232fc0eefbd6a8425697048a">ospf_if_add_alldrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
                   oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) &gt;= 0))
    <span class="comment">/* Set the flag only if the system call to join succeeded. */</span>
    <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* The interface should NOT belong to the OSPF-designated-routers group */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>))
        {
          <span class="comment">/* drop only if last reference */</span>
          <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a036d7ff75d00837601d3092b6eeb58ea">OI_MEMBER_COUNT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>) == 1)
        <a class="code" href="ospf__network_8c.html#ab2ab03d8d8550be5794b6cd5d98703af">ospf_if_drop_alldrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
          
      <span class="comment">/* Unset the flag regardless of whether the system call to leave</span>
<span class="comment">         the group succeeded, since it&#39;s much safer to assume that</span>
<span class="comment">         we are not a member. */</span>
          <a class="code" href="ospf__interface_8h.html#adfe6ede0f8fd3d4a4e42e4b8b4c4a582">OI_MEMBER_LEFT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="af7c3f5f89521d13aa8df5bbd19f708dc"></a><!-- doxytag: member="ospf_interface.c::ospf_if_stream_set" ref="af7c3f5f89521d13aa8df5bbd19f708dc" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_stream_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00484">484</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* set output fifo queue. */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
    oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> = <a class="code" href="ospf__packet_8c.html#aa36c04f312ec3caaafd634a17bec0d27">ospf_fifo_new</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa284a85ae987e8d59126a36ed88a9839"></a><!-- doxytag: member="ospf_interface.c::ospf_if_stream_unset" ref="aa284a85ae987e8d59126a36ed88a9839" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_stream_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00492">492</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>;

  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>)
    {
     <a class="code" href="ospf__packet_8c.html#aa6e5e26fc14155201203e96b8303de75">ospf_fifo_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>);
     oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a2384f784dd444460f419edcf4e5bfee2">on_write_q</a>)
       {
     <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>, oi);
         <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>))
           <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (ospf-&gt;<a class="code" href="structospf.html#a58c6957a24a39205e5a9f7aeab10e42b">t_write</a>);
     oi-&gt;<a class="code" href="structospf__interface.html#a2384f784dd444460f419edcf4e5bfee2">on_write_q</a> = 0;
       }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae53618182688ad96bfa2fa6813617d57"></a><!-- doxytag: member="ospf_interface.c::ospf_if_table_lookup" ref="ae53618182688ad96bfa2fa6813617d57" args="(struct interface *ifp, struct prefix *prefix)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_if_table_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00149">149</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>prefix <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *rninfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = *<a class="code" href="prefix_8h.html#a6b458105367a186babd858fd008a66be">prefix</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  
  <span class="comment">/* route_node_get implicitely locks */</span>
  <span class="keywordflow">if</span> ((rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp), &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)))
    {
      rninfo = (<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
  
  <span class="keywordflow">return</span> rninfo;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5a63d5d3af1629d69c380eb09f3e8b7b"></a><!-- doxytag: member="ospf_interface.c::ospf_if_up" ref="a5a63d5d3af1629d69c380eb09f3e8b7b" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_if_up </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00778">778</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>)
    <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#acf10d53400c12658dc3b67f301724881">ISM_LoopInd</a>);
  <span class="keywordflow">else</span>
    {
      <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
      <span class="keywordflow">if</span> (ospf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <a class="code" href="ospf__network_8c.html#a646b5cb4e4e7e52753082f4fd6ccf553">ospf_adjust_sndbuflen</a> (ospf, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: ospf_lookup() returned NULL&quot;</span>, __func__);
      <a class="code" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (oi);
      <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a62e1abe21aa53de288bc8b8566c481df">ISM_InterfaceUp</a>);
    }

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aecbf8217609db5051d31b4b68f3576d5"></a><!-- doxytag: member="ospf_interface.c::ospf_if_update_params" ref="aecbf8217609db5051d31b4b68f3576d5" args="(struct interface *ifp, struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_if_update_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00625">625</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    {
      <span class="keywordflow">if</span> ((oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;addr))
    oi-&gt;<a class="code" href="structospf__interface.html#abe19d62cc037130ba97d644980a90e58">params</a> = <a class="code" href="ospf__interface_8c.html#aa68e0e7a3491e05febe18ed5a1e3d8c6">ospf_lookup_if_params</a> (ifp, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa68e0e7a3491e05febe18ed5a1e3d8c6"></a><!-- doxytag: member="ospf_interface.c::ospf_lookup_if_params" ref="aa68e0e7a3491e05febe18ed5a1e3d8c6" args="(struct interface *ifp, struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__if__params.html">ospf_if_params</a>* ospf_lookup_if_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00584">584</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = addr;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  
  <span class="keywordflow">if</span> (rn)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a93dcbc1b1c40f1eb9fda0a5e48e16e4a"></a><!-- doxytag: member="ospf_interface.c::ospf_new_if_params" ref="a93dcbc1b1c40f1eb9fda0a5e48e16e4a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__if__params.html">ospf_if_params</a>* ospf_new_if_params </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00513">513</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *oip;

  oip = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1b7d5f092604ac746f743bcd405d0f09">MTYPE_OSPF_IF_PARAMS</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__if__params.html">ospf_if_params</a>));

  <span class="keywordflow">if</span> (!oip)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, output_cost_cmd);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, transmit_delay);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, retransmit_interval);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, passive_interface);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, v_hello);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, fast_hello);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, v_wait);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, priority);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, <a class="code" href="structospf__if__params.html#ab7c2d84a2f2415f9bb07403d88cd55ec">auth_simple</a>);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, auth_crypt);
  <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, auth_type);

  oip-&gt;auth_crypt = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
  
  <span class="keywordflow">return</span> oip;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a17311e1f9bbc8227373e311db39c76be"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_add" ref="a17311e1f9bbc8227373e311db39c76be" args="(struct ospf *ospf, struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00971">971</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, vl_data);
<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#aa8d32930417e294b53dccf3fa7fbfaa8">ospf_snmp_vl_add</a> (vl_data);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaf492b692845df0821f43b0ea0c1508f"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_data_free" ref="aaf492b692845df0821f43b0ea0c1508f" args="(struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_data_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00830">830</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9dbfb66bd07b3619ef05e424e040aa98">MTYPE_OSPF_VL_DATA</a>, vl_data);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a82bbc770f1fe3cb13b52f7df3f13468f"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_data_new" ref="a82bbc770f1fe3cb13b52f7df3f13468f" args="(struct ospf_area *area, struct in_addr vl_peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a>* ospf_vl_data_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>vl_peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00816">816</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;

  vl_data = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9dbfb66bd07b3619ef05e424e040aa98">MTYPE_OSPF_VL_DATA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a>));

  vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>.s_addr = <a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>.s_addr;
  vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
  vl_data-&gt;<a class="code" href="structospf__vl__data.html#a19311dc3fcc14ddc73298a44b16f23da">format</a> = area-&gt;<a class="code" href="structospf__area.html#a83fcfc9add37df9fa90e4cb142ff5b5a">format</a>;

  <span class="keywordflow">return</span> vl_data;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9feb69dbfbf6c28344a5920b2e21e5ff"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_delete" ref="a9feb69dbfbf6c28344a5920b2e21e5ff" args="(struct ospf *ospf, struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00980">980</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (vl_data);
  <a class="code" href="ospf__interface_8c.html#a55878ad33471c4c2965cc97cd313c988">ospf_vl_if_delete</a> (vl_data);

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#ab3ed2f8865147118d24a3b4596121a10">ospf_snmp_vl_delete</a> (vl_data);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, vl_data);

  <a class="code" href="ospf__interface_8c.html#aaf492b692845df0821f43b0ea0c1508f">ospf_vl_data_free</a> (vl_data);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a55878ad33471c4c2965cc97cd313c988"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_if_delete" ref="a55878ad33471c4c2965cc97cd313c988" args="(struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_vl_if_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00910">910</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>;
  vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr = 0;
  vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = 0;
  <a class="code" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>);
  <a class="code" href="if_8c.html#a705a02a3d76b6a98b47957dadcef66e1">if_delete</a> (ifp);
  <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>--;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2c499a47d45e763d71f9b8ff41456156"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_lookup" ref="a2c499a47d45e763d71f9b8ff41456156" args="(struct ospf *ospf, struct ospf_area *area, struct in_addr vl_peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a>* ospf_vl_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>vl_peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00924">924</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Looking for %s&quot;</span>, __func__, inet_ntoa (vl_peer));
      <span class="keywordflow">if</span> (area)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: in area %s&quot;</span>, __func__, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
    }
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: VL %s, peer %s&quot;</span>, __func__,
                    vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
                    inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>));
      
      <span class="keywordflow">if</span> (area &amp;&amp; !<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>, &amp;vl_peer))
        <span class="keywordflow">return</span> vl_data;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afe5e7c099f462aecba1c82c27385e47d"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_new" ref="afe5e7c099f462aecba1c82c27385e47d" args="(struct ospf *ospf, struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__interface.html">ospf_interface</a>* ospf_vl_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00838">838</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> * voi;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> * vi;
  <span class="keywordtype">char</span>   ifname[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a> + 1];
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span>in_addr area_id;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *co;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Start&quot;</span>);
  <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a> == <a class="code" href="ospf__interface_8h.html#a6163032f8217dd26f96e3619907c36a0">OSPF_VL_MAX_COUNT</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Alarm: &quot;</span>
           <span class="stringliteral">&quot;cannot create more than OSPF_MAX_VL_COUNT virtual links&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): creating pseudo zebra interface&quot;</span>);

  <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (ifname, <span class="keyword">sizeof</span>(ifname), <span class="stringliteral">&quot;VLINK%d&quot;</span>, <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>);
  vi = <a class="code" href="if_8c.html#a5a7398837ed51febeaea57200f118fd5">if_create</a> (ifname, <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifname, <span class="keyword">sizeof</span>(ifname)));
  co = <a class="code" href="if_8c.html#a3f0f3d92c824863a40af915d7f540cc5">connected_new</a> ();
  co-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a> = vi;
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (vi-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, co);

  p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
  p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
  p-&gt;prefix.s_addr = 0;
  p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = 0;
 
  co-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *)p;
  
  voi = <a class="code" href="ospf__interface_8c.html#af4a1a23e75bb79a0feaa1c26b0b989e5">ospf_if_new</a> (ospf, vi, co-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>);
  <span class="keywordflow">if</span> (voi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Alarm: OSPF int structure is not created&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  voi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a> = co;
  voi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a> = vl_data;
  voi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = <a class="code" href="ospf__interface_8h.html#adaa609854f279874b7bfaa53ed6a1a1c">OSPF_VL_MTU</a>;
  voi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>;

  <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>++;
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Created name: %s&quot;</span>, ifname);
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): set if-&gt;name to %s&quot;</span>, vi-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  area_id.s_addr = 0;
  area = <a class="code" href="ospfd_8c.html#aa215da7694f647944fed0fad86df18c8">ospf_area_get</a> (ospf, area_id, <a class="code" href="ospfd_8h.html#a4693ac54d402184ececda946d167d1ef">OSPF_AREA_ID_FORMAT_ADDRESS</a>);
  voi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): set associated area to the backbone&quot;</span>);

  <a class="code" href="ospf__neighbor_8c.html#a4260a90c3eb41e2af0d60b4d2ecb3d85">ospf_nbr_add_self</a> (voi);
  <a class="code" href="ospfd_8c.html#ab5f82e15e585aa9de10f7f426e445872">ospf_area_add_if</a> (voi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, voi);

  <a class="code" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (voi);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Stop&quot;</span>);
  <span class="keywordflow">return</span> voi;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a995bc245cdccadc6a217fb7d3dafef6f"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_set_params" ref="a995bc245cdccadc6a217fb7d3dafef6f" args="(struct ospf_vl_data *vl_data, struct vertex *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_vl_set_params </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00994">994</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> changed = 0;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *voi;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rl;

  voi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;

  <span class="keywordflow">if</span> (voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> != v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>)
    {
     
      voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
      changed = 1;
    }

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
    {
      vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
      vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
      
      <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                          &amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
        changed = 1;
        
      voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
      voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;

      <span class="keywordflow">break</span>; <span class="comment">/* We take the first interface. */</span>
    }

  rl = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *)v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;

  <span class="comment">/* use SPF determined backlink index in struct vertex</span>
<span class="comment">   * for virtual link destination address</span>
<span class="comment">   */</span>
  if (vp &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a> &gt;= 0)
    {
      <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>,
                           &amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>))
        changed = 1;
      vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a> = rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* This is highly odd, there is no backlink index</span>
<span class="comment">       * there should be due to the ospf_spf_has_link() check</span>
<span class="comment">       * in SPF. Lets warn and try pick a link anyway.</span>
<span class="comment">       */</span>
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_vl_set_params: No backlink for %s!&quot;</span>,
                 vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <span class="keywordflow">for</span> (i = 0; i &lt; ntohs (rl-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>); i++)
        {
          <span class="keywordflow">switch</span> (rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#aa730ac0aec994e853bcd4d52ff285a9e">type</a>)
            {
              <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
                <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found back link through VL&quot;</span>);
              <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
              <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
                <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>,
                                     &amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>))
                  changed = 1;
                vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a> = rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>;
            }
        }
    }
    
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s peer address: %s, cost: %d,%schanged&quot;</span>, __func__,
               vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
               inet_ntoa(vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>),
               voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>,
               (changed ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; un&quot;</span>));
               
  <span class="keywordflow">return</span> changed;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab511d3358207a7a075edbdf2492000ce"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_shut_unapproved" ref="ab511d3358207a7a075edbdf2492000ce" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_shut_unapproved </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01144">1144</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, nnode, vl_data))
    <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>))
      <a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (vl_data);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b591bec8466506aecc3089b36f9744c"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_shutdown" ref="a0b591bec8466506aecc3089b36f9744c" args="(struct ospf_vl_data *vl_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_vl_shutdown </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__vl__data.html">ospf_vl_data</a> *&#160;</td>
          <td class="paramname"><em>vl_data</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00955">955</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">if</span> ((oi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr = 0;
  oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = 0;

  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
  <span class="comment">/* OSPF_ISM_EVENT_SCHEDULE (oi, ISM_InterfaceDown); */</span>
  <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a> (oi, <a class="code" href="ospf__ism_8h.html#a97b345bfc32a7b6ad1fd6ff1257a7b90">ISM_InterfaceDown</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af796502c793492cfea95fc844a1fc9ec"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_unapprove" ref="af796502c793492cfea95fc844a1fc9ec" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_unapprove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01134">1134</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5a24594a44bf465fefe438b02f077a20"></a><!-- doxytag: member="ospf_interface.c::ospf_vl_up_check" ref="a5a24594a44bf465fefe438b02f077a20" args="(struct ospf_area *area, struct in_addr rid, struct vertex *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_vl_up_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>rid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structvertex.html">vertex</a> *&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01076">1076</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Start&quot;</span>);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Router ID is %s&quot;</span>, inet_ntoa (rid));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Area is %s&quot;</span>, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
    }

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: considering VL, %s in area %s&quot;</span>, __func__,
             vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
             inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: peer ID: %s&quot;</span>, __func__,
             inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>));
    }

      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>, &amp;rid) &amp;&amp;
          <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
        {
          oi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;
          <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): this VL matched&quot;</span>);

          <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>)
            {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): VL is down, waking it up&quot;</span>);
              <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
              <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a>(oi,<a class="code" href="ospf__ism_8h.html#a62e1abe21aa53de288bc8b8566c481df">ISM_InterfaceUp</a>);
            }

         <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#a995bc245cdccadc6a217fb7d3dafef6f">ospf_vl_set_params</a> (vl_data, v))
           {
             <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (ism, ISM_EVENTS))
               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check: VL cost change,&quot;</span>
                          <span class="stringliteral">&quot; scheduling router lsa refresh&quot;</span>);
             <span class="keywordflow">if</span>(ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>)
               <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>);
             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (ism, ISM_EVENTS))
               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check: VL cost change, no backbone!&quot;</span>);
           }
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71915e6d4228b82e78728176c3414089"></a><!-- doxytag: member="ospf_interface.c::ospf_vls_in_area" ref="a71915e6d4228b82e78728176c3414089" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_vls_in_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l01168">1168</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
  <span class="keywordtype">int</span> c = 0;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
    <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
      c++;

  <span class="keywordflow">return</span> c;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="af047c884d1feaae67a6f3a701a42d512"></a><!-- doxytag: member="ospf_interface.c::vlink_count" ref="af047c884d1feaae67a6f3a701a42d512" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int <a class="el" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a> = 0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__interface_8c_source.html#l00835">835</a> of file <a class="el" href="ospf__interface_8c_source.html">ospf_interface.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__interface_8c.html">ospf_interface.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:28 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
