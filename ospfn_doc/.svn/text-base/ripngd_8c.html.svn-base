<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ripngd/ripngd.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ripngd_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ripngd/ripngd.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="filter_8h_source.html">filter.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockopt_8h_source.html">sockopt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="distribute_8h_source.html">distribute.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="plist_8h_source.html">plist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if__rmap_8h_source.html">if_rmap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="privs_8h_source.html">privs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ripngd_8h_source.html">ripngd/ripngd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ripng__route_8h_source.html">ripngd/ripng_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ripng__debug_8h_source.html">ripngd/ripng_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ripng__nexthop_8h_source.html">ripngd/ripng_nexthop.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ripngd.c:</div>
<div class="dyncontent">
<div class="center"><img src="ripngd_8c__incl.png" border="0" usemap="#ripngd_2ripngd_8c" alt=""/></div>
<map name="ripngd_2ripngd_8c" id="ripngd_2ripngd_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1432,155,1499,181"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="1939,155,2007,181"/><area shape="rect" id="node65" href="filter_8h.html" title="filter.h" alt="" coords="2042,80,2101,107"/><area shape="rect" id="node67" href="if_8h.html" title="if.h" alt="" coords="2041,155,2081,181"/><area shape="rect" id="node69" href="log_8h.html" title="log.h" alt="" coords="686,155,737,181"/><area shape="rect" id="node72" href="thread_8h.html" title="thread.h" alt="" coords="2127,80,2199,107"/><area shape="rect" id="node74" href="memory_8h.html" title="memory.h" alt="" coords="2223,80,2305,107"/><area shape="rect" id="node77" href="stream_8h.html" title="stream.h" alt="" coords="1841,80,1916,107"/><area shape="rect" id="node80" href="table_8h.html" title="table.h" alt="" coords="2329,80,2393,107"/><area shape="rect" id="node82" href="command_8h.html" title="command.h" alt="" coords="2418,80,2509,107"/><area shape="rect" id="node84" href="sockopt_8h.html" title="sockopt.h" alt="" coords="1832,155,1915,181"/><area shape="rect" id="node87" href="distribute_8h.html" title="distribute.h" alt="" coords="2535,80,2625,107"/><area shape="rect" id="node89" href="plist_8h.html" title="plist.h" alt="" coords="2649,80,2708,107"/><area shape="rect" id="node91" href="routemap_8h.html" title="routemap.h" alt="" coords="2732,80,2823,107"/><area shape="rect" id="node93" href="if__rmap_8h.html" title="if_rmap.h" alt="" coords="2847,80,2924,107"/><area shape="rect" id="node95" href="privs_8h.html" title="privs.h" alt="" coords="2949,80,3011,107"/><area shape="rect" id="node97" href="ripngd_8h.html" title="ripngd/ripngd.h" alt="" coords="1528,155,1640,181"/><area shape="rect" id="node99" href="ripng__route_8h.html" title="ripngd/ripng_route.h" alt="" coords="1665,155,1807,181"/><area shape="rect" id="node101" href="ripng__debug_8h.html" title="ripngd/ripng_debug.h" alt="" coords="3035,80,3185,107"/><area shape="rect" id="node103" href="ripng__nexthop_8h.html" title="ripngd/ripng_nexthop.h" alt="" coords="1503,80,1665,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2131,229,2208,256"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2233,229,2281,256"/><area shape="rect" id="node63" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2844,229,2937,256"/></map>
</div>
</div>
<p><a href="ripngd_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structripng__nexthop.html">ripng_nexthop</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>&#160;&#160;&#160;25</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83">ripng_all_route</a>, 
<a class="el" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5">ripng_changed_route</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a3f72267312fe0a97d08b67ba961d6658">ripng_output_process</a> (struct <a class="el" href="structinterface.html">interface</a> *, struct sockaddr_in6 *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aade04913dcd50154f3a16346c673f01e">ripng_triggered_update</a> (struct <a class="el" href="structthread.html">thread</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a6b1690fe3bd2672b6812fa0922f848b8">ripng_route_rte</a> (struct <a class="el" href="structripng__info.html">ripng_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a0b7fb6a0d15b39889e109557bf3d23ea">ripng_info_new</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a9dac36daa3fa248437e2cfab0289331c">ripng_info_free</a> (struct <a class="el" href="structripng__info.html">ripng_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ab4b62648d39fa134266aa8c8c69a977c">ripng_make_socket</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a0d2737d5d5dcd2d0fcb60ebd037f0004">ripng_send_packet</a> (caddr_t buf, int bufsize, struct sockaddr_in6 *to, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a4c5e47f96c44a80502ce3e206c315829">ripng_recv_packet</a> (int sock, u_char *buf, int bufsize, struct sockaddr_in6 *from, unsigned int *ifindex, int *hoplimit)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a0d7f74786282b1676f0508b2f0c636c1">ripng_packet_dump</a> (struct <a class="el" href="structripng__packet.html">ripng_packet</a> *packet, int size, const char *sndrcv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#adc76996f440d2320cf5fff688543a6a5">ripng_nexthop_rte</a> (struct <a class="el" href="structrte.html">rte</a> *<a class="el" href="structrte.html">rte</a>, struct sockaddr_in6 *from, struct <a class="el" href="structripng__nexthop.html">ripng_nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ab31cc16d7dd4df1e71bb29c546d88cfb">ripng_lladdr_check</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct in6_addr *addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ad9748647bbab59298c91b150352917a8">ripng_garbage_collect</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a4f3e9c6e2caf64e72fcd3b109448bf3e">ripng_timeout</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a14095cf7dba79691f9bceecc899bf66c">ripng_timeout_update</a> (struct <a class="el" href="structripng__info.html">ripng_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ad73db0842e290ed6f113c6ac70e53ed6">ripng_incoming_filter</a> (struct prefix_ipv6 *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structripng__interface.html">ripng_interface</a> *ri)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a3c5328e302972ace7df548c57ca8d2a9">ripng_outgoing_filter</a> (struct prefix_ipv6 *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structripng__interface.html">ripng_interface</a> *ri)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a9a70d765d5d3ff923a01c97ca3ef8903">ripng_route_process</a> (struct <a class="el" href="structrte.html">rte</a> *<a class="el" href="structrte.html">rte</a>, struct sockaddr_in6 *from, struct <a class="el" href="structripng__nexthop.html">ripng_nexthop</a> *<a class="el" href="structripng__nexthop.html">ripng_nexthop</a>, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a8c632303768357a09888dd8081c4c15e">ripng_redistribute_add</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int sub_type, struct prefix_ipv6 *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, unsigned int ifindex, struct in6_addr *<a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#afb915914d0dc2e8129f63bccd8dd53a3">ripng_redistribute_delete</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int sub_type, struct prefix_ipv6 *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, unsigned int ifindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a7b2f5bb07a049125bd2981a13054cb68">ripng_redistribute_withdraw</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aa3d02274a9a27986eb19cf0ff5990fc2">ripng_response_process</a> (struct <a class="el" href="structripng__packet.html">ripng_packet</a> *packet, int size, struct sockaddr_in6 *from, struct <a class="el" href="structinterface.html">interface</a> *ifp, int hoplimit)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aa7f2c5de4fc96fc9d062f99cf6e9edaa">ripng_request_process</a> (struct <a class="el" href="structripng__packet.html">ripng_packet</a> *packet, int size, struct sockaddr_in6 *from, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a11cd35910bd31d36ebde951870260d20">ripng_read</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a42c420e9fcc21cfbcc496b1ba2a97d0d">ripng_clear_changed_flag</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a26eee9390f4183a3f264a9942d447fdd">ripng_update</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ad767831f2f0da4f9ec266ce3f74ff0d1">ripng_triggered_interval</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a2df121efc44d079712a814a74e304fb9">ripng_write_rte</a> (int <a class="el" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct prefix_ipv6 *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in6_addr *<a class="el" href="structnexthop.html">nexthop</a>, u_int16_t tag, u_char <a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aca2c469cbf2a47693f9c22d6728cfb09">ripng_create</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a6dd58fbf570502d00ac2d39563e87147">ripng_request</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a83c25665bd55b0f2bf07371f94615db4">ripng_update_jitter</a> (int time)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aacbeda917e061e906b4ef44c5d6cafea">ripng_event</a> (enum <a class="el" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> <a class="el" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>, int sock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#abcd8fab79718aa8ff43a65cc2d149c4a">ripng_vty_out_uptime</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structripng__info.html">ripng_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a9c60bfdfb0b4f786ba4cd26136f66a46">ripng_route_subtype_print</a> (struct <a class="el" href="structripng__info.html">ripng_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aee752ad1db359ea3bf9abcf0dbbb4262">DEFUN</a> (show_ipv6_ripng, show_ipv6_ripng_cmd,&quot;show ipv6 <a class="el" href="structripng.html">ripng</a>&quot;, SHOW_STR IPV6_STR&quot;Show RIPng routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a58d7be40ace0dc8f4001f8ebcc55b254">DEFUN</a> (show_ipv6_ripng_status, show_ipv6_ripng_status_cmd,&quot;show ipv6 <a class="el" href="structripng.html">ripng</a> status&quot;, SHOW_STR IPV6_STR&quot;Show RIPng routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IPv6 routing protocol process parameters and statistics\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#aaa4a904f74861c953b485a6f22f9a591">DEFUN</a> (router_ripng, router_ripng_cmd,&quot;router <a class="el" href="structripng.html">ripng</a>&quot;,&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Make RIPng instance command\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#acc76c96c471d9d518f860fd29788a6e0">DEFUN</a> (no_router_ripng, no_router_ripng_cmd,&quot;no router <a class="el" href="structripng.html">ripng</a>&quot;, NO_STR&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Make RIPng instance command\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a8a55c478288002cf37ddf7af8fb4582b">DEFUN</a> (ripng_route, ripng_route_cmd,&quot;route IPV6ADDR&quot;,&quot;Static route setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Set static RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ac5c7d340d9abaf8723361242a8e6fc27">DEFUN</a> (no_ripng_route, no_ripng_route_cmd,&quot;no route IPV6ADDR&quot;, NO_STR&quot;Static route setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Delete static RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a3081e951ece6cf6b374bffdf8fc8cca8">DEFUN</a> (ripng_aggregate_address, ripng_aggregate_address_cmd,&quot;aggregate-address X:X::X:X/M&quot;,&quot;Set aggregate RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Aggregate <a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a12e9e591b8d7873277b33d39dee51da9">DEFUN</a> (no_ripng_aggregate_address, no_ripng_aggregate_address_cmd,&quot;no aggregate-address X:X::X:X/M&quot;, NO_STR&quot;Delete aggregate RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Aggregate <a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a8da408e3876a176866592bbb89d36db5">DEFUN</a> (ripng_default_metric, ripng_default_metric_cmd,&quot;default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;,&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a9a0816d6f71f242bd672aece3c4b1c82">DEFUN</a> (no_ripng_default_metric, no_ripng_default_metric_cmd,&quot;no default-<a class="el" href="structmetric.html">metric</a>&quot;, NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a04b1845b6cb2473ad2613f36eb38649e">ALIAS</a> (no_ripng_default_metric, no_ripng_default_metric_val_cmd,&quot;no default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;, NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ae81d796bf672e5725e683140c2d9f5a4">DEFUN</a> (no_ripng_timers, no_ripng_timers_cmd,&quot;no timers basic&quot;, NO_STR&quot;RIPng timers setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic timer\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ae7c11fcdc56604d2feb67d1e227a0c9e">ALIAS</a> (no_ripng_timers, no_ripng_timers_val_cmd,&quot;no timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;, NO_STR&quot;RIPng timers setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic timer\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing table update timer value <a class="el" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> second. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 30.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing information timeout timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 180.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Garbage collection timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 120.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a6eb4d3ff777cc990397334592ce74274">DEFUN</a> (ripng_default_information_originate, ripng_default_information_originate_cmd,&quot;default-information originate&quot;,&quot;Default route information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distribute default route\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ae05b3b82303fb8c695809231318d336b">DEFUN</a> (no_ripng_default_information_originate, no_ripng_default_information_originate_cmd,&quot;no default-information originate&quot;, NO_STR&quot;Default route information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distribute default route\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ada0e15a9a33c649f573ffe15da0de924">ripng_config_write</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a81fd48bf8b0fdf28545b040d40eadac9">ripng_distribute_update</a> (struct <a class="el" href="structdistribute.html">distribute</a> *dist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a732ca94fe365ac13ca404cb061e3e6dd">ripng_distribute_update_interface</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a78766f2ff1be0452d6f00745a54fe487">ripng_distribute_update_all</a> (struct <a class="el" href="structprefix__list.html">prefix_list</a> *notused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ab8941e3347ee2219a8d8abb3aa5516ad">ripng_distribute_update_all_wrapper</a> (struct <a class="el" href="structaccess__list.html">access_list</a> *notused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a3177bfec34722a80cd9594ceafafcd4f">ripng_clean</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a187ba42fd37feda221675baecc2fe06a">ripng_reset</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a1e87027590353c0d6ead4758d875cb19">ripng_if_rmap_update</a> (struct <a class="el" href="structif__rmap.html">if_rmap</a> *<a class="el" href="structif__rmap.html">if_rmap</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a7809da60dce4d4755e2a2a8faecd26da">ripng_if_rmap_update_interface</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#af8b4a863eeb63eba7ccd54bfb73f8073">ripng_routemap_update_redistribute</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a88d10316a3003a27cc0146a4dc983ee3">ripng_routemap_update</a> (const char *unused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a38787ccbf589b95fd566053c97c7ca7a">ripng_init</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structripng.html">ripng</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#a191aae347a77a6e39457dc17afc36773">ripng</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#ae075817360c6997bdd963ba531131901">ripngd_privs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structcmd__node.html">cmd_node</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripngd_8c.html#af581db0cb86743df9f243e66eafe45fa">cmd_ripng_node</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a4a41ebcbcfbdc4cf71ac89967ae81aa8"></a><!-- doxytag: member="ripngd.c::TIME_BUF" ref="a4a41ebcbcfbdc4cf71ac89967ae81aa8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TIME_BUF&#160;&#160;&#160;25</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="aa618c4d8c29ef4efe6f10c741fb1f47a"></a><!-- doxytag: member="ripngd.c::@73" ref="aa618c4d8c29ef4efe6f10c741fb1f47a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83"></a><!-- doxytag: member="ripng_all_route" ref="aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83" args="" -->ripng_all_route</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5"></a><!-- doxytag: member="ripng_changed_route" ref="aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5" args="" -->ripng_changed_route</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00050">50</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83">ripng_all_route</a>,
  <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5">ripng_changed_route</a>,
};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a04b1845b6cb2473ad2613f36eb38649e"></a><!-- doxytag: member="ripngd.c::ALIAS" ref="a04b1845b6cb2473ad2613f36eb38649e" args="(no_ripng_default_metric, no_ripng_default_metric_val_cmd,&quot;no default&#45;metric &lt;1&#45;16&gt;&quot;, NO_STR&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_ripng_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_default_metric_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02361">2361</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> update;
  <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  update = strtoul (argv[0], &amp;endptr, 10);
  <span class="keywordflow">if</span> (update == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;update timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> = update;

  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 0);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}

<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ripng_update_timer,
       no_ripng_update_timer_cmd,
       <span class="stringliteral">&quot;no update-timer SECOND&quot;</span>,
       <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
       <span class="stringliteral">&quot;Unset RIPng update timer in seconds\n&quot;</span>
       <span class="stringliteral">&quot;Seconds\n&quot;</span>)
{
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> = <a class="code" href="ripngd_8h.html#ae1b0d25ee668ca5dfc1f897688d376cb">RIPNG_UPDATE_TIMER_DEFAULT</a>;
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 0);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}

<span class="comment">/* RIPng timeout timer setup. */</span>
<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ripng_timeout_timer,
       ripng_timeout_timer_cmd,
       <span class="stringliteral">&quot;timeout-timer SECOND&quot;</span>,
       <span class="stringliteral">&quot;Set RIPng timeout timer in seconds\n&quot;</span>
       <span class="stringliteral">&quot;Seconds\n&quot;</span>)
{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timeout;
  <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  timeout = strtoul (argv[0], &amp;endptr, 10);
  <span class="keywordflow">if</span> (timeout == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;timeout timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> = timeout;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}

<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ripng_timeout_timer,
       no_ripng_timeout_timer_cmd,
       <span class="stringliteral">&quot;no timeout-timer SECOND&quot;</span>,
       <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
       <span class="stringliteral">&quot;Unset RIPng timeout timer in seconds\n&quot;</span>
       <span class="stringliteral">&quot;Seconds\n&quot;</span>)
{
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> = <a class="code" href="ripngd_8h.html#aba6555dd87cff9ea814be873c14ce972">RIPNG_TIMEOUT_TIMER_DEFAULT</a>;
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}

<span class="comment">/* RIPng garbage timer setup. */</span>
<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ripng_garbage_timer,
       ripng_garbage_timer_cmd,
       <span class="stringliteral">&quot;garbage-timer SECOND&quot;</span>,
       <span class="stringliteral">&quot;Set RIPng garbage timer in seconds\n&quot;</span>
       <span class="stringliteral">&quot;Seconds\n&quot;</span>)
{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> garbage;
  <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  garbage = strtoul (argv[0], &amp;endptr, 10);
  <span class="keywordflow">if</span> (garbage == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;garbage timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> = garbage;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}

<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ripng_garbage_timer,
       no_ripng_garbage_timer_cmd,
       <span class="stringliteral">&quot;no garbage-timer SECOND&quot;</span>,
       <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
       <span class="stringliteral">&quot;Unset RIPng garbage timer in seconds\n&quot;</span>
       <span class="stringliteral">&quot;Seconds\n&quot;</span>)
{
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> = <a class="code" href="ripngd_8h.html#af5189b18679728b2ffec9a1714950bdf">RIPNG_GARBAGE_TIMER_DEFAULT</a>;
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
<span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>

<a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ripng_timers,
       ripng_timers_cmd,
       <span class="stringliteral">&quot;timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;</span>,
       <span class="stringliteral">&quot;RIPng timers setup\n&quot;</span>
       <span class="stringliteral">&quot;Basic timer\n&quot;</span>
       <span class="stringliteral">&quot;Routing table update timer value in second. Default is 30.\n&quot;</span>
       <span class="stringliteral">&quot;Routing information timeout timer. Default is 180.\n&quot;</span>
       <span class="stringliteral">&quot;Garbage collection timer. Default is 120.\n&quot;</span>)
{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> update;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timeout;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> garbage;
  <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  update = strtoul (argv[0], &amp;endptr, 10);
  <span class="keywordflow">if</span> (update == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;update timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  
  timeout = strtoul (argv[1], &amp;endptr, 10);
  <span class="keywordflow">if</span> (timeout == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;timeout timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  
  garbage = strtoul (argv[2], &amp;endptr, 10);
  <span class="keywordflow">if</span> (garbage == ULONG_MAX || *endptr != <span class="charliteral">&#39;\0&#39;</span>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;garbage timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <span class="comment">/* Set each timer value. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> = update;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> = timeout;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> = garbage;

  <span class="comment">/* Reset update timer thread. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae7c11fcdc56604d2feb67d1e227a0c9e"></a><!-- doxytag: member="ripngd.c::ALIAS" ref="ae7c11fcdc56604d2feb67d1e227a0c9e" args="(no_ripng_timers, no_ripng_timers_val_cmd,&quot;no timers basic &lt;0&#45;65535&gt; &lt;0&#45;65535&gt; &lt;0&#45;65535&gt;&quot;, NO_STR&quot;RIPng timers setup\n&quot;&quot;Basic timer\n&quot;&quot;Routing table update timer value in second. Default is 30.\n&quot;&quot;Routing information timeout timer. Default is 180.\n&quot;&quot;Garbage collection timer. Default is 120.\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_ripng_timers&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_timers_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;RIPng timers setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic timer\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing table update timer value <a class="el" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> second. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 30.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing information timeout timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 180.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Garbage collection timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 120.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02535">2535</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! <a class="code" href="structripng.html">ripng</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Routing Protocol is \&quot;ripng\&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Sending updates every %ld seconds, next due in %d seconds%s&quot;</span>,
       <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a>, 0,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Timerout after %ld seconds, garbage correct %ld%s&quot;</span>,
       <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a>,
       <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Outgoing update filter list for all interfaces is not set&quot;</span>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Incoming update filter list for all interfaces is not set&quot;</span>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aee752ad1db359ea3bf9abcf0dbbb4262"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="aee752ad1db359ea3bf9abcf0dbbb4262" args="(show_ipv6_ripng, show_ipv6_ripng_cmd,&quot;show ipv6 ripng&quot;, SHOW_STR IPV6_STR&quot;Show RIPng routes\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">show_ipv6_ripng&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">show_ipv6_ripng_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;show ipv6 <a class="el" href="structripng.html">ripng</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHOW_STR IPV6_STR&quot;Show RIPng routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01988">1988</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structripng__aggregate.html">ripng_aggregate</a> *aggregate;
  <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">int</span> len;

  <span class="keywordflow">if</span> (! <a class="code" href="structripng.html">ripng</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <span class="comment">/* Header of display. */</span> 
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Codes: R - RIPng, C - connected, S - Static, O - OSPF, B - BGP%s&quot;</span>
       <span class="stringliteral">&quot;Sub-codes:%s&quot;</span>
       <span class="stringliteral">&quot;      (n) - normal, (s) - static, (d) - default, (r) - redistribute,%s&quot;</span>
       <span class="stringliteral">&quot;      (i) - interface, (a/S) - aggregated/Suppressed%s%s&quot;</span>
       <span class="stringliteral">&quot;   Network      Next Hop                      Via     Metric Tag Time%s&quot;</span>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  
  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    {
      <span class="keywordflow">if</span> ((aggregate = rp-&gt;<a class="code" href="structroute__node.html#ae9cc08e4c96aa25870fc6e23708228c3">aggregate</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      p = (<span class="keyword">struct </span>prefix_ipv6 *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

#ifdef <a class="code" href="ripng__nexthop_8c.html#ad72dbcf6d0153db1b8d8a58001feed83">DEBUG</a>
      len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;R(a) %d/%d %s/%d &quot;</span>,
             aggregate-&gt;<a class="code" href="structripng__aggregate.html#a29ebb0e110a9d3d79ba4ffd5014ed945">count</a>, aggregate-&gt;<a class="code" href="structripng__aggregate.html#abd263ff776074a69e08893c9721ab27d">suppress</a>,
             inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>      len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;R(a) %s/%d &quot;</span>, 
             inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
<span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, 18, <span class="stringliteral">&quot; &quot;</span>);

      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, 28, <span class="stringliteral">&quot; &quot;</span>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self      %2d  %3d%s&quot;</span>, aggregate-&gt;<a class="code" href="structripng__aggregate.html#a5f665fbc1f62ce317ebbe87a15f1f78a">metric</a>,
           aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7564ac741b9ec32a68a21b63b6142c92">tag</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

      <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      p = (<span class="keyword">struct </span>prefix_ipv6 *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

#ifdef <a class="code" href="ripng__nexthop_8c.html#ad72dbcf6d0153db1b8d8a58001feed83">DEBUG</a>
      len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%c(%s) 0/%d %s/%d &quot;</span>,
             <a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">zebra_route_char</a>(rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>),
             <a class="code" href="ripngd_8c.html#a9c60bfdfb0b4f786ba4cd26136f66a46">ripng_route_subtype_print</a>(rinfo),
             rinfo-&gt;<a class="code" href="structripng__info.html#ab96be2bd11a5979b955ec035db0a8ba5">suppress</a>,
             inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>      len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%c(%s) %s/%d &quot;</span>,
             <a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">zebra_route_char</a>(rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>),
             <a class="code" href="ripngd_8c.html#a9c60bfdfb0b4f786ba4cd26136f66a46">ripng_route_subtype_print</a>(rinfo),
             inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
<span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, 18, <span class="stringliteral">&quot; &quot;</span>);
      len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, inet6_ntoa (rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>));

      len = 28 - len;
      <span class="keywordflow">if</span> (len &gt; 0)
        len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);

      <span class="comment">/* from */</span>
      <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>) &amp;&amp; 
        (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>))
      {
        len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>));
      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> == <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
      {
        len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;kill&quot;</span>);
      } <span class="keywordflow">else</span>
        len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self&quot;</span>);

      len = 9 - len;
      <span class="keywordflow">if</span> (len &gt; 0)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);

      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; %2d  %3d  &quot;</span>,
           rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a782b26176fb3c32210c0745ae2f5fdb8">tag</a>);

      <span class="comment">/* time */</span>
      <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>) &amp;&amp; 
        (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>))
      {
        <span class="comment">/* RTE from remote RIP routers */</span>
        <a class="code" href="ripngd_8c.html#abcd8fab79718aa8ff43a65cc2d149c4a">ripng_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> == <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
      {
        <span class="comment">/* poisonous reversed routes (gc) */</span>
        <a class="code" href="ripngd_8c.html#abcd8fab79718aa8ff43a65cc2d149c4a">ripng_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
      }

      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
    }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a58d7be40ace0dc8f4001f8ebcc55b254"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a58d7be40ace0dc8f4001f8ebcc55b254" args="(show_ipv6_ripng_status, show_ipv6_ripng_status_cmd,&quot;show ipv6 ripng status&quot;, SHOW_STR IPV6_STR&quot;Show RIPng routes\n&quot;&quot;IPv6 routing protocol process parameters and statistics\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">show_ipv6_ripng_status&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">show_ipv6_ripng_status_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;show ipv6 <a class="el" href="structripng.html">ripng</a> status&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHOW_STR IPV6_STR&quot;Show RIPng routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IPv6 routing protocol process parameters and statistics\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02097">2097</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  <span class="keywordflow">if</span> (! <a class="code" href="structripng.html">ripng</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Routing Protocol is \&quot;RIPng\&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Sending updates every %ld seconds with +/-50%%,&quot;</span>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; next due in %lu seconds%s&quot;</span>,
           <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a>),
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Timeout after %ld seconds,&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; garbage collect after %ld seconds%s&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Filtering status show. */</span>
  <a class="code" href="distribute_8h.html#a42498c1a381dd986ae3cc5bb7a6a03f0">config_show_distribute</a> (<a class="code" href="structvty.html">vty</a>);

  <span class="comment">/* Default metric information. */</span>
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default redistribution metric is %d%s&quot;</span>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Redistribute information. */</span>
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Redistributing:&quot;</span>);
  <a class="code" href="ripngd_8h.html#a827869c433933423095ebfb21087c786">ripng_redistribute_write</a> (<a class="code" href="structvty.html">vty</a>, 0);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default version control: send version %d,&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; receive version %d %s&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Interface        Send  Recv%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
      
      ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#abc79a24929887116c556ad36abfe55a9">enable_network</a> || ri-&gt;<a class="code" href="structripng__interface.html#a0fb1c458677496744feb110449852d0f">enable_interface</a>)
    {

      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    %-17s%-3d   %-3d%s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
    }

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing for Networks:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="ripng__interface_8c.html#aa5b564f815e55f51fbd19624d4d11747">ripng_network_write</a> (<a class="code" href="structvty.html">vty</a>, 0);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing Information Sources:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Gateway          BadPackets BadRoutes  Distance Last Update%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="ripng__peer_8c.html#a9e69b216cd232654b9a39b7fd28ee392">ripng_peer_display</a> (<a class="code" href="structvty.html">vty</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;  
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaa4a904f74861c953b485a6f22f9a591"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="aaa4a904f74861c953b485a6f22f9a591" args="(router_ripng, router_ripng_cmd,&quot;router ripng&quot;,&quot;Enable a routing process\n&quot;&quot;Make RIPng instance command\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">router_ripng&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">router_ripng_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;router <a class="el" href="structripng.html">ripng</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Make RIPng instance command\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02165">2165</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;

  <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9ac72abb8e0411b52a9d91d1a11aeaff">node</a> = <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>;

  <span class="keywordflow">if</span> (!<a class="code" href="structripng.html">ripng</a>)
    {
      ret = <a class="code" href="ripngd_8c.html#aca2c469cbf2a47693f9c22d6728cfb09">ripng_create</a> ();

      <span class="comment">/* Notice to user we couldn&#39;t create RIPng. */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t create RIPng&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
    }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acc76c96c471d9d518f860fd29788a6e0"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="acc76c96c471d9d518f860fd29788a6e0" args="(no_router_ripng, no_router_ripng_cmd,&quot;no router ripng&quot;, NO_STR&quot;Enable a routing process\n&quot;&quot;Make RIPng instance command\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_router_ripng&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_router_ripng_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no router <a class="el" href="structripng.html">ripng</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Make RIPng instance command\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02190">2190</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span>(<a class="code" href="structripng.html">ripng</a>)
    <a class="code" href="ripngd_8c.html#a3177bfec34722a80cd9594ceafafcd4f">ripng_clean</a>();
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a55c478288002cf37ddf7af8fb4582b"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a8a55c478288002cf37ddf7af8fb4582b" args="(ripng_route, ripng_route_cmd,&quot;route IPV6ADDR&quot;,&quot;Static route setup\n&quot;&quot;Set static RIPng route announcement\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">ripng_route&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ripng_route_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;route IPV6ADDR&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Static route setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Set static RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02202">2202</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  ret = str2prefix_ipv6 (argv[0], (<span class="keyword">struct</span> prefix_ipv6 *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret &lt;= 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  apply_mask_ipv6 (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;There is already same static route.%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = (<span class="keywordtype">void</span> *)1;

  <a class="code" href="ripngd_8c.html#a8c632303768357a09888dd8081c4c15e">ripng_redistribute_add</a> (<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>, <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5c7d340d9abaf8723361242a8e6fc27"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="ac5c7d340d9abaf8723361242a8e6fc27" args="(no_ripng_route, no_ripng_route_cmd,&quot;no route IPV6ADDR&quot;, NO_STR&quot;Static route setup\n&quot;&quot;Delete static RIPng route announcement\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_ripng_route&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_route_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no route IPV6ADDR&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Static route setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Delete static RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02234">2234</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  ret = str2prefix_ipv6 (argv[0], (<span class="keyword">struct</span> prefix_ipv6 *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret &lt;= 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  apply_mask_ipv6 (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (! rp)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Can&#39;t find static route.%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <a class="code" href="ripngd_8c.html#afb915914d0dc2e8129f63bccd8dd53a3">ripng_redistribute_delete</a> (<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>, <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3081e951ece6cf6b374bffdf8fc8cca8"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a3081e951ece6cf6b374bffdf8fc8cca8" args="(ripng_aggregate_address, ripng_aggregate_address_cmd,&quot;aggregate&#45;address X:X::X:X/M&quot;,&quot;Set aggregate RIPng route announcement\n&quot;&quot;Aggregate network\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">ripng_aggregate_address&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ripng_aggregate_address_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;aggregate-address X:X::X:X/M&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Set aggregate RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Aggregate <a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02269">2269</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">                           :<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X::X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M<span class="stringliteral">&quot;,</span>
<span class="stringliteral">       &quot;</span>Set <a class="code" href="structroute__node.html#ae9cc08e4c96aa25870fc6e23708228c3">aggregate</a> RIPng route announcement\n<span class="stringliteral">&quot;</span>
<span class="stringliteral">       &quot;</span>Aggregate network\n<span class="stringliteral">&quot;)</span>
<span class="stringliteral">{</span>
<span class="stringliteral">  int ret;</span>
<span class="stringliteral">  struct prefix p;</span>
<span class="stringliteral">  struct route_node *node;</span>
<span class="stringliteral"></span>
<span class="stringliteral">  ret = str2prefix_ipv6 (argv[0], (struct prefix_ipv6 *)&amp;p);</span>
<span class="stringliteral">  if (ret &lt;= 0)</span>
<span class="stringliteral">    {</span>
<span class="stringliteral">      vty_out (vty, &quot;</span>Malformed address%<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a><span class="stringliteral">&quot;, VTY_NEWLINE);</span>
<span class="stringliteral">      return CMD_WARNING;</span>
<span class="stringliteral">    }</span>
<span class="stringliteral"></span>
<span class="stringliteral">  /* Check aggregate alredy exist or not. */</span>
<span class="stringliteral">  node = route_node_get (ripng-&gt;aggregate, &amp;p);</span>
<span class="stringliteral">  if (node-&gt;info)</span>
<span class="stringliteral">    {</span>
<span class="stringliteral">      vty_out (vty, &quot;</span>There <a class="code" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> already same <a class="code" href="structroute__node.html#ae9cc08e4c96aa25870fc6e23708228c3">aggregate</a> route.%<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a><span class="stringliteral">&quot;, VTY_NEWLINE);</span>
<span class="stringliteral">      route_unlock_node (node);</span>
<span class="stringliteral">      return CMD_WARNING;</span>
<span class="stringliteral">    }</span>
<span class="stringliteral">  node-&gt;info = (void *)1;</span>
<span class="stringliteral"></span>
<span class="stringliteral">  ripng_aggregate_add (&amp;p);</span>
<span class="stringliteral"></span>
<span class="stringliteral">  return CMD_SUCCESS;</span>
<span class="stringliteral">}</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a12e9e591b8d7873277b33d39dee51da9"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a12e9e591b8d7873277b33d39dee51da9" args="(no_ripng_aggregate_address, no_ripng_aggregate_address_cmd,&quot;no aggregate&#45;address X:X::X:X/M&quot;, NO_STR&quot;Delete aggregate RIPng route announcement\n&quot;&quot;Aggregate network&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_ripng_aggregate_address&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_aggregate_address_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no aggregate-address X:X::X:X/M&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Delete aggregate RIPng route announcement\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Aggregate <a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02301">2301</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">                              :<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X::X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M<span class="stringliteral">&quot;,</span>
<span class="stringliteral">       NO_STR</span>
<span class="stringliteral">       &quot;</span>Delete <a class="code" href="structroute__node.html#ae9cc08e4c96aa25870fc6e23708228c3">aggregate</a> RIPng route announcement\n<span class="stringliteral">&quot;</span>
<span class="stringliteral">       &quot;</span>Aggregate <a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a><span class="stringliteral">&quot;)</span>
<span class="stringliteral">{</span>
<span class="stringliteral">  int ret;</span>
<span class="stringliteral">  struct prefix p;</span>
<span class="stringliteral">  struct route_node *rn;</span>
<span class="stringliteral"></span>
<span class="stringliteral">  ret = str2prefix_ipv6 (argv[0], (struct prefix_ipv6 *) &amp;p);</span>
<span class="stringliteral">  if (ret &lt;= 0)</span>
<span class="stringliteral">    {</span>
<span class="stringliteral">      vty_out (vty, &quot;</span>Malformed address%<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a><span class="stringliteral">&quot;, VTY_NEWLINE);</span>
<span class="stringliteral">      return CMD_WARNING;</span>
<span class="stringliteral">    }</span>
<span class="stringliteral"></span>
<span class="stringliteral">  rn = route_node_lookup (ripng-&gt;aggregate, &amp;p);</span>
<span class="stringliteral">  if (! rn)</span>
<span class="stringliteral">    {</span>
<span class="stringliteral">      vty_out (vty, &quot;</span>Can<span class="stringliteral">&#39;t find aggregate route.%s&quot;, VTY_NEWLINE);</span>
<span class="stringliteral">      return CMD_WARNING;</span>
<span class="stringliteral">    }</span>
<span class="stringliteral">  route_unlock_node (rn);</span>
<span class="stringliteral">  rn-&gt;info = NULL;</span>
<span class="stringliteral">  route_unlock_node (rn);</span>
<span class="stringliteral"></span>
<span class="stringliteral">  ripng_aggregate_delete (&amp;p);</span>
<span class="stringliteral"></span>
<span class="stringliteral">  return CMD_SUCCESS;</span>
<span class="stringliteral">}</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a8da408e3876a176866592bbb89d36db5"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a8da408e3876a176866592bbb89d36db5" args="(ripng_default_metric, ripng_default_metric_cmd,&quot;default&#45;metric &lt;1&#45;16&gt;&quot;,&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">ripng_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ripng_default_metric_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02334">2334</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>)
    {
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a> = atoi (argv[0]);
    }
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9a0816d6f71f242bd672aece3c4b1c82"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a9a0816d6f71f242bd672aece3c4b1c82" args="(no_ripng_default_metric, no_ripng_default_metric_cmd,&quot;no default&#45;metric&quot;, NO_STR&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_ripng_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_default_metric_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no default-<a class="el" href="structmetric.html">metric</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02347">2347</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>)
    {
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a> = <a class="code" href="ripngd_8h.html#a6b9a756a2011a2b42c7ce6203b84ced2">RIPNG_DEFAULT_METRIC_DEFAULT</a>;
    }
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae81d796bf672e5725e683140c2d9f5a4"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="ae81d796bf672e5725e683140c2d9f5a4" args="(no_ripng_timers, no_ripng_timers_cmd,&quot;no timers basic&quot;, NO_STR&quot;RIPng timers setup\n&quot;&quot;Basic timer\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_ripng_timers&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_timers_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no timers basic&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;RIPng timers setup\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic timer\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02517">2517</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set each timer value to the default. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> = <a class="code" href="ripngd_8h.html#ae1b0d25ee668ca5dfc1f897688d376cb">RIPNG_UPDATE_TIMER_DEFAULT</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> = <a class="code" href="ripngd_8h.html#aba6555dd87cff9ea814be873c14ce972">RIPNG_TIMEOUT_TIMER_DEFAULT</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> = <a class="code" href="ripngd_8h.html#af5189b18679728b2ffec9a1714950bdf">RIPNG_GARBAGE_TIMER_DEFAULT</a>;

  <span class="comment">/* Reset update timer thread. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6eb4d3ff777cc990397334592ce74274"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="a6eb4d3ff777cc990397334592ce74274" args="(ripng_default_information_originate, ripng_default_information_originate_cmd,&quot;default&#45;information originate&quot;,&quot;Default route information\n&quot;&quot;Distribute default route\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">ripng_default_information_originate&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ripng_default_information_originate_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;default-information originate&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Default route information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distribute default route\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02572">2572</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="structripng.html">ripng</a> -&gt;default_information) {
    <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a7cb751921b0b074beb3ba0e668cfebd7">default_information</a> = 1;

    str2prefix_ipv6 (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
    <a class="code" href="ripngd_8c.html#a8c632303768357a09888dd8081c4c15e">ripng_redistribute_add</a> (<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>, <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae05b3b82303fb8c695809231318d336b"></a><!-- doxytag: member="ripngd.c::DEFUN" ref="ae05b3b82303fb8c695809231318d336b" args="(no_ripng_default_information_originate, no_ripng_default_information_originate_cmd,&quot;no default&#45;information originate&quot;, NO_STR&quot;Default route information\n&quot;&quot;Distribute default route\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_ripng_default_information_originate&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_ripng_default_information_originate_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no default-information originate&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Default route information\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distribute default route\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02590">2590</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a7cb751921b0b074beb3ba0e668cfebd7">default_information</a>) {
    <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a7cb751921b0b074beb3ba0e668cfebd7">default_information</a> = 0;

    str2prefix_ipv6 (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
    <a class="code" href="ripngd_8c.html#afb915914d0dc2e8129f63bccd8dd53a3">ripng_redistribute_delete</a> (<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>, <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0);
  }

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3177bfec34722a80cd9594ceafafcd4f"></a><!-- doxytag: member="ripngd.c::ripng_clean" ref="a3177bfec34722a80cd9594ceafafcd4f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_clean </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02786">2786</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;

  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>) {
    <span class="comment">/* Clear RIPng routes */</span>
    <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp)) {
      <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) {
        <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>) &amp;&amp;
            (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>))
          <a class="code" href="ripng__zebra_8c.html#a8c975a52ab3f2a4e4593d75232185382">ripng_zebra_ipv6_delete</a> ((<span class="keyword">struct</span> prefix_ipv6 *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>,
                                   &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>);

        <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);
        <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>);

        rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

        <a class="code" href="ripngd_8c.html#a9dac36daa3fa248437e2cfab0289331c">ripng_info_free</a>(rinfo);
      }
    }

    <span class="comment">/* Cancel the RIPng timers */</span>
    <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a>);
    <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68b42a2e038716d0c3d226aa04fc056d">t_triggered_update</a>);
    <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>);

    <span class="comment">/* Cancel the read thread */</span>
    <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a>) {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a>);
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

    <span class="comment">/* Close the RIPng socket */</span>
    <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a> &gt;= 0) {
      close(<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a>);
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a> = -1;
    }

    <span class="comment">/* Static RIPng route configuration. */</span>
    <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
      <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) {
        rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
    }

    <span class="comment">/* RIPng aggregated prefixes */</span>
    <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#af4311264fe0c5e48b65a37c4ddd4b1f0">aggregate</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
      <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) {
          rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
    }

    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++)
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[i].<a class="code" href="structripng.html#ac5d479513619aac458e3ae04c0814632">name</a>)
        free (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[i].<a class="code" href="structripng.html#ac5d479513619aac458e3ae04c0814632">name</a>);

    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>);
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a>);
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#af4311264fe0c5e48b65a37c4ddd4b1f0">aggregate</a>);

    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad97034187d4ff905469ad8d671c1b8e2">MTYPE_RIPNG</a>, <a class="code" href="structripng.html">ripng</a>);
    <a class="code" href="structripng.html">ripng</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  } <span class="comment">/* if (ripng) */</span>

  <a class="code" href="ripng__interface_8c.html#a27e40a30e5cf221a7726e9af62076e78">ripng_clean_network</a>();
  <a class="code" href="ripng__interface_8c.html#a124b437dd727fda6114ddf95455dd37a">ripng_passive_interface_clean</a> ();
  <a class="code" href="ripng__offset_8c.html#af4e400ed21dfc4914247e768206236a1">ripng_offset_clean</a> ();
  <a class="code" href="ripng__interface_8c.html#a475ddfe9ad26ca0bc8df827237675495">ripng_interface_clean</a> ();
  <a class="code" href="ripng__zebra_8c.html#ad6b24bf9a6c9e7aab0645f0c122c76cb">ripng_redistribute_clean</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42c420e9fcc21cfbcc496b1ba2a97d0d"></a><!-- doxytag: member="ripngd.c::ripng_clear_changed_flag" ref="a42c420e9fcc21cfbcc496b1ba2a97d0d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_clear_changed_flag </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01417">1417</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;

  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> &amp; <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>)
    rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> &amp;= ~<a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ada0e15a9a33c649f573ffe15da0de924"></a><!-- doxytag: member="ripngd.c::ripng_config_write" ref="ada0e15a9a33c649f573ffe15da0de924" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_config_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02611">2611</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="ripng__interface_8c.html#aa5b564f815e55f51fbd19624d4d11747">ripng_network_write</a> (<span class="keyword">struct</span> vty *, <span class="keywordtype">int</span>);
  <span class="keywordtype">void</span> <a class="code" href="ripngd_8h.html#a827869c433933423095ebfb21087c786">ripng_redistribute_write</a> (<span class="keyword">struct</span> vty *, <span class="keywordtype">int</span>);
  <span class="keywordtype">int</span> write = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>)
    {

      <span class="comment">/* RIPng router. */</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;router ripng%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a7cb751921b0b074beb3ba0e668cfebd7">default_information</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-information originate%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <a class="code" href="ripng__interface_8c.html#aa5b564f815e55f51fbd19624d4d11747">ripng_network_write</a> (vty, 1);

      <span class="comment">/* RIPng default metric configuration */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a> != <a class="code" href="ripngd_8h.html#a6b9a756a2011a2b42c7ce6203b84ced2">RIPNG_DEFAULT_METRIC_DEFAULT</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-metric %d%s&quot;</span>,
         <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <a class="code" href="ripngd_8h.html#a827869c433933423095ebfb21087c786">ripng_redistribute_write</a> (vty, 1);

      <span class="comment">/* RIP offset-list configuration. */</span>
      <a class="code" href="ripng__offset_8c.html#afb46ca7695f8af9804eed24f0187c12d">config_write_ripng_offset_list</a> (vty);
      
      <span class="comment">/* RIPng aggregate routes. */</span>
      <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#af4311264fe0c5e48b65a37c4ddd4b1f0">aggregate</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; aggregate-address %s/%d%s&quot;</span>, 
           inet6_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.prefix6),
           rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, 

           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* RIPng static routes. */</span>
      <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route %s/%d%s&quot;</span>, inet6_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.prefix6),
           rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* RIPng timers configuration. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> != <a class="code" href="ripngd_8h.html#ae1b0d25ee668ca5dfc1f897688d376cb">RIPNG_UPDATE_TIMER_DEFAULT</a> ||
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> != <a class="code" href="ripngd_8h.html#aba6555dd87cff9ea814be873c14ce972">RIPNG_TIMEOUT_TIMER_DEFAULT</a> ||
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> != <a class="code" href="ripngd_8h.html#af5189b18679728b2ffec9a1714950bdf">RIPNG_GARBAGE_TIMER_DEFAULT</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timers basic %ld %ld %ld%s&quot;</span>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a>,
           <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> != <a class="code" href="ripngd_8h.html#ae1b0d25ee668ca5dfc1f897688d376cb">RIPNG_UPDATE_TIMER_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; update-timer %d%s&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> != <a class="code" href="ripngd_8h.html#aba6555dd87cff9ea814be873c14ce972">RIPNG_TIMEOUT_TIMER_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timeout-timer %d%s&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> != <a class="code" href="ripngd_8h.html#af5189b18679728b2ffec9a1714950bdf">RIPNG_GARBAGE_TIMER_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; garbage-timer %d%s&quot;</span>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>

      write += <a class="code" href="distribute_8c.html#ae7ad634081da77c96e38824bff4a566a">config_write_distribute</a> (vty);

      write += <a class="code" href="if__rmap_8h.html#a3499179f8d183d49527984f876e8b6fc">config_write_if_rmap</a> (vty);

      write++;
    }
  <span class="keywordflow">return</span> write;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aca2c469cbf2a47693f9c22d6728cfb09"></a><!-- doxytag: member="ripngd.c::ripng_create" ref="aca2c469cbf2a47693f9c22d6728cfb09" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_create </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01820">1820</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* ripng should be NULL. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structripng.html">ripng</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* Allocaste RIPng instance. */</span>
  <a class="code" href="structripng.html">ripng</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad97034187d4ff905469ad8d671c1b8e2">MTYPE_RIPNG</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng.html">ripng</a>));

  <span class="comment">/* Default version and timer values. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a> = <a class="code" href="ripngd_8h.html#a281d5633e29e16b00b52e0391ae6cd6c">RIPNG_V1</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> = <a class="code" href="ripngd_8h.html#ae1b0d25ee668ca5dfc1f897688d376cb">RIPNG_UPDATE_TIMER_DEFAULT</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a> = <a class="code" href="ripngd_8h.html#aba6555dd87cff9ea814be873c14ce972">RIPNG_TIMEOUT_TIMER_DEFAULT</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a> = <a class="code" href="ripngd_8h.html#af5189b18679728b2ffec9a1714950bdf">RIPNG_GARBAGE_TIMER_DEFAULT</a>;
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a> = <a class="code" href="ripngd_8h.html#a6b9a756a2011a2b42c7ce6203b84ced2">RIPNG_DEFAULT_METRIC_DEFAULT</a>;
  
  <span class="comment">/* Make buffer.  */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a2d6cadaef274f6f247afbf55d67cf684">ibuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ripngd_8h.html#ab899e2e565c4cfce969f490a569488d9">RIPNG_MAX_PACKET_SIZE</a> * 5);
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a7a37c00ce5964003f19897768bcd61df">obuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ripngd_8h.html#ab899e2e565c4cfce969f490a569488d9">RIPNG_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Initialize RIPng routig table. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad5d9e06ed4b673e3788475b0fe26483d">route</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#af4311264fe0c5e48b65a37c4ddd4b1f0">aggregate</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
 
  <span class="comment">/* Make socket. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a> = <a class="code" href="ripngd_8c.html#ab4b62648d39fa134266aa8c8c69a977c">ripng_make_socket</a> ();
  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a>;

  <span class="comment">/* Threads. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a4aa69fc6b41b9cb0152442359f136f60">RIPNG_READ</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a>);
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 1);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a81fd48bf8b0fdf28545b040d40eadac9"></a><!-- doxytag: member="ripngd.c::ripng_distribute_update" ref="a81fd48bf8b0fdf28545b040d40eadac9" args="(struct distribute *dist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_distribute_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structdistribute.html">distribute</a> *&#160;</td>
          <td class="paramname"><em>dist</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02696">2696</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="keywordflow">if</span> (! dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>)
    <span class="keywordflow">return</span>;

  ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>);
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      <span class="keywordflow">if</span> (alist)
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = alist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      <span class="keywordflow">if</span> (alist)
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = alist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      <span class="keywordflow">if</span> (plist)
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = plist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      <span class="keywordflow">if</span> (plist)
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = plist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a78766f2ff1be0452d6f00745a54fe487"></a><!-- doxytag: member="ripngd.c::ripng_distribute_update_all" ref="a78766f2ff1be0452d6f00745a54fe487" args="(struct prefix_list *notused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_distribute_update_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__list.html">prefix_list</a> *&#160;</td>
          <td class="paramname"><em>notused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02769">2769</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    <a class="code" href="ripngd_8c.html#a732ca94fe365ac13ca404cb061e3e6dd">ripng_distribute_update_interface</a> (ifp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8941e3347ee2219a8d8abb3aa5516ad"></a><!-- doxytag: member="ripngd.c::ripng_distribute_update_all_wrapper" ref="ab8941e3347ee2219a8d8abb3aa5516ad" args="(struct access_list *notused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_distribute_update_all_wrapper </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structaccess__list.html">access_list</a> *&#160;</td>
          <td class="paramname"><em>notused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02779">2779</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripngd_8c.html#a78766f2ff1be0452d6f00745a54fe487">ripng_distribute_update_all</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a732ca94fe365ac13ca404cb061e3e6dd"></a><!-- doxytag: member="ripngd.c::ripng_distribute_update_interface" ref="a732ca94fe365ac13ca404cb061e3e6dd" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_distribute_update_interface </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02758">2758</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;

  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
  <span class="keywordflow">if</span> (dist)
    <a class="code" href="ripngd_8c.html#a81fd48bf8b0fdf28545b040d40eadac9">ripng_distribute_update</a> (dist);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aacbeda917e061e906b4ef44c5d6cafea"></a><!-- doxytag: member="ripngd.c::ripng_event" ref="aacbeda917e061e906b4ef44c5d6cafea" args="(enum ripng_event event, int sock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> </td>
          <td>(</td>
          <td class="paramtype">enum <a class="el" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a>&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01892">1892</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> jitter = 0;

  <span class="keywordflow">switch</span> (<a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a4aa69fc6b41b9cb0152442359f136f60">RIPNG_READ</a>:
      <span class="keywordflow">if</span> (!<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a>)
    <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a> = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripngd_8c.html#a11cd35910bd31d36ebde951870260d20">ripng_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>:
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a>);
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <span class="comment">/* Update timer jitter. */</span>
      jitter = <a class="code" href="ripngd_8c.html#a83c25665bd55b0f2bf07371f94615db4">ripng_update_jitter</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a>);

      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripngd_8c.html#a26eee9390f4183a3f264a9942d447fdd">ripng_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
              sock ? 2 : <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a3bf29c57452baca3c5f5fd1d259c6cd2">update_time</a> + jitter);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>:
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>)
    <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a442a4c7c0bfa3a1d781e3f8d227b78c7">trigger</a> = 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68b42a2e038716d0c3d226aa04fc056d">t_triggered_update</a>)
    <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68b42a2e038716d0c3d226aa04fc056d">t_triggered_update</a> = 
      <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripngd_8c.html#aade04913dcd50154f3a16346c673f01e">ripng_triggered_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad9748647bbab59298c91b150352917a8"></a><!-- doxytag: member="ripngd.c::ripng_garbage_collect" ref="ad9748647bbab59298c91b150352917a8" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_garbage_collect </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00404">404</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Off timeout timer. */</span>
  <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);
  
  <span class="comment">/* Get route_node pointer. */</span>
  rp = rinfo-&gt;<a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a>;

  <span class="comment">/* Unlock route_node. */</span>
  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

  <span class="comment">/* Free RIPng routing information. */</span>
  <a class="code" href="ripngd_8c.html#a9dac36daa3fa248437e2cfab0289331c">ripng_info_free</a> (rinfo);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1e87027590353c0d6ead4758d875cb19"></a><!-- doxytag: member="ripngd.c::ripng_if_rmap_update" ref="a1e87027590353c0d6ead4758d875cb19" args="(struct if_rmap *if_rmap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_if_rmap_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structif__rmap.html">if_rmap</a> *&#160;</td>
          <td class="paramname"><em>if_rmap</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02882">2882</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *<a class="code" href="structrmap.html">rmap</a>;

  ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a50262f0070b0fdf5635807d44d74d888">ifname</a>);
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>])
    {
      rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>]);
      <span class="keywordflow">if</span> (rmap)
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = rmap;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>])
    {
      rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>]);
      <span class="keywordflow">if</span> (rmap)
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = rmap;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7809da60dce4d4755e2a2a8faecd26da"></a><!-- doxytag: member="ripngd.c::ripng_if_rmap_update_interface" ref="a7809da60dce4d4755e2a2a8faecd26da" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_if_rmap_update_interface </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02918">2918</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structif__rmap.html">if_rmap</a> *<a class="code" href="structif__rmap.html">if_rmap</a>;

  if_rmap = <a class="code" href="if__rmap_8c.html#ac6203bfe7b017bdcf8c4cb23c9eb7e6d">if_rmap_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
  <span class="keywordflow">if</span> (if_rmap)
    <a class="code" href="ripngd_8c.html#a1e87027590353c0d6ead4758d875cb19">ripng_if_rmap_update</a> (if_rmap);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad73db0842e290ed6f113c6ac70e53ed6"></a><!-- doxytag: member="ripngd.c::ripng_incoming_filter" ref="ad73db0842e290ed6f113c6ac70e53ed6" args="(struct prefix_ipv6 *p, struct ripng_interface *ri)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_incoming_filter </td>
          <td>(</td>
          <td class="paramtype">struct prefix_ipv6 *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structripng__interface.html">ripng_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00477">477</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="comment">/* Input distribute-list filtering. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>], 
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
               inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>], 
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
               inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* All interface filter check. */</span>
  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">if</span> (dist)
    {
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
        
      <span class="keywordflow">if</span> (alist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
                   inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      
      <span class="keywordflow">if</span> (plist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
                   inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9dac36daa3fa248437e2cfab0289331c"></a><!-- doxytag: member="ripngd.c::ripng_info_free" ref="a9dac36daa3fa248437e2cfab0289331c" args="(struct ripng_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_info_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00094">94</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab7b02c8a0baefc86992111a888626c9b">MTYPE_RIPNG_ROUTE</a>, rinfo);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b7fb6a0d15b39889e109557bf3d23ea"></a><!-- doxytag: member="ripngd.c::ripng_info_new" ref="a0b7fb6a0d15b39889e109557bf3d23ea" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structripng__info.html">ripng_info</a>* ripng_info_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00084">84</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab7b02c8a0baefc86992111a888626c9b">MTYPE_RIPNG_ROUTE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng__info.html">ripng_info</a>));
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38787ccbf589b95fd566053c97c7ca7a"></a><!-- doxytag: member="ripngd.c::ripng_init" ref="a38787ccbf589b95fd566053c97c7ca7a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02957">2957</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Randomize. */</span>
  srand (time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));

  <span class="comment">/* Install RIPNG_NODE. */</span>
  <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;<a class="code" href="ripngd_8c.html#af581db0cb86743df9f243e66eafe45fa">cmd_ripng_node</a>, <a class="code" href="ripngd_8c.html#ada0e15a9a33c649f573ffe15da0de924">ripng_config_write</a>);

  <span class="comment">/* Install ripng commands. */</span>
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_ripng_status_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_ripng_status_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;router_ripng_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_router_ripng_cmd);

  <a class="code" href="command_8h.html#affb2f399c88b8a225b2719bbe928e4de">install_default</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_route_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_route_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_aggregate_address_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_aggregate_address_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_default_metric_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_default_metric_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_default_metric_val_cmd);

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_timers_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_timers_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_timers_val_cmd);
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_update_timer_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_update_timer_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_timeout_timer_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_timeout_timer_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_garbage_timer_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_garbage_timer_cmd);
<span class="preprocessor">#endif </span><span class="comment">/* 0 */</span>

  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;ripng_default_information_originate_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>, &amp;no_ripng_default_information_originate_cmd);

  <a class="code" href="ripng__interface_8c.html#ab3b2b8d88f463ea65c8708b8524d0ca3">ripng_if_init</a> ();
  <a class="code" href="ripng__debug_8c.html#aab324f9542057b297b016c02fa251eb4">ripng_debug_init</a> ();

  <span class="comment">/* Access list install. */</span>
  <a class="code" href="filter_8c.html#a7794dbb70ed7bbd7a248853d572fa38c">access_list_init</a> ();
  <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="ripngd_8c.html#ab8941e3347ee2219a8d8abb3aa5516ad">ripng_distribute_update_all_wrapper</a>);
  <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="ripngd_8c.html#ab8941e3347ee2219a8d8abb3aa5516ad">ripng_distribute_update_all_wrapper</a>);

  <span class="comment">/* Prefix list initialize.*/</span>
  <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ();
  <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="ripngd_8c.html#a78766f2ff1be0452d6f00745a54fe487">ripng_distribute_update_all</a>);
  <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="ripngd_8c.html#a78766f2ff1be0452d6f00745a54fe487">ripng_distribute_update_all</a>);

  <span class="comment">/* Distribute list install. */</span>
  <a class="code" href="distribute_8c.html#a6abacd35439f8cdfeec69c5da166d95c">distribute_list_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>);
  <a class="code" href="distribute_8c.html#a22701b77da78b46771dc146fca555dae">distribute_list_add_hook</a> (<a class="code" href="ripngd_8c.html#a81fd48bf8b0fdf28545b040d40eadac9">ripng_distribute_update</a>);
  <a class="code" href="distribute_8c.html#a392e0d894cc65ce8667b8133ced5a0bb">distribute_list_delete_hook</a> (<a class="code" href="ripngd_8c.html#a81fd48bf8b0fdf28545b040d40eadac9">ripng_distribute_update</a>);

  <span class="comment">/* Route-map for interface. */</span>
  <a class="code" href="ripng__routemap_8c.html#a23c33335770d5d0caf738d3cd983add1">ripng_route_map_init</a> ();
  <a class="code" href="ripng__offset_8c.html#ac7f3eb556962aad48afb732d1031c258">ripng_offset_init</a> ();

  <a class="code" href="routemap_8c.html#afd64a010c9f8f9cf35788b065f540eea">route_map_add_hook</a> (<a class="code" href="ripngd_8c.html#a88d10316a3003a27cc0146a4dc983ee3">ripng_routemap_update</a>);
  <a class="code" href="routemap_8c.html#a60b69b789fa511ded8504c5b20fb63d4">route_map_delete_hook</a> (<a class="code" href="ripngd_8c.html#a88d10316a3003a27cc0146a4dc983ee3">ripng_routemap_update</a>);

  <a class="code" href="if__rmap_8c.html#acb2b07615aac7f6416f0fa6f4717a4ec">if_rmap_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>);
  <a class="code" href="if__rmap_8c.html#a58763bcdfc9073a6e505c1597acc5304">if_rmap_hook_add</a> (<a class="code" href="ripngd_8c.html#a1e87027590353c0d6ead4758d875cb19">ripng_if_rmap_update</a>);
  <a class="code" href="if__rmap_8c.html#acc9bf1191edf4196d213b658034938e6">if_rmap_hook_delete</a> (<a class="code" href="ripngd_8c.html#a1e87027590353c0d6ead4758d875cb19">ripng_if_rmap_update</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab31cc16d7dd4df1e71bb29c546d88cfb"></a><!-- doxytag: member="ripngd.c::ripng_lladdr_check" ref="ab31cc16d7dd4df1e71bb29c546d88cfb" args="(struct interface *ifp, struct in6_addr *addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_lladdr_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in6_addr *&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00384">384</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, connected))
    {
      p = connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp;
          IN6_IS_ADDR_LINKLOCAL (&amp;p-&gt;u.prefix6) &amp;&amp;
          <a class="code" href="zebra_8h.html#abb82efab585ad36d8ce0d873bee5941b">IN6_ARE_ADDR_EQUAL</a> (&amp;p-&gt;u.prefix6, addr))
        <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab4b62648d39fa134266aa8c8c69a977c"></a><!-- doxytag: member="ripngd.c::ripng_make_socket" ref="ab4b62648d39fa134266aa8c8c69a977c" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_make_socket </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00101">101</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
  <span class="keyword">struct </span>sockaddr_in6 ripaddr;

  sock = socket (AF_INET6, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t make ripng socket&quot;</span>);
      <span class="keywordflow">return</span> sock;
    }

  ret = <a class="code" href="sockopt_8c.html#abdfd124bd2b3b787be44b3e78e99bc37">setsockopt_so_recvbuf</a> (sock, 8096);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = setsockopt_ipv6_pktinfo (sock, 1);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = setsockopt_ipv6_multicast_hops (sock, 255);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = setsockopt_ipv6_multicast_loop (sock, 0);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = setsockopt_ipv6_hoplimit (sock, 1);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

  memset (&amp;ripaddr, 0, <span class="keyword">sizeof</span> (ripaddr));
  ripaddr.sin6_family = AF_INET6;
<span class="preprocessor">#ifdef SIN6_LEN</span>
<span class="preprocessor"></span>  ripaddr.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
  ripaddr.sin6_port = htons (<a class="code" href="ripngd_8h.html#a8a29218cbba163cd33175e89084ad25c">RIPNG_PORT_DEFAULT</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ripng__interface_8c.html#ae075817360c6997bdd963ba531131901">ripngd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;ripng_make_socket: could not raise privs&quot;</span>);
  
  ret = bind (sock, (<span class="keyword">struct</span> sockaddr *) &amp;ripaddr, <span class="keyword">sizeof</span> (ripaddr));
  <span class="keywordflow">if</span> (ret &lt; 0)
  {
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t bind ripng socket: %s.&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
    <span class="keywordflow">if</span> (<a class="code" href="ripng__interface_8c.html#ae075817360c6997bdd963ba531131901">ripngd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;ripng_make_socket: could not lower privs&quot;</span>);
    <span class="keywordflow">return</span> ret;
  }
  <span class="keywordflow">if</span> (<a class="code" href="ripng__interface_8c.html#ae075817360c6997bdd963ba531131901">ripngd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;ripng_make_socket: could not lower privs&quot;</span>);
  <span class="keywordflow">return</span> sock;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc76996f440d2320cf5fff688543a6a5"></a><!-- doxytag: member="ripngd.c::ripng_nexthop_rte" ref="adc76996f440d2320cf5fff688543a6a5" args="(struct rte *rte, struct sockaddr_in6 *from, struct ripng_nexthop *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_nexthop_rte </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrte.html">rte</a> *&#160;</td>
          <td class="paramname"><em>rte</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structripng__nexthop.html">ripng_nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00325">325</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#aa154275bc7ebcfcb3a335788ad4dfe09">INET6_BUFSIZ</a>];

  <span class="comment">/* Logging before checking RTE. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a9a1da75ed0fbbe22c02f7d726b1f900c">IS_RIPNG_DEBUG_RECV</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng nexthop RTE address %s tag %d prefixlen %d&quot;</span>,
           inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>);

  <span class="comment">/* RFC2080 2.1.1 Next Hop: </span>
<span class="comment">   The route tag and prefix length in the next hop RTE must be</span>
<span class="comment">   set to zero on sending and ignored on receiption.  */</span>
  <span class="keywordflow">if</span> (ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>) != 0)
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng nexthop RTE with non zero tag value %d from %s&quot;</span>,
           ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), inet6_ntoa (from-&gt;sin6_addr));

  <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a> != 0)
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng nexthop RTE with non zero prefixlen value %d from %s&quot;</span>,
           rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>, inet6_ntoa (from-&gt;sin6_addr));

  <span class="comment">/* Specifying a value of 0:0:0:0:0:0:0:0 in the prefix field of a</span>
<span class="comment">   next hop RTE indicates that the next hop address should be the</span>
<span class="comment">   originator of the RIPng advertisement.  An address specified as a</span>
<span class="comment">   next hop must be a link-local address.  */</span>
  <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>))
    {
      nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> = RIPNG_NEXTHOP_UNSPEC;
      memset (&amp;nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>, 0, sizeof (<span class="keyword">struct</span> in6_addr));
      <span class="keywordflow">return</span>;
    }

  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>))
    {
      nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> = RIPNG_NEXTHOP_ADDRESS;
      <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>, &amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* The purpose of the next hop RTE is to eliminate packets being</span>
<span class="comment">   routed through extra hops in the system.  It is particularly useful</span>
<span class="comment">   when RIPng is not being run on all of the routers on a network.</span>
<span class="comment">   Note that next hop RTE is &quot;advisory&quot;.  That is, if the provided</span>
<span class="comment">   information is ignored, a possibly sub-optimal, but absolutely</span>
<span class="comment">   valid, route may be taken.  If the received next hop address is not</span>
<span class="comment">   a link-local address, it should be treated as 0:0:0:0:0:0:0:0.  */</span>
  <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng nexthop RTE with non link-local address %s from %s&quot;</span>,
         inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>),
         <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;from-&gt;sin6_addr, buf, <a class="code" href="prefix_8h.html#aa154275bc7ebcfcb3a335788ad4dfe09">INET6_BUFSIZ</a>));

  nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> = RIPNG_NEXTHOP_UNSPEC;
  memset (&amp;nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>, 0, sizeof (<span class="keyword">struct</span> in6_addr));

  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c5328e302972ace7df548c57ca8d2a9"></a><!-- doxytag: member="ripngd.c::ripng_outgoing_filter" ref="a3c5328e302972ace7df548c57ca8d2a9" args="(struct prefix_ipv6 *p, struct ripng_interface *ri)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_outgoing_filter </td>
          <td>(</td>
          <td class="paramtype">struct prefix_ipv6 *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structripng__interface.html">ripng_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00548">548</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#aef30bff6aaa0c37223dacfdb50103c8f">list</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>],
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by distribute out&quot;</span>,
               inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#a9d8e484158229437cc77cdc890f13284">prefix</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>],
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by prefix-list out&quot;</span>,
               inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* All interface filter check. */</span>
  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">if</span> (dist)
    {
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
        
      <span class="keywordflow">if</span> (alist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute out&quot;</span>,
                   inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      
      <span class="keywordflow">if</span> (plist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list out&quot;</span>,
                   inet6_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f72267312fe0a97d08b67ba961d6658"></a><!-- doxytag: member="ripngd.c::ripng_output_process" ref="a3f72267312fe0a97d08b67ba961d6658" args="(struct interface *, struct sockaddr_in6 *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_output_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>route_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01593">1593</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structripng__aggregate.html">ripng_aggregate</a> *aggregate;
  <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> * ripng_rte_list;

  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>) {
    <span class="keywordflow">if</span> (to)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng update routes to neighbor %s&quot;</span>,
                 inet6_ntoa(to-&gt;sin6_addr));
    <span class="keywordflow">else</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng update routes on interface %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
  }

  <span class="comment">/* Get RIPng interface. */</span>
  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
 
  ripng_rte_list = <a class="code" href="ripng__nexthop_8c.html#a2bbaf1fdfe59c0ed137ef6c1a1f54ea4">ripng_rte_new</a>();
 
  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    {
      <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#ab96be2bd11a5979b955ec035db0a8ba5">suppress</a> == 0)
    {
      <span class="comment">/* If no route-map are applied, the RTE will be these following</span>
<span class="comment">       * informations.</span>
<span class="comment">       */</span>
      p = (<span class="keyword">struct </span>prefix_ipv6 *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> = rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a53b9c80709add8b88d8edc0a67a2129b">tag_out</a>    = rinfo-&gt;<a class="code" href="structripng__info.html#a782b26176fb3c32210c0745ae2f5fdb8">tag</a>;
      memset(&amp;rinfo-&gt;<a class="code" href="structripng__info.html#ab972f1dace5311aecfba2f2a8b6f82d9">nexthop_out</a>, 0, <span class="keyword">sizeof</span>(rinfo-&gt;<a class="code" href="structripng__info.html#ab972f1dace5311aecfba2f2a8b6f82d9">nexthop_out</a>));
      <span class="comment">/* In order to avoid some local loops,</span>
<span class="comment">       * if the RIPng route has a nexthop via this interface, keep the nexthop,</span>
<span class="comment">       * otherwise set it to 0. The nexthop should not be propagated</span>
<span class="comment">       * beyond the local broadcast/multicast area in order</span>
<span class="comment">       * to avoid an IGP multi-level recursive look-up.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
        rinfo-&gt;<a class="code" href="structripng__info.html#ab972f1dace5311aecfba2f2a8b6f82d9">nexthop_out</a> = rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>;

      <span class="comment">/* Apply output filters. */</span>
      ret = <a class="code" href="ripngd_8c.html#a3c5328e302972ace7df548c57ca8d2a9">ripng_outgoing_filter</a> (p, ri);
      <span class="keywordflow">if</span> (ret &lt; 0)
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Changed route only output. */</span>
      <span class="keywordflow">if</span> (route_type == <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5">ripng_changed_route</a> &amp;&amp;
          (! (rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> &amp; <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>)))
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Split horizon. */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a498ba3bde959c9c42dfcdff82d2de819">split_horizon</a> == <a class="code" href="ripngd_8h.html#afbda8c496aa1c117b3d787e59a537311a355c2e8568692c3915e3cb95c45b4cfd">RIPNG_SPLIT_HORIZON</a>)
      {
        <span class="comment">/* We perform split horizon for RIPng routes. */</span>
        <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>) &amp;&amp;
        rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
          <span class="keywordflow">continue</span>;
      }

      <span class="comment">/* Preparation for route-map. */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#a95c18301e852be3021d63d9f91750763">metric_set</a> = 0;
      <span class="comment">/* nexthop_out,</span>
<span class="comment">       * metric_out</span>
<span class="comment">       * and tag_out are already initialized.</span>
<span class="comment">       */</span>

      <span class="comment">/* Interface route-map */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>])
        {
          <span class="keywordtype">int</span> ret;

          ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>], 
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370a3aa81322d89db5d5821c23c0fe7881bd">RMAP_RIPNG</a>, 
                     rinfo);

          <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng %s/%d is filtered by route-map out&quot;</span>,
                   inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
          <span class="keywordflow">continue</span>;
        }

        }

      <span class="comment">/* Redistribute route-map. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>].<a class="code" href="structripng.html#ac5d479513619aac458e3ae04c0814632">name</a>)
        {
          <span class="keywordtype">int</span> ret;

          ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>].<a class="code" href="structripng.html#a98512a1190c2b92964d03d0ef0935766">map</a>,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370a3aa81322d89db5d5821c23c0fe7881bd">RMAP_RIPNG</a>,
                     rinfo);

          <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng %s/%d is filtered by route-map&quot;</span>,
                   inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
          <span class="keywordflow">continue</span>;
        }
        }

      <span class="comment">/* When the route-map does not set metric. */</span>
      <span class="keywordflow">if</span> (! rinfo-&gt;<a class="code" href="structripng__info.html#a95c18301e852be3021d63d9f91750763">metric_set</a>)
        {
          <span class="comment">/* If the redistribute metric is set. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>].<a class="code" href="structripng.html#afe23934beb3ecee523a32f3aa13ec45a">metric_config</a>
          &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        {
          rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> = <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a>].<a class="code" href="structripng.html#a88741fa8a6afd1aef3936449d7e4709f">metric</a>;
        }
          <span class="keywordflow">else</span>
        {
          <span class="comment">/* If the route is not connected or localy generated</span>
<span class="comment">             one, use default-metric value */</span>
          <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> != <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>
              &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>
              &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
            rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> = <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ae47d271724aadc1dfde66e4c06829748">default_metric</a>;
        }
        }

          <span class="comment">/* Apply offset-list */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
            <a class="code" href="ripng__offset_8c.html#a3b23f4092924e98e89d9398c5467b779">ripng_offset_list_apply_out</a> (p, ifp, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a>);

          <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> &gt; <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
            rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;

      <span class="comment">/* Perform split-horizon with poisoned reverse </span>
<span class="comment">       * for RIPng routes.</span>
<span class="comment">       **/</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a498ba3bde959c9c42dfcdff82d2de819">split_horizon</a> == <a class="code" href="ripngd_8h.html#afbda8c496aa1c117b3d787e59a537311abdfff72e7fe4fc8df6847986bc773486">RIPNG_SPLIT_HORIZON_POISONED_REVERSE</a>) {
        <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>) &amp;&amp;
             rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
             rinfo-&gt;<a class="code" href="structripng__info.html#a9b63b1936f6d6d977dae20ca446f6744">metric_out</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;
      }

      <span class="comment">/* Add RTE to the list */</span>
      <a class="code" href="ripng__nexthop_8c.html#a95e799318ab5a7a4ee80a44e1ab32276">ripng_rte_add</a>(ripng_rte_list, p, rinfo, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
    }

      <span class="comment">/* Process the aggregated RTE entry */</span>
      <span class="keywordflow">if</span> ((aggregate = rp-&gt;<a class="code" href="structroute__node.html#ae9cc08e4c96aa25870fc6e23708228c3">aggregate</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; 
      aggregate-&gt;<a class="code" href="structripng__aggregate.html#a29ebb0e110a9d3d79ba4ffd5014ed945">count</a> &gt; 0 &amp;&amp; 
      aggregate-&gt;<a class="code" href="structripng__aggregate.html#abd263ff776074a69e08893c9721ab27d">suppress</a> == 0)
    {
      <span class="comment">/* If no route-map are applied, the RTE will be these following</span>
<span class="comment">       * informations.</span>
<span class="comment">       */</span>
      p = (<span class="keyword">struct </span>prefix_ipv6 *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
      aggregate-&gt;<a class="code" href="structripng__aggregate.html#a24e17b1dd1693dbe981e5a6c63a5145e">metric_set</a> = 0;
      aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a> = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a5f665fbc1f62ce317ebbe87a15f1f78a">metric</a>;
      aggregate-&gt;<a class="code" href="structripng__aggregate.html#a8e1b46892c6bad6c46b719b9bf0dad9f">tag_out</a>    = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7564ac741b9ec32a68a21b63b6142c92">tag</a>;
      memset(&amp;aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7d57cc6adb8f10499f38dee067aec928">nexthop_out</a>, 0, <span class="keyword">sizeof</span>(aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7d57cc6adb8f10499f38dee067aec928">nexthop_out</a>));

      <span class="comment">/* Apply output filters.*/</span>
      ret = <a class="code" href="ripngd_8c.html#a3c5328e302972ace7df548c57ca8d2a9">ripng_outgoing_filter</a> (p, ri);
      <span class="keywordflow">if</span> (ret &lt; 0)
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Interface route-map */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>])
        {
          <span class="keywordtype">int</span> ret;
          <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> newinfo;

          <span class="comment">/* let&#39;s cast the aggregate structure to ripng_info */</span>
          memset (&amp;newinfo, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng__info.html">ripng_info</a>));
          <span class="comment">/* the nexthop is :: */</span>
          newinfo.metric = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a5f665fbc1f62ce317ebbe87a15f1f78a">metric</a>;
          newinfo.metric_out = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a>;
          newinfo.tag = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7564ac741b9ec32a68a21b63b6142c92">tag</a>;
          newinfo.tag_out = aggregate-&gt;<a class="code" href="structripng__aggregate.html#a8e1b46892c6bad6c46b719b9bf0dad9f">tag_out</a>;

          ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a8de1142dbc70369804d0b971bf2c4543">RIPNG_FILTER_OUT</a>], 
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370a3aa81322d89db5d5821c23c0fe7881bd">RMAP_RIPNG</a>, 
                     &amp;newinfo);

          <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng %s/%d is filtered by route-map out&quot;</span>,
                   inet6_ntoa (p-&gt;prefix), p-&gt;prefixlen);
          <span class="keywordflow">continue</span>;
        }

          aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a> = newinfo.metric_out;
          aggregate-&gt;<a class="code" href="structripng__aggregate.html#a8e1b46892c6bad6c46b719b9bf0dad9f">tag_out</a> = newinfo.tag_out;
          <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL(&amp;newinfo.nexthop_out))
        aggregate-&gt;<a class="code" href="structripng__aggregate.html#a7d57cc6adb8f10499f38dee067aec928">nexthop_out</a> = newinfo.nexthop_out;
        }

      <span class="comment">/* There is no redistribute routemap for the aggregated RTE */</span>

      <span class="comment">/* Changed route only output. */</span>
      <span class="comment">/* XXX, vincent, in order to increase time convergence,</span>
<span class="comment">       * it should be announced if a child has changed.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (route_type == <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5">ripng_changed_route</a>)
        <span class="keywordflow">continue</span>;

      <span class="comment">/* Apply offset-list */</span>
      <span class="keywordflow">if</span> (aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        <a class="code" href="ripng__offset_8c.html#a3b23f4092924e98e89d9398c5467b779">ripng_offset_list_apply_out</a> (p, ifp, &amp;aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a>);

      <span class="keywordflow">if</span> (aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a> &gt; <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        aggregate-&gt;<a class="code" href="structripng__aggregate.html#a414dce6b6361399c8e2088b086ec59dc">metric_out</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;

      <span class="comment">/* Add RTE to the list */</span>
      <a class="code" href="ripng__nexthop_8c.html#a95e799318ab5a7a4ee80a44e1ab32276">ripng_rte_add</a>(ripng_rte_list, p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, aggregate);
    }

    }

  <span class="comment">/* Flush the list */</span>
  <a class="code" href="ripng__nexthop_8c.html#ae916e82287005ce5a64bc1ebf39fa810">ripng_rte_send</a>(ripng_rte_list, ifp, to);
  <a class="code" href="ripng__nexthop_8c.html#a4cb0a5161e0b2e9295556de274d609c9">ripng_rte_free</a>(ripng_rte_list);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0d7f74786282b1676f0508b2f0c636c1"></a><!-- doxytag: member="ripngd.c::ripng_packet_dump" ref="a0d7f74786282b1676f0508b2f0c636c1" args="(struct ripng_packet *packet, int size, const char *sndrcv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_packet_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__packet.html">ripng_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sndrcv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00291">291</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">const</span> <span class="keywordtype">char</span> *command_str;

  <span class="comment">/* Set command string. */</span>
  <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a> == <a class="code" href="ripngd_8h.html#a6b3f586e670da71a3d8fed9c82c03e65">RIPNG_REQUEST</a>)
    command_str = <span class="stringliteral">&quot;request&quot;</span>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a> == <a class="code" href="ripngd_8h.html#aa5ec5496ce7fc62a57b04272d2ec5756">RIPNG_RESPONSE</a>)
    command_str = <span class="stringliteral">&quot;response&quot;</span>;
  <span class="keywordflow">else</span>
    command_str = <span class="stringliteral">&quot;unknown&quot;</span>;

  <span class="comment">/* Dump packet header. */</span>
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s %s version %d packet size %d&quot;</span>, 
         sndrcv, command_str, packet-&gt;<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a>, size);

  <span class="comment">/* Dump each routing table entry. */</span>
  rte = packet-&gt;<a class="code" href="structripng__packet.html#a87cc82cb5cfac4a509180fa9efa7b341">rte</a>;

  <span class="keywordflow">for</span> (lim = (caddr_t) packet + size; (caddr_t) rte &lt; lim; rte++)
    {
      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> == <a class="code" href="ripngd_8h.html#abf008d76fd54560aa51e1016ceee8c77">RIPNG_METRIC_NEXTHOP</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  nexthop %s/%d&quot;</span>, inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  %s/%d metric %d tag %d&quot;</span>, 
           inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>, 
           rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>, ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a11cd35910bd31d36ebde951870260d20"></a><!-- doxytag: member="ripngd.c::ripng_read" ref="a11cd35910bd31d36ebde951870260d20" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01327">1327</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keywordtype">int</span> sock;
  <span class="keyword">struct </span>sockaddr_in6 from;
  <span class="keyword">struct </span><a class="code" href="structripng__packet.html">ripng_packet</a> *packet;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">int</span> hoplimit = -1;

  <span class="comment">/* Check ripng is active and alive. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structripng.html">ripng</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a> &gt;= 0);

  <span class="comment">/* Fetch thread data and set read pointer to empty for event</span>
<span class="comment">     managing.  `sock&#39; sould be same as ripng-&gt;sock. */</span>
  sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a29b362daa2745d646257cfe029a114e9">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Add myself to the next event. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a4aa69fc6b41b9cb0152442359f136f60">RIPNG_READ</a>, sock);

  <span class="comment">/* Read RIPng packet. */</span>
  len = <a class="code" href="ripngd_8c.html#a4c5e47f96c44a80502ce3e206c315829">ripng_recv_packet</a> (sock, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a2d6cadaef274f6f247afbf55d67cf684">ibuf</a>), 
               <a class="code" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a2d6cadaef274f6f247afbf55d67cf684">ibuf</a>), &amp;from, &amp;ifindex,
               &amp;hoplimit);
  <span class="keywordflow">if</span> (len &lt; 0) 
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng recvfrom failed: %s.&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> len;
    }

  <span class="comment">/* Check RTE boundary.  RTE size (Packet length - RIPng header size</span>
<span class="comment">     (4)) must be multiple size of one RTE size (20). */</span>
  <span class="keywordflow">if</span> (((len - 4) % 20) != 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng invalid packet size %d from %s&quot;</span>, len,
         inet6_ntoa (from.sin6_addr));
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> 0;
    }

  packet = (<span class="keyword">struct </span><a class="code" href="structripng__packet.html">ripng_packet</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a2d6cadaef274f6f247afbf55d67cf684">ibuf</a>);
  ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifindex);

  <span class="comment">/* RIPng packet received. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng packet received from %s port %d on %s&quot;</span>,
           inet6_ntoa (from.sin6_addr), ntohs (from.sin6_port), 
           ifp ? ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> : <span class="stringliteral">&quot;unknown&quot;</span>);

  <span class="comment">/* Logging before packet checking. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a9a1da75ed0fbbe22c02f7d726b1f900c">IS_RIPNG_DEBUG_RECV</a>)
    <a class="code" href="ripngd_8c.html#a0d7f74786282b1676f0508b2f0c636c1">ripng_packet_dump</a> (packet, len, <span class="stringliteral">&quot;RECV&quot;</span>);

  <span class="comment">/* Packet comes from unknown interface. */</span>
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet comes from unknown interface %d&quot;</span>, ifindex);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Packet version mismatch checking. */</span>
  <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a> != <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>) 
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet version %d doesn&#39;t fit to my version %d&quot;</span>, 
         packet-&gt;<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a5876107e16a08687d8d9428a128c657b">version</a>);
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Process RIPng packet. */</span>
  <span class="keywordflow">switch</span> (packet-&gt;<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a6b3f586e670da71a3d8fed9c82c03e65">RIPNG_REQUEST</a>:
      <a class="code" href="ripngd_8c.html#aa7f2c5de4fc96fc9d062f99cf6e9edaa">ripng_request_process</a> (packet, len, &amp;from, ifp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#aa5ec5496ce7fc62a57b04272d2ec5756">RIPNG_RESPONSE</a>:
      <a class="code" href="ripngd_8c.html#aa3d02274a9a27986eb19cf0ff5990fc2">ripng_response_process</a> (packet, len, &amp;from, ifp, hoplimit);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid RIPng command %d&quot;</span>, packet-&gt;<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a>);
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">break</span>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4c5e47f96c44a80502ce3e206c315829"></a><!-- doxytag: member="ripngd.c::ripng_recv_packet" ref="a4c5e47f96c44a80502ce3e206c315829" args="(int sock, u_char *buf, int bufsize, struct sockaddr_in6 *from, unsigned int *ifindex, int *hoplimit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_recv_packet </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bufsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>hoplimit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00226">226</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a>;
  <span class="keyword">struct </span>iovec iov;
  <span class="keyword">struct </span>cmsghdr  *cmsgptr;
  <span class="keyword">struct </span>in6_addr dst;

  <span class="comment">/* Ancillary data.  This store cmsghdr and in6_pktinfo.  But at this</span>
<span class="comment">     point I can&#39;t determine size of cmsghdr */</span>
  <span class="keywordtype">char</span> adata[1024];

  <span class="comment">/* Fill in message and iovec. */</span>
  <a class="code" href="structmsg.html">msg</a>.msg_name = (<span class="keywordtype">void</span> *) from;
  <a class="code" href="structmsg.html">msg</a>.msg_namelen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
  <a class="code" href="structmsg.html">msg</a>.msg_iov = &amp;iov;
  <a class="code" href="structmsg.html">msg</a>.msg_iovlen = 1;
  <a class="code" href="structmsg.html">msg</a>.msg_control = (<span class="keywordtype">void</span> *) adata;
  <a class="code" href="structmsg.html">msg</a>.msg_controllen = <span class="keyword">sizeof</span> adata;
  iov.iov_base = buf;
  iov.iov_len = bufsize;

  <span class="comment">/* If recvmsg fail return minus value. */</span>
  ret = recvmsg (sock, &amp;<a class="code" href="structmsg.html">msg</a>, 0);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

  <span class="keywordflow">for</span> (cmsgptr = <a class="code" href="zebra_8h.html#af3b20d5606eb7dbfc120601cd3a889be">ZCMSG_FIRSTHDR</a>(&amp;<a class="code" href="structmsg.html">msg</a>); cmsgptr != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
       cmsgptr = CMSG_NXTHDR(&amp;<a class="code" href="structmsg.html">msg</a>, cmsgptr)) 
    {
      <span class="comment">/* I want interface index which this packet comes from. */</span>
      <span class="keywordflow">if</span> (cmsgptr-&gt;cmsg_level == IPPROTO_IPV6 &amp;&amp;
      cmsgptr-&gt;cmsg_type == IPV6_PKTINFO) 
    {
      <span class="keyword">struct </span>in6_pktinfo *ptr;
      
      ptr = (<span class="keyword">struct </span>in6_pktinfo *) CMSG_DATA (cmsgptr);
      *ifindex = ptr-&gt;ipi6_ifindex;
      dst = ptr-&gt;ipi6_addr;

      <span class="keywordflow">if</span> (*ifindex == 0)
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Interface index returned by IPV6_PKTINFO is zero&quot;</span>);
        }

      <span class="comment">/* Incoming packet&#39;s multicast hop limit. */</span>
      <span class="keywordflow">if</span> (cmsgptr-&gt;cmsg_level == IPPROTO_IPV6 &amp;&amp;
      cmsgptr-&gt;cmsg_type == IPV6_HOPLIMIT)
    {
      <span class="keywordtype">int</span> *phoplimit = (<span class="keywordtype">int</span> *) CMSG_DATA (cmsgptr);
      *hoplimit = *phoplimit;
    }
    }

  <span class="comment">/* Hoplimit check shold be done when destination address is</span>
<span class="comment">     multicast address. */</span>
  <span class="keywordflow">if</span> (! IN6_IS_ADDR_MULTICAST (&amp;dst))
    *hoplimit = -1;

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8c632303768357a09888dd8081c4c15e"></a><!-- doxytag: member="ripngd.c::ripng_redistribute_add" ref="a8c632303768357a09888dd8081c4c15e" args="(int type, int sub_type, struct prefix_ipv6 *p, unsigned int ifindex, struct in6_addr *nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_redistribute_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sub_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct prefix_ipv6 *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in6_addr *&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00915">915</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;

  <span class="comment">/* Redistribute route  */</span>
  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix))
    <span class="keywordflow">return</span>;
  <span class="keywordflow">if</span> (IN6_IS_ADDR_LOOPBACK (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix))
    <span class="keywordflow">return</span>;
<span class="preprocessor">#if defined (MUSICA) || defined (LINUX)</span>
<span class="preprocessor"></span>  <span class="comment">/* XXX As long as the RIPng redistribution is applied to all the connected</span>
<span class="comment">   *     routes, one needs to filter the ::/96 prefixes.</span>
<span class="comment">   *     However it could be a wanted case, it will be removed soon.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ((IN6_IS_ADDR_V4COMPAT(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix)) ||
      (IN6_IS_ADDR_UNSPECIFIED (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix) &amp;&amp; (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen == 96)))
    <span class="keywordflow">return</span>;
<span class="preprocessor">#endif </span><span class="comment">/* MUSICA or LINUX */</span>

  rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="keywordflow">if</span> (rinfo)
    {
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>
          &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a7b8a856e1865628b6e85977878f5b309">RIPNG_ROUTE_INTERFACE</a>
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>) {
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
       <span class="keywordflow">return</span>;
      }

      <span class="comment">/* Manually configured RIPng route check.</span>
<span class="comment">       * They have the precedence on all the other entries.</span>
<span class="comment">       **/</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>
          &amp;&amp; ((rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>) ||
              (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>)) ) {
        <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> != <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a> || ((<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> != <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>) &amp;&amp;
                                          (<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> != <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>))) {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
      <span class="keywordflow">return</span>;
    }
      }
      
      <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);
      <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>);

      <span class="comment">/* Tells the other daemons about the deletion of</span>
<span class="comment">       * this RIPng route</span>
<span class="comment">       **/</span>
      <span class="keywordflow">if</span> (<a class="code" href="ripngd_8c.html#a6b1690fe3bd2672b6812fa0922f848b8">ripng_route_rte</a> (rinfo))
    <a class="code" href="ripng__zebra_8c.html#a8c975a52ab3f2a4e4593d75232185382">ripng_zebra_ipv6_delete</a> ((<span class="keyword">struct</span> prefix_ipv6 *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>,
                   rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>);

      rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="ripngd_8c.html#a9dac36daa3fa248437e2cfab0289331c">ripng_info_free</a> (rinfo);

      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

    }

  rinfo = <a class="code" href="ripngd_8c.html#a0b7fb6a0d15b39889e109557bf3d23ea">ripng_info_new</a> ();

  rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> = <a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a>;
  rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> = <a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>;
  rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = 1;
  rinfo-&gt;<a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a> = <a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html">nexthop</a> &amp;&amp; IN6_IS_ADDR_LINKLOCAL(<a class="code" href="structnexthop.html">nexthop</a>))
    rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a> = *<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>;
  
  rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;
  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;

  <span class="comment">/* Aggregate check. */</span>
  <a class="code" href="ripng__route_8c.html#a690c7b208ebc224d71cd51cef136e157">ripng_aggregate_increment</a> (rp, rinfo);

  rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>) {
    <span class="keywordflow">if</span> (!<a class="code" href="structnexthop.html">nexthop</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d on the interface %s&quot;</span>,
                 inet6_ntoa(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>));
    <span class="keywordflow">else</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d with nexthop %s on the interface %s&quot;</span>,
                 inet6_ntoa(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen, inet6_ntoa(*<a class="code" href="structnexthop.html">nexthop</a>),
                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>));
  }

  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb915914d0dc2e8129f63bccd8dd53a3"></a><!-- doxytag: member="ripngd.c::ripng_redistribute_delete" ref="afb915914d0dc2e8129f63bccd8dd53a3" args="(int type, int sub_type, struct prefix_ipv6 *p, unsigned int ifindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_redistribute_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sub_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct prefix_ipv6 *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01013">1013</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;

  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix))
    <span class="keywordflow">return</span>;
  <span class="keywordflow">if</span> (IN6_IS_ADDR_LOOPBACK (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix))
    <span class="keywordflow">return</span>;
<span class="preprocessor">#if defined (MUSICA) || defined (LINUX)</span>
<span class="preprocessor"></span>  <span class="comment">/* XXX As long as the RIPng redistribution is applied to all the connected</span>
<span class="comment">   *     routes, one needs to filter the ::/96 prefixes.</span>
<span class="comment">   *     However it could be a wanted case, it will be removed soon.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ((IN6_IS_ADDR_V4COMPAT(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix)) ||
      (IN6_IS_ADDR_UNSPECIFIED (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix) &amp;&amp; (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen == 96)))
    <span class="keywordflow">return</span>;
<span class="preprocessor">#endif </span><span class="comment">/* MUSICA or LINUX */</span>

  rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (rp)
    {
      rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (rinfo != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> 
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> 
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> == <a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>)
    {
      <span class="comment">/* Perform poisoned reverse. */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;
      <a class="code" href="ripngd_8h.html#a76723e13884b239d90fedad4a6945d90">RIPNG_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>, 
            <a class="code" href="ripngd_8c.html#ad9748647bbab59298c91b150352917a8">ripng_garbage_collect</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>);
      <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);

      <span class="comment">/* Aggregate count decrement. */</span>
      <a class="code" href="ripng__route_8c.html#aba0f321f8fbbe5003489ede81c5fa0fd">ripng_aggregate_decrement</a> (rp, rinfo);

      rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;
      
          <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s with an infinity metric [delete]&quot;</span>,
                       inet6_ntoa(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
                       <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>));

      <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b2f5bb07a049125bd2981a13054cb68"></a><!-- doxytag: member="ripngd.c::ripng_redistribute_withdraw" ref="a7b2f5bb07a049125bd2981a13054cb68" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_redistribute_withdraw </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01067">1067</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;

  <span class="keywordflow">if</span> (!<a class="code" href="structripng.html">ripng</a>)
    <span class="keywordflow">return</span>;
  
  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
        &amp;&amp; (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> != <a class="code" href="ripngd_8h.html#a7b8a856e1865628b6e85977878f5b309">RIPNG_ROUTE_INTERFACE</a>))
      {
        <span class="comment">/* Perform poisoned reverse. */</span>
        rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;
        <a class="code" href="ripngd_8h.html#a76723e13884b239d90fedad4a6945d90">RIPNG_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>, 
              <a class="code" href="ripngd_8c.html#ad9748647bbab59298c91b150352917a8">ripng_garbage_collect</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>);
        <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);

        <span class="comment">/* Aggregate count decrement. */</span>
        <a class="code" href="ripng__route_8c.html#aba0f321f8fbbe5003489ede81c5fa0fd">ripng_aggregate_decrement</a> (rp, rinfo);

        rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;

        <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>) {
          <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = (<span class="keyword">struct </span>prefix_ipv6 *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s [withdraw]&quot;</span>,
                     inet6_ntoa(p-&gt;prefix), p-&gt;prefixlen,
                     <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>));
        }

        <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);
      }
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6dd58fbf570502d00ac2d39563e87147"></a><!-- doxytag: member="ripngd.c::ripng_request" ref="a6dd58fbf570502d00ac2d39563e87147" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ripng_request </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01858">1858</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span><a class="code" href="structripng__packet.html">ripng_packet</a> <a class="code" href="structripng__packet.html">ripng_packet</a>;

  <span class="comment">/* In default ripd doesn&#39;t send RIP_REQUEST to the loopback interface. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a>(ifp))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* If interface is down, don&#39;t send RIP packet. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng send request to %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  memset (&amp;<a class="code" href="structripng__packet.html">ripng_packet</a>, 0, <span class="keyword">sizeof</span> (<a class="code" href="structripng__packet.html">ripng_packet</a>));
  <a class="code" href="structripng__packet.html">ripng_packet</a>.<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a> = <a class="code" href="ripngd_8h.html#a6b3f586e670da71a3d8fed9c82c03e65">RIPNG_REQUEST</a>;
  <a class="code" href="structripng__packet.html">ripng_packet</a>.<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a> = <a class="code" href="ripngd_8h.html#a281d5633e29e16b00b52e0391ae6cd6c">RIPNG_V1</a>;
  rte = <a class="code" href="structripng__packet.html">ripng_packet</a>.<a class="code" href="structripng__packet.html#a87cc82cb5cfac4a509180fa9efa7b341">rte</a>;
  rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;

  <span class="keywordflow">return</span> <a class="code" href="ripngd_8c.html#a0d2737d5d5dcd2d0fcb60ebd037f0004">ripng_send_packet</a> ((caddr_t) &amp;<a class="code" href="structripng__packet.html">ripng_packet</a>, <span class="keyword">sizeof</span> (ripng_packet), 
                <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7f2c5de4fc96fc9d062f99cf6e9edaa"></a><!-- doxytag: member="ripngd.c::ripng_request_process" ref="aa7f2c5de4fc96fc9d062f99cf6e9edaa" args="(struct ripng_packet *packet, int size, struct sockaddr_in6 *from, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_request_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__packet.html">ripng_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01240">1240</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;

  <span class="comment">/* Does not reponse to the requests on the loopback interfaces */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
    <span class="keywordflow">return</span>;

  <span class="comment">/* Check RIPng process is enabled on this interface. */</span>
  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
  <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structripng__interface.html#abd30652e25c22eca7261479d51734961">running</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* When passive interface is specified, suppress responses */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a2f7b4c147da99def4faea5bca0f88c88">passive</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* RIPng peer update. */</span>
  <a class="code" href="ripng__peer_8c.html#a06a24eac18e1422c66467aa3ebaff2ba">ripng_peer_update</a> (from, packet-&gt;<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a>);

  lim = ((caddr_t) packet) + size;
  rte = packet-&gt;<a class="code" href="structripng__packet.html#a87cc82cb5cfac4a509180fa9efa7b341">rte</a>;

  <span class="comment">/* The Request is processed entry by entry.  If there are no</span>
<span class="comment">     entries, no response is given. */</span>
  <span class="keywordflow">if</span> (lim == (caddr_t) rte)
    <span class="keywordflow">return</span>;

  <span class="comment">/* There is one special case.  If there is exactly one entry in the</span>
<span class="comment">     request, and it has a destination prefix of zero, a prefix length</span>
<span class="comment">     of zero, and a metric of infinity (i.e., 16), then this is a</span>
<span class="comment">     request to send the entire routing table.  In that case, a call</span>
<span class="comment">     is made to the output process to send the routing table to the</span>
<span class="comment">     requesting address/port. */</span>
  <span class="keywordflow">if</span> (lim == ((caddr_t) (rte + 1)) &amp;&amp;
      IN6_IS_ADDR_UNSPECIFIED (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>) &amp;&amp;
      rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a> == 0 &amp;&amp;
      rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> == <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    {   
      <span class="comment">/* All route with split horizon */</span>
      <a class="code" href="ripngd_8c.html#a3f72267312fe0a97d08b67ba961d6658">ripng_output_process</a> (ifp, from, <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83">ripng_all_route</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Except for this special case, processing is quite simple.</span>
<span class="comment">     Examine the list of RTEs in the Request one by one.  For each</span>
<span class="comment">     entry, look up the destination in the router&#39;s routing</span>
<span class="comment">     database and, if there is a route, put that route&#39;s metric in</span>
<span class="comment">     the metric field of the RTE.  If there is no explicit route</span>
<span class="comment">     to the specified destination, put infinity in the metric</span>
<span class="comment">     field.  Once all the entries have been filled in, change the</span>
<span class="comment">     command from Request to Response and send the datagram back</span>
<span class="comment">     to the requestor. */</span>
      memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> prefix_ipv6));
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;

      <span class="keywordflow">for</span> (; ((caddr_t) rte) &lt; lim; rte++)
    {
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>;
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>;
      apply_mask_ipv6 (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      
      rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      <span class="keywordflow">if</span> (rp)
        {
          rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
          rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
        }
      <span class="keywordflow">else</span>
        rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;
    }
      packet-&gt;<a class="code" href="structripng__packet.html#ad3eeeb2a9f59c2a969fb40c950b6484b">command</a> = <a class="code" href="ripngd_8h.html#aa5ec5496ce7fc62a57b04272d2ec5756">RIPNG_RESPONSE</a>;

      <a class="code" href="ripngd_8c.html#a0d2737d5d5dcd2d0fcb60ebd037f0004">ripng_send_packet</a> ((caddr_t) packet, size, from, ifp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a187ba42fd37feda221675baecc2fe06a"></a><!-- doxytag: member="ripngd.c::ripng_reset" ref="a187ba42fd37feda221675baecc2fe06a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ripng_reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02863">2863</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Call ripd related reset functions. */</span>
  <a class="code" href="ripng__debug_8c.html#a308554f9aa9505e2fc0fd7a9053dfb72">ripng_debug_reset</a> ();
  <a class="code" href="ripngd_8h.html#a1ef554b2365f59c62ad99ef58cf167f3">ripng_route_map_reset</a> ();

  <span class="comment">/* Call library reset functions. */</span>
  <a class="code" href="vty_8c.html#a637ad9b0152e5e5559bc0c05db07318e">vty_reset</a> ();
  <a class="code" href="filter_8c.html#a6d46b3b0526d8e0e8dbed60d7f6a695d">access_list_reset</a> ();
  <a class="code" href="plist_8c.html#a6d3ae1194d033d0d7cf9c3b54a7542ac">prefix_list_reset</a> ();

  <a class="code" href="distribute_8c.html#a58b49387fef55775ead5abc2e2c8d22a">distribute_list_reset</a> ();

  <a class="code" href="ripng__interface_8c.html#a6b3c3918c93d58707c68e515572510e4">ripng_interface_reset</a> ();

  <a class="code" href="ripng__zebra_8c.html#a6dadcd39849b0d7cf80c18c5dfe121bf">ripng_zclient_reset</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa3d02274a9a27986eb19cf0ff5990fc2"></a><!-- doxytag: member="ripngd.c::ripng_response_process" ref="aa3d02274a9a27986eb19cf0ff5990fc2" args="(struct ripng_packet *packet, int size, struct sockaddr_in6 *from, struct interface *ifp, int hoplimit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_response_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__packet.html">ripng_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>hoplimit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01107">1107</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span><a class="code" href="structripng__nexthop.html">ripng_nexthop</a> <a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* RFC2080 2.4.2  Response Messages:</span>
<span class="comment">   The Response must be ignored if it is not from the RIPng port.  */</span>
  <span class="keywordflow">if</span> (ntohs (from-&gt;sin6_port) != <a class="code" href="ripngd_8h.html#a8a29218cbba163cd33175e89084ad25c">RIPNG_PORT_DEFAULT</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet comes from non RIPng port %d from %s&quot;</span>,
         ntohs (from-&gt;sin6_port), inet6_ntoa (from-&gt;sin6_addr));
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* The datagram&#39;s IPv6 source address should be checked to see</span>
<span class="comment">   whether the datagram is from a valid neighbor; the source of the</span>
<span class="comment">   datagram must be a link-local address.  */</span>
  <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL(&amp;from-&gt;sin6_addr))
   {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet comes from non link local address %s&quot;</span>,
         inet6_ntoa (from-&gt;sin6_addr));
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* It is also worth checking to see whether the response is from one</span>
<span class="comment">   of the router&#39;s own addresses.  Interfaces on broadcast networks</span>
<span class="comment">   may receive copies of their own multicasts immediately.  If a</span>
<span class="comment">   router processes its own output as new input, confusion is likely,</span>
<span class="comment">   and such datagrams must be ignored. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripngd_8c.html#ab31cc16d7dd4df1e71bb29c546d88cfb">ripng_lladdr_check</a> (ifp, &amp;from-&gt;sin6_addr))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet comes from my own link local address %s&quot;</span>,
         inet6_ntoa (from-&gt;sin6_addr));
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* As an additional check, periodic advertisements must have their</span>
<span class="comment">   hop counts set to 255, and inbound, multicast packets sent from the</span>
<span class="comment">   RIPng port (i.e. periodic advertisement or triggered update</span>
<span class="comment">   packets) must be examined to ensure that the hop count is 255. */</span>
  <span class="keywordflow">if</span> (hoplimit &gt;= 0 &amp;&amp; hoplimit != 255)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPng packet comes with non 255 hop count %d from %s&quot;</span>,
         hoplimit, inet6_ntoa (from-&gt;sin6_addr));
      <a class="code" href="ripng__peer_8c.html#a1f3dba7e137aaa1a9a5c2ba3576df752">ripng_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Update RIPng peer. */</span>
  <a class="code" href="ripng__peer_8c.html#a06a24eac18e1422c66467aa3ebaff2ba">ripng_peer_update</a> (from, packet-&gt;<a class="code" href="structripng__packet.html#a60fc773724de8fcfacb73abe560bb41a">version</a>);
  
  <span class="comment">/* Reset nexthop. */</span>
  memset (&amp;<a class="code" href="structnexthop.html">nexthop</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng__nexthop.html">ripng_nexthop</a>));
  <a class="code" href="structnexthop.html">nexthop</a>.flag = <a class="code" href="structripng__nexthop.html#a5c5c2bdc97b730a9c7d6aed89c79a83fa5279c8c5ceceb04173f5d0c55a31b4f4">RIPNG_NEXTHOP_UNSPEC</a>;

  <span class="comment">/* Set RTE pointer. */</span>
  rte = packet-&gt;<a class="code" href="structripng__packet.html#a87cc82cb5cfac4a509180fa9efa7b341">rte</a>;

  <span class="keywordflow">for</span> (lim = ((caddr_t) packet) + size; (caddr_t) rte &lt; lim; rte++) 
    {
      <span class="comment">/* First of all, we have to check this RTE is next hop RTE or</span>
<span class="comment">         not.  Next hop RTE is completely different with normal RTE so</span>
<span class="comment">         we need special treatment. */</span>
      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> == <a class="code" href="ripngd_8h.html#abf008d76fd54560aa51e1016ceee8c77">RIPNG_METRIC_NEXTHOP</a>)
    {
      <a class="code" href="ripngd_8c.html#adc76996f440d2320cf5fff688543a6a5">ripng_nexthop_rte</a> (rte, from, &amp;<a class="code" href="structnexthop.html">nexthop</a>);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* RTE information validation. */</span>

      <span class="comment">/* - is the destination prefix valid (e.g., not a multicast</span>
<span class="comment">         prefix and not a link-local address) A link-local address</span>
<span class="comment">         should never be present in an RTE. */</span>
      <span class="keywordflow">if</span> (IN6_IS_ADDR_MULTICAST (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Destination prefix is a multicast address %s/%d [%d]&quot;</span>,
             inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>, rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);
      <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Destination prefix is a link-local address %s/%d [%d]&quot;</span>,
             inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>, rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);
      <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LOOPBACK (&amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Destination prefix is a loopback address %s/%d [%d]&quot;</span>,
             inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>, rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);
      <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* - is the prefix length valid (i.e., between 0 and 128,</span>
<span class="comment">         inclusive) */</span>
      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a> &gt; 128)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid prefix length %s/%d from %s%%%s&quot;</span>,
             inet6_ntoa (rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>), rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>,
             inet6_ntoa (from-&gt;sin6_addr), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* - is the metric valid (i.e., between 1 and 16, inclusive) */</span>
      <span class="keywordflow">if</span> (! (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt;= 1 &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt;= 16))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid metric %d from %s%%%s&quot;</span>, rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>,
             inet6_ntoa (from-&gt;sin6_addr), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <a class="code" href="ripng__peer_8c.html#a768f3f369f242910a1fbdc5ce4a041e6">ripng_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* Vincent: XXX Should we compute the direclty reachable nexthop</span>
<span class="comment">       * for our RIPng network ?</span>
<span class="comment">       **/</span>

      <span class="comment">/* Routing table updates. */</span>
      <a class="code" href="ripngd_8c.html#a9a70d765d5d3ff923a01c97ca3ef8903">ripng_route_process</a> (rte, from, &amp;<a class="code" href="structnexthop.html">nexthop</a>, ifp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9a70d765d5d3ff923a01c97ca3ef8903"></a><!-- doxytag: member="ripngd.c::ripng_route_process" ref="a9a70d765d5d3ff923a01c97ca3ef8903" args="(struct rte *rte, struct sockaddr_in6 *from, struct ripng_nexthop *ripng_nexthop, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_route_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrte.html">rte</a> *&#160;</td>
          <td class="paramname"><em>rte</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structripng__nexthop.html">ripng_nexthop</a> *&#160;</td>
          <td class="paramname"><em>ripng_nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00619">619</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
  <span class="keyword">struct </span>in6_addr *<a class="code" href="structnexthop.html">nexthop</a>;
  u_char oldmetric;
  <span class="keywordtype">int</span> same = 0;

  <span class="comment">/* Make prefix structure. */</span>
  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> prefix_ipv6));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;
  <span class="comment">/* p.prefix = rte-&gt;addr; */</span>
  <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, &amp;rte-&gt;<a class="code" href="structrte.html#a55d2b28f5596f5ddbdde7704e6304019">addr</a>);
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rte-&gt;<a class="code" href="structrte.html#ab25775a475bb20ff840233cc64f8db79">prefixlen</a>;

  <span class="comment">/* Make sure mask is applied. */</span>
  <span class="comment">/* XXX We have to check the prefix is valid or not before call</span>
<span class="comment">     apply_mask_ipv6. */</span>
  apply_mask_ipv6 (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Apply input filters. */</span>
  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  ret = <a class="code" href="ripngd_8c.html#ad73db0842e290ed6f113c6ac70e53ed6">ripng_incoming_filter</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ri);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Modify entry. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>])
    {
      <span class="keywordtype">int</span> ret;
      <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> newinfo;

      memset (&amp;newinfo, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structripng__info.html">ripng_info</a>));
      newinfo.type = <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>;
      newinfo.sub_type = <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>;
      <span class="keywordflow">if</span> (ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> == RIPNG_NEXTHOP_ADDRESS)
        newinfo.nexthop = ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>;
      <span class="keywordflow">else</span>
        newinfo.nexthop = <a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr;
      newinfo.from   = <a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr;
      newinfo.ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
      newinfo.metric = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
      newinfo.metric_out = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>; <span class="comment">/* XXX */</span>
      newinfo.tag    = ntohs(rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>); <span class="comment">/* XXX */</span>

      ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structripng__interface.html#a5042d9aa0ee3dc57149209d17b33307c">routemap</a>[<a class="code" href="ripngd_8h.html#a7df8c8ba73eff381ea6a5a4160ceb1d6">RIPNG_FILTER_IN</a>], 
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370a3aa81322d89db5d5821c23c0fe7881bd">RMAP_RIPNG</a>, &amp;newinfo);

      <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a797e548e17ca4673c39625a1fc8b93ae">IS_RIPNG_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng %s/%d is filtered by route-map in&quot;</span>,
               inet6_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
      <span class="keywordflow">return</span>;
    }

      <span class="comment">/* Get back the object */</span>
      <span class="keywordflow">if</span> (ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> == RIPNG_NEXTHOP_ADDRESS) {
    <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a>(&amp;newinfo.nexthop, &amp;ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>) ) {
      <span class="comment">/* the nexthop get changed by the routemap */</span>
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL(&amp;newinfo.nexthop))
        ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a> = newinfo.nexthop;
      <span class="keywordflow">else</span>
        ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a> = in6addr_any;
    }
      } <span class="keywordflow">else</span> {
    <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a>(&amp;newinfo.nexthop, &amp;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr) ) {
      <span class="comment">/* the nexthop get changed by the routemap */</span>
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL(&amp;newinfo.nexthop)) {
        ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> = RIPNG_NEXTHOP_ADDRESS;
        ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a> = newinfo.nexthop;
      }
    }
      }
      rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>     = htons(newinfo.tag_out); <span class="comment">/* XXX */</span>
      rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>  = newinfo.metric_out; <span class="comment">/* XXX: the routemap uses the metric_out field */</span>
    }

  <span class="comment">/* Once the entry has been validated, update the metric by</span>
<span class="comment">   * adding the cost of the network on wich the message</span>
<span class="comment">   * arrived. If the result is greater than infinity, use infinity</span>
<span class="comment">   * (RFC2453 Sec. 3.9.2)</span>
<span class="comment">   **/</span>
 
  <span class="comment">/* Zebra ripngd can handle offset-list in. */</span>
  ret = <a class="code" href="ripng__offset_8c.html#a3cb8282ebd45074266356c8b4638c7a2">ripng_offset_list_apply_in</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ifp, &amp;rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);

  <span class="comment">/* If offset-list does not modify the metric use interface&#39;s</span>
<span class="comment">   * one. */</span>
  <span class="keywordflow">if</span> (! ret)
    rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> += ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;

  <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt; <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;

  <span class="comment">/* Set nexthop pointer. */</span>
  <span class="keywordflow">if</span> (ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a47491d21e1277401bed39f35a79434b2">flag</a> == RIPNG_NEXTHOP_ADDRESS)
    nexthop = &amp;ripng_nexthop-&gt;<a class="code" href="structripng__nexthop.html#a2ddcc6f402319ccad8ab97f3d17e62b9">address</a>;
  <span class="keywordflow">else</span>
    nexthop = &amp;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr;

  <span class="comment">/* Lookup RIPng routing table. */</span>
  rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1bf596b69c5b442145eb509611ad6dc5">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Sanity check */</span>
  rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
  <span class="keywordflow">if</span> (rinfo)
    {
      <span class="comment">/* Redistributed route check. */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> != <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    <span class="keywordflow">return</span>;

      <span class="comment">/* Local static route. */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>
      &amp;&amp; ((rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>) ||
          (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>))
      &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    <span class="keywordflow">return</span>;
    }

  <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="comment">/* Now, check to see whether there is already an explicit route</span>
<span class="comment">     for the destination prefix.  If there is no such route, add</span>
<span class="comment">     this route to the routing table, unless the metric is</span>
<span class="comment">     infinity (there is no point in adding a route which</span>
<span class="comment">     unusable). */</span>
      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    {
      rinfo = <a class="code" href="ripngd_8c.html#a0b7fb6a0d15b39889e109557bf3d23ea">ripng_info_new</a> ();
      
      <span class="comment">/* - Setting the destination prefix and length to those in</span>
<span class="comment">         the RTE. */</span>
      rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;
      rinfo-&gt;<a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a> = <a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a>;

      <span class="comment">/* - Setting the metric to the newly calculated metric (as</span>
<span class="comment">         described above). */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a782b26176fb3c32210c0745ae2f5fdb8">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);

      <span class="comment">/* - Set the next hop address to be the address of the router</span>
<span class="comment">         from which the datagram came or the next hop address</span>
<span class="comment">         specified by a next hop RTE. */</span>
      <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, nexthop);
      <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>, &amp;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr);
      rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

      <span class="comment">/* - Initialize the timeout for the route.  If the</span>
<span class="comment">         garbage-collection timer is running for this route, stop it. */</span>
      <a class="code" href="ripngd_8c.html#a14095cf7dba79691f9bceecc899bf66c">ripng_timeout_update</a> (rinfo);

      <span class="comment">/* - Set the route change flag. */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;

      <span class="comment">/* - Signal the output process to trigger an update (see section</span>
<span class="comment">         2.5). */</span>
      <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);

      <span class="comment">/* Finally, route goes into the kernel. */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> = <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> = <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>;

      <a class="code" href="ripng__zebra_8c.html#a4c92f013a554c244708fb25a0e4bd51e">ripng_zebra_ipv6_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>,
                rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>);
      rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;

      <span class="comment">/* Aggregate check. */</span>
      <a class="code" href="ripng__route_8c.html#a690c7b208ebc224d71cd51cef136e157">ripng_aggregate_increment</a> (rp, rinfo);
    }
    }
  <span class="keywordflow">else</span>
    {
      rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      
      <span class="comment">/* If there is an existing route, compare the next hop address</span>
<span class="comment">     to the address of the router from which the datagram came.</span>
<span class="comment">     If this datagram is from the same router as the existing</span>
<span class="comment">     route, reinitialize the timeout.  */</span>
      same = (<a class="code" href="zebra_8h.html#abb82efab585ad36d8ce0d873bee5941b">IN6_ARE_ADDR_EQUAL</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>, &amp;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr) 
          &amp;&amp; (rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>));

      <span class="keywordflow">if</span> (same)
    <a class="code" href="ripngd_8c.html#a14095cf7dba79691f9bceecc899bf66c">ripng_timeout_update</a> (rinfo);

      <span class="comment">/* Next, compare the metrics.  If the datagram is from the same</span>
<span class="comment">     router as the existing route, and the new metric is different</span>
<span class="comment">     than the old one; or, if the new metric is lower than the old</span>
<span class="comment">     one; do the following actions: */</span>
      <span class="keywordflow">if</span> ((same &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>) ||
      rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt; rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>)
    {
      <span class="comment">/* - Adopt the route from the datagram.  That is, put the</span>
<span class="comment">         new metric in, and adjust the next hop address (if</span>
<span class="comment">         necessary). */</span>
      oldmetric = rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
      rinfo-&gt;<a class="code" href="structripng__info.html#a782b26176fb3c32210c0745ae2f5fdb8">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);
      <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>, &amp;<a class="code" href="structripng__info.html#adb886d5f89454913a888b62bed94008f">from</a>-&gt;sin6_addr);
      rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

      <span class="comment">/* Should a new route to this network be established</span>
<span class="comment">         while the garbage-collection timer is running, the</span>
<span class="comment">         new route will replace the one that is about to be</span>
<span class="comment">         deleted.  In this case the garbage-collection timer</span>
<span class="comment">         must be cleared. */</span>

      <span class="keywordflow">if</span> (oldmetric == <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a> &amp;&amp;
          rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> &lt; <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        {
          rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> = <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>;
          rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> = <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>;

          <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>);

          <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, nexthop))
        <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, nexthop);

          <a class="code" href="ripng__zebra_8c.html#a4c92f013a554c244708fb25a0e4bd51e">ripng_zebra_ipv6_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, nexthop, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>);
          rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;

          <span class="comment">/* The aggregation counter needs to be updated because</span>
<span class="comment">             the prefixes, which are into the gc, have been</span>
<span class="comment">             removed from the aggregator (see ripng_timout). */</span>
          <a class="code" href="ripng__route_8c.html#a690c7b208ebc224d71cd51cef136e157">ripng_aggregate_increment</a> (rp, rinfo);
        }

      <span class="comment">/* Update nexthop and/or metric value.  */</span>
      <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        {
          <a class="code" href="ripng__zebra_8c.html#a8c975a52ab3f2a4e4593d75232185382">ripng_zebra_ipv6_delete</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>);
          <a class="code" href="ripng__zebra_8c.html#a4c92f013a554c244708fb25a0e4bd51e">ripng_zebra_ipv6_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, nexthop, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a>);
          rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;

          <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, nexthop))
        <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, nexthop);
        }

      <span class="comment">/* - Set the route change flag and signal the output process</span>
<span class="comment">         to trigger an update. */</span>
      rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;
      <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);

      <span class="comment">/* - If the new metric is infinity, start the deletion</span>
<span class="comment">         process (described above); */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> == <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        {
          <span class="comment">/* If the new metric is infinity, the deletion process</span>
<span class="comment">         begins for the route, which is no longer used for</span>
<span class="comment">         routing packets.  Note that the deletion process is</span>
<span class="comment">         started only when the metric is first set to</span>
<span class="comment">         infinity.  If the metric was already infinity, then a</span>
<span class="comment">         new deletion process is not started. */</span>
          <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
        {
          <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
          <a class="code" href="ripngd_8h.html#a76723e13884b239d90fedad4a6945d90">RIPNG_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>, 
                  <a class="code" href="ripngd_8c.html#ad9748647bbab59298c91b150352917a8">ripng_garbage_collect</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>);
          <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);

          <span class="comment">/* - The metric for the route is set to 16</span>
<span class="comment">             (infinity).  This causes the route to be removed</span>
<span class="comment">             from service.*/</span>
          <a class="code" href="ripng__zebra_8c.html#a8c975a52ab3f2a4e4593d75232185382">ripng_zebra_ipv6_delete</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>, rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>);
          rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> &amp;= ~<a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;

          <span class="comment">/* Aggregate count decrement. */</span>
          <a class="code" href="ripng__route_8c.html#aba0f321f8fbbe5003489ede81c5fa0fd">ripng_aggregate_decrement</a> (rp, rinfo);

          <span class="comment">/* - The route change flag is to indicate that this</span>
<span class="comment">             entry has been changed. */</span>
          <span class="comment">/* - The output process is signalled to trigger a</span>
<span class="comment">                     response. */</span>
          ;  <span class="comment">/* Above processes are already done previously. */</span>
        }
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* otherwise, re-initialize the timeout. */</span>
          <a class="code" href="ripngd_8c.html#a14095cf7dba79691f9bceecc899bf66c">ripng_timeout_update</a> (rinfo);
        }
    }
      <span class="comment">/* Unlock tempolary lock of the route. */</span>
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6b1690fe3bd2672b6812fa0922f848b8"></a><!-- doxytag: member="ripngd.c::ripng_route_rte" ref="a6b1690fe3bd2672b6812fa0922f848b8" args="(struct ripng_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_route_rte </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00077">77</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a5e0f5b836550e9cfcfa36ce1bfb0c046">type</a> == <a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a> &amp;&amp; rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a> == <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c60bfdfb0b4f786ba4cd26136f66a46"></a><!-- doxytag: member="ripngd.c::ripng_route_subtype_print" ref="a9c60bfdfb0b4f786ba4cd26136f66a46" args="(struct ripng_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static char* ripng_route_subtype_print </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01955">1955</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">static</span> <span class="keywordtype">char</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>[3];
  memset(str, 0, 3);

  <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#ab96be2bd11a5979b955ec035db0a8ba5">suppress</a>)
    strcat(str, <span class="stringliteral">&quot;S&quot;</span>);

  <span class="keywordflow">switch</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a6b1f397b0581369f5141e29dc68d6e85">sub_type</a>)
    {
       <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a42f5ddc11e604312912cb85448f451bd">RIPNG_ROUTE_RTE</a>:
         strcat(str, <span class="stringliteral">&quot;n&quot;</span>);
         <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a326075451cf7aaf58444cd6a5e198dc6">RIPNG_ROUTE_STATIC</a>:
         strcat(str, <span class="stringliteral">&quot;s&quot;</span>);
         <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#abea59d5b7e93126bc054927174a952ff">RIPNG_ROUTE_DEFAULT</a>:
         strcat(str, <span class="stringliteral">&quot;d&quot;</span>);
         <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#ac5127dcb031038eab87f42097d5b72e4">RIPNG_ROUTE_REDISTRIBUTE</a>:
         strcat(str, <span class="stringliteral">&quot;r&quot;</span>);
         <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="ripngd_8h.html#a7b8a856e1865628b6e85977878f5b309">RIPNG_ROUTE_INTERFACE</a>:
         strcat(str, <span class="stringliteral">&quot;i&quot;</span>);
         <span class="keywordflow">break</span>;
       <span class="keywordflow">default</span>:
         strcat(str, <span class="stringliteral">&quot;?&quot;</span>);
         <span class="keywordflow">break</span>;
    }
 
  <span class="keywordflow">return</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88d10316a3003a27cc0146a4dc983ee3"></a><!-- doxytag: member="ripngd.c::ripng_routemap_update" ref="a88d10316a3003a27cc0146a4dc983ee3" args="(const char *unused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_routemap_update </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>unused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02944">2944</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    <a class="code" href="ripngd_8c.html#a7809da60dce4d4755e2a2a8faecd26da">ripng_if_rmap_update_interface</a> (ifp);

  <a class="code" href="ripngd_8c.html#af8b4a863eeb63eba7ccd54bfb73f8073">ripng_routemap_update_redistribute</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="af8b4a863eeb63eba7ccd54bfb73f8073"></a><!-- doxytag: member="ripngd.c::ripng_routemap_update_redistribute" ref="af8b4a863eeb63eba7ccd54bfb73f8073" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_routemap_update_redistribute </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02928">2928</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>)
    {
      <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[i].<a class="code" href="structripng.html#ac5d479513619aac458e3ae04c0814632">name</a>)
        <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structripng.html#a98512a1190c2b92964d03d0ef0935766">map</a> = 
          <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#ad3374ac5094640665f0e16defd276054">route_map</a>[i].<a class="code" href="structripng.html#ac5d479513619aac458e3ae04c0814632">name</a>);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0d2737d5d5dcd2d0fcb60ebd037f0004"></a><!-- doxytag: member="ripngd.c::ripng_send_packet" ref="a0d2737d5d5dcd2d0fcb60ebd037f0004" args="(caddr_t buf, int bufsize, struct sockaddr_in6 *to, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ripng_send_packet </td>
          <td>(</td>
          <td class="paramtype">caddr_t&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bufsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in6 *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00155">155</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a>;
  <span class="keyword">struct </span>iovec iov;
  <span class="keyword">struct </span>cmsghdr  *cmsgptr;
  <span class="keywordtype">char</span> adata [256];
  <span class="keyword">struct </span>in6_pktinfo *pkt;
  <span class="keyword">struct </span>sockaddr_in6 addr;

  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a31e214a9e1772e5c1775f81166f2b322">IS_RIPNG_DEBUG_SEND</a>) {
    <span class="keywordflow">if</span> (to)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;send to %s&quot;</span>, inet6_ntoa (to-&gt;sin6_addr));
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  send interface %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  send packet size %d&quot;</span>, bufsize);
  }

  memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
  addr.sin6_family = AF_INET6;
<span class="preprocessor">#ifdef SIN6_LEN</span>
<span class="preprocessor"></span>  addr.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
  addr.sin6_flowinfo = htonl (<a class="code" href="ripngd_8h.html#a211c2f061e54ad9d79f7397d8dc7c30c">RIPNG_PRIORITY_DEFAULT</a>);

  <span class="comment">/* When destination is specified. */</span>
  <span class="keywordflow">if</span> (to != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      addr.sin6_addr = to-&gt;sin6_addr;
      addr.sin6_port = to-&gt;sin6_port;
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a>(AF_INET6, <a class="code" href="ripngd_8h.html#aafe5068060a8c50dff9110df72e91feb">RIPNG_GROUP</a>, &amp;addr.sin6_addr);
      addr.sin6_port = htons (<a class="code" href="ripngd_8h.html#a8a29218cbba163cd33175e89084ad25c">RIPNG_PORT_DEFAULT</a>);
    }

  <a class="code" href="structmsg.html">msg</a>.msg_name = (<span class="keywordtype">void</span> *) &amp;addr;
  <a class="code" href="structmsg.html">msg</a>.msg_namelen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
  <a class="code" href="structmsg.html">msg</a>.msg_iov = &amp;iov;
  <a class="code" href="structmsg.html">msg</a>.msg_iovlen = 1;
  <a class="code" href="structmsg.html">msg</a>.msg_control = (<span class="keywordtype">void</span> *) adata;
  <a class="code" href="structmsg.html">msg</a>.msg_controllen = <a class="code" href="zebra_8h.html#a0769bfc51cb1ffd3fe7f79fe3bf527f3">CMSG_SPACE</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> in6_pktinfo));

  iov.iov_base = buf;
  iov.iov_len = bufsize;

  cmsgptr = (<span class="keyword">struct </span>cmsghdr *)adata;
  cmsgptr-&gt;cmsg_len = <a class="code" href="zebra_8h.html#a0a270c323a1b54a4bfca7c3485e0b6bf">CMSG_LEN</a>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> in6_pktinfo));
  cmsgptr-&gt;cmsg_level = IPPROTO_IPV6;
  cmsgptr-&gt;cmsg_type = IPV6_PKTINFO;

  pkt = (<span class="keyword">struct </span>in6_pktinfo *) CMSG_DATA (cmsgptr);
  memset (&amp;pkt-&gt;ipi6_addr, 0, sizeof (<span class="keyword">struct</span> in6_addr));
  pkt-&gt;ipi6_ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

  ret = sendmsg (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68ed7b98a04fcdefea29cc865bf12918">sock</a>, &amp;<a class="code" href="structmsg.html">msg</a>, 0);

  <span class="keywordflow">if</span> (ret &lt; 0) {
    <span class="keywordflow">if</span> (to)
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;RIPng send fail on %s to %s: %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, 
                inet6_ntoa (to-&gt;sin6_addr), <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
    <span class="keywordflow">else</span>
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;RIPng send fail on %s: %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
  }

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f3e9c6e2caf64e72fcd3b109448bf3e"></a><!-- doxytag: member="ripngd.c::ripng_timeout" ref="a4f3e9c6e2caf64e72fcd3b109448bf3e" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_timeout </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00430">430</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structripng__info.html">ripng_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Get route_node pointer. */</span>
  rp = rinfo-&gt;<a class="code" href="structripng__info.html#a78207eabf7ccff094710f2f68dd86c08">rp</a>;

  <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
  <a class="code" href="ripngd_8h.html#a76723e13884b239d90fedad4a6945d90">RIPNG_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>, <a class="code" href="ripngd_8c.html#ad9748647bbab59298c91b150352917a8">ripng_garbage_collect</a>, 
          <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a79a6db0c820761917a6d5b19c2383dbd">garbage_time</a>);

  <span class="comment">/* Delete this route from the kernel. */</span>
  <a class="code" href="ripng__zebra_8c.html#a8c975a52ab3f2a4e4593d75232185382">ripng_zebra_ipv6_delete</a> ((<span class="keyword">struct</span> prefix_ipv6 *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structripng__info.html#a9e4a05b7f0911b7d3805b1c0fa2c45bf">nexthop</a>,
                rinfo-&gt;<a class="code" href="structripng__info.html#a5269ffb6b1daf9eddae7ea92d271d5d6">ifindex</a>);
  <span class="comment">/* - The metric for the route is set to 16 (infinity).  This causes</span>
<span class="comment">     the route to be removed from service. */</span>
  rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> = <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>;
  rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> &amp;= ~<a class="code" href="ripngd_8h.html#a6e1843ed62fdcda0c95be01e0386d69c">RIPNG_RTF_FIB</a>;

  <span class="comment">/* Aggregate count decrement. */</span>
  <a class="code" href="ripng__route_8c.html#aba0f321f8fbbe5003489ede81c5fa0fd">ripng_aggregate_decrement</a> (rp, rinfo);

  <span class="comment">/* - The route change flag is to indicate that this entry has been</span>
<span class="comment">     changed. */</span>
  rinfo-&gt;<a class="code" href="structripng__info.html#adc51f81d4cf365159e1aea265869f095">flags</a> |= <a class="code" href="ripngd_8h.html#ae2ac88c46de4d1bc9f2b01e122049b57">RIPNG_RTF_CHANGED</a>;

  <span class="comment">/* - The output process is signalled to trigger a response. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a2e7d2cd80dd6c338241452b2e2f64cd9">RIPNG_TRIGGERED_UPDATE</a>, 0);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a14095cf7dba79691f9bceecc899bf66c"></a><!-- doxytag: member="ripngd.c::ripng_timeout_update" ref="a14095cf7dba79691f9bceecc899bf66c" args="(struct ripng_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_timeout_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00467">467</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structripng__info.html#a1ada5456f3b019995ea6f7843aabadf2">metric</a> != <a class="code" href="ripngd_8h.html#a6b3b5f1dc5c1220629f61ea751f6a2e5">RIPNG_METRIC_INFINITY</a>)
    {
      <a class="code" href="ripngd_8h.html#ab73283656926a9bd7d6c73343acc4102">RIPNG_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>);
      <a class="code" href="ripngd_8h.html#a76723e13884b239d90fedad4a6945d90">RIPNG_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>, <a class="code" href="ripngd_8c.html#a4f3e9c6e2caf64e72fcd3b109448bf3e">ripng_timeout</a>, <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a1e46af0d5dd1bdd43a29901c70772ab5">timeout_time</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad767831f2f0da4f9ec266ce3f74ff0d1"></a><!-- doxytag: member="ripngd.c::ripng_triggered_interval" ref="ad767831f2f0da4f9ec266ce3f74ff0d1" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_triggered_interval </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01491">1491</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a442a4c7c0bfa3a1d781e3f8d227b78c7">trigger</a>)
    {
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a442a4c7c0bfa3a1d781e3f8d227b78c7">trigger</a> = 0;
      <a class="code" href="ripngd_8c.html#aade04913dcd50154f3a16346c673f01e">ripng_triggered_update</a> (t);
    }
  <span class="keywordflow">return</span> 0;
}     
</pre></div>
</div>
</div>
<a class="anchor" id="aade04913dcd50154f3a16346c673f01e"></a><!-- doxytag: member="ripngd.c::ripng_triggered_update" ref="aade04913dcd50154f3a16346c673f01e" args="(struct thread *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ripng_triggered_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01505">1505</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;
  <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;

  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a68b42a2e038716d0c3d226aa04fc056d">t_triggered_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Cancel interval timer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>);
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a442a4c7c0bfa3a1d781e3f8d227b78c7">trigger</a> = 0;

  <span class="comment">/* Logging triggered update. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng triggered update!&quot;</span>);

  <span class="comment">/* Split Horizon processing is done when generating triggered</span>
<span class="comment">     updates as well as normal updates (see section 2.6). */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp) || ! <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structripng__interface.html#abd30652e25c22eca7261479d51734961">running</a>)
    <span class="keywordflow">continue</span>;

      <span class="comment">/* When passive interface is specified, suppress announce to the</span>
<span class="comment">         interface. */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a2f7b4c147da99def4faea5bca0f88c88">passive</a>)
    <span class="keywordflow">continue</span>;

      <a class="code" href="ripngd_8c.html#a3f72267312fe0a97d08b67ba961d6658">ripng_output_process</a> (ifp, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aae4415bb34123e19eee8a373f99cfb8a5">ripng_changed_route</a>);
    }

  <span class="comment">/* Once all of the triggered updates have been generated, the route</span>
<span class="comment">     change flags should be cleared. */</span>
  <a class="code" href="ripngd_8c.html#a42c420e9fcc21cfbcc496b1ba2a97d0d">ripng_clear_changed_flag</a> ();

  <span class="comment">/* After a triggered update is sent, a timer should be set for a</span>
<span class="comment">     random interval between 1 and 5 seconds.  If other changes that</span>
<span class="comment">     would trigger updates occur before the timer expires, a single</span>
<span class="comment">     update is triggered when the timer expires. */</span>
  interval = (random () % 5) + 1;

  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripngd_8c.html#ad767831f2f0da4f9ec266ce3f74ff0d1">ripng_triggered_interval</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, interval);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a26eee9390f4183a3f264a9942d447fdd"></a><!-- doxytag: member="ripngd.c::ripng_update" ref="a26eee9390f4183a3f264a9942d447fdd" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01431">1431</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structripng__interface.html">ripng_interface</a> *ri;

  <span class="comment">/* Clear update timer thread. */</span>
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#aff88d98568318561b02dbee48d24acc1">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Logging update event. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPng update timer expired!&quot;</span>);

  <span class="comment">/* Supply routes to each interface. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp) || ! <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structripng__interface.html#abd30652e25c22eca7261479d51734961">running</a>)
    <span class="keywordflow">continue</span>;

      <span class="comment">/* When passive interface is specified, suppress announce to the</span>
<span class="comment">         interface. */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structripng__interface.html#a2f7b4c147da99def4faea5bca0f88c88">passive</a>)
    <span class="keywordflow">continue</span>;

<span class="preprocessor">#if RIPNG_ADVANCED</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (ri-&gt;ri_send == <a class="code" href="ripngd_8h.html#a8c33a56173258e15b6657f509b18f46c">RIPNG_SEND_OFF</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ripng__debug_8h.html#a392e0383d4e00540ae5df2950459a02b">IS_RIPNG_DEBUG_EVENT</a>)
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_DEBUG, 
          <span class="stringliteral">&quot;[Event] RIPng send to if %d is suppressed by config&quot;</span>,
         ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
      <span class="keywordflow">continue</span>;
    }
<span class="preprocessor">#endif </span><span class="comment">/* RIPNG_ADVANCED */</span>

      <a class="code" href="ripngd_8c.html#a3f72267312fe0a97d08b67ba961d6658">ripng_output_process</a> (ifp, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="ripngd_8c.html#aa618c4d8c29ef4efe6f10c741fb1f47aa36d98eb8a2b6865a11a6b04b8a464e83">ripng_all_route</a>);
    }

  <span class="comment">/* Triggered updates may be suppressed if a regular update is due by</span>
<span class="comment">     the time the triggered update would be sent. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a>);
      <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a97619acc0996741fbad22b0ac1684cc5">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <a class="code" href="structripng.html">ripng</a>-&gt;<a class="code" href="structripng.html#a442a4c7c0bfa3a1d781e3f8d227b78c7">trigger</a> = 0;

  <span class="comment">/* Reset flush event. */</span>
  <a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6">ripng_event</a> (<a class="code" href="ripngd_8h.html#a3e4112ec6022215d721bc3e5aefcb5b6a7cde26b6d5ea395a7352e85b4c58f026">RIPNG_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a83c25665bd55b0f2bf07371f94615db4"></a><!-- doxytag: member="ripngd.c::ripng_update_jitter" ref="a83c25665bd55b0f2bf07371f94615db4" args="(int time)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ripng_update_jitter </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>time</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01886">1886</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((rand () % (time + 1)) - (time / 2));
}
</pre></div>
</div>
</div>
<a class="anchor" id="abcd8fab79718aa8ff43a65cc2d149c4a"></a><!-- doxytag: member="ripngd.c::ripng_vty_out_uptime" ref="abcd8fab79718aa8ff43a65cc2d149c4a" args="(struct vty *vty, struct ripng_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ripng_vty_out_uptime </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structripng__info.html">ripng_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01930">1930</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  time_t clock;
  <span class="keyword">struct </span>tm *tm;
<span class="preprocessor">#define TIME_BUF 25</span>
<span class="preprocessor"></span>  <span class="keywordtype">char</span> timebuf [<a class="code" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>];
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
  
  <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structripng__info.html#ab3490e49b1b0cacad3b8bb76e20d487f">t_timeout</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
      tm = gmtime (&amp;clock);
      strftime (timebuf, TIME_BUF, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structripng__info.html#a26eebec0ab345768bc791435d2a551b9">t_garbage_collect</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
      tm = gmtime (&amp;clock);
      strftime (timebuf, TIME_BUF, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2df121efc44d079712a814a74e304fb9"></a><!-- doxytag: member="ripngd.c::ripng_write_rte" ref="a2df121efc44d079712a814a74e304fb9" args="(int num, struct stream *s, struct prefix_ipv6 *p, struct in6_addr *nexthop, u_int16_t tag, u_char metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ripng_write_rte </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct prefix_ipv6 *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in6_addr *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname"><em>tag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>metric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l01565">1565</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* RIPng packet header. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a> == 0)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ripngd_8h.html#aa5ec5496ce7fc62a57b04272d2ec5756">RIPNG_RESPONSE</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ripngd_8h.html#a281d5633e29e16b00b52e0391ae6cd6c">RIPNG_V1</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
    }

  <span class="comment">/* Write routing table entry. */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="structnexthop.html">nexthop</a>)
    <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, (u_char *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix, sizeof (<span class="keyword">struct</span> in6_addr));
  <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, (u_char *) <a class="code" href="structnexthop.html">nexthop</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in6_addr));
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, tag);
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="structmetric.html">metric</a>);

  <span class="keywordflow">return</span> ++<a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="af581db0cb86743df9f243e66eafe45fa"></a><!-- doxytag: member="ripngd.c::cmd_ripng_node" ref="af581db0cb86743df9f243e66eafe45fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcmd__node.html">cmd_node</a> <a class="el" href="ripngd_8c.html#af581db0cb86743df9f243e66eafe45fa">cmd_ripng_node</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a54754d9b49687991ae5cf0ba4d32dab2">RIPNG_NODE</a>,
  <span class="stringliteral">&quot;%s(config-router)# &quot;</span>,
  1,
}
</pre></div>
<p>Definition at line <a class="el" href="ripngd_8c_source.html#l02688">2688</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a191aae347a77a6e39457dc17afc36773"></a><!-- doxytag: member="ripngd.c::ripng" ref="a191aae347a77a6e39457dc17afc36773" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structripng.html">ripng</a>* <a class="el" href="structripng.html">ripng</a> = NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripngd_8c_source.html#l00048">48</a> of file <a class="el" href="ripngd_8c_source.html">ripngd.c</a>.</p>

</div>
</div>
<a class="anchor" id="ae075817360c6997bdd963ba531131901"></a><!-- doxytag: member="ripngd.c::ripngd_privs" ref="ae075817360c6997bdd963ba531131901" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="el" href="ripngd_8c.html#ae075817360c6997bdd963ba531131901">ripngd_privs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripng__main_8c_source.html#l00068">68</a> of file <a class="el" href="ripng__main_8c_source.html">ripng_main.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ripngd_8c.html">ripngd.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:36 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
