<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_flood.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__flood_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_flood.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__flood_8h__dep__incl.png" border="0" usemap="#ospfd_2ospf__flood_8hdep" alt=""/></div>
<map name="ospfd_2ospf__flood_8hdep" id="ospfd_2ospf__flood_8hdep">
<area shape="rect" id="node3" href="ospf__abr_8c.html" title="ospfd/ospf_abr.c" alt="" coords="5,80,128,107"/><area shape="rect" id="node5" href="ospf__asbr_8c.html" title="ospfd/ospf_asbr.c" alt="" coords="153,80,284,107"/><area shape="rect" id="node7" href="ospf__flood_8c.html" title="ospfd/ospf_flood.c" alt="" coords="308,80,444,107"/><area shape="rect" id="node9" href="ospf__ism_8c.html" title="ospfd/ospf_ism.c" alt="" coords="469,80,595,107"/><area shape="rect" id="node11" href="ospf__lsa_8c.html" title="ospfd/ospf_lsa.c" alt="" coords="620,80,743,107"/><area shape="rect" id="node13" href="ospf__neighbor_8c.html" title="ospfd/ospf_neighbor.c" alt="" coords="767,80,925,107"/><area shape="rect" id="node15" href="ospf__nsm_8c.html" title="ospfd/ospf_nsm.c" alt="" coords="951,80,1081,107"/><area shape="rect" id="node17" href="ospf__packet_8c.html" title="ospfd/ospf_packet.c" alt="" coords="1105,80,1252,107"/><area shape="rect" id="node19" href="ospf__vty_8c.html" title="ospfd/ospf_vty.c" alt="" coords="1277,80,1400,107"/><area shape="rect" id="node21" href="ospfd_8c.html" title="ospfd/ospfd.c" alt="" coords="1425,80,1532,107"/></map>
</div>
</div>
<p><a href="ospf__flood_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a1d6b0d6cd950a6f1610ea2fa86c6cc49">ospf_flood</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#ae63535f8bbbababf007c76d1451618e6">ospf_flood_through</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a29849a1f1daed4bd4ca28dd083576e45">ospf_flood_through_area</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *, struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a608687efecd7b5cb146b6761492b0ebe">ospf_flood_through_as</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a9d2874ac4fbe1b8794dbcdf2f8e1e007">ospf_ls_request_count</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a49e2cb3f510170eb1366f9cd2c8b1203">ospf_ls_request_isempty</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a85cb5650679fa29e7c83cee9a320f681">ospf_ls_request_new</a> (struct <a class="el" href="structlsa__header.html">lsa_header</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a8b8b24b506a707a784906dd292f93abe">ospf_ls_request_free</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a90953f3c876eec9ce23f619d5e969d81">ospf_ls_request_add</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a89fa735e5273828f62685a1cee13386a">ospf_ls_request_delete</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a9dba7e2c72b557bfceede70f3a47f7a1">ospf_ls_request_delete_all</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a27126767a3610710aa8b3b227a2e50d9">ospf_ls_request_lookup</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a9e0a883c21681d1bdd51202f87c55463">ospf_ls_retransmit_count</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#af88789a37ddad181d56c060286d5b4d0">ospf_ls_retransmit_count_self</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#aa284b03ddb9bd18e5b1ef6ad7c23fe53">ospf_ls_retransmit_isempty</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a23094df82d33c8162134f1ece488a1f1">ospf_ls_retransmit_add</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#ab1c144ffb5a7c6bf24399399d2644ae9">ospf_ls_retransmit_delete</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#aaf6abd7949694eb30bdc3b58245dfa14">ospf_ls_retransmit_clear</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a64fb70fd057afea0ff5500214207658b">ospf_ls_retransmit_lookup</a> (struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#ae8c2f9f48504f891db852e18b8627e4e">ospf_ls_retransmit_delete_nbr_area</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#aa065c2148efdea34e59d6db2fb3c725d">ospf_ls_retransmit_delete_nbr_as</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a9176799326d0c62d03e3ca10634d8e8e">ospf_ls_retransmit_add_nbr_all</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a2fc26f2e8eb20f36a463122d9b84cc49">ospf_flood_lsa_area</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a5cebbc8d7bf55dbb8c83fd8179fbb5d9">ospf_flood_lsa_as</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#aeb4cc897fdc8e4e3d99008c20675f088">ospf_lsa_flush_area</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *, struct <a class="el" href="structospf__area.html">ospf_area</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a6bee8552f1167cb8cc1d4b5101e4df3a">ospf_lsa_flush_as</a> (struct <a class="el" href="structospf.html">ospf</a> *, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#a6bd7b22bfe8e596a210bd7564ab6bb68">ospf_external_info_check</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__flood_8h.html#afcbf84e6f5791298594bbd311a3079d0">ospf_lsdb_init</a> (struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a6bd7b22bfe8e596a210bd7564ab6bb68"></a><!-- doxytag: member="ospf_flood.h::ospf_external_info_check" ref="a6bd7b22bfe8e596a210bd7564ab6bb68" args="(struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structexternal__info.html">external_info</a>* ospf_external_info_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00080">80</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;

  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;data;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = lsa-&gt;data-&gt;id;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);

  <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
    {
      <span class="keywordtype">int</span> <a class="code" href="rip__zebra_8c.html#a6de0063d659a004efdd2c263e76b7721">redist_type</a> = <a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>) ? <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a> : <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
      <span class="keywordflow">if</span> (<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (redist_type))
    <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type))
      {
        rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type),
                    (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
        <span class="keywordflow">if</span> (rn)
          {
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
          <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structexternal__info.html">external_info</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
          }
      }
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1d6b0d6cd950a6f1610ea2fa86c6cc49"></a><!-- doxytag: member="ospf_flood.h::ospf_flood" ref="a1d6b0d6cd950a6f1610ea2fa86c6cc49" args="(struct ospf *, struct ospf_neighbor *, struct ospf_lsa *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_flood </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00234">234</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keywordtype">int</span> lsa_ack_flag;

  <span class="comment">/* Type-7 LSA&#39;s will be flooded throughout their native NSSA area,</span>
<span class="comment">     but will also be flooded as Type-5&#39;s into ABR capable links.  */</span>

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: start, NBR %s (%s), cur(%p), New-LSA[%s]&quot;</span>,
               inet_ntoa (nbr-&gt;router_id),
               <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;state),
               current,
               <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (<span class="keyword">new</span>));

  lsa_ack_flag = 0;
  oi = nbr-&gt;oi;

  <span class="comment">/* If there is already a database copy, and if the</span>
<span class="comment">     database copy was received via flooding and installed less</span>
<span class="comment">     than MinLSArrival seconds ago, discard the new LSA</span>
<span class="comment">     (without acknowledging it). */</span>
  <span class="keywordflow">if</span> (current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)      <span class="comment">/* -- endo. */</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (current)
      &amp;&amp; (ntohs (current-&gt;data-&gt;ls_age)    == 0
      &amp;&amp;  ntohl (current-&gt;data-&gt;ls_seqnum) == <a class="code" href="ospfd_8h.html#affb6c878aa462ae5de5e5db70631482d">OSPF_INITIAL_SEQUENCE_NUMBER</a>))
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: Got a self-originated LSA, &quot;</span>
               <span class="stringliteral">&quot;while local one is initial instance.&quot;</span>);
          ; <span class="comment">/* Accept this LSA for quick LSDB resynchronization. */</span>
        }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), current-&gt;tv_recv),
                   <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (<a class="code" href="ospfd_8h.html#ae567e64e4e08a38164953b22f9603bfc">OSPF_MIN_LS_ARRIVAL</a>)) &lt; 0)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: LSA is received recently.&quot;</span>);
          <span class="keywordflow">return</span> -1;
        }
    }

  <span class="comment">/* Flood the new LSA out some subset of the router&#39;s interfaces.</span>
<span class="comment">     In some cases (e.g., the state of the receiving interface is</span>
<span class="comment">     DR and the LSA was received from a router other than the</span>
<span class="comment">     Backup DR) the LSA will be flooded back out the receiving</span>
<span class="comment">     interface. */</span>
  lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (<a class="code" href="structospf.html">ospf</a>, nbr, <span class="keyword">new</span>);

<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  <span class="comment">/* Remove the current database copy from all neighbors&#39; Link state</span>
<span class="comment">     retransmission lists.  AS_EXTERNAL and AS_EXTERNAL_OPAQUE does</span>
<span class="comment">                                        ^^^^^^^^^^^^^^^^^^^^^^^</span>
<span class="comment">     not have area ID.</span>
<span class="comment">     All other (even NSSA&#39;s) do have area ID.  */</span>
<span class="preprocessor">#else </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
  <span class="comment">/* Remove the current database copy from all neighbors&#39; Link state</span>
<span class="comment">     retransmission lists.  Only AS_EXTERNAL does not have area ID.</span>
<span class="comment">     All other (even NSSA&#39;s) do have area ID.  */</span>
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
  <span class="keywordflow">if</span> (current)
    {
      <span class="keywordflow">switch</span> (current-&gt;data-&gt;type)
        {
        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
          <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (<a class="code" href="structospf.html">ospf</a>, current);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (nbr-&gt;oi-&gt;area, current);
          <span class="keywordflow">break</span>;
        }
    }

  <span class="comment">/* Do some internal house keeping that is needed here */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a780906236e4b5ef16a4a720a57e3f617">OSPF_LSA_RECEIVED</a>);
  <a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (<a class="code" href="structospf.html">ospf</a>, <span class="keyword">new</span>); <span class="comment">/* Let it set the flag */</span>

  <span class="comment">/* Install the new LSA in the link state database</span>
<span class="comment">     (replacing the current database copy).  This may cause the</span>
<span class="comment">     routing table calculation to be scheduled.  In addition,</span>
<span class="comment">     timestamp the new LSA with the current time.  The flooding</span>
<span class="comment">     procedure cannot overwrite the newly installed LSA until</span>
<span class="comment">     MinLSArrival seconds have elapsed. */</span>  

  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (<a class="code" href="structospf.html">ospf</a>, nbr-&gt;oi, <span class="keyword">new</span>);

  <span class="comment">/* Acknowledge the receipt of the LSA by sending a Link State</span>
<span class="comment">     Acknowledgment packet back out the receiving interface. */</span>
  <span class="keywordflow">if</span> (lsa_ack_flag)
    <a class="code" href="ospf__flood_8c.html#ad5f4da4984c6453f549c42e5ebfec281">ospf_flood_delayed_lsa_ack</a> (nbr, <span class="keyword">new</span>);     

  <span class="comment">/* If this new LSA indicates that it was originated by the</span>
<span class="comment">     receiving router itself, the router must take special action,</span>
<span class="comment">     either updating the LSA or in some cases flushing it from</span>
<span class="comment">     the routing domain. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (<a class="code" href="structospf.html">ospf</a>, <span class="keyword">new</span>))
    <a class="code" href="ospf__flood_8c.html#a6adc4ff40641399b21c1007c9dd14c47">ospf_process_self_originated_lsa</a> (<a class="code" href="structospf.html">ospf</a>, <span class="keyword">new</span>, oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
  <span class="keywordflow">else</span>
    <span class="comment">/* Update statistics value for OSPF-MIB. */</span>
    <a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a9a1f25184f2f198f43b23b1b94f63060">rx_lsa_count</a>++;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2fc26f2e8eb20f36a463122d9b84cc49"></a><!-- doxytag: member="ospf_flood.h::ospf_flood_lsa_area" ref="a2fc26f2e8eb20f36a463122d9b84cc49" args="(struct ospf_lsa *, struct ospf_area *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_flood_lsa_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5cebbc8d7bf55dbb8c83fd8179fbb5d9"></a><!-- doxytag: member="ospf_flood.h::ospf_flood_lsa_as" ref="a5cebbc8d7bf55dbb8c83fd8179fbb5d9" args="(struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_flood_lsa_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae63535f8bbbababf007c76d1451618e6"></a><!-- doxytag: member="ospf_flood.h::ospf_flood_through" ref="ae63535f8bbbababf007c76d1451618e6" args="(struct ospf *, struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_flood_through </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00679">679</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> lsa_ack_flag = 0;
  
  <span class="comment">/* Type-7 LSA&#39;s for NSSA are flooded throughout the AS here, and</span>
<span class="comment">     upon return are updated in the LSDB for Type-7&#39;s.  Later,</span>
<span class="comment">     re-fresh will re-send them (and also, if ABR, packet code will</span>
<span class="comment">     translate to Type-5&#39;s)</span>
<span class="comment">  </span>
<span class="comment">     As usual, Type-5 LSA&#39;s (if not DISCARDED because we are STUB or</span>
<span class="comment">     NSSA) are flooded throughout the AS, and are updated in the</span>
<span class="comment">     global table.  */</span>
<span class="preprocessor">#ifdef ORIGINAL_CODING</span>
<span class="preprocessor"></span>  <span class="keywordflow">switch</span> (lsa-&gt;data-&gt;type)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>: <span class="comment">/* ospf_flood_through_interface ? */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (inbr-&gt;oi-&gt;area, inbr, lsa);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>: <span class="comment">/* Type-5 */</span>
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (<a class="code" href="structospf.html">ospf</a>, inbr, lsa);
      <span class="keywordflow">break</span>;
      <span class="comment">/* Type-7 Only received within NSSA, then flooded */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
      <span class="comment">/* Any P-bit was installed with the Type-7. */</span>
      lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (inbr-&gt;oi-&gt;area, inbr, lsa);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through: LOCAL NSSA FLOOD of Type-7.&quot;</span>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }
<span class="preprocessor">#else </span><span class="comment">/* ORIGINAL_CODING */</span>
  <span class="comment">/*</span>
<span class="comment">   * At the common sub-sub-function &quot;ospf_flood_through_interface()&quot;,</span>
<span class="comment">   * a parameter &quot;inbr&quot; will be used to distinguish the called context</span>
<span class="comment">   * whether the given LSA was received from the neighbor, or the</span>
<span class="comment">   * flooding for the LSA starts from this node (e.g. the LSA was self-</span>
<span class="comment">   * originated, or the LSA is going to be flushed from routing domain).</span>
<span class="comment">   *</span>
<span class="comment">   * So, for consistency reasons, this function &quot;ospf_flood_through()&quot;</span>
<span class="comment">   * should also allow the usage that the given &quot;inbr&quot; parameter to be</span>
<span class="comment">   * NULL. If we do so, corresponding AREA parameter should be referred</span>
<span class="comment">   * by &quot;lsa-&gt;area&quot;, instead of &quot;inbr-&gt;oi-&gt;area&quot;.</span>
<span class="comment">   */</span>
  <span class="keywordflow">switch</span> (lsa-&gt;data-&gt;type)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>: <span class="comment">/* Type-5 */</span>
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (<a class="code" href="structospf.html">ospf</a>, inbr, lsa);
      <span class="keywordflow">break</span>;
      <span class="comment">/* Type-7 Only received within NSSA, then flooded */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
      <span class="comment">/* Any P-bit was installed with the Type-7. */</span>

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through: LOCAL NSSA FLOOD of Type-7.&quot;</span>);
      <span class="comment">/* Fallthrough */</span>
    <span class="keywordflow">default</span>:
      lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (lsa-&gt;area, inbr, lsa);
      <span class="keywordflow">break</span>;
    }
<span class="preprocessor">#endif </span><span class="comment">/* ORIGINAL_CODING */</span>
  
  <span class="keywordflow">return</span> (lsa_ack_flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a29849a1f1daed4bd4ca28dd083576e45"></a><!-- doxytag: member="ospf_flood.h::ospf_flood_through_area" ref="a29849a1f1daed4bd4ca28dd083576e45" args="(struct ospf_area *, struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_flood_through_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00561">561</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keywordtype">int</span> lsa_ack_flag = 0;

  <span class="comment">/* All other types are specific to a single area (Area A).  The</span>
<span class="comment">     eligible interfaces are all those interfaces attaching to the</span>
<span class="comment">     Area A.  If Area A is the backbone, this includes all the virtual</span>
<span class="comment">     links.  */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;oiflist, node, nnode, oi))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;area_id.s_addr != <a class="code" href="ospfd_8h.html#a1f0c659cdd89cdac0e14ea0fdec8b7f7">OSPF_AREA_BACKBONE</a> &amp;&amp;
      oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> ==  <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>) 
    <span class="keywordflow">continue</span>;

<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> ((lsa-&gt;data-&gt;type == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>) &amp;&amp; (lsa-&gt;oi != oi))
        {
          <span class="comment">/*</span>
<span class="comment">           * Link local scoped Opaque-LSA should only be flooded</span>
<span class="comment">           * for the link on which the LSA has received.</span>
<span class="comment">           */</span>
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type-9 Opaque-LSA: lsa-&gt;oi(%p) != oi(%p)&quot;</span>, lsa-&gt;oi, oi);
          <span class="keywordflow">continue</span>;
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

      <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">ospf_flood_through_interface</a> (oi, inbr, lsa))
    lsa_ack_flag = 1;
    }

  <span class="keywordflow">return</span> (lsa_ack_flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a608687efecd7b5cb146b6761492b0ebe"></a><!-- doxytag: member="ospf_flood.h::ospf_flood_through_as" ref="a608687efecd7b5cb146b6761492b0ebe" args="(struct ospf *, struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_flood_through_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00599">599</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keywordtype">int</span> lsa_ack_flag;

  lsa_ack_flag = 0;

  <span class="comment">/* The incoming LSA is type 5 or type 7  (AS-EXTERNAL or AS-NSSA )</span>
<span class="comment"></span>
<span class="comment">    Divert the Type-5 LSA&#39;s to all non-NSSA/STUB areas</span>
<span class="comment"></span>
<span class="comment">    Divert the Type-7 LSA&#39;s to all NSSA areas</span>
<span class="comment"></span>
<span class="comment">     AS-external-LSAs are flooded throughout the entire AS, with the</span>
<span class="comment">     exception of stub areas (see Section 3.6).  The eligible</span>
<span class="comment">     interfaces are all the router&#39;s interfaces, excluding virtual</span>
<span class="comment">     links and those interfaces attaching to stub areas.  */</span>

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>)) <span class="comment">/* Translated from 7  */</span>
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Flood/AS: NSSA TRANSLATED LSA&quot;</span>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
    {
      <span class="keywordtype">int</span> continue_flag = 0;
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *if_node;
      <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

      <span class="keywordflow">switch</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>)
    {
      <span class="comment">/* Don&#39;t send AS externals into stub areas.  Various types</span>
<span class="comment">             of support for partial stub areas can be implemented</span>
<span class="comment">             here.  NSSA&#39;s will receive Type-7&#39;s that have areas</span>
<span class="comment">             matching the originl LSA. */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>:    <span class="comment">/* Sending Type 5 or 7 into NSSA area */</span>
      <span class="comment">/* Type-7, flood NSSA area */</span>
          <span class="keywordflow">if</span> (lsa-&gt;data-&gt;type == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>
          &amp;&amp; area == lsa-&gt;area)
        <span class="comment">/* We will send it. */</span>
        continue_flag = 0;
          <span class="keywordflow">else</span>
        continue_flag = 1;  <span class="comment">/* Skip this NSSA area for Type-5&#39;s et al */</span>
          <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#acd1fa1b30b89ecd580dc0a836ec92e4d">OSPF_AREA_TYPE_MAX</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>:
      continue_flag = 1;    <span class="comment">/* Skip this area. */</span>
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a43f84c8e8584ccc8b82990d251abec4d">OSPF_AREA_DEFAULT</a>:
    <span class="keywordflow">default</span>:
      <span class="comment">/* No Type-7 into normal area */</span>
          <span class="keywordflow">if</span> (lsa-&gt;data-&gt;type == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>) 
        continue_flag = 1; <span class="comment">/* skip Type-7 */</span>
          <span class="keywordflow">else</span>
        continue_flag = 0;  <span class="comment">/* Do this area. */</span>
      <span class="keywordflow">break</span>;
    }
      
      <span class="comment">/* Do continue for above switch.  Saves a big if then mess */</span>
      <span class="keywordflow">if</span> (continue_flag) 
    <span class="keywordflow">continue</span>; <span class="comment">/* main for-loop */</span>
      
      <span class="comment">/* send to every interface in this area */</span>

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, if_node, oi))
    {
      <span class="comment">/* Skip virtual links */</span>
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> !=  <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
        <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">ospf_flood_through_interface</a> (oi, inbr, lsa)) <span class="comment">/* lsa */</span>
          lsa_ack_flag = 1;
    }
    } <span class="comment">/* main area for-loop */</span>
  
  <span class="keywordflow">return</span> (lsa_ack_flag);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a90953f3c876eec9ce23f619d5e969d81"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_add" ref="a90953f3c876eec9ce23f619d5e969d81" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_request_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00763">763</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/*</span>
<span class="comment">   * We cannot make use of the newly introduced callback function</span>
<span class="comment">   * &quot;lsdb-&gt;new_lsa_hook&quot; to replace debug output below, just because</span>
<span class="comment">   * it seems no simple and smart way to pass neighbor information to</span>
<span class="comment">   * the common function &quot;ospf_lsdb_add()&quot; -- endo.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RqstL(%lu)++, NBR(%s), LSA[%s]&quot;</span>,
                  <a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (nbr),
                  inet_ntoa (nbr-&gt;router_id), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));

  <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (&amp;nbr-&gt;ls_req, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9d2874ac4fbe1b8794dbcdf2f8e1e007"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_count" ref="a9d2874ac4fbe1b8794dbcdf2f8e1e007" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long ospf_ls_request_count </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00780">780</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aac22a3316876f4a266649e4f2d902973">ospf_lsdb_count_all</a> (&amp;nbr-&gt;ls_req);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a89fa735e5273828f62685a1cee13386a"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_delete" ref="a89fa735e5273828f62685a1cee13386a" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_request_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00793">793</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (nbr-&gt;ls_req_last == lsa)
    {
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;ls_req_last);
      nbr-&gt;ls_req_last = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))    <span class="comment">/* -- endo. */</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RqstL(%lu)--, NBR(%s), LSA[%s]&quot;</span>,
                  <a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (nbr),
                  inet_ntoa (nbr-&gt;router_id), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));

  <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;ls_req, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9dba7e2c72b557bfceede70f3a47f7a1"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_delete_all" ref="a9dba7e2c72b557bfceede70f3a47f7a1" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_request_delete_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00811">811</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;ls_req_last);
  nbr-&gt;ls_req_last = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="ospf__lsdb_8c.html#aac04ea2aea1f1895b940fe30fa531a5f">ospf_lsdb_delete_all</a> (&amp;nbr-&gt;ls_req);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8b8b24b506a707a784906dd292f93abe"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_free" ref="a8b8b24b506a707a784906dd292f93abe" args="(struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_request_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a49e2cb3f510170eb1366f9cd2c8b1203"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_isempty" ref="a49e2cb3f510170eb1366f9cd2c8b1203" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_ls_request_isempty </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00786">786</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a2b5faf4a42f54a62fcf14d5a7ff0c481">ospf_lsdb_isempty</a> (&amp;nbr-&gt;ls_req);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a27126767a3610710aa8b3b227a2e50d9"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_lookup" ref="a27126767a3610710aa8b3b227a2e50d9" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_ls_request_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00820">820</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (&amp;nbr-&gt;ls_req, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a85cb5650679fa29e7c83cee9a320f681"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_request_new" ref="a85cb5650679fa29e7c83cee9a320f681" args="(struct lsa_header *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_ls_request_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00826">826</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (<a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a23094df82d33c8162134f1ece488a1f1"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_add" ref="a23094df82d33c8162134f1ece488a1f1" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00859">859</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old;

  old = <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (old, lsa) &lt; 0)
    {
      <span class="keywordflow">if</span> (old)
    {
      old-&gt;<a class="code" href="structospf__lsa.html#a752d828403f41dafa1bd85a443f51d5a">retransmit_counter</a>--;
      <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;ls_rxmt, old);
    }
      lsa-&gt;retransmit_counter++;
      <span class="comment">/*</span>
<span class="comment">       * We cannot make use of the newly introduced callback function</span>
<span class="comment">       * &quot;lsdb-&gt;new_lsa_hook&quot; to replace debug output below, just because</span>
<span class="comment">       * it seems no simple and smart way to pass neighbor information to</span>
<span class="comment">       * the common function &quot;ospf_lsdb_add()&quot; -- endo.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RXmtL(%lu)++, NBR(%s), LSA[%s]&quot;</span>,
                     <a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr),
             inet_ntoa (nbr-&gt;router_id), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
      <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (&amp;nbr-&gt;ls_rxmt, lsa);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9176799326d0c62d03e3ca10634d8e8e"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_add_nbr_all" ref="a9176799326d0c62d03e3ca10634d8e8e" args="(struct ospf_interface *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_add_nbr_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aaf6abd7949694eb30bdc3b58245dfa14"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_clear" ref="aaf6abd7949694eb30bdc3b58245dfa14" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_clear </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00904">904</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  lsdb = &amp;nbr-&gt;ls_rxmt;

  <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
    {
      <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table = lsdb-&gt;<a class="code" href="structospf__lsdb.html#a0af6d8740509eb2ed0ad1aa9c6599d56">type</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structospf__lsdb.html#ac02ad39566534869219d3e9d942bf565">db</a>;
      <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
      <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;

      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((lsa = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (nbr, lsa);
    }

  <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;ls_req_last);
  nbr-&gt;ls_req_last = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9e0a883c21681d1bdd51202f87c55463"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_count" ref="a9e0a883c21681d1bdd51202f87c55463" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long ospf_ls_retransmit_count </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00840">840</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aac22a3316876f4a266649e4f2d902973">ospf_lsdb_count_all</a> (&amp;nbr-&gt;ls_rxmt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af88789a37ddad181d56c060286d5b4d0"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_count_self" ref="af88789a37ddad181d56c060286d5b4d0" args="(struct ospf_neighbor *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long ospf_ls_retransmit_count_self </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00846">846</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#acbcaa15968fddc5e037aa7a18109fadd">ospf_lsdb_count_self</a> (&amp;nbr-&gt;ls_rxmt, lsa_type);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1c144ffb5a7c6bf24399399d2644ae9"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_delete" ref="ab1c144ffb5a7c6bf24399399d2644ae9" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00889">889</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa))
    {
      lsa-&gt;retransmit_counter--;  
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))        <span class="comment">/* -- endo. */</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RXmtL(%lu)--, NBR(%s), LSA[%s]&quot;</span>,
                     <a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr),
             inet_ntoa (nbr-&gt;router_id), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
      <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;ls_rxmt, lsa);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae8c2f9f48504f891db852e18b8627e4e"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_delete_nbr_area" ref="ae8c2f9f48504f891db852e18b8627e4e" args="(struct ospf_area *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_delete_nbr_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00955">955</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;oiflist, node, nnode, oi))
    <a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">ospf_ls_retransmit_delete_nbr_if</a> (oi, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa065c2148efdea34e59d6db2fb3c725d"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_delete_nbr_as" ref="aa065c2148efdea34e59d6db2fb3c725d" args="(struct ospf *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ls_retransmit_delete_nbr_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00966">966</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="structospf.html">ospf</a>-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
    <a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">ospf_ls_retransmit_delete_nbr_if</a> (oi, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa284b03ddb9bd18e5b1ef6ad7c23fe53"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_isempty" ref="aa284b03ddb9bd18e5b1ef6ad7c23fe53" args="(struct ospf_neighbor *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_ls_retransmit_isempty </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00852">852</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a2b5faf4a42f54a62fcf14d5a7ff0c481">ospf_lsdb_isempty</a> (&amp;nbr-&gt;ls_rxmt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a64fb70fd057afea0ff5500214207658b"></a><!-- doxytag: member="ospf_flood.h::ospf_ls_retransmit_lookup" ref="a64fb70fd057afea0ff5500214207658b" args="(struct ospf_neighbor *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_ls_retransmit_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00928">928</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (&amp;nbr-&gt;ls_rxmt, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeb4cc897fdc8e4e3d99008c20675f088"></a><!-- doxytag: member="ospf_flood.h::ospf_lsa_flush_area" ref="aeb4cc897fdc8e4e3d99008c20675f088" args="(struct ospf_lsa *, struct ospf_area *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_flush_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00980">980</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  lsa-&gt;data-&gt;ls_age = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, lsa);
  <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>-&gt;ospf, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6bee8552f1167cb8cc1d4b5101e4df3a"></a><!-- doxytag: member="ospf_flood.h::ospf_lsa_flush_as" ref="a6bee8552f1167cb8cc1d4b5101e4df3a" args="(struct ospf *, struct ospf_lsa *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_flush_as </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__flood_8c_source.html#l00988">988</a> of file <a class="el" href="ospf__flood_8c_source.html">ospf_flood.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  lsa-&gt;data-&gt;ls_age = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
  <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (<a class="code" href="structospf.html">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, lsa);
  <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (<a class="code" href="structospf.html">ospf</a>, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afcbf84e6f5791298594bbd311a3079d0"></a><!-- doxytag: member="ospf_flood.h::ospf_lsdb_init" ref="afcbf84e6f5791298594bbd311a3079d0" args="(struct ospf_lsdb *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsdb_init </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsdb_8c_source.html#l00047">47</a> of file <a class="el" href="ospf__lsdb_8c_source.html">ospf_lsdb.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  
  <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
    lsdb-&gt;type[i].db = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__flood_8h.html">ospf_flood.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:28 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
