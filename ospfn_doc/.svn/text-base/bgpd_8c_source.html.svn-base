<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgpd.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgpd_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgpd.c</div>  </div>
</div>
<div class="contents">
<a href="bgpd_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP-4, BGP-4+ daemon program</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1996, 97, 98, 99, 2000 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="buffer_8h.html">buffer.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="network_8h.html">network.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="filter_8h.html">filter.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="routemap_8h.html">routemap.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="str_8h.html">str.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="plist_8h.html">plist.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="workqueue_8h.html">workqueue.h</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="bgp__table_8h.html">bgpd/bgp_table.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="bgp__dump_8h.html">bgpd/bgp_dump.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="bgp__community_8h.html">bgpd/bgp_community.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="bgp__regex_8h.html">bgpd/bgp_regex.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="bgp__clist_8h.html">bgpd/bgp_clist.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="bgp__fsm_8h.html">bgpd/bgp_fsm.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="bgp__packet_8h.html">bgpd/bgp_packet.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="bgp__zebra_8h.html">bgpd/bgp_zebra.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="bgp__open_8h.html">bgpd/bgp_open.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="bgp__filter_8h.html">bgpd/bgp_filter.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="bgp__nexthop_8h.html">bgpd/bgp_nexthop.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="bgp__damp_8h.html">bgpd/bgp_damp.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="bgp__mplsvpn_8h.html">bgpd/bgp_mplsvpn.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="bgp__advertise_8h.html">bgpd/bgp_advertise.h</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="bgp__network_8h.html">bgpd/bgp_network.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="bgp__vty_8h.html">bgpd/bgp_vty.h</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="bgp__snmp_8h.html">bgpd/bgp_snmp.h</a>&quot;</span>
<a name="l00062"></a>00062 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/* BGP process wide configuration.  */</span>
<a name="l00065"></a><a class="code" href="bgpd_8c.html#a65ecd7a9ec0c8f969263cd6aa0452d69">00065</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__master.html">bgp_master</a> <a class="code" href="structbgp__master.html">bgp_master</a>;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="keyword">extern</span> <span class="keyword">struct </span>in_addr <a class="code" href="bgp__vty_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a>;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">/* BGP process wide configuration pointer to export.  */</span>
<a name="l00070"></a><a class="code" href="bgpd_8h.html#adeab9451f33cb80e3dad19688138d378">00070</a> <span class="keyword">struct </span><a class="code" href="structbgp__master.html">bgp_master</a> *<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">/* BGP community-list.  */</span>
<a name="l00073"></a><a class="code" href="bgpd_8c.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">00073</a> <span class="keyword">struct </span><a class="code" href="structcommunity__list__handler.html">community_list_handler</a> *<a class="code" href="bgp__clist_8h.html#a8ce0bedf381f9a751d2544b7b3bdcd4a">bgp_clist</a>;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">/* BGP global flag manipulation.  */</span>
<a name="l00076"></a>00076 <span class="keywordtype">int</span>
<a name="l00077"></a><a class="code" href="bgpd_8h.html#a376010a6bfc7913db83d4ab657ca654d">00077</a> <a class="code" href="bgpd_8c.html#ab392af01542bb12c0dc9afa6b0950b7c">bgp_option_set</a> (<span class="keywordtype">int</span> flag)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079   <span class="keywordflow">switch</span> (flag)
<a name="l00080"></a>00080     {
<a name="l00081"></a>00081     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afc24478ef33bb7a27704472d7fd043c4">BGP_OPT_NO_FIB</a>:
<a name="l00082"></a>00082     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>:
<a name="l00083"></a>00083     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>:
<a name="l00084"></a>00084       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bm-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
<a name="l00085"></a>00085       <span class="keywordflow">break</span>;
<a name="l00086"></a>00086     <span class="keywordflow">default</span>:
<a name="l00087"></a>00087       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089   <span class="keywordflow">return</span> 0;
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="keywordtype">int</span>
<a name="l00093"></a><a class="code" href="bgpd_8h.html#acba4c18856171725eb9be21157d472c8">00093</a> <a class="code" href="bgpd_8c.html#a3249e23250280c76087965fed358b866">bgp_option_unset</a> (<span class="keywordtype">int</span> flag)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095   <span class="keywordflow">switch</span> (flag)
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>:
<a name="l00098"></a>00098       <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>) &gt; 1)
<a name="l00099"></a>00099     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac414dfc71d79e975bbfa218c4ab8605a">BGP_ERR_MULTIPLE_INSTANCE_USED</a>;
<a name="l00100"></a>00100       <span class="comment">/* Fall through.  */</span>
<a name="l00101"></a>00101     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afc24478ef33bb7a27704472d7fd043c4">BGP_OPT_NO_FIB</a>:
<a name="l00102"></a>00102     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>:
<a name="l00103"></a>00103       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bm-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
<a name="l00104"></a>00104       <span class="keywordflow">break</span>;
<a name="l00105"></a>00105     <span class="keywordflow">default</span>:
<a name="l00106"></a>00106       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108   <span class="keywordflow">return</span> 0;
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="keywordtype">int</span>
<a name="l00112"></a><a class="code" href="bgpd_8h.html#a3e33d5d40a9ce0a432284d3d786e26e3">00112</a> <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<span class="keywordtype">int</span> flag)
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114   <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bm-&gt;<a class="code" href="structbgp__master.html#a761aacf8ea3a69a63dddd2c73f672c3c">options</a>, flag);
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">/* BGP flag manipulation.  */</span>
<a name="l00118"></a>00118 <span class="keywordtype">int</span>
<a name="l00119"></a><a class="code" href="bgpd_8h.html#a865a066cdcbb17745be39ec69474e43e">00119</a> <a class="code" href="bgpd_8c.html#ab7a06ec3b706252810fd639d03b31fe1">bgp_flag_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> flag)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
<a name="l00122"></a>00122   <span class="keywordflow">return</span> 0;
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="keywordtype">int</span>
<a name="l00126"></a><a class="code" href="bgpd_8h.html#ab60c4a0584992fee5580fe39ebb46903">00126</a> <a class="code" href="bgpd_8c.html#a12be440f9d0b2a52fbe48c83088a837d">bgp_flag_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> flag)
<a name="l00127"></a>00127 {
<a name="l00128"></a>00128   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
<a name="l00129"></a>00129   <span class="keywordflow">return</span> 0;
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="keywordtype">int</span>
<a name="l00133"></a><a class="code" href="bgpd_8h.html#a6ad66c012cf358780464df623761da1d">00133</a> <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> flag)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, flag);
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">/* Internal function to set BGP structure configureation flag.  */</span>
<a name="l00139"></a>00139 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00140"></a><a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">00140</a> <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> <a class="code" href="structconfig.html">config</a>)
<a name="l00141"></a>00141 {
<a name="l00142"></a>00142   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, config);
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00146"></a><a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">00146</a> <a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> <a class="code" href="structconfig.html">config</a>)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, config);
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00152"></a><a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">00152</a> <a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keywordtype">int</span> <a class="code" href="structconfig.html">config</a>)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154   <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, config);
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="comment">/* Set BGP router identifier. */</span>
<a name="l00158"></a>00158 <span class="keywordtype">int</span>
<a name="l00159"></a><a class="code" href="bgpd_8h.html#a1b8325efbeb5c6eb0baffd66712a32e9">00159</a> <a class="code" href="bgpd_8c.html#a95a081ca99d2713d2405c00786db1193">bgp_router_id_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> in_addr *<span class="keywordtype">id</span>)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00162"></a>00162   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>)
<a name="l00165"></a>00165       &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, <span class="keywordtype">id</span>))
<a name="l00166"></a>00166     <span class="keywordflow">return</span> 0;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, <span class="keywordtype">id</span>);
<a name="l00169"></a>00169   <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>);
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   <span class="comment">/* Set all peer&#39;s local identifier with this value. */</span>
<a name="l00172"></a>00172   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00173"></a>00173     {
<a name="l00174"></a>00174       <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>, <span class="keywordtype">id</span>);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00177"></a>00177        {
<a name="l00178"></a>00178          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6dc98804d3512fd8ee2afd54fe76d759">PEER_DOWN_RID_CHANGE</a>;
<a name="l00179"></a>00179          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00180"></a>00180                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00181"></a>00181        }
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183   <span class="keywordflow">return</span> 0;
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="comment">/* BGP&#39;s cluster-id control. */</span>
<a name="l00187"></a>00187 <span class="keywordtype">int</span>
<a name="l00188"></a><a class="code" href="bgpd_8h.html#a623943a0a48f3ce96a77004b3108f672">00188</a> <a class="code" href="bgpd_8c.html#a341222b5ea5b3772a952a52e79bba6cd">bgp_cluster_id_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> in_addr *cluster_id)
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00191"></a>00191   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
<a name="l00194"></a>00194       &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>, cluster_id))
<a name="l00195"></a>00195     <span class="keywordflow">return</span> 0;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>, cluster_id);
<a name="l00198"></a>00198   <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200   <span class="comment">/* Clear all IBGP peer. */</span>
<a name="l00201"></a>00201   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00202"></a>00202     {
<a name="l00203"></a>00203       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00204"></a>00204     <span class="keywordflow">continue</span>;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00207"></a>00207        {
<a name="l00208"></a>00208          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ae187eb186064d2d9ff73c02556a511ee">PEER_DOWN_CLID_CHANGE</a>;
<a name="l00209"></a>00209          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00210"></a>00210                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00211"></a>00211        }
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213   <span class="keywordflow">return</span> 0;
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="keywordtype">int</span>
<a name="l00217"></a><a class="code" href="bgpd_8h.html#a74ebdf24af6d578738035b553771db9d">00217</a> <a class="code" href="bgpd_8c.html#a58cc6036dac01f3e5892d199f756ce72">bgp_cluster_id_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00218"></a>00218 {
<a name="l00219"></a>00219   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00220"></a>00220   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>))
<a name="l00223"></a>00223     <span class="keywordflow">return</span> 0;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>.s_addr = 0;
<a name="l00226"></a>00226   <a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (bgp, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <span class="comment">/* Clear all IBGP peer. */</span>
<a name="l00229"></a>00229   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00230"></a>00230     {
<a name="l00231"></a>00231       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00232"></a>00232     <span class="keywordflow">continue</span>;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00235"></a>00235        {
<a name="l00236"></a>00236          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ae187eb186064d2d9ff73c02556a511ee">PEER_DOWN_CLID_CHANGE</a>;
<a name="l00237"></a>00237          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00238"></a>00238                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00239"></a>00239        }
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241   <span class="keywordflow">return</span> 0;
<a name="l00242"></a>00242 }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 <span class="comment">/* time_t value that is monotonicly increasing</span>
<a name="l00245"></a>00245 <span class="comment"> * and uneffected by adjustments to system clock</span>
<a name="l00246"></a>00246 <span class="comment"> */</span>
<a name="l00247"></a><a class="code" href="bgpd_8h.html#a57400e51b671bd48e19b86df877be1e9">00247</a> time_t <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> (<span class="keywordtype">void</span>)
<a name="l00248"></a>00248 {
<a name="l00249"></a>00249   <span class="keyword">struct </span>timeval tv;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a>(<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;tv);
<a name="l00252"></a>00252   <span class="keywordflow">return</span> tv.tv_sec;
<a name="l00253"></a>00253 }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="comment">/* BGP timer configuration.  */</span>
<a name="l00256"></a>00256 <span class="keywordtype">int</span>
<a name="l00257"></a><a class="code" href="bgpd_8h.html#a550113cccda3651499c3b9523ac2f711">00257</a> <a class="code" href="bgpd_8c.html#ae87980b465ace17b18089991d4579648">bgp_timers_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, u_int32_t keepalive, u_int32_t <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>)
<a name="l00258"></a>00258 {
<a name="l00259"></a>00259   bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = (keepalive &lt; holdtime / 3 
<a name="l00260"></a>00260                 ? keepalive : holdtime / 3);
<a name="l00261"></a>00261   bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263   <span class="keywordflow">return</span> 0;
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 <span class="keywordtype">int</span>
<a name="l00267"></a><a class="code" href="bgpd_8h.html#aed19bf0711fa5d68115f2a020dfd1a3d">00267</a> <a class="code" href="bgpd_8c.html#a0931c3901f337a3c963647efcdf0cb8b">bgp_timers_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00268"></a>00268 {
<a name="l00269"></a>00269   bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>;
<a name="l00270"></a>00270   bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="keywordflow">return</span> 0;
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="comment">/* BGP confederation configuration.  */</span>
<a name="l00276"></a>00276 <span class="keywordtype">int</span>
<a name="l00277"></a><a class="code" href="bgpd_8h.html#a6a9fb79d6b4474910f25bb91aff3f27a">00277</a> <a class="code" href="bgpd_8c.html#a8634ba5308614e954f34100dc334c182">bgp_confederation_id_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)
<a name="l00278"></a>00278 {
<a name="l00279"></a>00279   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00280"></a>00280   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00281"></a>00281   <span class="keywordtype">int</span> already_confed;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="keywordflow">if</span> (as == 0)
<a name="l00284"></a>00284     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ab19c32ba33df13784a430af4238676b4">BGP_ERR_INVALID_AS</a>;
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="comment">/* Remember - were we doing confederation before? */</span>
<a name="l00287"></a>00287   already_confed = <a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);
<a name="l00288"></a>00288   bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a> = as;
<a name="l00289"></a>00289   <a class="code" href="bgpd_8c.html#acdd45b819adee33f52a76647be770a38">bgp_config_set</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291   <span class="comment">/* If we were doing confederation already, this is just an external</span>
<a name="l00292"></a>00292 <span class="comment">     AS change.  Just Reset EBGP sessions, not CONFED sessions.  If we</span>
<a name="l00293"></a>00293 <span class="comment">     were not doing confederation before, reset all EBGP sessions.  */</span>
<a name="l00294"></a>00294   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00295"></a>00295     {
<a name="l00296"></a>00296       <span class="comment">/* We&#39;re looking for peers who&#39;s AS is not local or part of our</span>
<a name="l00297"></a>00297 <span class="comment">     confederation.  */</span>
<a name="l00298"></a>00298       <span class="keywordflow">if</span> (already_confed)
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00301"></a>00301         {
<a name="l00302"></a>00302           peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = as;
<a name="l00303"></a>00303           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00304"></a>00304                {
<a name="l00305"></a>00305                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
<a name="l00306"></a>00306                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00307"></a>00307                               <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00308"></a>00308                }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310           <span class="keywordflow">else</span>
<a name="l00311"></a>00311         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00312"></a>00312         }
<a name="l00313"></a>00313     }
<a name="l00314"></a>00314       <span class="keywordflow">else</span>
<a name="l00315"></a>00315     {
<a name="l00316"></a>00316       <span class="comment">/* Not doign confederation before, so reset every non-local</span>
<a name="l00317"></a>00317 <span class="comment">         session */</span>
<a name="l00318"></a>00318       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00319"></a>00319         {
<a name="l00320"></a>00320           <span class="comment">/* Reset the local_as to be our EBGP one */</span>
<a name="l00321"></a>00321           <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00322"></a>00322         peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = as;
<a name="l00323"></a>00323           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00324"></a>00324                {
<a name="l00325"></a>00325                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
<a name="l00326"></a>00326                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00327"></a>00327                               <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00328"></a>00328                }
<a name="l00329"></a>00329           <span class="keywordflow">else</span>
<a name="l00330"></a>00330         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00331"></a>00331         }
<a name="l00332"></a>00332     }
<a name="l00333"></a>00333     }
<a name="l00334"></a>00334   <span class="keywordflow">return</span> 0;
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 <span class="keywordtype">int</span>
<a name="l00338"></a><a class="code" href="bgpd_8h.html#a0530005d9c09654bcb3a5df6f0d21596">00338</a> <a class="code" href="bgpd_8c.html#a71ec39b6ecf9756a16ea2eefc6b47991">bgp_confederation_id_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00339"></a>00339 {
<a name="l00340"></a>00340   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00341"></a>00341   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a> = 0;
<a name="l00344"></a>00344   <a class="code" href="bgpd_8c.html#ac4f4bde12db9716128e3dfe02d6c20c4">bgp_config_unset</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>);
<a name="l00345"></a>00345       
<a name="l00346"></a>00346   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348       <span class="comment">/* We&#39;re looking for peers who&#39;s AS is not local */</span>
<a name="l00349"></a>00349       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00350"></a>00350     {
<a name="l00351"></a>00351       peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l00352"></a>00352       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00353"></a>00353            {
<a name="l00354"></a>00354              peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d220f948963cbe0e60c749faebb8fd5">PEER_DOWN_CONFED_ID_CHANGE</a>;
<a name="l00355"></a>00355              <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00356"></a>00356                               <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00357"></a>00357            }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359       <span class="keywordflow">else</span>
<a name="l00360"></a>00360         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00361"></a>00361     }
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363   <span class="keywordflow">return</span> 0;
<a name="l00364"></a>00364 }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 <span class="comment">/* Is an AS part of the confed or not? */</span>
<a name="l00367"></a>00367 <span class="keywordtype">int</span>
<a name="l00368"></a><a class="code" href="bgpd_8h.html#a3115acb859a9ef067dcb9ff2a0f93754">00368</a> <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)
<a name="l00369"></a>00369 {
<a name="l00370"></a>00370   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00371"></a>00371 
<a name="l00372"></a>00372   <span class="keywordflow">if</span> (! bgp)
<a name="l00373"></a>00373     <span class="keywordflow">return</span> 0;
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
<a name="l00376"></a>00376     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i] == as)
<a name="l00377"></a>00377       <span class="keywordflow">return</span> 1;
<a name="l00378"></a>00378   
<a name="l00379"></a>00379   <span class="keywordflow">return</span> 0;
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 <span class="comment">/* Add an AS to the confederation set.  */</span>
<a name="l00383"></a>00383 <span class="keywordtype">int</span>
<a name="l00384"></a><a class="code" href="bgpd_8h.html#aeb2299cf3989b0218c1cb04c508f5906">00384</a> <a class="code" href="bgpd_8c.html#ae1e4e9e26cc2fd322cdb8b405b617275">bgp_confederation_peers_add</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)
<a name="l00385"></a>00385 {
<a name="l00386"></a>00386   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00387"></a>00387   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="keywordflow">if</span> (! bgp)
<a name="l00390"></a>00390     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1d00d5178ab602009cb2918fac9edf1b">BGP_ERR_INVALID_BGP</a>;
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as)
<a name="l00393"></a>00393     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ab19c32ba33df13784a430af4238676b4">BGP_ERR_INVALID_AS</a>;
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, as))
<a name="l00396"></a>00396     <span class="keywordflow">return</span> -1;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>)
<a name="l00399"></a>00399     bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, 
<a name="l00400"></a>00400                   bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>,
<a name="l00401"></a>00401                   (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> + 1) * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));
<a name="l00402"></a>00402   <span class="keywordflow">else</span>
<a name="l00403"></a>00403     bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, 
<a name="l00404"></a>00404                  (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> + 1) * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>] = as;
<a name="l00407"></a>00407   bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>++;
<a name="l00408"></a>00408 
<a name="l00409"></a>00409   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l00410"></a>00410     {
<a name="l00411"></a>00411       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00412"></a>00412     {
<a name="l00413"></a>00413       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == as)
<a name="l00414"></a>00414         {
<a name="l00415"></a>00415           peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l00416"></a>00416           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00417"></a>00417                {
<a name="l00418"></a>00418                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d45f38dac363e4f656eff0364acbe0c">PEER_DOWN_CONFED_PEER_CHANGE</a>;
<a name="l00419"></a>00419                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00420"></a>00420                                   <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00421"></a>00421                }
<a name="l00422"></a>00422           <span class="keywordflow">else</span>
<a name="l00423"></a>00423             <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00424"></a>00424         }
<a name="l00425"></a>00425     }
<a name="l00426"></a>00426     }
<a name="l00427"></a>00427   <span class="keywordflow">return</span> 0;
<a name="l00428"></a>00428 }
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 <span class="comment">/* Delete an AS from the confederation set.  */</span>
<a name="l00431"></a>00431 <span class="keywordtype">int</span>
<a name="l00432"></a><a class="code" href="bgpd_8h.html#aa87094fab415b3d2fa6e741f9a6b69b2">00432</a> <a class="code" href="bgpd_8c.html#ad445ede26e20d26248fb3d107f1491c0">bgp_confederation_peers_remove</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as)
<a name="l00433"></a>00433 {
<a name="l00434"></a>00434   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00435"></a>00435   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00436"></a>00436   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00437"></a>00437   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00438"></a>00438 
<a name="l00439"></a>00439   <span class="keywordflow">if</span> (! bgp)
<a name="l00440"></a>00440     <span class="keywordflow">return</span> -1;
<a name="l00441"></a>00441 
<a name="l00442"></a>00442   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, as))
<a name="l00443"></a>00443     <span class="keywordflow">return</span> -1;
<a name="l00444"></a>00444 
<a name="l00445"></a>00445   <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
<a name="l00446"></a>00446     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i] == as)
<a name="l00447"></a>00447       <span class="keywordflow">for</span>(j = i + 1; j &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; j++)
<a name="l00448"></a>00448     bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[j - 1] = bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[j];
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>--;
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   if (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> == 0)
<a name="l00453"></a>00453     {
<a name="l00454"></a>00454       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>)
<a name="l00455"></a>00455     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>, bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>);
<a name="l00456"></a>00456       bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00457"></a>00457     }
<a name="l00458"></a>00458   <span class="keywordflow">else</span>
<a name="l00459"></a>00459     bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a> = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baed165b31a072edc94e3916a381da28ad">MTYPE_BGP_CONFED_LIST</a>,
<a name="l00460"></a>00460                   bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>,
<a name="l00461"></a>00461                   bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> * sizeof (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>));
<a name="l00462"></a>00462 
<a name="l00463"></a>00463   <span class="comment">/* Now reset any peer who&#39;s remote AS has just been removed from the</span>
<a name="l00464"></a>00464 <span class="comment">     CONFED */</span>
<a name="l00465"></a>00465   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l00466"></a>00466     {
<a name="l00467"></a>00467       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l00468"></a>00468     {
<a name="l00469"></a>00469       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == as)
<a name="l00470"></a>00470         {
<a name="l00471"></a>00471           peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
<a name="l00472"></a>00472           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00473"></a>00473                {
<a name="l00474"></a>00474                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a3d45f38dac363e4f656eff0364acbe0c">PEER_DOWN_CONFED_PEER_CHANGE</a>;
<a name="l00475"></a>00475                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00476"></a>00476                                   <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00477"></a>00477                }
<a name="l00478"></a>00478           <span class="keywordflow">else</span>
<a name="l00479"></a>00479         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00480"></a>00480         }
<a name="l00481"></a>00481     }
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keywordflow">return</span> 0;
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487 <span class="comment">/* Local preference configuration.  */</span>
<a name="l00488"></a>00488 <span class="keywordtype">int</span>
<a name="l00489"></a><a class="code" href="bgpd_8h.html#acfeb535acda92eb76b586cd8b31695be">00489</a> <a class="code" href="bgpd_8c.html#aa1602d8bb59616ec52a449dd588304e1">bgp_default_local_preference_set</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, u_int32_t local_pref)
<a name="l00490"></a>00490 {
<a name="l00491"></a>00491   <span class="keywordflow">if</span> (! bgp)
<a name="l00492"></a>00492     <span class="keywordflow">return</span> -1;
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = local_pref;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <span class="keywordflow">return</span> 0;
<a name="l00497"></a>00497 }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 <span class="keywordtype">int</span>
<a name="l00500"></a><a class="code" href="bgpd_8h.html#a6c1333ca273016fdbc48994560248bbe">00500</a> <a class="code" href="bgpd_8c.html#acaec882d19a370590305157ce569a748">bgp_default_local_preference_unset</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00501"></a>00501 {
<a name="l00502"></a>00502   <span class="keywordflow">if</span> (! bgp)
<a name="l00503"></a>00503     <span class="keywordflow">return</span> -1;
<a name="l00504"></a>00504 
<a name="l00505"></a>00505   bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>;
<a name="l00506"></a>00506 
<a name="l00507"></a>00507   <span class="keywordflow">return</span> 0;
<a name="l00508"></a>00508 }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment">/* If peer is RSERVER_CLIENT in at least one address family and is not member</span>
<a name="l00511"></a>00511 <span class="comment">    of a peer_group for that family, return 1.</span>
<a name="l00512"></a>00512 <span class="comment">    Used to check wether the peer is included in list bgp-&gt;rsclient. */</span>
<a name="l00513"></a>00513 <span class="keywordtype">int</span>
<a name="l00514"></a><a class="code" href="bgpd_8h.html#acd3b02ddda41c97838726b9e6169ef89">00514</a> <a class="code" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00515"></a>00515 {
<a name="l00516"></a>00516   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00517"></a>00517   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   <span class="keywordflow">for</span> (i=<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; i &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; i++)
<a name="l00520"></a>00520     <span class="keywordflow">for</span> (j=<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; j &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; j++)
<a name="l00521"></a>00521       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[i][j], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l00522"></a>00522             &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[i][j])
<a name="l00523"></a>00523         <span class="keywordflow">return</span> 1;
<a name="l00524"></a>00524   <span class="keywordflow">return</span> 0;
<a name="l00525"></a>00525 }
<a name="l00526"></a>00526 
<a name="l00527"></a>00527 <span class="comment">/* Peer comparison function for sorting.  */</span>
<a name="l00528"></a>00528 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00529"></a><a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">00529</a> <a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *p1, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *p2)
<a name="l00530"></a>00530 {
<a name="l00531"></a>00531   <span class="keywordflow">return</span> <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (&amp;p1-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, &amp;p2-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>);
<a name="l00532"></a>00532 }
<a name="l00533"></a>00533 
<a name="l00534"></a>00534 <span class="keywordtype">int</span>
<a name="l00535"></a><a class="code" href="bgpd_8h.html#a3eeb1b866f04eccf71ba92a588d8fd65">00535</a> <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t flag)
<a name="l00536"></a>00536 {
<a name="l00537"></a>00537   <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
<a name="l00538"></a>00538 }
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 <span class="comment">/* Reset all address family specific configuration.  */</span>
<a name="l00541"></a>00541 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00542"></a><a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">00542</a> <a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00543"></a>00543 {
<a name="l00544"></a>00544   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00545"></a>00545   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00546"></a>00546   <span class="keywordtype">char</span> orf_name[BUFSIZ];
<a name="l00547"></a>00547 
<a name="l00548"></a>00548   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00549"></a>00549 
<a name="l00550"></a>00550   <span class="comment">/* Clear neighbor filter and route-map */</span>
<a name="l00551"></a>00551   <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; i &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; i++)
<a name="l00552"></a>00552     {
<a name="l00553"></a>00553       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l00554"></a>00554     {
<a name="l00555"></a>00555       free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l00556"></a>00556       filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00557"></a>00557     }
<a name="l00558"></a>00558       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l00559"></a>00559     {
<a name="l00560"></a>00560       free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l00561"></a>00561       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; 
<a name="l00562"></a>00562     }
<a name="l00563"></a>00563       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l00564"></a>00564     {
<a name="l00565"></a>00565       free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l00566"></a>00566       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568    }
<a name="l00569"></a>00569  <span class="keywordflow">for</span> (i = <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>; i &lt; <a class="code" href="bgpd_8h.html#a0211cf02136115bf6674f56fedfc1ea1">RMAP_MAX</a>; i++)
<a name="l00570"></a>00570        {
<a name="l00571"></a>00571       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l00572"></a>00572     {
<a name="l00573"></a>00573       free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l00574"></a>00574       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00575"></a>00575     }
<a name="l00576"></a>00576     }
<a name="l00577"></a>00577 
<a name="l00578"></a>00578   <span class="comment">/* Clear unsuppress map.  */</span>
<a name="l00579"></a>00579   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l00580"></a>00580     free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l00581"></a>00581   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00582"></a>00582   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00583"></a>00583 
<a name="l00584"></a>00584   <span class="comment">/* Clear neighbor&#39;s all address family flags.  */</span>
<a name="l00585"></a>00585   peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi] = 0;
<a name="l00586"></a>00586 
<a name="l00587"></a>00587   <span class="comment">/* Clear neighbor&#39;s all address family sflags. */</span>
<a name="l00588"></a>00588   peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi] = 0;
<a name="l00589"></a>00589 
<a name="l00590"></a>00590   <span class="comment">/* Clear neighbor&#39;s all address family capabilities. */</span>
<a name="l00591"></a>00591   peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi] = 0;
<a name="l00592"></a>00592 
<a name="l00593"></a>00593   <span class="comment">/* Clear ORF info */</span>
<a name="l00594"></a>00594   peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00595"></a>00595   sprintf (orf_name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l00596"></a>00596   <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (orf_name);
<a name="l00597"></a>00597 
<a name="l00598"></a>00598   <span class="comment">/* Set default neighbor send-community.  */</span>
<a name="l00599"></a>00599   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l00600"></a>00600     {
<a name="l00601"></a>00601       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>);
<a name="l00602"></a>00602       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>);
<a name="l00603"></a>00603     }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605   <span class="comment">/* Clear neighbor default_originate_rmap */</span>
<a name="l00606"></a>00606   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l00607"></a>00607     free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l00608"></a>00608   peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00609"></a>00609   peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00610"></a>00610 
<a name="l00611"></a>00611   <span class="comment">/* Clear neighbor maximum-prefix */</span>
<a name="l00612"></a>00612   peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
<a name="l00613"></a>00613   peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = <a class="code" href="bgpd_8h.html#a32738fb2ebfaa1fd4c60766da947b643">MAXIMUM_PREFIX_THRESHOLD_DEFAULT</a>;
<a name="l00614"></a>00614 }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616 <span class="comment">/* peer global config reset */</span>
<a name="l00617"></a>00617 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00618"></a><a class="code" href="bgpd_8c.html#a170112becd0b52c5fe1c41af90881d8e">00618</a> <a class="code" href="bgpd_8c.html#a170112becd0b52c5fe1c41af90881d8e">peer_global_config_reset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00619"></a>00619 {
<a name="l00620"></a>00620   peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
<a name="l00621"></a>00621   peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
<a name="l00622"></a>00622   peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ? 255 : 1);
<a name="l00623"></a>00623   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l00624"></a>00624     {
<a name="l00625"></a>00625       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l00626"></a>00626       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00627"></a>00627     }
<a name="l00628"></a>00628   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l00629"></a>00629     {
<a name="l00630"></a>00630       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l00631"></a>00631       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00632"></a>00632     }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00635"></a>00635     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l00636"></a>00636   <span class="keywordflow">else</span>
<a name="l00637"></a>00637     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l00638"></a>00638 
<a name="l00639"></a>00639   peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> = 0;
<a name="l00640"></a>00640   peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a> = 0;
<a name="l00641"></a>00641   peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
<a name="l00642"></a>00642   peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
<a name="l00643"></a>00643   peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;
<a name="l00644"></a>00644   peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
<a name="l00645"></a>00645 }
<a name="l00646"></a>00646 
<a name="l00647"></a>00647 <span class="comment">/* Check peer&#39;s AS number and determin is this peer IBGP or EBGP */</span>
<a name="l00648"></a>00648 <span class="keywordtype">int</span>
<a name="l00649"></a><a class="code" href="bgpd_8h.html#af16a840274ca5f244f25c1ce3aa70aa2">00649</a> <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00650"></a>00650 {
<a name="l00651"></a>00651   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l00652"></a>00652 
<a name="l00653"></a>00653   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l00654"></a>00654 
<a name="l00655"></a>00655   <span class="comment">/* Peer-group */</span>
<a name="l00656"></a>00656   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l00657"></a>00657     {
<a name="l00658"></a>00658       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l00659"></a>00659     <span class="keywordflow">return</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>);
<a name="l00660"></a>00660       <span class="keywordflow">else</span>
<a name="l00661"></a>00661     {
<a name="l00662"></a>00662       <span class="keyword">struct </span>peer *peer1;
<a name="l00663"></a>00663       peer1 = <a class="code" href="linklist_8c.html#a3260e282746edff39ac90288002c509f">listnode_head</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);
<a name="l00664"></a>00664       <span class="keywordflow">if</span> (peer1)
<a name="l00665"></a>00665         <span class="keywordflow">return</span> (peer1-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer1-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> 
<a name="l00666"></a>00666             ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : BGP_PEER_EBGP);
<a name="l00667"></a>00667     } 
<a name="l00668"></a>00668       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>;
<a name="l00669"></a>00669     }
<a name="l00670"></a>00670 
<a name="l00671"></a>00671   <span class="comment">/* Normal peer */</span>
<a name="l00672"></a>00672   <span class="keywordflow">if</span> (bgp &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l00673"></a>00673     {
<a name="l00674"></a>00674       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == 0)
<a name="l00675"></a>00675     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>;
<a name="l00676"></a>00676 
<a name="l00677"></a>00677       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l00678"></a>00678     {
<a name="l00679"></a>00679       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>)
<a name="l00680"></a>00680         <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>;
<a name="l00681"></a>00681       <span class="keywordflow">else</span>
<a name="l00682"></a>00682         <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684 
<a name="l00685"></a>00685       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>))
<a name="l00686"></a>00686     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>;
<a name="l00687"></a>00687 
<a name="l00688"></a>00688       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>;
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690   <span class="keywordflow">else</span>
<a name="l00691"></a>00691     {
<a name="l00692"></a>00692       <span class="keywordflow">return</span> (peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == 0
<a name="l00693"></a>00693           ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a> : peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> == peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>
<a name="l00694"></a>00694           ? <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> : <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>);
<a name="l00695"></a>00695     }
<a name="l00696"></a>00696 }
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00699"></a><a class="code" href="bgpd_8c.html#a6dcc47c3bfcd4236ed9ce1a32804159b">00699</a> <a class="code" href="bgpd_8c.html#a6dcc47c3bfcd4236ed9ce1a32804159b">peer_free</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00700"></a>00700 {
<a name="l00701"></a>00701   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);
<a name="l00702"></a>00702 
<a name="l00703"></a>00703   <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a>(peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>);
<a name="l00704"></a>00704 
<a name="l00705"></a>00705   <span class="comment">/* this /ought/ to have been done already through bgp_stop earlier,</span>
<a name="l00706"></a>00706 <span class="comment">   * but just to be sure.. </span>
<a name="l00707"></a>00707 <span class="comment">   */</span>
<a name="l00708"></a>00708   <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
<a name="l00709"></a>00709   <a class="code" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>);
<a name="l00710"></a>00710   <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);
<a name="l00711"></a>00711   <a class="code" href="bgp__fsm_8h.html#af4f1a52b106aa7dbf3494d0debf644d3">BGP_EVENT_FLUSH</a> (peer);
<a name="l00712"></a>00712   
<a name="l00713"></a>00713   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
<a name="l00714"></a>00714     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);
<a name="l00715"></a>00715   
<a name="l00716"></a>00716   <span class="comment">/* Free allocated host character. */</span>
<a name="l00717"></a>00717   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>)
<a name="l00718"></a>00718     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00719"></a>00719   
<a name="l00720"></a>00720   <span class="comment">/* Update source configuration.  */</span>
<a name="l00721"></a>00721   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l00722"></a>00722     <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l00723"></a>00723   
<a name="l00724"></a>00724   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l00725"></a>00725     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l00726"></a>00726     
<a name="l00727"></a>00727   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>)
<a name="l00728"></a>00728     <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (peer-&gt;<a class="code" href="structpeer.html#a194efb8be481f6589ff18fbbc509edbd">clear_node_queue</a>);
<a name="l00729"></a>00729   
<a name="l00730"></a>00730   <a class="code" href="bgp__advertise_8c.html#a1a133356214b32e6d51aec071be79f1d">bgp_sync_delete</a> (peer);
<a name="l00731"></a>00731   memset (peer, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> peer));
<a name="l00732"></a>00732   
<a name="l00733"></a>00733   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba713352d9f756ebf889b35e06e1fd31dc">MTYPE_BGP_PEER</a>, peer);
<a name="l00734"></a>00734 }
<a name="l00735"></a>00735                                                 
<a name="l00736"></a>00736 <span class="comment">/* increase reference count on a struct peer */</span>
<a name="l00737"></a>00737 <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l00738"></a><a class="code" href="bgpd_8h.html#afb64dc8f0f6413cf77e8e7602dc9d8ee">00738</a> <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00739"></a>00739 {
<a name="l00740"></a>00740   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> &gt;= 0));
<a name="l00741"></a>00741     
<a name="l00742"></a>00742   peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a>++;
<a name="l00743"></a>00743   
<a name="l00744"></a>00744   <span class="keywordflow">return</span> peer;
<a name="l00745"></a>00745 }
<a name="l00746"></a>00746 
<a name="l00747"></a>00747 <span class="comment">/* decrease reference count on a struct peer</span>
<a name="l00748"></a>00748 <span class="comment"> * struct peer is freed and NULL returned if last reference</span>
<a name="l00749"></a>00749 <span class="comment"> */</span>
<a name="l00750"></a>00750 <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l00751"></a><a class="code" href="bgpd_8h.html#a7589941303c952206757f1610e9c8a0e">00751</a> <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00752"></a>00752 {
<a name="l00753"></a>00753   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> &gt; 0));
<a name="l00754"></a>00754   
<a name="l00755"></a>00755   peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a>--;
<a name="l00756"></a>00756   
<a name="l00757"></a>00757   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> == 0)
<a name="l00758"></a>00758     {
<a name="l00759"></a>00759 <span class="preprocessor">#if 0</span>
<a name="l00760"></a>00760 <span class="preprocessor"></span>      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unlocked and freeing&quot;</span>);
<a name="l00761"></a>00761       <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
<a name="l00762"></a>00762 <span class="preprocessor">#endif</span>
<a name="l00763"></a>00763 <span class="preprocessor"></span>      <a class="code" href="bgpd_8c.html#a6dcc47c3bfcd4236ed9ce1a32804159b">peer_free</a> (peer);
<a name="l00764"></a>00764       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00765"></a>00765     }
<a name="l00766"></a>00766 
<a name="l00767"></a>00767 <span class="preprocessor">#if 0</span>
<a name="l00768"></a>00768 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aefe8dcc6b02746c385771c419c8ca34f">lock</a> == 1)
<a name="l00769"></a>00769     {
<a name="l00770"></a>00770       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unlocked to 1&quot;</span>);
<a name="l00771"></a>00771       <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a> (LOG_DEBUG);
<a name="l00772"></a>00772     }
<a name="l00773"></a>00773 <span class="preprocessor">#endif</span>
<a name="l00774"></a>00774 <span class="preprocessor"></span>
<a name="l00775"></a>00775   <span class="keywordflow">return</span> peer;
<a name="l00776"></a>00776 }
<a name="l00777"></a>00777   
<a name="l00778"></a>00778 <span class="comment">/* Allocate new peer object, implicitely locked.  */</span>
<a name="l00779"></a>00779 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l00780"></a><a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">00780</a> <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00781"></a>00781 {
<a name="l00782"></a>00782   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l00783"></a>00783   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l00784"></a>00784   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00785"></a>00785   <span class="keyword">struct </span>servent *sp;
<a name="l00786"></a>00786   
<a name="l00787"></a>00787   <span class="comment">/* bgp argument is absolutely required */</span>
<a name="l00788"></a>00788   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bgp);
<a name="l00789"></a>00789   <span class="keywordflow">if</span> (!bgp)
<a name="l00790"></a>00790     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00791"></a>00791   
<a name="l00792"></a>00792   <span class="comment">/* Allocate new peer. */</span>
<a name="l00793"></a>00793   peer = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba713352d9f756ebf889b35e06e1fd31dc">MTYPE_BGP_PEER</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> peer));
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="comment">/* Set default value. */</span>
<a name="l00796"></a>00796   peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = -1;
<a name="l00797"></a>00797   peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
<a name="l00798"></a>00798   peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
<a name="l00799"></a>00799   peer-&gt;<a class="code" href="structpeer.html#a3231acf11a68285301f4e4ef3c24df3e">v_asorig</a> = <a class="code" href="bgpd_8h.html#ae2cdf99bec56ec673fb08237e0c3e29e">BGP_DEFAULT_ASORIGINATE</a>;
<a name="l00800"></a>00800   peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = <a class="code" href="bgpd_8h.html#aa87491374c5f1e04e123e51e1dfd043f">Idle</a>;
<a name="l00801"></a>00801   peer-&gt;<a class="code" href="structpeer.html#a6f5e76deea384483efc1f5bb27e51fbf">ostatus</a> = <a class="code" href="bgpd_8h.html#aa87491374c5f1e04e123e51e1dfd043f">Idle</a>;
<a name="l00802"></a>00802   peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
<a name="l00803"></a>00803   peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00804"></a>00804   peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a> = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l00805"></a>00805   peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* initial reference */</span>
<a name="l00806"></a>00806   <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (bgp);
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="comment">/* Set default flags.  */</span>
<a name="l00809"></a>00809   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l00810"></a>00810     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l00811"></a>00811       {
<a name="l00812"></a>00812     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l00813"></a>00813       {
<a name="l00814"></a>00814         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>);
<a name="l00815"></a>00815         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>);
<a name="l00816"></a>00816       }
<a name="l00817"></a>00817     peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00818"></a>00818       }
<a name="l00819"></a>00819   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);
<a name="l00820"></a>00820 
<a name="l00821"></a>00821   <span class="comment">/* Create buffers.  */</span>
<a name="l00822"></a>00822   peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00823"></a>00823   peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a> = <a class="code" href="stream_8c.html#acebca866d54cab1ea0a10f3c30de69aa">stream_fifo_new</a> ();
<a name="l00824"></a>00824   peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00825"></a>00825 
<a name="l00826"></a>00826   <a class="code" href="bgp__advertise_8c.html#acc82ab213ba4b510000b2da360e1d347">bgp_sync_init</a> (peer);
<a name="l00827"></a>00827 
<a name="l00828"></a>00828   <span class="comment">/* Get service port number.  */</span>
<a name="l00829"></a>00829   sp = getservbyname (<span class="stringliteral">&quot;bgp&quot;</span>, <span class="stringliteral">&quot;tcp&quot;</span>);
<a name="l00830"></a>00830   peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = (sp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ? <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a> : ntohs (sp-&gt;s_port);
<a name="l00831"></a>00831 
<a name="l00832"></a>00832   <span class="keywordflow">return</span> peer;
<a name="l00833"></a>00833 }
<a name="l00834"></a>00834 
<a name="l00835"></a>00835 <span class="comment">/* Create new BGP peer.  */</span>
<a name="l00836"></a>00836 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l00837"></a><a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">00837</a> <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> <a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>,
<a name="l00838"></a>00838          <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00839"></a>00839 {
<a name="l00840"></a>00840   <span class="keywordtype">int</span> active;
<a name="l00841"></a>00841   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00842"></a>00842   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l00843"></a>00843 
<a name="l00844"></a>00844   peer = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
<a name="l00845"></a>00845   peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a> = *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>;
<a name="l00846"></a>00846   peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = <a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l00847"></a>00847   peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = remote_as;
<a name="l00848"></a>00848   peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a> = bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;
<a name="l00849"></a>00849   peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;
<a name="l00850"></a>00850   peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a>;
<a name="l00851"></a>00851   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00852"></a>00852     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l00853"></a>00853   <span class="keywordflow">else</span>
<a name="l00854"></a>00854     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l00855"></a>00855     
<a name="l00856"></a>00856   peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
<a name="l00857"></a>00857   <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer);
<a name="l00858"></a>00858 
<a name="l00859"></a>00859   active = <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer);
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   <span class="keywordflow">if</span> (afi &amp;&amp; safi)
<a name="l00862"></a>00862     peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
<a name="l00863"></a>00863 
<a name="l00864"></a>00864   <span class="comment">/* Last read and reset time set */</span>
<a name="l00865"></a>00865   peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = peer-&gt;<a class="code" href="structpeer.html#a6b54a3917c026e52541f861b1a7b9cf8">resettime</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   <span class="comment">/* Default TTL set. */</span>
<a name="l00868"></a>00868   peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ? 255 : 1);
<a name="l00869"></a>00869 
<a name="l00870"></a>00870   <span class="comment">/* Make peer&#39;s address string. */</span>
<a name="l00871"></a>00871   <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (su, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>);
<a name="l00872"></a>00872   peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, buf);
<a name="l00873"></a>00873 
<a name="l00874"></a>00874   <span class="comment">/* Set up peer&#39;s events and timers. */</span>
<a name="l00875"></a>00875   <span class="keywordflow">if</span> (! active &amp;&amp; <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer))
<a name="l00876"></a>00876     <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
<a name="l00877"></a>00877 
<a name="l00878"></a>00878   <span class="keywordflow">return</span> peer;
<a name="l00879"></a>00879 }
<a name="l00880"></a>00880 
<a name="l00881"></a>00881 <span class="comment">/* Make accept BGP peer.  Called from bgp_accept (). */</span>
<a name="l00882"></a>00882 <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l00883"></a><a class="code" href="bgpd_8h.html#ad8e34fba957d19ecf9cade67eac24f9d">00883</a> <a class="code" href="bgpd_8c.html#afdbdc29e7fde5d280e9ab2b27a781cd2">peer_create_accept</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l00884"></a>00884 {
<a name="l00885"></a>00885   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00886"></a>00886 
<a name="l00887"></a>00887   peer = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
<a name="l00888"></a>00888   
<a name="l00889"></a>00889   peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
<a name="l00890"></a>00890   <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer);
<a name="l00891"></a>00891 
<a name="l00892"></a>00892   <span class="keywordflow">return</span> peer;
<a name="l00893"></a>00893 }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 <span class="comment">/* Change peer&#39;s AS number.  */</span>
<a name="l00896"></a>00896 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00897"></a><a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">00897</a> <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> <a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l00898"></a>00898 {
<a name="l00899"></a>00899   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00900"></a>00900 
<a name="l00901"></a>00901   <span class="comment">/* Stop peer. */</span>
<a name="l00902"></a>00902   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l00903"></a>00903     {
<a name="l00904"></a>00904       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l00905"></a>00905        {
<a name="l00906"></a>00906          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ac784c469ea6aa5b6e49aaa1a82534f71">PEER_DOWN_REMOTE_AS_CHANGE</a>;
<a name="l00907"></a>00907          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l00908"></a>00908                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l00909"></a>00909        }
<a name="l00910"></a>00910       <span class="keywordflow">else</span>
<a name="l00911"></a>00911     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00912"></a>00912     }
<a name="l00913"></a>00913   type = <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer);
<a name="l00914"></a>00914   peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = <a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l00915"></a>00915 
<a name="l00916"></a>00916   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>)
<a name="l00917"></a>00917       &amp;&amp; ! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, as)
<a name="l00918"></a>00918       &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != as)
<a name="l00919"></a>00919     peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
<a name="l00920"></a>00920   <span class="keywordflow">else</span>
<a name="l00921"></a>00921     peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l00922"></a>00922 
<a name="l00923"></a>00923   <span class="comment">/* Advertisement-interval reset */</span>
<a name="l00924"></a>00924   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00925"></a>00925     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l00926"></a>00926   <span class="keywordflow">else</span>
<a name="l00927"></a>00927     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l00928"></a>00928 
<a name="l00929"></a>00929   <span class="comment">/* TTL reset */</span>
<a name="l00930"></a>00930   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00931"></a>00931     peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 255;
<a name="l00932"></a>00932   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00933"></a>00933     peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
<a name="l00934"></a>00934 
<a name="l00935"></a>00935   <span class="comment">/* reflector-client reset */</span>
<a name="l00936"></a>00936   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00937"></a>00937     {
<a name="l00938"></a>00938       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>],
<a name="l00939"></a>00939           <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
<a name="l00940"></a>00940       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>],
<a name="l00941"></a>00941           <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
<a name="l00942"></a>00942       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>],
<a name="l00943"></a>00943           <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
<a name="l00944"></a>00944       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST],
<a name="l00945"></a>00945           <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
<a name="l00946"></a>00946       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST],
<a name="l00947"></a>00947           <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>);
<a name="l00948"></a>00948     }
<a name="l00949"></a>00949 
<a name="l00950"></a>00950   <span class="comment">/* local-as reset */</span>
<a name="l00951"></a>00951   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l00952"></a>00952     {
<a name="l00953"></a>00953       peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
<a name="l00954"></a>00954       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l00955"></a>00955     }
<a name="l00956"></a>00956 }
<a name="l00957"></a>00957 
<a name="l00958"></a>00958 <span class="comment">/* If peer does not exist, create new one.  If peer already exists,</span>
<a name="l00959"></a>00959 <span class="comment">   set AS number to the peer.  */</span>
<a name="l00960"></a>00960 <span class="keywordtype">int</span>
<a name="l00961"></a><a class="code" href="bgpd_8h.html#a1161d823d8ee26b31e6e9ee8a92c47d2">00961</a> <a class="code" href="bgpd_8c.html#a6cf9268104f8fa74c5b92ecd54a757d8">peer_remote_as</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>,
<a name="l00962"></a>00962         <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00963"></a>00963 {
<a name="l00964"></a>00964   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00965"></a>00965   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> <a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
<a name="l00966"></a>00966 
<a name="l00967"></a>00967   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, su);
<a name="l00968"></a>00968 
<a name="l00969"></a>00969   <span class="keywordflow">if</span> (peer)
<a name="l00970"></a>00970     {
<a name="l00971"></a>00971       <span class="comment">/* When this peer is a member of peer-group.  */</span>
<a name="l00972"></a>00972       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
<a name="l00973"></a>00973     {
<a name="l00974"></a>00974       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l00975"></a>00975         {
<a name="l00976"></a>00976           <span class="comment">/* Return peer group&#39;s AS number.  */</span>
<a name="l00977"></a>00977           *as = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l00978"></a>00978           <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac8dfcce2217bf45dba73a16f6e617450">BGP_ERR_PEER_GROUP_MEMBER</a>;
<a name="l00979"></a>00979         }
<a name="l00980"></a>00980       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l00981"></a>00981         {
<a name="l00982"></a>00982           <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *as)
<a name="l00983"></a>00983         {
<a name="l00984"></a>00984           *as = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l00985"></a>00985           <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
<a name="l00986"></a>00986         }
<a name="l00987"></a>00987         }
<a name="l00988"></a>00988       <span class="keywordflow">else</span>
<a name="l00989"></a>00989         {
<a name="l00990"></a>00990           <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == *as)
<a name="l00991"></a>00991         {
<a name="l00992"></a>00992           *as = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l00993"></a>00993           <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
<a name="l00994"></a>00994         }
<a name="l00995"></a>00995         }
<a name="l00996"></a>00996     }
<a name="l00997"></a>00997 
<a name="l00998"></a>00998       <span class="comment">/* Existing peer&#39;s AS number change. */</span>
<a name="l00999"></a>00999       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> != *as)
<a name="l01000"></a>01000     <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (peer, *as);
<a name="l01001"></a>01001     }
<a name="l01002"></a>01002   <span class="keywordflow">else</span>
<a name="l01003"></a>01003     {
<a name="l01004"></a>01004 
<a name="l01005"></a>01005       <span class="comment">/* If the peer is not part of our confederation, and its not an</span>
<a name="l01006"></a>01006 <span class="comment">     iBGP peer then spoof the source AS */</span>
<a name="l01007"></a>01007       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#afcb82a0c98d194a00bb08d68743958f7">bgp_config_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>)
<a name="l01008"></a>01008       &amp;&amp; ! <a class="code" href="bgpd_8c.html#a4f0461d82606ff0bf6133063515bf15c">bgp_confederation_peers_check</a> (bgp, *as) 
<a name="l01009"></a>01009       &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *as)
<a name="l01010"></a>01010     local_as = bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
<a name="l01011"></a>01011       <span class="keywordflow">else</span>
<a name="l01012"></a>01012     local_as = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l01013"></a>01013       
<a name="l01014"></a>01014       <span class="comment">/* If this is IPv4 unicast configuration and &quot;no bgp default</span>
<a name="l01015"></a>01015 <span class="comment">         ipv4-unicast&quot; is specified. */</span>
<a name="l01016"></a>01016 
<a name="l01017"></a>01017       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>)
<a name="l01018"></a>01018       &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l01019"></a>01019     peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, local_as, *as, 0, 0); 
<a name="l01020"></a>01020       <span class="keywordflow">else</span>
<a name="l01021"></a>01021     peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, local_as, *as, afi, safi); 
<a name="l01022"></a>01022     }
<a name="l01023"></a>01023 
<a name="l01024"></a>01024   <span class="keywordflow">return</span> 0;
<a name="l01025"></a>01025 }
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 <span class="comment">/* Activate the peer or peer group for specified AFI and SAFI.  */</span>
<a name="l01028"></a>01028 <span class="keywordtype">int</span>
<a name="l01029"></a><a class="code" href="bgpd_8h.html#af84dda57e5b484205891fb7a0e4cc23f">01029</a> <a class="code" href="bgpd_8c.html#a238a578363f00dd89e73738ee5f518c4">peer_activate</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01030"></a>01030 {
<a name="l01031"></a>01031   <span class="keywordtype">int</span> active;
<a name="l01032"></a>01032 
<a name="l01033"></a>01033   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l01034"></a>01034     <span class="keywordflow">return</span> 0;
<a name="l01035"></a>01035 
<a name="l01036"></a>01036   <span class="comment">/* Activate the address family configuration. */</span>
<a name="l01037"></a>01037   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l01038"></a>01038     peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
<a name="l01039"></a>01039   <span class="keywordflow">else</span>
<a name="l01040"></a>01040     {
<a name="l01041"></a>01041       active = <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer);
<a name="l01042"></a>01042 
<a name="l01043"></a>01043       peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
<a name="l01044"></a>01044 
<a name="l01045"></a>01045       <span class="keywordflow">if</span> (! active &amp;&amp; <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (peer))
<a name="l01046"></a>01046     <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer);
<a name="l01047"></a>01047       <span class="keywordflow">else</span>
<a name="l01048"></a>01048     {
<a name="l01049"></a>01049       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01050"></a>01050         {
<a name="l01051"></a>01051           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>))
<a name="l01052"></a>01052         {
<a name="l01053"></a>01053           peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[afi][safi] = 1;
<a name="l01054"></a>01054           <a class="code" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (peer, afi, safi,
<a name="l01055"></a>01055                        <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,
<a name="l01056"></a>01056                        <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>);
<a name="l01057"></a>01057           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi])
<a name="l01058"></a>01058             {
<a name="l01059"></a>01059               peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 1;
<a name="l01060"></a>01060               <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l01061"></a>01061             }
<a name="l01062"></a>01062         }
<a name="l01063"></a>01063           <span class="keywordflow">else</span>
<a name="l01064"></a>01064                {
<a name="l01065"></a>01065                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#abd8d1d6d2ea53eb24c3b1d0bc4bf5ea7">PEER_DOWN_AF_ACTIVATE</a>;
<a name="l01066"></a>01066                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01067"></a>01067                                   <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l01068"></a>01068                }
<a name="l01069"></a>01069         }
<a name="l01070"></a>01070     }
<a name="l01071"></a>01071     }
<a name="l01072"></a>01072   <span class="keywordflow">return</span> 0;
<a name="l01073"></a>01073 }
<a name="l01074"></a>01074 
<a name="l01075"></a>01075 <span class="keywordtype">int</span>
<a name="l01076"></a><a class="code" href="bgpd_8h.html#a7cc79de2dc55788c7be3c8dcf2b8076b">01076</a> <a class="code" href="bgpd_8c.html#a4b69528ca90f901bf13e8bb712aaff67">peer_deactivate</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01077"></a>01077 {
<a name="l01078"></a>01078   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l01079"></a>01079   <span class="keyword">struct </span>peer *peer1;
<a name="l01080"></a>01080   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01081"></a>01081 
<a name="l01082"></a>01082   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l01083"></a>01083     {
<a name="l01084"></a>01084       group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l01085"></a>01085 
<a name="l01086"></a>01086       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer1))
<a name="l01087"></a>01087     {
<a name="l01088"></a>01088       <span class="keywordflow">if</span> (peer1-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l01089"></a>01089         <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a431f8a7f79965eb50b8dd4c41df70615">BGP_ERR_PEER_GROUP_MEMBER_EXISTS</a>;
<a name="l01090"></a>01090     }
<a name="l01091"></a>01091     }
<a name="l01092"></a>01092   <span class="keywordflow">else</span>
<a name="l01093"></a>01093     {
<a name="l01094"></a>01094       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l01095"></a>01095     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1fb3f0972fb6a3b5d48ad1399905cb94">BGP_ERR_PEER_BELONGS_TO_GROUP</a>;
<a name="l01096"></a>01096     }
<a name="l01097"></a>01097 
<a name="l01098"></a>01098   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l01099"></a>01099     <span class="keywordflow">return</span> 0;
<a name="l01100"></a>01100 
<a name="l01101"></a>01101   <span class="comment">/* De-activate the address family configuration. */</span>
<a name="l01102"></a>01102   peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 0;
<a name="l01103"></a>01103   <a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (peer, afi, safi);
<a name="l01104"></a>01104 
<a name="l01105"></a>01105   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l01106"></a>01106     {  
<a name="l01107"></a>01107       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01108"></a>01108     {
<a name="l01109"></a>01109       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>))
<a name="l01110"></a>01110         {
<a name="l01111"></a>01111           peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[afi][safi] = 0;
<a name="l01112"></a>01112           peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 0;
<a name="l01113"></a>01113 
<a name="l01114"></a>01114           <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (peer))
<a name="l01115"></a>01115         {
<a name="l01116"></a>01116           <a class="code" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (peer, afi, safi,
<a name="l01117"></a>01117                        <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,
<a name="l01118"></a>01118                        <a class="code" href="bgp__open_8h.html#af5dd57265f518ffafc0fdb1957a7b706">CAPABILITY_ACTION_UNSET</a>);
<a name="l01119"></a>01119           <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>);
<a name="l01120"></a>01120           peer-&gt;<a class="code" href="structpeer.html#ad330ebcaa29077b76720f2d62f36dc24">pcount</a>[afi][safi] = 0;
<a name="l01121"></a>01121         }
<a name="l01122"></a>01122           <span class="keywordflow">else</span>
<a name="l01123"></a>01123                {
<a name="l01124"></a>01124                  peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
<a name="l01125"></a>01125                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01126"></a>01126                                   <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l01127"></a>01127                }
<a name="l01128"></a>01128         }
<a name="l01129"></a>01129       <span class="keywordflow">else</span>
<a name="l01130"></a>01130            {
<a name="l01131"></a>01131              peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
<a name="l01132"></a>01132              <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01133"></a>01133                               <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l01134"></a>01134            }
<a name="l01135"></a>01135     }
<a name="l01136"></a>01136     }
<a name="l01137"></a>01137   <span class="keywordflow">return</span> 0;
<a name="l01138"></a>01138 }
<a name="l01139"></a>01139 
<a name="l01140"></a>01140 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01141"></a><a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">01141</a> <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l01142"></a>01142 {
<a name="l01143"></a>01143   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l01144"></a>01144   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l01145"></a>01145 
<a name="l01146"></a>01146   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
<a name="l01147"></a>01147   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>);
<a name="l01148"></a>01148 
<a name="l01149"></a>01149   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
<a name="l01150"></a>01150     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> ; safi &lt; <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a> ; safi++)
<a name="l01151"></a>01151       peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[afi][safi] = 0;
<a name="l01152"></a>01152 
<a name="l01153"></a>01153   if (peer-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>)
<a name="l01154"></a>01154     {
<a name="l01155"></a>01155       <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a4fdfea0c52fcb6c48138fc9c817d7b41">t_gr_restart</a>);
<a name="l01156"></a>01156       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01157"></a>01157     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart timer stopped&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01158"></a>01158     }
<a name="l01159"></a>01159   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>)
<a name="l01160"></a>01160     {
<a name="l01161"></a>01161       <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ada375f793bffb7304b39c227704ba406">t_gr_stale</a>);
<a name="l01162"></a>01162       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01163"></a>01163     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s graceful restart stalepath timer stopped&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01164"></a>01164     }
<a name="l01165"></a>01165   <a class="code" href="bgp__route_8c.html#ac73f860ac71768cc3169bf96512d1b1c">bgp_clear_route_all</a> (peer);
<a name="l01166"></a>01166 }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168 <span class="comment">/* Delete peer from confguration.</span>
<a name="l01169"></a>01169 <span class="comment"> *</span>
<a name="l01170"></a>01170 <span class="comment"> * The peer is moved to a dead-end &quot;Deleted&quot; neighbour-state, to allow</span>
<a name="l01171"></a>01171 <span class="comment"> * it to &quot;cool off&quot; and refcounts to hit 0, at which state it is freed.</span>
<a name="l01172"></a>01172 <span class="comment"> *</span>
<a name="l01173"></a>01173 <span class="comment"> * This function /should/ take care to be idempotent, to guard against</span>
<a name="l01174"></a>01174 <span class="comment"> * it being called multiple times through stray events that come in</span>
<a name="l01175"></a>01175 <span class="comment"> * that happen to result in this function being called again.  That</span>
<a name="l01176"></a>01176 <span class="comment"> * said, getting here for a &quot;Deleted&quot; peer is a bug in the neighbour</span>
<a name="l01177"></a>01177 <span class="comment"> * FSM.</span>
<a name="l01178"></a>01178 <span class="comment"> */</span>
<a name="l01179"></a>01179 <span class="keywordtype">int</span>
<a name="l01180"></a><a class="code" href="bgpd_8h.html#a3cf7aaaf69048554d000a576ecb0cc9c">01180</a> <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l01181"></a>01181 {
<a name="l01182"></a>01182   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01183"></a>01183   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l01184"></a>01184   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l01185"></a>01185   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01186"></a>01186   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l01187"></a>01187   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#a3363f400142fb233235d62ccdea22e38">pn</a>;
<a name="l01188"></a>01188 
<a name="l01189"></a>01189   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);
<a name="l01190"></a>01190   
<a name="l01191"></a>01191   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l01192"></a>01192 
<a name="l01193"></a>01193   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
<a name="l01194"></a>01194     <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);
<a name="l01195"></a>01195 
<a name="l01196"></a>01196   <span class="comment">/* If this peer belongs to peer group, clear up the</span>
<a name="l01197"></a>01197 <span class="comment">     relationship.  */</span>
<a name="l01198"></a>01198   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
<a name="l01199"></a>01199     {
<a name="l01200"></a>01200       <span class="keywordflow">if</span> ((pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer)))
<a name="l01201"></a>01201         {
<a name="l01202"></a>01202           peer = <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
<a name="l01203"></a>01203           <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, pn);
<a name="l01204"></a>01204         }
<a name="l01205"></a>01205       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01206"></a>01206     }
<a name="l01207"></a>01207   
<a name="l01208"></a>01208   <span class="comment">/* Withdraw all information from routing table.  We can not use</span>
<a name="l01209"></a>01209 <span class="comment">   * BGP_EVENT_ADD (peer, BGP_Stop) at here.  Because the event is</span>
<a name="l01210"></a>01210 <span class="comment">   * executed after peer structure is deleted.</span>
<a name="l01211"></a>01211 <span class="comment">   */</span>
<a name="l01212"></a>01212   peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a399733457908c2111161643bc7603515">PEER_DOWN_NEIGHBOR_DELETE</a>;
<a name="l01213"></a>01213   <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (peer);
<a name="l01214"></a>01214   <a class="code" href="bgp__fsm_8c.html#ae5bbbc9f4290574b72885050744741fd">bgp_fsm_change_status</a> (peer, <a class="code" href="bgpd_8h.html#a25915a470516b826a1f075280e8a3941">Deleted</a>);
<a name="l01215"></a>01215 
<a name="l01216"></a>01216   <span class="comment">/* Password configuration */</span>
<a name="l01217"></a>01217   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l01218"></a>01218     {
<a name="l01219"></a>01219       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l01220"></a>01220       peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01221"></a>01221 
<a name="l01222"></a>01222       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l01223"></a>01223     <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
<a name="l01224"></a>01224     }
<a name="l01225"></a>01225   
<a name="l01226"></a>01226   <a class="code" href="bgp__fsm_8c.html#a0dae67b35f2ffb6d6e7f9b1a6684e0aa">bgp_timer_set</a> (peer); <span class="comment">/* stops all timers for Deleted */</span>
<a name="l01227"></a>01227   
<a name="l01228"></a>01228   <span class="comment">/* Delete from all peer list. */</span>
<a name="l01229"></a>01229   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
<a name="l01230"></a>01230       &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, peer)))
<a name="l01231"></a>01231     {
<a name="l01232"></a>01232       <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* bgp peer list reference */</span>
<a name="l01233"></a>01233       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, pn);
<a name="l01234"></a>01234     }
<a name="l01235"></a>01235       
<a name="l01236"></a>01236   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (peer)
<a name="l01237"></a>01237       &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, peer)))
<a name="l01238"></a>01238     {
<a name="l01239"></a>01239       <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* rsclient list reference */</span>
<a name="l01240"></a>01240       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, pn);
<a name="l01241"></a>01241 
<a name="l01242"></a>01242       <span class="comment">/* Clear our own rsclient ribs. */</span>
<a name="l01243"></a>01243       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l01244"></a>01244         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l01245"></a>01245           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
<a name="l01246"></a>01246                          <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l01247"></a>01247             <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>);
<a name="l01248"></a>01248     }
<a name="l01249"></a>01249 
<a name="l01250"></a>01250   <span class="comment">/* Free RIB for any family in which peer is RSERVER_CLIENT, and is not</span>
<a name="l01251"></a>01251 <span class="comment">      member of a peer_group. */</span>
<a name="l01252"></a>01252   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l01253"></a>01253     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l01254"></a>01254       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l01255"></a>01255         <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi]);
<a name="l01256"></a>01256 
<a name="l01257"></a>01257   <span class="comment">/* Buffers.  */</span>
<a name="l01258"></a>01258   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
<a name="l01259"></a>01259     <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01260"></a>01260   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>)
<a name="l01261"></a>01261     <a class="code" href="stream_8c.html#a83c91b4a974d809a25cda9e7f7e28718">stream_fifo_free</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
<a name="l01262"></a>01262   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>)
<a name="l01263"></a>01263     <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>);
<a name="l01264"></a>01264   peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01265"></a>01265   peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a> = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01266"></a>01266 
<a name="l01267"></a>01267   <span class="comment">/* Local and remote addresses. */</span>
<a name="l01268"></a>01268   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>)
<a name="l01269"></a>01269     <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a>);
<a name="l01270"></a>01270   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>)
<a name="l01271"></a>01271     <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>);
<a name="l01272"></a>01272   peer-&gt;<a class="code" href="structpeer.html#a063537a13602c890880e9c4f1d6fccd3">su_local</a> = peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01273"></a>01273   
<a name="l01274"></a>01274   <span class="comment">/* Free filter related memory.  */</span>
<a name="l01275"></a>01275   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l01276"></a>01276     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l01277"></a>01277       {
<a name="l01278"></a>01278     filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l01279"></a>01279 
<a name="l01280"></a>01280     <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; i &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; i++)
<a name="l01281"></a>01281       {
<a name="l01282"></a>01282         <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01283"></a>01283           free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[i].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01284"></a>01284         <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01285"></a>01285           free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[i].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01286"></a>01286         <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01287"></a>01287           free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[i].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01288"></a>01288             
<a name="l01289"></a>01289             filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01290"></a>01290             filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01291"></a>01291             filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01292"></a>01292           }
<a name="l01293"></a>01293         <span class="keywordflow">for</span> (i = <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>; i &lt; <a class="code" href="bgpd_8h.html#a0211cf02136115bf6674f56fedfc1ea1">RMAP_MAX</a>; i++)
<a name="l01294"></a>01294           {
<a name="l01295"></a>01295         <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01296"></a>01296           free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[i].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01297"></a>01297             filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01298"></a>01298       }
<a name="l01299"></a>01299 
<a name="l01300"></a>01300     <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01301"></a>01301       free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01302"></a>01302 
<a name="l01303"></a>01303     <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l01304"></a>01304       free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l01305"></a>01305         
<a name="l01306"></a>01306         filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01307"></a>01307         peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01308"></a>01308       }
<a name="l01309"></a>01309   
<a name="l01310"></a>01310   <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* initial reference */</span>
<a name="l01311"></a>01311 
<a name="l01312"></a>01312   <span class="keywordflow">return</span> 0;
<a name="l01313"></a>01313 }
<a name="l01314"></a>01314 
<a name="l01315"></a>01315 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01316"></a><a class="code" href="bgpd_8c.html#a693e769f899359a43259c2940f31546b">01316</a> <a class="code" href="bgpd_8c.html#a693e769f899359a43259c2940f31546b">peer_group_cmp</a> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *g1, <span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *g2)
<a name="l01317"></a>01317 {
<a name="l01318"></a>01318   <span class="keywordflow">return</span> strcmp (g1-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, g2-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>);
<a name="l01319"></a>01319 }
<a name="l01320"></a>01320 
<a name="l01321"></a>01321 <span class="comment">/* If peer is configured at least one address family return 1. */</span>
<a name="l01322"></a>01322 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01323"></a><a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">01323</a> <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l01324"></a>01324 {
<a name="l01325"></a>01325   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l01326"></a>01326       || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
<a name="l01327"></a>01327       || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
<a name="l01328"></a>01328       || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l01329"></a>01329       || peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l01330"></a>01330     <span class="keywordflow">return</span> 1;
<a name="l01331"></a>01331   <span class="keywordflow">return</span> 0;
<a name="l01332"></a>01332 }
<a name="l01333"></a>01333 
<a name="l01334"></a>01334 <span class="comment">/* Peer group cofiguration. */</span>
<a name="l01335"></a>01335 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *
<a name="l01336"></a><a class="code" href="bgpd_8c.html#a3992a10a8ebe6e68a3477157c4b2500a">01336</a> <a class="code" href="bgpd_8c.html#a3992a10a8ebe6e68a3477157c4b2500a">peer_group_new</a> (<span class="keywordtype">void</span>)
<a name="l01337"></a>01337 {
<a name="l01338"></a>01338   <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *) <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba04f19c123ab33958029f8251c6f96bc4">MTYPE_PEER_GROUP</a>,
<a name="l01339"></a>01339                     <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a>));
<a name="l01340"></a>01340 }
<a name="l01341"></a>01341 
<a name="l01342"></a>01342 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01343"></a><a class="code" href="bgpd_8c.html#af5931e17119614624eb34e56765bed1d">01343</a> <a class="code" href="bgpd_8c.html#af5931e17119614624eb34e56765bed1d">peer_group_free</a> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group)
<a name="l01344"></a>01344 {
<a name="l01345"></a>01345   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba04f19c123ab33958029f8251c6f96bc4">MTYPE_PEER_GROUP</a>, group);
<a name="l01346"></a>01346 }
<a name="l01347"></a>01347 
<a name="l01348"></a>01348 <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *
<a name="l01349"></a><a class="code" href="bgpd_8h.html#a81077f34626af69b2469927830cefbf4">01349</a> <a class="code" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l01350"></a>01350 {
<a name="l01351"></a>01351   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l01352"></a>01352   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01353"></a>01353 
<a name="l01354"></a>01354   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l01355"></a>01355     {
<a name="l01356"></a>01356       <span class="keywordflow">if</span> (strcmp (group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, name) == 0)
<a name="l01357"></a>01357     <span class="keywordflow">return</span> group;
<a name="l01358"></a>01358     }
<a name="l01359"></a>01359   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01360"></a>01360 }
<a name="l01361"></a>01361 
<a name="l01362"></a>01362 <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *
<a name="l01363"></a><a class="code" href="bgpd_8h.html#aa87b94f51c8f0d41b3a5aedd29c5960c">01363</a> <a class="code" href="bgpd_8c.html#a6711e16446081f50f78d0d119c4f766c">peer_group_get</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l01364"></a>01364 {
<a name="l01365"></a>01365   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l01366"></a>01366 
<a name="l01367"></a>01367   group = <a class="code" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (bgp, name);
<a name="l01368"></a>01368   <span class="keywordflow">if</span> (group)
<a name="l01369"></a>01369     <span class="keywordflow">return</span> group;
<a name="l01370"></a>01370 
<a name="l01371"></a>01371   group = <a class="code" href="bgpd_8c.html#a3992a10a8ebe6e68a3477157c4b2500a">peer_group_new</a> ();
<a name="l01372"></a>01372   group-&gt;<a class="code" href="structpeer__group.html#a38fc9c198c0c75ca9785c47a5f5a77db">bgp</a> = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01373"></a>01373   group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a> = strdup (name);
<a name="l01374"></a>01374   group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01375"></a>01375   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a> = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
<a name="l01376"></a>01376   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
<a name="l01377"></a>01377     group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
<a name="l01378"></a>01378   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, name);
<a name="l01379"></a>01379   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = group;
<a name="l01380"></a>01380   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = 0; 
<a name="l01381"></a>01381   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
<a name="l01382"></a>01382   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l01383"></a>01383   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
<a name="l01384"></a>01384   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
<a name="l01385"></a>01385   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
<a name="l01386"></a>01386   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
<a name="l01387"></a>01387   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;
<a name="l01388"></a>01388   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>);
<a name="l01389"></a>01389   <a class="code" href="linklist_8c.html#abfe4a1419e46dc9e1235dcbe6b52a022">listnode_add_sort</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, group);
<a name="l01390"></a>01390 
<a name="l01391"></a>01391   <span class="keywordflow">return</span> 0;
<a name="l01392"></a>01392 }
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 <span class="keyword">static</span> <span class="keywordtype">void</span> 
<a name="l01395"></a><a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">01395</a> <a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l01396"></a>01396                  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01397"></a>01397 {
<a name="l01398"></a>01398   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>;
<a name="l01399"></a>01399   <span class="keywordtype">int</span> out = <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>;
<a name="l01400"></a>01400   <span class="keyword">struct </span>peer *conf;
<a name="l01401"></a>01401   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *pfilter;
<a name="l01402"></a>01402   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
<a name="l01403"></a>01403 
<a name="l01404"></a>01404   conf = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>;
<a name="l01405"></a>01405   pfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l01406"></a>01406   gfilter = &amp;conf-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l01407"></a>01407 
<a name="l01408"></a>01408   <span class="comment">/* remote-as */</span>
<a name="l01409"></a>01409   <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01410"></a>01410     peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = conf-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l01411"></a>01411 
<a name="l01412"></a>01412   <span class="comment">/* remote-as */</span>
<a name="l01413"></a>01413   <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l01414"></a>01414     peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = conf-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>;
<a name="l01415"></a>01415 
<a name="l01416"></a>01416   <span class="comment">/* TTL */</span>
<a name="l01417"></a>01417   peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = conf-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;
<a name="l01418"></a>01418 
<a name="l01419"></a>01419   <span class="comment">/* Weight */</span>
<a name="l01420"></a>01420   peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = conf-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
<a name="l01421"></a>01421 
<a name="l01422"></a>01422   <span class="comment">/* peer flags apply */</span>
<a name="l01423"></a>01423   peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> = conf-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>;
<a name="l01424"></a>01424   <span class="comment">/* peer af_flags apply */</span>
<a name="l01425"></a>01425   peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi];
<a name="l01426"></a>01426   <span class="comment">/* peer config apply */</span>
<a name="l01427"></a>01427   peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a> = conf-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>;
<a name="l01428"></a>01428 
<a name="l01429"></a>01429   <span class="comment">/* peer timers apply */</span>
<a name="l01430"></a>01430   peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = conf-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
<a name="l01431"></a>01431   peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = conf-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>;
<a name="l01432"></a>01432   peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = conf-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;
<a name="l01433"></a>01433   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (conf-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>))
<a name="l01434"></a>01434     peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = conf-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>;
<a name="l01435"></a>01435   <span class="keywordflow">else</span>
<a name="l01436"></a>01436     peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
<a name="l01437"></a>01437 
<a name="l01438"></a>01438   <span class="comment">/* advertisement-interval reset */</span>
<a name="l01439"></a>01439   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l01440"></a>01440     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l01441"></a>01441   <span class="keywordflow">else</span>
<a name="l01442"></a>01442     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l01443"></a>01443 
<a name="l01444"></a>01444   <span class="comment">/* password apply */</span>
<a name="l01445"></a>01445   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l01446"></a>01446     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l01447"></a>01447 
<a name="l01448"></a>01448   <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l01449"></a>01449     peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> =  <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, conf-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l01450"></a>01450   <span class="keywordflow">else</span>
<a name="l01451"></a>01451     peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01452"></a>01452 
<a name="l01453"></a>01453   <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
<a name="l01454"></a>01454 
<a name="l01455"></a>01455   <span class="comment">/* maximum-prefix */</span>
<a name="l01456"></a>01456   peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi];
<a name="l01457"></a>01457   peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi];
<a name="l01458"></a>01458   peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi];
<a name="l01459"></a>01459 
<a name="l01460"></a>01460   <span class="comment">/* allowas-in */</span>
<a name="l01461"></a>01461   peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = conf-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi];
<a name="l01462"></a>01462 
<a name="l01463"></a>01463   <span class="comment">/* route-server-client */</span>
<a name="l01464"></a>01464   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(conf-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l01465"></a>01465     {
<a name="l01466"></a>01466       <span class="comment">/* Make peer&#39;s RIB point to group&#39;s RIB. */</span>
<a name="l01467"></a>01467       peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi];
<a name="l01468"></a>01468 
<a name="l01469"></a>01469       <span class="comment">/* Import policy. */</span>
<a name="l01470"></a>01470       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01471"></a>01471         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01472"></a>01472       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01473"></a>01473         {
<a name="l01474"></a>01474           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01475"></a>01475           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map;
<a name="l01476"></a>01476         }
<a name="l01477"></a>01477       <span class="keywordflow">else</span>
<a name="l01478"></a>01478         {
<a name="l01479"></a>01479           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01480"></a>01480           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01481"></a>01481         }
<a name="l01482"></a>01482 
<a name="l01483"></a>01483       <span class="comment">/* Export policy. */</span>
<a name="l01484"></a>01484       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01485"></a>01485         {
<a name="l01486"></a>01486           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01487"></a>01487           pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map;
<a name="l01488"></a>01488         }
<a name="l01489"></a>01489     }
<a name="l01490"></a>01490 
<a name="l01491"></a>01491   <span class="comment">/* default-originate route-map */</span>
<a name="l01492"></a>01492   <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l01493"></a>01493     {
<a name="l01494"></a>01494       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l01495"></a>01495     free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l01496"></a>01496       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l01497"></a>01497       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = conf-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a>;
<a name="l01498"></a>01498     }
<a name="l01499"></a>01499 
<a name="l01500"></a>01500   <span class="comment">/* update-source apply */</span>
<a name="l01501"></a>01501   <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l01502"></a>01502     {
<a name="l01503"></a>01503       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l01504"></a>01504     <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l01505"></a>01505       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l01506"></a>01506     {
<a name="l01507"></a>01507       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l01508"></a>01508       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01509"></a>01509     }
<a name="l01510"></a>01510       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (conf-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l01511"></a>01511     }
<a name="l01512"></a>01512   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (conf-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l01513"></a>01513     {
<a name="l01514"></a>01514       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l01515"></a>01515     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l01516"></a>01516       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l01517"></a>01517     {
<a name="l01518"></a>01518       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l01519"></a>01519       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01520"></a>01520     }
<a name="l01521"></a>01521       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, conf-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l01522"></a>01522     }
<a name="l01523"></a>01523 
<a name="l01524"></a>01524   <span class="comment">/* inbound filter apply */</span>
<a name="l01525"></a>01525   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01526"></a>01526     {
<a name="l01527"></a>01527       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01528"></a>01528     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01529"></a>01529       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01530"></a>01530       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
<a name="l01531"></a>01531     }
<a name="l01532"></a>01532   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01533"></a>01533     {
<a name="l01534"></a>01534       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01535"></a>01535     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01536"></a>01536       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01537"></a>01537       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].plist;
<a name="l01538"></a>01538     }
<a name="l01539"></a>01539   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01540"></a>01540     {
<a name="l01541"></a>01541       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01542"></a>01542     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01543"></a>01543       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01544"></a>01544       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[<a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a>].aslist;
<a name="l01545"></a>01545     }
<a name="l01546"></a>01546   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01547"></a>01547     {
<a name="l01548"></a>01548       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01549"></a>01549         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01550"></a>01550       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01551"></a>01551       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].map;
<a name="l01552"></a>01552     }
<a name="l01553"></a>01553 
<a name="l01554"></a>01554   <span class="comment">/* outbound filter apply */</span>
<a name="l01555"></a>01555   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01556"></a>01556     {
<a name="l01557"></a>01557       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01558"></a>01558     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01559"></a>01559       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01560"></a>01560       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
<a name="l01561"></a>01561     }
<a name="l01562"></a>01562   <span class="keywordflow">else</span>
<a name="l01563"></a>01563     {
<a name="l01564"></a>01564       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01565"></a>01565     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01566"></a>01566       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01567"></a>01567       pfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01568"></a>01568     }
<a name="l01569"></a>01569   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01570"></a>01570     {
<a name="l01571"></a>01571       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01572"></a>01572     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01573"></a>01573       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01574"></a>01574       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist;
<a name="l01575"></a>01575     }
<a name="l01576"></a>01576   <span class="keywordflow">else</span>
<a name="l01577"></a>01577     {
<a name="l01578"></a>01578       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l01579"></a>01579     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l01580"></a>01580       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01581"></a>01581       pfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01582"></a>01582     }
<a name="l01583"></a>01583   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01584"></a>01584     {
<a name="l01585"></a>01585       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01586"></a>01586     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01587"></a>01587       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01588"></a>01588       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist;
<a name="l01589"></a>01589     }
<a name="l01590"></a>01590   <span class="keywordflow">else</span>
<a name="l01591"></a>01591     {
<a name="l01592"></a>01592       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l01593"></a>01593     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l01594"></a>01594       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01595"></a>01595       pfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01596"></a>01596     }
<a name="l01597"></a>01597   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01598"></a>01598     {
<a name="l01599"></a>01599       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01600"></a>01600         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01601"></a>01601       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01602"></a>01602       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map;
<a name="l01603"></a>01603     }
<a name="l01604"></a>01604   <span class="keywordflow">else</span>
<a name="l01605"></a>01605     {
<a name="l01606"></a>01606       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01607"></a>01607         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01608"></a>01608       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01609"></a>01609       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01610"></a>01610     }
<a name="l01611"></a>01611 
<a name="l01612"></a>01612  <span class="comment">/* RS-client&#39;s import/export route-maps. */</span>
<a name="l01613"></a>01613   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01614"></a>01614     {
<a name="l01615"></a>01615       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01616"></a>01616         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01617"></a>01617       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01618"></a>01618       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map;
<a name="l01619"></a>01619     }
<a name="l01620"></a>01620   <span class="keywordflow">else</span>
<a name="l01621"></a>01621     {
<a name="l01622"></a>01622       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01623"></a>01623         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01624"></a>01624       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01625"></a>01625       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01626"></a>01626     }
<a name="l01627"></a>01627   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01628"></a>01628     {
<a name="l01629"></a>01629       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01630"></a>01630         free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01631"></a>01631       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01632"></a>01632       pfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map;
<a name="l01633"></a>01633     }
<a name="l01634"></a>01634 
<a name="l01635"></a>01635   <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01636"></a>01636     {
<a name="l01637"></a>01637       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01638"></a>01638     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01639"></a>01639       pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01640"></a>01640       pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>;
<a name="l01641"></a>01641     }
<a name="l01642"></a>01642   <span class="keywordflow">else</span>
<a name="l01643"></a>01643     {
<a name="l01644"></a>01644       <span class="keywordflow">if</span> (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l01645"></a>01645     free (pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l01646"></a>01646       pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01647"></a>01647       pfilter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01648"></a>01648     }
<a name="l01649"></a>01649 } 
<a name="l01650"></a>01650 
<a name="l01651"></a>01651 <span class="comment">/* Peer group&#39;s remote AS configuration.  */</span>
<a name="l01652"></a>01652 <span class="keywordtype">int</span>
<a name="l01653"></a><a class="code" href="bgpd_8h.html#ab6274299663cbd06ec31e8a12822a1bd">01653</a> <a class="code" href="bgpd_8c.html#a65259d64d50c78f602e4455cec44292a">peer_group_remote_as</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *group_name, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as)
<a name="l01654"></a>01654 {
<a name="l01655"></a>01655   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l01656"></a>01656   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01657"></a>01657   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01658"></a>01658 
<a name="l01659"></a>01659   group = <a class="code" href="bgpd_8c.html#aa7db37de58ef9235f32a4ebecb9c4775">peer_group_lookup</a> (bgp, group_name);
<a name="l01660"></a>01660   <span class="keywordflow">if</span> (! group)
<a name="l01661"></a>01661     <span class="keywordflow">return</span> -1;
<a name="l01662"></a>01662 
<a name="l01663"></a>01663   <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == *as)
<a name="l01664"></a>01664     <span class="keywordflow">return</span> 0;
<a name="l01665"></a>01665 
<a name="l01666"></a>01666   <span class="comment">/* When we setup peer-group AS number all peer group member&#39;s AS</span>
<a name="l01667"></a>01667 <span class="comment">     number must be updated to same number.  */</span>
<a name="l01668"></a>01668   <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, *as);
<a name="l01669"></a>01669 
<a name="l01670"></a>01670   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l01671"></a>01671     {
<a name="l01672"></a>01672       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> != *as)
<a name="l01673"></a>01673     <a class="code" href="bgpd_8c.html#ab8061754d4271f9d42be60f7314d4d1d">peer_as_change</a> (peer, *as);
<a name="l01674"></a>01674     }
<a name="l01675"></a>01675 
<a name="l01676"></a>01676   <span class="keywordflow">return</span> 0;
<a name="l01677"></a>01677 }
<a name="l01678"></a>01678 
<a name="l01679"></a>01679 <span class="keywordtype">int</span>
<a name="l01680"></a><a class="code" href="bgpd_8h.html#a82ffca18f39bacd1217f0434500a96c9">01680</a> <a class="code" href="bgpd_8c.html#a11534c9662beb30137fc8df33822044c">peer_group_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group)
<a name="l01681"></a>01681 {
<a name="l01682"></a>01682   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01683"></a>01683   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01684"></a>01684   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01685"></a>01685 
<a name="l01686"></a>01686   bgp = group-&gt;<a class="code" href="structpeer__group.html#a38fc9c198c0c75ca9785c47a5f5a77db">bgp</a>;
<a name="l01687"></a>01687 
<a name="l01688"></a>01688   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l01689"></a>01689     {
<a name="l01690"></a>01690       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01691"></a>01691       <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
<a name="l01692"></a>01692     }
<a name="l01693"></a>01693   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);
<a name="l01694"></a>01694 
<a name="l01695"></a>01695   free (group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>);
<a name="l01696"></a>01696   group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01697"></a>01697 
<a name="l01698"></a>01698   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01699"></a>01699   <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>);
<a name="l01700"></a>01700 
<a name="l01701"></a>01701   <span class="comment">/* Delete from all peer_group list. */</span>
<a name="l01702"></a>01702   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, group);
<a name="l01703"></a>01703 
<a name="l01704"></a>01704   <a class="code" href="bgpd_8c.html#af5931e17119614624eb34e56765bed1d">peer_group_free</a> (group);
<a name="l01705"></a>01705 
<a name="l01706"></a>01706   <span class="keywordflow">return</span> 0;
<a name="l01707"></a>01707 }
<a name="l01708"></a>01708 
<a name="l01709"></a>01709 <span class="keywordtype">int</span>
<a name="l01710"></a><a class="code" href="bgpd_8h.html#af8cfbf08be3358aaf32a596f4a322e8e">01710</a> <a class="code" href="bgpd_8c.html#ab00980e8d334e36d3f6f498860cef27a">peer_group_remote_as_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group)
<a name="l01711"></a>01711 {
<a name="l01712"></a>01712   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01713"></a>01713   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01714"></a>01714 
<a name="l01715"></a>01715   <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01716"></a>01716     <span class="keywordflow">return</span> 0;
<a name="l01717"></a>01717 
<a name="l01718"></a>01718   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l01719"></a>01719     {
<a name="l01720"></a>01720       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01721"></a>01721       <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
<a name="l01722"></a>01722     }
<a name="l01723"></a>01723   <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>);
<a name="l01724"></a>01724 
<a name="l01725"></a>01725   group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> = 0;
<a name="l01726"></a>01726 
<a name="l01727"></a>01727   <span class="keywordflow">return</span> 0;
<a name="l01728"></a>01728 }
<a name="l01729"></a>01729 
<a name="l01730"></a>01730 <span class="comment">/* Bind specified peer to peer group.  */</span>
<a name="l01731"></a>01731 <span class="keywordtype">int</span>
<a name="l01732"></a><a class="code" href="bgpd_8h.html#a2b944a5a0e3f0c1f6ddcf506df4b1d01">01732</a> <a class="code" href="bgpd_8c.html#a97e6521400a139b83ca7f1503f853f9a">peer_group_bind</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su,
<a name="l01733"></a>01733          <span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as)
<a name="l01734"></a>01734 {
<a name="l01735"></a>01735   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01736"></a>01736   <span class="keywordtype">int</span> first_member = 0;
<a name="l01737"></a>01737 
<a name="l01738"></a>01738   <span class="comment">/* Check peer group&#39;s address family.  */</span>
<a name="l01739"></a>01739   <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l01740"></a>01740     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a2cde295fdba79d53ae41b92df3de4e9b">BGP_ERR_PEER_GROUP_AF_UNCONFIGURED</a>;
<a name="l01741"></a>01741 
<a name="l01742"></a>01742   <span class="comment">/* Lookup the peer.  */</span>
<a name="l01743"></a>01743   peer = <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (bgp, su);
<a name="l01744"></a>01744 
<a name="l01745"></a>01745   <span class="comment">/* Create a new peer. */</span>
<a name="l01746"></a>01746   <span class="keywordflow">if</span> (! peer)
<a name="l01747"></a>01747     {
<a name="l01748"></a>01748       <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01749"></a>01749     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a29f733011c01d73c129dc0406c86e1bf">BGP_ERR_PEER_GROUP_NO_REMOTE_AS</a>;
<a name="l01750"></a>01750 
<a name="l01751"></a>01751       peer = <a class="code" href="bgpd_8c.html#a92cfb586b0bfefb0f491e846df943b9e">peer_create</a> (su, bgp, bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>, afi, safi);
<a name="l01752"></a>01752       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l01753"></a>01753       peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 1;
<a name="l01754"></a>01754 
<a name="l01755"></a>01755       peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
<a name="l01756"></a>01756       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
<a name="l01757"></a>01757       <a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (group, peer, afi, safi);
<a name="l01758"></a>01758 
<a name="l01759"></a>01759       <span class="keywordflow">return</span> 0;
<a name="l01760"></a>01760     }
<a name="l01761"></a>01761 
<a name="l01762"></a>01762   <span class="comment">/* When the peer already belongs to peer group, check the consistency.  */</span>
<a name="l01763"></a>01763   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l01764"></a>01764     {
<a name="l01765"></a>01765       <span class="keywordflow">if</span> (strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>) != 0)
<a name="l01766"></a>01766     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a01e63518f6e7a1a6fb5c05a9363eac81">BGP_ERR_PEER_GROUP_CANT_CHANGE</a>;
<a name="l01767"></a>01767 
<a name="l01768"></a>01768       <span class="keywordflow">return</span> 0;
<a name="l01769"></a>01769     }
<a name="l01770"></a>01770 
<a name="l01771"></a>01771   <span class="comment">/* Check current peer group configuration.  */</span>
<a name="l01772"></a>01772   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
<a name="l01773"></a>01773       &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, group-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>) != 0)
<a name="l01774"></a>01774     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a13e745dc6836e711e8654d2657af711c">BGP_ERR_PEER_GROUP_MISMATCH</a>;
<a name="l01775"></a>01775 
<a name="l01776"></a>01776   <span class="keywordflow">if</span> (! group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01777"></a>01777     {
<a name="l01778"></a>01778       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>
<a name="l01779"></a>01779       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer))
<a name="l01780"></a>01780     {
<a name="l01781"></a>01781       <span class="keywordflow">if</span> (as)
<a name="l01782"></a>01782         *as = peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>;
<a name="l01783"></a>01783       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69bf83a867041149f316aac8c9d48850">BGP_ERR_PEER_GROUP_PEER_TYPE_DIFFERENT</a>;
<a name="l01784"></a>01784     }
<a name="l01785"></a>01785 
<a name="l01786"></a>01786       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>)
<a name="l01787"></a>01787     first_member = 1;
<a name="l01788"></a>01788     }
<a name="l01789"></a>01789 
<a name="l01790"></a>01790   peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 1;
<a name="l01791"></a>01791   peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 1;
<a name="l01792"></a>01792   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
<a name="l01793"></a>01793     {
<a name="l01794"></a>01794       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l01795"></a>01795       
<a name="l01796"></a>01796       peer = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* group-&gt;peer list reference */</span>
<a name="l01797"></a>01797       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
<a name="l01798"></a>01798     }
<a name="l01799"></a>01799   <span class="keywordflow">else</span>
<a name="l01800"></a>01800     <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (group &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> == group);
<a name="l01801"></a>01801 
<a name="l01802"></a>01802   <span class="keywordflow">if</span> (first_member)
<a name="l01803"></a>01803     {
<a name="l01804"></a>01804       <span class="comment">/* Advertisement-interval reset */</span>
<a name="l01805"></a>01805       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l01806"></a>01806     group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l01807"></a>01807       <span class="keywordflow">else</span>
<a name="l01808"></a>01808     group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l01809"></a>01809 
<a name="l01810"></a>01810       <span class="comment">/* ebgp-multihop reset */</span>
<a name="l01811"></a>01811       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l01812"></a>01812     group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 255;
<a name="l01813"></a>01813 
<a name="l01814"></a>01814       <span class="comment">/* local-as reset */</span>
<a name="l01815"></a>01815       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>)
<a name="l01816"></a>01816     {
<a name="l01817"></a>01817       group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
<a name="l01818"></a>01818       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l01819"></a>01819     }
<a name="l01820"></a>01820     }
<a name="l01821"></a>01821 
<a name="l01822"></a>01822   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l01823"></a>01823     {
<a name="l01824"></a>01824       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#a3363f400142fb233235d62ccdea22e38">pn</a>;
<a name="l01825"></a>01825       
<a name="l01826"></a>01826       <span class="comment">/* If it&#39;s not configured as RSERVER_CLIENT in any other address</span>
<a name="l01827"></a>01827 <span class="comment">          family, without being member of a peer_group, remove it from</span>
<a name="l01828"></a>01828 <span class="comment">          list bgp-&gt;rsclient.*/</span>
<a name="l01829"></a>01829       <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ad8fe8bf899349888a64c0dd382db305d">peer_rsclient_active</a> (peer)
<a name="l01830"></a>01830           &amp;&amp; (pn = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, peer)))
<a name="l01831"></a>01831         {
<a name="l01832"></a>01832           <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* peer rsclient reference */</span>
<a name="l01833"></a>01833           <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>, pn);
<a name="l01834"></a>01834 
<a name="l01835"></a>01835           <span class="comment">/* Clear our own rsclient rib for this afi/safi. */</span>
<a name="l01836"></a>01836           <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a8c1adeda524233bcf00f4616680e0643">BGP_CLEAR_ROUTE_MY_RSCLIENT</a>);
<a name="l01837"></a>01837         }
<a name="l01838"></a>01838 
<a name="l01839"></a>01839       <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi]);
<a name="l01840"></a>01840 
<a name="l01841"></a>01841       <span class="comment">/* Import policy. */</span>
<a name="l01842"></a>01842       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01843"></a>01843         {
<a name="l01844"></a>01844           free (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[RMAP_IMPORT].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01845"></a>01845           peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01846"></a>01846           peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01847"></a>01847         }
<a name="l01848"></a>01848 
<a name="l01849"></a>01849       <span class="comment">/* Export policy. */</span>
<a name="l01850"></a>01850       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l01851"></a>01851               &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l01852"></a>01852         {
<a name="l01853"></a>01853           free (peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[RMAP_EXPORT].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l01854"></a>01854           peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01855"></a>01855           peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi].<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01856"></a>01856         }
<a name="l01857"></a>01857     }
<a name="l01858"></a>01858 
<a name="l01859"></a>01859   <a class="code" href="bgpd_8c.html#a5e92ed5850b701bbfe021c06579fa083">peer_group2peer_config_copy</a> (group, peer, afi, safi);
<a name="l01860"></a>01860 
<a name="l01861"></a>01861   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01862"></a>01862     {
<a name="l01863"></a>01863       peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab019c4d00bd1e4db656139e0f60a1a52">PEER_DOWN_RMAP_BIND</a>;
<a name="l01864"></a>01864       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01865"></a>01865                       <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l01866"></a>01866     }
<a name="l01867"></a>01867   <span class="keywordflow">else</span>
<a name="l01868"></a>01868     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l01869"></a>01869 
<a name="l01870"></a>01870   <span class="keywordflow">return</span> 0;
<a name="l01871"></a>01871 }
<a name="l01872"></a>01872 
<a name="l01873"></a>01873 <span class="keywordtype">int</span>
<a name="l01874"></a><a class="code" href="bgpd_8h.html#a1da2193a013d17c564abbb984d30ebb1">01874</a> <a class="code" href="bgpd_8c.html#a24e54015a4ae245729350609b57b21fb">peer_group_unbind</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l01875"></a>01875            <span class="keyword">struct</span> <a class="code" href="structpeer__group.html">peer_group</a> *group, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l01876"></a>01876 {
<a name="l01877"></a>01877   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l01878"></a>01878       <span class="keywordflow">return</span> 0;
<a name="l01879"></a>01879 
<a name="l01880"></a>01880   <span class="keywordflow">if</span> (group != peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>)
<a name="l01881"></a>01881     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a13e745dc6836e711e8654d2657af711c">BGP_ERR_PEER_GROUP_MISMATCH</a>;
<a name="l01882"></a>01882 
<a name="l01883"></a>01883   peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] = 0;
<a name="l01884"></a>01884   peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi] = 0;
<a name="l01885"></a>01885   <a class="code" href="bgpd_8c.html#a44d5128304b168da12bc07ce68f899dd">peer_af_flag_reset</a> (peer, afi, safi);
<a name="l01886"></a>01886 
<a name="l01887"></a>01887   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi])
<a name="l01888"></a>01888     peer-&gt;<a class="code" href="structpeer.html#a7e8ca2a0bcdc168c59140e710a1f2060">rib</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01889"></a>01889 
<a name="l01890"></a>01890   <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l01891"></a>01891     {
<a name="l01892"></a>01892       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer));
<a name="l01893"></a>01893       <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (peer); <span class="comment">/* peer group list reference */</span>
<a name="l01894"></a>01894       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, peer);
<a name="l01895"></a>01895       peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01896"></a>01896       <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01897"></a>01897     {
<a name="l01898"></a>01898       <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
<a name="l01899"></a>01899       <span class="keywordflow">return</span> 0;
<a name="l01900"></a>01900     }
<a name="l01901"></a>01901       <a class="code" href="bgpd_8c.html#a170112becd0b52c5fe1c41af90881d8e">peer_global_config_reset</a> (peer);
<a name="l01902"></a>01902     }
<a name="l01903"></a>01903 
<a name="l01904"></a>01904   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01905"></a>01905     {
<a name="l01906"></a>01906       peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af7429443bd1cc46883089a886250e2e8">PEER_DOWN_RMAP_UNBIND</a>;
<a name="l01907"></a>01907       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01908"></a>01908                       <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l01909"></a>01909     }
<a name="l01910"></a>01910   <span class="keywordflow">else</span>
<a name="l01911"></a>01911     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l01912"></a>01912 
<a name="l01913"></a>01913   <span class="keywordflow">return</span> 0;
<a name="l01914"></a>01914 }
<a name="l01915"></a>01915 
<a name="l01916"></a>01916 <span class="comment">/* BGP instance creation by `router bgp&#39; commands. */</span>
<a name="l01917"></a>01917 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *
<a name="l01918"></a><a class="code" href="bgpd_8c.html#a9df198f45ee2bcdf5601560fc35fd713">01918</a> <a class="code" href="bgpd_8c.html#a9df198f45ee2bcdf5601560fc35fd713">bgp_create</a> (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l01919"></a>01919 {
<a name="l01920"></a>01920   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01921"></a>01921   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l01922"></a>01922   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l01923"></a>01923 
<a name="l01924"></a>01924   <span class="keywordflow">if</span> ( (bgp = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badfedc4011d67f9abf9223ebffbcd8259">MTYPE_BGP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> bgp))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01925"></a>01925     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01926"></a>01926   
<a name="l01927"></a>01927   <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (bgp);
<a name="l01928"></a>01928   bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> = <a class="code" href="bgpd_8c.html#a86964de26d60ec9110c78a601b48ae1d">peer_new</a> (bgp);
<a name="l01929"></a>01929   bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c0f22b6104f6f5dcbe618df405218cd">MTYPE_BGP_PEER_HOST</a>, <span class="stringliteral">&quot;Static announcement&quot;</span>);
<a name="l01930"></a>01930 
<a name="l01931"></a>01931   bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01932"></a>01932   bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *)) <a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a>;
<a name="l01933"></a>01933 
<a name="l01934"></a>01934   bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01935"></a>01935   bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span> *, <span class="keywordtype">void</span> *)) <a class="code" href="bgpd_8c.html#a693e769f899359a43259c2940f31546b">peer_group_cmp</a>;
<a name="l01936"></a>01936 
<a name="l01937"></a>01937   bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l01938"></a>01938   bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>-&gt;<a class="code" href="structlist.html#af19c9d07985ca8f95f0098bb0ef98f66">cmp</a> = (int (*)(<span class="keywordtype">void</span>*, <span class="keywordtype">void</span>*)) <a class="code" href="bgpd_8c.html#a94ada33347bf94ed5190385ff0fd86a9">peer_cmp</a>;
<a name="l01939"></a>01939 
<a name="l01940"></a>01940   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l01941"></a>01941     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l01942"></a>01942       {
<a name="l01943"></a>01943     bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
<a name="l01944"></a>01944     bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
<a name="l01945"></a>01945     bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi] = <a class="code" href="bgp__table_8c.html#afbe454c63fbb296e768cb66efa0962da">bgp_table_init</a> (afi, safi);
<a name="l01946"></a>01946       }
<a name="l01947"></a>01947 
<a name="l01948"></a>01948   bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> = <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>;
<a name="l01949"></a>01949   bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> = <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>;
<a name="l01950"></a>01950   bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> = <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>;
<a name="l01951"></a>01951   bgp-&gt;<a class="code" href="structbgp.html#aaa8a4745e644e823c03cdc6606645272">restart_time</a> = <a class="code" href="bgpd_8h.html#a77f0e5dde6788dc595ae68fb60334c0a">BGP_DEFAULT_RESTART_TIME</a>;
<a name="l01952"></a>01952   bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a> = <a class="code" href="bgpd_8h.html#ac5c5ca169ac036d72c23ce18db6a327b">BGP_DEFAULT_STALEPATH_TIME</a>;
<a name="l01953"></a>01953 
<a name="l01954"></a>01954   bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> = *<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l01955"></a>01955 
<a name="l01956"></a>01956   <span class="keywordflow">if</span> (name)
<a name="l01957"></a>01957     bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = strdup (name);
<a name="l01958"></a>01958 
<a name="l01959"></a>01959   <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01960"></a>01960 }
<a name="l01961"></a>01961 
<a name="l01962"></a>01962 <span class="comment">/* Return first entry of BGP. */</span>
<a name="l01963"></a>01963 <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *
<a name="l01964"></a><a class="code" href="bgpd_8h.html#ae19787bc29126d524ac261d00bacc13d">01964</a> <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> (<span class="keywordtype">void</span>)
<a name="l01965"></a>01965 {
<a name="l01966"></a>01966   <span class="keywordflow">if</span> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>-&gt;<a class="code" href="structlist.html#a8306954be149c09248a51079826dd5f8">head</a>)
<a name="l01967"></a>01967     <span class="keywordflow">return</span> (<a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>)));
<a name="l01968"></a>01968   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01969"></a>01969 }
<a name="l01970"></a>01970 
<a name="l01971"></a>01971 <span class="comment">/* Lookup BGP entry. */</span>
<a name="l01972"></a>01972 <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *
<a name="l01973"></a><a class="code" href="bgpd_8h.html#a128e522f0ffa977bd5ee6c061121fb0e">01973</a> <a class="code" href="bgpd_8c.html#aff4b30a264b94877ac5cf295aa0b51f9">bgp_lookup</a> (<a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> <a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l01974"></a>01974 {
<a name="l01975"></a>01975   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01976"></a>01976   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01977"></a>01977 
<a name="l01978"></a>01978   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l01979"></a>01979     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as
<a name="l01980"></a>01980     &amp;&amp; ((bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; name == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l01981"></a>01981         || (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> &amp;&amp; name &amp;&amp; strcmp (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, name) == 0)))
<a name="l01982"></a>01982       <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01983"></a>01983   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01984"></a>01984 }
<a name="l01985"></a>01985 
<a name="l01986"></a>01986 <span class="comment">/* Lookup BGP structure by view name. */</span>
<a name="l01987"></a>01987 <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *
<a name="l01988"></a><a class="code" href="bgpd_8h.html#abf8b735427e59ea904a20f4e91a6bbb4">01988</a> <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l01989"></a>01989 {
<a name="l01990"></a>01990   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01991"></a>01991   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01992"></a>01992 
<a name="l01993"></a>01993   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
<a name="l01994"></a>01994     <span class="keywordflow">if</span> ((bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; name == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01995"></a>01995     || (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> &amp;&amp; name &amp;&amp; strcmp (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, name) == 0))
<a name="l01996"></a>01996       <span class="keywordflow">return</span> <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01997"></a>01997   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01998"></a>01998 }
<a name="l01999"></a>01999 
<a name="l02000"></a>02000 <span class="comment">/* Called from VTY commands. */</span>
<a name="l02001"></a>02001 <span class="keywordtype">int</span>
<a name="l02002"></a><a class="code" href="bgpd_8h.html#ac25389ac970293a84100e97f6eadd17a">02002</a> <a class="code" href="bgpd_8c.html#a6922211c65b05f362d1d2ba029965b66">bgp_get</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> **bgp_val, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> *as, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l02003"></a>02003 {
<a name="l02004"></a>02004   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02005"></a>02005 
<a name="l02006"></a>02006   <span class="comment">/* Multiple instance check. */</span>
<a name="l02007"></a>02007   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
<a name="l02008"></a>02008     {
<a name="l02009"></a>02009       <span class="keywordflow">if</span> (name)
<a name="l02010"></a>02010     bgp = <a class="code" href="bgpd_8c.html#abaea415d663b34eb4aef1d84737178f7">bgp_lookup_by_name</a> (name);
<a name="l02011"></a>02011       <span class="keywordflow">else</span>
<a name="l02012"></a>02012     bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l02013"></a>02013 
<a name="l02014"></a>02014       <span class="comment">/* Already exists. */</span>
<a name="l02015"></a>02015       <span class="keywordflow">if</span> (bgp)
<a name="l02016"></a>02016     {
<a name="l02017"></a>02017           <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *as)
<a name="l02018"></a>02018         {
<a name="l02019"></a>02019           *as = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l02020"></a>02020           <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a1ae3b0d22a4463de041355a69e4049bc">BGP_ERR_INSTANCE_MISMATCH</a>;
<a name="l02021"></a>02021         }
<a name="l02022"></a>02022       *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02023"></a>02023       <span class="keywordflow">return</span> 0;
<a name="l02024"></a>02024     }
<a name="l02025"></a>02025     }
<a name="l02026"></a>02026   <span class="keywordflow">else</span>
<a name="l02027"></a>02027     {
<a name="l02028"></a>02028       <span class="comment">/* BGP instance name can not be specified for single instance.  */</span>
<a name="l02029"></a>02029       <span class="keywordflow">if</span> (name)
<a name="l02030"></a>02030     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#acc03e4e07de03f2d390a1214f4726ddf">BGP_ERR_MULTIPLE_INSTANCE_NOT_SET</a>;
<a name="l02031"></a>02031 
<a name="l02032"></a>02032       <span class="comment">/* Get default BGP structure if exists. */</span>
<a name="l02033"></a>02033       bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l02034"></a>02034 
<a name="l02035"></a>02035       <span class="keywordflow">if</span> (bgp)
<a name="l02036"></a>02036     {
<a name="l02037"></a>02037       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> != *as)
<a name="l02038"></a>02038         {
<a name="l02039"></a>02039           *as = bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
<a name="l02040"></a>02040           <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a512274cef0e6a3421f5ffdbc4393ec84">BGP_ERR_AS_MISMATCH</a>;
<a name="l02041"></a>02041         }
<a name="l02042"></a>02042       *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02043"></a>02043       <span class="keywordflow">return</span> 0;
<a name="l02044"></a>02044     }
<a name="l02045"></a>02045     }
<a name="l02046"></a>02046 
<a name="l02047"></a>02047   <span class="comment">/* Create BGP server socket, if first instance.  */</span>
<a name="l02048"></a>02048   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>))
<a name="l02049"></a>02049     {
<a name="l02050"></a>02050       <span class="keywordflow">if</span> (<a class="code" href="bgp__network_8c.html#a5d2360bd37d4a6c42d40de186eeebf59">bgp_socket</a> (bm-&gt;<a class="code" href="structbgp__master.html#ad78fc56207b16cd34df39279ec2934b0">port</a>, bm-&gt;<a class="code" href="structbgp__master.html#aa9dd824324ee5f754162af0e29c2624a">address</a>) &lt; 0)
<a name="l02051"></a>02051     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l02052"></a>02052     }
<a name="l02053"></a>02053 
<a name="l02054"></a>02054   bgp = <a class="code" href="bgpd_8c.html#a9df198f45ee2bcdf5601560fc35fd713">bgp_create</a> (as, name);
<a name="l02055"></a>02055   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgp);
<a name="l02056"></a>02056   <a class="code" href="bgpd_8c.html#a95a081ca99d2713d2405c00786db1193">bgp_router_id_set</a>(bgp, &amp;<a class="code" href="bgp__vty_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a>);
<a name="l02057"></a>02057   *bgp_val = <a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02058"></a>02058 
<a name="l02059"></a>02059   <span class="keywordflow">return</span> 0;
<a name="l02060"></a>02060 }
<a name="l02061"></a>02061 
<a name="l02062"></a>02062 <span class="comment">/* Delete BGP instance. */</span>
<a name="l02063"></a>02063 <span class="keywordtype">int</span>
<a name="l02064"></a><a class="code" href="bgpd_8h.html#a4e6be23d236e5fd4fda3188fb2ff31de">02064</a> <a class="code" href="bgpd_8c.html#a1f973ab34674a55e17934bca3e2c8b4d">bgp_delete</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l02065"></a>02065 {
<a name="l02066"></a>02066   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l02067"></a>02067   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02068"></a>02068   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02069"></a>02069   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
<a name="l02070"></a>02070   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l02071"></a>02071   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02072"></a>02072 
<a name="l02073"></a>02073   <span class="comment">/* Delete static route. */</span>
<a name="l02074"></a>02074   <a class="code" href="bgp__route_8c.html#a4902f0940ffe01568daa3d9df842c874">bgp_static_delete</a> (bgp);
<a name="l02075"></a>02075 
<a name="l02076"></a>02076   <span class="comment">/* Unset redistribution. */</span>
<a name="l02077"></a>02077   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l02078"></a>02078     <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++) 
<a name="l02079"></a>02079       <span class="keywordflow">if</span> (i != <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
<a name="l02080"></a>02080     <a class="code" href="bgp__zebra_8c.html#aa90152d0184e4d44b31492232ebad27e">bgp_redistribute_unset</a> (bgp, afi, i);
<a name="l02081"></a>02081 
<a name="l02082"></a>02082   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, next, peer))
<a name="l02083"></a>02083     <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
<a name="l02084"></a>02084 
<a name="l02085"></a>02085   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, next, group))
<a name="l02086"></a>02086     <a class="code" href="bgpd_8c.html#a11534c9662beb30137fc8df33822044c">peer_group_delete</a> (group);
<a name="l02087"></a>02087 
<a name="l02088"></a>02088   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>) == 0);
<a name="l02089"></a>02089 
<a name="l02090"></a>02090   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>) {
<a name="l02091"></a>02091     <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a>(bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a>);
<a name="l02092"></a>02092     bgp-&gt;<a class="code" href="structbgp.html#ad576e7fa007ce5b32e2d6768813841f2">peer_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02093"></a>02093   }
<a name="l02094"></a>02094   
<a name="l02095"></a>02095   <span class="comment">/* Remove visibility via the master list - there may however still be</span>
<a name="l02096"></a>02096 <span class="comment">   * routes to be processed still referencing the struct bgp.</span>
<a name="l02097"></a>02097 <span class="comment">   */</span>
<a name="l02098"></a>02098   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgp);
<a name="l02099"></a>02099   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>))
<a name="l02100"></a>02100     <a class="code" href="bgp__network_8c.html#a9d9d59ff98a77c9b4b2c3d3c2b467ec5">bgp_close</a> ();
<a name="l02101"></a>02101 
<a name="l02102"></a>02102   <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a>(bgp);  <span class="comment">/* initial reference */</span>
<a name="l02103"></a>02103   
<a name="l02104"></a>02104   <span class="keywordflow">return</span> 0;
<a name="l02105"></a>02105 }
<a name="l02106"></a>02106 
<a name="l02107"></a>02107 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">bgp_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *);
<a name="l02108"></a>02108 
<a name="l02109"></a>02109 <span class="keywordtype">void</span>
<a name="l02110"></a><a class="code" href="bgpd_8h.html#a40ddefce881209813bcd93958233ae21">02110</a> <a class="code" href="bgpd_8c.html#a94fe8d4b7a275b31df04f8a46ab1ac37">bgp_lock</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l02111"></a>02111 {
<a name="l02112"></a>02112   ++bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a>;
<a name="l02113"></a>02113 }
<a name="l02114"></a>02114 
<a name="l02115"></a>02115 <span class="keywordtype">void</span>
<a name="l02116"></a><a class="code" href="bgpd_8h.html#a23a12c029f7a88a02aea37776e27bd25">02116</a> <a class="code" href="bgpd_8c.html#a3752e9686437ac06be7b19ec985f1596">bgp_unlock</a>(<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l02117"></a>02117 {
<a name="l02118"></a>02118   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a> &gt; 0);
<a name="l02119"></a>02119   <span class="keywordflow">if</span> (--bgp-&gt;<a class="code" href="structbgp.html#aa34afafa5f4a7365ac05d5c94af8e8e1">lock</a> == 0)
<a name="l02120"></a>02120     <a class="code" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">bgp_free</a> (bgp);
<a name="l02121"></a>02121 }
<a name="l02122"></a>02122 
<a name="l02123"></a>02123 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02124"></a><a class="code" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">02124</a> <a class="code" href="bgpd_8c.html#af8f51196a2f73df3235ce42349fbd68c">bgp_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>)
<a name="l02125"></a>02125 {
<a name="l02126"></a>02126   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l02127"></a>02127   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l02128"></a>02128 
<a name="l02129"></a>02129   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>);
<a name="l02130"></a>02130   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>);
<a name="l02131"></a>02131   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (bgp-&gt;<a class="code" href="structbgp.html#a4ccd4dea11eddfa74dc5518fdb448b67">rsclient</a>);
<a name="l02132"></a>02132 
<a name="l02133"></a>02133   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
<a name="l02134"></a>02134     free (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
<a name="l02135"></a>02135   
<a name="l02136"></a>02136   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l02137"></a>02137     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l02138"></a>02138       {
<a name="l02139"></a>02139     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi])
<a name="l02140"></a>02140           <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#af06132502d1bbb4584e996e978254e34">route</a>[afi][safi]);
<a name="l02141"></a>02141     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi])
<a name="l02142"></a>02142           <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#aa08fac50603e99736e7a3e1949f8c898">aggregate</a>[afi][safi]) ;
<a name="l02143"></a>02143     <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi])
<a name="l02144"></a>02144           <a class="code" href="bgp__table_8c.html#ad01e2d5d08424b1d98abdd112d98842f">bgp_table_finish</a> (&amp;bgp-&gt;<a class="code" href="structbgp.html#a165710ce04dcbf78397c514707c15f3b">rib</a>[afi][safi]);
<a name="l02145"></a>02145       }
<a name="l02146"></a>02146   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badfedc4011d67f9abf9223ebffbcd8259">MTYPE_BGP</a>, bgp);
<a name="l02147"></a>02147 }
<a name="l02148"></a>02148 
<a name="l02149"></a>02149 <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l02150"></a><a class="code" href="bgpd_8h.html#a4f2d94b5a445513975e1df07748c99e5">02150</a> <a class="code" href="bgpd_8c.html#a65909a6f0ec7c8ab26101fad9ff1b6f7">peer_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>)
<a name="l02151"></a>02151 {
<a name="l02152"></a>02152   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l02153"></a>02153   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02154"></a>02154 
<a name="l02155"></a>02155   <span class="keywordflow">if</span> (bgp != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02156"></a>02156     {
<a name="l02157"></a>02157       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l02158"></a>02158         <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
<a name="l02159"></a>02159             &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l02160"></a>02160           <span class="keywordflow">return</span> peer;
<a name="l02161"></a>02161     }
<a name="l02162"></a>02162   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02163"></a>02163     {
<a name="l02164"></a>02164       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *bgpnode, *nbgpnode;
<a name="l02165"></a>02165   
<a name="l02166"></a>02166       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgpnode, nbgpnode, bgp))
<a name="l02167"></a>02167         <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l02168"></a>02168           <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
<a name="l02169"></a>02169               &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l02170"></a>02170             <span class="keywordflow">return</span> peer;
<a name="l02171"></a>02171     }
<a name="l02172"></a>02172   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02173"></a>02173 }
<a name="l02174"></a>02174 
<a name="l02175"></a>02175 <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *
<a name="l02176"></a><a class="code" href="bgpd_8h.html#a3f266e66aa9bed7c215f315e8967a1d0">02176</a> <a class="code" href="bgpd_8c.html#a38fe2d829b66f299b42e47bd2d3d5a6c">peer_lookup_with_open</a> (<span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as,
<a name="l02177"></a>02177                <span class="keyword">struct</span> in_addr *<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>, <span class="keywordtype">int</span> *<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l02178"></a>02178 {
<a name="l02179"></a>02179   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l02180"></a>02180   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02181"></a>02181   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *bgpnode;
<a name="l02182"></a>02182   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02183"></a>02183 
<a name="l02184"></a>02184   <span class="keywordflow">if</span> (! bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>)
<a name="l02185"></a>02185     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02186"></a>02186 
<a name="l02187"></a>02187   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, bgpnode, bgp))
<a name="l02188"></a>02188     {
<a name="l02189"></a>02189       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, peer))
<a name="l02190"></a>02190         {
<a name="l02191"></a>02191           <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
<a name="l02192"></a>02192               &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l02193"></a>02193             {
<a name="l02194"></a>02194               <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as
<a name="l02195"></a>02195                   &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>.s_addr == remote_id-&gt;s_addr)
<a name="l02196"></a>02196                 <span class="keywordflow">return</span> <a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>;
<a name="l02197"></a>02197               <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as)
<a name="l02198"></a>02198                 *as = 1;
<a name="l02199"></a>02199             }
<a name="l02200"></a>02200         }
<a name="l02201"></a>02201 
<a name="l02202"></a>02202       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, peer))
<a name="l02203"></a>02203         {
<a name="l02204"></a>02204           <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, su)
<a name="l02205"></a>02205               &amp;&amp;  ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l02206"></a>02206             {
<a name="l02207"></a>02207               <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as
<a name="l02208"></a>02208                   &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a>.s_addr == 0)
<a name="l02209"></a>02209                 <span class="keywordflow">return</span> <a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>;
<a name="l02210"></a>02210               <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a> == remote_as)
<a name="l02211"></a>02211                 *as = 1;
<a name="l02212"></a>02212             }
<a name="l02213"></a>02213         }
<a name="l02214"></a>02214     }
<a name="l02215"></a>02215   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02216"></a>02216 }
<a name="l02217"></a>02217 
<a name="l02218"></a>02218 <span class="comment">/* If peer is configured at least one address family return 1. */</span>
<a name="l02219"></a>02219 <span class="keywordtype">int</span>
<a name="l02220"></a><a class="code" href="bgpd_8h.html#a75bf2b9959a54736cdad1bcab55cb7bf">02220</a> <a class="code" href="bgpd_8c.html#ae512a15120d606173592586a761742aa">peer_active</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02221"></a>02221 {
<a name="l02222"></a>02222   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l02223"></a>02223       || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
<a name="l02224"></a>02224       || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
<a name="l02225"></a>02225       || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l02226"></a>02226       || peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l02227"></a>02227     <span class="keywordflow">return</span> 1;
<a name="l02228"></a>02228   <span class="keywordflow">return</span> 0;
<a name="l02229"></a>02229 }
<a name="l02230"></a>02230 
<a name="l02231"></a>02231 <span class="comment">/* If peer is negotiated at least one address family return 1. */</span>
<a name="l02232"></a>02232 <span class="keywordtype">int</span>
<a name="l02233"></a><a class="code" href="bgpd_8h.html#a653a4c37eacf15c84f13a74c0a132290">02233</a> <a class="code" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02234"></a>02234 {
<a name="l02235"></a>02235   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l02236"></a>02236       || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
<a name="l02237"></a>02237       || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
<a name="l02238"></a>02238       || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
<a name="l02239"></a>02239       || peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l02240"></a>02240     <span class="keywordflow">return</span> 1;
<a name="l02241"></a>02241   <span class="keywordflow">return</span> 0;
<a name="l02242"></a>02242 }
<a name="l02243"></a>02243 
<a name="l02244"></a>02244 <span class="comment">/* peer_flag_change_type. */</span>
<a name="l02245"></a><a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">02245</a> <span class="keyword">enum</span> <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a>
<a name="l02246"></a>02246 {
<a name="l02247"></a><a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">02247</a>   <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a>,
<a name="l02248"></a><a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">02248</a>   <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>,
<a name="l02249"></a><a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">02249</a>   <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>,
<a name="l02250"></a><a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">02250</a>   <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>,
<a name="l02251"></a>02251 };
<a name="l02252"></a>02252 
<a name="l02253"></a>02253 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02254"></a><a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">02254</a> <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02255"></a>02255             <span class="keyword">enum</span> <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l02256"></a>02256 {
<a name="l02257"></a>02257   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02258"></a>02258     <span class="keywordflow">return</span>;
<a name="l02259"></a>02259 
<a name="l02260"></a>02260   <span class="keywordflow">if</span> (type == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
<a name="l02261"></a>02261     <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02262"></a>02262              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02263"></a>02263   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>)
<a name="l02264"></a>02264     {
<a name="l02265"></a>02265       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>)
<a name="l02266"></a>02266       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
<a name="l02267"></a>02267     <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
<a name="l02268"></a>02268       <span class="keywordflow">else</span>
<a name="l02269"></a>02269     <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02270"></a>02270              <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02271"></a>02271     }
<a name="l02272"></a>02272   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>)
<a name="l02273"></a>02273     <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l02274"></a>02274 }
<a name="l02275"></a>02275 
<a name="l02276"></a><a class="code" href="structpeer__flag__action.html">02276</a> <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a>
<a name="l02277"></a>02277 {
<a name="l02278"></a>02278   <span class="comment">/* Peer&#39;s flag.  */</span>
<a name="l02279"></a><a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">02279</a>   u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>;
<a name="l02280"></a>02280 
<a name="l02281"></a>02281   <span class="comment">/* This flag can be set for peer-group member.  */</span>
<a name="l02282"></a><a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">02282</a>   u_char <a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a>;
<a name="l02283"></a>02283 
<a name="l02284"></a>02284   <span class="comment">/* Action when the flag is changed.  */</span>
<a name="l02285"></a><a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">02285</a>   <span class="keyword">enum</span> <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854">peer_change_type</a> <a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a>;
<a name="l02286"></a>02286 
<a name="l02287"></a>02287   <span class="comment">/* Peer down cause */</span>
<a name="l02288"></a><a class="code" href="structpeer__flag__action.html#a69f342aab28e37eb49420a5dea19a4c1">02288</a>   u_char <a class="code" href="structpeer__flag__action.html#a69f342aab28e37eb49420a5dea19a4c1">peer_down</a>;
<a name="l02289"></a>02289 };
<a name="l02290"></a>02290 
<a name="l02291"></a><a class="code" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">02291</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> <a class="code" href="bgpd_8c.html#a0285035dd7ce003bb3265c8b1a23f343">peer_flag_action_list</a>[] =
<a name="l02292"></a>02292   {
<a name="l02293"></a>02293     { <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>,                  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02294"></a>02294     { <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>,                 0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02295"></a>02295     { <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>,          0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
<a name="l02296"></a>02296     { <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>,      0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
<a name="l02297"></a>02297     { <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>,         0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a> },
<a name="l02298"></a>02298     { <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>,       0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02299"></a>02299     { <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>,  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02300"></a>02300     { 0, 0, 0 }
<a name="l02301"></a>02301   };
<a name="l02302"></a>02302 
<a name="l02303"></a><a class="code" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">02303</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> <a class="code" href="bgpd_8c.html#af3122e10da4b070a7dcb03d60c663d96">peer_af_flag_action_list</a>[] =
<a name="l02304"></a>02304   {
<a name="l02305"></a>02305     { <a class="code" href="bgpd_8h.html#a81ac724618a5428b3af519e296c0263e">PEER_FLAG_NEXTHOP_SELF</a>,             1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02306"></a>02306     { <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>,           1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02307"></a>02307     { <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>,       1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02308"></a>02308     { <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>,            0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a> },
<a name="l02309"></a>02309     { <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>,         1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02310"></a>02310     { <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>,           1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02311"></a>02311     { <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02312"></a>02312     { <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02313"></a>02313     { <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02314"></a>02314     { <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>,        1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02315"></a>02315     { <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>,               0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a> },
<a name="l02316"></a>02316     { <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02317"></a>02317     { <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>,            1, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a> },
<a name="l02318"></a>02318     { <a class="code" href="bgpd_8h.html#abba8d6c84283161714fa65e519a3e3ac">PEER_FLAG_NEXTHOP_LOCAL_UNCHANGED</a>,  0, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a> },
<a name="l02319"></a>02319     { 0, 0, 0 }
<a name="l02320"></a>02320   };
<a name="l02321"></a>02321 
<a name="l02322"></a>02322 <span class="comment">/* Proper action set. */</span>
<a name="l02323"></a>02323 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02324"></a><a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">02324</a> <a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a> *action_list, <span class="keywordtype">int</span> size,
<a name="l02325"></a>02325               <span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a> *action, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02326"></a>02326 {
<a name="l02327"></a>02327   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02328"></a>02328   <span class="keywordtype">int</span> found = 0;
<a name="l02329"></a>02329   <span class="keywordtype">int</span> reset_in = 0;
<a name="l02330"></a>02330   <span class="keywordtype">int</span> reset_out = 0;
<a name="l02331"></a>02331   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> *match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02332"></a>02332 
<a name="l02333"></a>02333   <span class="comment">/* Check peer&#39;s frag action.  */</span>
<a name="l02334"></a>02334   <span class="keywordflow">for</span> (i = 0; i &lt; size; i++)
<a name="l02335"></a>02335     {
<a name="l02336"></a>02336       match = &amp;action_list[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
<a name="l02337"></a>02337 
<a name="l02338"></a>02338       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> == 0)
<a name="l02339"></a>02339     <span class="keywordflow">break</span>;
<a name="l02340"></a>02340 
<a name="l02341"></a>02341       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a> &amp; flag)
<a name="l02342"></a>02342     {
<a name="l02343"></a>02343       found = 1;
<a name="l02344"></a>02344 
<a name="l02345"></a>02345       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>)
<a name="l02346"></a>02346         reset_in = 1;
<a name="l02347"></a>02347       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>)
<a name="l02348"></a>02348         reset_out = 1;
<a name="l02349"></a>02349       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
<a name="l02350"></a>02350         {
<a name="l02351"></a>02351           reset_in = 1;
<a name="l02352"></a>02352           reset_out = 1;
<a name="l02353"></a>02353         }
<a name="l02354"></a>02354       <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a>)
<a name="l02355"></a>02355         action-&gt;<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a> = 1;
<a name="l02356"></a>02356     }
<a name="l02357"></a>02357     }
<a name="l02358"></a>02358 
<a name="l02359"></a>02359   <span class="comment">/* Set peer clear type.  */</span>
<a name="l02360"></a>02360   <span class="keywordflow">if</span> (reset_in &amp;&amp; reset_out)
<a name="l02361"></a>02361     action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>;
<a name="l02362"></a>02362   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reset_in)
<a name="l02363"></a>02363     action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>;
<a name="l02364"></a>02364   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reset_out)
<a name="l02365"></a>02365     action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a31a06b31b8113c435e886174a4e1001c">peer_change_reset_out</a>;
<a name="l02366"></a>02366   <span class="keywordflow">else</span>
<a name="l02367"></a>02367     action-&gt;<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> = <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a2621571144664686d6462da17fe40953">peer_change_none</a>;
<a name="l02368"></a>02368 
<a name="l02369"></a>02369   <span class="keywordflow">return</span> found;
<a name="l02370"></a>02370 }
<a name="l02371"></a>02371 
<a name="l02372"></a>02372 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02373"></a><a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">02373</a> <a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02374"></a>02374 {
<a name="l02375"></a>02375   <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>)
<a name="l02376"></a>02376     {
<a name="l02377"></a>02377       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag))
<a name="l02378"></a>02378     {
<a name="l02379"></a>02379       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
<a name="l02380"></a>02380         <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);
<a name="l02381"></a>02381 
<a name="l02382"></a>02382       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>);
<a name="l02383"></a>02383       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>)
<a name="l02384"></a>02384         {
<a name="l02385"></a>02385           <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>);
<a name="l02386"></a>02386               <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l02387"></a>02387         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer canceled&quot;</span>,
<a name="l02388"></a>02388                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02389"></a>02389         }
<a name="l02390"></a>02390 
<a name="l02391"></a>02391       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>))
<a name="l02392"></a>02392     <a class="code" href="bgpd_8c.html#a61468e4b83c534c3eefb2158b1a4ebe3">peer_nsf_stop</a> (peer);
<a name="l02393"></a>02393 
<a name="l02394"></a>02394       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02395"></a>02395         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02396"></a>02396                  <a class="code" href="bgpd_8h.html#af9421e5cbfffb8ca7839d448d1b816b0">BGP_NOTIFY_CEASE_ADMIN_SHUTDOWN</a>);
<a name="l02397"></a>02397       <span class="keywordflow">else</span>
<a name="l02398"></a>02398         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02399"></a>02399     }
<a name="l02400"></a>02400       <span class="keywordflow">else</span>
<a name="l02401"></a>02401     {
<a name="l02402"></a>02402       peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
<a name="l02403"></a>02403       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02404"></a>02404     }
<a name="l02405"></a>02405     }
<a name="l02406"></a>02406   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02407"></a>02407     {
<a name="l02408"></a>02408       <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>)
<a name="l02409"></a>02409     peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
<a name="l02410"></a>02410       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>)
<a name="l02411"></a>02411     peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6aa56ac440e8cf5f5418ad886ccb2b7a">PEER_DOWN_PASSIVE_CHANGE</a>;
<a name="l02412"></a>02412       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>)
<a name="l02413"></a>02413     peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a784543e9aee1d60843df5b927cf03ef5">PEER_DOWN_MULTIHOP_CHANGE</a>;
<a name="l02414"></a>02414 
<a name="l02415"></a>02415       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02416"></a>02416                <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02417"></a>02417     }
<a name="l02418"></a>02418   <span class="keywordflow">else</span>
<a name="l02419"></a>02419     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02420"></a>02420 }
<a name="l02421"></a>02421 
<a name="l02422"></a>02422 <span class="comment">/* Change specified peer flag. */</span>
<a name="l02423"></a>02423 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02424"></a><a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">02424</a> <a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>, <span class="keywordtype">int</span> <span class="keyword">set</span>)
<a name="l02425"></a>02425 {
<a name="l02426"></a>02426   <span class="keywordtype">int</span> found;
<a name="l02427"></a>02427   <span class="keywordtype">int</span> size;
<a name="l02428"></a>02428   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02429"></a>02429   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02430"></a>02430   <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> action;
<a name="l02431"></a>02431 
<a name="l02432"></a>02432   memset (&amp;action, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a>));
<a name="l02433"></a>02433   size = <span class="keyword">sizeof</span> peer_flag_action_list / <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a>);
<a name="l02434"></a>02434 
<a name="l02435"></a>02435   found = <a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (peer_flag_action_list, size, &amp;action, flag);
<a name="l02436"></a>02436 
<a name="l02437"></a>02437   <span class="comment">/* No flag action is found.  */</span>
<a name="l02438"></a>02438   <span class="keywordflow">if</span> (! found)
<a name="l02439"></a>02439     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;    
<a name="l02440"></a>02440 
<a name="l02441"></a>02441   <span class="comment">/* Not for peer-group member.  */</span>
<a name="l02442"></a>02442   <span class="keywordflow">if</span> (action.<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l02443"></a>02443     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l02444"></a>02444 
<a name="l02445"></a>02445   <span class="comment">/* When unset the peer-group member&#39;s flag we have to check</span>
<a name="l02446"></a>02446 <span class="comment">     peer-group configuration.  */</span>
<a name="l02447"></a>02447   <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l02448"></a>02448     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag))
<a name="l02449"></a>02449       {
<a name="l02450"></a>02450     <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>)
<a name="l02451"></a>02451       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a80bfb96785d65c8235fb7aa55347b80a">BGP_ERR_PEER_GROUP_SHUTDOWN</a>;
<a name="l02452"></a>02452     <span class="keywordflow">else</span>
<a name="l02453"></a>02453       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;
<a name="l02454"></a>02454       }
<a name="l02455"></a>02455 
<a name="l02456"></a>02456   <span class="comment">/* Flag conflict check.  */</span>
<a name="l02457"></a>02457   <span class="keywordflow">if</span> (<span class="keyword">set</span>
<a name="l02458"></a>02458       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> | flag, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>)
<a name="l02459"></a>02459       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a> | flag, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l02460"></a>02460     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a53db56bcbdd78385b5b74cb3f8cedef7">BGP_ERR_PEER_FLAG_CONFLICT</a>;
<a name="l02461"></a>02461 
<a name="l02462"></a>02462   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02463"></a>02463     {
<a name="l02464"></a>02464       <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag) == flag)
<a name="l02465"></a>02465     <span class="keywordflow">return</span> 0;
<a name="l02466"></a>02466       <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag))
<a name="l02467"></a>02467     <span class="keywordflow">return</span> 0;
<a name="l02468"></a>02468     }
<a name="l02469"></a>02469 
<a name="l02470"></a>02470   <span class="keywordflow">if</span> (<span class="keyword">set</span>)
<a name="l02471"></a>02471     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag);
<a name="l02472"></a>02472   <span class="keywordflow">else</span>
<a name="l02473"></a>02473     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag);
<a name="l02474"></a>02474  
<a name="l02475"></a>02475   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02476"></a>02476     {
<a name="l02477"></a>02477       <span class="keywordflow">if</span> (action.<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
<a name="l02478"></a>02478     <a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (peer, flag);
<a name="l02479"></a>02479 
<a name="l02480"></a>02480       <span class="keywordflow">return</span> 0;
<a name="l02481"></a>02481     }
<a name="l02482"></a>02482 
<a name="l02483"></a>02483   <span class="comment">/* peer-group member updates. */</span>
<a name="l02484"></a>02484   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02485"></a>02485 
<a name="l02486"></a>02486   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02487"></a>02487     {
<a name="l02488"></a>02488       <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag) == flag)
<a name="l02489"></a>02489     <span class="keywordflow">continue</span>;
<a name="l02490"></a>02490 
<a name="l02491"></a>02491       <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag))
<a name="l02492"></a>02492     <span class="keywordflow">continue</span>;
<a name="l02493"></a>02493 
<a name="l02494"></a>02494       <span class="keywordflow">if</span> (<span class="keyword">set</span>)
<a name="l02495"></a>02495     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag);
<a name="l02496"></a>02496       <span class="keywordflow">else</span>
<a name="l02497"></a>02497     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, flag);
<a name="l02498"></a>02498 
<a name="l02499"></a>02499       <span class="keywordflow">if</span> (action.<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a> == <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854aecbc93aa082ede758a1d8ad20cd45391">peer_change_reset</a>)
<a name="l02500"></a>02500     <a class="code" href="bgpd_8c.html#a80952b7756503753c0fb09ad686293a3">peer_flag_modify_action</a> (peer, flag);
<a name="l02501"></a>02501     }
<a name="l02502"></a>02502   <span class="keywordflow">return</span> 0;
<a name="l02503"></a>02503 }
<a name="l02504"></a>02504 
<a name="l02505"></a>02505 <span class="keywordtype">int</span>
<a name="l02506"></a><a class="code" href="bgpd_8h.html#a81dda1d4d2658c27f6b9b0c19c403a33">02506</a> <a class="code" href="bgpd_8c.html#ae0cc6e89358c892926f731aedc11f406">peer_flag_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02507"></a>02507 {
<a name="l02508"></a>02508   <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (peer, flag, 1);
<a name="l02509"></a>02509 }
<a name="l02510"></a>02510 
<a name="l02511"></a>02511 <span class="keywordtype">int</span>
<a name="l02512"></a><a class="code" href="bgpd_8h.html#af2607db3c1e99cc2966cec03cf2998b7">02512</a> <a class="code" href="bgpd_8c.html#a1d2f669d9871f7287dcd16c75c92ba5a">peer_flag_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02513"></a>02513 {
<a name="l02514"></a>02514   <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#af42ae190f546995ceb3ab6c43fbf9261">peer_flag_modify</a> (peer, flag, 0);
<a name="l02515"></a>02515 }
<a name="l02516"></a>02516 
<a name="l02517"></a>02517 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02518"></a><a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">02518</a> <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l02519"></a>02519 {
<a name="l02520"></a>02520   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l02521"></a>02521     <span class="keywordflow">return</span> 1;
<a name="l02522"></a>02522   <span class="keywordflow">return</span> 0;
<a name="l02523"></a>02523 }
<a name="l02524"></a>02524 
<a name="l02525"></a>02525 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02526"></a><a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">02526</a> <a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>,
<a name="l02527"></a>02527              <span class="keywordtype">int</span> <span class="keyword">set</span>)
<a name="l02528"></a>02528 {
<a name="l02529"></a>02529   <span class="keywordtype">int</span> found;
<a name="l02530"></a>02530   <span class="keywordtype">int</span> size;
<a name="l02531"></a>02531   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02532"></a>02532   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02533"></a>02533   <span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a> action;
<a name="l02534"></a>02534 
<a name="l02535"></a>02535   memset (&amp;action, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpeer__flag__action.html">peer_flag_action</a>));
<a name="l02536"></a>02536   size = <span class="keyword">sizeof</span> peer_af_flag_action_list / <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structpeer__flag__action.html">peer_flag_action</a>);
<a name="l02537"></a>02537   
<a name="l02538"></a>02538   found = <a class="code" href="bgpd_8c.html#a739fe9eea0a9d59d4be0f18047ed6e43">peer_flag_action_set</a> (peer_af_flag_action_list, size, &amp;action, flag);
<a name="l02539"></a>02539   
<a name="l02540"></a>02540   <span class="comment">/* No flag action is found.  */</span>
<a name="l02541"></a>02541   <span class="keywordflow">if</span> (! found)
<a name="l02542"></a>02542     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac88e225df2ff1f310b4da2b6617d1726">BGP_ERR_INVALID_FLAG</a>;    
<a name="l02543"></a>02543 
<a name="l02544"></a>02544   <span class="comment">/* Adress family must be activated.  */</span>
<a name="l02545"></a>02545   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l02546"></a>02546     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l02547"></a>02547 
<a name="l02548"></a>02548   <span class="comment">/* Not for peer-group member.  */</span>
<a name="l02549"></a>02549   <span class="keywordflow">if</span> (action.<a class="code" href="structpeer__flag__action.html#ae2275ffd70777b5cb13fcb74b65cf0be">not_for_member</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l02550"></a>02550     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l02551"></a>02551 
<a name="l02552"></a>02552  <span class="comment">/* Spcecial check for reflector client.  */</span>
<a name="l02553"></a>02553   <span class="keywordflow">if</span> (flag &amp; <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>
<a name="l02554"></a>02554       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02555"></a>02555     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a42c843c35f8688330963bea10da653a5">BGP_ERR_NOT_INTERNAL_PEER</a>;
<a name="l02556"></a>02556 
<a name="l02557"></a>02557   <span class="comment">/* Spcecial check for remove-private-AS.  */</span>
<a name="l02558"></a>02558   <span class="keywordflow">if</span> (flag &amp; <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>
<a name="l02559"></a>02559       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02560"></a>02560     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#accf1bbc9cbc75c43e0f812f36ffc2b7c">BGP_ERR_REMOVE_PRIVATE_AS</a>;
<a name="l02561"></a>02561 
<a name="l02562"></a>02562   <span class="comment">/* When unset the peer-group member&#39;s flag we have to check</span>
<a name="l02563"></a>02563 <span class="comment">     peer-group configuration.  */</span>
<a name="l02564"></a>02564   <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l02565"></a>02565     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag))
<a name="l02566"></a>02566       <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;
<a name="l02567"></a>02567 
<a name="l02568"></a>02568   <span class="comment">/* When current flag configuration is same as requested one.  */</span>
<a name="l02569"></a>02569   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02570"></a>02570     {
<a name="l02571"></a>02571       <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag) == flag)
<a name="l02572"></a>02572     <span class="keywordflow">return</span> 0;
<a name="l02573"></a>02573       <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag))
<a name="l02574"></a>02574     <span class="keywordflow">return</span> 0;
<a name="l02575"></a>02575     }
<a name="l02576"></a>02576 
<a name="l02577"></a>02577   <span class="keywordflow">if</span> (<span class="keyword">set</span>)
<a name="l02578"></a>02578     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
<a name="l02579"></a>02579   <span class="keywordflow">else</span>
<a name="l02580"></a>02580     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
<a name="l02581"></a>02581 
<a name="l02582"></a>02582   <span class="comment">/* Execute action when peer is established.  */</span>
<a name="l02583"></a>02583   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
<a name="l02584"></a>02584       &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02585"></a>02585     {
<a name="l02586"></a>02586       <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; flag == <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
<a name="l02587"></a>02587     <a class="code" href="bgp__route_8c.html#a4abd5523ec63ec028d8ca35259161533">bgp_clear_adj_in</a> (peer, afi, safi);
<a name="l02588"></a>02588       <span class="keywordflow">else</span>
<a name="l02589"></a>02589        {
<a name="l02590"></a>02590          <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
<a name="l02591"></a>02591            peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7322b473987705053922182e4d751697">PEER_DOWN_RR_CLIENT_CHANGE</a>;
<a name="l02592"></a>02592          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l02593"></a>02593            peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d46cd046efbcaba9dda0c9e721d61b6">PEER_DOWN_RS_CLIENT_CHANGE</a>;
<a name="l02594"></a>02594          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l02595"></a>02595            peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
<a name="l02596"></a>02596          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>)
<a name="l02597"></a>02597            peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
<a name="l02598"></a>02598 
<a name="l02599"></a>02599          <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, action.<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a>);
<a name="l02600"></a>02600        }
<a name="l02601"></a>02601 
<a name="l02602"></a>02602     }
<a name="l02603"></a>02603 
<a name="l02604"></a>02604   <span class="comment">/* Peer group member updates.  */</span>
<a name="l02605"></a>02605   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02606"></a>02606     {
<a name="l02607"></a>02607       group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02608"></a>02608       
<a name="l02609"></a>02609       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02610"></a>02610     {
<a name="l02611"></a>02611       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l02612"></a>02612         <span class="keywordflow">continue</span>;
<a name="l02613"></a>02613 
<a name="l02614"></a>02614       <span class="keywordflow">if</span> (<span class="keyword">set</span> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag) == flag)
<a name="l02615"></a>02615         <span class="keywordflow">continue</span>;
<a name="l02616"></a>02616 
<a name="l02617"></a>02617       <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag))
<a name="l02618"></a>02618         <span class="keywordflow">continue</span>;
<a name="l02619"></a>02619 
<a name="l02620"></a>02620       <span class="keywordflow">if</span> (<span class="keyword">set</span>)
<a name="l02621"></a>02621         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
<a name="l02622"></a>02622       <span class="keywordflow">else</span>
<a name="l02623"></a>02623         <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], flag);
<a name="l02624"></a>02624 
<a name="l02625"></a>02625       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02626"></a>02626         {
<a name="l02627"></a>02627           <span class="keywordflow">if</span> (! <span class="keyword">set</span> &amp;&amp; flag == <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>)
<a name="l02628"></a>02628         <a class="code" href="bgp__route_8c.html#a4abd5523ec63ec028d8ca35259161533">bgp_clear_adj_in</a> (peer, afi, safi);
<a name="l02629"></a>02629           <span class="keywordflow">else</span>
<a name="l02630"></a>02630                {
<a name="l02631"></a>02631                  <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
<a name="l02632"></a>02632                    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7322b473987705053922182e4d751697">PEER_DOWN_RR_CLIENT_CHANGE</a>;
<a name="l02633"></a>02633                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l02634"></a>02634                    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d46cd046efbcaba9dda0c9e721d61b6">PEER_DOWN_RS_CLIENT_CHANGE</a>;
<a name="l02635"></a>02635                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l02636"></a>02636                    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
<a name="l02637"></a>02637                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (flag == <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>)
<a name="l02638"></a>02638                    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#af2919d04f82b7e6e4c32e75afac703c1">PEER_DOWN_CAPABILITY_CHANGE</a>;
<a name="l02639"></a>02639 
<a name="l02640"></a>02640                  <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, action.<a class="code" href="structpeer__flag__action.html#adde5f152d7843a7a877cf4967d8bcf2c">type</a>);
<a name="l02641"></a>02641                }
<a name="l02642"></a>02642         }
<a name="l02643"></a>02643     }
<a name="l02644"></a>02644     }
<a name="l02645"></a>02645   <span class="keywordflow">return</span> 0;
<a name="l02646"></a>02646 }
<a name="l02647"></a>02647 
<a name="l02648"></a>02648 <span class="keywordtype">int</span>
<a name="l02649"></a><a class="code" href="bgpd_8h.html#ad6bae389ef2d53a19961b9d06ca4dc5d">02649</a> <a class="code" href="bgpd_8c.html#a56de1c971af44a0e4c8ed48c3dbae891">peer_af_flag_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02650"></a>02650 {
<a name="l02651"></a>02651   <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (peer, afi, safi, flag, 1);
<a name="l02652"></a>02652 }
<a name="l02653"></a>02653 
<a name="l02654"></a>02654 <span class="keywordtype">int</span>
<a name="l02655"></a><a class="code" href="bgpd_8h.html#af53dc848072a3ce780560135f01bae33">02655</a> <a class="code" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="code" href="structpeer__flag__action.html#a5063ae53b124951476c38bc0291ad88e">flag</a>)
<a name="l02656"></a>02656 {
<a name="l02657"></a>02657   <span class="keywordflow">return</span> <a class="code" href="bgpd_8c.html#a154a3e6e7649d742bee95e2f7bd9bd98">peer_af_flag_modify</a> (peer, afi, safi, flag, 0);
<a name="l02658"></a>02658 }
<a name="l02659"></a>02659 
<a name="l02660"></a>02660 <span class="comment">/* EBGP multihop configuration. */</span>
<a name="l02661"></a>02661 <span class="keywordtype">int</span>
<a name="l02662"></a><a class="code" href="bgpd_8h.html#a5bcf9db12233333fa1b4277ecbe7b27d">02662</a> <a class="code" href="bgpd_8c.html#a4df342066c91373d533a672726c8a128">peer_ebgp_multihop_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">int</span> ttl)
<a name="l02663"></a>02663 {
<a name="l02664"></a>02664   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02665"></a>02665   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02666"></a>02666 
<a name="l02667"></a>02667   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02668"></a>02668     <span class="keywordflow">return</span> 0;
<a name="l02669"></a>02669 
<a name="l02670"></a>02670   peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = ttl;
<a name="l02671"></a>02671 
<a name="l02672"></a>02672   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02673"></a>02673     {
<a name="l02674"></a>02674       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0 &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02675"></a>02675     <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
<a name="l02676"></a>02676     }
<a name="l02677"></a>02677   <span class="keywordflow">else</span>
<a name="l02678"></a>02678     {
<a name="l02679"></a>02679       group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02680"></a>02680       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02681"></a>02681     {
<a name="l02682"></a>02682       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02683"></a>02683         <span class="keywordflow">continue</span>;
<a name="l02684"></a>02684 
<a name="l02685"></a>02685       peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;
<a name="l02686"></a>02686 
<a name="l02687"></a>02687       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
<a name="l02688"></a>02688         <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
<a name="l02689"></a>02689     }
<a name="l02690"></a>02690     }
<a name="l02691"></a>02691   <span class="keywordflow">return</span> 0;
<a name="l02692"></a>02692 }
<a name="l02693"></a>02693 
<a name="l02694"></a>02694 <span class="keywordtype">int</span>
<a name="l02695"></a><a class="code" href="bgpd_8h.html#ae55e6b8ab66cb4ffecca4b65e76ee599">02695</a> <a class="code" href="bgpd_8c.html#adac0c658fbf7d2802f329e017128d545">peer_ebgp_multihop_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02696"></a>02696 {
<a name="l02697"></a>02697   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02698"></a>02698   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02699"></a>02699 
<a name="l02700"></a>02700   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02701"></a>02701     <span class="keywordflow">return</span> 0;
<a name="l02702"></a>02702 
<a name="l02703"></a>02703   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l02704"></a>02704     peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>;
<a name="l02705"></a>02705   <span class="keywordflow">else</span>
<a name="l02706"></a>02706     peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
<a name="l02707"></a>02707 
<a name="l02708"></a>02708   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02709"></a>02709     {
<a name="l02710"></a>02710       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0 &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02711"></a>02711     <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
<a name="l02712"></a>02712     }
<a name="l02713"></a>02713   <span class="keywordflow">else</span>
<a name="l02714"></a>02714     {
<a name="l02715"></a>02715       group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02716"></a>02716       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02717"></a>02717     {
<a name="l02718"></a>02718       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l02719"></a>02719         <span class="keywordflow">continue</span>;
<a name="l02720"></a>02720 
<a name="l02721"></a>02721       peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> = 1;
<a name="l02722"></a>02722       
<a name="l02723"></a>02723       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
<a name="l02724"></a>02724         <a class="code" href="sockunion_8c.html#abaf662d1724513469c375f264ccb4668">sockopt_ttl</a> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>);
<a name="l02725"></a>02725     }
<a name="l02726"></a>02726     }
<a name="l02727"></a>02727   <span class="keywordflow">return</span> 0;
<a name="l02728"></a>02728 }
<a name="l02729"></a>02729 
<a name="l02730"></a>02730 <span class="comment">/* Neighbor description. */</span>
<a name="l02731"></a>02731 <span class="keywordtype">int</span>
<a name="l02732"></a><a class="code" href="bgpd_8h.html#aa1727823b1958036fc17751180d780a5">02732</a> <a class="code" href="bgpd_8c.html#a9e0bc271af1dfa4277d36ea632a70178">peer_description_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keywordtype">char</span> *<a class="code" href="structdesc.html">desc</a>)
<a name="l02733"></a>02733 {
<a name="l02734"></a>02734   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
<a name="l02735"></a>02735     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);
<a name="l02736"></a>02736 
<a name="l02737"></a>02737   peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, desc);
<a name="l02738"></a>02738 
<a name="l02739"></a>02739   <span class="keywordflow">return</span> 0;
<a name="l02740"></a>02740 }
<a name="l02741"></a>02741 
<a name="l02742"></a>02742 <span class="keywordtype">int</span>
<a name="l02743"></a><a class="code" href="bgpd_8h.html#a14926ec39bb8674836269219d8898916">02743</a> <a class="code" href="bgpd_8c.html#ab492e26614fa5960ea9b23c18ea03b81">peer_description_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02744"></a>02744 {
<a name="l02745"></a>02745   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
<a name="l02746"></a>02746     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bafd1ddd9f96afd411cdaf62fa8847badb">MTYPE_PEER_DESC</a>, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>);
<a name="l02747"></a>02747 
<a name="l02748"></a>02748   peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02749"></a>02749 
<a name="l02750"></a>02750   <span class="keywordflow">return</span> 0;
<a name="l02751"></a>02751 }
<a name="l02752"></a>02752 
<a name="l02753"></a>02753 <span class="comment">/* Neighbor update-source. */</span>
<a name="l02754"></a>02754 <span class="keywordtype">int</span>
<a name="l02755"></a><a class="code" href="bgpd_8h.html#a90504512e6de2819d62b68665b3b0302">02755</a> <a class="code" href="bgpd_8c.html#a96352fe742a75db61595d893031cd72c">peer_update_source_if_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ifname)
<a name="l02756"></a>02756 {
<a name="l02757"></a>02757   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02758"></a>02758   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02759"></a>02759 
<a name="l02760"></a>02760   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02761"></a>02761     {
<a name="l02762"></a>02762       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
<a name="l02763"></a>02763       &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, ifname) == 0)
<a name="l02764"></a>02764     <span class="keywordflow">return</span> 0;
<a name="l02765"></a>02765 
<a name="l02766"></a>02766       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02767"></a>02767       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02768"></a>02768     }
<a name="l02769"></a>02769 
<a name="l02770"></a>02770   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02771"></a>02771     {
<a name="l02772"></a>02772       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02773"></a>02773       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02774"></a>02774     }
<a name="l02775"></a>02775 
<a name="l02776"></a>02776   peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, ifname);
<a name="l02777"></a>02777 
<a name="l02778"></a>02778   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02779"></a>02779     {
<a name="l02780"></a>02780       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02781"></a>02781        {
<a name="l02782"></a>02782          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02783"></a>02783          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02784"></a>02784                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02785"></a>02785        }
<a name="l02786"></a>02786       <span class="keywordflow">else</span>
<a name="l02787"></a>02787     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02788"></a>02788       <span class="keywordflow">return</span> 0;
<a name="l02789"></a>02789     }
<a name="l02790"></a>02790 
<a name="l02791"></a>02791   <span class="comment">/* peer-group member updates. */</span>
<a name="l02792"></a>02792   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02793"></a>02793   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02794"></a>02794     {
<a name="l02795"></a>02795       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02796"></a>02796     {
<a name="l02797"></a>02797       <span class="keywordflow">if</span> (strcmp (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, ifname) == 0)
<a name="l02798"></a>02798         <span class="keywordflow">continue</span>;
<a name="l02799"></a>02799 
<a name="l02800"></a>02800       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02801"></a>02801       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02802"></a>02802     }
<a name="l02803"></a>02803 
<a name="l02804"></a>02804       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02805"></a>02805     {
<a name="l02806"></a>02806       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02807"></a>02807       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02808"></a>02808     }
<a name="l02809"></a>02809 
<a name="l02810"></a>02810       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, ifname);
<a name="l02811"></a>02811 
<a name="l02812"></a>02812       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02813"></a>02813        {
<a name="l02814"></a>02814          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02815"></a>02815          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02816"></a>02816                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02817"></a>02817        }
<a name="l02818"></a>02818       <span class="keywordflow">else</span>
<a name="l02819"></a>02819     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02820"></a>02820     }
<a name="l02821"></a>02821   <span class="keywordflow">return</span> 0;
<a name="l02822"></a>02822 }
<a name="l02823"></a>02823 
<a name="l02824"></a>02824 <span class="keywordtype">int</span>
<a name="l02825"></a><a class="code" href="bgpd_8h.html#aa795e72baadb5391d9f9273013dba814">02825</a> <a class="code" href="bgpd_8c.html#adbb712cdc80345160019521cbe858fbf">peer_update_source_addr_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su)
<a name="l02826"></a>02826 {
<a name="l02827"></a>02827   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02828"></a>02828   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02829"></a>02829 
<a name="l02830"></a>02830   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02831"></a>02831     {
<a name="l02832"></a>02832       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
<a name="l02833"></a>02833       &amp;&amp; <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, su) == 0)
<a name="l02834"></a>02834     <span class="keywordflow">return</span> 0;
<a name="l02835"></a>02835       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02836"></a>02836       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02837"></a>02837     }
<a name="l02838"></a>02838 
<a name="l02839"></a>02839   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02840"></a>02840     {
<a name="l02841"></a>02841       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02842"></a>02842       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02843"></a>02843     }
<a name="l02844"></a>02844 
<a name="l02845"></a>02845   peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (su);
<a name="l02846"></a>02846 
<a name="l02847"></a>02847   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02848"></a>02848     {
<a name="l02849"></a>02849       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02850"></a>02850        {
<a name="l02851"></a>02851          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02852"></a>02852          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02853"></a>02853                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02854"></a>02854        }
<a name="l02855"></a>02855       <span class="keywordflow">else</span>
<a name="l02856"></a>02856     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02857"></a>02857       <span class="keywordflow">return</span> 0;
<a name="l02858"></a>02858     }
<a name="l02859"></a>02859 
<a name="l02860"></a>02860   <span class="comment">/* peer-group member updates. */</span>
<a name="l02861"></a>02861   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02862"></a>02862   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02863"></a>02863     {
<a name="l02864"></a>02864       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02865"></a>02865     {
<a name="l02866"></a>02866       <span class="keywordflow">if</span> (<a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, su) == 0)
<a name="l02867"></a>02867         <span class="keywordflow">continue</span>;
<a name="l02868"></a>02868       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02869"></a>02869       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02870"></a>02870     }
<a name="l02871"></a>02871 
<a name="l02872"></a>02872       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02873"></a>02873     {
<a name="l02874"></a>02874       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02875"></a>02875       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02876"></a>02876     }
<a name="l02877"></a>02877 
<a name="l02878"></a>02878       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (su);
<a name="l02879"></a>02879 
<a name="l02880"></a>02880       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02881"></a>02881        {
<a name="l02882"></a>02882          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02883"></a>02883          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02884"></a>02884                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02885"></a>02885        }
<a name="l02886"></a>02886       <span class="keywordflow">else</span>
<a name="l02887"></a>02887     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02888"></a>02888     }
<a name="l02889"></a>02889   <span class="keywordflow">return</span> 0;
<a name="l02890"></a>02890 }
<a name="l02891"></a>02891 
<a name="l02892"></a>02892 <span class="keywordtype">int</span>
<a name="l02893"></a><a class="code" href="bgpd_8h.html#a56fee28cb8ddf46137994837cb0e1344">02893</a> <a class="code" href="bgpd_8c.html#a9faec1e151a495bae9ff8ef9b591912b">peer_update_source_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02894"></a>02894 {
<a name="l02895"></a>02895   <span class="keyword">union </span><a class="code" href="unionsockunion.html">sockunion</a> *su;
<a name="l02896"></a>02896   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02897"></a>02897   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02898"></a>02898 
<a name="l02899"></a>02899   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>)
<a name="l02900"></a>02900       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>
<a name="l02901"></a>02901       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02902"></a>02902     <span class="keywordflow">return</span> 0;
<a name="l02903"></a>02903 
<a name="l02904"></a>02904   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02905"></a>02905     {
<a name="l02906"></a>02906       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02907"></a>02907       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02908"></a>02908     }
<a name="l02909"></a>02909   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02910"></a>02910     {
<a name="l02911"></a>02911       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02912"></a>02912       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02913"></a>02913     }
<a name="l02914"></a>02914 
<a name="l02915"></a>02915   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l02916"></a>02916     {
<a name="l02917"></a>02917       group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02918"></a>02918 
<a name="l02919"></a>02919       <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02920"></a>02920     {
<a name="l02921"></a>02921       su = <a class="code" href="sockunion_8c.html#add853166b1783f23865653395b60df12">sockunion_dup</a> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02922"></a>02922       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = su;
<a name="l02923"></a>02923     }
<a name="l02924"></a>02924       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02925"></a>02925     peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = 
<a name="l02926"></a>02926       <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02927"></a>02927     }
<a name="l02928"></a>02928 
<a name="l02929"></a>02929   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l02930"></a>02930     {
<a name="l02931"></a>02931       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02932"></a>02932        {
<a name="l02933"></a>02933          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02934"></a>02934          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02935"></a>02935                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02936"></a>02936        }
<a name="l02937"></a>02937       <span class="keywordflow">else</span>
<a name="l02938"></a>02938     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02939"></a>02939       <span class="keywordflow">return</span> 0;
<a name="l02940"></a>02940     }
<a name="l02941"></a>02941 
<a name="l02942"></a>02942   <span class="comment">/* peer-group member updates. */</span>
<a name="l02943"></a>02943   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l02944"></a>02944   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l02945"></a>02945     {
<a name="l02946"></a>02946       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02947"></a>02947     <span class="keywordflow">continue</span>;
<a name="l02948"></a>02948 
<a name="l02949"></a>02949       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l02950"></a>02950     {
<a name="l02951"></a>02951       <a class="code" href="sockunion_8c.html#a4c9c2ea65e1c9058a61db60a5ae8dbaf">sockunion_free</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>);
<a name="l02952"></a>02952       peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02953"></a>02953     }
<a name="l02954"></a>02954 
<a name="l02955"></a>02955       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l02956"></a>02956     {
<a name="l02957"></a>02957       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf42d501cbca749ff0a08ece73751c979">MTYPE_PEER_UPDATE_SOURCE</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>);
<a name="l02958"></a>02958       peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02959"></a>02959     }
<a name="l02960"></a>02960 
<a name="l02961"></a>02961       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02962"></a>02962        {
<a name="l02963"></a>02963          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a293e5c11bf981857f0f75ea8fba411e7">PEER_DOWN_UPDATE_SOURCE_CHANGE</a>;
<a name="l02964"></a>02964          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l02965"></a>02965                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l02966"></a>02966        }
<a name="l02967"></a>02967       <span class="keywordflow">else</span>
<a name="l02968"></a>02968     <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02969"></a>02969     }
<a name="l02970"></a>02970   <span class="keywordflow">return</span> 0;
<a name="l02971"></a>02971 }
<a name="l02972"></a>02972 
<a name="l02973"></a>02973 <span class="keywordtype">int</span>
<a name="l02974"></a><a class="code" href="bgpd_8h.html#a69942525b19ac4bb32bc1d8c06c2f82e">02974</a> <a class="code" href="bgpd_8c.html#aee9a8e4b3ede4e3e3570158471cd243d">peer_default_originate_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l02975"></a>02975                 <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structrmap.html">rmap</a>)
<a name="l02976"></a>02976 {
<a name="l02977"></a>02977   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l02978"></a>02978   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02979"></a>02979 
<a name="l02980"></a>02980   <span class="comment">/* Adress family must be activated.  */</span>
<a name="l02981"></a>02981   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l02982"></a>02982     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l02983"></a>02983 
<a name="l02984"></a>02984   <span class="comment">/* Default originate can&#39;t be used for peer group memeber.  */</span>
<a name="l02985"></a>02985   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l02986"></a>02986     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l02987"></a>02987 
<a name="l02988"></a>02988   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>)
<a name="l02989"></a>02989       || (rmap &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l02990"></a>02990       || (rmap &amp;&amp; strcmp (rmap, peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>) != 0))
<a name="l02991"></a>02991     { 
<a name="l02992"></a>02992       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);
<a name="l02993"></a>02993 
<a name="l02994"></a>02994       <span class="keywordflow">if</span> (rmap)
<a name="l02995"></a>02995     {
<a name="l02996"></a>02996       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l02997"></a>02997         free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l02998"></a>02998       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (rmap);
<a name="l02999"></a>02999       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rmap);
<a name="l03000"></a>03000     }
<a name="l03001"></a>03001     }
<a name="l03002"></a>03002 
<a name="l03003"></a>03003   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03004"></a>03004     {
<a name="l03005"></a>03005       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l03006"></a>03006     <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 0);
<a name="l03007"></a>03007       <span class="keywordflow">return</span> 0;
<a name="l03008"></a>03008     }
<a name="l03009"></a>03009 
<a name="l03010"></a>03010   <span class="comment">/* peer-group member updates. */</span>
<a name="l03011"></a>03011   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03012"></a>03012   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03013"></a>03013     {
<a name="l03014"></a>03014       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);
<a name="l03015"></a>03015 
<a name="l03016"></a>03016       <span class="keywordflow">if</span> (rmap)
<a name="l03017"></a>03017     {
<a name="l03018"></a>03018       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l03019"></a>03019         free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l03020"></a>03020       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = strdup (rmap);
<a name="l03021"></a>03021       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rmap);
<a name="l03022"></a>03022     }
<a name="l03023"></a>03023 
<a name="l03024"></a>03024       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l03025"></a>03025     <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 0);
<a name="l03026"></a>03026     }
<a name="l03027"></a>03027   <span class="keywordflow">return</span> 0;
<a name="l03028"></a>03028 }
<a name="l03029"></a>03029 
<a name="l03030"></a>03030 <span class="keywordtype">int</span>
<a name="l03031"></a><a class="code" href="bgpd_8h.html#a78f907014bbe60fca386ec582cc61af2">03031</a> <a class="code" href="bgpd_8c.html#a5d77cf393fc2332d85b2b9d6b3d26033">peer_default_originate_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03032"></a>03032 {
<a name="l03033"></a>03033   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03034"></a>03034   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03035"></a>03035 
<a name="l03036"></a>03036   <span class="comment">/* Adress family must be activated.  */</span>
<a name="l03037"></a>03037   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03038"></a>03038     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03039"></a>03039 
<a name="l03040"></a>03040   <span class="comment">/* Default originate can&#39;t be used for peer group memeber.  */</span>
<a name="l03041"></a>03041   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03042"></a>03042     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03043"></a>03043 
<a name="l03044"></a>03044   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>))
<a name="l03045"></a>03045     { 
<a name="l03046"></a>03046       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);
<a name="l03047"></a>03047 
<a name="l03048"></a>03048       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l03049"></a>03049     free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l03050"></a>03050       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03051"></a>03051       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03052"></a>03052     }
<a name="l03053"></a>03053 
<a name="l03054"></a>03054   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03055"></a>03055     {
<a name="l03056"></a>03056       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l03057"></a>03057     <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 1);
<a name="l03058"></a>03058       <span class="keywordflow">return</span> 0;
<a name="l03059"></a>03059     }
<a name="l03060"></a>03060 
<a name="l03061"></a>03061   <span class="comment">/* peer-group member updates. */</span>
<a name="l03062"></a>03062   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03063"></a>03063   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03064"></a>03064     {
<a name="l03065"></a>03065       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>);
<a name="l03066"></a>03066 
<a name="l03067"></a>03067       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l03068"></a>03068     free (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l03069"></a>03069       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03070"></a>03070       peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a4e3fea3d9cdc1addc3615f1906220a54">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03071"></a>03071 
<a name="l03072"></a>03072       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi])
<a name="l03073"></a>03073     <a class="code" href="bgp__route_8c.html#a655014556fe828ec1f15a0189cc8869b">bgp_default_originate</a> (peer, afi, safi, 1);
<a name="l03074"></a>03074     }
<a name="l03075"></a>03075   <span class="keywordflow">return</span> 0;
<a name="l03076"></a>03076 }
<a name="l03077"></a>03077 
<a name="l03078"></a>03078 <span class="keywordtype">int</span>
<a name="l03079"></a><a class="code" href="bgpd_8h.html#aec52957514017452c44bef8fc187f714">03079</a> <a class="code" href="bgpd_8c.html#aefbfb67ac02cc3eb6152e9daff8a55c0">peer_port_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int16_t port)
<a name="l03080"></a>03080 {
<a name="l03081"></a>03081   peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = port;
<a name="l03082"></a>03082   <span class="keywordflow">return</span> 0;
<a name="l03083"></a>03083 }
<a name="l03084"></a>03084 
<a name="l03085"></a>03085 <span class="keywordtype">int</span>
<a name="l03086"></a><a class="code" href="bgpd_8h.html#a2d5b969fe8195677e4a3dd7cb63b409c">03086</a> <a class="code" href="bgpd_8c.html#a2c7f87a9450bb96edfe282e805a1913f">peer_port_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03087"></a>03087 {
<a name="l03088"></a>03088   peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> = <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>;
<a name="l03089"></a>03089   <span class="keywordflow">return</span> 0;
<a name="l03090"></a>03090 }
<a name="l03091"></a>03091 
<a name="l03092"></a>03092 <span class="comment">/* neighbor weight. */</span>
<a name="l03093"></a>03093 <span class="keywordtype">int</span>
<a name="l03094"></a><a class="code" href="bgpd_8h.html#a30adad80f3ddaa3a2d4d7b9e6adc8eef">03094</a> <a class="code" href="bgpd_8c.html#a6b15be4d41092baac69c01b64569077e">peer_weight_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int16_t weight)
<a name="l03095"></a>03095 {
<a name="l03096"></a>03096   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03097"></a>03097   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03098"></a>03098 
<a name="l03099"></a>03099   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>);
<a name="l03100"></a>03100   peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = weight;
<a name="l03101"></a>03101 
<a name="l03102"></a>03102   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03103"></a>03103     <span class="keywordflow">return</span> 0;
<a name="l03104"></a>03104 
<a name="l03105"></a>03105   <span class="comment">/* peer-group member updates. */</span>
<a name="l03106"></a>03106   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03107"></a>03107   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03108"></a>03108     {
<a name="l03109"></a>03109       peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
<a name="l03110"></a>03110     }
<a name="l03111"></a>03111   <span class="keywordflow">return</span> 0;
<a name="l03112"></a>03112 }
<a name="l03113"></a>03113 
<a name="l03114"></a>03114 <span class="keywordtype">int</span>
<a name="l03115"></a><a class="code" href="bgpd_8h.html#ae49472f5d0cde16b47cad78e99e0a4e5">03115</a> <a class="code" href="bgpd_8c.html#a373d6c87af10908723300c63055044dc">peer_weight_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03116"></a>03116 {
<a name="l03117"></a>03117   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03118"></a>03118   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03119"></a>03119 
<a name="l03120"></a>03120   <span class="comment">/* Set default weight. */</span>
<a name="l03121"></a>03121   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03122"></a>03122     peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>;
<a name="l03123"></a>03123   <span class="keywordflow">else</span>
<a name="l03124"></a>03124     peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
<a name="l03125"></a>03125 
<a name="l03126"></a>03126   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>);
<a name="l03127"></a>03127 
<a name="l03128"></a>03128   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03129"></a>03129     <span class="keywordflow">return</span> 0;
<a name="l03130"></a>03130 
<a name="l03131"></a>03131   <span class="comment">/* peer-group member updates. */</span>
<a name="l03132"></a>03132   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03133"></a>03133   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03134"></a>03134     {
<a name="l03135"></a>03135       peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> = 0;
<a name="l03136"></a>03136     }
<a name="l03137"></a>03137   <span class="keywordflow">return</span> 0;
<a name="l03138"></a>03138 }
<a name="l03139"></a>03139 
<a name="l03140"></a>03140 <span class="keywordtype">int</span>
<a name="l03141"></a><a class="code" href="bgpd_8h.html#ae4ccf61305db1bc158a977b9cfae093e">03141</a> <a class="code" href="bgpd_8c.html#af5ccb9a71915cc9b34eadfb26ef05697">peer_timers_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t keepalive, u_int32_t <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>)
<a name="l03142"></a>03142 {
<a name="l03143"></a>03143   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03144"></a>03144   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03145"></a>03145 
<a name="l03146"></a>03146   <span class="comment">/* Not for peer group memeber.  */</span>
<a name="l03147"></a>03147   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03148"></a>03148     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03149"></a>03149 
<a name="l03150"></a>03150   <span class="comment">/* keepalive value check.  */</span>
<a name="l03151"></a>03151   <span class="keywordflow">if</span> (keepalive &gt; 65535)
<a name="l03152"></a>03152     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03153"></a>03153 
<a name="l03154"></a>03154   <span class="comment">/* Holdtime value check.  */</span>
<a name="l03155"></a>03155   <span class="keywordflow">if</span> (holdtime &gt; 65535)
<a name="l03156"></a>03156     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03157"></a>03157 
<a name="l03158"></a>03158   <span class="comment">/* Holdtime value must be either 0 or greater than 3.  */</span>
<a name="l03159"></a>03159   <span class="keywordflow">if</span> (holdtime &lt; 3 &amp;&amp; holdtime != 0)
<a name="l03160"></a>03160     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03161"></a>03161 
<a name="l03162"></a>03162   <span class="comment">/* Set value to the configuration. */</span>
<a name="l03163"></a>03163   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
<a name="l03164"></a>03164   peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
<a name="l03165"></a>03165   peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = (keepalive &lt; holdtime / 3 ? keepalive : holdtime / 3);
<a name="l03166"></a>03166 
<a name="l03167"></a>03167   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03168"></a>03168     <span class="keywordflow">return</span> 0;
<a name="l03169"></a>03169 
<a name="l03170"></a>03170   <span class="comment">/* peer-group member updates. */</span>
<a name="l03171"></a>03171   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03172"></a>03172   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03173"></a>03173     {
<a name="l03174"></a>03174       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
<a name="l03175"></a>03175       peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
<a name="l03176"></a>03176       peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>;
<a name="l03177"></a>03177     }
<a name="l03178"></a>03178   <span class="keywordflow">return</span> 0;
<a name="l03179"></a>03179 }
<a name="l03180"></a>03180 
<a name="l03181"></a>03181 <span class="keywordtype">int</span>
<a name="l03182"></a><a class="code" href="bgpd_8h.html#a4032dc8d3c0c445be9631303f4ee0b77">03182</a> <a class="code" href="bgpd_8c.html#adff2f4a5a13adecb3b2bf70681cc8a24">peer_timers_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03183"></a>03183 {
<a name="l03184"></a>03184   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03185"></a>03185   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03186"></a>03186 
<a name="l03187"></a>03187   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03188"></a>03188     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03189"></a>03189 
<a name="l03190"></a>03190   <span class="comment">/* Clear configuration. */</span>
<a name="l03191"></a>03191   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
<a name="l03192"></a>03192   peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
<a name="l03193"></a>03193   peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
<a name="l03194"></a>03194 
<a name="l03195"></a>03195   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03196"></a>03196     <span class="keywordflow">return</span> 0;
<a name="l03197"></a>03197 
<a name="l03198"></a>03198   <span class="comment">/* peer-group member updates. */</span>
<a name="l03199"></a>03199   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03200"></a>03200   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03201"></a>03201     {
<a name="l03202"></a>03202       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>);
<a name="l03203"></a>03203       peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a> = 0;
<a name="l03204"></a>03204       peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a> = 0;
<a name="l03205"></a>03205     }
<a name="l03206"></a>03206 
<a name="l03207"></a>03207   <span class="keywordflow">return</span> 0;
<a name="l03208"></a>03208 }
<a name="l03209"></a>03209 
<a name="l03210"></a>03210 <span class="keywordtype">int</span>
<a name="l03211"></a><a class="code" href="bgpd_8h.html#a02444de5626beade2d7a8e5e08389f2c">03211</a> <a class="code" href="bgpd_8c.html#abe0752af9abfb675ac6d613fea5a66a6">peer_timers_connect_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t connect)
<a name="l03212"></a>03212 {
<a name="l03213"></a>03213   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03214"></a>03214     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03215"></a>03215 
<a name="l03216"></a>03216   <span class="keywordflow">if</span> (connect &gt; 65535)
<a name="l03217"></a>03217     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03218"></a>03218 
<a name="l03219"></a>03219   <span class="comment">/* Set value to the configuration. */</span>
<a name="l03220"></a>03220   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
<a name="l03221"></a>03221   peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = connect;
<a name="l03222"></a>03222 
<a name="l03223"></a>03223   <span class="comment">/* Set value to timer setting. */</span>
<a name="l03224"></a>03224   peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = connect;
<a name="l03225"></a>03225 
<a name="l03226"></a>03226   <span class="keywordflow">return</span> 0;
<a name="l03227"></a>03227 }
<a name="l03228"></a>03228 
<a name="l03229"></a>03229 <span class="keywordtype">int</span>
<a name="l03230"></a><a class="code" href="bgpd_8h.html#aef50d679f34d87e62933997d8d91bce2">03230</a> <a class="code" href="bgpd_8c.html#a72e155cccc4fbe340c37a10801e5802e">peer_timers_connect_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03231"></a>03231 {
<a name="l03232"></a>03232   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03233"></a>03233     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03234"></a>03234 
<a name="l03235"></a>03235   <span class="comment">/* Clear configuration. */</span>
<a name="l03236"></a>03236   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>);
<a name="l03237"></a>03237   peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a> = 0;
<a name="l03238"></a>03238 
<a name="l03239"></a>03239   <span class="comment">/* Set timer setting to default value. */</span>
<a name="l03240"></a>03240   peer-&gt;<a class="code" href="structpeer.html#a54ca5fae2bc177a95b9277dc6f2eac6e">v_connect</a> = <a class="code" href="bgpd_8h.html#a854e591db2cbcfe079f306a74785c087">BGP_DEFAULT_CONNECT_RETRY</a>;
<a name="l03241"></a>03241 
<a name="l03242"></a>03242   <span class="keywordflow">return</span> 0;
<a name="l03243"></a>03243 }
<a name="l03244"></a>03244 
<a name="l03245"></a>03245 <span class="keywordtype">int</span>
<a name="l03246"></a><a class="code" href="bgpd_8h.html#a88fbeb20b19c7d0cf877eb94c660defd">03246</a> <a class="code" href="bgpd_8c.html#a668d8118bebaccc3de412436f8d0892e">peer_advertise_interval_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_int32_t routeadv)
<a name="l03247"></a>03247 {
<a name="l03248"></a>03248   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03249"></a>03249     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03250"></a>03250 
<a name="l03251"></a>03251   <span class="keywordflow">if</span> (routeadv &gt; 600)
<a name="l03252"></a>03252     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03253"></a>03253 
<a name="l03254"></a>03254   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>);
<a name="l03255"></a>03255   peer-&gt;<a class="code" href="structpeer.html#a44e62fb078b1689f6525c08fd9b622a3">routeadv</a> = routeadv;
<a name="l03256"></a>03256   peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = routeadv;
<a name="l03257"></a>03257 
<a name="l03258"></a>03258   <span class="keywordflow">return</span> 0;
<a name="l03259"></a>03259 }
<a name="l03260"></a>03260 
<a name="l03261"></a>03261 <span class="keywordtype">int</span>
<a name="l03262"></a><a class="code" href="bgpd_8h.html#ad7f1ab7300fc1d6bc91c689d7ca7c7a3">03262</a> <a class="code" href="bgpd_8c.html#a29b0cb85c4548d2ac1b9ba65101067d3">peer_advertise_interval_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03263"></a>03263 {
<a name="l03264"></a>03264   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03265"></a>03265     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03266"></a>03266 
<a name="l03267"></a>03267   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>);
<a name="l03268"></a>03268   peer-&gt;<a class="code" href="structpeer.html#a44e62fb078b1689f6525c08fd9b622a3">routeadv</a> = 0;
<a name="l03269"></a>03269 
<a name="l03270"></a>03270   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
<a name="l03271"></a>03271     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#af1c9a7dd198c0177612e6805ce9ef489">BGP_DEFAULT_IBGP_ROUTEADV</a>;
<a name="l03272"></a>03272   <span class="keywordflow">else</span>
<a name="l03273"></a>03273     peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a> = <a class="code" href="bgpd_8h.html#acf4cae349c98c07294beceb878936b17">BGP_DEFAULT_EBGP_ROUTEADV</a>;
<a name="l03274"></a>03274   
<a name="l03275"></a>03275   <span class="keywordflow">return</span> 0;
<a name="l03276"></a>03276 }
<a name="l03277"></a>03277 
<a name="l03278"></a>03278 <span class="comment">/* neighbor interface */</span>
<a name="l03279"></a>03279 <span class="keywordtype">int</span>
<a name="l03280"></a><a class="code" href="bgpd_8h.html#a745c6052f3a718448137367513f1a561">03280</a> <a class="code" href="bgpd_8c.html#a86f61a67f39c2ff8381a5e396631d653">peer_interface_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l03281"></a>03281 {
<a name="l03282"></a>03282   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
<a name="l03283"></a>03283     free (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);
<a name="l03284"></a>03284   peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a> = strdup (str);
<a name="l03285"></a>03285 
<a name="l03286"></a>03286   <span class="keywordflow">return</span> 0;
<a name="l03287"></a>03287 }
<a name="l03288"></a>03288 
<a name="l03289"></a>03289 <span class="keywordtype">int</span>
<a name="l03290"></a><a class="code" href="bgpd_8h.html#a0aa46eb187cc569edb630fdde5c72f86">03290</a> <a class="code" href="bgpd_8c.html#aa201b234d81b580955116df1a401a387">peer_interface_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03291"></a>03291 {
<a name="l03292"></a>03292   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
<a name="l03293"></a>03293     free (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);
<a name="l03294"></a>03294   peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03295"></a>03295 
<a name="l03296"></a>03296   <span class="keywordflow">return</span> 0;
<a name="l03297"></a>03297 }
<a name="l03298"></a>03298 
<a name="l03299"></a>03299 <span class="comment">/* Allow-as in.  */</span>
<a name="l03300"></a>03300 <span class="keywordtype">int</span>
<a name="l03301"></a><a class="code" href="bgpd_8h.html#a8f6598900fed3fd8000c633174d6b04b">03301</a> <a class="code" href="bgpd_8c.html#ab1a0b306bfb4091b7855ca490b18eaec">peer_allowas_in_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> allow_num)
<a name="l03302"></a>03302 {
<a name="l03303"></a>03303   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03304"></a>03304   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03305"></a>03305 
<a name="l03306"></a>03306   <span class="keywordflow">if</span> (allow_num &lt; 1 || allow_num &gt; 10)
<a name="l03307"></a>03307     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03308"></a>03308 
<a name="l03309"></a>03309   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != allow_num)
<a name="l03310"></a>03310     {
<a name="l03311"></a>03311       peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = allow_num;
<a name="l03312"></a>03312       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
<a name="l03313"></a>03313       <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>);
<a name="l03314"></a>03314     }
<a name="l03315"></a>03315 
<a name="l03316"></a>03316   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03317"></a>03317     <span class="keywordflow">return</span> 0;
<a name="l03318"></a>03318 
<a name="l03319"></a>03319   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03320"></a>03320   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03321"></a>03321     {
<a name="l03322"></a>03322       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != allow_num)
<a name="l03323"></a>03323     {
<a name="l03324"></a>03324       peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = allow_num;
<a name="l03325"></a>03325       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
<a name="l03326"></a>03326       <a class="code" href="bgpd_8c.html#aa7495f875829b9dc9bfe0ecd19b94934">peer_change_action</a> (peer, afi, safi, <a class="code" href="bgpd_8c.html#a2cc220f775286a01b597cc3095131854a8906c14db6c4f6b53d4817ced82e9913">peer_change_reset_in</a>);
<a name="l03327"></a>03327     }
<a name="l03328"></a>03328       
<a name="l03329"></a>03329     }
<a name="l03330"></a>03330   <span class="keywordflow">return</span> 0;
<a name="l03331"></a>03331 }
<a name="l03332"></a>03332 
<a name="l03333"></a>03333 <span class="keywordtype">int</span>
<a name="l03334"></a><a class="code" href="bgpd_8h.html#a7d2ad82515b24ae815fb9e89146ca0e1">03334</a> <a class="code" href="bgpd_8c.html#a424c0f74cabfc988bb05dbd0371a9886">peer_allowas_in_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l03335"></a>03335 {
<a name="l03336"></a>03336   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03337"></a>03337   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03338"></a>03338 
<a name="l03339"></a>03339   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
<a name="l03340"></a>03340     {
<a name="l03341"></a>03341       peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = 0;
<a name="l03342"></a>03342       <a class="code" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
<a name="l03343"></a>03343     }
<a name="l03344"></a>03344 
<a name="l03345"></a>03345   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03346"></a>03346     <span class="keywordflow">return</span> 0;
<a name="l03347"></a>03347 
<a name="l03348"></a>03348   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03349"></a>03349   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03350"></a>03350     {
<a name="l03351"></a>03351       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
<a name="l03352"></a>03352     {
<a name="l03353"></a>03353       peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] = 0;
<a name="l03354"></a>03354       <a class="code" href="bgpd_8c.html#adb44cd6ce7214c8f5289f3540df9118c">peer_af_flag_unset</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>);
<a name="l03355"></a>03355     }
<a name="l03356"></a>03356     }
<a name="l03357"></a>03357   <span class="keywordflow">return</span> 0;
<a name="l03358"></a>03358 }
<a name="l03359"></a>03359 
<a name="l03360"></a>03360 <span class="keywordtype">int</span>
<a name="l03361"></a><a class="code" href="bgpd_8h.html#ab1f8d16fa336b4da2231cfe49442e38b">03361</a> <a class="code" href="bgpd_8c.html#ac5ad8324adf311770d3b86530e576077">peer_local_as_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as, <span class="keywordtype">int</span> no_prepend)
<a name="l03362"></a>03362 {
<a name="l03363"></a>03363   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l03364"></a>03364   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03365"></a>03365   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03366"></a>03366 
<a name="l03367"></a>03367   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
<a name="l03368"></a>03368       &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9f081165f0e664c758f4eec58b3c1fa2">BGP_PEER_INTERNAL</a>)
<a name="l03369"></a>03369     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a26bc40f5bfcd100d81ca6fc6830bf550">BGP_ERR_LOCAL_AS_ALLOWED_ONLY_FOR_EBGP</a>;
<a name="l03370"></a>03370 
<a name="l03371"></a>03371   <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a> == as)
<a name="l03372"></a>03372     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#ac5789f66ab509b346d51d8bbd79361ce">BGP_ERR_CANNOT_HAVE_LOCAL_AS_SAME_AS</a>;
<a name="l03373"></a>03373 
<a name="l03374"></a>03374   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03375"></a>03375     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03376"></a>03376 
<a name="l03377"></a>03377   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> == as &amp;&amp;
<a name="l03378"></a>03378       ((<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) &amp;&amp; no_prepend)
<a name="l03379"></a>03379        || (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) &amp;&amp; ! no_prepend)))
<a name="l03380"></a>03380     <span class="keywordflow">return</span> 0;
<a name="l03381"></a>03381 
<a name="l03382"></a>03382   peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = as;
<a name="l03383"></a>03383   <span class="keywordflow">if</span> (no_prepend)
<a name="l03384"></a>03384     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03385"></a>03385   <span class="keywordflow">else</span>
<a name="l03386"></a>03386     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03387"></a>03387 
<a name="l03388"></a>03388   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03389"></a>03389     {
<a name="l03390"></a>03390       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03391"></a>03391        {
<a name="l03392"></a>03392          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
<a name="l03393"></a>03393          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l03394"></a>03394                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03395"></a>03395        }
<a name="l03396"></a>03396       <span class="keywordflow">else</span>
<a name="l03397"></a>03397         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03398"></a>03398 
<a name="l03399"></a>03399       <span class="keywordflow">return</span> 0;
<a name="l03400"></a>03400     }
<a name="l03401"></a>03401 
<a name="l03402"></a>03402   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03403"></a>03403   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03404"></a>03404     {
<a name="l03405"></a>03405       peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = as;
<a name="l03406"></a>03406       <span class="keywordflow">if</span> (no_prepend)
<a name="l03407"></a>03407     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03408"></a>03408       <span class="keywordflow">else</span>
<a name="l03409"></a>03409     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03410"></a>03410 
<a name="l03411"></a>03411       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03412"></a>03412        {
<a name="l03413"></a>03413          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
<a name="l03414"></a>03414          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l03415"></a>03415                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03416"></a>03416        }
<a name="l03417"></a>03417       <span class="keywordflow">else</span>
<a name="l03418"></a>03418         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03419"></a>03419     }
<a name="l03420"></a>03420 
<a name="l03421"></a>03421   <span class="keywordflow">return</span> 0;
<a name="l03422"></a>03422 }
<a name="l03423"></a>03423 
<a name="l03424"></a>03424 <span class="keywordtype">int</span>
<a name="l03425"></a><a class="code" href="bgpd_8h.html#a8d7544e4cf083706378a3ccb47ebb798">03425</a> <a class="code" href="bgpd_8c.html#ab7cb8ea066eeb90ee754ca517a914429">peer_local_as_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03426"></a>03426 {
<a name="l03427"></a>03427   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03428"></a>03428   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03429"></a>03429 
<a name="l03430"></a>03430   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l03431"></a>03431     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03432"></a>03432 
<a name="l03433"></a>03433   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l03434"></a>03434     <span class="keywordflow">return</span> 0;
<a name="l03435"></a>03435 
<a name="l03436"></a>03436   peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
<a name="l03437"></a>03437   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03438"></a>03438 
<a name="l03439"></a>03439   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03440"></a>03440     {
<a name="l03441"></a>03441       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03442"></a>03442        {
<a name="l03443"></a>03443          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
<a name="l03444"></a>03444          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l03445"></a>03445                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03446"></a>03446        }
<a name="l03447"></a>03447       <span class="keywordflow">else</span>
<a name="l03448"></a>03448         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03449"></a>03449 
<a name="l03450"></a>03450       <span class="keywordflow">return</span> 0;
<a name="l03451"></a>03451     }
<a name="l03452"></a>03452 
<a name="l03453"></a>03453   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03454"></a>03454   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03455"></a>03455     {
<a name="l03456"></a>03456       peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> = 0;
<a name="l03457"></a>03457       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>);
<a name="l03458"></a>03458 
<a name="l03459"></a>03459       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03460"></a>03460        {
<a name="l03461"></a>03461          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a7a9111e92a46bc69173cc1c0c6f0e370">PEER_DOWN_LOCAL_AS_CHANGE</a>;
<a name="l03462"></a>03462          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l03463"></a>03463                           <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03464"></a>03464        }
<a name="l03465"></a>03465       <span class="keywordflow">else</span>
<a name="l03466"></a>03466         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03467"></a>03467     }
<a name="l03468"></a>03468   <span class="keywordflow">return</span> 0;
<a name="l03469"></a>03469 }
<a name="l03470"></a>03470 
<a name="l03471"></a>03471 <span class="comment">/* Set password for authenticating with the peer. */</span>
<a name="l03472"></a>03472 <span class="keywordtype">int</span>
<a name="l03473"></a><a class="code" href="bgpd_8h.html#ab1359d7de759937f620fbd16a1b7ee47">03473</a> <a class="code" href="bgpd_8c.html#a389e4630f10a9eac07f62095781d11d2">peer_password_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structpassword.html">password</a>)
<a name="l03474"></a>03474 {
<a name="l03475"></a>03475   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn, *nnode;
<a name="l03476"></a>03476   <span class="keywordtype">int</span> len = password ? strlen(password) : 0;
<a name="l03477"></a>03477   <span class="keywordtype">int</span> ret = <a class="code" href="bgpd_8h.html#a19c4b12e2a1b7ef4ee85e0324fd5fe4d">BGP_SUCCESS</a>;
<a name="l03478"></a>03478 
<a name="l03479"></a>03479   <span class="keywordflow">if</span> ((len &lt; <a class="code" href="bgpd_8h.html#aec0f6522f37627afff295baef8c69aa5">PEER_PASSWORD_MINLEN</a>) || (len &gt; <a class="code" href="bgpd_8h.html#a7a57567c8f56c0002f8bb1ed00464dec">PEER_PASSWORD_MAXLEN</a>))
<a name="l03480"></a>03480     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03481"></a>03481 
<a name="l03482"></a>03482   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, password) == 0
<a name="l03483"></a>03483       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03484"></a>03484     <span class="keywordflow">return</span> 0;
<a name="l03485"></a>03485 
<a name="l03486"></a>03486   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l03487"></a>03487     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l03488"></a>03488   
<a name="l03489"></a>03489   peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, password);
<a name="l03490"></a>03490 
<a name="l03491"></a>03491   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03492"></a>03492     {
<a name="l03493"></a>03493       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03494"></a>03494           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03495"></a>03495       <span class="keywordflow">else</span>
<a name="l03496"></a>03496         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03497"></a>03497         
<a name="l03498"></a>03498       <span class="keywordflow">return</span> (<a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer) &gt;= 0) ? <a class="code" href="bgpd_8h.html#a19c4b12e2a1b7ef4ee85e0324fd5fe4d">BGP_SUCCESS</a> : <a class="code" href="bgpd_8h.html#a91bd42e0cf38ee3909055bae143faa6f">BGP_ERR_TCPSIG_FAILED</a>;
<a name="l03499"></a>03499     }
<a name="l03500"></a>03500 
<a name="l03501"></a>03501   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, nn, nnode, peer))
<a name="l03502"></a>03502     {
<a name="l03503"></a>03503       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, password) == 0)
<a name="l03504"></a>03504     <span class="keywordflow">continue</span>;
<a name="l03505"></a>03505       
<a name="l03506"></a>03506       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l03507"></a>03507         <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l03508"></a>03508       
<a name="l03509"></a>03509       peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, password);
<a name="l03510"></a>03510 
<a name="l03511"></a>03511       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03512"></a>03512         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03513"></a>03513       <span class="keywordflow">else</span>
<a name="l03514"></a>03514         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03515"></a>03515       
<a name="l03516"></a>03516       <span class="keywordflow">if</span> (<a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer) &lt; 0)
<a name="l03517"></a>03517         ret = <a class="code" href="bgpd_8h.html#a91bd42e0cf38ee3909055bae143faa6f">BGP_ERR_TCPSIG_FAILED</a>;
<a name="l03518"></a>03518     }
<a name="l03519"></a>03519 
<a name="l03520"></a>03520   <span class="keywordflow">return</span> ret;
<a name="l03521"></a>03521 }
<a name="l03522"></a>03522 
<a name="l03523"></a>03523 <span class="keywordtype">int</span>
<a name="l03524"></a><a class="code" href="bgpd_8h.html#ab5f490608c103ba1e1595920ef582377">03524</a> <a class="code" href="bgpd_8c.html#a87df2abeb771cd2d84103ff6a6ecd99e">peer_password_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l03525"></a>03525 {
<a name="l03526"></a>03526   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn, *nnode;
<a name="l03527"></a>03527 
<a name="l03528"></a>03528   <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
<a name="l03529"></a>03529       &amp;&amp; !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03530"></a>03530     <span class="keywordflow">return</span> 0;
<a name="l03531"></a>03531 
<a name="l03532"></a>03532   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03533"></a>03533     {
<a name="l03534"></a>03534       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
<a name="l03535"></a>03535       &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
<a name="l03536"></a>03536       &amp;&amp; strcmp (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>) == 0)
<a name="l03537"></a>03537     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a69ee840e83522c763abcacb72270882b">BGP_ERR_PEER_GROUP_HAS_THE_FLAG</a>;
<a name="l03538"></a>03538 
<a name="l03539"></a>03539       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03540"></a>03540         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03541"></a>03541       <span class="keywordflow">else</span>
<a name="l03542"></a>03542         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03543"></a>03543 
<a name="l03544"></a>03544       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l03545"></a>03545         <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l03546"></a>03546       
<a name="l03547"></a>03547       peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03548"></a>03548       
<a name="l03549"></a>03549       <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
<a name="l03550"></a>03550 
<a name="l03551"></a>03551       <span class="keywordflow">return</span> 0;
<a name="l03552"></a>03552     }
<a name="l03553"></a>03553 
<a name="l03554"></a>03554   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l03555"></a>03555   peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03556"></a>03556 
<a name="l03557"></a>03557   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, nn, nnode, peer))
<a name="l03558"></a>03558     {
<a name="l03559"></a>03559       <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l03560"></a>03560     <span class="keywordflow">continue</span>;
<a name="l03561"></a>03561 
<a name="l03562"></a>03562       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l03563"></a>03563         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>);
<a name="l03564"></a>03564       <span class="keywordflow">else</span>
<a name="l03565"></a>03565         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l03566"></a>03566       
<a name="l03567"></a>03567       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3fbcc59d7ac6805769de716dc8939a96">MTYPE_PEER_PASSWORD</a>, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>);
<a name="l03568"></a>03568       peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03569"></a>03569 
<a name="l03570"></a>03570       <a class="code" href="bgp__network_8c.html#a35581e7861511fb6f2df31e985b3244f">bgp_md5_set</a> (peer);
<a name="l03571"></a>03571     }
<a name="l03572"></a>03572 
<a name="l03573"></a>03573   <span class="keywordflow">return</span> 0;
<a name="l03574"></a>03574 }
<a name="l03575"></a>03575 
<a name="l03576"></a>03576 <span class="comment">/* Set distribute list to the peer. */</span>
<a name="l03577"></a>03577 <span class="keywordtype">int</span>
<a name="l03578"></a><a class="code" href="bgpd_8h.html#a99bb585744d7743da5cd8973b2a912aa">03578</a> <a class="code" href="bgpd_8c.html#afc8c396e38cea0faaa1c08f915acb0c0">peer_distribute_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct, 
<a name="l03579"></a>03579              <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l03580"></a>03580 {
<a name="l03581"></a>03581   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03582"></a>03582   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03583"></a>03583   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03584"></a>03584 
<a name="l03585"></a>03585   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03586"></a>03586     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03587"></a>03587 
<a name="l03588"></a>03588   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03589"></a>03589     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03590"></a>03590 
<a name="l03591"></a>03591   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03592"></a>03592     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03593"></a>03593 
<a name="l03594"></a>03594   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03595"></a>03595 
<a name="l03596"></a>03596   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03597"></a>03597     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#adeddcf92f035de98d9438aacc24eec77">BGP_ERR_PEER_FILTER_CONFLICT</a>;
<a name="l03598"></a>03598 
<a name="l03599"></a>03599   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03600"></a>03600     free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03601"></a>03601   filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (name);
<a name="l03602"></a>03602   filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, name);
<a name="l03603"></a>03603 
<a name="l03604"></a>03604   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03605"></a>03605     <span class="keywordflow">return</span> 0;
<a name="l03606"></a>03606 
<a name="l03607"></a>03607   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03608"></a>03608   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03609"></a>03609     {
<a name="l03610"></a>03610       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03611"></a>03611 
<a name="l03612"></a>03612       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03613"></a>03613     <span class="keywordflow">continue</span>;
<a name="l03614"></a>03614 
<a name="l03615"></a>03615       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03616"></a>03616     free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03617"></a>03617       filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (name);
<a name="l03618"></a>03618       filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, name);
<a name="l03619"></a>03619     }
<a name="l03620"></a>03620 
<a name="l03621"></a>03621   <span class="keywordflow">return</span> 0;
<a name="l03622"></a>03622 }
<a name="l03623"></a>03623 
<a name="l03624"></a>03624 <span class="keywordtype">int</span>
<a name="l03625"></a><a class="code" href="bgpd_8h.html#a25f3f1b4d0ea44c9d4b16e9bd4cb8538">03625</a> <a class="code" href="bgpd_8c.html#aa0e0aaa9973c6e8766af52084c844f39">peer_distribute_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct)
<a name="l03626"></a>03626 {
<a name="l03627"></a>03627   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03628"></a>03628   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
<a name="l03629"></a>03629   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03630"></a>03630   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03631"></a>03631 
<a name="l03632"></a>03632   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03633"></a>03633     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03634"></a>03634 
<a name="l03635"></a>03635   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03636"></a>03636     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03637"></a>03637 
<a name="l03638"></a>03638   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03639"></a>03639     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03640"></a>03640 
<a name="l03641"></a>03641   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03642"></a>03642 
<a name="l03643"></a>03643   <span class="comment">/* apply peer-group filter */</span>
<a name="l03644"></a>03644   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03645"></a>03645     {
<a name="l03646"></a>03646       gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03647"></a>03647 
<a name="l03648"></a>03648       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03649"></a>03649     {
<a name="l03650"></a>03650       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03651"></a>03651         free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03652"></a>03652       filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03653"></a>03653       filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a>;
<a name="l03654"></a>03654       <span class="keywordflow">return</span> 0;
<a name="l03655"></a>03655     }
<a name="l03656"></a>03656     }
<a name="l03657"></a>03657 
<a name="l03658"></a>03658   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03659"></a>03659     free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03660"></a>03660   filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03661"></a>03661   filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03662"></a>03662 
<a name="l03663"></a>03663   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03664"></a>03664     <span class="keywordflow">return</span> 0;
<a name="l03665"></a>03665 
<a name="l03666"></a>03666     group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03667"></a>03667     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03668"></a>03668       {
<a name="l03669"></a>03669     filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03670"></a>03670 
<a name="l03671"></a>03671     <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03672"></a>03672       <span class="keywordflow">continue</span>;
<a name="l03673"></a>03673 
<a name="l03674"></a>03674     <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03675"></a>03675       free (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03676"></a>03676     filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03677"></a>03677     filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03678"></a>03678       }
<a name="l03679"></a>03679 
<a name="l03680"></a>03680   <span class="keywordflow">return</span> 0;
<a name="l03681"></a>03681 }
<a name="l03682"></a>03682 
<a name="l03683"></a>03683 <span class="comment">/* Update distribute list. */</span>
<a name="l03684"></a>03684 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03685"></a><a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">03685</a> <a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a> (<span class="keyword">struct</span> <a class="code" href="structaccess__list.html">access_list</a> *access)
<a name="l03686"></a>03686 {
<a name="l03687"></a>03687   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l03688"></a>03688   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l03689"></a>03689   <span class="keywordtype">int</span> direct;
<a name="l03690"></a>03690   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
<a name="l03691"></a>03691   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03692"></a>03692   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03693"></a>03693   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l03694"></a>03694   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03695"></a>03695   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03696"></a>03696 
<a name="l03697"></a>03697   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
<a name="l03698"></a>03698     {
<a name="l03699"></a>03699       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l03700"></a>03700     {
<a name="l03701"></a>03701       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l03702"></a>03702         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l03703"></a>03703           {
<a name="l03704"></a>03704         filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03705"></a>03705 
<a name="l03706"></a>03706         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l03707"></a>03707           {
<a name="l03708"></a>03708             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03709"></a>03709               filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = 
<a name="l03710"></a>03710             <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03711"></a>03711             <span class="keywordflow">else</span>
<a name="l03712"></a>03712               filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03713"></a>03713           }
<a name="l03714"></a>03714           }
<a name="l03715"></a>03715     }
<a name="l03716"></a>03716       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l03717"></a>03717     {
<a name="l03718"></a>03718       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l03719"></a>03719         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l03720"></a>03720           {
<a name="l03721"></a>03721         filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03722"></a>03722 
<a name="l03723"></a>03723         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l03724"></a>03724           {
<a name="l03725"></a>03725             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03726"></a>03726               filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = 
<a name="l03727"></a>03727             <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l03728"></a>03728             <span class="keywordflow">else</span>
<a name="l03729"></a>03729               filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#af288ea42d2572027c30ae8f73503ff8b">alist</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03730"></a>03730           }
<a name="l03731"></a>03731           }
<a name="l03732"></a>03732     }
<a name="l03733"></a>03733     }
<a name="l03734"></a>03734 }
<a name="l03735"></a>03735 
<a name="l03736"></a>03736 <span class="comment">/* Set prefix list to the peer. */</span>
<a name="l03737"></a>03737 <span class="keywordtype">int</span>
<a name="l03738"></a><a class="code" href="bgpd_8h.html#a6b9984a6f8fef55c475e65fcfbb74d0d">03738</a> <a class="code" href="bgpd_8c.html#a38fdd742a49d061566ad1e117d10facb">peer_prefix_list_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct, 
<a name="l03739"></a>03739               <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l03740"></a>03740 {
<a name="l03741"></a>03741   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03742"></a>03742   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03743"></a>03743   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03744"></a>03744 
<a name="l03745"></a>03745   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03746"></a>03746     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03747"></a>03747 
<a name="l03748"></a>03748   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03749"></a>03749     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03750"></a>03750 
<a name="l03751"></a>03751   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03752"></a>03752     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03753"></a>03753 
<a name="l03754"></a>03754   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03755"></a>03755 
<a name="l03756"></a>03756   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[direct].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l03757"></a>03757     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#adeddcf92f035de98d9438aacc24eec77">BGP_ERR_PEER_FILTER_CONFLICT</a>;
<a name="l03758"></a>03758 
<a name="l03759"></a>03759   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03760"></a>03760     free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03761"></a>03761   filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (name);
<a name="l03762"></a>03762   filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l03763"></a>03763 
<a name="l03764"></a>03764   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03765"></a>03765     <span class="keywordflow">return</span> 0;
<a name="l03766"></a>03766 
<a name="l03767"></a>03767   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03768"></a>03768   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03769"></a>03769     {
<a name="l03770"></a>03770       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03771"></a>03771 
<a name="l03772"></a>03772       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03773"></a>03773     <span class="keywordflow">continue</span>;
<a name="l03774"></a>03774 
<a name="l03775"></a>03775       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03776"></a>03776     free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03777"></a>03777       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (name);
<a name="l03778"></a>03778       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l03779"></a>03779     }
<a name="l03780"></a>03780   <span class="keywordflow">return</span> 0;
<a name="l03781"></a>03781 }
<a name="l03782"></a>03782 
<a name="l03783"></a>03783 <span class="keywordtype">int</span>
<a name="l03784"></a><a class="code" href="bgpd_8h.html#a8d93d6afb90969c95312fe6b4bd61589">03784</a> <a class="code" href="bgpd_8c.html#a78c9d2a477af78eeff1ac55aebba0890">peer_prefix_list_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct)
<a name="l03785"></a>03785 {
<a name="l03786"></a>03786   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03787"></a>03787   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
<a name="l03788"></a>03788   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03789"></a>03789   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03790"></a>03790 
<a name="l03791"></a>03791   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03792"></a>03792     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03793"></a>03793 
<a name="l03794"></a>03794   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03795"></a>03795     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03796"></a>03796 
<a name="l03797"></a>03797   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03798"></a>03798     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03799"></a>03799 
<a name="l03800"></a>03800   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03801"></a>03801 
<a name="l03802"></a>03802   <span class="comment">/* apply peer-group filter */</span>
<a name="l03803"></a>03803   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03804"></a>03804     {
<a name="l03805"></a>03805       gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03806"></a>03806 
<a name="l03807"></a>03807       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03808"></a>03808     {
<a name="l03809"></a>03809       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03810"></a>03810         free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03811"></a>03811       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03812"></a>03812       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist;
<a name="l03813"></a>03813       <span class="keywordflow">return</span> 0;
<a name="l03814"></a>03814     }
<a name="l03815"></a>03815     }
<a name="l03816"></a>03816 
<a name="l03817"></a>03817   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03818"></a>03818     free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03819"></a>03819   filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03820"></a>03820   filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03821"></a>03821 
<a name="l03822"></a>03822   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03823"></a>03823     <span class="keywordflow">return</span> 0;
<a name="l03824"></a>03824 
<a name="l03825"></a>03825   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03826"></a>03826   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03827"></a>03827     {
<a name="l03828"></a>03828       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03829"></a>03829 
<a name="l03830"></a>03830       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03831"></a>03831     <span class="keywordflow">continue</span>;
<a name="l03832"></a>03832 
<a name="l03833"></a>03833       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03834"></a>03834     free (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03835"></a>03835       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03836"></a>03836       filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03837"></a>03837     }
<a name="l03838"></a>03838 
<a name="l03839"></a>03839   <span class="keywordflow">return</span> 0;
<a name="l03840"></a>03840 }
<a name="l03841"></a>03841 
<a name="l03842"></a>03842 <span class="comment">/* Update prefix-list list. */</span>
<a name="l03843"></a>03843 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03844"></a><a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">03844</a> <a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist)
<a name="l03845"></a>03845 {
<a name="l03846"></a>03846   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
<a name="l03847"></a>03847   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03848"></a>03848   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l03849"></a>03849   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l03850"></a>03850   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03851"></a>03851   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03852"></a>03852   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l03853"></a>03853   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l03854"></a>03854   <span class="keywordtype">int</span> direct;
<a name="l03855"></a>03855 
<a name="l03856"></a>03856   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
<a name="l03857"></a>03857     {
<a name="l03858"></a>03858       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l03859"></a>03859     {
<a name="l03860"></a>03860       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l03861"></a>03861         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l03862"></a>03862           {
<a name="l03863"></a>03863         filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03864"></a>03864 
<a name="l03865"></a>03865         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l03866"></a>03866           {
<a name="l03867"></a>03867             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03868"></a>03868               filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = 
<a name="l03869"></a>03869             <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03870"></a>03870             <span class="keywordflow">else</span>
<a name="l03871"></a>03871               filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03872"></a>03872           }
<a name="l03873"></a>03873           }
<a name="l03874"></a>03874     }
<a name="l03875"></a>03875       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l03876"></a>03876     {
<a name="l03877"></a>03877       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l03878"></a>03878         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l03879"></a>03879           {
<a name="l03880"></a>03880         filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03881"></a>03881 
<a name="l03882"></a>03882         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l03883"></a>03883           {
<a name="l03884"></a>03884             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l03885"></a>03885               filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = 
<a name="l03886"></a>03886             <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l03887"></a>03887             <span class="keywordflow">else</span>
<a name="l03888"></a>03888               filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[direct].plist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03889"></a>03889           }
<a name="l03890"></a>03890           }
<a name="l03891"></a>03891     }
<a name="l03892"></a>03892     }
<a name="l03893"></a>03893 }
<a name="l03894"></a>03894 
<a name="l03895"></a>03895 <span class="keywordtype">int</span>
<a name="l03896"></a><a class="code" href="bgpd_8h.html#a4fbc6985ecac09226204810632d0bcd0">03896</a> <a class="code" href="bgpd_8c.html#a747ff9ae059e9102dff1eb9d6926dded">peer_aslist_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct,
<a name="l03897"></a>03897          <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l03898"></a>03898 {
<a name="l03899"></a>03899   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03900"></a>03900   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03901"></a>03901   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03902"></a>03902 
<a name="l03903"></a>03903   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03904"></a>03904     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03905"></a>03905 
<a name="l03906"></a>03906   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03907"></a>03907     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03908"></a>03908 
<a name="l03909"></a>03909   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03910"></a>03910     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03911"></a>03911 
<a name="l03912"></a>03912   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03913"></a>03913 
<a name="l03914"></a>03914   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03915"></a>03915     free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03916"></a>03916   filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (name);
<a name="l03917"></a>03917   filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (name);
<a name="l03918"></a>03918 
<a name="l03919"></a>03919   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03920"></a>03920     <span class="keywordflow">return</span> 0;
<a name="l03921"></a>03921 
<a name="l03922"></a>03922   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03923"></a>03923   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03924"></a>03924     {
<a name="l03925"></a>03925       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03926"></a>03926 
<a name="l03927"></a>03927       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03928"></a>03928     <span class="keywordflow">continue</span>;
<a name="l03929"></a>03929 
<a name="l03930"></a>03930       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03931"></a>03931     free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03932"></a>03932       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (name);
<a name="l03933"></a>03933       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (name);
<a name="l03934"></a>03934     }
<a name="l03935"></a>03935   <span class="keywordflow">return</span> 0;
<a name="l03936"></a>03936 }
<a name="l03937"></a>03937 
<a name="l03938"></a>03938 <span class="keywordtype">int</span>
<a name="l03939"></a><a class="code" href="bgpd_8h.html#a25e65c1c580ba4a983e04a68f04bb502">03939</a> <a class="code" href="bgpd_8c.html#acbc965dbac634f666f7b3d4b910f68e7">peer_aslist_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct)
<a name="l03940"></a>03940 {
<a name="l03941"></a>03941   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l03942"></a>03942   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
<a name="l03943"></a>03943   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l03944"></a>03944   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03945"></a>03945 
<a name="l03946"></a>03946   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l03947"></a>03947     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l03948"></a>03948 
<a name="l03949"></a>03949   <span class="keywordflow">if</span> (direct != <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a> &amp;&amp; direct != <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>)
<a name="l03950"></a>03950     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l03951"></a>03951 
<a name="l03952"></a>03952   <span class="keywordflow">if</span> (direct == <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a> &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l03953"></a>03953     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l03954"></a>03954 
<a name="l03955"></a>03955   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03956"></a>03956 
<a name="l03957"></a>03957   <span class="comment">/* apply peer-group filter */</span>
<a name="l03958"></a>03958   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03959"></a>03959     {
<a name="l03960"></a>03960       gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03961"></a>03961 
<a name="l03962"></a>03962       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03963"></a>03963     {
<a name="l03964"></a>03964       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03965"></a>03965         free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03966"></a>03966       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03967"></a>03967       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist;
<a name="l03968"></a>03968       <span class="keywordflow">return</span> 0;
<a name="l03969"></a>03969     }
<a name="l03970"></a>03970     }
<a name="l03971"></a>03971 
<a name="l03972"></a>03972   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03973"></a>03973     free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03974"></a>03974   filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03975"></a>03975   filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03976"></a>03976 
<a name="l03977"></a>03977   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l03978"></a>03978     <span class="keywordflow">return</span> 0;
<a name="l03979"></a>03979 
<a name="l03980"></a>03980   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l03981"></a>03981   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l03982"></a>03982     {
<a name="l03983"></a>03983       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l03984"></a>03984 
<a name="l03985"></a>03985       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l03986"></a>03986     <span class="keywordflow">continue</span>;
<a name="l03987"></a>03987 
<a name="l03988"></a>03988       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l03989"></a>03989     free (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l03990"></a>03990       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03991"></a>03991       filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03992"></a>03992     }
<a name="l03993"></a>03993 
<a name="l03994"></a>03994   <span class="keywordflow">return</span> 0;
<a name="l03995"></a>03995 }
<a name="l03996"></a>03996 
<a name="l03997"></a>03997 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03998"></a><a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">03998</a> <a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a> (<span class="keywordtype">void</span>)
<a name="l03999"></a>03999 {
<a name="l04000"></a>04000   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l04001"></a>04001   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l04002"></a>04002   <span class="keywordtype">int</span> direct;
<a name="l04003"></a>04003   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
<a name="l04004"></a>04004   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04005"></a>04005   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l04006"></a>04006   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l04007"></a>04007   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04008"></a>04008   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04009"></a>04009 
<a name="l04010"></a>04010   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
<a name="l04011"></a>04011     {
<a name="l04012"></a>04012       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l04013"></a>04013     {
<a name="l04014"></a>04014       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l04015"></a>04015         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l04016"></a>04016           {
<a name="l04017"></a>04017         filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04018"></a>04018 
<a name="l04019"></a>04019         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l04020"></a>04020           {
<a name="l04021"></a>04021             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l04022"></a>04022               filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = 
<a name="l04023"></a>04023             <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l04024"></a>04024             <span class="keywordflow">else</span>
<a name="l04025"></a>04025               filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04026"></a>04026           }
<a name="l04027"></a>04027           }
<a name="l04028"></a>04028     }
<a name="l04029"></a>04029       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l04030"></a>04030     {
<a name="l04031"></a>04031       <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l04032"></a>04032         <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l04033"></a>04033           {
<a name="l04034"></a>04034         filter = &amp;group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04035"></a>04035 
<a name="l04036"></a>04036         <span class="keywordflow">for</span> (direct = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>; direct &lt; <a class="code" href="zebra_8h.html#acf121ce172b258c76f62150ce2ed3951">FILTER_MAX</a>; direct++)
<a name="l04037"></a>04037           {
<a name="l04038"></a>04038             <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l04039"></a>04039               filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = 
<a name="l04040"></a>04040             <a class="code" href="bgp__filter_8c.html#ac58e5d18060e65504b9355e9b40bc82d">as_list_lookup</a> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>);
<a name="l04041"></a>04041             <span class="keywordflow">else</span>
<a name="l04042"></a>04042               filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[direct].aslist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04043"></a>04043           }
<a name="l04044"></a>04044           }
<a name="l04045"></a>04045     }
<a name="l04046"></a>04046     }
<a name="l04047"></a>04047 }
<a name="l04048"></a>04048 
<a name="l04049"></a>04049 <span class="comment">/* Set route-map to the peer. */</span>
<a name="l04050"></a>04050 <span class="keywordtype">int</span>
<a name="l04051"></a><a class="code" href="bgpd_8h.html#aa8d435ad3cb4b4d451656da7f605da8f">04051</a> <a class="code" href="bgpd_8c.html#a4c18f265e0444e0ed87dc66ca8ad8af9">peer_route_map_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct, 
<a name="l04052"></a>04052             <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l04053"></a>04053 {
<a name="l04054"></a>04054   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04055"></a>04055   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04056"></a>04056   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04057"></a>04057 
<a name="l04058"></a>04058   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04059"></a>04059     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04060"></a>04060 
<a name="l04061"></a>04061   <span class="keywordflow">if</span> (direct != <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> &amp;&amp;
<a name="l04062"></a>04062       direct != <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>)
<a name="l04063"></a>04063     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l04064"></a>04064 
<a name="l04065"></a>04065   <span class="keywordflow">if</span> ( (direct == <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> || direct == <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>)
<a name="l04066"></a>04066       &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l04067"></a>04067     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l04068"></a>04068 
<a name="l04069"></a>04069   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04070"></a>04070 
<a name="l04071"></a>04071   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04072"></a>04072     free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04073"></a>04073   
<a name="l04074"></a>04074   filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (name);
<a name="l04075"></a>04075   filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (name);
<a name="l04076"></a>04076 
<a name="l04077"></a>04077   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04078"></a>04078     <span class="keywordflow">return</span> 0;
<a name="l04079"></a>04079 
<a name="l04080"></a>04080   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04081"></a>04081   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04082"></a>04082     {
<a name="l04083"></a>04083       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04084"></a>04084 
<a name="l04085"></a>04085       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04086"></a>04086     <span class="keywordflow">continue</span>;
<a name="l04087"></a>04087 
<a name="l04088"></a>04088       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04089"></a>04089     free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04090"></a>04090       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (name);
<a name="l04091"></a>04091       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (name);
<a name="l04092"></a>04092     }
<a name="l04093"></a>04093   <span class="keywordflow">return</span> 0;
<a name="l04094"></a>04094 }
<a name="l04095"></a>04095 
<a name="l04096"></a>04096 <span class="comment">/* Unset route-map from the peer. */</span>
<a name="l04097"></a>04097 <span class="keywordtype">int</span>
<a name="l04098"></a><a class="code" href="bgpd_8h.html#a0e2294c2b634d5983d55ccd22403499f">04098</a> <a class="code" href="bgpd_8c.html#ad5cedbe92571829f5979cd571934cb80">peer_route_map_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> direct)
<a name="l04099"></a>04099 {
<a name="l04100"></a>04100   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04101"></a>04101   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter;
<a name="l04102"></a>04102   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04103"></a>04103   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04104"></a>04104 
<a name="l04105"></a>04105   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04106"></a>04106     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04107"></a>04107 
<a name="l04108"></a>04108   <span class="keywordflow">if</span> (direct != <a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> &amp;&amp;
<a name="l04109"></a>04109       direct != <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a> &amp;&amp; direct != <a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>)
<a name="l04110"></a>04110     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a79172311591f0b89f0673ea113c9df0e">BGP_ERR_INVALID_VALUE</a>;
<a name="l04111"></a>04111 
<a name="l04112"></a>04112   <span class="keywordflow">if</span> ( (direct == <a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a> || direct == <a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>)
<a name="l04113"></a>04113       &amp;&amp; <a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l04114"></a>04114     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l04115"></a>04115 
<a name="l04116"></a>04116   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04117"></a>04117 
<a name="l04118"></a>04118   <span class="comment">/* apply peer-group filter */</span>
<a name="l04119"></a>04119   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04120"></a>04120     {
<a name="l04121"></a>04121       gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04122"></a>04122 
<a name="l04123"></a>04123       <span class="keywordflow">if</span> (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04124"></a>04124     {
<a name="l04125"></a>04125       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04126"></a>04126         free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04127"></a>04127       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = strdup (gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04128"></a>04128       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map;
<a name="l04129"></a>04129       <span class="keywordflow">return</span> 0;
<a name="l04130"></a>04130     }
<a name="l04131"></a>04131     }
<a name="l04132"></a>04132 
<a name="l04133"></a>04133   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04134"></a>04134     free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04135"></a>04135   filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04136"></a>04136   filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04137"></a>04137 
<a name="l04138"></a>04138   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04139"></a>04139     <span class="keywordflow">return</span> 0;
<a name="l04140"></a>04140 
<a name="l04141"></a>04141   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04142"></a>04142   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04143"></a>04143     {
<a name="l04144"></a>04144       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04145"></a>04145 
<a name="l04146"></a>04146       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04147"></a>04147     <span class="keywordflow">continue</span>;
<a name="l04148"></a>04148 
<a name="l04149"></a>04149       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04150"></a>04150     free (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>);
<a name="l04151"></a>04151       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04152"></a>04152       filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[direct].map = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04153"></a>04153     }
<a name="l04154"></a>04154   <span class="keywordflow">return</span> 0;
<a name="l04155"></a>04155 }
<a name="l04156"></a>04156 
<a name="l04157"></a>04157 <span class="comment">/* Set unsuppress-map to the peer. */</span>
<a name="l04158"></a>04158 <span class="keywordtype">int</span>
<a name="l04159"></a><a class="code" href="bgpd_8h.html#adfe9b920e26f78f11de6a50d4fd4716a">04159</a> <a class="code" href="bgpd_8c.html#af11bfd2d13e4fddd3c70995d04549dac">peer_unsuppress_map_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, 
<a name="l04160"></a>04160                          <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l04161"></a>04161 {
<a name="l04162"></a>04162   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04163"></a>04163   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04164"></a>04164   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04165"></a>04165 
<a name="l04166"></a>04166   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04167"></a>04167     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04168"></a>04168 
<a name="l04169"></a>04169   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l04170"></a>04170     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l04171"></a>04171       
<a name="l04172"></a>04172   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04173"></a>04173 
<a name="l04174"></a>04174   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l04175"></a>04175     free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l04176"></a>04176   
<a name="l04177"></a>04177   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (name);
<a name="l04178"></a>04178   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (name);
<a name="l04179"></a>04179 
<a name="l04180"></a>04180   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04181"></a>04181     <span class="keywordflow">return</span> 0;
<a name="l04182"></a>04182 
<a name="l04183"></a>04183   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04184"></a>04184   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04185"></a>04185     {
<a name="l04186"></a>04186       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04187"></a>04187 
<a name="l04188"></a>04188       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04189"></a>04189     <span class="keywordflow">continue</span>;
<a name="l04190"></a>04190 
<a name="l04191"></a>04191       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l04192"></a>04192     free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l04193"></a>04193       filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = strdup (name);
<a name="l04194"></a>04194       filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (name);
<a name="l04195"></a>04195     }
<a name="l04196"></a>04196   <span class="keywordflow">return</span> 0;
<a name="l04197"></a>04197 }
<a name="l04198"></a>04198 
<a name="l04199"></a>04199 <span class="comment">/* Unset route-map from the peer. */</span>
<a name="l04200"></a>04200 <span class="keywordtype">int</span>
<a name="l04201"></a><a class="code" href="bgpd_8h.html#a399c41a1a057e3e2b0794bf1c336e756">04201</a> <a class="code" href="bgpd_8c.html#a8c1efb3867b8216c5e153dd8f004bbd3">peer_unsuppress_map_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04202"></a>04202 {
<a name="l04203"></a>04203   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04204"></a>04204   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04205"></a>04205   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04206"></a>04206 
<a name="l04207"></a>04207   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04208"></a>04208     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04209"></a>04209   
<a name="l04210"></a>04210   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a1a0cdc337201562face7cdc18363e367">peer_is_group_member</a> (peer, afi, safi))
<a name="l04211"></a>04211     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa488422759d02e37668071bd8b3d37b2">BGP_ERR_INVALID_FOR_PEER_GROUP_MEMBER</a>;
<a name="l04212"></a>04212 
<a name="l04213"></a>04213   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04214"></a>04214 
<a name="l04215"></a>04215   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l04216"></a>04216     free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l04217"></a>04217   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04218"></a>04218   filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04219"></a>04219 
<a name="l04220"></a>04220   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04221"></a>04221     <span class="keywordflow">return</span> 0;
<a name="l04222"></a>04222 
<a name="l04223"></a>04223   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04224"></a>04224   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04225"></a>04225     {
<a name="l04226"></a>04226       filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04227"></a>04227 
<a name="l04228"></a>04228       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04229"></a>04229     <span class="keywordflow">continue</span>;
<a name="l04230"></a>04230 
<a name="l04231"></a>04231       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l04232"></a>04232     free (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>);
<a name="l04233"></a>04233       filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04234"></a>04234       filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04235"></a>04235     }
<a name="l04236"></a>04236   <span class="keywordflow">return</span> 0;
<a name="l04237"></a>04237 }
<a name="l04238"></a>04238 
<a name="l04239"></a>04239 <span class="keywordtype">int</span>
<a name="l04240"></a><a class="code" href="bgpd_8h.html#aa0e55cb663796b34e5ce3c26fcc28038">04240</a> <a class="code" href="bgpd_8c.html#a8dd962e630b1eee089dce4a78a1b719e">peer_maximum_prefix_set</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l04241"></a>04241              u_int32_t max, u_char threshold,
<a name="l04242"></a>04242              <span class="keywordtype">int</span> warning, u_int16_t restart)
<a name="l04243"></a>04243 {
<a name="l04244"></a>04244   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04245"></a>04245   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04246"></a>04246 
<a name="l04247"></a>04247   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04248"></a>04248     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04249"></a>04249 
<a name="l04250"></a>04250   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04251"></a>04251   peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = max;
<a name="l04252"></a>04252   peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = threshold;
<a name="l04253"></a>04253   peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = restart;
<a name="l04254"></a>04254   <span class="keywordflow">if</span> (warning)
<a name="l04255"></a>04255     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04256"></a>04256   <span class="keywordflow">else</span>
<a name="l04257"></a>04257     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04258"></a>04258 
<a name="l04259"></a>04259   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04260"></a>04260     <span class="keywordflow">return</span> 0;
<a name="l04261"></a>04261 
<a name="l04262"></a>04262   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04263"></a>04263   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04264"></a>04264     {
<a name="l04265"></a>04265       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04266"></a>04266     <span class="keywordflow">continue</span>;
<a name="l04267"></a>04267 
<a name="l04268"></a>04268       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04269"></a>04269       peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = max;
<a name="l04270"></a>04270       peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = threshold;
<a name="l04271"></a>04271       peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = restart;
<a name="l04272"></a>04272       <span class="keywordflow">if</span> (warning)
<a name="l04273"></a>04273     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04274"></a>04274       <span class="keywordflow">else</span>
<a name="l04275"></a>04275     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04276"></a>04276     }
<a name="l04277"></a>04277   <span class="keywordflow">return</span> 0;
<a name="l04278"></a>04278 }
<a name="l04279"></a>04279 
<a name="l04280"></a>04280 <span class="keywordtype">int</span>
<a name="l04281"></a><a class="code" href="bgpd_8h.html#a9c6a237393a8071003958ce5e94adfa2">04281</a> <a class="code" href="bgpd_8c.html#a1b96b3d77022efc99b238f4fced414f0">peer_maximum_prefix_unset</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04282"></a>04282 {
<a name="l04283"></a>04283   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04284"></a>04284   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04285"></a>04285 
<a name="l04286"></a>04286   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04287"></a>04287     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a653ea870b11b3538c43cc09ffd2996a0">BGP_ERR_PEER_INACTIVE</a>;
<a name="l04288"></a>04288 
<a name="l04289"></a>04289   <span class="comment">/* apply peer-group config */</span>
<a name="l04290"></a>04290   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04291"></a>04291     {
<a name="l04292"></a>04292       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
<a name="l04293"></a>04293       <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>))
<a name="l04294"></a>04294     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04295"></a>04295       <span class="keywordflow">else</span>
<a name="l04296"></a>04296     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04297"></a>04297 
<a name="l04298"></a>04298       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi],
<a name="l04299"></a>04299       <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
<a name="l04300"></a>04300     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04301"></a>04301       <span class="keywordflow">else</span>
<a name="l04302"></a>04302     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04303"></a>04303 
<a name="l04304"></a>04304       peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi];
<a name="l04305"></a>04305       peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi];
<a name="l04306"></a>04306       peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi];
<a name="l04307"></a>04307       <span class="keywordflow">return</span> 0;
<a name="l04308"></a>04308     }
<a name="l04309"></a>04309 
<a name="l04310"></a>04310   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04311"></a>04311   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04312"></a>04312   peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
<a name="l04313"></a>04313   peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = 0;
<a name="l04314"></a>04314   peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = 0;
<a name="l04315"></a>04315 
<a name="l04316"></a>04316   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04317"></a>04317     <span class="keywordflow">return</span> 0;
<a name="l04318"></a>04318 
<a name="l04319"></a>04319   group = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>;
<a name="l04320"></a>04320   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (group-&gt;<a class="code" href="structpeer__group.html#a82be4a6eec4816e8e6290fab0bc91b4d">peer</a>, node, nnode, peer))
<a name="l04321"></a>04321     {
<a name="l04322"></a>04322       <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04323"></a>04323     <span class="keywordflow">continue</span>;
<a name="l04324"></a>04324 
<a name="l04325"></a>04325       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>);
<a name="l04326"></a>04326       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>);
<a name="l04327"></a>04327       peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] = 0;
<a name="l04328"></a>04328       peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] = 0;
<a name="l04329"></a>04329       peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi] = 0;
<a name="l04330"></a>04330     }
<a name="l04331"></a>04331   <span class="keywordflow">return</span> 0;
<a name="l04332"></a>04332 }
<a name="l04333"></a>04333 
<a name="l04334"></a>04334 <span class="keywordtype">int</span>
<a name="l04335"></a><a class="code" href="bgpd_8h.html#a7960836d1f0efb0158962c61945df451">04335</a> <a class="code" href="bgpd_8c.html#aeaa590e7313d03ba1c7418ca2016bf90">peer_clear</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l04336"></a>04336 {
<a name="l04337"></a>04337   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
<a name="l04338"></a>04338     {
<a name="l04339"></a>04339       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>))
<a name="l04340"></a>04340     {
<a name="l04341"></a>04341       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a6df26783180e94b98072394c3c19e11b">PEER_STATUS_PREFIX_OVERFLOW</a>);
<a name="l04342"></a>04342       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>)
<a name="l04343"></a>04343         {
<a name="l04344"></a>04344           <a class="code" href="bgp__fsm_8h.html#adc51abba0e065120000e106a628242fe">BGP_TIMER_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#ae4340980236449843f55d04b3ad4bf7e">t_pmax_restart</a>);
<a name="l04345"></a>04345           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l04346"></a>04346         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Maximum-prefix restart timer canceled&quot;</span>,
<a name="l04347"></a>04347                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l04348"></a>04348         }
<a name="l04349"></a>04349       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab2d603cda7f63a92bb3792da2512259e">BGP_Start</a>);
<a name="l04350"></a>04350       <span class="keywordflow">return</span> 0;
<a name="l04351"></a>04351     }
<a name="l04352"></a>04352 
<a name="l04353"></a>04353       peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = <a class="code" href="bgpd_8h.html#a0631163bad4d36c78fad00669e254985">BGP_INIT_START_TIMER</a>;
<a name="l04354"></a>04354       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l04355"></a>04355     <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l04356"></a>04356              <a class="code" href="bgpd_8h.html#ae1672a288d642f221bb61ab2cb63e354">BGP_NOTIFY_CEASE_ADMIN_RESET</a>);
<a name="l04357"></a>04357       <span class="keywordflow">else</span>
<a name="l04358"></a>04358         <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l04359"></a>04359     }
<a name="l04360"></a>04360   <span class="keywordflow">return</span> 0;
<a name="l04361"></a>04361 }
<a name="l04362"></a>04362 
<a name="l04363"></a>04363 <span class="keywordtype">int</span>
<a name="l04364"></a><a class="code" href="bgpd_8h.html#a8cf8c8a8b0eb01739bcf08b4d33e6dc6">04364</a> <a class="code" href="bgpd_8c.html#a81cd47b32828ea9f93c32970a08f52fa">peer_clear_soft</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l04365"></a>04365          <span class="keyword">enum</span> <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656">bgp_clear_type</a> stype)
<a name="l04366"></a>04366 {
<a name="l04367"></a>04367   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l04368"></a>04368     <span class="keywordflow">return</span> 0;
<a name="l04369"></a>04369 
<a name="l04370"></a>04370   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04371"></a>04371     <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#a294345caf9f6a1ac8f38fe7b26d6d743">BGP_ERR_AF_UNCONFIGURED</a>;
<a name="l04372"></a>04372 
<a name="l04373"></a>04373   <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656ac61c555624c9350d89f97f04a394c0af">BGP_CLEAR_SOFT_RSCLIENT</a>)
<a name="l04374"></a>04374     {
<a name="l04375"></a>04375       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>))
<a name="l04376"></a>04376         <span class="keywordflow">return</span> 0;
<a name="l04377"></a>04377       <a class="code" href="bgp__route_8c.html#a2fdb62c8a10046002627ce0298e0d404">bgp_check_local_routes_rsclient</a> (peer, afi, safi);
<a name="l04378"></a>04378       <a class="code" href="bgp__route_8c.html#a5c1eb3bbdaa82d1e5b7b3307de25b12d">bgp_soft_reconfig_rsclient</a> (peer, afi, safi);
<a name="l04379"></a>04379     }
<a name="l04380"></a>04380 
<a name="l04381"></a>04381   <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a18c12c4f655b8e5508f96ccde24c9d42">BGP_CLEAR_SOFT_OUT</a> || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a4473d7e5b1d58fa4738da92478e9d384">BGP_CLEAR_SOFT_BOTH</a>)
<a name="l04382"></a>04382     <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l04383"></a>04383 
<a name="l04384"></a>04384   <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656afe0aaa784467adcb874558588454225d">BGP_CLEAR_SOFT_IN_ORF_PREFIX</a>)
<a name="l04385"></a>04385     {
<a name="l04386"></a>04386       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>)
<a name="l04387"></a>04387       &amp;&amp; (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>)
<a name="l04388"></a>04388           || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ab3ce0a5a8efd2d2b846abdad6ec4a9d6">PEER_CAP_ORF_PREFIX_RM_OLD_RCV</a>)))
<a name="l04389"></a>04389     {
<a name="l04390"></a>04390       <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a> = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04391"></a>04391       u_char prefix_type;
<a name="l04392"></a>04392 
<a name="l04393"></a>04393       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>))
<a name="l04394"></a>04394         prefix_type = <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>;
<a name="l04395"></a>04395       <span class="keywordflow">else</span>
<a name="l04396"></a>04396         prefix_type = <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>;
<a name="l04397"></a>04397 
<a name="l04398"></a>04398       <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist)
<a name="l04399"></a>04399         {
<a name="l04400"></a>04400           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>))
<a name="l04401"></a>04401         <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi,
<a name="l04402"></a>04402                     prefix_type, <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a>, 1);
<a name="l04403"></a>04403           <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, prefix_type,
<a name="l04404"></a>04404                       <a class="code" href="bgp__packet_8h.html#aea8b89e482c433839e04fcb2c59f022c">REFRESH_IMMEDIATE</a>, 0);
<a name="l04405"></a>04405         }
<a name="l04406"></a>04406       <span class="keywordflow">else</span>
<a name="l04407"></a>04407         {
<a name="l04408"></a>04408           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>))
<a name="l04409"></a>04409         <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi,
<a name="l04410"></a>04410                     prefix_type, <a class="code" href="bgp__packet_8h.html#aea8b89e482c433839e04fcb2c59f022c">REFRESH_IMMEDIATE</a>, 1);
<a name="l04411"></a>04411           <span class="keywordflow">else</span>
<a name="l04412"></a>04412         <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
<a name="l04413"></a>04413         }
<a name="l04414"></a>04414       <span class="keywordflow">return</span> 0;
<a name="l04415"></a>04415     }
<a name="l04416"></a>04416     }
<a name="l04417"></a>04417 
<a name="l04418"></a>04418   <span class="keywordflow">if</span> (stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656ab83cf46b37a6b4ee4981cfad44019dfb">BGP_CLEAR_SOFT_IN</a> || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656a4473d7e5b1d58fa4738da92478e9d384">BGP_CLEAR_SOFT_BOTH</a>
<a name="l04419"></a>04419       || stype == <a class="code" href="bgpd_8h.html#ae0303720234d32561a102a062efb4656afe0aaa784467adcb874558588454225d">BGP_CLEAR_SOFT_IN_ORF_PREFIX</a>)
<a name="l04420"></a>04420     {
<a name="l04421"></a>04421       <span class="comment">/* If neighbor has soft reconfiguration inbound flag.</span>
<a name="l04422"></a>04422 <span class="comment">     Use Adj-RIB-In database. */</span>
<a name="l04423"></a>04423       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
<a name="l04424"></a>04424     <a class="code" href="bgp__route_8c.html#a74f36e1ccbb82b25e96dbdda5ba35f66">bgp_soft_reconfig_in</a> (peer, afi, safi);
<a name="l04425"></a>04425       <span class="keywordflow">else</span>
<a name="l04426"></a>04426     {
<a name="l04427"></a>04427       <span class="comment">/* If neighbor has route refresh capability, send route refresh</span>
<a name="l04428"></a>04428 <span class="comment">         message to the peer. */</span>
<a name="l04429"></a>04429       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>)
<a name="l04430"></a>04430           || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
<a name="l04431"></a>04431         <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (peer, afi, safi, 0, 0, 0);
<a name="l04432"></a>04432       <span class="keywordflow">else</span>
<a name="l04433"></a>04433         <span class="keywordflow">return</span> <a class="code" href="bgpd_8h.html#aa89d856298585939cc3e79fe51606950">BGP_ERR_SOFT_RECONFIG_UNCONFIGURED</a>;
<a name="l04434"></a>04434     }
<a name="l04435"></a>04435     }
<a name="l04436"></a>04436   <span class="keywordflow">return</span> 0;
<a name="l04437"></a>04437 }
<a name="l04438"></a>04438 
<a name="l04439"></a>04439 <span class="comment">/* Display peer uptime.*/</span>
<a name="l04440"></a>04440 <span class="comment">/* XXX: why does this function return char * when it takes buffer? */</span>
<a name="l04441"></a>04441 <span class="keywordtype">char</span> *
<a name="l04442"></a><a class="code" href="bgpd_8h.html#a099f44e7a12a532f8fce258176290e10">04442</a> <a class="code" href="bgpd_8c.html#acf827381bb67155dd3f9ec490bc453ff">peer_uptime</a> (time_t uptime2, <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> len)
<a name="l04443"></a>04443 {
<a name="l04444"></a>04444   time_t uptime1;
<a name="l04445"></a>04445   <span class="keyword">struct </span>tm *tm;
<a name="l04446"></a>04446 
<a name="l04447"></a>04447   <span class="comment">/* Check buffer length. */</span>
<a name="l04448"></a>04448   <span class="keywordflow">if</span> (len &lt; <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>)
<a name="l04449"></a>04449     {
<a name="l04450"></a>04450       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;peer_uptime (): buffer shortage %lu&quot;</span>, (u_long)len);
<a name="l04451"></a>04451       <span class="comment">/* XXX: should return status instead of buf... */</span>
<a name="l04452"></a>04452       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;&lt;error&gt; &quot;</span>); 
<a name="l04453"></a>04453       <span class="keywordflow">return</span> buf;
<a name="l04454"></a>04454     }
<a name="l04455"></a>04455 
<a name="l04456"></a>04456   <span class="comment">/* If there is no connection has been done before print `never&#39;. */</span>
<a name="l04457"></a>04457   <span class="keywordflow">if</span> (uptime2 == 0)
<a name="l04458"></a>04458     {
<a name="l04459"></a>04459       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;never   &quot;</span>);
<a name="l04460"></a>04460       <span class="keywordflow">return</span> buf;
<a name="l04461"></a>04461     }
<a name="l04462"></a>04462 
<a name="l04463"></a>04463   <span class="comment">/* Get current time. */</span>
<a name="l04464"></a>04464   uptime1 = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l04465"></a>04465   uptime1 -= uptime2;
<a name="l04466"></a>04466   tm = gmtime (&amp;uptime1);
<a name="l04467"></a>04467 
<a name="l04468"></a>04468   <span class="comment">/* Making formatted timer strings. */</span>
<a name="l04469"></a>04469 <span class="preprocessor">#define ONE_DAY_SECOND 60*60*24</span>
<a name="l04470"></a>04470 <span class="preprocessor"></span><span class="preprocessor">#define ONE_WEEK_SECOND 60*60*24*7</span>
<a name="l04471"></a>04471 <span class="preprocessor"></span>
<a name="l04472"></a>04472   <span class="keywordflow">if</span> (uptime1 &lt; <a class="code" href="bgp__damp_8c.html#a8950077f458e540a8b4292539e0120cf">ONE_DAY_SECOND</a>)
<a name="l04473"></a>04473     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02d:%02d:%02d&quot;</span>, 
<a name="l04474"></a>04474           tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec);
<a name="l04475"></a>04475   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uptime1 &lt; <a class="code" href="bgp__damp_8c.html#a762bcaaf64d0f21361ca5c0262b49f33">ONE_WEEK_SECOND</a>)
<a name="l04476"></a>04476     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%dd%02dh%02dm&quot;</span>, 
<a name="l04477"></a>04477           tm-&gt;tm_yday, tm-&gt;tm_hour, tm-&gt;tm_min);
<a name="l04478"></a>04478   <span class="keywordflow">else</span>
<a name="l04479"></a>04479     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02dw%dd%02dh&quot;</span>, 
<a name="l04480"></a>04480           tm-&gt;tm_yday/7, tm-&gt;tm_yday - ((tm-&gt;tm_yday/7) * 7), tm-&gt;tm_hour);
<a name="l04481"></a>04481   <span class="keywordflow">return</span> buf;
<a name="l04482"></a>04482 }
<a name="l04483"></a>04483 
<a name="l04484"></a>04484 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l04485"></a><a class="code" href="bgpd_8c.html#a4bd09c948e7a109516a5a1988b9b3ac5">04485</a> <a class="code" href="bgpd_8c.html#a4bd09c948e7a109516a5a1988b9b3ac5">bgp_config_write_filter</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>,
<a name="l04486"></a>04486              <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04487"></a>04487 {
<a name="l04488"></a>04488   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04489"></a>04489   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *gfilter = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04490"></a>04490   <span class="keywordtype">char</span> *addr;
<a name="l04491"></a>04491   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> = <a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>;
<a name="l04492"></a>04492   <span class="keywordtype">int</span> out = <a class="code" href="zebra_8h.html#a680857761a7fc5acf5a919dc68876293">FILTER_OUT</a>;
<a name="l04493"></a>04493 
<a name="l04494"></a>04494   addr = peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>;
<a name="l04495"></a>04495   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04496"></a>04496   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04497"></a>04497     gfilter = &amp;peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04498"></a>04498 
<a name="l04499"></a>04499   <span class="comment">/* distribute-list. */</span>
<a name="l04500"></a>04500   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>)
<a name="l04501"></a>04501     <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>
<a name="l04502"></a>04502     || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>) != 0)
<a name="l04503"></a>04503     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s distribute-list %s in%s&quot;</span>, addr, 
<a name="l04504"></a>04504          filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[in].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04505"></a>04505   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! gfilter)
<a name="l04506"></a>04506     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s distribute-list %s out%s&quot;</span>, addr, 
<a name="l04507"></a>04507          filter-&gt;<a class="code" href="structbgp__filter.html#afc06bbc6914443740c82941dcb69bf10">dlist</a>[out].<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04508"></a>04508 
<a name="l04509"></a>04509   <span class="comment">/* prefix-list. */</span>
<a name="l04510"></a>04510   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l04511"></a>04511     <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>
<a name="l04512"></a>04512     || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>) != 0)
<a name="l04513"></a>04513     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s prefix-list %s in%s&quot;</span>, addr, 
<a name="l04514"></a>04514          filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[in].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04515"></a>04515   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> &amp;&amp; ! gfilter)
<a name="l04516"></a>04516     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s prefix-list %s out%s&quot;</span>, addr, 
<a name="l04517"></a>04517          filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[out].<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04518"></a>04518 
<a name="l04519"></a>04519   <span class="comment">/* route-map. */</span>
<a name="l04520"></a>04520   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04521"></a>04521     <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>
<a name="l04522"></a>04522        || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>) != 0)
<a name="l04523"></a>04523       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s in%s&quot;</span>, addr, 
<a name="l04524"></a>04524               filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a4d723b3238e0d2249fba0457bf41ff5c">RMAP_IN</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04525"></a>04525   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! gfilter)
<a name="l04526"></a>04526     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s out%s&quot;</span>, addr, 
<a name="l04527"></a>04527             filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a566e5091691c35ba13eba997a8858e17">RMAP_OUT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04528"></a>04528   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a> &amp;&amp; ! gfilter)
<a name="l04529"></a>04529     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s import%s&quot;</span>, addr,
<a name="l04530"></a>04530         filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a05d41539c91c3fbd320e9fbc220739b7">RMAP_IMPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04531"></a>04531   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>)
<a name="l04532"></a>04532     <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>
<a name="l04533"></a>04533     || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>,
<a name="l04534"></a>04534                     gfilter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>) != 0)
<a name="l04535"></a>04535     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-map %s export%s&quot;</span>, addr,
<a name="l04536"></a>04536         filter-&gt;<a class="code" href="structbgp__filter.html#a785085014262ebd9ebb11f8bf5e0e21a">map</a>[<a class="code" href="bgpd_8h.html#a7ddc6f152a73272a1f6b2d55746d002a">RMAP_EXPORT</a>].<a class="code" href="structroute__map.html#aab1f24e4c71014a5f78afe3d80ee7d40">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04537"></a>04537 
<a name="l04538"></a>04538   <span class="comment">/* unsuppress-map */</span>
<a name="l04539"></a>04539   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a> &amp;&amp; ! gfilter)
<a name="l04540"></a>04540     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s unsuppress-map %s%s&quot;</span>, addr,
<a name="l04541"></a>04541          filter-&gt;<a class="code" href="structbgp__filter.html#a6862728a994cf295dfa8cf6311dc8427">usmap</a>.<a class="code" href="structbgp__filter.html#a983e08ddde678af08d486e01e911eb89">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04542"></a>04542 
<a name="l04543"></a>04543   <span class="comment">/* filter-list. */</span>
<a name="l04544"></a>04544   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>)
<a name="l04545"></a>04545     <span class="keywordflow">if</span> (! gfilter || ! gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>
<a name="l04546"></a>04546     || strcmp (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, gfilter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>) != 0)
<a name="l04547"></a>04547       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s filter-list %s in%s&quot;</span>, addr, 
<a name="l04548"></a>04548            filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[in].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04549"></a>04549   <span class="keywordflow">if</span> (filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a> &amp;&amp; ! gfilter)
<a name="l04550"></a>04550     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s filter-list %s out%s&quot;</span>, addr, 
<a name="l04551"></a>04551          filter-&gt;<a class="code" href="structbgp__filter.html#ae15b8a46445bc18e15dedda4e4714f39">aslist</a>[out].<a class="code" href="structas__list.html#a1b00f11392ae20c42c6b5f6c145e9db4">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04552"></a>04552 }
<a name="l04553"></a>04553 
<a name="l04554"></a>04554 <span class="comment">/* BGP peer configuration display function. */</span>
<a name="l04555"></a>04555 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l04556"></a><a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">04556</a> <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>,
<a name="l04557"></a>04557                <span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04558"></a>04558 {
<a name="l04559"></a>04559   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l04560"></a>04560   <span class="keyword">struct </span>peer *g_peer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l04561"></a>04561   <span class="keywordtype">char</span> buf[<a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>];
<a name="l04562"></a>04562   <span class="keywordtype">char</span> *addr;
<a name="l04563"></a>04563 
<a name="l04564"></a>04564   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l04565"></a>04565   addr = peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>;
<a name="l04566"></a>04566   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l04567"></a>04567     g_peer = peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>;
<a name="l04568"></a>04568 
<a name="l04569"></a>04569   <span class="comment">/************************************</span>
<a name="l04570"></a>04570 <span class="comment">   ****** Global to the neighbor ******</span>
<a name="l04571"></a>04571 <span class="comment">   ************************************/</span>
<a name="l04572"></a>04572   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l04573"></a>04573     {
<a name="l04574"></a>04574       <span class="comment">/* remote-as. */</span>
<a name="l04575"></a>04575       <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l04576"></a>04576     {
<a name="l04577"></a>04577       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#af3313c9e7a5b086f04fac1d8b4832b32">PEER_STATUS_GROUP</a>))
<a name="l04578"></a>04578         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group%s&quot;</span>, addr,
<a name="l04579"></a>04579              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04580"></a>04580       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l04581"></a>04581         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remote-as %u%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>,
<a name="l04582"></a>04582              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04583"></a>04583     }
<a name="l04584"></a>04584       <span class="keywordflow">else</span>
<a name="l04585"></a>04585     {
<a name="l04586"></a>04586       <span class="keywordflow">if</span> (! g_peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l04587"></a>04587         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remote-as %u%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>,
<a name="l04588"></a>04588              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04589"></a>04589       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l04590"></a>04590         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group %s%s&quot;</span>, addr,
<a name="l04591"></a>04591              peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04592"></a>04592     }
<a name="l04593"></a>04593 
<a name="l04594"></a>04594       <span class="comment">/* local-as. */</span>
<a name="l04595"></a>04595       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l04596"></a>04596     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l04597"></a>04597       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s local-as %u%s%s&quot;</span>, addr,
<a name="l04598"></a>04598            peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>,
<a name="l04599"></a>04599            <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aa3c7030de392ba4a8c79018101651a7f">PEER_FLAG_LOCAL_AS_NO_PREPEND</a>) ?
<a name="l04600"></a>04600            <span class="stringliteral">&quot; no-prepend&quot;</span> : <span class="stringliteral">&quot;&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04601"></a>04601 
<a name="l04602"></a>04602       <span class="comment">/* Description. */</span>
<a name="l04603"></a>04603       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>)
<a name="l04604"></a>04604     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s description %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a7ea26ad37ac9c04abb34bde4c3a42f0e">desc</a>,
<a name="l04605"></a>04605          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04606"></a>04606 
<a name="l04607"></a>04607       <span class="comment">/* Shutdown. */</span>
<a name="l04608"></a>04608       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
<a name="l04609"></a>04609         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04610"></a>04610         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#abeded936fd302062253377062392247d">PEER_FLAG_SHUTDOWN</a>))
<a name="l04611"></a>04611       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s shutdown%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04612"></a>04612 
<a name="l04613"></a>04613       <span class="comment">/* Password. */</span>
<a name="l04614"></a>04614       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>)
<a name="l04615"></a>04615     <span class="keywordflow">if</span> (!<a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
<a name="l04616"></a>04616         || ! g_peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>
<a name="l04617"></a>04617         || strcmp (peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>, g_peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>) != 0)
<a name="l04618"></a>04618       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s password %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a0c4dbb0d1d1e4fef09eac66d9dc04eb1">password</a>,
<a name="l04619"></a>04619            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04620"></a>04620 
<a name="l04621"></a>04621       <span class="comment">/* BGP port. */</span>
<a name="l04622"></a>04622       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a> != <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>)
<a name="l04623"></a>04623     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s port %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a8f97f35a3a7289e4935c11b9e040a1da">port</a>,
<a name="l04624"></a>04624          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04625"></a>04625 
<a name="l04626"></a>04626       <span class="comment">/* Local interface name. */</span>
<a name="l04627"></a>04627       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
<a name="l04628"></a>04628     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s interface %s%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>,
<a name="l04629"></a>04629          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04630"></a>04630   
<a name="l04631"></a>04631       <span class="comment">/* Passive. */</span>
<a name="l04632"></a>04632       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>))
<a name="l04633"></a>04633         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04634"></a>04634         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ac43c8c6cc3aa168070d51ef4e899c6fb">PEER_FLAG_PASSIVE</a>))
<a name="l04635"></a>04635       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s passive%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04636"></a>04636 
<a name="l04637"></a>04637       <span class="comment">/* EBGP multihop.  */</span>
<a name="l04638"></a>04638       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) != <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
<a name="l04639"></a>04639         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04640"></a>04640         g_peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>)
<a name="l04641"></a>04641       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s ebgp-multihop %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a>,
<a name="l04642"></a>04642            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04643"></a>04643 
<a name="l04644"></a>04644       <span class="comment">/* disable-connected-check.  */</span>
<a name="l04645"></a>04645       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
<a name="l04646"></a>04646     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04647"></a>04647         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
<a name="l04648"></a>04648       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s disable-connected-check%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04649"></a>04649 
<a name="l04650"></a>04650       <span class="comment">/* Update-source. */</span>
<a name="l04651"></a>04651       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>)
<a name="l04652"></a>04652     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) || ! g_peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>
<a name="l04653"></a>04653         || strcmp (g_peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>) != 0)
<a name="l04654"></a>04654       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s update-source %s%s&quot;</span>, addr,
<a name="l04655"></a>04655            peer-&gt;<a class="code" href="structpeer.html#a463b759b39fa27a412c65ea616c43054">update_if</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04656"></a>04656       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>)
<a name="l04657"></a>04657     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) || ! g_peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>
<a name="l04658"></a>04658         || <a class="code" href="sockunion_8c.html#ac407b73abeade79f1a85355fde19b294">sockunion_cmp</a> (g_peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>,
<a name="l04659"></a>04659                   peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>) != 0)
<a name="l04660"></a>04660       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s update-source %s%s&quot;</span>, addr,
<a name="l04661"></a>04661            <a class="code" href="sockunion_8c.html#a93759e01ddbd86605e1716a5c5b27a9e">sockunion2str</a> (peer-&gt;<a class="code" href="structpeer.html#ac4a075e2026efa3b292177829104fda8">update_source</a>, buf, <a class="code" href="sockunion_8h.html#acdf2761ecf6723841896a77e9059e810">SU_ADDRSTRLEN</a>),
<a name="l04662"></a>04662            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04663"></a>04663 
<a name="l04664"></a>04664       <span class="comment">/* advertisement-interval */</span>
<a name="l04665"></a>04665       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#af125085a49c6ac0fbc019ad25d7528c5">PEER_CONFIG_ROUTEADV</a>))
<a name="l04666"></a>04666     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s advertisement-interval %d%s&quot;</span>,
<a name="l04667"></a>04667          addr, peer-&gt;<a class="code" href="structpeer.html#a458c8875d94b9a7f90a7c4a827c8e4fb">v_routeadv</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>); 
<a name="l04668"></a>04668 
<a name="l04669"></a>04669       <span class="comment">/* timers. */</span>
<a name="l04670"></a>04670       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>)
<a name="l04671"></a>04671       &amp;&amp; ! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l04672"></a>04672       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s timers %d %d%s&quot;</span>, addr, 
<a name="l04673"></a>04673       peer-&gt;<a class="code" href="structpeer.html#a26d22938043d49420b6c9753c7c1eb2b">keepalive</a>, peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04674"></a>04674 
<a name="l04675"></a>04675       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#abcb2523c04caddc7794ece86bc5bc4e2">PEER_CONFIG_CONNECT</a>))
<a name="l04676"></a>04676       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s timers connect %d%s&quot;</span>, addr, 
<a name="l04677"></a>04677       peer-&gt;<a class="code" href="structpeer.html#a914a090d97c964785aae224189ee9037">connect</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04678"></a>04678 
<a name="l04679"></a>04679       <span class="comment">/* Default weight. */</span>
<a name="l04680"></a>04680       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a701454b4a6a6480670ad841f459fd3f4">PEER_CONFIG_WEIGHT</a>))
<a name="l04681"></a>04681         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04682"></a>04682         g_peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a> != peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>)
<a name="l04683"></a>04683       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s weight %d%s&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#a5ea7f188c91db8c725332db353677b02">weight</a>,
<a name="l04684"></a>04684            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04685"></a>04685 
<a name="l04686"></a>04686       <span class="comment">/* Dynamic capability.  */</span>
<a name="l04687"></a>04687       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
<a name="l04688"></a>04688         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04689"></a>04689         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
<a name="l04690"></a>04690     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s capability dynamic%s&quot;</span>, addr,
<a name="l04691"></a>04691          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04692"></a>04692 
<a name="l04693"></a>04693       <span class="comment">/* dont capability negotiation. */</span>
<a name="l04694"></a>04694       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
<a name="l04695"></a>04695         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04696"></a>04696         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
<a name="l04697"></a>04697     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s dont-capability-negotiate%s&quot;</span>, addr,
<a name="l04698"></a>04698          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04699"></a>04699 
<a name="l04700"></a>04700       <span class="comment">/* override capability negotiation. */</span>
<a name="l04701"></a>04701       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l04702"></a>04702         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04703"></a>04703         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l04704"></a>04704     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s override-capability%s&quot;</span>, addr,
<a name="l04705"></a>04705          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04706"></a>04706 
<a name="l04707"></a>04707       <span class="comment">/* strict capability negotiation. */</span>
<a name="l04708"></a>04708       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
<a name="l04709"></a>04709         <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer) ||
<a name="l04710"></a>04710         ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
<a name="l04711"></a>04711     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s strict-capability-match%s&quot;</span>, addr,
<a name="l04712"></a>04712          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04713"></a>04713 
<a name="l04714"></a>04714       <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer))
<a name="l04715"></a>04715     {
<a name="l04716"></a>04716       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
<a name="l04717"></a>04717         {
<a name="l04718"></a>04718           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l04719"></a>04719         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04720"></a>04720         }
<a name="l04721"></a>04721           <span class="keywordflow">else</span>
<a name="l04722"></a>04722         {
<a name="l04723"></a>04723           <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l04724"></a>04724         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04725"></a>04725         }
<a name="l04726"></a>04726     }
<a name="l04727"></a>04727     }
<a name="l04728"></a>04728 
<a name="l04729"></a>04729 
<a name="l04730"></a>04730   <span class="comment">/************************************</span>
<a name="l04731"></a>04731 <span class="comment">   ****** Per AF to the neighbor ******</span>
<a name="l04732"></a>04732 <span class="comment">   ************************************/</span>
<a name="l04733"></a>04733 
<a name="l04734"></a>04734   <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
<a name="l04735"></a>04735     {
<a name="l04736"></a>04736       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04737"></a>04737     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s peer-group %s%s&quot;</span>, addr,
<a name="l04738"></a>04738          peer-&gt;<a class="code" href="structpeer.html#ad0971faeae0a4cd91222b60a7629a686">group</a>-&gt;<a class="code" href="structpeer__group.html#a20e28034bf9e58de7f7fb489783b6a25">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04739"></a>04739       <span class="keywordflow">else</span>
<a name="l04740"></a>04740     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s activate%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04741"></a>04741     }
<a name="l04742"></a>04742 
<a name="l04743"></a>04743   <span class="comment">/* ORF capability.  */</span>
<a name="l04744"></a>04744   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l04745"></a>04745       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
<a name="l04746"></a>04746     <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04747"></a>04747     {
<a name="l04748"></a>04748       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s capability orf prefix-list&quot;</span>, addr);
<a name="l04749"></a>04749 
<a name="l04750"></a>04750       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
<a name="l04751"></a>04751       &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
<a name="l04752"></a>04752     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; both&quot;</span>);
<a name="l04753"></a>04753       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>))
<a name="l04754"></a>04754     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; send&quot;</span>);
<a name="l04755"></a>04755       <span class="keywordflow">else</span>
<a name="l04756"></a>04756     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; receive&quot;</span>);
<a name="l04757"></a>04757       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04758"></a>04758     }
<a name="l04759"></a>04759 
<a name="l04760"></a>04760   <span class="comment">/* Route reflector client. */</span>
<a name="l04761"></a>04761   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#adcd3e1187c28159f105bebf2396f68eb">PEER_FLAG_REFLECTOR_CLIENT</a>)
<a name="l04762"></a>04762       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04763"></a>04763     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-reflector-client%s&quot;</span>, addr, 
<a name="l04764"></a>04764          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04765"></a>04765 
<a name="l04766"></a>04766   <span class="comment">/* Nexthop self. */</span>
<a name="l04767"></a>04767   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a81ac724618a5428b3af519e296c0263e">PEER_FLAG_NEXTHOP_SELF</a>)
<a name="l04768"></a>04768       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04769"></a>04769     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s next-hop-self%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04770"></a>04770 
<a name="l04771"></a>04771   <span class="comment">/* Remove private AS. */</span>
<a name="l04772"></a>04772   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#abfb7cc1972f3f0fb238d216edc9cd7cc">PEER_FLAG_REMOVE_PRIVATE_AS</a>)
<a name="l04773"></a>04773       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04774"></a>04774     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s remove-private-AS%s&quot;</span>,
<a name="l04775"></a>04775          addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04776"></a>04776 
<a name="l04777"></a>04777   <span class="comment">/* send-community print. */</span>
<a name="l04778"></a>04778   <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04779"></a>04779     {
<a name="l04780"></a>04780       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l04781"></a>04781     {
<a name="l04782"></a>04782       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>)
<a name="l04783"></a>04783           &amp;&amp; <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
<a name="l04784"></a>04784         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community both%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04785"></a>04785       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))  
<a name="l04786"></a>04786         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community extended%s&quot;</span>,
<a name="l04787"></a>04787              addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04788"></a>04788       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>))
<a name="l04789"></a>04789         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s send-community%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04790"></a>04790     }
<a name="l04791"></a>04791       <span class="keywordflow">else</span>
<a name="l04792"></a>04792     {
<a name="l04793"></a>04793       <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>)
<a name="l04794"></a>04794           &amp;&amp; ! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
<a name="l04795"></a>04795         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community both%s&quot;</span>,
<a name="l04796"></a>04796              addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04797"></a>04797       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>))
<a name="l04798"></a>04798         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community extended%s&quot;</span>,
<a name="l04799"></a>04799              addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04800"></a>04800       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>))
<a name="l04801"></a>04801         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no neighbor %s send-community%s&quot;</span>,
<a name="l04802"></a>04802              addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04803"></a>04803     }
<a name="l04804"></a>04804     }
<a name="l04805"></a>04805 
<a name="l04806"></a>04806   <span class="comment">/* Default information */</span>
<a name="l04807"></a>04807   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#a4cca3b44134d7e6dcc82ef798bfc0f78">PEER_FLAG_DEFAULT_ORIGINATE</a>)
<a name="l04808"></a>04808       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04809"></a>04809     {
<a name="l04810"></a>04810       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s default-originate&quot;</span>, addr);
<a name="l04811"></a>04811       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>)
<a name="l04812"></a>04812     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route-map %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#adaa47d231b6aae95157727ddbb836886">default_rmap</a>[afi][safi].<a class="code" href="structpeer.html#a72e35e12b6a073cd627df5e012038c16">name</a>);
<a name="l04813"></a>04813       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04814"></a>04814     }
<a name="l04815"></a>04815 
<a name="l04816"></a>04816   <span class="comment">/* Soft reconfiguration inbound. */</span>
<a name="l04817"></a>04817   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
<a name="l04818"></a>04818     <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi] ||
<a name="l04819"></a>04819     ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aeb7f2d381386a92f2fb115c6e0b81dba">PEER_FLAG_SOFT_RECONFIG</a>))
<a name="l04820"></a>04820     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s soft-reconfiguration inbound%s&quot;</span>, addr,
<a name="l04821"></a>04821          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04822"></a>04822 
<a name="l04823"></a>04823   <span class="comment">/* maximum-prefix. */</span>
<a name="l04824"></a>04824   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a710895028dd35954651499aabaaadd8f">PEER_FLAG_MAX_PREFIX</a>))
<a name="l04825"></a>04825     <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi]
<a name="l04826"></a>04826     || g_peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi] != peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]
<a name="l04827"></a>04827         || g_peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] != peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi]
<a name="l04828"></a>04828     || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (g_peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>)
<a name="l04829"></a>04829        != <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
<a name="l04830"></a>04830       {
<a name="l04831"></a>04831     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s maximum-prefix %ld&quot;</span>, addr, peer-&gt;<a class="code" href="structpeer.html#ac8db3cf3b014af5c13a5fdd81aa308dc">pmax</a>[afi][safi]);
<a name="l04832"></a>04832     <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi] != <a class="code" href="bgpd_8h.html#a32738fb2ebfaa1fd4c60766da947b643">MAXIMUM_PREFIX_THRESHOLD_DEFAULT</a>)
<a name="l04833"></a>04833       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a197807bc5b1ad8f1ab100bca6e8d5227">pmax_threshold</a>[afi][safi]);
<a name="l04834"></a>04834     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#accd30eb7914fa9da016163a7679278e2">PEER_FLAG_MAX_PREFIX_WARNING</a>))
<a name="l04835"></a>04835       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; warning-only&quot;</span>);
<a name="l04836"></a>04836     <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi])
<a name="l04837"></a>04837       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; restart %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a96573836a6d4f851ce15a2f8608e7298">pmax_restart</a>[afi][safi]);
<a name="l04838"></a>04838     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04839"></a>04839       }
<a name="l04840"></a>04840 
<a name="l04841"></a>04841   <span class="comment">/* Route server client. */</span>
<a name="l04842"></a>04842   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)
<a name="l04843"></a>04843       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04844"></a>04844     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s route-server-client%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04845"></a>04845 
<a name="l04846"></a>04846   <span class="comment">/* Allow AS in.  */</span>
<a name="l04847"></a>04847   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>))
<a name="l04848"></a>04848     <span class="keywordflow">if</span> (! <a class="code" href="bgpd_8c.html#a664405c638f4405f8a3612226c84e440">peer_group_active</a> (peer)
<a name="l04849"></a>04849     || ! <a class="code" href="bgpd_8c.html#ae5d6ff43d5cd2e0033f2e72e68017b56">peer_af_flag_check</a> (g_peer, afi, safi, <a class="code" href="bgpd_8h.html#aef58ec11f7ce9215308be29378b3fd03">PEER_FLAG_ALLOWAS_IN</a>)
<a name="l04850"></a>04850     || peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] != g_peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi])
<a name="l04851"></a>04851       {
<a name="l04852"></a>04852     <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi] == 3)
<a name="l04853"></a>04853       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s allowas-in%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04854"></a>04854     <span class="keywordflow">else</span>
<a name="l04855"></a>04855       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s allowas-in %d%s&quot;</span>, addr,
<a name="l04856"></a>04856            peer-&gt;<a class="code" href="structpeer.html#aa2a22da1a1352988f1d988e314631740">allowas_in</a>[afi][safi], <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04857"></a>04857       }
<a name="l04858"></a>04858 
<a name="l04859"></a>04859   <span class="comment">/* Filter. */</span>
<a name="l04860"></a>04860   <a class="code" href="bgpd_8c.html#a4bd09c948e7a109516a5a1988b9b3ac5">bgp_config_write_filter</a> (vty, peer, afi, safi);
<a name="l04861"></a>04861 
<a name="l04862"></a>04862   <span class="comment">/* atribute-unchanged. */</span>
<a name="l04863"></a>04863   <span class="keywordflow">if</span> ((<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
<a name="l04864"></a>04864       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)
<a name="l04865"></a>04865       || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>))
<a name="l04866"></a>04866       &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a57afa36cbb2850699eb231f7e3386b4c">af_group</a>[afi][safi])
<a name="l04867"></a>04867     {
<a name="l04868"></a>04868       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
<a name="l04869"></a>04869           &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)
<a name="l04870"></a>04870           &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>))
<a name="l04871"></a>04871     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s attribute-unchanged%s&quot;</span>, addr, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04872"></a>04872       <span class="keywordflow">else</span>
<a name="l04873"></a>04873     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; neighbor %s attribute-unchanged%s%s%s%s&quot;</span>, addr, 
<a name="l04874"></a>04874          (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)) ?
<a name="l04875"></a>04875          <span class="stringliteral">&quot; as-path&quot;</span> : <span class="stringliteral">&quot;&quot;</span>,
<a name="l04876"></a>04876          (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a6ee21078b7619d2d06901bf22519dea6">PEER_FLAG_NEXTHOP_UNCHANGED</a>)) ?
<a name="l04877"></a>04877          <span class="stringliteral">&quot; next-hop&quot;</span> : <span class="stringliteral">&quot;&quot;</span>,
<a name="l04878"></a>04878          (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a35bb3a5e8c5ab0d68bbd67dad90ea7c2">PEER_FLAG_MED_UNCHANGED</a>)) ?
<a name="l04879"></a>04879          <span class="stringliteral">&quot; med&quot;</span> : <span class="stringliteral">&quot;&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04880"></a>04880     }
<a name="l04881"></a>04881 }
<a name="l04882"></a>04882 
<a name="l04883"></a>04883 <span class="comment">/* Display &quot;address-family&quot; configuration header. */</span>
<a name="l04884"></a>04884 <span class="keywordtype">void</span>
<a name="l04885"></a><a class="code" href="bgpd_8h.html#a6f16a5bb3ae0167ae45d9f8b4d7d54a7">04885</a> <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l04886"></a>04886                 <span class="keywordtype">int</span> *write)
<a name="l04887"></a>04887 {
<a name="l04888"></a>04888   <span class="keywordflow">if</span> (*write)
<a name="l04889"></a>04889     <span class="keywordflow">return</span>;
<a name="l04890"></a>04890 
<a name="l04891"></a>04891   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l04892"></a>04892     <span class="keywordflow">return</span>;
<a name="l04893"></a>04893 
<a name="l04894"></a>04894   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;!%s address-family &quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04895"></a>04895 
<a name="l04896"></a>04896   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l04897"></a>04897     {
<a name="l04898"></a>04898       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l04899"></a>04899     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ipv4 multicast&quot;</span>);
<a name="l04900"></a>04900       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l04901"></a>04901     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;vpnv4 unicast&quot;</span>);
<a name="l04902"></a>04902     }
<a name="l04903"></a>04903   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l04904"></a>04904     {
<a name="l04905"></a>04905       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ipv6&quot;</span>);
<a name="l04906"></a>04906       
<a name="l04907"></a>04907       <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
<a name="l04908"></a>04908         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; multicast&quot;</span>);
<a name="l04909"></a>04909     }
<a name="l04910"></a>04910 
<a name="l04911"></a>04911   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04912"></a>04912 
<a name="l04913"></a>04913   *write = 1;
<a name="l04914"></a>04914 }
<a name="l04915"></a>04915 
<a name="l04916"></a>04916 <span class="comment">/* Address family based peer configuration display.  */</span>
<a name="l04917"></a>04917 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l04918"></a><a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">04918</a> <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi,
<a name="l04919"></a>04919              <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l04920"></a>04920 {
<a name="l04921"></a>04921   <span class="keywordtype">int</span> write = 0;
<a name="l04922"></a>04922   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l04923"></a>04923   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04924"></a>04924   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04925"></a>04925 
<a name="l04926"></a>04926   <a class="code" href="bgp__route_8h.html#aa38f753615df9694fa3f47fa11b3ebf2">bgp_config_write_network</a> (vty, bgp, afi, safi, &amp;write);
<a name="l04927"></a>04927 
<a name="l04928"></a>04928   <a class="code" href="bgp__zebra_8h.html#a96ac2f697ca6b677ded8f8ff40d7a047">bgp_config_write_redistribute</a> (vty, bgp, afi, safi, &amp;write);
<a name="l04929"></a>04929 
<a name="l04930"></a>04930   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l04931"></a>04931     {
<a name="l04932"></a>04932       <span class="keywordflow">if</span> (group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04933"></a>04933     {
<a name="l04934"></a>04934       <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, &amp;write);
<a name="l04935"></a>04935       <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, afi, safi);
<a name="l04936"></a>04936     }
<a name="l04937"></a>04937     }
<a name="l04938"></a>04938   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l04939"></a>04939     {
<a name="l04940"></a>04940       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l04941"></a>04941     {
<a name="l04942"></a>04942       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l04943"></a>04943         {
<a name="l04944"></a>04944           <a class="code" href="bgpd_8c.html#a098378a81a4b5f6332b23c06f6235c1e">bgp_config_write_family_header</a> (vty, afi, safi, &amp;write);
<a name="l04945"></a>04945           <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, peer, afi, safi);
<a name="l04946"></a>04946         }
<a name="l04947"></a>04947     }
<a name="l04948"></a>04948     }
<a name="l04949"></a>04949   <span class="keywordflow">if</span> (write)
<a name="l04950"></a>04950     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; exit-address-family%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04951"></a>04951 
<a name="l04952"></a>04952   <span class="keywordflow">return</span> write;
<a name="l04953"></a>04953 }
<a name="l04954"></a>04954 
<a name="l04955"></a>04955 <span class="keywordtype">int</span>
<a name="l04956"></a><a class="code" href="bgpd_8h.html#a585d4aa54c9dbe9d99b25481bfae95c5">04956</a> <a class="code" href="bgpd_8c.html#ac8c52692873e7d55916cc4c7f62d9292">bgp_config_write</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l04957"></a>04957 {
<a name="l04958"></a>04958   <span class="keywordtype">int</span> write = 0;
<a name="l04959"></a>04959   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l04960"></a>04960   <span class="keyword">struct </span><a class="code" href="structpeer__group.html">peer_group</a> *group;
<a name="l04961"></a>04961   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l04962"></a>04962   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l04963"></a>04963   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
<a name="l04964"></a>04964 
<a name="l04965"></a>04965   <span class="comment">/* BGP Multiple instance. */</span>
<a name="l04966"></a>04966   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
<a name="l04967"></a>04967     {    
<a name="l04968"></a>04968       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;bgp multiple-instance%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04969"></a>04969       write++;
<a name="l04970"></a>04970     }
<a name="l04971"></a>04971 
<a name="l04972"></a>04972   <span class="comment">/* BGP Config type. */</span>
<a name="l04973"></a>04973   <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l04974"></a>04974     {    
<a name="l04975"></a>04975       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;bgp config-type cisco%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04976"></a>04976       write++;
<a name="l04977"></a>04977     }
<a name="l04978"></a>04978 
<a name="l04979"></a>04979   <span class="comment">/* BGP configuration. */</span>
<a name="l04980"></a>04980   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
<a name="l04981"></a>04981     {
<a name="l04982"></a>04982       <span class="keywordflow">if</span> (write)
<a name="l04983"></a>04983     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;!%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04984"></a>04984 
<a name="l04985"></a>04985       <span class="comment">/* Router bgp ASN */</span>
<a name="l04986"></a>04986       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;router bgp %u&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>);
<a name="l04987"></a>04987 
<a name="l04988"></a>04988       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#a005127b9bd9fcf35fe09bda268b68205">BGP_OPT_MULTIPLE_INSTANCE</a>))
<a name="l04989"></a>04989     {
<a name="l04990"></a>04990       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
<a name="l04991"></a>04991         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; view %s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
<a name="l04992"></a>04992     }
<a name="l04993"></a>04993       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04994"></a>04994 
<a name="l04995"></a>04995       <span class="comment">/* No Synchronization */</span>
<a name="l04996"></a>04996       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l04997"></a>04997     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no synchronization%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l04998"></a>04998 
<a name="l04999"></a>04999       <span class="comment">/* BGP fast-external-failover. */</span>
<a name="l05000"></a>05000       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, <a class="code" href="bgpd_8h.html#a28ae0f957b1abc1140e12fda08edc322">BGP_FLAG_NO_FAST_EXT_FAILOVER</a>))
<a name="l05001"></a>05001     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp fast-external-failover%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>); 
<a name="l05002"></a>05002 
<a name="l05003"></a>05003       <span class="comment">/* BGP router ID. */</span>
<a name="l05004"></a>05004       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a22fc955dfed31d21a7220d5eb66c8fad">BGP_CONFIG_ROUTER_ID</a>))
<a name="l05005"></a>05005     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp router-id %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>), 
<a name="l05006"></a>05006          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05007"></a>05007 
<a name="l05008"></a>05008       <span class="comment">/* BGP log-neighbor-changes. */</span>
<a name="l05009"></a>05009       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a4871d191e1b11258fc7d58365a8de88b">BGP_FLAG_LOG_NEIGHBOR_CHANGES</a>))
<a name="l05010"></a>05010     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp log-neighbor-changes%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05011"></a>05011 
<a name="l05012"></a>05012       <span class="comment">/* BGP configuration. */</span>
<a name="l05013"></a>05013       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a89cb4c8d9453fb88c6360ea5f8dd7075">BGP_FLAG_ALWAYS_COMPARE_MED</a>))
<a name="l05014"></a>05014     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp always-compare-med%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05015"></a>05015 
<a name="l05016"></a>05016       <span class="comment">/* BGP default ipv4-unicast. */</span>
<a name="l05017"></a>05017       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#aac14fa64fc8737689076731aaaf2c88f">BGP_FLAG_NO_DEFAULT_IPV4</a>))
<a name="l05018"></a>05018     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp default ipv4-unicast%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05019"></a>05019 
<a name="l05020"></a>05020       <span class="comment">/* BGP default local-preference. */</span>
<a name="l05021"></a>05021       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a> != <a class="code" href="bgpd_8h.html#a2180acdde330071ff1483cbc74229206">BGP_DEFAULT_LOCAL_PREF</a>)
<a name="l05022"></a>05022     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp default local-preference %d%s&quot;</span>,
<a name="l05023"></a>05023          bgp-&gt;<a class="code" href="structbgp.html#a401cfb8180562498c071d48e0fe58c97">default_local_pref</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05024"></a>05024 
<a name="l05025"></a>05025       <span class="comment">/* BGP client-to-client reflection. */</span>
<a name="l05026"></a>05026       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ac0d32e044da2ef04e2cb924c60c9186c">BGP_FLAG_NO_CLIENT_TO_CLIENT</a>))
<a name="l05027"></a>05027     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no bgp client-to-client reflection%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05028"></a>05028       
<a name="l05029"></a>05029       <span class="comment">/* BGP cluster ID. */</span>
<a name="l05030"></a>05030       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>))
<a name="l05031"></a>05031     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp cluster-id %s%s&quot;</span>, inet_ntoa (bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>),
<a name="l05032"></a>05032          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05033"></a>05033 
<a name="l05034"></a>05034       <span class="comment">/* Confederation identifier*/</span>
<a name="l05035"></a>05035       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
<a name="l05036"></a>05036        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp confederation identifier %i%s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>,
<a name="l05037"></a>05037                 <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05038"></a>05038 
<a name="l05039"></a>05039       <span class="comment">/* Confederation peer */</span>
<a name="l05040"></a>05040       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a> &gt; 0)
<a name="l05041"></a>05041     {
<a name="l05042"></a>05042       <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l05043"></a>05043 
<a name="l05044"></a>05044       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp confederation peers&quot;</span>);
<a name="l05045"></a>05045 
<a name="l05046"></a>05046          <span class="keywordflow">for</span> (i = 0; i &lt; bgp-&gt;<a class="code" href="structbgp.html#afa9597ba0c8d127aa41c0bfaebaff972">confed_peers_cnt</a>; i++)
<a name="l05047"></a>05047            <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a>(vty, <span class="stringliteral">&quot; %u&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a6058befab4fce849ff482d52fdf47f2f">confed_peers</a>[i]);
<a name="l05048"></a>05048 
<a name="l05049"></a>05049           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05050"></a>05050     }
<a name="l05051"></a>05051 
<a name="l05052"></a>05052       <span class="comment">/* BGP enforce-first-as. */</span>
<a name="l05053"></a>05053       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abbc81a8ba88ca76497f8d2838ea81401">BGP_FLAG_ENFORCE_FIRST_AS</a>))
<a name="l05054"></a>05054     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp enforce-first-as%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05055"></a>05055 
<a name="l05056"></a>05056       <span class="comment">/* BGP deterministic-med. */</span>
<a name="l05057"></a>05057       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a872ba22b64e9118e8cda60c6d3c6d5c9">BGP_FLAG_DETERMINISTIC_MED</a>))
<a name="l05058"></a>05058     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp deterministic-med%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05059"></a>05059 
<a name="l05060"></a>05060       <span class="comment">/* BGP graceful-restart. */</span>
<a name="l05061"></a>05061       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a> != <a class="code" href="bgpd_8h.html#ac5c5ca169ac036d72c23ce18db6a327b">BGP_DEFAULT_STALEPATH_TIME</a>)
<a name="l05062"></a>05062     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp graceful-restart stalepath-time %d%s&quot;</span>,
<a name="l05063"></a>05063          bgp-&gt;<a class="code" href="structbgp.html#af3fceb1479812aeba233601365bf9fbd">stalepath_time</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05064"></a>05064       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a339c9ce07a9d3611d2c5f1c4279b58f8">BGP_FLAG_GRACEFUL_RESTART</a>))
<a name="l05065"></a>05065        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp graceful-restart%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05066"></a>05066 
<a name="l05067"></a>05067       <span class="comment">/* BGP bestpath method. */</span>
<a name="l05068"></a>05068       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a1c9218156b20a2a0641bdd096fed76c0">BGP_FLAG_ASPATH_IGNORE</a>))
<a name="l05069"></a>05069     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath as-path ignore%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05070"></a>05070       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a2daf5bdb7e1c87887b425c4f138d49f6">BGP_FLAG_ASPATH_CONFED</a>))
<a name="l05071"></a>05071     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath as-path confed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05072"></a>05072       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#ab508173624f08e35b426cb4f97af55f7">BGP_FLAG_COMPARE_ROUTER_ID</a>))
<a name="l05073"></a>05073     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath compare-routerid%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05074"></a>05074       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abdc54bbffd7bff820138d5e671e70efa">BGP_FLAG_MED_CONFED</a>)
<a name="l05075"></a>05075       || <a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#af7ddec77890c22a31bb91af392832b15">BGP_FLAG_MED_MISSING_AS_WORST</a>))
<a name="l05076"></a>05076     {
<a name="l05077"></a>05077       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp bestpath med&quot;</span>);
<a name="l05078"></a>05078       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#abdc54bbffd7bff820138d5e671e70efa">BGP_FLAG_MED_CONFED</a>))
<a name="l05079"></a>05079         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; confed&quot;</span>);
<a name="l05080"></a>05080       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#af7ddec77890c22a31bb91af392832b15">BGP_FLAG_MED_MISSING_AS_WORST</a>))
<a name="l05081"></a>05081         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; missing-as-worst&quot;</span>);
<a name="l05082"></a>05082       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05083"></a>05083     }
<a name="l05084"></a>05084 
<a name="l05085"></a>05085       <span class="comment">/* BGP network import check. */</span>
<a name="l05086"></a>05086       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (bgp, <a class="code" href="bgpd_8h.html#a6bc6dc724e29fd024f008b87f02e4b54">BGP_FLAG_IMPORT_CHECK</a>))
<a name="l05087"></a>05087     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp network import-check%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05088"></a>05088 
<a name="l05089"></a>05089       <span class="comment">/* BGP scan interval. */</span>
<a name="l05090"></a>05090       <a class="code" href="bgp__nexthop_8c.html#abe56d4b0257e33694939ac6dd6ea41c9">bgp_config_write_scan_time</a> (vty);
<a name="l05091"></a>05091 
<a name="l05092"></a>05092       <span class="comment">/* BGP flag dampening. */</span>
<a name="l05093"></a>05093       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>],
<a name="l05094"></a>05094       <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>))
<a name="l05095"></a>05095     <a class="code" href="bgp__damp_8c.html#a2d5528f427dd64bddefa520e998f085e">bgp_config_write_damp</a> (vty);
<a name="l05096"></a>05096 
<a name="l05097"></a>05097       <span class="comment">/* BGP static route configuration. */</span>
<a name="l05098"></a>05098       <a class="code" href="bgp__route_8h.html#aa38f753615df9694fa3f47fa11b3ebf2">bgp_config_write_network</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, &amp;write);
<a name="l05099"></a>05099 
<a name="l05100"></a>05100       <span class="comment">/* BGP redistribute configuration. */</span>
<a name="l05101"></a>05101       <a class="code" href="bgp__zebra_8h.html#a96ac2f697ca6b677ded8f8ff40d7a047">bgp_config_write_redistribute</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST, &amp;write);
<a name="l05102"></a>05102 
<a name="l05103"></a>05103       <span class="comment">/* BGP timers configuration. */</span>
<a name="l05104"></a>05104       <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a> != <a class="code" href="bgpd_8h.html#a2228405181db68f3410cfd001ecec5d7">BGP_DEFAULT_KEEPALIVE</a>
<a name="l05105"></a>05105       &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a> != <a class="code" href="bgpd_8h.html#a0f684b79153a2b083b2ee52b76b4fdaf">BGP_DEFAULT_HOLDTIME</a>)
<a name="l05106"></a>05106     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timers bgp %d %d%s&quot;</span>, bgp-&gt;<a class="code" href="structbgp.html#a2cb2d8c22ae72be52eae0b4f2e193fcb">default_keepalive</a>, 
<a name="l05107"></a>05107          bgp-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05108"></a>05108 
<a name="l05109"></a>05109       <span class="comment">/* peer-group */</span>
<a name="l05110"></a>05110       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#acd1f7a41a28ad719e127cbf0f917110a">group</a>, node, nnode, group))
<a name="l05111"></a>05111     {
<a name="l05112"></a>05112       <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, group-&gt;<a class="code" href="structpeer__group.html#a2cc68fffcac06f7d6c26ed208cb33768">conf</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l05113"></a>05113     }
<a name="l05114"></a>05114 
<a name="l05115"></a>05115       <span class="comment">/* Normal neighbor configuration. */</span>
<a name="l05116"></a>05116       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l05117"></a>05117     {
<a name="l05118"></a>05118       <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l05119"></a>05119         <a class="code" href="bgpd_8c.html#a73fa98f3d449ef7778969242d71a15da">bgp_config_write_peer</a> (vty, bgp, peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l05120"></a>05120     }
<a name="l05121"></a>05121 
<a name="l05122"></a>05122       <span class="comment">/* Distance configuration. */</span>
<a name="l05123"></a>05123       <a class="code" href="bgp__route_8h.html#ac7a2375c41537180015d8dd33798155e">bgp_config_write_distance</a> (vty, bgp);
<a name="l05124"></a>05124       
<a name="l05125"></a>05125       <span class="comment">/* No auto-summary */</span>
<a name="l05126"></a>05126       <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a5d65834a27b3de6bc2af63094ebf76f1">bgp_option_check</a> (<a class="code" href="bgpd_8h.html#abbf27ddbe62b536d50539f0e69b00a4a">BGP_OPT_CONFIG_CISCO</a>))
<a name="l05127"></a>05127     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no auto-summary%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l05128"></a>05128 
<a name="l05129"></a>05129       <span class="comment">/* IPv4 multicast configuration.  */</span>
<a name="l05130"></a>05130       write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l05131"></a>05131 
<a name="l05132"></a>05132       <span class="comment">/* IPv4 VPN configuration.  */</span>
<a name="l05133"></a>05133       write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>);
<a name="l05134"></a>05134 
<a name="l05135"></a>05135       <span class="comment">/* IPv6 unicast configuration.  */</span>
<a name="l05136"></a>05136       write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l05137"></a>05137 
<a name="l05138"></a>05138       <span class="comment">/* IPv6 multicast configuration.  */</span>
<a name="l05139"></a>05139       write += <a class="code" href="bgpd_8c.html#a29c35569e369504bd070a4f212705e24">bgp_config_write_family</a> (vty, bgp, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);
<a name="l05140"></a>05140 
<a name="l05141"></a>05141       write++;
<a name="l05142"></a>05142     }
<a name="l05143"></a>05143   <span class="keywordflow">return</span> write;
<a name="l05144"></a>05144 }
<a name="l05145"></a>05145 
<a name="l05146"></a>05146 <span class="keywordtype">void</span>
<a name="l05147"></a><a class="code" href="bgpd_8h.html#ae18826e3ba6a2d16c64726decaa1ab54">05147</a> <a class="code" href="bgpd_8c.html#ae18826e3ba6a2d16c64726decaa1ab54">bgp_master_init</a> (<span class="keywordtype">void</span>)
<a name="l05148"></a>05148 {
<a name="l05149"></a>05149   memset (&amp;<a class="code" href="structbgp__master.html">bgp_master</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__master.html">bgp_master</a>));
<a name="l05150"></a>05150 
<a name="l05151"></a>05151   bm = &amp;<a class="code" href="bgpd_8c.html#a65ecd7a9ec0c8f969263cd6aa0452d69">bgp_master</a>;
<a name="l05152"></a>05152   bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l05153"></a>05153   bm-&gt;<a class="code" href="structbgp__master.html#a60e757cc6f7fa531e9d15f919ebfded7">listen_sockets</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l05154"></a>05154   bm-&gt;<a class="code" href="structbgp__master.html#ad78fc56207b16cd34df39279ec2934b0">port</a> = <a class="code" href="bgpd_8h.html#a03775272cc78395ac6ae7b95099ee976">BGP_PORT_DEFAULT</a>;
<a name="l05155"></a>05155   bm-&gt;<a class="code" href="structbgp__master.html#ab61d7cb301c6e2ab39c31553e677e300">master</a> = <a class="code" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ();
<a name="l05156"></a>05156   bm-&gt;<a class="code" href="structbgp__master.html#a035d6d47723fa53d2d2587dc2495c8ad">start_time</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l05157"></a>05157 }
<a name="l05158"></a>05158 
<a name="l05159"></a>05159 
<a name="l05160"></a>05160 <span class="keywordtype">void</span>
<a name="l05161"></a><a class="code" href="bgpd_8h.html#aa084e07f4225e6b0938cce4ad4877404">05161</a> <a class="code" href="bgpd_8c.html#aa084e07f4225e6b0938cce4ad4877404">bgp_init</a> (<span class="keywordtype">void</span>)
<a name="l05162"></a>05162 {
<a name="l05163"></a>05163   <span class="comment">/* BGP VTY commands installation.  */</span>
<a name="l05164"></a>05164   <a class="code" href="bgp__vty_8c.html#a5c533727d78c550c2262ae3fec4eabbb">bgp_vty_init</a> ();
<a name="l05165"></a>05165 
<a name="l05166"></a>05166   <span class="comment">/* Init zebra. */</span>
<a name="l05167"></a>05167   <a class="code" href="bgp__zebra_8c.html#a9462cb6e82b6f043681e5c9048b97596">bgp_zebra_init</a> ();
<a name="l05168"></a>05168 
<a name="l05169"></a>05169   <span class="comment">/* BGP inits. */</span>
<a name="l05170"></a>05170   <a class="code" href="bgp__attr_8c.html#a9c65ea9c30a455a48fcc49820025780d">bgp_attr_init</a> ();
<a name="l05171"></a>05171   <a class="code" href="bgp__debug_8c.html#ae12ee2ca823782d8b3ecd119184fe4e2">bgp_debug_init</a> ();
<a name="l05172"></a>05172   <a class="code" href="bgp__dump_8c.html#afa613c770fb199232be285cb5061f765">bgp_dump_init</a> ();
<a name="l05173"></a>05173   <a class="code" href="bgp__route_8h.html#a1d94be4492850d1be9670012f7706620">bgp_route_init</a> ();
<a name="l05174"></a>05174   <a class="code" href="bgpd_8h.html#aa3569ed6d1d4fe9c81f9f241cc165868">bgp_route_map_init</a> ();
<a name="l05175"></a>05175   <a class="code" href="bgp__nexthop_8c.html#ada667668bb4d77f673ace223f4303a2c">bgp_scan_init</a> ();
<a name="l05176"></a>05176   <a class="code" href="bgp__mplsvpn_8c.html#a558459716ff86cc36a5b7fd546c2b906">bgp_mplsvpn_init</a> ();
<a name="l05177"></a>05177 
<a name="l05178"></a>05178   <span class="comment">/* Access list initialize. */</span>
<a name="l05179"></a>05179   <a class="code" href="filter_8c.html#a7794dbb70ed7bbd7a248853d572fa38c">access_list_init</a> ();
<a name="l05180"></a>05180   <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a>);
<a name="l05181"></a>05181   <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a5fd491f008f4e29fcc45ff0a7efe9cc3">peer_distribute_update</a>);
<a name="l05182"></a>05182 
<a name="l05183"></a>05183   <span class="comment">/* Filter list initialize. */</span>
<a name="l05184"></a>05184   <a class="code" href="bgp__filter_8c.html#aa381cd8105b8829db14067a8dd76a3c1">bgp_filter_init</a> ();
<a name="l05185"></a>05185   <a class="code" href="bgp__filter_8c.html#a58448428b2e82eb1e2a5b18f55459b52">as_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a>);
<a name="l05186"></a>05186   <a class="code" href="bgp__filter_8c.html#a09761ee784474110497978e29628c93e">as_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a68aea4e32e3959bd0e402595b0b902f8">peer_aslist_update</a>);
<a name="l05187"></a>05187 
<a name="l05188"></a>05188   <span class="comment">/* Prefix list initialize.*/</span>
<a name="l05189"></a>05189   <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ();
<a name="l05190"></a>05190   <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a>);
<a name="l05191"></a>05191   <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="bgpd_8c.html#a5ec286fdfa4fe804b0a87bce12923896">peer_prefix_list_update</a>);
<a name="l05192"></a>05192 
<a name="l05193"></a>05193   <span class="comment">/* Community list initialize. */</span>
<a name="l05194"></a>05194   bgp_clist = <a class="code" href="bgp__clist_8c.html#a3074741d6eaa97bdbc1d29e6ec9d18be">community_list_init</a> ();
<a name="l05195"></a>05195 
<a name="l05196"></a>05196 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l05197"></a>05197 <span class="preprocessor"></span>  <a class="code" href="bgp__snmp_8h.html#a2b0aa61b10ec69afde81e859ae5db196">bgp_snmp_init</a> ();
<a name="l05198"></a>05198 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l05199"></a>05199 }
<a name="l05200"></a>05200 
<a name="l05201"></a>05201 <span class="keywordtype">void</span>
<a name="l05202"></a><a class="code" href="bgpd_8h.html#a64275e98cbe004326cffb34d93bbdb32">05202</a> <a class="code" href="bgpd_8c.html#a64275e98cbe004326cffb34d93bbdb32">bgp_terminate</a> (<span class="keywordtype">void</span>)
<a name="l05203"></a>05203 {
<a name="l05204"></a>05204   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l05205"></a>05205   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l05206"></a>05206   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l05207"></a>05207   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode, *mnnode;
<a name="l05208"></a>05208 
<a name="l05209"></a>05209   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bm-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, mnnode, bgp))
<a name="l05210"></a>05210     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l05211"></a>05211       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l05212"></a>05212           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l05213"></a>05213                            <a class="code" href="bgpd_8h.html#a267560bcf2267908e5d51d22d6bac5b3">BGP_NOTIFY_CEASE_PEER_UNCONFIG</a>);
<a name="l05214"></a>05214   
<a name="l05215"></a>05215   <a class="code" href="bgp__route_8c.html#adf17dd6a8dfaa2ab4f271b491de030d0">bgp_cleanup_routes</a> ();
<a name="l05216"></a>05216   
<a name="l05217"></a>05217   <span class="keywordflow">if</span> (bm-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>)
<a name="l05218"></a>05218     {
<a name="l05219"></a>05219       <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (bm-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a>);
<a name="l05220"></a>05220       bm-&gt;<a class="code" href="structbgp__master.html#ae83b822ff500e553698ebb24c6940b5b">process_main_queue</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05221"></a>05221     }
<a name="l05222"></a>05222   <span class="keywordflow">if</span> (bm-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>)
<a name="l05223"></a>05223     {
<a name="l05224"></a>05224       <a class="code" href="workqueue_8c.html#a4e3dc7060c6ee963d3d202f4b9a7fe3d">work_queue_free</a> (bm-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a>);
<a name="l05225"></a>05225       bm-&gt;<a class="code" href="structbgp__master.html#a312c8497537347c02ac02b28efc0764b">process_rsclient_queue</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l05226"></a>05226     }
<a name="l05227"></a>05227 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgpd_8c.html">bgpd.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:04 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
