<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/sockopt.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sockopt_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/sockopt.h</div>  </div>
</div>
<div class="contents">
<a href="sockopt_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Router advertisement</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef _ZEBRA_SOCKOPT_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define _ZEBRA_SOCKOPT_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#abdfd124bd2b3b787be44b3e78e99bc37">setsockopt_so_recvbuf</a> (<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> size);
<a name="l00028"></a>00028 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#ad801e41fc584078bdc1fc1f5f5f08a10">setsockopt_so_sendbuf</a> (<span class="keyword">const</span> <span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> size);
<a name="l00029"></a>00029 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#aae8ed164606b3d56b05af0e09730a554">getsockopt_so_sendbuf</a> (<span class="keyword">const</span> <span class="keywordtype">int</span> sock);
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_pktinfo (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00033"></a>00033 <span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_checksum (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00034"></a>00034 <span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_multicast_hops (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00035"></a>00035 <span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_unicast_hops (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00036"></a>00036 <span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_hoplimit (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00037"></a>00037 <span class="keyword">extern</span> <span class="keywordtype">int</span> setsockopt_ipv6_multicast_loop (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00038"></a>00038 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">/*</span>
<a name="l00041"></a>00041 <span class="comment"> * It is OK to reference in6_pktinfo here without a protecting #if</span>
<a name="l00042"></a>00042 <span class="comment"> * because this macro will only be used #if HAVE_IPV6, and in6_pktinfo</span>
<a name="l00043"></a>00043 <span class="comment"> * is not optional for HAVE_IPV6.</span>
<a name="l00044"></a>00044 <span class="comment"> */</span>
<a name="l00045"></a><a class="code" href="sockopt_8h.html#ad5e5d466cbdc965ad825d7bb37f726c9">00045</a> <span class="preprocessor">#define SOPT_SIZE_CMSG_PKTINFO_IPV6() (sizeof (struct in6_pktinfo));</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="comment">/*</span>
<a name="l00048"></a>00048 <span class="comment"> * Size defines for control messages used to get ifindex.  We define</span>
<a name="l00049"></a>00049 <span class="comment"> * values for each method, and define a macro that can be used by code</span>
<a name="l00050"></a>00050 <span class="comment"> * that is unaware of which method is in use.</span>
<a name="l00051"></a>00051 <span class="comment"> * These values are without any alignment needed (see CMSG_SPACE in RFC3542).</span>
<a name="l00052"></a>00052 <span class="comment"> */</span>
<a name="l00053"></a>00053 <span class="preprocessor">#if defined (IP_PKTINFO)</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="comment">/* Linux in_pktinfo. */</span>
<a name="l00055"></a>00055 <span class="preprocessor">#define SOPT_SIZE_CMSG_PKTINFO_IPV4()  (CMSG_SPACE(sizeof (struct in_pktinfo)))</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="comment">/* XXX This should perhaps be defined even if IP_PKTINFO is not. */</span>
<a name="l00057"></a>00057 <span class="preprocessor">#define SOPT_SIZE_CMSG_PKTINFO(af) \</span>
<a name="l00058"></a>00058 <span class="preprocessor">  ((af == AF_INET) ? SOPT_SIZE_CMSG_PKTINFO_IPV4() \</span>
<a name="l00059"></a>00059 <span class="preprocessor">                   : SOPT_SIZE_CMSG_PKTINFO_IPV6()</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IP_PKTINFO */</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#if defined (IP_RECVIF)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="comment">/* BSD/Solaris */</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="preprocessor">#if defined (SUNOS_5)</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define SOPT_SIZE_CMSG_RECVIF_IPV4()  (sizeof (uint_t))</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#define SOPT_SIZE_CMSG_RECVIF_IPV4()    (sizeof (struct sockaddr_dl))</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#endif </span><span class="comment">/* IP_RECVIF */</span>
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">/* SOPT_SIZE_CMSG_IFINDEX_IPV4 - portable type */</span>
<a name="l00073"></a>00073 <span class="preprocessor">#if defined (SOPT_SIZE_CMSG_PKTINFO)</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define SOPT_SIZE_CMSG_IFINDEX_IPV4() SOPT_SIZE_CMSG_PKTINFO_IPV4()</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#elif defined (SOPT_SIZE_CMSG_RECVIF_IPV4)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#define SOPT_SIZE_CMSG_IFINDEX_IPV4() SOPT_SIZE_CMSG_RECVIF_IPV4()</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* Nothing available */</span>
<a name="l00078"></a><a class="code" href="sockopt_8h.html#a5fe60238cff328a2bce5bc5a627536f0">00078</a> <span class="preprocessor">#define SOPT_SIZE_CMSG_IFINDEX_IPV4() (sizeof (char *))</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* SOPT_SIZE_CMSG_IFINDEX_IPV4 */</span>
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="sockopt_8h.html#a008ff63a6d1028784c31cc1ea8bbd445">00081</a> <span class="preprocessor">#define SOPT_SIZE_CMSG_IFINDEX(af) \</span>
<a name="l00082"></a>00082 <span class="preprocessor">  (((af) == AF_INET) : SOPT_SIZE_CMSG_IFINDEX_IPV4() \</span>
<a name="l00083"></a>00083 <span class="preprocessor">                    ? SOPT_SIZE_CMSG_PKTINFO_IPV6())</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>
<a name="l00085"></a>00085 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#ad3ada4f32ebe26f0e333ba3bebb1cf93">setsockopt_multicast_ipv4</a>(<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> optname, 
<a name="l00086"></a>00086                          <span class="keyword">struct</span> in_addr if_addr
<a name="l00087"></a>00087                      <span class="comment">/* required: interface to join on */</span>,
<a name="l00088"></a>00088                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mcast_addr,
<a name="l00089"></a>00089                          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex
<a name="l00090"></a>00090                      <span class="comment">/* optional: if non-zero, may be used</span>
<a name="l00091"></a>00091 <span class="comment">                        instead of if_addr */</span>);
<a name="l00092"></a>00092 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#a3ea00b83444773c5162871266744a286">setsockopt_ipv4_tos</a>(<span class="keywordtype">int</span> sock, <span class="keywordtype">int</span> tos);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="comment">/* Ask for, and get, ifindex, by whatever method is supported. */</span>
<a name="l00095"></a>00095 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#a892470b0232aca4e68e88117d2cb46ed">setsockopt_ifindex</a> (<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00096"></a>00096 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#aeb37d822f7c9d56e9bcffc7b33b0ced0">getsockopt_ifindex</a> (<span class="keywordtype">int</span>, <span class="keyword">struct</span> msghdr *);
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="comment">/* swab the fields in iph between the host order and system order expected </span>
<a name="l00099"></a>00099 <span class="comment"> * for IP_HDRINCL.</span>
<a name="l00100"></a>00100 <span class="comment"> */</span>
<a name="l00101"></a>00101 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="sockopt_8c.html#a31566785c09a80dd77599ca722974574">sockopt_iphdrincl_swab_htosys</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph);
<a name="l00102"></a>00102 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="sockopt_8c.html#a8c237ab61f5040984e3ea04f9d9809b5">sockopt_iphdrincl_swab_systoh</a> (<span class="keyword">struct</span> <a class="code" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> *iph);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="sockopt_8c.html#a61376b017f29987327735e1f2ac60189">sockopt_tcp_signature</a>(<span class="keywordtype">int</span> sock, <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *su,
<a name="l00105"></a>00105                                  <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structpassword.html">password</a>);
<a name="l00106"></a>00106 <span class="preprocessor">#endif </span><span class="comment">/*_ZEBRA_SOCKOPT_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sockopt_8h.html">sockopt.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
