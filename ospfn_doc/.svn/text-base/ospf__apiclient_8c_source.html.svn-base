<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfclient/ospf_apiclient.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__apiclient_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfclient/ospf_apiclient.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__apiclient_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Client side of OSPF API.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2001, 2002, 2003 Ralph Keller</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> * </span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00009"></a>00009 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00010"></a>00010 <span class="comment"> * option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00019"></a>00019 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="version_8h.html">lib/version.h</a>&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="getopt_8h.html">getopt.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="vector_8h.html">vector.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="filter_8h.html">filter.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ospf__opaque_8h.html">ospfd/ospf_opaque.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__zebra_8h.html">ospfd/ospf_zebra.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__api_8h.html">ospfd/ospf_api.h</a>&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="ospf__apiclient_8h.html">ospf_apiclient.h</a>&quot;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* Backlog for listen */</span>
<a name="l00054"></a><a class="code" href="ospf__apiclient_8c.html#aeefbbafa97642defe3ee6c3080b7d66f">00054</a> <span class="preprocessor">#define BACKLOG 5</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00057"></a>00057 <span class="comment"> * Forward declarations</span>
<a name="l00058"></a>00058 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00059"></a>00059 <span class="comment"> */</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="keywordtype">void</span> <a class="code" href="ospf__apiclient_8c.html#a032f3d1ab14d5a30d5981ea3a8de61ee">ospf_apiclient_handle_reply</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00062"></a>00062                   <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>);
<a name="l00063"></a>00063 <span class="keywordtype">void</span> <a class="code" href="ospf__apiclient_8c.html#a56502aafe2ba6dd969bee3346bf889ce">ospf_apiclient_handle_update_notify</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00064"></a>00064                       <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>);
<a name="l00065"></a>00065 <span class="keywordtype">void</span> <a class="code" href="ospf__apiclient_8c.html#a060ed32e6e379cd4c192ac7c9f53cc06">ospf_apiclient_handle_delete_notify</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00066"></a>00066                       <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00069"></a>00069 <span class="comment"> * Initialization</span>
<a name="l00070"></a>00070 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00071"></a>00071 <span class="comment"> */</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>
<a name="l00074"></a><a class="code" href="ospf__apiclient_8c.html#ae36f3d411d144c8c401f7512350799d0">00074</a> <a class="code" href="ospf__apiclient_8c.html#ae36f3d411d144c8c401f7512350799d0">ospf_apiclient_getport</a> (<span class="keywordtype">void</span>)
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076   <span class="keyword">struct </span>servent *sp = getservbyname (<span class="stringliteral">&quot;ospfapi&quot;</span>, <span class="stringliteral">&quot;tcp&quot;</span>);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="keywordflow">return</span> sp ? ntohs (sp-&gt;s_port) : <a class="code" href="ospf__api_8h.html#ac581116f77fe662e02083f9d9424c1c0">OSPF_API_SYNC_PORT</a>;
<a name="l00079"></a>00079 }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00082"></a>00082 <span class="comment"> * Followings are functions for connection management</span>
<a name="l00083"></a>00083 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00084"></a>00084 <span class="comment"> */</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *
<a name="l00087"></a><a class="code" href="ospf__apiclient_8h.html#aca9f7a18d0d50ced1ce00f268fbfd1e3">00087</a> <a class="code" href="ospf__apiclient_8c.html#aca9f7a18d0d50ced1ce00f268fbfd1e3">ospf_apiclient_connect</a> (<span class="keywordtype">char</span> *<a class="code" href="structhost.html">host</a>, <span class="keywordtype">int</span> syncport)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089   <span class="keyword">struct </span>sockaddr_in myaddr_sync;
<a name="l00090"></a>00090   <span class="keyword">struct </span>sockaddr_in myaddr_async;
<a name="l00091"></a>00091   <span class="keyword">struct </span>sockaddr_in peeraddr;
<a name="l00092"></a>00092   <span class="keyword">struct </span>hostent *hp;
<a name="l00093"></a>00093   <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<span class="keyword">new</span>;
<a name="l00094"></a>00094   <span class="keywordtype">int</span> size = 0;
<a name="l00095"></a>00095   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> peeraddrlen;
<a name="l00096"></a>00096   <span class="keywordtype">int</span> async_server_sock;
<a name="l00097"></a>00097   <span class="keywordtype">int</span> fd1, fd2;
<a name="l00098"></a>00098   <span class="keywordtype">int</span> ret;
<a name="l00099"></a>00099   <span class="keywordtype">int</span> on = 1;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="comment">/* There are two connections between the client and the server.</span>
<a name="l00102"></a>00102 <span class="comment">     First the client opens a connection for synchronous requests/replies </span>
<a name="l00103"></a>00103 <span class="comment">     to the server. The server will accept this connection and</span>
<a name="l00104"></a>00104 <span class="comment">     as a reaction open a reverse connection channel for </span>
<a name="l00105"></a>00105 <span class="comment">     asynchronous messages. */</span>
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   async_server_sock = socket (AF_INET, SOCK_STREAM, 0);
<a name="l00108"></a>00108   <span class="keywordflow">if</span> (async_server_sock &lt; 0)
<a name="l00109"></a>00109     {
<a name="l00110"></a>00110       fprintf (stderr,
<a name="l00111"></a>00111            <span class="stringliteral">&quot;ospf_apiclient_connect: creating async socket failed\n&quot;</span>);
<a name="l00112"></a>00112       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">/* Prepare socket for asynchronous messages */</span>
<a name="l00116"></a>00116   <span class="comment">/* Initialize async address structure */</span>
<a name="l00117"></a>00117   memset (&amp;myaddr_async, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00118"></a>00118   myaddr_async.sin_family = AF_INET;
<a name="l00119"></a>00119   myaddr_async.sin_addr.s_addr = htonl (INADDR_ANY);
<a name="l00120"></a>00120   myaddr_async.sin_port = htons (syncport+1);
<a name="l00121"></a>00121   size = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00122"></a>00122 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>  myaddr_async.sin_len = size;
<a name="l00124"></a>00124 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* This is a server socket, reuse addr and port */</span>
<a name="l00127"></a>00127   ret = setsockopt (async_server_sock, SOL_SOCKET,
<a name="l00128"></a>00128             SO_REUSEADDR, (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: SO_REUSEADDR failed\n&quot;</span>);
<a name="l00132"></a>00132       close (async_server_sock);
<a name="l00133"></a>00133       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="preprocessor">#ifdef SO_REUSEPORT</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span>  ret = setsockopt (async_server_sock, SOL_SOCKET, SO_REUSEPORT,
<a name="l00138"></a>00138             (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00139"></a>00139   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00140"></a>00140     {
<a name="l00141"></a>00141       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: SO_REUSEPORT failed\n&quot;</span>);
<a name="l00142"></a>00142       close (async_server_sock);
<a name="l00143"></a>00143       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 <span class="preprocessor">#endif </span><span class="comment">/* SO_REUSEPORT */</span>
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">/* Bind socket to address structure */</span>
<a name="l00148"></a>00148   ret = bind (async_server_sock, (<span class="keyword">struct</span> sockaddr *) &amp;myaddr_async, size);
<a name="l00149"></a>00149   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00150"></a>00150     {
<a name="l00151"></a>00151       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: bind async socket failed\n&quot;</span>);
<a name="l00152"></a>00152       close (async_server_sock);
<a name="l00153"></a>00153       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">/* Wait for reverse channel connection establishment from server */</span>
<a name="l00157"></a>00157   ret = listen (async_server_sock, <a class="code" href="ospf__apiclient_8c.html#aeefbbafa97642defe3ee6c3080b7d66f">BACKLOG</a>);
<a name="l00158"></a>00158   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: listen: %s\n&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00161"></a>00161       close (async_server_sock);
<a name="l00162"></a>00162       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   <span class="comment">/* Make connection for synchronous requests and connect to server */</span>
<a name="l00166"></a>00166   <span class="comment">/* Resolve address of server */</span>
<a name="l00167"></a>00167   hp = gethostbyname (host);
<a name="l00168"></a>00168   <span class="keywordflow">if</span> (!hp)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: no such host %s\n&quot;</span>, host);
<a name="l00171"></a>00171       close (async_server_sock);
<a name="l00172"></a>00172       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175   fd1 = socket (AF_INET, SOCK_STREAM, 0);
<a name="l00176"></a>00176   <span class="keywordflow">if</span> (fd1 &lt; 0)
<a name="l00177"></a>00177     {
<a name="l00178"></a>00178       fprintf (stderr,
<a name="l00179"></a>00179            <span class="stringliteral">&quot;ospf_apiclient_connect: creating sync socket failed\n&quot;</span>);
<a name="l00180"></a>00180       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   <span class="comment">/* Reuse addr and port */</span>
<a name="l00185"></a>00185   ret = setsockopt (fd1, SOL_SOCKET,
<a name="l00186"></a>00186                     SO_REUSEADDR, (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00187"></a>00187   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00188"></a>00188     {
<a name="l00189"></a>00189       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: SO_REUSEADDR failed\n&quot;</span>);
<a name="l00190"></a>00190       close (fd1);
<a name="l00191"></a>00191       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00192"></a>00192     }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="preprocessor">#ifdef SO_REUSEPORT</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>  ret = setsockopt (fd1, SOL_SOCKET, SO_REUSEPORT,
<a name="l00196"></a>00196                     (<span class="keywordtype">void</span> *) &amp;on, <span class="keyword">sizeof</span> (on));
<a name="l00197"></a>00197   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: SO_REUSEPORT failed\n&quot;</span>);
<a name="l00200"></a>00200       close (fd1);
<a name="l00201"></a>00201       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203 <span class="preprocessor">#endif </span><span class="comment">/* SO_REUSEPORT */</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <span class="comment">/* Bind sync socket to address structure. This is needed since we</span>
<a name="l00207"></a>00207 <span class="comment">     want the sync port number on a fixed port number. The reverse</span>
<a name="l00208"></a>00208 <span class="comment">     async channel will be at this port+1 */</span>
<a name="l00209"></a>00209 
<a name="l00210"></a>00210   memset (&amp;myaddr_sync, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00211"></a>00211   myaddr_sync.sin_family = AF_INET;
<a name="l00212"></a>00212   myaddr_sync.sin_port = htons (syncport);
<a name="l00213"></a>00213 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span>  myaddr_sync.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00215"></a>00215 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   ret = bind (fd1, (<span class="keyword">struct</span> sockaddr *) &amp;myaddr_sync, size);
<a name="l00218"></a>00218   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00219"></a>00219     {
<a name="l00220"></a>00220       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: bind sync socket failed\n&quot;</span>);
<a name="l00221"></a>00221       close (fd1);
<a name="l00222"></a>00222       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">/* Prepare address structure for connect */</span>
<a name="l00226"></a>00226   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;myaddr_sync.sin_addr, hp-&gt;h_addr, hp-&gt;h_length);
<a name="l00227"></a>00227   myaddr_sync.sin_family = AF_INET;
<a name="l00228"></a>00228   myaddr_sync.sin_port = htons(<a class="code" href="ospf__apiclient_8c.html#ae36f3d411d144c8c401f7512350799d0">ospf_apiclient_getport</a> ());
<a name="l00229"></a>00229 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>  myaddr_sync.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00231"></a>00231 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="comment">/* Now establish synchronous channel with OSPF daemon */</span>
<a name="l00234"></a>00234   ret = connect (fd1, (<span class="keyword">struct</span> sockaddr *) &amp;myaddr_sync,
<a name="l00235"></a>00235          <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00236"></a>00236   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00237"></a>00237     {
<a name="l00238"></a>00238       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: sync connect failed\n&quot;</span>);
<a name="l00239"></a>00239       close (async_server_sock);
<a name="l00240"></a>00240       close (fd1);
<a name="l00241"></a>00241       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   <span class="comment">/* Accept reverse connection */</span>
<a name="l00245"></a>00245   peeraddrlen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l00246"></a>00246   memset (&amp;peeraddr, 0, peeraddrlen);
<a name="l00247"></a>00247 
<a name="l00248"></a>00248   fd2 =
<a name="l00249"></a>00249     accept (async_server_sock, (<span class="keyword">struct</span> sockaddr *) &amp;peeraddr, &amp;peeraddrlen);
<a name="l00250"></a>00250   <span class="keywordflow">if</span> (fd2 &lt; 0)
<a name="l00251"></a>00251     {
<a name="l00252"></a>00252       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_connect: accept async failed\n&quot;</span>);
<a name="l00253"></a>00253       close (async_server_sock);
<a name="l00254"></a>00254       close (fd1);
<a name="l00255"></a>00255       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258   <span class="comment">/* Server socket is not needed anymore since we are not accepting more </span>
<a name="l00259"></a>00259 <span class="comment">     connections */</span>
<a name="l00260"></a>00260   close (async_server_sock);
<a name="l00261"></a>00261 
<a name="l00262"></a>00262   <span class="comment">/* Create new client-side instance */</span>
<a name="l00263"></a>00263   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a>));
<a name="l00264"></a>00264 
<a name="l00265"></a>00265   <span class="comment">/* Initialize socket descriptors for sync and async channels */</span>
<a name="l00266"></a>00266   <span class="keyword">new</span>-&gt;fd_sync = fd1;
<a name="l00267"></a>00267   <span class="keyword">new</span>-&gt;fd_async = fd2;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="keywordtype">int</span>
<a name="l00273"></a><a class="code" href="ospf__apiclient_8h.html#a0eef974ec77db8ea8f14c3566738be52">00273</a> <a class="code" href="ospf__apiclient_8c.html#a0eef974ec77db8ea8f14c3566738be52">ospf_apiclient_close</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>)
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a27fc2127a336d978d79d1af1a2b53678">fd_sync</a> &gt;= 0)
<a name="l00277"></a>00277     {
<a name="l00278"></a>00278       close (oclient-&gt;<a class="code" href="structospf__apiclient.html#a27fc2127a336d978d79d1af1a2b53678">fd_sync</a>);
<a name="l00279"></a>00279     }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#ae3a5f4d039db64a899c30196b35ecfaa">fd_async</a> &gt;= 0)
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283       close (oclient-&gt;<a class="code" href="structospf__apiclient.html#ae3a5f4d039db64a899c30196b35ecfaa">fd_async</a>);
<a name="l00284"></a>00284     }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="comment">/* Free client structure */</span>
<a name="l00287"></a>00287   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, oclient);
<a name="l00288"></a>00288   <span class="keywordflow">return</span> 0;
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00292"></a>00292 <span class="comment"> * Followings are functions to send a request to OSPFd</span>
<a name="l00293"></a>00293 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00294"></a>00294 <span class="comment"> */</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 <span class="comment">/* Send synchronous request, wait for reply */</span>
<a name="l00297"></a>00297 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00298"></a><a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">00298</a> <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00299"></a>00299 {
<a name="l00300"></a>00300   u_int32_t reqseq;
<a name="l00301"></a>00301   <span class="keyword">struct </span><a class="code" href="structmsg__reply.html">msg_reply</a> *msgreply;
<a name="l00302"></a>00302   <span class="keywordtype">int</span> rc;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="comment">/* NB: Given &quot;msg&quot; is freed inside this function. */</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="comment">/* Remember the sequence number of the request */</span>
<a name="l00307"></a>00307   reqseq = ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>);
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="comment">/* Write message to OSPFd */</span>
<a name="l00310"></a>00310   rc = <a class="code" href="ospf__api_8h.html#af1b5579675baac54931e5fa78b98d02e">msg_write</a> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a27fc2127a336d978d79d1af1a2b53678">fd_sync</a>, msg);
<a name="l00311"></a>00311   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   <span class="keywordflow">if</span> (rc &lt; 0)
<a name="l00314"></a>00314     {
<a name="l00315"></a>00315       <span class="keywordflow">return</span> -1;
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317 
<a name="l00318"></a>00318   <span class="comment">/* Wait for reply */</span><span class="comment">/* NB: New &quot;msg&quot; is allocated by &quot;msg_read()&quot;. */</span>
<a name="l00319"></a>00319   msg = <a class="code" href="ospf__api_8h.html#ac1363ce9f59f760478f42991585ec26a">msg_read</a> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a27fc2127a336d978d79d1af1a2b53678">fd_sync</a>);
<a name="l00320"></a>00320   <span class="keywordflow">if</span> (!msg)
<a name="l00321"></a>00321     <span class="keywordflow">return</span> -1;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a> == <a class="code" href="ospf__api_8h.html#a42316d489e809e8faf0bf766fe7a1039">MSG_REPLY</a>);
<a name="l00324"></a>00324   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ntohl (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#ab33edf5f9a0ca13f4c5843ef0dd7f512">msgseq</a>) == reqseq);
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   msgreply = (<span class="keyword">struct </span><a class="code" href="structmsg__reply.html">msg_reply</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00327"></a>00327   rc = msgreply-&gt;<a class="code" href="structmsg__reply.html#a6de590104ab2ee9d2d23d73857a8c1c1">errcode</a>;
<a name="l00328"></a>00328   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="keywordflow">return</span> rc;
<a name="l00331"></a>00331 }
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00335"></a>00335 <span class="comment"> * Helper functions</span>
<a name="l00336"></a>00336 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00337"></a>00337 <span class="comment"> */</span>
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="keyword">static</span> u_int32_t
<a name="l00340"></a><a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">00340</a> <a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (<span class="keywordtype">void</span>)
<a name="l00341"></a>00341 {
<a name="l00342"></a>00342   <span class="keyword">static</span> u_int32_t seqnr = <a class="code" href="ospf__api_8h.html#a3c33787ea7d2d65def0a8caae717e715">MIN_SEQ</a>;
<a name="l00343"></a>00343   u_int32_t tmp;
<a name="l00344"></a>00344 
<a name="l00345"></a>00345   tmp = seqnr;
<a name="l00346"></a>00346   <span class="comment">/* Increment sequence number */</span>
<a name="l00347"></a>00347   <span class="keywordflow">if</span> (seqnr &lt; <a class="code" href="ospf__api_8h.html#ae22870a5cb59343e903a29d446eb3aac">MAX_SEQ</a>)
<a name="l00348"></a>00348     {
<a name="l00349"></a>00349       seqnr++;
<a name="l00350"></a>00350     }
<a name="l00351"></a>00351   <span class="keywordflow">else</span>
<a name="l00352"></a>00352     {
<a name="l00353"></a>00353       seqnr = <a class="code" href="ospf__api_8h.html#a3c33787ea7d2d65def0a8caae717e715">MIN_SEQ</a>;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355   <span class="keywordflow">return</span> tmp;
<a name="l00356"></a>00356 }
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00359"></a>00359 <span class="comment"> * API to access OSPF daemon by client applications.</span>
<a name="l00360"></a>00360 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00361"></a>00361 <span class="comment"> */</span>
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 <span class="comment">/*</span>
<a name="l00364"></a>00364 <span class="comment"> * Synchronous request to register opaque type.</span>
<a name="l00365"></a>00365 <span class="comment"> */</span>
<a name="l00366"></a>00366 <span class="keywordtype">int</span>
<a name="l00367"></a><a class="code" href="ospf__apiclient_8h.html#ae2fcff7735923604b2fe6650d6bca119">00367</a> <a class="code" href="ospf__apiclient_8c.html#aa095649109dd104d2c652c18ceae8cc9">ospf_apiclient_register_opaque_type</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="spgrid_8c.html#a6dd5c44547ae6870b695e43bc05c9a24">cl</a>,
<a name="l00368"></a>00368                      u_char ltype, u_char otype)
<a name="l00369"></a>00369 {
<a name="l00370"></a>00370   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00371"></a>00371   <span class="keywordtype">int</span> rc;
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <span class="comment">/* just put 1 as a sequence number. */</span>
<a name="l00374"></a>00374   msg = <a class="code" href="ospf__api_8h.html#af55da8db27db315b6fe34227a04d0cb8">new_msg_register_opaque_type</a> (<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (),
<a name="l00375"></a>00375                       ltype, otype);
<a name="l00376"></a>00376   <span class="keywordflow">if</span> (!msg)
<a name="l00377"></a>00377     {
<a name="l00378"></a>00378       fprintf (stderr, <span class="stringliteral">&quot;new_msg_register_opaque_type failed\n&quot;</span>);
<a name="l00379"></a>00379       <span class="keywordflow">return</span> -1;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382   rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (cl, msg);
<a name="l00383"></a>00383   <span class="keywordflow">return</span> rc;
<a name="l00384"></a>00384 }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 <span class="comment">/* </span>
<a name="l00387"></a>00387 <span class="comment"> * Synchronous request to synchronize with OSPF&#39;s LSDB.</span>
<a name="l00388"></a>00388 <span class="comment"> * Two steps required: register_event in order to get</span>
<a name="l00389"></a>00389 <span class="comment"> * dynamic updates and LSDB_Sync.</span>
<a name="l00390"></a>00390 <span class="comment"> */</span>
<a name="l00391"></a>00391 <span class="keywordtype">int</span>
<a name="l00392"></a><a class="code" href="ospf__apiclient_8h.html#a30571f833f72d7e4c05021d0821477ea">00392</a> <a class="code" href="ospf__apiclient_8c.html#a30571f833f72d7e4c05021d0821477ea">ospf_apiclient_sync_lsdb</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>)
<a name="l00393"></a>00393 {
<a name="l00394"></a>00394   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00395"></a>00395   <span class="keywordtype">int</span> rc;
<a name="l00396"></a>00396   <span class="keyword">struct </span><a class="code" href="structlsa__filter__type.html">lsa_filter_type</a> filter;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   filter.<a class="code" href="structlsa__filter__type.html#aa5fe7d15c2a49cf18a2bb996e4d07459">typemask</a> = 0xFFFF; <span class="comment">/* all LSAs */</span>
<a name="l00399"></a>00399   filter.<a class="code" href="structlsa__filter__type.html#abfc879daf7d68e4e3e7e9f6ef6d425c1">origin</a> = <a class="code" href="ospf__api_8h.html#a540bc4d38c44ca370a74bc4c97998534">ANY_ORIGIN</a>;
<a name="l00400"></a>00400   filter.<a class="code" href="structlsa__filter__type.html#a122e6de12b070f0a38d9d1a2b5199a9d">num_areas</a> = 0;     <span class="comment">/* all Areas. */</span>
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   msg = <a class="code" href="ospf__api_8h.html#accbf7c0b47a47147f26b0deb89a6adfc">new_msg_register_event</a> (<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (), &amp;filter);
<a name="l00403"></a>00403   <span class="keywordflow">if</span> (!msg)
<a name="l00404"></a>00404     {
<a name="l00405"></a>00405       fprintf (stderr, <span class="stringliteral">&quot;new_msg_register_event failed\n&quot;</span>);
<a name="l00406"></a>00406       <span class="keywordflow">return</span> -1;
<a name="l00407"></a>00407     }
<a name="l00408"></a>00408   rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (oclient, msg);
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   <span class="keywordflow">if</span> (rc != 0)
<a name="l00411"></a>00411     <span class="keywordflow">goto</span> out;
<a name="l00412"></a>00412 
<a name="l00413"></a>00413   msg = <a class="code" href="ospf__api_8h.html#ac5c333f3291f1678f62c8e1cc34800c0">new_msg_sync_lsdb</a> (<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (), &amp;filter);
<a name="l00414"></a>00414   <span class="keywordflow">if</span> (!msg)
<a name="l00415"></a>00415     {
<a name="l00416"></a>00416       fprintf (stderr, <span class="stringliteral">&quot;new_msg_sync_lsdb failed\n&quot;</span>);
<a name="l00417"></a>00417       <span class="keywordflow">return</span> -1;
<a name="l00418"></a>00418     }
<a name="l00419"></a>00419   rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (oclient, msg);
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 out:
<a name="l00422"></a>00422   <span class="keywordflow">return</span> rc;
<a name="l00423"></a>00423 }
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 <span class="comment">/* </span>
<a name="l00426"></a>00426 <span class="comment"> * Synchronous request to originate or update an LSA.</span>
<a name="l00427"></a>00427 <span class="comment"> */</span>
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 <span class="keywordtype">int</span>
<a name="l00430"></a><a class="code" href="ospf__apiclient_8h.html#a0bddf5cada0954167e7361d59fcf8a97">00430</a> <a class="code" href="ospf__apiclient_8c.html#a0bddf5cada0954167e7361d59fcf8a97">ospf_apiclient_lsa_originate</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00431"></a>00431                   <span class="keyword">struct</span> in_addr ifaddr,
<a name="l00432"></a>00432                   <span class="keyword">struct</span> in_addr area_id,
<a name="l00433"></a>00433                   u_char lsa_type,
<a name="l00434"></a>00434                   u_char opaque_type, u_int32_t opaque_id,
<a name="l00435"></a>00435                   <span class="keywordtype">void</span> *opaquedata, <span class="keywordtype">int</span> opaquelen)
<a name="l00436"></a>00436 {
<a name="l00437"></a>00437   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00438"></a>00438   <span class="keywordtype">int</span> rc;
<a name="l00439"></a>00439   u_char buf[<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>];
<a name="l00440"></a>00440   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l00441"></a>00441   u_int32_t tmp;
<a name="l00442"></a>00442 
<a name="l00443"></a>00443 
<a name="l00444"></a>00444   <span class="comment">/* We can only originate opaque LSAs */</span>
<a name="l00445"></a>00445   <span class="keywordflow">if</span> (!<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa_type))
<a name="l00446"></a>00446     {
<a name="l00447"></a>00447       fprintf (stderr, <span class="stringliteral">&quot;Cannot originate non-opaque LSA type %d\n&quot;</span>, lsa_type);
<a name="l00448"></a>00448       <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#a7c12e94786a0ed5da29c40d4c92a162b">OSPF_API_ILLEGALLSATYPE</a>;
<a name="l00449"></a>00449     }
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="comment">/* Make a new LSA from parameters */</span>
<a name="l00452"></a>00452   lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) buf;
<a name="l00453"></a>00453   lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = 0;
<a name="l00454"></a>00454   lsah-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a> = 0;
<a name="l00455"></a>00455   lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> = lsa_type;
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   tmp = <a class="code" href="ospf__opaque_8h.html#a44507a22a8268862dc322c292455d7a6">SET_OPAQUE_LSID</a> (opaque_type, opaque_id);
<a name="l00458"></a>00458   lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr = htonl (tmp);
<a name="l00459"></a>00459   lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>.s_addr = 0;
<a name="l00460"></a>00460   lsah-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> = 0;
<a name="l00461"></a>00461   lsah-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a> = 0;
<a name="l00462"></a>00462   lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a>) + opaquelen);
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (((u_char *) lsah) + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a>), opaquedata,
<a name="l00465"></a>00465       opaquelen);
<a name="l00466"></a>00466 
<a name="l00467"></a>00467   msg = <a class="code" href="ospf__api_8h.html#aded7b8a69fee3be63a7a85276eea1dc6">new_msg_originate_request</a> (<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (),
<a name="l00468"></a>00468                    ifaddr, area_id, lsah);
<a name="l00469"></a>00469   <span class="keywordflow">if</span> (!msg)
<a name="l00470"></a>00470     {
<a name="l00471"></a>00471       fprintf (stderr, <span class="stringliteral">&quot;new_msg_originate_request failed\n&quot;</span>);
<a name="l00472"></a>00472       <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#a49a52186a0e297706895dd5ccac9f585">OSPF_API_NOMEMORY</a>;
<a name="l00473"></a>00473     }
<a name="l00474"></a>00474 
<a name="l00475"></a>00475   rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (oclient, msg);
<a name="l00476"></a>00476   <span class="keywordflow">return</span> rc;
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 <span class="keywordtype">int</span>
<a name="l00480"></a><a class="code" href="ospf__apiclient_8h.html#af068227010b19eadaf3517e85bda0bc1">00480</a> <a class="code" href="ospf__apiclient_8c.html#af068227010b19eadaf3517e85bda0bc1">ospf_apiclient_lsa_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00481"></a>00481                <span class="keyword">struct</span> in_addr area_id, u_char lsa_type,
<a name="l00482"></a>00482                u_char opaque_type, u_int32_t opaque_id)
<a name="l00483"></a>00483 {
<a name="l00484"></a>00484   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00485"></a>00485   <span class="keywordtype">int</span> rc;
<a name="l00486"></a>00486 
<a name="l00487"></a>00487   <span class="comment">/* Only opaque LSA can be deleted */</span>
<a name="l00488"></a>00488   <span class="keywordflow">if</span> (!<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa_type))
<a name="l00489"></a>00489     {
<a name="l00490"></a>00490       fprintf (stderr, <span class="stringliteral">&quot;Cannot delete non-opaque LSA type %d\n&quot;</span>, lsa_type);
<a name="l00491"></a>00491       <span class="keywordflow">return</span> <a class="code" href="ospf__api_8h.html#a7c12e94786a0ed5da29c40d4c92a162b">OSPF_API_ILLEGALLSATYPE</a>;
<a name="l00492"></a>00492     }
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   <span class="comment">/* opaque_id is in host byte order and will be converted</span>
<a name="l00495"></a>00495 <span class="comment">   * to network byte order by new_msg_delete_request */</span>
<a name="l00496"></a>00496   msg = <a class="code" href="ospf__api_8h.html#a3536518a5cb4ebe87ea20cc9efb184ff">new_msg_delete_request</a> (<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a> (),
<a name="l00497"></a>00497                 area_id, lsa_type, opaque_type, opaque_id);
<a name="l00498"></a>00498 
<a name="l00499"></a>00499   rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a> (oclient, msg);
<a name="l00500"></a>00500   <span class="keywordflow">return</span> rc;
<a name="l00501"></a>00501 }
<a name="l00502"></a>00502 
<a name="l00503"></a>00503 <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00504"></a><a class="code" href="ospf__apiclient_8h.html#aa1030e129533ccab57fad62fcdece78f">00504</a> <span class="keywordtype">int</span> <a class="code" href="ospf__apiclient_8c.html#aa1030e129533ccab57fad62fcdece78f">ospf_apiclient_get_router_nexthops</a>(<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00505"></a>00505         <span class="keyword">struct</span> in_addr router_id)
<a name="l00506"></a>00506 {
<a name="l00507"></a>00507     <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00508"></a>00508     <span class="keywordtype">int</span> rc;
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     msg = <a class="code" href="ospf__api_8h.html#ac045ac91e0c109c61669e3e120989cd7">new_msg_get_router_nexthops_request</a>(<a class="code" href="ospf__apiclient_8c.html#aecf054dbe7ce1588a9eb884a70061994">ospf_apiclient_get_seqnr</a>(),
<a name="l00511"></a>00511             router_id);
<a name="l00512"></a>00512 
<a name="l00513"></a>00513     rc = <a class="code" href="ospf__apiclient_8c.html#adef8889ce6cb011d4b155d8802975fdc">ospf_apiclient_send_request</a>(oclient, msg);
<a name="l00514"></a>00514     <span class="keywordflow">return</span> rc;
<a name="l00515"></a>00515 }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00518"></a>00518 <span class="comment"> * Followings are handlers for messages from OSPF daemon</span>
<a name="l00519"></a>00519 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00520"></a>00520 <span class="comment"> */</span>
<a name="l00521"></a>00521 
<a name="l00522"></a>00522 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00523"></a><a class="code" href="ospf__apiclient_8c.html#a7048ce8dbefec68b4d4660fa99e0cdc6">00523</a> <a class="code" href="ospf__apiclient_8c.html#a7048ce8dbefec68b4d4660fa99e0cdc6">ospf_apiclient_handle_ready</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00524"></a>00524 {
<a name="l00525"></a>00525   <span class="keyword">struct </span><a class="code" href="structmsg__ready__notify.html">msg_ready_notify</a> *r;
<a name="l00526"></a>00526   r = (<span class="keyword">struct </span><a class="code" href="structmsg__ready__notify.html">msg_ready_notify</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00527"></a>00527 
<a name="l00528"></a>00528   <span class="comment">/* Invoke registered callback function. */</span>
<a name="l00529"></a>00529   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a0592016b2496673bdac3f8d9ee93eeda">ready_notify</a>)
<a name="l00530"></a>00530     {
<a name="l00531"></a>00531       (oclient-&gt;<a class="code" href="structospf__apiclient.html#a0592016b2496673bdac3f8d9ee93eeda">ready_notify</a>) (r-&gt;<a class="code" href="structmsg__ready__notify.html#aed1056e5f8525b55f3123730c60c6154">lsa_type</a>, r-&gt;<a class="code" href="structmsg__ready__notify.html#a3f4dd1cfaa2e006b3c32ccb5b5982164">opaque_type</a>, r-&gt;<a class="code" href="structmsg__ready__notify.html#abb1e2a3d37f8350bf352a8704cffa2c1">addr</a>);
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00536"></a><a class="code" href="ospf__apiclient_8c.html#ae9ea3ba3886345ca7503a2a94721a2cf">00536</a> <a class="code" href="ospf__apiclient_8c.html#ae9ea3ba3886345ca7503a2a94721a2cf">ospf_apiclient_handle_new_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00537"></a>00537 {
<a name="l00538"></a>00538   <span class="keyword">struct </span><a class="code" href="structmsg__new__if.html">msg_new_if</a> *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
<a name="l00539"></a>00539   n = (<span class="keyword">struct </span><a class="code" href="structmsg__new__if.html">msg_new_if</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00540"></a>00540 
<a name="l00541"></a>00541   <span class="comment">/* Invoke registered callback function. */</span>
<a name="l00542"></a>00542   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a398cdfc26a78fc25316de16f77fdb99b">new_if</a>)
<a name="l00543"></a>00543     {
<a name="l00544"></a>00544       (oclient-&gt;<a class="code" href="structospf__apiclient.html#a398cdfc26a78fc25316de16f77fdb99b">new_if</a>) (n-&gt;<a class="code" href="structmsg__new__if.html#ab07fe09972befc9c888cdb83a7d92cd2">ifaddr</a>, n-&gt;<a class="code" href="structmsg__new__if.html#a484d3dbefaea24641f4a3e6bba7ff59b">area_id</a>);
<a name="l00545"></a>00545     }
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00549"></a><a class="code" href="ospf__apiclient_8c.html#a65f5b91176a1c0753ea95a4635afc10e">00549</a> <a class="code" href="ospf__apiclient_8c.html#a65f5b91176a1c0753ea95a4635afc10e">ospf_apiclient_handle_del_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00550"></a>00550 {
<a name="l00551"></a>00551   <span class="keyword">struct </span><a class="code" href="structmsg__del__if.html">msg_del_if</a> *d;
<a name="l00552"></a>00552   d = (<span class="keyword">struct </span><a class="code" href="structmsg__del__if.html">msg_del_if</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00553"></a>00553 
<a name="l00554"></a>00554   <span class="comment">/* Invoke registered callback function. */</span>
<a name="l00555"></a>00555   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a7ae5f026d54ca569d6e486cc617f5736">del_if</a>)
<a name="l00556"></a>00556     {
<a name="l00557"></a>00557       (oclient-&gt;<a class="code" href="structospf__apiclient.html#a7ae5f026d54ca569d6e486cc617f5736">del_if</a>) (d-&gt;<a class="code" href="structmsg__del__if.html#a425e8d6db676ed1e55b73635b8ce016b">ifaddr</a>);
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559 }
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00562"></a><a class="code" href="ospf__apiclient_8c.html#a9b881c4d0f1c5344c92dd07cb8b11f08">00562</a> <a class="code" href="ospf__apiclient_8c.html#a9b881c4d0f1c5344c92dd07cb8b11f08">ospf_apiclient_handle_ism_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00563"></a>00563                   <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00564"></a>00564 {
<a name="l00565"></a>00565   <span class="keyword">struct </span><a class="code" href="structmsg__ism__change.html">msg_ism_change</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00566"></a>00566   m = (<span class="keyword">struct </span><a class="code" href="structmsg__ism__change.html">msg_ism_change</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00567"></a>00567 
<a name="l00568"></a>00568   <span class="comment">/* Invoke registered callback function. */</span>
<a name="l00569"></a>00569   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a49e257d5cb272c5633ef31875b263bf7">ism_change</a>)
<a name="l00570"></a>00570     {
<a name="l00571"></a>00571       (oclient-&gt;<a class="code" href="structospf__apiclient.html#a49e257d5cb272c5633ef31875b263bf7">ism_change</a>) (m-&gt;<a class="code" href="structmsg__ism__change.html#a7b19087e579447788834bcd09c19a6cb">ifaddr</a>, m-&gt;<a class="code" href="structmsg__ism__change.html#afebcc898dfae3fce3d2da97eb36d3e0f">area_id</a>, m-&gt;<a class="code" href="structmsg__ism__change.html#a6a63caf8b3d86cc2cb9caa26368fcf37">status</a>);
<a name="l00572"></a>00572     }
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 }
<a name="l00575"></a>00575 
<a name="l00576"></a>00576 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00577"></a><a class="code" href="ospf__apiclient_8c.html#aec8455955be1cd0150badae1ac4e9e99">00577</a> <a class="code" href="ospf__apiclient_8c.html#aec8455955be1cd0150badae1ac4e9e99">ospf_apiclient_handle_nsm_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00578"></a>00578                   <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00579"></a>00579 {
<a name="l00580"></a>00580   <span class="keyword">struct </span><a class="code" href="structmsg__nsm__change.html">msg_nsm_change</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00581"></a>00581   m = (<span class="keyword">struct </span><a class="code" href="structmsg__nsm__change.html">msg_nsm_change</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00582"></a>00582 
<a name="l00583"></a>00583   <span class="comment">/* Invoke registered callback function. */</span>
<a name="l00584"></a>00584   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a26f0ce6ef37b4af4852b248c3e3fc8b3">nsm_change</a>)
<a name="l00585"></a>00585     {
<a name="l00586"></a>00586       (oclient-&gt;<a class="code" href="structospf__apiclient.html#a26f0ce6ef37b4af4852b248c3e3fc8b3">nsm_change</a>) (m-&gt;<a class="code" href="structmsg__nsm__change.html#a0d7f33b61f76e9851ea5a9241e3a8f96">ifaddr</a>, m-&gt;<a class="code" href="structmsg__nsm__change.html#ae8dfe8a742b57d47e6cb37a8496caa9f">nbraddr</a>, m-&gt;<a class="code" href="structmsg__nsm__change.html#a7fe0c434888bcc9db5bccee878f3d8e9">router_id</a>, m-&gt;<a class="code" href="structmsg__nsm__change.html#affffb2df5df9b1660e1df5944e46f1ec">status</a>);
<a name="l00587"></a>00587     }
<a name="l00588"></a>00588 }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00591"></a><a class="code" href="ospf__apiclient_8c.html#abe16a29b2433d64ca58002a024c0fef6">00591</a> <a class="code" href="ospf__apiclient_8c.html#abe16a29b2433d64ca58002a024c0fef6">ospf_apiclient_handle_lsa_update</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00592"></a>00592                   <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00593"></a>00593 {
<a name="l00594"></a>00594   <span class="keyword">struct </span><a class="code" href="structmsg__lsa__change__notify.html">msg_lsa_change_notify</a> *cn;
<a name="l00595"></a>00595   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsa;
<a name="l00596"></a>00596   <span class="keywordtype">int</span> lsalen;
<a name="l00597"></a>00597 
<a name="l00598"></a>00598   cn = (<span class="keyword">struct </span><a class="code" href="structmsg__lsa__change__notify.html">msg_lsa_change_notify</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00599"></a>00599 
<a name="l00600"></a>00600   <span class="comment">/* Extract LSA from message */</span>
<a name="l00601"></a>00601   lsalen = ntohs (cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a41d054ddd981ab0b718ca93cf366407f">data</a>.<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00602"></a>00602   lsa = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, lsalen);
<a name="l00603"></a>00603   <span class="keywordflow">if</span> (!lsa)
<a name="l00604"></a>00604     {
<a name="l00605"></a>00605       fprintf (stderr, <span class="stringliteral">&quot;LSA update: Cannot allocate memory for LSA\n&quot;</span>);
<a name="l00606"></a>00606       <span class="keywordflow">return</span>;
<a name="l00607"></a>00607     }
<a name="l00608"></a>00608   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (lsa, &amp;(cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a41d054ddd981ab0b718ca93cf366407f">data</a>), lsalen);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   <span class="comment">/* Invoke registered update callback function */</span>
<a name="l00611"></a>00611   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#af930d03e93af3d069ebf6cc4f0cda419">update_notify</a>)
<a name="l00612"></a>00612     {
<a name="l00613"></a>00613       (oclient-&gt;<a class="code" href="structospf__apiclient.html#af930d03e93af3d069ebf6cc4f0cda419">update_notify</a>) (cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a7b460cf42694451565db194e3fe250ad">ifaddr</a>, cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a9be8a196b739bb879fb18c0503a23a35">area_id</a>, 
<a name="l00614"></a>00614                 cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#af267d46cf19476332978ef9c7eb30181">is_self_originated</a>, lsa);
<a name="l00615"></a>00615     }
<a name="l00616"></a>00616 
<a name="l00617"></a>00617   <span class="comment">/* free memory allocated by ospf apiclient library */</span>
<a name="l00618"></a>00618   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, lsa);
<a name="l00619"></a>00619 }
<a name="l00620"></a>00620 
<a name="l00621"></a>00621 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00622"></a><a class="code" href="ospf__apiclient_8c.html#a4e440f01bb1128e18579a126729fe7ad">00622</a> <a class="code" href="ospf__apiclient_8c.html#a4e440f01bb1128e18579a126729fe7ad">ospf_apiclient_handle_lsa_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00623"></a>00623                   <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00624"></a>00624 {
<a name="l00625"></a>00625   <span class="keyword">struct </span><a class="code" href="structmsg__lsa__change__notify.html">msg_lsa_change_notify</a> *cn;
<a name="l00626"></a>00626   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsa;
<a name="l00627"></a>00627   <span class="keywordtype">int</span> lsalen;
<a name="l00628"></a>00628 
<a name="l00629"></a>00629   cn = (<span class="keyword">struct </span><a class="code" href="structmsg__lsa__change__notify.html">msg_lsa_change_notify</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   <span class="comment">/* Extract LSA from message */</span>
<a name="l00632"></a>00632   lsalen = ntohs (cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a41d054ddd981ab0b718ca93cf366407f">data</a>.<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l00633"></a>00633   lsa = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, lsalen);
<a name="l00634"></a>00634   <span class="keywordflow">if</span> (!lsa)
<a name="l00635"></a>00635     {
<a name="l00636"></a>00636       fprintf (stderr, <span class="stringliteral">&quot;LSA delete: Cannot allocate memory for LSA\n&quot;</span>);
<a name="l00637"></a>00637       <span class="keywordflow">return</span>;
<a name="l00638"></a>00638     }
<a name="l00639"></a>00639   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (lsa, &amp;(cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a41d054ddd981ab0b718ca93cf366407f">data</a>), lsalen);
<a name="l00640"></a>00640 
<a name="l00641"></a>00641   <span class="comment">/* Invoke registered update callback function */</span>
<a name="l00642"></a>00642   <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#ac1bd80e28a1f193f0a4aa838f44f4bc4">delete_notify</a>)
<a name="l00643"></a>00643     {
<a name="l00644"></a>00644       (oclient-&gt;<a class="code" href="structospf__apiclient.html#ac1bd80e28a1f193f0a4aa838f44f4bc4">delete_notify</a>) (cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a7b460cf42694451565db194e3fe250ad">ifaddr</a>, cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#a9be8a196b739bb879fb18c0503a23a35">area_id</a>, 
<a name="l00645"></a>00645                 cn-&gt;<a class="code" href="structmsg__lsa__change__notify.html#af267d46cf19476332978ef9c7eb30181">is_self_originated</a>, lsa);
<a name="l00646"></a>00646     }
<a name="l00647"></a>00647 
<a name="l00648"></a>00648   <span class="comment">/* free memory allocated by ospf apiclient library */</span>
<a name="l00649"></a>00649   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, lsa);
<a name="l00650"></a>00650 }
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00653"></a><a class="code" href="ospf__apiclient_8c.html#a3654bdafbcb33fe4bc140847c029498f">00653</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ospf__apiclient_8c.html#a3654bdafbcb33fe4bc140847c029498f">ospf_apiclient_handle_router_routing_table_change</a>(<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00654"></a>00654 {
<a name="l00655"></a>00655     <span class="keyword">struct </span><a class="code" href="structmsg__router__routing__table__change.html">msg_router_routing_table_change</a> *rc;
<a name="l00656"></a>00656     <span class="keyword">struct </span>in_addr router_id;
<a name="l00657"></a>00657     <span class="keywordtype">int</span> nexthop_count;
<a name="l00658"></a>00658     <span class="keyword">struct </span>in_addr *nexthops;
<a name="l00659"></a>00659 
<a name="l00660"></a>00660     <span class="keywordflow">if</span> (oclient-&gt;<a class="code" href="structospf__apiclient.html#a2f754e37a2f23d8651eb2d432eb4420c">router_routing_table_change_notify</a>)
<a name="l00661"></a>00661     {
<a name="l00662"></a>00662         rc = (<span class="keyword">struct </span><a class="code" href="structmsg__router__routing__table__change.html">msg_router_routing_table_change</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a>(msg-&gt;<a class="code" href="structmsg.html#ac61803aa3ad22d2088fc4b7c6bea1f90">s</a>);
<a name="l00663"></a>00663 
<a name="l00664"></a>00664         router_id = rc-&gt;<a class="code" href="structmsg__router__routing__table__change.html#a4e24e8a4ee6a3b9f6c1c4d74236b7f95">router_id</a>;
<a name="l00665"></a>00665         nexthop_count = ntohl(rc-&gt;<a class="code" href="structmsg__router__routing__table__change.html#ac8107321fcb026e15a417253ed8c63d0">nexthop_count</a>);
<a name="l00666"></a>00666 
<a name="l00667"></a>00667         <span class="keywordflow">if</span> (nexthop_count &gt; 0)
<a name="l00668"></a>00668         {
<a name="l00669"></a>00669             nexthops = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a>(<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, nexthop_count * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> in_addr));
<a name="l00670"></a>00670             <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(nexthops, &amp;rc-&gt;<a class="code" href="structmsg__router__routing__table__change.html#a4d9c498bb7d172ae41c7b14824009491">nexthops</a>[0], nexthop_count * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> in_addr));
<a name="l00671"></a>00671         }
<a name="l00672"></a>00672         <span class="keywordflow">else</span>
<a name="l00673"></a>00673             nexthops = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00674"></a>00674 
<a name="l00675"></a>00675         (oclient-&gt;<a class="code" href="structospf__apiclient.html#a2f754e37a2f23d8651eb2d432eb4420c">router_routing_table_change_notify</a>)(router_id, nexthop_count, nexthops);
<a name="l00676"></a>00676 
<a name="l00677"></a>00677         <span class="keywordflow">if</span> (nexthop_count &gt; 0)
<a name="l00678"></a>00678             <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a>(<a class="code" href="ospf__apiclient_8h.html#a62529919bd27585b217379af6a075841">MTYPE_OSPF_APICLIENT</a>, nexthops);
<a name="l00679"></a>00679     }
<a name="l00680"></a>00680 }
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00683"></a><a class="code" href="ospf__apiclient_8c.html#a065aaa32f4161cea1b10e205ad4d8edd">00683</a> <a class="code" href="ospf__apiclient_8c.html#a065aaa32f4161cea1b10e205ad4d8edd">ospf_apiclient_msghandle</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, <span class="keyword">struct</span> <a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>)
<a name="l00684"></a>00684 {
<a name="l00685"></a>00685   <span class="comment">/* Call message handler function. */</span>
<a name="l00686"></a>00686   <span class="keywordflow">switch</span> (msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>)
<a name="l00687"></a>00687     {
<a name="l00688"></a>00688     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#abe9771bd26557ef17744ac5073363c21">MSG_READY_NOTIFY</a>:
<a name="l00689"></a>00689       <a class="code" href="ospf__apiclient_8c.html#a7048ce8dbefec68b4d4660fa99e0cdc6">ospf_apiclient_handle_ready</a> (oclient, msg);
<a name="l00690"></a>00690       <span class="keywordflow">break</span>;
<a name="l00691"></a>00691     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#af0d534b9546638d59f2e4c9c0edcbcdf">MSG_NEW_IF</a>:
<a name="l00692"></a>00692       <a class="code" href="ospf__apiclient_8c.html#ae9ea3ba3886345ca7503a2a94721a2cf">ospf_apiclient_handle_new_if</a> (oclient, msg);
<a name="l00693"></a>00693       <span class="keywordflow">break</span>;
<a name="l00694"></a>00694     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a9c8256a08f0095d27f738aefb4f8a5db">MSG_DEL_IF</a>:
<a name="l00695"></a>00695       <a class="code" href="ospf__apiclient_8c.html#a65f5b91176a1c0753ea95a4635afc10e">ospf_apiclient_handle_del_if</a> (oclient, msg);
<a name="l00696"></a>00696       <span class="keywordflow">break</span>;
<a name="l00697"></a>00697     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#abe2abd233ea2ab4e2fff482d4e377d96">MSG_ISM_CHANGE</a>:
<a name="l00698"></a>00698       <a class="code" href="ospf__apiclient_8c.html#a9b881c4d0f1c5344c92dd07cb8b11f08">ospf_apiclient_handle_ism_change</a> (oclient, msg);
<a name="l00699"></a>00699       <span class="keywordflow">break</span>;
<a name="l00700"></a>00700     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#aedb910a97bec22fdc4eb5858d558fa7b">MSG_NSM_CHANGE</a>:
<a name="l00701"></a>00701       <a class="code" href="ospf__apiclient_8c.html#aec8455955be1cd0150badae1ac4e9e99">ospf_apiclient_handle_nsm_change</a> (oclient, msg);
<a name="l00702"></a>00702       <span class="keywordflow">break</span>;
<a name="l00703"></a>00703     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a34895bb3424e37147e7383859e77bae2">MSG_LSA_UPDATE_NOTIFY</a>:
<a name="l00704"></a>00704       <a class="code" href="ospf__apiclient_8c.html#abe16a29b2433d64ca58002a024c0fef6">ospf_apiclient_handle_lsa_update</a> (oclient, msg);
<a name="l00705"></a>00705       <span class="keywordflow">break</span>;
<a name="l00706"></a>00706     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#a9081acc8815e23c6c0b6c53d811f82e0">MSG_LSA_DELETE_NOTIFY</a>:
<a name="l00707"></a>00707       <a class="code" href="ospf__apiclient_8c.html#a4e440f01bb1128e18579a126729fe7ad">ospf_apiclient_handle_lsa_delete</a> (oclient, msg);
<a name="l00708"></a>00708       <span class="keywordflow">break</span>;
<a name="l00709"></a>00709     <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00710"></a>00710     <span class="keywordflow">case</span> <a class="code" href="ospf__api_8h.html#af61980ebf7c4e41d70378e90dca524f7">MSG_ROUTER_ROUTING_TABLE_CHANGE</a>:
<a name="l00711"></a>00711       <a class="code" href="ospf__apiclient_8c.html#a3654bdafbcb33fe4bc140847c029498f">ospf_apiclient_handle_router_routing_table_change</a>(oclient, msg);
<a name="l00712"></a>00712       <span class="keywordflow">break</span>;
<a name="l00713"></a>00713     <span class="keywordflow">default</span>:
<a name="l00714"></a>00714       fprintf (stderr, <span class="stringliteral">&quot;ospf_apiclient_read: Unknown message type: %d\n&quot;</span>,
<a name="l00715"></a>00715            msg-&gt;<a class="code" href="structmsg.html#a9ef890b979c0de3cff56d826fb7f420a">hdr</a>.<a class="code" href="structapimsghdr.html#a35e2f4e6a683dbaebaeb9f3e67af99ec">msgtype</a>);
<a name="l00716"></a>00716       <span class="keywordflow">break</span>;
<a name="l00717"></a>00717     }
<a name="l00718"></a>00718 }
<a name="l00719"></a>00719 
<a name="l00720"></a>00720 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00721"></a>00721 <span class="comment"> * Callback handler registration</span>
<a name="l00722"></a>00722 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00723"></a>00723 <span class="comment"> */</span>
<a name="l00724"></a>00724 
<a name="l00725"></a>00725 <span class="keywordtype">void</span>
<a name="l00726"></a><a class="code" href="ospf__apiclient_8c.html#a919781dff26dbaf91b9da60dc8b47f49">00726</a> <a class="code" href="ospf__apiclient_8c.html#a919781dff26dbaf91b9da60dc8b47f49">ospf_apiclient_register_callback</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>,
<a name="l00727"></a>00727                   <span class="keywordtype">void</span> (*ready_notify) (u_char lsa_type,
<a name="l00728"></a>00728                             u_char opaque_type,
<a name="l00729"></a>00729                             <span class="keyword">struct</span> in_addr addr),
<a name="l00730"></a>00730                   <span class="keywordtype">void</span> (*new_if) (<span class="keyword">struct</span> in_addr ifaddr,
<a name="l00731"></a>00731                           <span class="keyword">struct</span> in_addr area_id),
<a name="l00732"></a>00732                   <span class="keywordtype">void</span> (*del_if) (<span class="keyword">struct</span> in_addr ifaddr),
<a name="l00733"></a>00733                   <span class="keywordtype">void</span> (*ism_change) (<span class="keyword">struct</span> in_addr ifaddr,
<a name="l00734"></a>00734                               <span class="keyword">struct</span> in_addr area_id,
<a name="l00735"></a>00735                               u_char status),
<a name="l00736"></a>00736                   <span class="keywordtype">void</span> (*nsm_change) (<span class="keyword">struct</span> in_addr ifaddr,
<a name="l00737"></a>00737                               <span class="keyword">struct</span> in_addr nbraddr,
<a name="l00738"></a>00738                               <span class="keyword">struct</span> in_addr
<a name="l00739"></a>00739                               <a class="code" href="structmsg__router__routing__table__change.html#a4e24e8a4ee6a3b9f6c1c4d74236b7f95">router_id</a>,
<a name="l00740"></a>00740                               u_char status),
<a name="l00741"></a>00741                   <span class="keywordtype">void</span> (*update_notify) (<span class="keyword">struct</span> in_addr
<a name="l00742"></a>00742                              ifaddr,
<a name="l00743"></a>00743                              <span class="keyword">struct</span> in_addr
<a name="l00744"></a>00744                              area_id,
<a name="l00745"></a>00745                              u_char self_origin,
<a name="l00746"></a>00746                              <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *
<a name="l00747"></a>00747                              lsa),
<a name="l00748"></a>00748                   <span class="keywordtype">void</span> (*delete_notify) (<span class="keyword">struct</span> in_addr
<a name="l00749"></a>00749                              ifaddr,
<a name="l00750"></a>00750                              <span class="keyword">struct</span> in_addr
<a name="l00751"></a>00751                              area_id,
<a name="l00752"></a>00752                              u_char self_origin,
<a name="l00753"></a>00753                              <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *
<a name="l00754"></a>00754                              lsa),
<a name="l00755"></a>00755                   <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00756"></a>00756                   <span class="keywordtype">void</span> (*router_routing_table_change_notify)(
<a name="l00757"></a>00757                           <span class="keyword">struct</span> in_addr router_id,
<a name="l00758"></a>00758                           <span class="keywordtype">int</span> <a class="code" href="structmsg__router__routing__table__change.html#ac8107321fcb026e15a417253ed8c63d0">nexthop_count</a>,
<a name="l00759"></a>00759                           <span class="keyword">struct</span> in_addr *<a class="code" href="structmsg__router__routing__table__change.html#a4d9c498bb7d172ae41c7b14824009491">nexthops</a>))
<a name="l00760"></a>00760 {
<a name="l00761"></a>00761   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oclient);
<a name="l00762"></a>00762   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (update_notify);
<a name="l00763"></a>00763 
<a name="l00764"></a>00764   <span class="comment">/* Register callback function */</span>
<a name="l00765"></a>00765   oclient-&gt;<a class="code" href="structospf__apiclient.html#a0592016b2496673bdac3f8d9ee93eeda">ready_notify</a> = ready_notify;
<a name="l00766"></a>00766   oclient-&gt;<a class="code" href="structospf__apiclient.html#a398cdfc26a78fc25316de16f77fdb99b">new_if</a> = new_if;
<a name="l00767"></a>00767   oclient-&gt;<a class="code" href="structospf__apiclient.html#a7ae5f026d54ca569d6e486cc617f5736">del_if</a> = del_if;
<a name="l00768"></a>00768   oclient-&gt;<a class="code" href="structospf__apiclient.html#a49e257d5cb272c5633ef31875b263bf7">ism_change</a> = ism_change;
<a name="l00769"></a>00769   oclient-&gt;<a class="code" href="structospf__apiclient.html#a26f0ce6ef37b4af4852b248c3e3fc8b3">nsm_change</a> = nsm_change;
<a name="l00770"></a>00770   oclient-&gt;<a class="code" href="structospf__apiclient.html#af930d03e93af3d069ebf6cc4f0cda419">update_notify</a> = update_notify;
<a name="l00771"></a>00771   oclient-&gt;<a class="code" href="structospf__apiclient.html#ac1bd80e28a1f193f0a4aa838f44f4bc4">delete_notify</a> = delete_notify;
<a name="l00772"></a>00772   <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00773"></a>00773   oclient-&gt;<a class="code" href="structospf__apiclient.html#a2f754e37a2f23d8651eb2d432eb4420c">router_routing_table_change_notify</a> = router_routing_table_change_notify;
<a name="l00774"></a>00774 }
<a name="l00775"></a>00775 
<a name="l00776"></a>00776 <span class="comment">/* -----------------------------------------------------------</span>
<a name="l00777"></a>00777 <span class="comment"> * Asynchronous message handling</span>
<a name="l00778"></a>00778 <span class="comment"> * -----------------------------------------------------------</span>
<a name="l00779"></a>00779 <span class="comment"> */</span>
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 <span class="keywordtype">int</span>
<a name="l00782"></a><a class="code" href="ospf__apiclient_8h.html#ac20dd71e28279edb1dcaa72837f44ee8">00782</a> <a class="code" href="ospf__apiclient_8c.html#ac20dd71e28279edb1dcaa72837f44ee8">ospf_apiclient_handle_async</a> (<span class="keyword">struct</span> <a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *oclient)
<a name="l00783"></a>00783 {
<a name="l00784"></a>00784   <span class="keyword">struct </span><a class="code" href="structmsg.html">msg</a> *<a class="code" href="structmsg.html">msg</a>;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   <span class="comment">/* Get a message */</span>
<a name="l00787"></a>00787   msg = <a class="code" href="ospf__api_8h.html#ac1363ce9f59f760478f42991585ec26a">msg_read</a> (oclient-&gt;<a class="code" href="structospf__apiclient.html#ae3a5f4d039db64a899c30196b35ecfaa">fd_async</a>);
<a name="l00788"></a>00788 
<a name="l00789"></a>00789   <span class="keywordflow">if</span> (!msg)
<a name="l00790"></a>00790     {
<a name="l00791"></a>00791       <span class="comment">/* Connection broke down */</span>
<a name="l00792"></a>00792       <span class="keywordflow">return</span> -1;
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="comment">/* Handle message */</span>
<a name="l00796"></a>00796   <a class="code" href="ospf__apiclient_8c.html#a065aaa32f4161cea1b10e205ad4d8edd">ospf_apiclient_msghandle</a> (oclient, msg);
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   <span class="comment">/* Don&#39;t forget to free this message */</span>
<a name="l00799"></a>00799   <a class="code" href="ospf__api_8h.html#a073ed64ba5287c503ce8187c2915222b">msg_free</a> (msg);
<a name="l00800"></a>00800 
<a name="l00801"></a>00801   <span class="keywordflow">return</span> 0;
<a name="l00802"></a>00802 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__apiclient_8c.html">ospf_apiclient.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
